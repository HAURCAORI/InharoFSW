
Inharo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001430c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  080144e0  080144e0  000154e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014ca0  08014ca0  000162ec  2**0
                  CONTENTS
  4 .ARM          00000008  08014ca0  08014ca0  00015ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014ca8  08014ca8  000162ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014ca8  08014ca8  00015ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014cac  08014cac  00015cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002ec  20000000  08014cb0  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006a88  200002ec  08014f9c  000162ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006d74  08014f9c  00016d74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000162ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032945  00000000  00000000  0001631c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007f91  00000000  00000000  00048c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000028c8  00000000  00000000  00050bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f39  00000000  00000000  000534c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e321  00000000  00000000  000553f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003c18a  00000000  00000000  0006371a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc8ae  00000000  00000000  0009f8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019c152  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b858  00000000  00000000  0019c198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  001a79f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002ec 	.word	0x200002ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080144c4 	.word	0x080144c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002f0 	.word	0x200002f0
 800020c:	080144c4 	.word	0x080144c4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ee0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ee4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d013      	beq.n	8000f18 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ef0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ef4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000ef8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d00b      	beq.n	8000f18 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f00:	e000      	b.n	8000f04 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f02:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f04:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0f9      	beq.n	8000f02 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f0e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f18:	687b      	ldr	r3, [r7, #4]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <_write>:
#include "stdarg.h"

uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	4619      	mov	r1, r3
 8000f38:	68b8      	ldr	r0, [r7, #8]
 8000f3a:	f010 f8b3 	bl	80110a4 <CDC_Transmit_FS>
	for(int i = 0; i < len; i++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	e009      	b.n	8000f58 <_write+0x32>
	{
		ITM_SendChar(*ptr++);
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	60ba      	str	r2, [r7, #8]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ffc3 	bl	8000ed8 <ITM_SendChar>
	for(int i = 0; i < len; i++)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	dbf1      	blt.n	8000f44 <_write+0x1e>

	}
	return len;
 8000f60:	687b      	ldr	r3, [r7, #4]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <log_format>:

static RTC_TimeTypeDef sTime;
static RTC_DateTypeDef sDate;
static uint32_t g_SubSeconds;

void log_format(const char* tag, const char* message, va_list args) {
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af02      	add	r7, sp, #8
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
	g_SubSeconds = ((255-(uint32_t)(hrtc.Instance->SSR))*1000L)/(255+1); // ms
 8000f78:	4b19      	ldr	r3, [pc, #100]	@ (8000fe0 <log_format+0x74>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f7e:	4a19      	ldr	r2, [pc, #100]	@ (8000fe4 <log_format+0x78>)
 8000f80:	fb02 f303 	mul.w	r3, r2, r3
 8000f84:	f503 3379 	add.w	r3, r3, #254976	@ 0x3e400
 8000f88:	3318      	adds	r3, #24
 8000f8a:	0a1b      	lsrs	r3, r3, #8
 8000f8c:	4a16      	ldr	r2, [pc, #88]	@ (8000fe8 <log_format+0x7c>)
 8000f8e:	6013      	str	r3, [r2, #0]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000f90:	2200      	movs	r2, #0
 8000f92:	4916      	ldr	r1, [pc, #88]	@ (8000fec <log_format+0x80>)
 8000f94:	4812      	ldr	r0, [pc, #72]	@ (8000fe0 <log_format+0x74>)
 8000f96:	f006 fe70 	bl	8007c7a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4914      	ldr	r1, [pc, #80]	@ (8000ff0 <log_format+0x84>)
 8000f9e:	4810      	ldr	r0, [pc, #64]	@ (8000fe0 <log_format+0x74>)
 8000fa0:	f006 ff4d 	bl	8007e3e <HAL_RTC_GetDate>

	printf("%02d:%02d:%02d,%03lu[%s] ", sTime.Hours, sTime.Minutes, sTime.Seconds, g_SubSeconds, tag);
 8000fa4:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <log_format+0x80>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <log_format+0x80>)
 8000fac:	785b      	ldrb	r3, [r3, #1]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <log_format+0x80>)
 8000fb2:	789b      	ldrb	r3, [r3, #2]
 8000fb4:	461c      	mov	r4, r3
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <log_format+0x7c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	9201      	str	r2, [sp, #4]
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	4623      	mov	r3, r4
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	480b      	ldr	r0, [pc, #44]	@ (8000ff4 <log_format+0x88>)
 8000fc6:	f011 faff 	bl	80125c8 <iprintf>
	vprintf(message, args);
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	68b8      	ldr	r0, [r7, #8]
 8000fce:	f011 fbaf 	bl	8012730 <viprintf>
	printf("\r\n");
 8000fd2:	4809      	ldr	r0, [pc, #36]	@ (8000ff8 <log_format+0x8c>)
 8000fd4:	f011 fb60 	bl	8012698 <puts>
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd90      	pop	{r4, r7, pc}
 8000fe0:	20000448 	.word	0x20000448
 8000fe4:	fffffc18 	.word	0xfffffc18
 8000fe8:	20000320 	.word	0x20000320
 8000fec:	20000308 	.word	0x20000308
 8000ff0:	2000031c 	.word	0x2000031c
 8000ff4:	080144e0 	.word	0x080144e0
 8000ff8:	080144fc 	.word	0x080144fc

08000ffc <logi>:

void logi(const char* message, ...) {
 8000ffc:	b40f      	push	{r0, r1, r2, r3}
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	607b      	str	r3, [r7, #4]
	log_format("INFO", message, args);
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6939      	ldr	r1, [r7, #16]
 800100e:	4805      	ldr	r0, [pc, #20]	@ (8001024 <logi+0x28>)
 8001010:	f7ff ffac 	bl	8000f6c <log_format>
	va_end(args);
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800101e:	b004      	add	sp, #16
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	08014500 	.word	0x08014500

08001028 <logd>:

void logd(const char* message, ...) {
 8001028:	b40f      	push	{r0, r1, r2, r3}
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	607b      	str	r3, [r7, #4]
	log_format("DEBUG", message, args);
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	6939      	ldr	r1, [r7, #16]
 800103a:	4805      	ldr	r0, [pc, #20]	@ (8001050 <logd+0x28>)
 800103c:	f7ff ff96 	bl	8000f6c <log_format>
	va_end(args);
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800104a:	b004      	add	sp, #16
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	08014508 	.word	0x08014508

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001058:	f001 fec6 	bl	8002de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105c:	f000 fd7e 	bl	8001b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001060:	f000 fdea 	bl	8001c38 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001064:	f000 fd18 	bl	8001a98 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001068:	f000 fe8e 	bl	8001d88 <MX_I2C1_Init>
  MX_RTC_Init();
 800106c:	f000 feba 	bl	8001de4 <MX_RTC_Init>
  MX_SPI2_Init();
 8001070:	f000 ff12 	bl	8001e98 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001074:	f000 ff46 	bl	8001f04 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001078:	f000 ffd0 	bl	800201c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800107c:	f000 fff8 	bl	8002070 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001080:	f001 f820 	bl	80020c4 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8001084:	f00a fb3e 	bl	800b704 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001088:	f00c fc36 	bl	800d8f8 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Telemetry */
  TelemetryHandle = osTimerNew(TelemetrySend, osTimerPeriodic, NULL, &Telemetry_attributes);
 800108c:	4b14      	ldr	r3, [pc, #80]	@ (80010e0 <main+0x8c>)
 800108e:	2200      	movs	r2, #0
 8001090:	2101      	movs	r1, #1
 8001092:	4814      	ldr	r0, [pc, #80]	@ (80010e4 <main+0x90>)
 8001094:	f00c fd3c 	bl	800db10 <osTimerNew>
 8001098:	4603      	mov	r3, r0
 800109a:	4a13      	ldr	r2, [pc, #76]	@ (80010e8 <main+0x94>)
 800109c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(TelemetryHandle, 3000);
 800109e:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <main+0x94>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80010a6:	4618      	mov	r0, r3
 80010a8:	f00c fdae 	bl	800dc08 <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Main */
  MainHandle = osThreadNew(MainTask, NULL, &Main_attributes);
 80010ac:	4a0f      	ldr	r2, [pc, #60]	@ (80010ec <main+0x98>)
 80010ae:	2100      	movs	r1, #0
 80010b0:	480f      	ldr	r0, [pc, #60]	@ (80010f0 <main+0x9c>)
 80010b2:	f00c fc6b 	bl	800d98c <osThreadNew>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4a0e      	ldr	r2, [pc, #56]	@ (80010f4 <main+0xa0>)
 80010ba:	6013      	str	r3, [r2, #0]

  /* creation of Communication */
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 80010bc:	4a0e      	ldr	r2, [pc, #56]	@ (80010f8 <main+0xa4>)
 80010be:	2100      	movs	r1, #0
 80010c0:	480e      	ldr	r0, [pc, #56]	@ (80010fc <main+0xa8>)
 80010c2:	f00c fc63 	bl	800d98c <osThreadNew>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001100 <main+0xac>)
 80010ca:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of EventReceived */
  EventReceivedHandle = osEventFlagsNew(&EventReceived_attributes);
 80010cc:	480d      	ldr	r0, [pc, #52]	@ (8001104 <main+0xb0>)
 80010ce:	f00c fdc9 	bl	800dc64 <osEventFlagsNew>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001108 <main+0xb4>)
 80010d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010d8:	f00c fc32 	bl	800d940 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <main+0x88>
 80010e0:	080148f4 	.word	0x080148f4
 80010e4:	080012d9 	.word	0x080012d9
 80010e8:	2000032c 	.word	0x2000032c
 80010ec:	080148ac 	.word	0x080148ac
 80010f0:	08001121 	.word	0x08001121
 80010f4:	20000324 	.word	0x20000324
 80010f8:	080148d0 	.word	0x080148d0
 80010fc:	08001199 	.word	0x08001199
 8001100:	20000328 	.word	0x20000328
 8001104:	08014904 	.word	0x08014904
 8001108:	20000330 	.word	0x20000330

0800110c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//uint8_t buffer[14] = {};

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT(&huart3, (uint8_t *)buffer, sizeof(buffer));
    printf("%s\n",buffer);
    printf("receive\n");
    */
  }
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <MainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MainTask */
void MainTask(void *argument)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001128:	f00f fece 	bl	8010ec8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  //HAL_UART_Receive_IT(&huart3, (uint8_t *) buffer, sizeof(buffer));
  //uint8_t data[]= {0x7E, 0x00, 0x0A, 0x01, 0x01, 0xCC, 0xCC, 0x00, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x71};
  logi("Initializing...");
 800112c:	4814      	ldr	r0, [pc, #80]	@ (8001180 <MainTask+0x60>)
 800112e:	f7ff ff65 	bl	8000ffc <logi>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001138:	4812      	ldr	r0, [pc, #72]	@ (8001184 <MainTask+0x64>)
 800113a:	f002 fc35 	bl	80039a8 <HAL_GPIO_WritePin>
  Init_BMP390();
 800113e:	f001 fc95 	bl	8002a6c <Init_BMP390>
  Init_BNO055();
 8001142:	f001 fd07 	bl	8002b54 <Init_BNO055>
  Init_SD();
 8001146:	f001 fd13 	bl	8002b70 <Init_SD>
  Init_Servo(&hservo1, &hservo2, &hservo3);
 800114a:	4a0f      	ldr	r2, [pc, #60]	@ (8001188 <MainTask+0x68>)
 800114c:	490f      	ldr	r1, [pc, #60]	@ (800118c <MainTask+0x6c>)
 800114e:	4810      	ldr	r0, [pc, #64]	@ (8001190 <MainTask+0x70>)
 8001150:	f001 fd16 	bl	8002b80 <Init_Servo>
  osDelay(100);
 8001154:	2064      	movs	r0, #100	@ 0x64
 8001156:	f00c fcab 	bl	800dab0 <osDelay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001160:	4808      	ldr	r0, [pc, #32]	@ (8001184 <MainTask+0x64>)
 8001162:	f002 fc21 	bl	80039a8 <HAL_GPIO_WritePin>
  logi("Initialized");
 8001166:	480b      	ldr	r0, [pc, #44]	@ (8001194 <MainTask+0x74>)
 8001168:	f7ff ff48 	bl	8000ffc <logi>
  for(;;)
  {
    osDelay(1000);
 800116c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001170:	f00c fc9e 	bl	800dab0 <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001174:	2120      	movs	r1, #32
 8001176:	4803      	ldr	r0, [pc, #12]	@ (8001184 <MainTask+0x64>)
 8001178:	f002 fc2f 	bl	80039da <HAL_GPIO_TogglePin>
    osDelay(1000);
 800117c:	bf00      	nop
 800117e:	e7f5      	b.n	800116c <MainTask+0x4c>
 8001180:	0801454c 	.word	0x0801454c
 8001184:	40020000 	.word	0x40020000
 8001188:	20000344 	.word	0x20000344
 800118c:	2000033c 	.word	0x2000033c
 8001190:	20000334 	.word	0x20000334
 8001194:	0801455c 	.word	0x0801455c

08001198 <CommunicationTask>:
* @brief Function implementing the Communication thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CommunicationTask */
void CommunicationTask(void *argument) {
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af02      	add	r7, sp, #8
 800119e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN CommunicationTask */
	/* Infinite loop */
	uint32_t event_flag;
	uint32_t buffer;
	uint16_t cmd = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef status;
	for (;;) {
		event_flag = osEventFlagsWait(EventReceivedHandle, RECEIVED_USB,
 80011a4:	4b42      	ldr	r3, [pc, #264]	@ (80012b0 <CommunicationTask+0x118>)
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ac:	2200      	movs	r2, #0
 80011ae:	2101      	movs	r1, #1
 80011b0:	f00c fdda 	bl	800dd68 <osEventFlagsWait>
 80011b4:	6178      	str	r0, [r7, #20]
				osFlagsWaitAny, 1000);
		if (event_flag & RECEIVED_USB) {
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0f1      	beq.n	80011a4 <CommunicationTask+0xc>
			Buzzer_Once();
 80011c0:	f001 fc40 	bl	8002a44 <Buzzer_Once>
			memcpy(&cmd, usb_rx_buffer.buffer, DEBUG_CMD_SIZE);
 80011c4:	4b3b      	ldr	r3, [pc, #236]	@ (80012b4 <CommunicationTask+0x11c>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	817b      	strh	r3, [r7, #10]
			switch (cmd) {
 80011ca:	897b      	ldrh	r3, [r7, #10]
 80011cc:	f647 2262 	movw	r2, #31330	@ 0x7a62
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d00c      	beq.n	80011ee <CommunicationTask+0x56>
 80011d4:	f647 2262 	movw	r2, #31330	@ 0x7a62
 80011d8:	4293      	cmp	r3, r2
 80011da:	dce3      	bgt.n	80011a4 <CommunicationTask+0xc>
 80011dc:	f646 4263 	movw	r2, #27747	@ 0x6c63
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d012      	beq.n	800120a <CommunicationTask+0x72>
 80011e4:	f247 2270 	movw	r2, #29296	@ 0x7270
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d01d      	beq.n	8001228 <CommunicationTask+0x90>
 80011ec:	e05f      	b.n	80012ae <CommunicationTask+0x116>
			case DEBUG_CMD_BUZZER:
				logd("Buzzer");
 80011ee:	4832      	ldr	r0, [pc, #200]	@ (80012b8 <CommunicationTask+0x120>)
 80011f0:	f7ff ff1a 	bl	8001028 <logd>
				osDelay(100);
 80011f4:	2064      	movs	r0, #100	@ 0x64
 80011f6:	f00c fc5b 	bl	800dab0 <osDelay>
				Buzzer_Once();
 80011fa:	f001 fc23 	bl	8002a44 <Buzzer_Once>
				osDelay(100);
 80011fe:	2064      	movs	r0, #100	@ 0x64
 8001200:	f00c fc56 	bl	800dab0 <osDelay>
				Buzzer_Once();
 8001204:	f001 fc1e 	bl	8002a44 <Buzzer_Once>
				break;
 8001208:	e051      	b.n	80012ae <CommunicationTask+0x116>
			case DEBUG_CMD_CALIBRATION:
				status = BMP390_ReadCalibration();
 800120a:	f001 f8a9 	bl	8002360 <BMP390_ReadCalibration>
 800120e:	4603      	mov	r3, r0
 8001210:	74fb      	strb	r3, [r7, #19]
				if(status == HAL_OK) {
 8001212:	7cfb      	ldrb	r3, [r7, #19]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d103      	bne.n	8001220 <CommunicationTask+0x88>
				  logi("BMP390 CAL Complete.");
 8001218:	4828      	ldr	r0, [pc, #160]	@ (80012bc <CommunicationTask+0x124>)
 800121a:	f7ff feef 	bl	8000ffc <logi>
				} else {
					logi("BMP390 CAL Fail.");
				}
				break;
 800121e:	e046      	b.n	80012ae <CommunicationTask+0x116>
					logi("BMP390 CAL Fail.");
 8001220:	4827      	ldr	r0, [pc, #156]	@ (80012c0 <CommunicationTask+0x128>)
 8001222:	f7ff feeb 	bl	8000ffc <logi>
				break;
 8001226:	e042      	b.n	80012ae <CommunicationTask+0x116>
			case DEBUG_CMD_PRESSURE:
				logd("Pressure");
 8001228:	4826      	ldr	r0, [pc, #152]	@ (80012c4 <CommunicationTask+0x12c>)
 800122a:	f7ff fefd 	bl	8001028 <logd>

				if(BMP390_ReadRawPressure(&buffer, 10) != HAL_OK) {
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	210a      	movs	r1, #10
 8001234:	4618      	mov	r0, r3
 8001236:	f001 f9e1 	bl	80025fc <BMP390_ReadRawPressure>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d002      	beq.n	8001246 <CommunicationTask+0xae>
					logi("BMP Read Pressure Error.");
 8001240:	4821      	ldr	r0, [pc, #132]	@ (80012c8 <CommunicationTask+0x130>)
 8001242:	f7ff fedb 	bl	8000ffc <logi>
				}
				sensor_data.pressure = BMP390_CompensatePressure(buffer);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4618      	mov	r0, r3
 800124a:	f000 ffab 	bl	80021a4 <BMP390_CompensatePressure>
 800124e:	eef0 7a40 	vmov.f32	s15, s0
 8001252:	4b1e      	ldr	r3, [pc, #120]	@ (80012cc <CommunicationTask+0x134>)
 8001254:	edc3 7a00 	vstr	s15, [r3]

				if(BMP390_ReadRawTemperature(&buffer, 10) != HAL_OK) {
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	210a      	movs	r1, #10
 800125e:	4618      	mov	r0, r3
 8001260:	f001 f9ee 	bl	8002640 <BMP390_ReadRawTemperature>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d002      	beq.n	8001270 <CommunicationTask+0xd8>
					logi("BMP Read Temperature Error.");
 800126a:	4819      	ldr	r0, [pc, #100]	@ (80012d0 <CommunicationTask+0x138>)
 800126c:	f7ff fec6 	bl	8000ffc <logi>
				}
				sensor_data.temperature =  BMP390_CompensateTemperature(buffer);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4618      	mov	r0, r3
 8001274:	f000 ff60 	bl	8002138 <BMP390_CompensateTemperature>
 8001278:	eef0 7a40 	vmov.f32	s15, s0
 800127c:	4b13      	ldr	r3, [pc, #76]	@ (80012cc <CommunicationTask+0x134>)
 800127e:	edc3 7a01 	vstr	s15, [r3, #4]

				logd("Temperature %f / pressure %f", sensor_data.temperature, sensor_data.pressure);
 8001282:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <CommunicationTask+0x134>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f97e 	bl	8000588 <__aeabi_f2d>
 800128c:	4604      	mov	r4, r0
 800128e:	460d      	mov	r5, r1
 8001290:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <CommunicationTask+0x134>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f977 	bl	8000588 <__aeabi_f2d>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	e9cd 2300 	strd	r2, r3, [sp]
 80012a2:	4622      	mov	r2, r4
 80012a4:	462b      	mov	r3, r5
 80012a6:	480b      	ldr	r0, [pc, #44]	@ (80012d4 <CommunicationTask+0x13c>)
 80012a8:	f7ff febe 	bl	8001028 <logd>

				break;
 80012ac:	bf00      	nop
		event_flag = osEventFlagsWait(EventReceivedHandle, RECEIVED_USB,
 80012ae:	e779      	b.n	80011a4 <CommunicationTask+0xc>
 80012b0:	20000330 	.word	0x20000330
 80012b4:	2000034c 	.word	0x2000034c
 80012b8:	08014568 	.word	0x08014568
 80012bc:	08014570 	.word	0x08014570
 80012c0:	08014588 	.word	0x08014588
 80012c4:	0801459c 	.word	0x0801459c
 80012c8:	080145a8 	.word	0x080145a8
 80012cc:	20000358 	.word	0x20000358
 80012d0:	080145c4 	.word	0x080145c4
 80012d4:	080145e0 	.word	0x080145e0

080012d8 <TelemetrySend>:
	/* USER CODE END CommunicationTask */
}

/* TelemetrySend function */
void TelemetrySend(void *argument)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TelemetrySend */
	logd("Telemetry");
 80012e0:	4803      	ldr	r0, [pc, #12]	@ (80012f0 <TelemetrySend+0x18>)
 80012e2:	f7ff fea1 	bl	8001028 <logd>
  /* USER CODE END TelemetrySend */
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	08014530 	.word	0x08014530

080012f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a04      	ldr	r2, [pc, #16]	@ (8001314 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d101      	bne.n	800130a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001306:	f001 fd91 	bl	8002e2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40001000 	.word	0x40001000

08001318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  printf("Error_Handler\r\n");
 800131c:	4803      	ldr	r0, [pc, #12]	@ (800132c <Error_Handler+0x14>)
 800131e:	f011 f9bb 	bl	8012698 <puts>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001322:	b672      	cpsid	i
}
 8001324:	bf00      	nop
  __disable_irq();

  while (1)
  {
	  break;
 8001326:	bf00      	nop
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	08014600 	.word	0x08014600

08001330 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <HAL_MspInit+0x54>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133e:	4a11      	ldr	r2, [pc, #68]	@ (8001384 <HAL_MspInit+0x54>)
 8001340:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001344:	6453      	str	r3, [r2, #68]	@ 0x44
 8001346:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <HAL_MspInit+0x54>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <HAL_MspInit+0x54>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <HAL_MspInit+0x54>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001360:	6413      	str	r3, [r2, #64]	@ 0x40
 8001362:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <HAL_MspInit+0x54>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	210f      	movs	r1, #15
 8001372:	f06f 0001 	mvn.w	r0, #1
 8001376:	f002 f8c7 	bl	8003508 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800

08001388 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	@ 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a17      	ldr	r2, [pc, #92]	@ (8001404 <HAL_ADC_MspInit+0x7c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d127      	bne.n	80013fa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	4b16      	ldr	r3, [pc, #88]	@ (8001408 <HAL_ADC_MspInit+0x80>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b2:	4a15      	ldr	r2, [pc, #84]	@ (8001408 <HAL_ADC_MspInit+0x80>)
 80013b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ba:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <HAL_ADC_MspInit+0x80>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <HAL_ADC_MspInit+0x80>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001408 <HAL_ADC_MspInit+0x80>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <HAL_ADC_MspInit+0x80>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013e2:	2303      	movs	r3, #3
 80013e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e6:	2303      	movs	r3, #3
 80013e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	@ (800140c <HAL_ADC_MspInit+0x84>)
 80013f6:	f002 f943 	bl	8003680 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	@ 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40012000 	.word	0x40012000
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000

08001410 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	@ 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a19      	ldr	r2, [pc, #100]	@ (8001494 <HAL_I2C_MspInit+0x84>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d12c      	bne.n	800148c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <HAL_I2C_MspInit+0x88>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a17      	ldr	r2, [pc, #92]	@ (8001498 <HAL_I2C_MspInit+0x88>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <HAL_I2C_MspInit+0x88>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800144e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001454:	2312      	movs	r3, #18
 8001456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001460:	2304      	movs	r3, #4
 8001462:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	480c      	ldr	r0, [pc, #48]	@ (800149c <HAL_I2C_MspInit+0x8c>)
 800146c:	f002 f908 	bl	8003680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <HAL_I2C_MspInit+0x88>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	4a07      	ldr	r2, [pc, #28]	@ (8001498 <HAL_I2C_MspInit+0x88>)
 800147a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800147e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001480:	4b05      	ldr	r3, [pc, #20]	@ (8001498 <HAL_I2C_MspInit+0x88>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800148c:	bf00      	nop
 800148e:	3728      	adds	r7, #40	@ 0x28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40005400 	.word	0x40005400
 8001498:	40023800 	.word	0x40023800
 800149c:	40020400 	.word	0x40020400

080014a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b09a      	sub	sp, #104	@ 0x68
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	225c      	movs	r2, #92	@ 0x5c
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f011 f9db 	bl	801286c <memset>
  if(hrtc->Instance==RTC)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a0c      	ldr	r2, [pc, #48]	@ (80014ec <HAL_RTC_MspInit+0x4c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d111      	bne.n	80014e4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014c0:	2320      	movs	r3, #32
 80014c2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80014c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	4618      	mov	r0, r3
 80014d0:	f005 fb44 	bl	8006b5c <HAL_RCCEx_PeriphCLKConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80014da:	f7ff ff1d 	bl	8001318 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014de:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <HAL_RTC_MspInit+0x50>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014e4:	bf00      	nop
 80014e6:	3768      	adds	r7, #104	@ 0x68
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40002800 	.word	0x40002800
 80014f0:	42470e3c 	.word	0x42470e3c

080014f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	@ 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a19      	ldr	r2, [pc, #100]	@ (8001578 <HAL_SPI_MspInit+0x84>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d12c      	bne.n	8001570 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b18      	ldr	r3, [pc, #96]	@ (800157c <HAL_SPI_MspInit+0x88>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	4a17      	ldr	r2, [pc, #92]	@ (800157c <HAL_SPI_MspInit+0x88>)
 8001520:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001524:	6413      	str	r3, [r2, #64]	@ 0x40
 8001526:	4b15      	ldr	r3, [pc, #84]	@ (800157c <HAL_SPI_MspInit+0x88>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <HAL_SPI_MspInit+0x88>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a10      	ldr	r2, [pc, #64]	@ (800157c <HAL_SPI_MspInit+0x88>)
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <HAL_SPI_MspInit+0x88>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800154e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155c:	2303      	movs	r3, #3
 800155e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001560:	2305      	movs	r3, #5
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4619      	mov	r1, r3
 800156a:	4805      	ldr	r0, [pc, #20]	@ (8001580 <HAL_SPI_MspInit+0x8c>)
 800156c:	f002 f888 	bl	8003680 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	@ 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40003800 	.word	0x40003800
 800157c:	40023800 	.word	0x40023800
 8001580:	40020400 	.word	0x40020400

08001584 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0b      	ldr	r2, [pc, #44]	@ (80015c0 <HAL_TIM_Base_MspInit+0x3c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d10d      	bne.n	80015b2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <HAL_TIM_Base_MspInit+0x40>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	4a09      	ldr	r2, [pc, #36]	@ (80015c4 <HAL_TIM_Base_MspInit+0x40>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a6:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <HAL_TIM_Base_MspInit+0x40>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015b2:	bf00      	nop
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40000400 	.word	0x40000400
 80015c4:	40023800 	.word	0x40023800

080015c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a12      	ldr	r2, [pc, #72]	@ (8001630 <HAL_TIM_MspPostInit+0x68>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d11e      	bne.n	8001628 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <HAL_TIM_MspPostInit+0x6c>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a10      	ldr	r2, [pc, #64]	@ (8001634 <HAL_TIM_MspPostInit+0x6c>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <HAL_TIM_MspPostInit+0x6c>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001606:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800160a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001618:	2302      	movs	r3, #2
 800161a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	4619      	mov	r1, r3
 8001622:	4805      	ldr	r0, [pc, #20]	@ (8001638 <HAL_TIM_MspPostInit+0x70>)
 8001624:	f002 f82c 	bl	8003680 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001628:	bf00      	nop
 800162a:	3720      	adds	r7, #32
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40000400 	.word	0x40000400
 8001634:	40023800 	.word	0x40023800
 8001638:	40020800 	.word	0x40020800

0800163c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08e      	sub	sp, #56	@ 0x38
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a4f      	ldr	r2, [pc, #316]	@ (8001798 <HAL_UART_MspInit+0x15c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d12c      	bne.n	80016b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
 8001662:	4b4e      	ldr	r3, [pc, #312]	@ (800179c <HAL_UART_MspInit+0x160>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001666:	4a4d      	ldr	r2, [pc, #308]	@ (800179c <HAL_UART_MspInit+0x160>)
 8001668:	f043 0310 	orr.w	r3, r3, #16
 800166c:	6453      	str	r3, [r2, #68]	@ 0x44
 800166e:	4b4b      	ldr	r3, [pc, #300]	@ (800179c <HAL_UART_MspInit+0x160>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	623b      	str	r3, [r7, #32]
 8001678:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	4b47      	ldr	r3, [pc, #284]	@ (800179c <HAL_UART_MspInit+0x160>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	4a46      	ldr	r2, [pc, #280]	@ (800179c <HAL_UART_MspInit+0x160>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6313      	str	r3, [r2, #48]	@ 0x30
 800168a:	4b44      	ldr	r3, [pc, #272]	@ (800179c <HAL_UART_MspInit+0x160>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001696:	23c0      	movs	r3, #192	@ 0xc0
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016a6:	2307      	movs	r3, #7
 80016a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ae:	4619      	mov	r1, r3
 80016b0:	483b      	ldr	r0, [pc, #236]	@ (80017a0 <HAL_UART_MspInit+0x164>)
 80016b2:	f001 ffe5 	bl	8003680 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016b6:	e06b      	b.n	8001790 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a39      	ldr	r2, [pc, #228]	@ (80017a4 <HAL_UART_MspInit+0x168>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d12c      	bne.n	800171c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
 80016c6:	4b35      	ldr	r3, [pc, #212]	@ (800179c <HAL_UART_MspInit+0x160>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	4a34      	ldr	r2, [pc, #208]	@ (800179c <HAL_UART_MspInit+0x160>)
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d2:	4b32      	ldr	r3, [pc, #200]	@ (800179c <HAL_UART_MspInit+0x160>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016da:	61bb      	str	r3, [r7, #24]
 80016dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	4b2e      	ldr	r3, [pc, #184]	@ (800179c <HAL_UART_MspInit+0x160>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	4a2d      	ldr	r2, [pc, #180]	@ (800179c <HAL_UART_MspInit+0x160>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ee:	4b2b      	ldr	r3, [pc, #172]	@ (800179c <HAL_UART_MspInit+0x160>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016fa:	230c      	movs	r3, #12
 80016fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800170a:	2307      	movs	r3, #7
 800170c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001712:	4619      	mov	r1, r3
 8001714:	4824      	ldr	r0, [pc, #144]	@ (80017a8 <HAL_UART_MspInit+0x16c>)
 8001716:	f001 ffb3 	bl	8003680 <HAL_GPIO_Init>
}
 800171a:	e039      	b.n	8001790 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART3)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a22      	ldr	r2, [pc, #136]	@ (80017ac <HAL_UART_MspInit+0x170>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d134      	bne.n	8001790 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <HAL_UART_MspInit+0x160>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	4a1b      	ldr	r2, [pc, #108]	@ (800179c <HAL_UART_MspInit+0x160>)
 8001730:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001734:	6413      	str	r3, [r2, #64]	@ 0x40
 8001736:	4b19      	ldr	r3, [pc, #100]	@ (800179c <HAL_UART_MspInit+0x160>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b15      	ldr	r3, [pc, #84]	@ (800179c <HAL_UART_MspInit+0x160>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	4a14      	ldr	r2, [pc, #80]	@ (800179c <HAL_UART_MspInit+0x160>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	6313      	str	r3, [r2, #48]	@ 0x30
 8001752:	4b12      	ldr	r3, [pc, #72]	@ (800179c <HAL_UART_MspInit+0x160>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800175e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001770:	2307      	movs	r3, #7
 8001772:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001778:	4619      	mov	r1, r3
 800177a:	480d      	ldr	r0, [pc, #52]	@ (80017b0 <HAL_UART_MspInit+0x174>)
 800177c:	f001 ff80 	bl	8003680 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001780:	2200      	movs	r2, #0
 8001782:	2105      	movs	r1, #5
 8001784:	2027      	movs	r0, #39	@ 0x27
 8001786:	f001 febf 	bl	8003508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800178a:	2027      	movs	r0, #39	@ 0x27
 800178c:	f001 fed8 	bl	8003540 <HAL_NVIC_EnableIRQ>
}
 8001790:	bf00      	nop
 8001792:	3738      	adds	r7, #56	@ 0x38
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40011000 	.word	0x40011000
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020400 	.word	0x40020400
 80017a4:	40004400 	.word	0x40004400
 80017a8:	40020000 	.word	0x40020000
 80017ac:	40004800 	.word	0x40004800
 80017b0:	40020800 	.word	0x40020800

080017b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08e      	sub	sp, #56	@ 0x38
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	4b33      	ldr	r3, [pc, #204]	@ (8001898 <HAL_InitTick+0xe4>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017cc:	4a32      	ldr	r2, [pc, #200]	@ (8001898 <HAL_InitTick+0xe4>)
 80017ce:	f043 0310 	orr.w	r3, r3, #16
 80017d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d4:	4b30      	ldr	r3, [pc, #192]	@ (8001898 <HAL_InitTick+0xe4>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d8:	f003 0310 	and.w	r3, r3, #16
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017e0:	f107 0210 	add.w	r2, r7, #16
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4611      	mov	r1, r2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f005 f984 	bl	8006af8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017f0:	6a3b      	ldr	r3, [r7, #32]
 80017f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d103      	bne.n	8001802 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017fa:	f005 f955 	bl	8006aa8 <HAL_RCC_GetPCLK1Freq>
 80017fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8001800:	e004      	b.n	800180c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001802:	f005 f951 	bl	8006aa8 <HAL_RCC_GetPCLK1Freq>
 8001806:	4603      	mov	r3, r0
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800180c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800180e:	4a23      	ldr	r2, [pc, #140]	@ (800189c <HAL_InitTick+0xe8>)
 8001810:	fba2 2303 	umull	r2, r3, r2, r3
 8001814:	0c9b      	lsrs	r3, r3, #18
 8001816:	3b01      	subs	r3, #1
 8001818:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800181a:	4b21      	ldr	r3, [pc, #132]	@ (80018a0 <HAL_InitTick+0xec>)
 800181c:	4a21      	ldr	r2, [pc, #132]	@ (80018a4 <HAL_InitTick+0xf0>)
 800181e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001820:	4b1f      	ldr	r3, [pc, #124]	@ (80018a0 <HAL_InitTick+0xec>)
 8001822:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001826:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001828:	4a1d      	ldr	r2, [pc, #116]	@ (80018a0 <HAL_InitTick+0xec>)
 800182a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800182c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800182e:	4b1c      	ldr	r3, [pc, #112]	@ (80018a0 <HAL_InitTick+0xec>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001834:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <HAL_InitTick+0xec>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183a:	4b19      	ldr	r3, [pc, #100]	@ (80018a0 <HAL_InitTick+0xec>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001840:	4817      	ldr	r0, [pc, #92]	@ (80018a0 <HAL_InitTick+0xec>)
 8001842:	f006 fc92 	bl	800816a <HAL_TIM_Base_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800184c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001850:	2b00      	cmp	r3, #0
 8001852:	d11b      	bne.n	800188c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001854:	4812      	ldr	r0, [pc, #72]	@ (80018a0 <HAL_InitTick+0xec>)
 8001856:	f006 fcd7 	bl	8008208 <HAL_TIM_Base_Start_IT>
 800185a:	4603      	mov	r3, r0
 800185c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001860:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001864:	2b00      	cmp	r3, #0
 8001866:	d111      	bne.n	800188c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001868:	2036      	movs	r0, #54	@ 0x36
 800186a:	f001 fe69 	bl	8003540 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b0f      	cmp	r3, #15
 8001872:	d808      	bhi.n	8001886 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001874:	2200      	movs	r2, #0
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	2036      	movs	r0, #54	@ 0x36
 800187a:	f001 fe45 	bl	8003508 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800187e:	4a0a      	ldr	r2, [pc, #40]	@ (80018a8 <HAL_InitTick+0xf4>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	e002      	b.n	800188c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800188c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001890:	4618      	mov	r0, r3
 8001892:	3738      	adds	r7, #56	@ 0x38
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	431bde83 	.word	0x431bde83
 80018a0:	20000360 	.word	0x20000360
 80018a4:	40001000 	.word	0x40001000
 80018a8:	20000004 	.word	0x20000004

080018ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <NMI_Handler+0x4>

080018b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <MemManage_Handler+0x4>

080018c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <BusFault_Handler+0x4>

080018cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <UsageFault_Handler+0x4>

080018d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018e8:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <USART3_IRQHandler+0x10>)
 80018ea:	f007 fd0b 	bl	8009304 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000598 	.word	0x20000598

080018f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <TIM6_DAC_IRQHandler+0x10>)
 80018fe:	f006 fe63 	bl	80085c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000360 	.word	0x20000360

0800190c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001910:	4802      	ldr	r0, [pc, #8]	@ (800191c <OTG_FS_IRQHandler+0x10>)
 8001912:	f003 fe86 	bl	8005622 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20006528 	.word	0x20006528

08001920 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return 1;
 8001924:	2301      	movs	r3, #1
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <_kill>:

int _kill(int pid, int sig)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800193a:	f011 f84f 	bl	80129dc <__errno>
 800193e:	4603      	mov	r3, r0
 8001940:	2216      	movs	r2, #22
 8001942:	601a      	str	r2, [r3, #0]
  return -1;
 8001944:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_exit>:

void _exit (int status)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ffe7 	bl	8001930 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001962:	bf00      	nop
 8001964:	e7fd      	b.n	8001962 <_exit+0x12>

08001966 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	e00a      	b.n	800198e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001978:	f3af 8000 	nop.w
 800197c:	4601      	mov	r1, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	60ba      	str	r2, [r7, #8]
 8001984:	b2ca      	uxtb	r2, r1
 8001986:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3301      	adds	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	429a      	cmp	r2, r3
 8001994:	dbf0      	blt.n	8001978 <_read+0x12>
  }

  return len;
 8001996:	687b      	ldr	r3, [r7, #4]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019c8:	605a      	str	r2, [r3, #4]
  return 0;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_isatty>:

int _isatty(int file)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019e0:	2301      	movs	r3, #1
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a10:	4a14      	ldr	r2, [pc, #80]	@ (8001a64 <_sbrk+0x5c>)
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <_sbrk+0x60>)
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a1c:	4b13      	ldr	r3, [pc, #76]	@ (8001a6c <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a24:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <_sbrk+0x64>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	@ (8001a70 <_sbrk+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2a:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d207      	bcs.n	8001a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a38:	f010 ffd0 	bl	80129dc <__errno>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	220c      	movs	r2, #12
 8001a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	e009      	b.n	8001a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4e:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <_sbrk+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a05      	ldr	r2, [pc, #20]	@ (8001a6c <_sbrk+0x64>)
 8001a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20020000 	.word	0x20020000
 8001a68:	00000400 	.word	0x00000400
 8001a6c:	200003a8 	.word	0x200003a8
 8001a70:	20006d78 	.word	0x20006d78

08001a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <SystemInit+0x20>)
 8001a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a7e:	4a05      	ldr	r2, [pc, #20]	@ (8001a94 <SystemInit+0x20>)
 8001a80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001aaa:	4b29      	ldr	r3, [pc, #164]	@ (8001b50 <MX_ADC1_Init+0xb8>)
 8001aac:	4a29      	ldr	r2, [pc, #164]	@ (8001b54 <MX_ADC1_Init+0xbc>)
 8001aae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ab0:	4b27      	ldr	r3, [pc, #156]	@ (8001b50 <MX_ADC1_Init+0xb8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ab6:	4b26      	ldr	r3, [pc, #152]	@ (8001b50 <MX_ADC1_Init+0xb8>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001abc:	4b24      	ldr	r3, [pc, #144]	@ (8001b50 <MX_ADC1_Init+0xb8>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ac2:	4b23      	ldr	r3, [pc, #140]	@ (8001b50 <MX_ADC1_Init+0xb8>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8001ac8:	4b21      	ldr	r3, [pc, #132]	@ (8001b50 <MX_ADC1_Init+0xb8>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b50 <MX_ADC1_Init+0xb8>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b50 <MX_ADC1_Init+0xb8>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001adc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b50 <MX_ADC1_Init+0xb8>)
 8001ade:	4a1e      	ldr	r2, [pc, #120]	@ (8001b58 <MX_ADC1_Init+0xc0>)
 8001ae0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b50 <MX_ADC1_Init+0xb8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001ae8:	4b19      	ldr	r3, [pc, #100]	@ (8001b50 <MX_ADC1_Init+0xb8>)
 8001aea:	2202      	movs	r2, #2
 8001aec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001aee:	4b18      	ldr	r3, [pc, #96]	@ (8001b50 <MX_ADC1_Init+0xb8>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001af6:	4b16      	ldr	r3, [pc, #88]	@ (8001b50 <MX_ADC1_Init+0xb8>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001afc:	4814      	ldr	r0, [pc, #80]	@ (8001b50 <MX_ADC1_Init+0xb8>)
 8001afe:	f001 f9d9 	bl	8002eb4 <HAL_ADC_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001b08:	f7ff fc06 	bl	8001318 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b10:	2301      	movs	r3, #1
 8001b12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b18:	463b      	mov	r3, r7
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	480c      	ldr	r0, [pc, #48]	@ (8001b50 <MX_ADC1_Init+0xb8>)
 8001b1e:	f001 fa0d 	bl	8002f3c <HAL_ADC_ConfigChannel>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001b28:	f7ff fbf6 	bl	8001318 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001b30:	2302      	movs	r3, #2
 8001b32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b34:	463b      	mov	r3, r7
 8001b36:	4619      	mov	r1, r3
 8001b38:	4805      	ldr	r0, [pc, #20]	@ (8001b50 <MX_ADC1_Init+0xb8>)
 8001b3a:	f001 f9ff 	bl	8002f3c <HAL_ADC_ConfigChannel>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001b44:	f7ff fbe8 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b48:	bf00      	nop
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	200003ac 	.word	0x200003ac
 8001b54:	40012000 	.word	0x40012000
 8001b58:	0f000001 	.word	0x0f000001

08001b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b094      	sub	sp, #80	@ 0x50
 8001b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b62:	f107 031c 	add.w	r3, r7, #28
 8001b66:	2234      	movs	r2, #52	@ 0x34
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f010 fe7e 	bl	801286c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b70:	f107 0308 	add.w	r3, r7, #8
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b80:	2300      	movs	r3, #0
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	4b2a      	ldr	r3, [pc, #168]	@ (8001c30 <SystemClock_Config+0xd4>)
 8001b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b88:	4a29      	ldr	r2, [pc, #164]	@ (8001c30 <SystemClock_Config+0xd4>)
 8001b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b90:	4b27      	ldr	r3, [pc, #156]	@ (8001c30 <SystemClock_Config+0xd4>)
 8001b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	4b24      	ldr	r3, [pc, #144]	@ (8001c34 <SystemClock_Config+0xd8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ba8:	4a22      	ldr	r2, [pc, #136]	@ (8001c34 <SystemClock_Config+0xd8>)
 8001baa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b20      	ldr	r3, [pc, #128]	@ (8001c34 <SystemClock_Config+0xd8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bb8:	603b      	str	r3, [r7, #0]
 8001bba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001bbc:	2305      	movs	r3, #5
 8001bbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bc4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001bd4:	2306      	movs	r3, #6
 8001bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001bd8:	2348      	movs	r3, #72	@ 0x48
 8001bda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001be0:	2303      	movs	r3, #3
 8001be2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001be4:	2302      	movs	r3, #2
 8001be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be8:	f107 031c 	add.w	r3, r7, #28
 8001bec:	4618      	mov	r0, r3
 8001bee:	f005 fc89 	bl	8007504 <HAL_RCC_OscConfig>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001bf8:	f7ff fb8e 	bl	8001318 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bfc:	230f      	movs	r3, #15
 8001bfe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c00:	2302      	movs	r3, #2
 8001c02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c12:	f107 0308 	add.w	r3, r7, #8
 8001c16:	2102      	movs	r1, #2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f004 fe53 	bl	80068c4 <HAL_RCC_ClockConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001c24:	f7ff fb78 	bl	8001318 <Error_Handler>
  }
}
 8001c28:	bf00      	nop
 8001c2a:	3750      	adds	r7, #80	@ 0x50
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40007000 	.word	0x40007000

08001c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	@ 0x28
 8001c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]
 8001c4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	4b49      	ldr	r3, [pc, #292]	@ (8001d78 <MX_GPIO_Init+0x140>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	4a48      	ldr	r2, [pc, #288]	@ (8001d78 <MX_GPIO_Init+0x140>)
 8001c58:	f043 0304 	orr.w	r3, r3, #4
 8001c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5e:	4b46      	ldr	r3, [pc, #280]	@ (8001d78 <MX_GPIO_Init+0x140>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b42      	ldr	r3, [pc, #264]	@ (8001d78 <MX_GPIO_Init+0x140>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	4a41      	ldr	r2, [pc, #260]	@ (8001d78 <MX_GPIO_Init+0x140>)
 8001c74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d78 <MX_GPIO_Init+0x140>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d78 <MX_GPIO_Init+0x140>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	4a3a      	ldr	r2, [pc, #232]	@ (8001d78 <MX_GPIO_Init+0x140>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c96:	4b38      	ldr	r3, [pc, #224]	@ (8001d78 <MX_GPIO_Init+0x140>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	4b34      	ldr	r3, [pc, #208]	@ (8001d78 <MX_GPIO_Init+0x140>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	4a33      	ldr	r2, [pc, #204]	@ (8001d78 <MX_GPIO_Init+0x140>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb2:	4b31      	ldr	r3, [pc, #196]	@ (8001d78 <MX_GPIO_Init+0x140>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZ_Pin|CM1_Pin|CM2_Pin, GPIO_PIN_RESET);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	210e      	movs	r1, #14
 8001cc2:	482e      	ldr	r0, [pc, #184]	@ (8001d7c <MX_GPIO_Init+0x144>)
 8001cc4:	f001 fe70 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|USB_IO_Pin, GPIO_PIN_RESET);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001cce:	482c      	ldr	r0, [pc, #176]	@ (8001d80 <MX_GPIO_Init+0x148>)
 8001cd0:	f001 fe6a 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cda:	482a      	ldr	r0, [pc, #168]	@ (8001d84 <MX_GPIO_Init+0x14c>)
 8001cdc:	f001 fe64 	bl	80039a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ce0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ce6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4821      	ldr	r0, [pc, #132]	@ (8001d7c <MX_GPIO_Init+0x144>)
 8001cf8:	f001 fcc2 	bl	8003680 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZ_Pin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	481a      	ldr	r0, [pc, #104]	@ (8001d7c <MX_GPIO_Init+0x144>)
 8001d14:	f001 fcb4 	bl	8003680 <HAL_GPIO_Init>

  /*Configure GPIO pins : CM1_Pin CM2_Pin */
  GPIO_InitStruct.Pin = CM1_Pin|CM2_Pin;
 8001d18:	230c      	movs	r3, #12
 8001d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d24:	2303      	movs	r3, #3
 8001d26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4813      	ldr	r0, [pc, #76]	@ (8001d7c <MX_GPIO_Init+0x144>)
 8001d30:	f001 fca6 	bl	8003680 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin USB_IO_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|USB_IO_Pin;
 8001d34:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	480c      	ldr	r0, [pc, #48]	@ (8001d80 <MX_GPIO_Init+0x148>)
 8001d4e:	f001 fc97 	bl	8003680 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001d52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d60:	2303      	movs	r3, #3
 8001d62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4806      	ldr	r0, [pc, #24]	@ (8001d84 <MX_GPIO_Init+0x14c>)
 8001d6c:	f001 fc88 	bl	8003680 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d70:	bf00      	nop
 8001d72:	3728      	adds	r7, #40	@ 0x28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020800 	.word	0x40020800
 8001d80:	40020000 	.word	0x40020000
 8001d84:	40020400 	.word	0x40020400

08001d88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d8c:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <MX_I2C1_Init+0x50>)
 8001d8e:	4a13      	ldr	r2, [pc, #76]	@ (8001ddc <MX_I2C1_Init+0x54>)
 8001d90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d92:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <MX_I2C1_Init+0x50>)
 8001d94:	4a12      	ldr	r2, [pc, #72]	@ (8001de0 <MX_I2C1_Init+0x58>)
 8001d96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd8 <MX_I2C1_Init+0x50>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <MX_I2C1_Init+0x50>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001da4:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <MX_I2C1_Init+0x50>)
 8001da6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001daa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dac:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <MX_I2C1_Init+0x50>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001db2:	4b09      	ldr	r3, [pc, #36]	@ (8001dd8 <MX_I2C1_Init+0x50>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001db8:	4b07      	ldr	r3, [pc, #28]	@ (8001dd8 <MX_I2C1_Init+0x50>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dbe:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <MX_I2C1_Init+0x50>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dc4:	4804      	ldr	r0, [pc, #16]	@ (8001dd8 <MX_I2C1_Init+0x50>)
 8001dc6:	f001 fe23 	bl	8003a10 <HAL_I2C_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dd0:	f7ff faa2 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	200003f4 	.word	0x200003f4
 8001ddc:	40005400 	.word	0x40005400
 8001de0:	00061a80 	.word	0x00061a80

08001de4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001df8:	2300      	movs	r3, #0
 8001dfa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001dfc:	4b24      	ldr	r3, [pc, #144]	@ (8001e90 <MX_RTC_Init+0xac>)
 8001dfe:	4a25      	ldr	r2, [pc, #148]	@ (8001e94 <MX_RTC_Init+0xb0>)
 8001e00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e02:	4b23      	ldr	r3, [pc, #140]	@ (8001e90 <MX_RTC_Init+0xac>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e08:	4b21      	ldr	r3, [pc, #132]	@ (8001e90 <MX_RTC_Init+0xac>)
 8001e0a:	227f      	movs	r2, #127	@ 0x7f
 8001e0c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e0e:	4b20      	ldr	r3, [pc, #128]	@ (8001e90 <MX_RTC_Init+0xac>)
 8001e10:	22ff      	movs	r2, #255	@ 0xff
 8001e12:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e14:	4b1e      	ldr	r3, [pc, #120]	@ (8001e90 <MX_RTC_Init+0xac>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e90 <MX_RTC_Init+0xac>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e20:	4b1b      	ldr	r3, [pc, #108]	@ (8001e90 <MX_RTC_Init+0xac>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e26:	481a      	ldr	r0, [pc, #104]	@ (8001e90 <MX_RTC_Init+0xac>)
 8001e28:	f005 fe0a 	bl	8007a40 <HAL_RTC_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001e32:	f7ff fa71 	bl	8001318 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480f      	ldr	r0, [pc, #60]	@ (8001e90 <MX_RTC_Init+0xac>)
 8001e52:	f005 fe78 	bl	8007b46 <HAL_RTC_SetTime>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001e5c:	f7ff fa5c 	bl	8001318 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e60:	2301      	movs	r3, #1
 8001e62:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001e64:	2301      	movs	r3, #1
 8001e66:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001e70:	463b      	mov	r3, r7
 8001e72:	2201      	movs	r2, #1
 8001e74:	4619      	mov	r1, r3
 8001e76:	4806      	ldr	r0, [pc, #24]	@ (8001e90 <MX_RTC_Init+0xac>)
 8001e78:	f005 ff5d 	bl	8007d36 <HAL_RTC_SetDate>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001e82:	f7ff fa49 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000448 	.word	0x20000448
 8001e94:	40002800 	.word	0x40002800

08001e98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI2_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e9c:	4b17      	ldr	r3, [pc, #92]	@ (8001efc <MX_SPI2_Init+0x64>)
 8001e9e:	4a18      	ldr	r2, [pc, #96]	@ (8001f00 <MX_SPI2_Init+0x68>)
 8001ea0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ea2:	4b16      	ldr	r3, [pc, #88]	@ (8001efc <MX_SPI2_Init+0x64>)
 8001ea4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ea8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001eaa:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <MX_SPI2_Init+0x64>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eb0:	4b12      	ldr	r3, [pc, #72]	@ (8001efc <MX_SPI2_Init+0x64>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eb6:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <MX_SPI2_Init+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8001efc <MX_SPI2_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <MX_SPI2_Init+0x64>)
 8001ec4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ec8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eca:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <MX_SPI2_Init+0x64>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8001efc <MX_SPI2_Init+0x64>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ed6:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <MX_SPI2_Init+0x64>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001edc:	4b07      	ldr	r3, [pc, #28]	@ (8001efc <MX_SPI2_Init+0x64>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <MX_SPI2_Init+0x64>)
 8001ee4:	220a      	movs	r2, #10
 8001ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ee8:	4804      	ldr	r0, [pc, #16]	@ (8001efc <MX_SPI2_Init+0x64>)
 8001eea:	f006 f8b5 	bl	8008058 <HAL_SPI_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ef4:	f7ff fa10 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000468 	.word	0x20000468
 8001f00:	40003800 	.word	0x40003800

08001f04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08e      	sub	sp, #56	@ 0x38
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f18:	f107 0320 	add.w	r3, r7, #32
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
 8001f30:	615a      	str	r2, [r3, #20]
 8001f32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f34:	4b37      	ldr	r3, [pc, #220]	@ (8002014 <MX_TIM3_Init+0x110>)
 8001f36:	4a38      	ldr	r2, [pc, #224]	@ (8002018 <MX_TIM3_Init+0x114>)
 8001f38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001f3a:	4b36      	ldr	r3, [pc, #216]	@ (8002014 <MX_TIM3_Init+0x110>)
 8001f3c:	2247      	movs	r2, #71	@ 0x47
 8001f3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f40:	4b34      	ldr	r3, [pc, #208]	@ (8002014 <MX_TIM3_Init+0x110>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f46:	4b33      	ldr	r3, [pc, #204]	@ (8002014 <MX_TIM3_Init+0x110>)
 8001f48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f4e:	4b31      	ldr	r3, [pc, #196]	@ (8002014 <MX_TIM3_Init+0x110>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f54:	4b2f      	ldr	r3, [pc, #188]	@ (8002014 <MX_TIM3_Init+0x110>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f5a:	482e      	ldr	r0, [pc, #184]	@ (8002014 <MX_TIM3_Init+0x110>)
 8001f5c:	f006 f905 	bl	800816a <HAL_TIM_Base_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001f66:	f7ff f9d7 	bl	8001318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f74:	4619      	mov	r1, r3
 8001f76:	4827      	ldr	r0, [pc, #156]	@ (8002014 <MX_TIM3_Init+0x110>)
 8001f78:	f006 fcd8 	bl	800892c <HAL_TIM_ConfigClockSource>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001f82:	f7ff f9c9 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f86:	4823      	ldr	r0, [pc, #140]	@ (8002014 <MX_TIM3_Init+0x110>)
 8001f88:	f006 f9ae 	bl	80082e8 <HAL_TIM_PWM_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001f92:	f7ff f9c1 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f9e:	f107 0320 	add.w	r3, r7, #32
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	481b      	ldr	r0, [pc, #108]	@ (8002014 <MX_TIM3_Init+0x110>)
 8001fa6:	f007 f8cd 	bl	8009144 <HAL_TIMEx_MasterConfigSynchronization>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001fb0:	f7ff f9b2 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb4:	2360      	movs	r3, #96	@ 0x60
 8001fb6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4812      	ldr	r0, [pc, #72]	@ (8002014 <MX_TIM3_Init+0x110>)
 8001fcc:	f006 fbec 	bl	80087a8 <HAL_TIM_PWM_ConfigChannel>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001fd6:	f7ff f99f 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	2204      	movs	r2, #4
 8001fde:	4619      	mov	r1, r3
 8001fe0:	480c      	ldr	r0, [pc, #48]	@ (8002014 <MX_TIM3_Init+0x110>)
 8001fe2:	f006 fbe1 	bl	80087a8 <HAL_TIM_PWM_ConfigChannel>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001fec:	f7ff f994 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4807      	ldr	r0, [pc, #28]	@ (8002014 <MX_TIM3_Init+0x110>)
 8001ff8:	f006 fbd6 	bl	80087a8 <HAL_TIM_PWM_ConfigChannel>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002002:	f7ff f989 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002006:	4803      	ldr	r0, [pc, #12]	@ (8002014 <MX_TIM3_Init+0x110>)
 8002008:	f7ff fade 	bl	80015c8 <HAL_TIM_MspPostInit>

}
 800200c:	bf00      	nop
 800200e:	3738      	adds	r7, #56	@ 0x38
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	200004c0 	.word	0x200004c0
 8002018:	40000400 	.word	0x40000400

0800201c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002020:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <MX_USART1_UART_Init+0x4c>)
 8002022:	4a12      	ldr	r2, [pc, #72]	@ (800206c <MX_USART1_UART_Init+0x50>)
 8002024:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002026:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <MX_USART1_UART_Init+0x4c>)
 8002028:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800202c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800202e:	4b0e      	ldr	r3, [pc, #56]	@ (8002068 <MX_USART1_UART_Init+0x4c>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002034:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <MX_USART1_UART_Init+0x4c>)
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800203a:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <MX_USART1_UART_Init+0x4c>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002040:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <MX_USART1_UART_Init+0x4c>)
 8002042:	220c      	movs	r2, #12
 8002044:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002046:	4b08      	ldr	r3, [pc, #32]	@ (8002068 <MX_USART1_UART_Init+0x4c>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800204c:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <MX_USART1_UART_Init+0x4c>)
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002052:	4805      	ldr	r0, [pc, #20]	@ (8002068 <MX_USART1_UART_Init+0x4c>)
 8002054:	f007 f906 	bl	8009264 <HAL_UART_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800205e:	f7ff f95b 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000508 	.word	0x20000508
 800206c:	40011000 	.word	0x40011000

08002070 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002074:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <MX_USART2_UART_Init+0x4c>)
 8002076:	4a12      	ldr	r2, [pc, #72]	@ (80020c0 <MX_USART2_UART_Init+0x50>)
 8002078:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800207a:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <MX_USART2_UART_Init+0x4c>)
 800207c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002080:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002082:	4b0e      	ldr	r3, [pc, #56]	@ (80020bc <MX_USART2_UART_Init+0x4c>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002088:	4b0c      	ldr	r3, [pc, #48]	@ (80020bc <MX_USART2_UART_Init+0x4c>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800208e:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <MX_USART2_UART_Init+0x4c>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002094:	4b09      	ldr	r3, [pc, #36]	@ (80020bc <MX_USART2_UART_Init+0x4c>)
 8002096:	220c      	movs	r2, #12
 8002098:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209a:	4b08      	ldr	r3, [pc, #32]	@ (80020bc <MX_USART2_UART_Init+0x4c>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a0:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <MX_USART2_UART_Init+0x4c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020a6:	4805      	ldr	r0, [pc, #20]	@ (80020bc <MX_USART2_UART_Init+0x4c>)
 80020a8:	f007 f8dc 	bl	8009264 <HAL_UART_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020b2:	f7ff f931 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000550 	.word	0x20000550
 80020c0:	40004400 	.word	0x40004400

080020c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020c8:	4b11      	ldr	r3, [pc, #68]	@ (8002110 <MX_USART3_UART_Init+0x4c>)
 80020ca:	4a12      	ldr	r2, [pc, #72]	@ (8002114 <MX_USART3_UART_Init+0x50>)
 80020cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020ce:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <MX_USART3_UART_Init+0x4c>)
 80020d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <MX_USART3_UART_Init+0x4c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <MX_USART3_UART_Init+0x4c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <MX_USART3_UART_Init+0x4c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020e8:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <MX_USART3_UART_Init+0x4c>)
 80020ea:	220c      	movs	r2, #12
 80020ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ee:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <MX_USART3_UART_Init+0x4c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <MX_USART3_UART_Init+0x4c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020fa:	4805      	ldr	r0, [pc, #20]	@ (8002110 <MX_USART3_UART_Init+0x4c>)
 80020fc:	f007 f8b2 	bl	8009264 <HAL_UART_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002106:	f7ff f907 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000598 	.word	0x20000598
 8002114:	40004800 	.word	0x40004800

08002118 <BMP390_AssignI2C>:
// variables
I2C_HandleTypeDef *bmp390_phi2c;
static BMP390_CalibrationTypeDef Bmp390calib;

// functions implement
void BMP390_AssignI2C(I2C_HandleTypeDef *phi2c){
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	bmp390_phi2c = phi2c;
 8002120:	4a04      	ldr	r2, [pc, #16]	@ (8002134 <BMP390_AssignI2C+0x1c>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6013      	str	r3, [r2, #0]
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	200005e0 	.word	0x200005e0

08002138 <BMP390_CompensateTemperature>:
	if ( result != HAL_OK ) return result;
	*PressurePtr = BMP390_CompensatePressure(buf);

	return HAL_OK;
}
float BMP390_CompensateTemperature( uint32_t RawTemp ){
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	float pd1, pd2;	// partial data
	pd1 = ( float ) ( RawTemp - Bmp390calib.par_t1 );
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	ee07 3a90 	vmov	s15, r3
 8002146:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800214a:	4b15      	ldr	r3, [pc, #84]	@ (80021a0 <BMP390_CompensateTemperature+0x68>)
 800214c:	edd3 7a00 	vldr	s15, [r3]
 8002150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002154:	edc7 7a03 	vstr	s15, [r7, #12]
	pd2 = ( float ) ( pd1 * Bmp390calib.par_t2);
 8002158:	4b11      	ldr	r3, [pc, #68]	@ (80021a0 <BMP390_CompensateTemperature+0x68>)
 800215a:	edd3 7a01 	vldr	s15, [r3, #4]
 800215e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002166:	edc7 7a02 	vstr	s15, [r7, #8]
	Bmp390calib.t_lin = pd2 + ( pd1 * pd1 ) * Bmp390calib.par_t3;
 800216a:	edd7 7a03 	vldr	s15, [r7, #12]
 800216e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002172:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <BMP390_CompensateTemperature+0x68>)
 8002174:	edd3 7a02 	vldr	s15, [r3, #8]
 8002178:	ee27 7a27 	vmul.f32	s14, s14, s15
 800217c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002184:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <BMP390_CompensateTemperature+0x68>)
 8002186:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	return Bmp390calib.t_lin;
 800218a:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <BMP390_CompensateTemperature+0x68>)
 800218c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800218e:	ee07 3a90 	vmov	s15, r3
}
 8002192:	eeb0 0a67 	vmov.f32	s0, s15
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	200005e4 	.word	0x200005e4

080021a4 <BMP390_CompensatePressure>:
float BMP390_CompensatePressure( uint32_t RawPres ){
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	@ 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	float pd1, pd2, pd3;
	float po1, po2, po3;	// partial out

	// independent from pressure
	pd1 = Bmp390calib.par_p6 *  Bmp390calib.t_lin;
 80021ac:	4b6b      	ldr	r3, [pc, #428]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 80021ae:	ed93 7a08 	vldr	s14, [r3, #32]
 80021b2:	4b6a      	ldr	r3, [pc, #424]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 80021b4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80021b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021bc:	edc7 7a07 	vstr	s15, [r7, #28]
	pd2 = Bmp390calib.par_p7 * (Bmp390calib.t_lin * Bmp390calib.t_lin);
 80021c0:	4b66      	ldr	r3, [pc, #408]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 80021c2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80021c6:	4b65      	ldr	r3, [pc, #404]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 80021c8:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 80021cc:	4b63      	ldr	r3, [pc, #396]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 80021ce:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80021d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021da:	edc7 7a06 	vstr	s15, [r7, #24]
	pd3 = Bmp390calib.par_p8 * (Bmp390calib.t_lin * Bmp390calib.t_lin * Bmp390calib.t_lin);
 80021de:	4b5f      	ldr	r3, [pc, #380]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 80021e0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80021e4:	4b5d      	ldr	r3, [pc, #372]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 80021e6:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 80021ea:	4b5c      	ldr	r3, [pc, #368]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 80021ec:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80021f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021f4:	4b59      	ldr	r3, [pc, #356]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 80021f6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80021fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002202:	edc7 7a05 	vstr	s15, [r7, #20]
	po1 = Bmp390calib.par_p5 +  pd1 + pd2 + pd3;
 8002206:	4b55      	ldr	r3, [pc, #340]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 8002208:	ed93 7a07 	vldr	s14, [r3, #28]
 800220c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002210:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002214:	edd7 7a06 	vldr	s15, [r7, #24]
 8002218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800221c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002224:	edc7 7a04 	vstr	s15, [r7, #16]

	// linear to pressure
	pd1 = Bmp390calib.par_p2 *  Bmp390calib.t_lin;
 8002228:	4b4c      	ldr	r3, [pc, #304]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 800222a:	ed93 7a04 	vldr	s14, [r3, #16]
 800222e:	4b4b      	ldr	r3, [pc, #300]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 8002230:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002238:	edc7 7a07 	vstr	s15, [r7, #28]
	pd2 = Bmp390calib.par_p3 * (Bmp390calib.t_lin * Bmp390calib.t_lin);
 800223c:	4b47      	ldr	r3, [pc, #284]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 800223e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002242:	4b46      	ldr	r3, [pc, #280]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 8002244:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8002248:	4b44      	ldr	r3, [pc, #272]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 800224a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800224e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002256:	edc7 7a06 	vstr	s15, [r7, #24]
	pd3 = Bmp390calib.par_p4 * (Bmp390calib.t_lin * Bmp390calib.t_lin * Bmp390calib.t_lin);
 800225a:	4b40      	ldr	r3, [pc, #256]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 800225c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002260:	4b3e      	ldr	r3, [pc, #248]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 8002262:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8002266:	4b3d      	ldr	r3, [pc, #244]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 8002268:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800226c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002270:	4b3a      	ldr	r3, [pc, #232]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 8002272:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002276:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800227a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227e:	edc7 7a05 	vstr	s15, [r7, #20]
	po2 = ( float ) RawPres * (Bmp390calib.par_p1 + pd1 + pd2 + pd3);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	ee07 3a90 	vmov	s15, r3
 8002288:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800228c:	4b33      	ldr	r3, [pc, #204]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 800228e:	edd3 6a03 	vldr	s13, [r3, #12]
 8002292:	edd7 7a07 	vldr	s15, [r7, #28]
 8002296:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800229a:	edd7 7a06 	vldr	s15, [r7, #24]
 800229e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80022a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ae:	edc7 7a03 	vstr	s15, [r7, #12]

	// power 2
	pd1 = (float) RawPres     * (float) RawPres;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	ee07 3a90 	vmov	s15, r3
 80022b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	ee07 3a90 	vmov	s15, r3
 80022c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ca:	edc7 7a07 	vstr	s15, [r7, #28]
	pd2 = Bmp390calib.par_p9 +  Bmp390calib.par_p10 * Bmp390calib.t_lin;
 80022ce:	4b23      	ldr	r3, [pc, #140]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 80022d0:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80022d4:	4b21      	ldr	r3, [pc, #132]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 80022d6:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80022da:	4b20      	ldr	r3, [pc, #128]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 80022dc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80022e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e8:	edc7 7a06 	vstr	s15, [r7, #24]
	po3 = pd1 * pd2;
 80022ec:	ed97 7a07 	vldr	s14, [r7, #28]
 80022f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80022f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f8:	edc7 7a02 	vstr	s15, [r7, #8]

	// power 3
	pd3 = ((float) RawPres * (float) RawPres * (float) RawPres) * Bmp390calib.par_p11;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	ee07 3a90 	vmov	s15, r3
 8002302:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	ee07 3a90 	vmov	s15, r3
 800230c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002310:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	ee07 3a90 	vmov	s15, r3
 800231a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800231e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002322:	4b0e      	ldr	r3, [pc, #56]	@ (800235c <BMP390_CompensatePressure+0x1b8>)
 8002324:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232c:	edc7 7a05 	vstr	s15, [r7, #20]

	return po1 + po2 + po3 + pd3;
 8002330:	ed97 7a04 	vldr	s14, [r7, #16]
 8002334:	edd7 7a03 	vldr	s15, [r7, #12]
 8002338:	ee37 7a27 	vadd.f32	s14, s14, s15
 800233c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002340:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002344:	edd7 7a05 	vldr	s15, [r7, #20]
 8002348:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800234c:	eeb0 0a67 	vmov.f32	s0, s15
 8002350:	3724      	adds	r7, #36	@ 0x24
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	200005e4 	.word	0x200005e4

08002360 <BMP390_ReadCalibration>:
HAL_StatusTypeDef BMP390_ReadCalibration(void){
 8002360:	b580      	push	{r7, lr}
 8002362:	b08c      	sub	sp, #48	@ 0x30
 8002364:	af00      	add	r7, sp, #0
	// declare
	uint16_t	nvm_par_t1 = 0, nvm_par_t2 = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800236a:	2300      	movs	r3, #0
 800236c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	int8_t		nvm_par_t3 = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	int16_t		nvm_par_p1 = 0, nvm_par_p2 = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	853b      	strh	r3, [r7, #40]	@ 0x28
 8002378:	2300      	movs	r3, #0
 800237a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int8_t		nvm_par_p3 = 0, nvm_par_p4 = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002382:	2300      	movs	r3, #0
 8002384:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint16_t	nvm_par_p5 = 0, nvm_par_p6 = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800238c:	2300      	movs	r3, #0
 800238e:	843b      	strh	r3, [r7, #32]
	int8_t		nvm_par_p7 = 0, nvm_par_p8 = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	77fb      	strb	r3, [r7, #31]
 8002394:	2300      	movs	r3, #0
 8002396:	77bb      	strb	r3, [r7, #30]
	int16_t		nvm_par_p9 = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	83bb      	strh	r3, [r7, #28]
	int8_t		nvm_par_p10 = 0, nvm_par_p11 = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	76fb      	strb	r3, [r7, #27]
 80023a0:	2300      	movs	r3, #0
 80023a2:	76bb      	strb	r3, [r7, #26]

	uint8_t buf[21];
	HAL_StatusTypeDef result;

	// read
	result = BMP390_Read(BMP390_REG_NVMPAR, buf, sizeof(buf), 10);
 80023a4:	1d39      	adds	r1, r7, #4
 80023a6:	230a      	movs	r3, #10
 80023a8:	2215      	movs	r2, #21
 80023aa:	2031      	movs	r0, #49	@ 0x31
 80023ac:	f000 f99a 	bl	80026e4 <BMP390_Read>
 80023b0:	4603      	mov	r3, r0
 80023b2:	767b      	strb	r3, [r7, #25]
	if ( result != HAL_OK) return result;
 80023b4:	7e7b      	ldrb	r3, [r7, #25]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <BMP390_ReadCalibration+0x5e>
 80023ba:	7e7b      	ldrb	r3, [r7, #25]
 80023bc:	e100      	b.n	80025c0 <BMP390_ReadCalibration+0x260>
	nvm_par_t1 	= ((uint16_t) buf[1] ) 	<< 8 | (uint16_t)buf[0];
 80023be:	797b      	ldrb	r3, [r7, #5]
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	b21a      	sxth	r2, r3
 80023c4:	793b      	ldrb	r3, [r7, #4]
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	4313      	orrs	r3, r2
 80023ca:	b21b      	sxth	r3, r3
 80023cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	nvm_par_t2 	= ((uint16_t) buf[3]) 	<< 8 | (uint16_t)buf[2];
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	b21a      	sxth	r2, r3
 80023d4:	79bb      	ldrb	r3, [r7, #6]
 80023d6:	b21b      	sxth	r3, r3
 80023d8:	4313      	orrs	r3, r2
 80023da:	b21b      	sxth	r3, r3
 80023dc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	nvm_par_t3 	=  (int8_t)   buf[4];
 80023de:	7a3b      	ldrb	r3, [r7, #8]
 80023e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	nvm_par_p1 	= ((int16_t)  buf[6])	<< 8 |  (int16_t)buf[5];
 80023e4:	7abb      	ldrb	r3, [r7, #10]
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	b21a      	sxth	r2, r3
 80023ea:	7a7b      	ldrb	r3, [r7, #9]
 80023ec:	b21b      	sxth	r3, r3
 80023ee:	4313      	orrs	r3, r2
 80023f0:	853b      	strh	r3, [r7, #40]	@ 0x28
	nvm_par_p2 	= ((int16_t)  buf[8])	<< 8 |  (int16_t)buf[7];
 80023f2:	7b3b      	ldrb	r3, [r7, #12]
 80023f4:	021b      	lsls	r3, r3, #8
 80023f6:	b21a      	sxth	r2, r3
 80023f8:	7afb      	ldrb	r3, [r7, #11]
 80023fa:	b21b      	sxth	r3, r3
 80023fc:	4313      	orrs	r3, r2
 80023fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
	nvm_par_p3 	=  (int8_t)   buf[9];
 8002400:	7b7b      	ldrb	r3, [r7, #13]
 8002402:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	nvm_par_p4 	=  (int8_t)   buf[10];
 8002406:	7bbb      	ldrb	r3, [r7, #14]
 8002408:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	nvm_par_p5 	= ((uint16_t) buf[12]) 	<< 8 | (uint16_t)buf[11];
 800240c:	7c3b      	ldrb	r3, [r7, #16]
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	b21a      	sxth	r2, r3
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	b21b      	sxth	r3, r3
 8002416:	4313      	orrs	r3, r2
 8002418:	b21b      	sxth	r3, r3
 800241a:	847b      	strh	r3, [r7, #34]	@ 0x22
	nvm_par_p6 	= ((uint16_t) buf[14]) 	<< 8 | (uint16_t)buf[13];
 800241c:	7cbb      	ldrb	r3, [r7, #18]
 800241e:	021b      	lsls	r3, r3, #8
 8002420:	b21a      	sxth	r2, r3
 8002422:	7c7b      	ldrb	r3, [r7, #17]
 8002424:	b21b      	sxth	r3, r3
 8002426:	4313      	orrs	r3, r2
 8002428:	b21b      	sxth	r3, r3
 800242a:	843b      	strh	r3, [r7, #32]
	nvm_par_p7 	=  (int8_t)   buf[15];
 800242c:	7cfb      	ldrb	r3, [r7, #19]
 800242e:	77fb      	strb	r3, [r7, #31]
	nvm_par_p8 	=  (int8_t)	  buf[16];
 8002430:	7d3b      	ldrb	r3, [r7, #20]
 8002432:	77bb      	strb	r3, [r7, #30]
	nvm_par_p9 	= ((int16_t)  buf[18]) 	<< 8 |  (int16_t)buf[17];
 8002434:	7dbb      	ldrb	r3, [r7, #22]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	b21a      	sxth	r2, r3
 800243a:	7d7b      	ldrb	r3, [r7, #21]
 800243c:	b21b      	sxth	r3, r3
 800243e:	4313      	orrs	r3, r2
 8002440:	83bb      	strh	r3, [r7, #28]
	nvm_par_p10 =  (int8_t)   buf[19];
 8002442:	7dfb      	ldrb	r3, [r7, #23]
 8002444:	76fb      	strb	r3, [r7, #27]
	nvm_par_p11 =  (int8_t)   buf[20];
 8002446:	7e3b      	ldrb	r3, [r7, #24]
 8002448:	76bb      	strb	r3, [r7, #26]

	// calculate actual value
	Bmp390calib.par_t1 	= ( float ) 	nvm_par_t1 				/ 0.00390625f;
 800244a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800244c:	ee07 3a90 	vmov	s15, r3
 8002450:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002454:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 80025c8 <BMP390_ReadCalibration+0x268>
 8002458:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800245c:	4b5b      	ldr	r3, [pc, #364]	@ (80025cc <BMP390_ReadCalibration+0x26c>)
 800245e:	edc3 7a00 	vstr	s15, [r3]
	Bmp390calib.par_t2 	= ( float ) 	nvm_par_t2 				/ 1073741824.f;
 8002462:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002464:	ee07 3a90 	vmov	s15, r3
 8002468:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800246c:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80025d0 <BMP390_ReadCalibration+0x270>
 8002470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002474:	4b55      	ldr	r3, [pc, #340]	@ (80025cc <BMP390_ReadCalibration+0x26c>)
 8002476:	edc3 7a01 	vstr	s15, [r3, #4]
	Bmp390calib.par_t3 	= ( float ) 	nvm_par_t3 				/ 281474976710656.f;
 800247a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800247e:	ee07 3a90 	vmov	s15, r3
 8002482:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002486:	eddf 6a53 	vldr	s13, [pc, #332]	@ 80025d4 <BMP390_ReadCalibration+0x274>
 800248a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800248e:	4b4f      	ldr	r3, [pc, #316]	@ (80025cc <BMP390_ReadCalibration+0x26c>)
 8002490:	edc3 7a02 	vstr	s15, [r3, #8]
	Bmp390calib.par_p1 	= ( float ) (	nvm_par_p1 - 16384.f) 	/ 1048576.f;
 8002494:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8002498:	ee07 3a90 	vmov	s15, r3
 800249c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80025d8 <BMP390_ReadCalibration+0x278>
 80024a4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80024a8:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 80025dc <BMP390_ReadCalibration+0x27c>
 80024ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024b0:	4b46      	ldr	r3, [pc, #280]	@ (80025cc <BMP390_ReadCalibration+0x26c>)
 80024b2:	edc3 7a03 	vstr	s15, [r3, #12]
	Bmp390calib.par_p2 	= ( float ) (	nvm_par_p2 - 16384.f) 	/ 536870912.f;
 80024b6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c2:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80025d8 <BMP390_ReadCalibration+0x278>
 80024c6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80024ca:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80025e0 <BMP390_ReadCalibration+0x280>
 80024ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024d2:	4b3e      	ldr	r3, [pc, #248]	@ (80025cc <BMP390_ReadCalibration+0x26c>)
 80024d4:	edc3 7a04 	vstr	s15, [r3, #16]
	Bmp390calib.par_p3 	= ( float ) 	nvm_par_p3				/ 4294967296.f;
 80024d8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80024dc:	ee07 3a90 	vmov	s15, r3
 80024e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e4:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 80025e4 <BMP390_ReadCalibration+0x284>
 80024e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024ec:	4b37      	ldr	r3, [pc, #220]	@ (80025cc <BMP390_ReadCalibration+0x26c>)
 80024ee:	edc3 7a05 	vstr	s15, [r3, #20]
	Bmp390calib.par_p4 	= ( float ) 	nvm_par_p4				/ 137438953472.f;
 80024f2:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80024f6:	ee07 3a90 	vmov	s15, r3
 80024fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024fe:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 80025e8 <BMP390_ReadCalibration+0x288>
 8002502:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002506:	4b31      	ldr	r3, [pc, #196]	@ (80025cc <BMP390_ReadCalibration+0x26c>)
 8002508:	edc3 7a06 	vstr	s15, [r3, #24]
	Bmp390calib.par_p5 	= ( float ) 	nvm_par_p5				/ 0.125f;
 800250c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800250e:	ee07 3a90 	vmov	s15, r3
 8002512:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002516:	eef4 6a00 	vmov.f32	s13, #64	@ 0x3e000000  0.125
 800251a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800251e:	4b2b      	ldr	r3, [pc, #172]	@ (80025cc <BMP390_ReadCalibration+0x26c>)
 8002520:	edc3 7a07 	vstr	s15, [r3, #28]
	Bmp390calib.par_p6 	= ( float ) 	nvm_par_p6				/ 64.f;
 8002524:	8c3b      	ldrh	r3, [r7, #32]
 8002526:	ee07 3a90 	vmov	s15, r3
 800252a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800252e:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 80025ec <BMP390_ReadCalibration+0x28c>
 8002532:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002536:	4b25      	ldr	r3, [pc, #148]	@ (80025cc <BMP390_ReadCalibration+0x26c>)
 8002538:	edc3 7a08 	vstr	s15, [r3, #32]
	Bmp390calib.par_p7 	= ( float ) 	nvm_par_p7				/ 256.f;
 800253c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002540:	ee07 3a90 	vmov	s15, r3
 8002544:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002548:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80025f0 <BMP390_ReadCalibration+0x290>
 800254c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002550:	4b1e      	ldr	r3, [pc, #120]	@ (80025cc <BMP390_ReadCalibration+0x26c>)
 8002552:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	Bmp390calib.par_p8 	= ( float ) 	nvm_par_p8				/ 32768.f;
 8002556:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002562:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80025f4 <BMP390_ReadCalibration+0x294>
 8002566:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800256a:	4b18      	ldr	r3, [pc, #96]	@ (80025cc <BMP390_ReadCalibration+0x26c>)
 800256c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	Bmp390calib.par_p9		= ( float ) 	nvm_par_p9				/ 281474976710656.f;
 8002570:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002574:	ee07 3a90 	vmov	s15, r3
 8002578:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800257c:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80025d4 <BMP390_ReadCalibration+0x274>
 8002580:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002584:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <BMP390_ReadCalibration+0x26c>)
 8002586:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	Bmp390calib.par_p10	= ( float ) 	nvm_par_p10				/ 281474976710656.f;
 800258a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800258e:	ee07 3a90 	vmov	s15, r3
 8002592:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002596:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80025d4 <BMP390_ReadCalibration+0x274>
 800259a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800259e:	4b0b      	ldr	r3, [pc, #44]	@ (80025cc <BMP390_ReadCalibration+0x26c>)
 80025a0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	Bmp390calib.par_p11	= ( float ) 	nvm_par_p11				/ 36893488147419103232.f;
 80025a4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80025a8:	ee07 3a90 	vmov	s15, r3
 80025ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025b0:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80025f8 <BMP390_ReadCalibration+0x298>
 80025b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025b8:	4b04      	ldr	r3, [pc, #16]	@ (80025cc <BMP390_ReadCalibration+0x26c>)
 80025ba:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3730      	adds	r7, #48	@ 0x30
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	3b800000 	.word	0x3b800000
 80025cc:	200005e4 	.word	0x200005e4
 80025d0:	4e800000 	.word	0x4e800000
 80025d4:	57800000 	.word	0x57800000
 80025d8:	46800000 	.word	0x46800000
 80025dc:	49800000 	.word	0x49800000
 80025e0:	4e000000 	.word	0x4e000000
 80025e4:	4f800000 	.word	0x4f800000
 80025e8:	52000000 	.word	0x52000000
 80025ec:	42800000 	.word	0x42800000
 80025f0:	43800000 	.word	0x43800000
 80025f4:	47000000 	.word	0x47000000
 80025f8:	60000000 	.word	0x60000000

080025fc <BMP390_ReadRawPressure>:
HAL_StatusTypeDef BMP390_ReadRawPressure( uint32_t *Buf, uint32_t Timeout){
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef result = BMP390_Read(BMP390_REG_PRES, buffer, sizeof(buffer), Timeout);
 8002606:	f107 010c 	add.w	r1, r7, #12
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2203      	movs	r2, #3
 800260e:	2004      	movs	r0, #4
 8002610:	f000 f868 	bl	80026e4 <BMP390_Read>
 8002614:	4603      	mov	r3, r0
 8002616:	73fb      	strb	r3, [r7, #15]
	if ( result != HAL_OK ) return result;
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <BMP390_ReadRawPressure+0x26>
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	e00a      	b.n	8002638 <BMP390_ReadRawPressure+0x3c>
	*Buf = ( buffer[2] << 16 ) | ( buffer[1] << 8 ) | buffer[0];
 8002622:	7bbb      	ldrb	r3, [r7, #14]
 8002624:	041a      	lsls	r2, r3, #16
 8002626:	7b7b      	ldrb	r3, [r7, #13]
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	4313      	orrs	r3, r2
 800262c:	7b3a      	ldrb	r2, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	461a      	mov	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	601a      	str	r2, [r3, #0]

	return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <BMP390_ReadRawTemperature>:
HAL_StatusTypeDef BMP390_ReadRawTemperature( uint32_t *Buf, uint32_t Timeout){
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef result = BMP390_Read(BMP390_REG_TEMP, buffer, sizeof(buffer), Timeout);
 800264a:	f107 010c 	add.w	r1, r7, #12
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2203      	movs	r2, #3
 8002652:	2007      	movs	r0, #7
 8002654:	f000 f846 	bl	80026e4 <BMP390_Read>
 8002658:	4603      	mov	r3, r0
 800265a:	73fb      	strb	r3, [r7, #15]
	if ( result != HAL_OK ) return result;
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <BMP390_ReadRawTemperature+0x26>
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	e00a      	b.n	800267c <BMP390_ReadRawTemperature+0x3c>
	*Buf = ( buffer[2] << 16 ) | ( buffer[1] << 8 ) | buffer[0];
 8002666:	7bbb      	ldrb	r3, [r7, #14]
 8002668:	041a      	lsls	r2, r3, #16
 800266a:	7b7b      	ldrb	r3, [r7, #13]
 800266c:	021b      	lsls	r3, r3, #8
 800266e:	4313      	orrs	r3, r2
 8002670:	7b3a      	ldrb	r2, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	461a      	mov	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	601a      	str	r2, [r3, #0]

	return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <BMP390_SoftReset>:
	if ( result != HAL_OK ) return result;
	*Buf = ( buffer[2] << 16 ) | ( buffer[1] << 8 ) | buffer[0];

	return HAL_OK;
}
HAL_StatusTypeDef BMP390_SoftReset( uint32_t Timeout ){
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	uint8_t Buf = BMP390_CMD_SFTRST;
 800268c:	23b6      	movs	r3, #182	@ 0xb6
 800268e:	73fb      	strb	r3, [r7, #15]
	return BMP390_Write( BMP390_REG_CMD, &Buf, 1, Timeout );
 8002690:	f107 010f 	add.w	r1, r7, #15
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	207e      	movs	r0, #126	@ 0x7e
 800269a:	f000 f805 	bl	80026a8 <BMP390_Write>
 800269e:	4603      	mov	r3, r0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <BMP390_Write>:
HAL_StatusTypeDef BMP390_Write(uint8_t MemAddress, uint8_t *Buf, uint16_t Size, uint32_t Timeout){
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af04      	add	r7, sp, #16
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	4603      	mov	r3, r0
 80026b4:	73fb      	strb	r3, [r7, #15]
 80026b6:	4613      	mov	r3, r2
 80026b8:	81bb      	strh	r3, [r7, #12]
	return HAL_I2C_Mem_Write(bmp390_phi2c, BMP390_ADDRESS, MemAddress, I2C_MEMADD_SIZE_8BIT, Buf, Size, Timeout);
 80026ba:	4b09      	ldr	r3, [pc, #36]	@ (80026e0 <BMP390_Write+0x38>)
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	9302      	str	r3, [sp, #8]
 80026c6:	89bb      	ldrh	r3, [r7, #12]
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	2301      	movs	r3, #1
 80026d0:	21ee      	movs	r1, #238	@ 0xee
 80026d2:	f001 fe11 	bl	80042f8 <HAL_I2C_Mem_Write>
 80026d6:	4603      	mov	r3, r0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	200005e0 	.word	0x200005e0

080026e4 <BMP390_Read>:
HAL_StatusTypeDef BMP390_Read(uint8_t MemAddress, uint8_t *Buf, uint16_t Size, uint32_t Timeout){
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af04      	add	r7, sp, #16
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607b      	str	r3, [r7, #4]
 80026ee:	4603      	mov	r3, r0
 80026f0:	73fb      	strb	r3, [r7, #15]
 80026f2:	4613      	mov	r3, r2
 80026f4:	81bb      	strh	r3, [r7, #12]
	return HAL_I2C_Mem_Read(bmp390_phi2c, BMP390_ADDRESS, MemAddress, I2C_MEMADD_SIZE_8BIT, Buf, Size, Timeout);
 80026f6:	4b09      	ldr	r3, [pc, #36]	@ (800271c <BMP390_Read+0x38>)
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	9302      	str	r3, [sp, #8]
 8002702:	89bb      	ldrh	r3, [r7, #12]
 8002704:	9301      	str	r3, [sp, #4]
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	2301      	movs	r3, #1
 800270c:	21ee      	movs	r1, #238	@ 0xee
 800270e:	f001 feed 	bl	80044ec <HAL_I2C_Mem_Read>
 8002712:	4603      	mov	r3, r0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	200005e0 	.word	0x200005e0

08002720 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	4619      	mov	r1, r3
 800272e:	2007      	movs	r0, #7
 8002730:	f000 f87a 	bl	8002828 <bno055_writeData>
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	4619      	mov	r1, r3
 800274a:	203d      	movs	r0, #61	@ 0x3d
 800274c:	f000 f86c 	bl	8002828 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d103      	bne.n	800275e <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8002756:	2013      	movs	r0, #19
 8002758:	f000 f85a 	bl	8002810 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 800275c:	e002      	b.n	8002764 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 800275e:	2007      	movs	r0, #7
 8002760:	f000 f856 	bl	8002810 <bno055_delay>
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8002770:	2000      	movs	r0, #0
 8002772:	f7ff ffe3 	bl	800273c <bno055_setOperationMode>
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}

0800277a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800277a:	b580      	push	{r7, lr}
 800277c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800277e:	200c      	movs	r0, #12
 8002780:	f7ff ffdc 	bl	800273c <bno055_setOperationMode>
}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}

08002788 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(1); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(0); }

void bno055_reset() {
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 800278c:	2120      	movs	r1, #32
 800278e:	203f      	movs	r0, #63	@ 0x3f
 8002790:	f000 f84a 	bl	8002828 <bno055_writeData>
  bno055_delay(700);
 8002794:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8002798:	f000 f83a 	bl	8002810 <bno055_delay>
}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}

080027a0 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
  bno055_reset();
 80027a6:	f7ff ffef 	bl	8002788 <bno055_reset>

  uint8_t id = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80027ae:	1dfb      	adds	r3, r7, #7
 80027b0:	2201      	movs	r2, #1
 80027b2:	4619      	mov	r1, r3
 80027b4:	2000      	movs	r0, #0
 80027b6:	f000 f923 	bl	8002a00 <bno055_readData>
  if (id != BNO055_ID) {
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80027be:	d004      	beq.n	80027ca <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	4619      	mov	r1, r3
 80027c4:	4809      	ldr	r0, [pc, #36]	@ (80027ec <bno055_setup+0x4c>)
 80027c6:	f00f feff 	bl	80125c8 <iprintf>
  }
  bno055_setPage(0);
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7ff ffa8 	bl	8002720 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80027d0:	2100      	movs	r1, #0
 80027d2:	203f      	movs	r0, #63	@ 0x3f
 80027d4:	f000 f828 	bl	8002828 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80027d8:	f7ff ffc8 	bl	800276c <bno055_setOperationModeConfig>
  bno055_delay(10);
 80027dc:	200a      	movs	r0, #10
 80027de:	f000 f817 	bl	8002810 <bno055_delay>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	08014610 	.word	0x08014610

080027f0 <bno055_assignI2C>:
#include <module/bno055_stm32.h>

I2C_HandleTypeDef *_bno055_i2c_port;

// Functions
void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 80027f8:	4a04      	ldr	r2, [pc, #16]	@ (800280c <bno055_assignI2C+0x1c>)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6013      	str	r3, [r2, #0]
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	20000620 	.word	0x20000620

08002810 <bno055_delay>:

void bno055_delay(int time) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fb26 	bl	8002e6c <HAL_Delay>
#endif
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af02      	add	r7, sp, #8
 800282e:	4603      	mov	r3, r0
 8002830:	460a      	mov	r2, r1
 8002832:	71fb      	strb	r3, [r7, #7]
 8002834:	4613      	mov	r3, r2
 8002836:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	733b      	strb	r3, [r7, #12]
 800283c:	79bb      	ldrb	r3, [r7, #6]
 800283e:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8002840:	4b5a      	ldr	r3, [pc, #360]	@ (80029ac <bno055_writeData+0x184>)
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	f107 020c 	add.w	r2, r7, #12
 8002848:	230a      	movs	r3, #10
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	2302      	movs	r3, #2
 800284e:	2150      	movs	r1, #80	@ 0x50
 8002850:	f001 fa22 	bl	8003c98 <HAL_I2C_Master_Transmit>
 8002854:	4603      	mov	r3, r0
 8002856:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8002858:	7dfb      	ldrb	r3, [r7, #23]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 80a0 	beq.w	80029a0 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8002860:	7dfb      	ldrb	r3, [r7, #23]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d103      	bne.n	800286e <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8002866:	4852      	ldr	r0, [pc, #328]	@ (80029b0 <bno055_writeData+0x188>)
 8002868:	f00f ff16 	bl	8012698 <puts>
 800286c:	e012      	b.n	8002894 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 800286e:	7dfb      	ldrb	r3, [r7, #23]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d103      	bne.n	800287c <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8002874:	484f      	ldr	r0, [pc, #316]	@ (80029b4 <bno055_writeData+0x18c>)
 8002876:	f00f ff0f 	bl	8012698 <puts>
 800287a:	e00b      	b.n	8002894 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 800287c:	7dfb      	ldrb	r3, [r7, #23]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d103      	bne.n	800288a <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8002882:	484d      	ldr	r0, [pc, #308]	@ (80029b8 <bno055_writeData+0x190>)
 8002884:	f00f ff08 	bl	8012698 <puts>
 8002888:	e004      	b.n	8002894 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 800288a:	7dfb      	ldrb	r3, [r7, #23]
 800288c:	4619      	mov	r1, r3
 800288e:	484b      	ldr	r0, [pc, #300]	@ (80029bc <bno055_writeData+0x194>)
 8002890:	f00f fe9a 	bl	80125c8 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8002894:	4b45      	ldr	r3, [pc, #276]	@ (80029ac <bno055_writeData+0x184>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f002 f867 	bl	800496c <HAL_I2C_GetError>
 800289e:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d07e      	beq.n	80029a4 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d103      	bne.n	80028b4 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80028ac:	4844      	ldr	r0, [pc, #272]	@ (80029c0 <bno055_writeData+0x198>)
 80028ae:	f00f fef3 	bl	8012698 <puts>
 80028b2:	e021      	b.n	80028f8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d103      	bne.n	80028c2 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80028ba:	4842      	ldr	r0, [pc, #264]	@ (80029c4 <bno055_writeData+0x19c>)
 80028bc:	f00f feec 	bl	8012698 <puts>
 80028c0:	e01a      	b.n	80028f8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d103      	bne.n	80028d0 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80028c8:	483f      	ldr	r0, [pc, #252]	@ (80029c8 <bno055_writeData+0x1a0>)
 80028ca:	f00f fee5 	bl	8012698 <puts>
 80028ce:	e013      	b.n	80028f8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d103      	bne.n	80028de <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 80028d6:	483d      	ldr	r0, [pc, #244]	@ (80029cc <bno055_writeData+0x1a4>)
 80028d8:	f00f fede 	bl	8012698 <puts>
 80028dc:	e00c      	b.n	80028f8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	2b10      	cmp	r3, #16
 80028e2:	d103      	bne.n	80028ec <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80028e4:	483a      	ldr	r0, [pc, #232]	@ (80029d0 <bno055_writeData+0x1a8>)
 80028e6:	f00f fed7 	bl	8012698 <puts>
 80028ea:	e005      	b.n	80028f8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d102      	bne.n	80028f8 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80028f2:	4838      	ldr	r0, [pc, #224]	@ (80029d4 <bno055_writeData+0x1ac>)
 80028f4:	f00f fed0 	bl	8012698 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80028f8:	4b2c      	ldr	r3, [pc, #176]	@ (80029ac <bno055_writeData+0x184>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f002 f827 	bl	8004950 <HAL_I2C_GetState>
 8002902:	4603      	mov	r3, r0
 8002904:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d103      	bne.n	8002914 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 800290c:	4832      	ldr	r0, [pc, #200]	@ (80029d8 <bno055_writeData+0x1b0>)
 800290e:	f00f fec3 	bl	8012698 <puts>
 8002912:	e048      	b.n	80029a6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	2b20      	cmp	r3, #32
 8002918:	d103      	bne.n	8002922 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 800291a:	482f      	ldr	r0, [pc, #188]	@ (80029d8 <bno055_writeData+0x1b0>)
 800291c:	f00f febc 	bl	8012698 <puts>
 8002920:	e041      	b.n	80029a6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	2b24      	cmp	r3, #36	@ 0x24
 8002926:	d103      	bne.n	8002930 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8002928:	482c      	ldr	r0, [pc, #176]	@ (80029dc <bno055_writeData+0x1b4>)
 800292a:	f00f feb5 	bl	8012698 <puts>
 800292e:	e03a      	b.n	80029a6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b21      	cmp	r3, #33	@ 0x21
 8002934:	d103      	bne.n	800293e <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8002936:	482a      	ldr	r0, [pc, #168]	@ (80029e0 <bno055_writeData+0x1b8>)
 8002938:	f00f feae 	bl	8012698 <puts>
 800293c:	e033      	b.n	80029a6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	2b22      	cmp	r3, #34	@ 0x22
 8002942:	d103      	bne.n	800294c <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8002944:	4827      	ldr	r0, [pc, #156]	@ (80029e4 <bno055_writeData+0x1bc>)
 8002946:	f00f fea7 	bl	8012698 <puts>
 800294a:	e02c      	b.n	80029a6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 800294c:	7bfb      	ldrb	r3, [r7, #15]
 800294e:	2b28      	cmp	r3, #40	@ 0x28
 8002950:	d103      	bne.n	800295a <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8002952:	4825      	ldr	r0, [pc, #148]	@ (80029e8 <bno055_writeData+0x1c0>)
 8002954:	f00f fea0 	bl	8012698 <puts>
 8002958:	e025      	b.n	80029a6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	2b29      	cmp	r3, #41	@ 0x29
 800295e:	d103      	bne.n	8002968 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8002960:	4822      	ldr	r0, [pc, #136]	@ (80029ec <bno055_writeData+0x1c4>)
 8002962:	f00f fe99 	bl	8012698 <puts>
 8002966:	e01e      	b.n	80029a6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	2b2a      	cmp	r3, #42	@ 0x2a
 800296c:	d103      	bne.n	8002976 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 800296e:	4820      	ldr	r0, [pc, #128]	@ (80029f0 <bno055_writeData+0x1c8>)
 8002970:	f00f fe92 	bl	8012698 <puts>
 8002974:	e017      	b.n	80029a6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	2b60      	cmp	r3, #96	@ 0x60
 800297a:	d103      	bne.n	8002984 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 800297c:	481d      	ldr	r0, [pc, #116]	@ (80029f4 <bno055_writeData+0x1cc>)
 800297e:	f00f fe8b 	bl	8012698 <puts>
 8002982:	e010      	b.n	80029a6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	2ba0      	cmp	r3, #160	@ 0xa0
 8002988:	d103      	bne.n	8002992 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 800298a:	481b      	ldr	r0, [pc, #108]	@ (80029f8 <bno055_writeData+0x1d0>)
 800298c:	f00f fe84 	bl	8012698 <puts>
 8002990:	e009      	b.n	80029a6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	2be0      	cmp	r3, #224	@ 0xe0
 8002996:	d106      	bne.n	80029a6 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8002998:	4818      	ldr	r0, [pc, #96]	@ (80029fc <bno055_writeData+0x1d4>)
 800299a:	f00f fe7d 	bl	8012698 <puts>
 800299e:	e002      	b.n	80029a6 <bno055_writeData+0x17e>
    return;
 80029a0:	bf00      	nop
 80029a2:	e000      	b.n	80029a6 <bno055_writeData+0x17e>
    return;
 80029a4:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000620 	.word	0x20000620
 80029b0:	0801464c 	.word	0x0801464c
 80029b4:	08014670 	.word	0x08014670
 80029b8:	08014698 	.word	0x08014698
 80029bc:	080146bc 	.word	0x080146bc
 80029c0:	080146d4 	.word	0x080146d4
 80029c4:	080146e8 	.word	0x080146e8
 80029c8:	080146fc 	.word	0x080146fc
 80029cc:	08014710 	.word	0x08014710
 80029d0:	08014724 	.word	0x08014724
 80029d4:	08014738 	.word	0x08014738
 80029d8:	08014750 	.word	0x08014750
 80029dc:	08014768 	.word	0x08014768
 80029e0:	0801477c 	.word	0x0801477c
 80029e4:	08014794 	.word	0x08014794
 80029e8:	080147ac 	.word	0x080147ac
 80029ec:	080147c4 	.word	0x080147c4
 80029f0:	080147e4 	.word	0x080147e4
 80029f4:	08014804 	.word	0x08014804
 80029f8:	0801481c 	.word	0x0801481c
 80029fc:	08014834 	.word	0x08014834

08002a00 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	4603      	mov	r3, r0
 8002a08:	6039      	str	r1, [r7, #0]
 8002a0a:	71fb      	strb	r3, [r7, #7]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8002a10:	4b0b      	ldr	r3, [pc, #44]	@ (8002a40 <bno055_readData+0x40>)
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	1dfa      	adds	r2, r7, #7
 8002a16:	2364      	movs	r3, #100	@ 0x64
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	2150      	movs	r1, #80	@ 0x50
 8002a1e:	f001 f93b 	bl	8003c98 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8002a22:	4b07      	ldr	r3, [pc, #28]	@ (8002a40 <bno055_readData+0x40>)
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	79bb      	ldrb	r3, [r7, #6]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2264      	movs	r2, #100	@ 0x64
 8002a2c:	9200      	str	r2, [sp, #0]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	2150      	movs	r1, #80	@ 0x50
 8002a32:	f001 fa2f 	bl	8003e94 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000620 	.word	0x20000620

08002a44 <Buzzer_Once>:
#ifndef SRC_MODULE_BUZZER_C_
#define SRC_MODULE_BUZZER_C_

#include "module/buzzer.h"

void Buzzer_Once() {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8002a48:	2201      	movs	r2, #1
 8002a4a:	2102      	movs	r1, #2
 8002a4c:	4806      	ldr	r0, [pc, #24]	@ (8002a68 <Buzzer_Once+0x24>)
 8002a4e:	f000 ffab 	bl	80039a8 <HAL_GPIO_WritePin>
	osDelay(100);
 8002a52:	2064      	movs	r0, #100	@ 0x64
 8002a54:	f00b f82c 	bl	800dab0 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2102      	movs	r1, #2
 8002a5c:	4802      	ldr	r0, [pc, #8]	@ (8002a68 <Buzzer_Once+0x24>)
 8002a5e:	f000 ffa3 	bl	80039a8 <HAL_GPIO_WritePin>
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40020800 	.word	0x40020800

08002a6c <Init_BMP390>:

#include <module/init_sensor.h>



void Init_BMP390(void){
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef res1, res2, res3, res4, res5, res6, res7;

	BMP390_AssignI2C(&hi2c1);
 8002a72:	4837      	ldr	r0, [pc, #220]	@ (8002b50 <Init_BMP390+0xe4>)
 8002a74:	f7ff fb50 	bl	8002118 <BMP390_AssignI2C>

	/* Check whether the sensor is ready */
	/*	if ( HAL_I2C_IsDeviceReady(bmp390_phi2c, BMP390_ADDRESS, 10, 10\) != HAL_OK ) Error_Handler();*/

	/* Soft reset */
	res1 = BMP390_SoftReset(1000);
 8002a78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a7c:	f7ff fe02 	bl	8002684 <BMP390_SoftReset>
 8002a80:	4603      	mov	r3, r0
 8002a82:	73fb      	strb	r3, [r7, #15]
	if ( BMP390_SoftReset(1000) != HAL_OK ) Error_Handler();
 8002a84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a88:	f7ff fdfc 	bl	8002684 <BMP390_SoftReset>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <Init_BMP390+0x2a>
 8002a92:	f7fe fc41 	bl	8001318 <Error_Handler>

	/* Set sensor configuration buffers  */
	uint8_t bmp390PWR = BMP390_PWR_ALL_NORMAL;
 8002a96:	2333      	movs	r3, #51	@ 0x33
 8002a98:	723b      	strb	r3, [r7, #8]
	uint8_t bmp390OSR = BMP390_OSR_PX08;
 8002a9a:	2318      	movs	r3, #24
 8002a9c:	71fb      	strb	r3, [r7, #7]
	uint8_t bmp390ODR = BMP390_ODR_50;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	71bb      	strb	r3, [r7, #6]
	uint8_t bmp390CFG = BMP390_CFG_IIR1;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	717b      	strb	r3, [r7, #5]

	/* Initial setting */
	if ( (res2 = BMP390_Write(BMP390_REG_OSR, &bmp390OSR, sizeof(bmp390OSR), 10)) != HAL_OK ) Error_Handler();
 8002aa6:	1df9      	adds	r1, r7, #7
 8002aa8:	230a      	movs	r3, #10
 8002aaa:	2201      	movs	r2, #1
 8002aac:	201c      	movs	r0, #28
 8002aae:	f7ff fdfb 	bl	80026a8 <BMP390_Write>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	73bb      	strb	r3, [r7, #14]
 8002ab6:	7bbb      	ldrb	r3, [r7, #14]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <Init_BMP390+0x54>
 8002abc:	f7fe fc2c 	bl	8001318 <Error_Handler>
	if ( (res3 = BMP390_Write(BMP390_REG_ODR, &bmp390ODR, sizeof(bmp390ODR), 10)) != HAL_OK ) Error_Handler();
 8002ac0:	1db9      	adds	r1, r7, #6
 8002ac2:	230a      	movs	r3, #10
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	201d      	movs	r0, #29
 8002ac8:	f7ff fdee 	bl	80026a8 <BMP390_Write>
 8002acc:	4603      	mov	r3, r0
 8002ace:	737b      	strb	r3, [r7, #13]
 8002ad0:	7b7b      	ldrb	r3, [r7, #13]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <Init_BMP390+0x6e>
 8002ad6:	f7fe fc1f 	bl	8001318 <Error_Handler>
	if ( (res4 = BMP390_Write(BMP390_REG_CFG, &bmp390CFG, sizeof(bmp390CFG), 10)) != HAL_OK ) Error_Handler();
 8002ada:	1d79      	adds	r1, r7, #5
 8002adc:	230a      	movs	r3, #10
 8002ade:	2201      	movs	r2, #1
 8002ae0:	201f      	movs	r0, #31
 8002ae2:	f7ff fde1 	bl	80026a8 <BMP390_Write>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	733b      	strb	r3, [r7, #12]
 8002aea:	7b3b      	ldrb	r3, [r7, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <Init_BMP390+0x88>
 8002af0:	f7fe fc12 	bl	8001318 <Error_Handler>

	/* Don't know why, but it seems like the PWR_CTRL register need to be set\
	 *  twice */
	if ( (res5 = BMP390_Write(BMP390_REG_PWR, &bmp390PWR, sizeof(bmp390PWR), 10)) != HAL_OK ) Error_Handler();
 8002af4:	f107 0108 	add.w	r1, r7, #8
 8002af8:	230a      	movs	r3, #10
 8002afa:	2201      	movs	r2, #1
 8002afc:	201b      	movs	r0, #27
 8002afe:	f7ff fdd3 	bl	80026a8 <BMP390_Write>
 8002b02:	4603      	mov	r3, r0
 8002b04:	72fb      	strb	r3, [r7, #11]
 8002b06:	7afb      	ldrb	r3, [r7, #11]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <Init_BMP390+0xa4>
 8002b0c:	f7fe fc04 	bl	8001318 <Error_Handler>
	if ( (res6 = BMP390_Write(BMP390_REG_PWR, &bmp390PWR, sizeof(bmp390PWR), 10)) != HAL_OK ) Error_Handler();
 8002b10:	f107 0108 	add.w	r1, r7, #8
 8002b14:	230a      	movs	r3, #10
 8002b16:	2201      	movs	r2, #1
 8002b18:	201b      	movs	r0, #27
 8002b1a:	f7ff fdc5 	bl	80026a8 <BMP390_Write>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	72bb      	strb	r3, [r7, #10]
 8002b22:	7abb      	ldrb	r3, [r7, #10]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <Init_BMP390+0xc0>
 8002b28:	f7fe fbf6 	bl	8001318 <Error_Handler>

	osDelay(1000);
 8002b2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b30:	f00a ffbe 	bl	800dab0 <osDelay>

	if ( (res7 = BMP390_ReadCalibration()) != HAL_OK) Error_Handler();
 8002b34:	f7ff fc14 	bl	8002360 <BMP390_ReadCalibration>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	727b      	strb	r3, [r7, #9]
 8002b3c:	7a7b      	ldrb	r3, [r7, #9]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <Init_BMP390+0xdc>
 8002b42:	f7fe fbe9 	bl	8001318 <Error_Handler>

	return;
 8002b46:	bf00      	nop
 8002b48:	bf00      	nop
}
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	200003f4 	.word	0x200003f4

08002b54 <Init_BNO055>:

void Init_BNO055(void){
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
	bno055_assignI2C(&hi2c1);
 8002b58:	4804      	ldr	r0, [pc, #16]	@ (8002b6c <Init_BNO055+0x18>)
 8002b5a:	f7ff fe49 	bl	80027f0 <bno055_assignI2C>
	bno055_setup();
 8002b5e:	f7ff fe1f 	bl	80027a0 <bno055_setup>
	bno055_setOperationModeNDOF();
 8002b62:	f7ff fe0a 	bl	800277a <bno055_setOperationModeNDOF>
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	200003f4 	.word	0x200003f4

08002b70 <Init_SD>:

void Init_SD(void){
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
	//SD_Assign(&hspi2);
	//retUSER = f_mount(&USERFatFS, USERPath, 1);
	//if ( retUSER != FR_OK ) Error_Handler();
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <Init_Servo>:

void Init_Servo(Servo_HandleTypeDef* servo1, Servo_HandleTypeDef* servo2, Servo_HandleTypeDef* servo3){
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
	Servo_Attach(servo1, &htim3, TIM_CHANNEL_1);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	490f      	ldr	r1, [pc, #60]	@ (8002bcc <Init_Servo+0x4c>)
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f81d 	bl	8002bd0 <Servo_Attach>
	Servo_Attach(servo2, &htim3, TIM_CHANNEL_2);
 8002b96:	2204      	movs	r2, #4
 8002b98:	490c      	ldr	r1, [pc, #48]	@ (8002bcc <Init_Servo+0x4c>)
 8002b9a:	68b8      	ldr	r0, [r7, #8]
 8002b9c:	f000 f818 	bl	8002bd0 <Servo_Attach>
	Servo_Attach(servo3, &htim3, TIM_CHANNEL_3);
 8002ba0:	2208      	movs	r2, #8
 8002ba2:	490a      	ldr	r1, [pc, #40]	@ (8002bcc <Init_Servo+0x4c>)
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f813 	bl	8002bd0 <Servo_Attach>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8002baa:	2100      	movs	r1, #0
 8002bac:	4807      	ldr	r0, [pc, #28]	@ (8002bcc <Init_Servo+0x4c>)
 8002bae:	f005 fbf5 	bl	800839c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8002bb2:	2104      	movs	r1, #4
 8002bb4:	4805      	ldr	r0, [pc, #20]	@ (8002bcc <Init_Servo+0x4c>)
 8002bb6:	f005 fbf1 	bl	800839c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8002bba:	2108      	movs	r1, #8
 8002bbc:	4803      	ldr	r0, [pc, #12]	@ (8002bcc <Init_Servo+0x4c>)
 8002bbe:	f005 fbed 	bl	800839c <HAL_TIM_PWM_Start_IT>
}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	200004c0 	.word	0x200004c0

08002bd0 <Servo_Attach>:
#include "servo/servo.h"

void Servo_Attach(Servo_HandleTypeDef *servo, TIM_HandleTypeDef *htim, uint32_t channel){
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
	servo->htim 	= htim;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	601a      	str	r2, [r3, #0]
	servo->channel 	= channel;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	605a      	str	r2, [r3, #4]
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002bf8:	f7fe ff3c 	bl	8001a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bfc:	480c      	ldr	r0, [pc, #48]	@ (8002c30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bfe:	490d      	ldr	r1, [pc, #52]	@ (8002c34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c00:	4a0d      	ldr	r2, [pc, #52]	@ (8002c38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c04:	e002      	b.n	8002c0c <LoopCopyDataInit>

08002c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c0a:	3304      	adds	r3, #4

08002c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c10:	d3f9      	bcc.n	8002c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c12:	4a0a      	ldr	r2, [pc, #40]	@ (8002c3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c14:	4c0a      	ldr	r4, [pc, #40]	@ (8002c40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c18:	e001      	b.n	8002c1e <LoopFillZerobss>

08002c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c1c:	3204      	adds	r2, #4

08002c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c20:	d3fb      	bcc.n	8002c1a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002c22:	f00f fee1 	bl	80129e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c26:	f7fe fa15 	bl	8001054 <main>
  bx  lr    
 8002c2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c34:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 8002c38:	08014cb0 	.word	0x08014cb0
  ldr r2, =_sbss
 8002c3c:	200002ec 	.word	0x200002ec
  ldr r4, =_ebss
 8002c40:	20006d74 	.word	0x20006d74

08002c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c44:	e7fe      	b.n	8002c44 <ADC_IRQHandler>

08002c46 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d105      	bne.n	8002c60 <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c54:	b672      	cpsid	i
}
 8002c56:	bf00      	nop
 8002c58:	f7fe fb5e 	bl	8001318 <Error_Handler>
 8002c5c:	bf00      	nop
 8002c5e:	e7fd      	b.n	8002c5c <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	e007      	b.n	8002c76 <stm32_lock_init+0x30>
  {
    lock->basepri[i] = 0;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3301      	adds	r3, #1
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d9f4      	bls.n	8002c66 <stm32_lock_init+0x20>
  }
  lock->nesting_level = 0;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	721a      	strb	r2, [r3, #8]
}
 8002c82:	bf00      	nop
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c98:	b672      	cpsid	i
}
 8002c9a:	bf00      	nop
 8002c9c:	f7fe fb3c 	bl	8001318 <Error_Handler>
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	7a1b      	ldrb	r3, [r3, #8]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d905      	bls.n	8002cb8 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002cac:	b672      	cpsid	i
}
 8002cae:	bf00      	nop
 8002cb0:	f7fe fb32 	bl	8001318 <Error_Handler>
 8002cb4:	bf00      	nop
 8002cb6:	e7fd      	b.n	8002cb4 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	7a1b      	ldrb	r3, [r3, #8]
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	b2d1      	uxtb	r1, r2
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	7211      	strb	r1, [r2, #8]
 8002cc4:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002cc6:	f3ef 8211 	mrs	r2, BASEPRI
 8002cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cce:	f383 8811 	msr	BASEPRI, r3
 8002cd2:	f3bf 8f6f 	isb	sy
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	60fa      	str	r2, [r7, #12]
 8002cdc:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b084      	sub	sp, #16
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d105      	bne.n	8002d08 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002cfc:	b672      	cpsid	i
}
 8002cfe:	bf00      	nop
 8002d00:	f7fe fb0a 	bl	8001318 <Error_Handler>
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	7a1b      	ldrb	r3, [r3, #8]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	7a1b      	ldrb	r3, [r3, #8]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d905      	bls.n	8002d28 <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d1c:	b672      	cpsid	i
}
 8002d1e:	bf00      	nop
 8002d20:	f7fe fafa 	bl	8001318 <Error_Handler>
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	7a1b      	ldrb	r3, [r3, #8]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d34:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d3c:	bf00      	nop
}
 8002d3e:	bf00      	nop
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d105      	bne.n	8002d60 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8002d54:	f00f fe42 	bl	80129dc <__errno>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2216      	movs	r2, #22
 8002d5c:	601a      	str	r2, [r3, #0]
    return;
 8002d5e:	e016      	b.n	8002d8e <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8002d60:	200c      	movs	r0, #12
 8002d62:	f00e fe61 	bl	8011a28 <malloc>
 8002d66:	4603      	mov	r3, r0
 8002d68:	461a      	mov	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d005      	beq.n	8002d82 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff ff63 	bl	8002c46 <stm32_lock_init>
    return;
 8002d80:	e005      	b.n	8002d8e <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d82:	b672      	cpsid	i
}
 8002d84:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8002d86:	f7fe fac7 	bl	8001318 <Error_Handler>
 8002d8a:	bf00      	nop
 8002d8c:	e7fd      	b.n	8002d8a <__retarget_lock_init_recursive+0x44>
}
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002da2:	b672      	cpsid	i
}
 8002da4:	bf00      	nop
 8002da6:	f7fe fab7 	bl	8001318 <Error_Handler>
 8002daa:	bf00      	nop
 8002dac:	e7fd      	b.n	8002daa <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff ff6a 	bl	8002c8a <stm32_lock_acquire>
}
 8002db6:	bf00      	nop
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d105      	bne.n	8002dd8 <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002dcc:	b672      	cpsid	i
}
 8002dce:	bf00      	nop
 8002dd0:	f7fe faa2 	bl	8001318 <Error_Handler>
 8002dd4:	bf00      	nop
 8002dd6:	e7fd      	b.n	8002dd4 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ff87 	bl	8002cee <stm32_lock_release>
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dec:	4b0e      	ldr	r3, [pc, #56]	@ (8002e28 <HAL_Init+0x40>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a0d      	ldr	r2, [pc, #52]	@ (8002e28 <HAL_Init+0x40>)
 8002df2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002df8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <HAL_Init+0x40>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8002e28 <HAL_Init+0x40>)
 8002dfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e04:	4b08      	ldr	r3, [pc, #32]	@ (8002e28 <HAL_Init+0x40>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a07      	ldr	r2, [pc, #28]	@ (8002e28 <HAL_Init+0x40>)
 8002e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e10:	2003      	movs	r0, #3
 8002e12:	f000 fb6e 	bl	80034f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e16:	200f      	movs	r0, #15
 8002e18:	f7fe fccc 	bl	80017b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e1c:	f7fe fa88 	bl	8001330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40023c00 	.word	0x40023c00

08002e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e30:	4b06      	ldr	r3, [pc, #24]	@ (8002e4c <HAL_IncTick+0x20>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	4b06      	ldr	r3, [pc, #24]	@ (8002e50 <HAL_IncTick+0x24>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	4a04      	ldr	r2, [pc, #16]	@ (8002e50 <HAL_IncTick+0x24>)
 8002e3e:	6013      	str	r3, [r2, #0]
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000008 	.word	0x20000008
 8002e50:	2000063c 	.word	0x2000063c

08002e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  return uwTick;
 8002e58:	4b03      	ldr	r3, [pc, #12]	@ (8002e68 <HAL_GetTick+0x14>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	2000063c 	.word	0x2000063c

08002e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e74:	f7ff ffee 	bl	8002e54 <HAL_GetTick>
 8002e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e84:	d005      	beq.n	8002e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e86:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb0 <HAL_Delay+0x44>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4413      	add	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e92:	bf00      	nop
 8002e94:	f7ff ffde 	bl	8002e54 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d8f7      	bhi.n	8002e94 <HAL_Delay+0x28>
  {
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000008 	.word	0x20000008

08002eb4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e033      	b.n	8002f32 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d109      	bne.n	8002ee6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fe fa58 	bl	8001388 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d118      	bne.n	8002f24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002efa:	f023 0302 	bic.w	r3, r3, #2
 8002efe:	f043 0202 	orr.w	r2, r3, #2
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f94a 	bl	80031a0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	f023 0303 	bic.w	r3, r3, #3
 8002f1a:	f043 0201 	orr.w	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f22:	e001      	b.n	8002f28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x1c>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e113      	b.n	8003180 <HAL_ADC_ConfigChannel+0x244>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b09      	cmp	r3, #9
 8002f66:	d925      	bls.n	8002fb4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68d9      	ldr	r1, [r3, #12]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	4613      	mov	r3, r2
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3b1e      	subs	r3, #30
 8002f7e:	2207      	movs	r2, #7
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43da      	mvns	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	400a      	ands	r2, r1
 8002f8c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68d9      	ldr	r1, [r3, #12]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	4403      	add	r3, r0
 8002fa6:	3b1e      	subs	r3, #30
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	e022      	b.n	8002ffa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6919      	ldr	r1, [r3, #16]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	2207      	movs	r2, #7
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43da      	mvns	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	400a      	ands	r2, r1
 8002fd6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6919      	ldr	r1, [r3, #16]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	4618      	mov	r0, r3
 8002fea:	4603      	mov	r3, r0
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4403      	add	r3, r0
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b06      	cmp	r3, #6
 8003000:	d824      	bhi.n	800304c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	3b05      	subs	r3, #5
 8003014:	221f      	movs	r2, #31
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43da      	mvns	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	400a      	ands	r2, r1
 8003022:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	4618      	mov	r0, r3
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	3b05      	subs	r3, #5
 800303e:	fa00 f203 	lsl.w	r2, r0, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	635a      	str	r2, [r3, #52]	@ 0x34
 800304a:	e04c      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b0c      	cmp	r3, #12
 8003052:	d824      	bhi.n	800309e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	3b23      	subs	r3, #35	@ 0x23
 8003066:	221f      	movs	r2, #31
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43da      	mvns	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	400a      	ands	r2, r1
 8003074:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	b29b      	uxth	r3, r3
 8003082:	4618      	mov	r0, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	3b23      	subs	r3, #35	@ 0x23
 8003090:	fa00 f203 	lsl.w	r2, r0, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	631a      	str	r2, [r3, #48]	@ 0x30
 800309c:	e023      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	3b41      	subs	r3, #65	@ 0x41
 80030b0:	221f      	movs	r2, #31
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43da      	mvns	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	400a      	ands	r2, r1
 80030be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	4618      	mov	r0, r3
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	3b41      	subs	r3, #65	@ 0x41
 80030da:	fa00 f203 	lsl.w	r2, r0, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030e6:	4b29      	ldr	r3, [pc, #164]	@ (800318c <HAL_ADC_ConfigChannel+0x250>)
 80030e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a28      	ldr	r2, [pc, #160]	@ (8003190 <HAL_ADC_ConfigChannel+0x254>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d10f      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x1d8>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b12      	cmp	r3, #18
 80030fa:	d10b      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a1d      	ldr	r2, [pc, #116]	@ (8003190 <HAL_ADC_ConfigChannel+0x254>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d12b      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x23a>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a1c      	ldr	r2, [pc, #112]	@ (8003194 <HAL_ADC_ConfigChannel+0x258>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d003      	beq.n	8003130 <HAL_ADC_ConfigChannel+0x1f4>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b11      	cmp	r3, #17
 800312e:	d122      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a11      	ldr	r2, [pc, #68]	@ (8003194 <HAL_ADC_ConfigChannel+0x258>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d111      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003152:	4b11      	ldr	r3, [pc, #68]	@ (8003198 <HAL_ADC_ConfigChannel+0x25c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a11      	ldr	r2, [pc, #68]	@ (800319c <HAL_ADC_ConfigChannel+0x260>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	0c9a      	lsrs	r2, r3, #18
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003168:	e002      	b.n	8003170 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	3b01      	subs	r3, #1
 800316e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f9      	bne.n	800316a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	40012300 	.word	0x40012300
 8003190:	40012000 	.word	0x40012000
 8003194:	10000012 	.word	0x10000012
 8003198:	20000000 	.word	0x20000000
 800319c:	431bde83 	.word	0x431bde83

080031a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031a8:	4b79      	ldr	r3, [pc, #484]	@ (8003390 <ADC_Init+0x1f0>)
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	431a      	orrs	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6859      	ldr	r1, [r3, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	021a      	lsls	r2, r3, #8
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80031f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6859      	ldr	r1, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800321a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6899      	ldr	r1, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003232:	4a58      	ldr	r2, [pc, #352]	@ (8003394 <ADC_Init+0x1f4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d022      	beq.n	800327e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003246:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6899      	ldr	r1, [r3, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003268:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6899      	ldr	r1, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	e00f      	b.n	800329e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800328c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800329c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0202 	bic.w	r2, r2, #2
 80032ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6899      	ldr	r1, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	7e1b      	ldrb	r3, [r3, #24]
 80032b8:	005a      	lsls	r2, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d01b      	beq.n	8003304 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032da:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80032ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6859      	ldr	r1, [r3, #4]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f6:	3b01      	subs	r3, #1
 80032f8:	035a      	lsls	r2, r3, #13
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	e007      	b.n	8003314 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003312:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003322:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	3b01      	subs	r3, #1
 8003330:	051a      	lsls	r2, r3, #20
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003348:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6899      	ldr	r1, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003356:	025a      	lsls	r2, r3, #9
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800336e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6899      	ldr	r1, [r3, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	029a      	lsls	r2, r3, #10
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	609a      	str	r2, [r3, #8]
}
 8003384:	bf00      	nop
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	40012300 	.word	0x40012300
 8003394:	0f000001 	.word	0x0f000001

08003398 <__NVIC_SetPriorityGrouping>:
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033a8:	4b0c      	ldr	r3, [pc, #48]	@ (80033dc <__NVIC_SetPriorityGrouping+0x44>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033b4:	4013      	ands	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ca:	4a04      	ldr	r2, [pc, #16]	@ (80033dc <__NVIC_SetPriorityGrouping+0x44>)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	60d3      	str	r3, [r2, #12]
}
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <__NVIC_GetPriorityGrouping>:
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e4:	4b04      	ldr	r3, [pc, #16]	@ (80033f8 <__NVIC_GetPriorityGrouping+0x18>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	0a1b      	lsrs	r3, r3, #8
 80033ea:	f003 0307 	and.w	r3, r3, #7
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <__NVIC_EnableIRQ>:
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340a:	2b00      	cmp	r3, #0
 800340c:	db0b      	blt.n	8003426 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	f003 021f 	and.w	r2, r3, #31
 8003414:	4907      	ldr	r1, [pc, #28]	@ (8003434 <__NVIC_EnableIRQ+0x38>)
 8003416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	2001      	movs	r0, #1
 800341e:	fa00 f202 	lsl.w	r2, r0, r2
 8003422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	e000e100 	.word	0xe000e100

08003438 <__NVIC_SetPriority>:
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	6039      	str	r1, [r7, #0]
 8003442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003448:	2b00      	cmp	r3, #0
 800344a:	db0a      	blt.n	8003462 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	b2da      	uxtb	r2, r3
 8003450:	490c      	ldr	r1, [pc, #48]	@ (8003484 <__NVIC_SetPriority+0x4c>)
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	0112      	lsls	r2, r2, #4
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	440b      	add	r3, r1
 800345c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003460:	e00a      	b.n	8003478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	4908      	ldr	r1, [pc, #32]	@ (8003488 <__NVIC_SetPriority+0x50>)
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	3b04      	subs	r3, #4
 8003470:	0112      	lsls	r2, r2, #4
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	440b      	add	r3, r1
 8003476:	761a      	strb	r2, [r3, #24]
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	e000e100 	.word	0xe000e100
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <NVIC_EncodePriority>:
{
 800348c:	b480      	push	{r7}
 800348e:	b089      	sub	sp, #36	@ 0x24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f1c3 0307 	rsb	r3, r3, #7
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	bf28      	it	cs
 80034aa:	2304      	movcs	r3, #4
 80034ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3304      	adds	r3, #4
 80034b2:	2b06      	cmp	r3, #6
 80034b4:	d902      	bls.n	80034bc <NVIC_EncodePriority+0x30>
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3b03      	subs	r3, #3
 80034ba:	e000      	b.n	80034be <NVIC_EncodePriority+0x32>
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c0:	f04f 32ff 	mov.w	r2, #4294967295
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43da      	mvns	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	401a      	ands	r2, r3
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d4:	f04f 31ff 	mov.w	r1, #4294967295
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	fa01 f303 	lsl.w	r3, r1, r3
 80034de:	43d9      	mvns	r1, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e4:	4313      	orrs	r3, r2
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3724      	adds	r7, #36	@ 0x24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff ff4c 	bl	8003398 <__NVIC_SetPriorityGrouping>
}
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800351a:	f7ff ff61 	bl	80033e0 <__NVIC_GetPriorityGrouping>
 800351e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	68b9      	ldr	r1, [r7, #8]
 8003524:	6978      	ldr	r0, [r7, #20]
 8003526:	f7ff ffb1 	bl	800348c <NVIC_EncodePriority>
 800352a:	4602      	mov	r2, r0
 800352c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff ff80 	bl	8003438 <__NVIC_SetPriority>
}
 8003538:	bf00      	nop
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff ff54 	bl	80033fc <__NVIC_EnableIRQ>
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003568:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800356a:	f7ff fc73 	bl	8002e54 <HAL_GetTick>
 800356e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d008      	beq.n	800358e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2280      	movs	r2, #128	@ 0x80
 8003580:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e052      	b.n	8003634 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0216 	bic.w	r2, r2, #22
 800359c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695a      	ldr	r2, [r3, #20]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d103      	bne.n	80035be <HAL_DMA_Abort+0x62>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d007      	beq.n	80035ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0208 	bic.w	r2, r2, #8
 80035cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0201 	bic.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035de:	e013      	b.n	8003608 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035e0:	f7ff fc38 	bl	8002e54 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b05      	cmp	r3, #5
 80035ec:	d90c      	bls.n	8003608 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2220      	movs	r2, #32
 80035f2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2203      	movs	r2, #3
 80035f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e015      	b.n	8003634 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1e4      	bne.n	80035e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361a:	223f      	movs	r2, #63	@ 0x3f
 800361c:	409a      	lsls	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d004      	beq.n	800365a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2280      	movs	r2, #128	@ 0x80
 8003654:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e00c      	b.n	8003674 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2205      	movs	r2, #5
 800365e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0201 	bic.w	r2, r2, #1
 8003670:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003680:	b480      	push	{r7}
 8003682:	b089      	sub	sp, #36	@ 0x24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003692:	2300      	movs	r3, #0
 8003694:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003696:	2300      	movs	r3, #0
 8003698:	61fb      	str	r3, [r7, #28]
 800369a:	e165      	b.n	8003968 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800369c:	2201      	movs	r2, #1
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	4013      	ands	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	f040 8154 	bne.w	8003962 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d005      	beq.n	80036d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d130      	bne.n	8003734 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	2203      	movs	r2, #3
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43db      	mvns	r3, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4013      	ands	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003708:	2201      	movs	r2, #1
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 0201 	and.w	r2, r3, #1
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4313      	orrs	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	2b03      	cmp	r3, #3
 800373e:	d017      	beq.n	8003770 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	2203      	movs	r2, #3
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4013      	ands	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d123      	bne.n	80037c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	08da      	lsrs	r2, r3, #3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3208      	adds	r2, #8
 8003784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003788:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	220f      	movs	r2, #15
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4013      	ands	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	08da      	lsrs	r2, r3, #3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3208      	adds	r2, #8
 80037be:	69b9      	ldr	r1, [r7, #24]
 80037c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	2203      	movs	r2, #3
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 0203 	and.w	r2, r3, #3
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80ae 	beq.w	8003962 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	4b5d      	ldr	r3, [pc, #372]	@ (8003980 <HAL_GPIO_Init+0x300>)
 800380c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380e:	4a5c      	ldr	r2, [pc, #368]	@ (8003980 <HAL_GPIO_Init+0x300>)
 8003810:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003814:	6453      	str	r3, [r2, #68]	@ 0x44
 8003816:	4b5a      	ldr	r3, [pc, #360]	@ (8003980 <HAL_GPIO_Init+0x300>)
 8003818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003822:	4a58      	ldr	r2, [pc, #352]	@ (8003984 <HAL_GPIO_Init+0x304>)
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	089b      	lsrs	r3, r3, #2
 8003828:	3302      	adds	r3, #2
 800382a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	220f      	movs	r2, #15
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4013      	ands	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a4f      	ldr	r2, [pc, #316]	@ (8003988 <HAL_GPIO_Init+0x308>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d025      	beq.n	800389a <HAL_GPIO_Init+0x21a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a4e      	ldr	r2, [pc, #312]	@ (800398c <HAL_GPIO_Init+0x30c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d01f      	beq.n	8003896 <HAL_GPIO_Init+0x216>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a4d      	ldr	r2, [pc, #308]	@ (8003990 <HAL_GPIO_Init+0x310>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d019      	beq.n	8003892 <HAL_GPIO_Init+0x212>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a4c      	ldr	r2, [pc, #304]	@ (8003994 <HAL_GPIO_Init+0x314>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d013      	beq.n	800388e <HAL_GPIO_Init+0x20e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a4b      	ldr	r2, [pc, #300]	@ (8003998 <HAL_GPIO_Init+0x318>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00d      	beq.n	800388a <HAL_GPIO_Init+0x20a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a4a      	ldr	r2, [pc, #296]	@ (800399c <HAL_GPIO_Init+0x31c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d007      	beq.n	8003886 <HAL_GPIO_Init+0x206>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a49      	ldr	r2, [pc, #292]	@ (80039a0 <HAL_GPIO_Init+0x320>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d101      	bne.n	8003882 <HAL_GPIO_Init+0x202>
 800387e:	2306      	movs	r3, #6
 8003880:	e00c      	b.n	800389c <HAL_GPIO_Init+0x21c>
 8003882:	2307      	movs	r3, #7
 8003884:	e00a      	b.n	800389c <HAL_GPIO_Init+0x21c>
 8003886:	2305      	movs	r3, #5
 8003888:	e008      	b.n	800389c <HAL_GPIO_Init+0x21c>
 800388a:	2304      	movs	r3, #4
 800388c:	e006      	b.n	800389c <HAL_GPIO_Init+0x21c>
 800388e:	2303      	movs	r3, #3
 8003890:	e004      	b.n	800389c <HAL_GPIO_Init+0x21c>
 8003892:	2302      	movs	r3, #2
 8003894:	e002      	b.n	800389c <HAL_GPIO_Init+0x21c>
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <HAL_GPIO_Init+0x21c>
 800389a:	2300      	movs	r3, #0
 800389c:	69fa      	ldr	r2, [r7, #28]
 800389e:	f002 0203 	and.w	r2, r2, #3
 80038a2:	0092      	lsls	r2, r2, #2
 80038a4:	4093      	lsls	r3, r2
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038ac:	4935      	ldr	r1, [pc, #212]	@ (8003984 <HAL_GPIO_Init+0x304>)
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	089b      	lsrs	r3, r3, #2
 80038b2:	3302      	adds	r3, #2
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038ba:	4b3a      	ldr	r3, [pc, #232]	@ (80039a4 <HAL_GPIO_Init+0x324>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038de:	4a31      	ldr	r2, [pc, #196]	@ (80039a4 <HAL_GPIO_Init+0x324>)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038e4:	4b2f      	ldr	r3, [pc, #188]	@ (80039a4 <HAL_GPIO_Init+0x324>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003908:	4a26      	ldr	r2, [pc, #152]	@ (80039a4 <HAL_GPIO_Init+0x324>)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800390e:	4b25      	ldr	r3, [pc, #148]	@ (80039a4 <HAL_GPIO_Init+0x324>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	43db      	mvns	r3, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4013      	ands	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003932:	4a1c      	ldr	r2, [pc, #112]	@ (80039a4 <HAL_GPIO_Init+0x324>)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003938:	4b1a      	ldr	r3, [pc, #104]	@ (80039a4 <HAL_GPIO_Init+0x324>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800395c:	4a11      	ldr	r2, [pc, #68]	@ (80039a4 <HAL_GPIO_Init+0x324>)
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	3301      	adds	r3, #1
 8003966:	61fb      	str	r3, [r7, #28]
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	2b0f      	cmp	r3, #15
 800396c:	f67f ae96 	bls.w	800369c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003970:	bf00      	nop
 8003972:	bf00      	nop
 8003974:	3724      	adds	r7, #36	@ 0x24
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	40023800 	.word	0x40023800
 8003984:	40013800 	.word	0x40013800
 8003988:	40020000 	.word	0x40020000
 800398c:	40020400 	.word	0x40020400
 8003990:	40020800 	.word	0x40020800
 8003994:	40020c00 	.word	0x40020c00
 8003998:	40021000 	.word	0x40021000
 800399c:	40021400 	.word	0x40021400
 80039a0:	40021800 	.word	0x40021800
 80039a4:	40013c00 	.word	0x40013c00

080039a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	807b      	strh	r3, [r7, #2]
 80039b4:	4613      	mov	r3, r2
 80039b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039b8:	787b      	ldrb	r3, [r7, #1]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039be:	887a      	ldrh	r2, [r7, #2]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039c4:	e003      	b.n	80039ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039c6:	887b      	ldrh	r3, [r7, #2]
 80039c8:	041a      	lsls	r2, r3, #16
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	619a      	str	r2, [r3, #24]
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039da:	b480      	push	{r7}
 80039dc:	b085      	sub	sp, #20
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	460b      	mov	r3, r1
 80039e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039ec:	887a      	ldrh	r2, [r7, #2]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4013      	ands	r3, r2
 80039f2:	041a      	lsls	r2, r3, #16
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	43d9      	mvns	r1, r3
 80039f8:	887b      	ldrh	r3, [r7, #2]
 80039fa:	400b      	ands	r3, r1
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	619a      	str	r2, [r3, #24]
}
 8003a02:	bf00      	nop
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
	...

08003a10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e12b      	b.n	8003c7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fd fcea 	bl	8001410 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2224      	movs	r2, #36	@ 0x24
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0201 	bic.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a74:	f003 f818 	bl	8006aa8 <HAL_RCC_GetPCLK1Freq>
 8003a78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	4a81      	ldr	r2, [pc, #516]	@ (8003c84 <HAL_I2C_Init+0x274>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d807      	bhi.n	8003a94 <HAL_I2C_Init+0x84>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4a80      	ldr	r2, [pc, #512]	@ (8003c88 <HAL_I2C_Init+0x278>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	bf94      	ite	ls
 8003a8c:	2301      	movls	r3, #1
 8003a8e:	2300      	movhi	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	e006      	b.n	8003aa2 <HAL_I2C_Init+0x92>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4a7d      	ldr	r2, [pc, #500]	@ (8003c8c <HAL_I2C_Init+0x27c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	bf94      	ite	ls
 8003a9c:	2301      	movls	r3, #1
 8003a9e:	2300      	movhi	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e0e7      	b.n	8003c7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4a78      	ldr	r2, [pc, #480]	@ (8003c90 <HAL_I2C_Init+0x280>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	0c9b      	lsrs	r3, r3, #18
 8003ab4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	4a6a      	ldr	r2, [pc, #424]	@ (8003c84 <HAL_I2C_Init+0x274>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d802      	bhi.n	8003ae4 <HAL_I2C_Init+0xd4>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	e009      	b.n	8003af8 <HAL_I2C_Init+0xe8>
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	4a69      	ldr	r2, [pc, #420]	@ (8003c94 <HAL_I2C_Init+0x284>)
 8003af0:	fba2 2303 	umull	r2, r3, r2, r3
 8003af4:	099b      	lsrs	r3, r3, #6
 8003af6:	3301      	adds	r3, #1
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	430b      	orrs	r3, r1
 8003afe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	495c      	ldr	r1, [pc, #368]	@ (8003c84 <HAL_I2C_Init+0x274>)
 8003b14:	428b      	cmp	r3, r1
 8003b16:	d819      	bhi.n	8003b4c <HAL_I2C_Init+0x13c>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1e59      	subs	r1, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b26:	1c59      	adds	r1, r3, #1
 8003b28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b2c:	400b      	ands	r3, r1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HAL_I2C_Init+0x138>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1e59      	subs	r1, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b40:	3301      	adds	r3, #1
 8003b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b46:	e051      	b.n	8003bec <HAL_I2C_Init+0x1dc>
 8003b48:	2304      	movs	r3, #4
 8003b4a:	e04f      	b.n	8003bec <HAL_I2C_Init+0x1dc>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d111      	bne.n	8003b78 <HAL_I2C_Init+0x168>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1e58      	subs	r0, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	440b      	add	r3, r1
 8003b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b66:	3301      	adds	r3, #1
 8003b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	bf0c      	ite	eq
 8003b70:	2301      	moveq	r3, #1
 8003b72:	2300      	movne	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	e012      	b.n	8003b9e <HAL_I2C_Init+0x18e>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	1e58      	subs	r0, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6859      	ldr	r1, [r3, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	0099      	lsls	r1, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	bf0c      	ite	eq
 8003b98:	2301      	moveq	r3, #1
 8003b9a:	2300      	movne	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_I2C_Init+0x196>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e022      	b.n	8003bec <HAL_I2C_Init+0x1dc>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10e      	bne.n	8003bcc <HAL_I2C_Init+0x1bc>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1e58      	subs	r0, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6859      	ldr	r1, [r3, #4]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	440b      	add	r3, r1
 8003bbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bca:	e00f      	b.n	8003bec <HAL_I2C_Init+0x1dc>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	1e58      	subs	r0, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	0099      	lsls	r1, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be2:	3301      	adds	r3, #1
 8003be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	6809      	ldr	r1, [r1, #0]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69da      	ldr	r2, [r3, #28]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6911      	ldr	r1, [r2, #16]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	68d2      	ldr	r2, [r2, #12]
 8003c26:	4311      	orrs	r1, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	000186a0 	.word	0x000186a0
 8003c88:	001e847f 	.word	0x001e847f
 8003c8c:	003d08ff 	.word	0x003d08ff
 8003c90:	431bde83 	.word	0x431bde83
 8003c94:	10624dd3 	.word	0x10624dd3

08003c98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	607a      	str	r2, [r7, #4]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	817b      	strh	r3, [r7, #10]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cac:	f7ff f8d2 	bl	8002e54 <HAL_GetTick>
 8003cb0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	f040 80e0 	bne.w	8003e80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	2319      	movs	r3, #25
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	4970      	ldr	r1, [pc, #448]	@ (8003e8c <HAL_I2C_Master_Transmit+0x1f4>)
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f001 f928 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e0d3      	b.n	8003e82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_I2C_Master_Transmit+0x50>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e0cc      	b.n	8003e82 <HAL_I2C_Master_Transmit+0x1ea>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d007      	beq.n	8003d0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0201 	orr.w	r2, r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2221      	movs	r2, #33	@ 0x21
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2210      	movs	r2, #16
 8003d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	893a      	ldrh	r2, [r7, #8]
 8003d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4a50      	ldr	r2, [pc, #320]	@ (8003e90 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d50:	8979      	ldrh	r1, [r7, #10]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	6a3a      	ldr	r2, [r7, #32]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 fe14 	bl	8004984 <I2C_MasterRequestWrite>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e08d      	b.n	8003e82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d66:	2300      	movs	r3, #0
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d7c:	e066      	b.n	8003e4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	6a39      	ldr	r1, [r7, #32]
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f001 f9e6 	bl	8005154 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00d      	beq.n	8003daa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d107      	bne.n	8003da6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e06b      	b.n	8003e82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dae:	781a      	ldrb	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d11b      	bne.n	8003e20 <HAL_I2C_Master_Transmit+0x188>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d017      	beq.n	8003e20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df4:	781a      	ldrb	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	6a39      	ldr	r1, [r7, #32]
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f001 f9dd 	bl	80051e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00d      	beq.n	8003e4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d107      	bne.n	8003e48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e01a      	b.n	8003e82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d194      	bne.n	8003d7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e000      	b.n	8003e82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e80:	2302      	movs	r3, #2
  }
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	00100002 	.word	0x00100002
 8003e90:	ffff0000 	.word	0xffff0000

08003e94 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08c      	sub	sp, #48	@ 0x30
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	817b      	strh	r3, [r7, #10]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ea8:	f7fe ffd4 	bl	8002e54 <HAL_GetTick>
 8003eac:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b20      	cmp	r3, #32
 8003eb8:	f040 8217 	bne.w	80042ea <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	2319      	movs	r3, #25
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	497c      	ldr	r1, [pc, #496]	@ (80040b8 <HAL_I2C_Master_Receive+0x224>)
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f001 f82a 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e20a      	b.n	80042ec <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_I2C_Master_Receive+0x50>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e203      	b.n	80042ec <HAL_I2C_Master_Receive+0x458>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d007      	beq.n	8003f0a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0201 	orr.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2222      	movs	r2, #34	@ 0x22
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2210      	movs	r2, #16
 8003f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	893a      	ldrh	r2, [r7, #8]
 8003f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4a5c      	ldr	r2, [pc, #368]	@ (80040bc <HAL_I2C_Master_Receive+0x228>)
 8003f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f4c:	8979      	ldrh	r1, [r7, #10]
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fd98 	bl	8004a88 <I2C_MasterRequestRead>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e1c4      	b.n	80042ec <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d113      	bne.n	8003f92 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	623b      	str	r3, [r7, #32]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	623b      	str	r3, [r7, #32]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	623b      	str	r3, [r7, #32]
 8003f7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e198      	b.n	80042c4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d11b      	bne.n	8003fd2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fa8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	61fb      	str	r3, [r7, #28]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	e178      	b.n	80042c4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d11b      	bne.n	8004012 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fe8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ff8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61bb      	str	r3, [r7, #24]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	e158      	b.n	80042c4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004020:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004038:	e144      	b.n	80042c4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403e:	2b03      	cmp	r3, #3
 8004040:	f200 80f1 	bhi.w	8004226 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004048:	2b01      	cmp	r3, #1
 800404a:	d123      	bne.n	8004094 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800404c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800404e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f001 f90f 	bl	8005274 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e145      	b.n	80042ec <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004092:	e117      	b.n	80042c4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004098:	2b02      	cmp	r3, #2
 800409a:	d14e      	bne.n	800413a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800409c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a2:	2200      	movs	r2, #0
 80040a4:	4906      	ldr	r1, [pc, #24]	@ (80040c0 <HAL_I2C_Master_Receive+0x22c>)
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 ff3a 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d008      	beq.n	80040c4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e11a      	b.n	80042ec <HAL_I2C_Master_Receive+0x458>
 80040b6:	bf00      	nop
 80040b8:	00100002 	.word	0x00100002
 80040bc:	ffff0000 	.word	0xffff0000
 80040c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691a      	ldr	r2, [r3, #16]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004138:	e0c4      	b.n	80042c4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004140:	2200      	movs	r2, #0
 8004142:	496c      	ldr	r1, [pc, #432]	@ (80042f4 <HAL_I2C_Master_Receive+0x460>)
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 feeb 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0cb      	b.n	80042ec <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004162:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419c:	2200      	movs	r2, #0
 800419e:	4955      	ldr	r1, [pc, #340]	@ (80042f4 <HAL_I2C_Master_Receive+0x460>)
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 febd 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e09d      	b.n	80042ec <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	691a      	ldr	r2, [r3, #16]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800421a:	b29b      	uxth	r3, r3
 800421c:	3b01      	subs	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004224:	e04e      	b.n	80042c4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004228:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f001 f822 	bl	8005274 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e058      	b.n	80042ec <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	2b04      	cmp	r3, #4
 8004278:	d124      	bne.n	80042c4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800427e:	2b03      	cmp	r3, #3
 8004280:	d107      	bne.n	8004292 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004290:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f47f aeb6 	bne.w	800403a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	e000      	b.n	80042ec <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80042ea:	2302      	movs	r3, #2
  }
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3728      	adds	r7, #40	@ 0x28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	00010004 	.word	0x00010004

080042f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b088      	sub	sp, #32
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	4608      	mov	r0, r1
 8004302:	4611      	mov	r1, r2
 8004304:	461a      	mov	r2, r3
 8004306:	4603      	mov	r3, r0
 8004308:	817b      	strh	r3, [r7, #10]
 800430a:	460b      	mov	r3, r1
 800430c:	813b      	strh	r3, [r7, #8]
 800430e:	4613      	mov	r3, r2
 8004310:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004312:	f7fe fd9f 	bl	8002e54 <HAL_GetTick>
 8004316:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b20      	cmp	r3, #32
 8004322:	f040 80d9 	bne.w	80044d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	2319      	movs	r3, #25
 800432c:	2201      	movs	r2, #1
 800432e:	496d      	ldr	r1, [pc, #436]	@ (80044e4 <HAL_I2C_Mem_Write+0x1ec>)
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 fdf5 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800433c:	2302      	movs	r3, #2
 800433e:	e0cc      	b.n	80044da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004346:	2b01      	cmp	r3, #1
 8004348:	d101      	bne.n	800434e <HAL_I2C_Mem_Write+0x56>
 800434a:	2302      	movs	r3, #2
 800434c:	e0c5      	b.n	80044da <HAL_I2C_Mem_Write+0x1e2>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b01      	cmp	r3, #1
 8004362:	d007      	beq.n	8004374 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0201 	orr.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004382:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2221      	movs	r2, #33	@ 0x21
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2240      	movs	r2, #64	@ 0x40
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a3a      	ldr	r2, [r7, #32]
 800439e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80043a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4a4d      	ldr	r2, [pc, #308]	@ (80044e8 <HAL_I2C_Mem_Write+0x1f0>)
 80043b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043b6:	88f8      	ldrh	r0, [r7, #6]
 80043b8:	893a      	ldrh	r2, [r7, #8]
 80043ba:	8979      	ldrh	r1, [r7, #10]
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	9301      	str	r3, [sp, #4]
 80043c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	4603      	mov	r3, r0
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 fc2c 	bl	8004c24 <I2C_RequestMemoryWrite>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d052      	beq.n	8004478 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e081      	b.n	80044da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 feba 	bl	8005154 <I2C_WaitOnTXEFlagUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00d      	beq.n	8004402 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d107      	bne.n	80043fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e06b      	b.n	80044da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004406:	781a      	ldrb	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b04      	cmp	r3, #4
 800443e:	d11b      	bne.n	8004478 <HAL_I2C_Mem_Write+0x180>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004444:	2b00      	cmp	r3, #0
 8004446:	d017      	beq.n	8004478 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444c:	781a      	ldrb	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1aa      	bne.n	80043d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 fead 	bl	80051e4 <I2C_WaitOnBTFFlagUntilTimeout>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00d      	beq.n	80044ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004494:	2b04      	cmp	r3, #4
 8004496:	d107      	bne.n	80044a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e016      	b.n	80044da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	e000      	b.n	80044da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80044d8:	2302      	movs	r3, #2
  }
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	00100002 	.word	0x00100002
 80044e8:	ffff0000 	.word	0xffff0000

080044ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08c      	sub	sp, #48	@ 0x30
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	4608      	mov	r0, r1
 80044f6:	4611      	mov	r1, r2
 80044f8:	461a      	mov	r2, r3
 80044fa:	4603      	mov	r3, r0
 80044fc:	817b      	strh	r3, [r7, #10]
 80044fe:	460b      	mov	r3, r1
 8004500:	813b      	strh	r3, [r7, #8]
 8004502:	4613      	mov	r3, r2
 8004504:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004506:	f7fe fca5 	bl	8002e54 <HAL_GetTick>
 800450a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b20      	cmp	r3, #32
 8004516:	f040 8214 	bne.w	8004942 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	2319      	movs	r3, #25
 8004520:	2201      	movs	r2, #1
 8004522:	497b      	ldr	r1, [pc, #492]	@ (8004710 <HAL_I2C_Mem_Read+0x224>)
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 fcfb 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004530:	2302      	movs	r3, #2
 8004532:	e207      	b.n	8004944 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800453a:	2b01      	cmp	r3, #1
 800453c:	d101      	bne.n	8004542 <HAL_I2C_Mem_Read+0x56>
 800453e:	2302      	movs	r3, #2
 8004540:	e200      	b.n	8004944 <HAL_I2C_Mem_Read+0x458>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b01      	cmp	r3, #1
 8004556:	d007      	beq.n	8004568 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004576:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2222      	movs	r2, #34	@ 0x22
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2240      	movs	r2, #64	@ 0x40
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004592:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004598:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4a5b      	ldr	r2, [pc, #364]	@ (8004714 <HAL_I2C_Mem_Read+0x228>)
 80045a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045aa:	88f8      	ldrh	r0, [r7, #6]
 80045ac:	893a      	ldrh	r2, [r7, #8]
 80045ae:	8979      	ldrh	r1, [r7, #10]
 80045b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b2:	9301      	str	r3, [sp, #4]
 80045b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	4603      	mov	r3, r0
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 fbc8 	bl	8004d50 <I2C_RequestMemoryRead>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e1bc      	b.n	8004944 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d113      	bne.n	80045fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d2:	2300      	movs	r3, #0
 80045d4:	623b      	str	r3, [r7, #32]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	623b      	str	r3, [r7, #32]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	623b      	str	r3, [r7, #32]
 80045e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	e190      	b.n	800491c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d11b      	bne.n	800463a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004610:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004612:	2300      	movs	r3, #0
 8004614:	61fb      	str	r3, [r7, #28]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	61fb      	str	r3, [r7, #28]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	61fb      	str	r3, [r7, #28]
 8004626:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	e170      	b.n	800491c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800463e:	2b02      	cmp	r3, #2
 8004640:	d11b      	bne.n	800467a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004650:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004660:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004662:	2300      	movs	r3, #0
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	e150      	b.n	800491c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004690:	e144      	b.n	800491c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004696:	2b03      	cmp	r3, #3
 8004698:	f200 80f1 	bhi.w	800487e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d123      	bne.n	80046ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 fde3 	bl	8005274 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e145      	b.n	8004944 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691a      	ldr	r2, [r3, #16]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046ea:	e117      	b.n	800491c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d14e      	bne.n	8004792 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fa:	2200      	movs	r2, #0
 80046fc:	4906      	ldr	r1, [pc, #24]	@ (8004718 <HAL_I2C_Mem_Read+0x22c>)
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 fc0e 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d008      	beq.n	800471c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e11a      	b.n	8004944 <HAL_I2C_Mem_Read+0x458>
 800470e:	bf00      	nop
 8004710:	00100002 	.word	0x00100002
 8004714:	ffff0000 	.word	0xffff0000
 8004718:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800472a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691a      	ldr	r2, [r3, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004790:	e0c4      	b.n	800491c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004798:	2200      	movs	r2, #0
 800479a:	496c      	ldr	r1, [pc, #432]	@ (800494c <HAL_I2C_Mem_Read+0x460>)
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 fbbf 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0cb      	b.n	8004944 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691a      	ldr	r2, [r3, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3b01      	subs	r3, #1
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f4:	2200      	movs	r2, #0
 80047f6:	4955      	ldr	r1, [pc, #340]	@ (800494c <HAL_I2C_Mem_Read+0x460>)
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 fb91 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e09d      	b.n	8004944 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004816:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004866:	3b01      	subs	r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800487c:	e04e      	b.n	800491c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800487e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004880:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 fcf6 	bl	8005274 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e058      	b.n	8004944 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	691a      	ldr	r2, [r3, #16]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489c:	b2d2      	uxtb	r2, r2
 800489e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a4:	1c5a      	adds	r2, r3, #1
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d124      	bne.n	800491c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d6:	2b03      	cmp	r3, #3
 80048d8:	d107      	bne.n	80048ea <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048e8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fc:	1c5a      	adds	r2, r3, #1
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004920:	2b00      	cmp	r3, #0
 8004922:	f47f aeb6 	bne.w	8004692 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2220      	movs	r2, #32
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	e000      	b.n	8004944 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004942:	2302      	movs	r3, #2
  }
}
 8004944:	4618      	mov	r0, r3
 8004946:	3728      	adds	r7, #40	@ 0x28
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	00010004 	.word	0x00010004

08004950 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800495e:	b2db      	uxtb	r3, r3
}
 8004960:	4618      	mov	r0, r3
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004978:	4618      	mov	r0, r3
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af02      	add	r7, sp, #8
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	607a      	str	r2, [r7, #4]
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	460b      	mov	r3, r1
 8004992:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004998:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b08      	cmp	r3, #8
 800499e:	d006      	beq.n	80049ae <I2C_MasterRequestWrite+0x2a>
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d003      	beq.n	80049ae <I2C_MasterRequestWrite+0x2a>
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80049ac:	d108      	bne.n	80049c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	e00b      	b.n	80049d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c4:	2b12      	cmp	r3, #18
 80049c6:	d107      	bne.n	80049d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 fa9b 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00d      	beq.n	8004a0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049fe:	d103      	bne.n	8004a08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e035      	b.n	8004a78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a14:	d108      	bne.n	8004a28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a16:	897b      	ldrh	r3, [r7, #10]
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a24:	611a      	str	r2, [r3, #16]
 8004a26:	e01b      	b.n	8004a60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a28:	897b      	ldrh	r3, [r7, #10]
 8004a2a:	11db      	asrs	r3, r3, #7
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	f003 0306 	and.w	r3, r3, #6
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	f063 030f 	orn	r3, r3, #15
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	490e      	ldr	r1, [pc, #56]	@ (8004a80 <I2C_MasterRequestWrite+0xfc>)
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 fae4 	bl	8005014 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e010      	b.n	8004a78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a56:	897b      	ldrh	r3, [r7, #10]
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	4907      	ldr	r1, [pc, #28]	@ (8004a84 <I2C_MasterRequestWrite+0x100>)
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 fad4 	bl	8005014 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	00010008 	.word	0x00010008
 8004a84:	00010002 	.word	0x00010002

08004a88 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	460b      	mov	r3, r1
 8004a96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004aac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d006      	beq.n	8004ac2 <I2C_MasterRequestRead+0x3a>
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d003      	beq.n	8004ac2 <I2C_MasterRequestRead+0x3a>
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ac0:	d108      	bne.n	8004ad4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	e00b      	b.n	8004aec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad8:	2b11      	cmp	r3, #17
 8004ada:	d107      	bne.n	8004aec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004aea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 fa11 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00d      	beq.n	8004b20 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b12:	d103      	bne.n	8004b1c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e079      	b.n	8004c14 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b28:	d108      	bne.n	8004b3c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b2a:	897b      	ldrh	r3, [r7, #10]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	f043 0301 	orr.w	r3, r3, #1
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	611a      	str	r2, [r3, #16]
 8004b3a:	e05f      	b.n	8004bfc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b3c:	897b      	ldrh	r3, [r7, #10]
 8004b3e:	11db      	asrs	r3, r3, #7
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	f003 0306 	and.w	r3, r3, #6
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	f063 030f 	orn	r3, r3, #15
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	4930      	ldr	r1, [pc, #192]	@ (8004c1c <I2C_MasterRequestRead+0x194>)
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 fa5a 	bl	8005014 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e054      	b.n	8004c14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b6a:	897b      	ldrh	r3, [r7, #10]
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	4929      	ldr	r1, [pc, #164]	@ (8004c20 <I2C_MasterRequestRead+0x198>)
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 fa4a 	bl	8005014 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e044      	b.n	8004c14 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	613b      	str	r3, [r7, #16]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	613b      	str	r3, [r7, #16]
 8004b9e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 f9af 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00d      	beq.n	8004be4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bd6:	d103      	bne.n	8004be0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bde:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e017      	b.n	8004c14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004be4:	897b      	ldrh	r3, [r7, #10]
 8004be6:	11db      	asrs	r3, r3, #7
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	f003 0306 	and.w	r3, r3, #6
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	f063 030e 	orn	r3, r3, #14
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	4907      	ldr	r1, [pc, #28]	@ (8004c20 <I2C_MasterRequestRead+0x198>)
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 fa06 	bl	8005014 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	00010008 	.word	0x00010008
 8004c20:	00010002 	.word	0x00010002

08004c24 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	4608      	mov	r0, r1
 8004c2e:	4611      	mov	r1, r2
 8004c30:	461a      	mov	r2, r3
 8004c32:	4603      	mov	r3, r0
 8004c34:	817b      	strh	r3, [r7, #10]
 8004c36:	460b      	mov	r3, r1
 8004c38:	813b      	strh	r3, [r7, #8]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	6a3b      	ldr	r3, [r7, #32]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f960 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00d      	beq.n	8004c82 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c74:	d103      	bne.n	8004c7e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e05f      	b.n	8004d42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c82:	897b      	ldrh	r3, [r7, #10]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	461a      	mov	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c94:	6a3a      	ldr	r2, [r7, #32]
 8004c96:	492d      	ldr	r1, [pc, #180]	@ (8004d4c <I2C_RequestMemoryWrite+0x128>)
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 f9bb 	bl	8005014 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e04c      	b.n	8004d42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ca8:	2300      	movs	r3, #0
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cc0:	6a39      	ldr	r1, [r7, #32]
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 fa46 	bl	8005154 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00d      	beq.n	8004cea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d107      	bne.n	8004ce6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ce4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e02b      	b.n	8004d42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cea:	88fb      	ldrh	r3, [r7, #6]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d105      	bne.n	8004cfc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cf0:	893b      	ldrh	r3, [r7, #8]
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	611a      	str	r2, [r3, #16]
 8004cfa:	e021      	b.n	8004d40 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cfc:	893b      	ldrh	r3, [r7, #8]
 8004cfe:	0a1b      	lsrs	r3, r3, #8
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d0c:	6a39      	ldr	r1, [r7, #32]
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 fa20 	bl	8005154 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00d      	beq.n	8004d36 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d107      	bne.n	8004d32 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e005      	b.n	8004d42 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d36:	893b      	ldrh	r3, [r7, #8]
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	00010002 	.word	0x00010002

08004d50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	4608      	mov	r0, r1
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	4603      	mov	r3, r0
 8004d60:	817b      	strh	r3, [r7, #10]
 8004d62:	460b      	mov	r3, r1
 8004d64:	813b      	strh	r3, [r7, #8]
 8004d66:	4613      	mov	r3, r2
 8004d68:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d78:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 f8c2 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00d      	beq.n	8004dbe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004db0:	d103      	bne.n	8004dba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004db8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e0aa      	b.n	8004f14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dbe:	897b      	ldrh	r3, [r7, #10]
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004dcc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd0:	6a3a      	ldr	r2, [r7, #32]
 8004dd2:	4952      	ldr	r1, [pc, #328]	@ (8004f1c <I2C_RequestMemoryRead+0x1cc>)
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 f91d 	bl	8005014 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e097      	b.n	8004f14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dfc:	6a39      	ldr	r1, [r7, #32]
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 f9a8 	bl	8005154 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00d      	beq.n	8004e26 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d107      	bne.n	8004e22 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e076      	b.n	8004f14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e26:	88fb      	ldrh	r3, [r7, #6]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d105      	bne.n	8004e38 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e2c:	893b      	ldrh	r3, [r7, #8]
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	611a      	str	r2, [r3, #16]
 8004e36:	e021      	b.n	8004e7c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e38:	893b      	ldrh	r3, [r7, #8]
 8004e3a:	0a1b      	lsrs	r3, r3, #8
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e48:	6a39      	ldr	r1, [r7, #32]
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f982 	bl	8005154 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00d      	beq.n	8004e72 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d107      	bne.n	8004e6e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e050      	b.n	8004f14 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e72:	893b      	ldrh	r3, [r7, #8]
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e7e:	6a39      	ldr	r1, [r7, #32]
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 f967 	bl	8005154 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00d      	beq.n	8004ea8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d107      	bne.n	8004ea4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ea2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e035      	b.n	8004f14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004eb6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 f82b 	bl	8004f20 <I2C_WaitOnFlagUntilTimeout>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00d      	beq.n	8004eec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ede:	d103      	bne.n	8004ee8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ee6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e013      	b.n	8004f14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004eec:	897b      	ldrh	r3, [r7, #10]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	f043 0301 	orr.w	r3, r3, #1
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efe:	6a3a      	ldr	r2, [r7, #32]
 8004f00:	4906      	ldr	r1, [pc, #24]	@ (8004f1c <I2C_RequestMemoryRead+0x1cc>)
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 f886 	bl	8005014 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e000      	b.n	8004f14 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	00010002 	.word	0x00010002

08004f20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f30:	e048      	b.n	8004fc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f38:	d044      	beq.n	8004fc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3a:	f7fd ff8b 	bl	8002e54 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d302      	bcc.n	8004f50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d139      	bne.n	8004fc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	0c1b      	lsrs	r3, r3, #16
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d10d      	bne.n	8004f76 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	43da      	mvns	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4013      	ands	r3, r2
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	bf0c      	ite	eq
 8004f6c:	2301      	moveq	r3, #1
 8004f6e:	2300      	movne	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	461a      	mov	r2, r3
 8004f74:	e00c      	b.n	8004f90 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	43da      	mvns	r2, r3
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	4013      	ands	r3, r2
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	bf0c      	ite	eq
 8004f88:	2301      	moveq	r3, #1
 8004f8a:	2300      	movne	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	461a      	mov	r2, r3
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d116      	bne.n	8004fc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb0:	f043 0220 	orr.w	r2, r3, #32
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e023      	b.n	800500c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	0c1b      	lsrs	r3, r3, #16
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d10d      	bne.n	8004fea <I2C_WaitOnFlagUntilTimeout+0xca>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	43da      	mvns	r2, r3
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	bf0c      	ite	eq
 8004fe0:	2301      	moveq	r3, #1
 8004fe2:	2300      	movne	r3, #0
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	e00c      	b.n	8005004 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	43da      	mvns	r2, r3
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	bf0c      	ite	eq
 8004ffc:	2301      	moveq	r3, #1
 8004ffe:	2300      	movne	r3, #0
 8005000:	b2db      	uxtb	r3, r3
 8005002:	461a      	mov	r2, r3
 8005004:	79fb      	ldrb	r3, [r7, #7]
 8005006:	429a      	cmp	r2, r3
 8005008:	d093      	beq.n	8004f32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005022:	e071      	b.n	8005108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800502e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005032:	d123      	bne.n	800507c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005042:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800504c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005068:	f043 0204 	orr.w	r2, r3, #4
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e067      	b.n	800514c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005082:	d041      	beq.n	8005108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005084:	f7fd fee6 	bl	8002e54 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	429a      	cmp	r2, r3
 8005092:	d302      	bcc.n	800509a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d136      	bne.n	8005108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	0c1b      	lsrs	r3, r3, #16
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d10c      	bne.n	80050be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	43da      	mvns	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4013      	ands	r3, r2
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	bf14      	ite	ne
 80050b6:	2301      	movne	r3, #1
 80050b8:	2300      	moveq	r3, #0
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	e00b      	b.n	80050d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	43da      	mvns	r2, r3
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4013      	ands	r3, r2
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	bf14      	ite	ne
 80050d0:	2301      	movne	r3, #1
 80050d2:	2300      	moveq	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d016      	beq.n	8005108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f4:	f043 0220 	orr.w	r2, r3, #32
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e021      	b.n	800514c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	0c1b      	lsrs	r3, r3, #16
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b01      	cmp	r3, #1
 8005110:	d10c      	bne.n	800512c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	43da      	mvns	r2, r3
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	4013      	ands	r3, r2
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	bf14      	ite	ne
 8005124:	2301      	movne	r3, #1
 8005126:	2300      	moveq	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	e00b      	b.n	8005144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	43da      	mvns	r2, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4013      	ands	r3, r2
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	bf14      	ite	ne
 800513e:	2301      	movne	r3, #1
 8005140:	2300      	moveq	r3, #0
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	f47f af6d 	bne.w	8005024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005160:	e034      	b.n	80051cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 f8e3 	bl	800532e <I2C_IsAcknowledgeFailed>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e034      	b.n	80051dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005178:	d028      	beq.n	80051cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800517a:	f7fd fe6b 	bl	8002e54 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	429a      	cmp	r2, r3
 8005188:	d302      	bcc.n	8005190 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d11d      	bne.n	80051cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800519a:	2b80      	cmp	r3, #128	@ 0x80
 800519c:	d016      	beq.n	80051cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b8:	f043 0220 	orr.w	r2, r3, #32
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e007      	b.n	80051dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051d6:	2b80      	cmp	r3, #128	@ 0x80
 80051d8:	d1c3      	bne.n	8005162 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051f0:	e034      	b.n	800525c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f000 f89b 	bl	800532e <I2C_IsAcknowledgeFailed>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e034      	b.n	800526c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005208:	d028      	beq.n	800525c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520a:	f7fd fe23 	bl	8002e54 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	429a      	cmp	r2, r3
 8005218:	d302      	bcc.n	8005220 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d11d      	bne.n	800525c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b04      	cmp	r3, #4
 800522c:	d016      	beq.n	800525c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005248:	f043 0220 	orr.w	r2, r3, #32
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e007      	b.n	800526c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b04      	cmp	r3, #4
 8005268:	d1c3      	bne.n	80051f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005280:	e049      	b.n	8005316 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b10      	cmp	r3, #16
 800528e:	d119      	bne.n	80052c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0210 	mvn.w	r2, #16
 8005298:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e030      	b.n	8005326 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c4:	f7fd fdc6 	bl	8002e54 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d302      	bcc.n	80052da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d11d      	bne.n	8005316 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e4:	2b40      	cmp	r3, #64	@ 0x40
 80052e6:	d016      	beq.n	8005316 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005302:	f043 0220 	orr.w	r2, r3, #32
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e007      	b.n	8005326 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005320:	2b40      	cmp	r3, #64	@ 0x40
 8005322:	d1ae      	bne.n	8005282 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005340:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005344:	d11b      	bne.n	800537e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800534e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536a:	f043 0204 	orr.w	r2, r3, #4
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e000      	b.n	8005380 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af02      	add	r7, sp, #8
 8005392:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e108      	b.n	80055b0 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d106      	bne.n	80053be <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f00b ffbd 	bl	8011338 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2203      	movs	r2, #3
 80053c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053cc:	d102      	bne.n	80053d4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f004 ff6e 	bl	800a2ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6818      	ldr	r0, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	7c1a      	ldrb	r2, [r3, #16]
 80053e6:	f88d 2000 	strb.w	r2, [sp]
 80053ea:	3304      	adds	r3, #4
 80053ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053ee:	f004 fe4d 	bl	800a08c <USB_CoreInit>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d005      	beq.n	8005404 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e0d5      	b.n	80055b0 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2100      	movs	r1, #0
 800540a:	4618      	mov	r0, r3
 800540c:	f004 ff66 	bl	800a2dc <USB_SetCurrentMode>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2202      	movs	r2, #2
 800541a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e0c6      	b.n	80055b0 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005422:	2300      	movs	r3, #0
 8005424:	73fb      	strb	r3, [r7, #15]
 8005426:	e04a      	b.n	80054be <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005428:	7bfa      	ldrb	r2, [r7, #15]
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	4613      	mov	r3, r2
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	3315      	adds	r3, #21
 8005438:	2201      	movs	r2, #1
 800543a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800543c:	7bfa      	ldrb	r2, [r7, #15]
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	4613      	mov	r3, r2
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	4413      	add	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	3314      	adds	r3, #20
 800544c:	7bfa      	ldrb	r2, [r7, #15]
 800544e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005450:	7bfa      	ldrb	r2, [r7, #15]
 8005452:	7bfb      	ldrb	r3, [r7, #15]
 8005454:	b298      	uxth	r0, r3
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	4613      	mov	r3, r2
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	440b      	add	r3, r1
 8005462:	332e      	adds	r3, #46	@ 0x2e
 8005464:	4602      	mov	r2, r0
 8005466:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005468:	7bfa      	ldrb	r2, [r7, #15]
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	4613      	mov	r3, r2
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	3318      	adds	r3, #24
 8005478:	2200      	movs	r2, #0
 800547a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800547c:	7bfa      	ldrb	r2, [r7, #15]
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	4413      	add	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	331c      	adds	r3, #28
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005490:	7bfa      	ldrb	r2, [r7, #15]
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	4613      	mov	r3, r2
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	440b      	add	r3, r1
 800549e:	3320      	adds	r3, #32
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80054a4:	7bfa      	ldrb	r2, [r7, #15]
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	4613      	mov	r3, r2
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	4413      	add	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	3324      	adds	r3, #36	@ 0x24
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	3301      	adds	r3, #1
 80054bc:	73fb      	strb	r3, [r7, #15]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	791b      	ldrb	r3, [r3, #4]
 80054c2:	7bfa      	ldrb	r2, [r7, #15]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d3af      	bcc.n	8005428 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054c8:	2300      	movs	r3, #0
 80054ca:	73fb      	strb	r3, [r7, #15]
 80054cc:	e044      	b.n	8005558 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80054ce:	7bfa      	ldrb	r2, [r7, #15]
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	4613      	mov	r3, r2
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	440b      	add	r3, r1
 80054dc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80054e0:	2200      	movs	r2, #0
 80054e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80054e4:	7bfa      	ldrb	r2, [r7, #15]
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	4613      	mov	r3, r2
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	4413      	add	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	440b      	add	r3, r1
 80054f2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80054f6:	7bfa      	ldrb	r2, [r7, #15]
 80054f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054fa:	7bfa      	ldrb	r2, [r7, #15]
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	4613      	mov	r3, r2
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	4413      	add	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	440b      	add	r3, r1
 8005508:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800550c:	2200      	movs	r2, #0
 800550e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005510:	7bfa      	ldrb	r2, [r7, #15]
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	4613      	mov	r3, r2
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	4413      	add	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005526:	7bfa      	ldrb	r2, [r7, #15]
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	4613      	mov	r3, r2
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	4413      	add	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	440b      	add	r3, r1
 8005534:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800553c:	7bfa      	ldrb	r2, [r7, #15]
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	4613      	mov	r3, r2
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005552:	7bfb      	ldrb	r3, [r7, #15]
 8005554:	3301      	adds	r3, #1
 8005556:	73fb      	strb	r3, [r7, #15]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	791b      	ldrb	r3, [r3, #4]
 800555c:	7bfa      	ldrb	r2, [r7, #15]
 800555e:	429a      	cmp	r2, r3
 8005560:	d3b5      	bcc.n	80054ce <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6818      	ldr	r0, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	7c1a      	ldrb	r2, [r3, #16]
 800556a:	f88d 2000 	strb.w	r2, [sp]
 800556e:	3304      	adds	r3, #4
 8005570:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005572:	f004 feff 	bl	800a374 <USB_DevInit>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d005      	beq.n	8005588 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e013      	b.n	80055b0 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	7b1b      	ldrb	r3, [r3, #12]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d102      	bne.n	80055a4 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f001 f96c 	bl	800687c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f005 ff36 	bl	800b41a <USB_DevDisconnect>

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <HAL_PCD_Start+0x1c>
 80055d0:	2302      	movs	r3, #2
 80055d2:	e022      	b.n	800561a <HAL_PCD_Start+0x62>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d009      	beq.n	80055fc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d105      	bne.n	80055fc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4618      	mov	r0, r3
 8005602:	f004 fe49 	bl	800a298 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4618      	mov	r0, r3
 800560c:	f005 fee4 	bl	800b3d8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005622:	b590      	push	{r4, r7, lr}
 8005624:	b08d      	sub	sp, #52	@ 0x34
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4618      	mov	r0, r3
 800563a:	f005 ffa2 	bl	800b582 <USB_GetMode>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	f040 84b9 	bne.w	8005fb8 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4618      	mov	r0, r3
 800564c:	f005 ff06 	bl	800b45c <USB_ReadInterrupts>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 84af 	beq.w	8005fb6 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	0a1b      	lsrs	r3, r3, #8
 8005662:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4618      	mov	r0, r3
 8005672:	f005 fef3 	bl	800b45c <USB_ReadInterrupts>
 8005676:	4603      	mov	r3, r0
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b02      	cmp	r3, #2
 800567e:	d107      	bne.n	8005690 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695a      	ldr	r2, [r3, #20]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f002 0202 	and.w	r2, r2, #2
 800568e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f005 fee1 	bl	800b45c <USB_ReadInterrupts>
 800569a:	4603      	mov	r3, r0
 800569c:	f003 0310 	and.w	r3, r3, #16
 80056a0:	2b10      	cmp	r3, #16
 80056a2:	d161      	bne.n	8005768 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699a      	ldr	r2, [r3, #24]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0210 	bic.w	r2, r2, #16
 80056b2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	f003 020f 	and.w	r2, r3, #15
 80056c0:	4613      	mov	r3, r2
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	4413      	add	r3, r2
 80056d0:	3304      	adds	r3, #4
 80056d2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	0c5b      	lsrs	r3, r3, #17
 80056d8:	f003 030f 	and.w	r3, r3, #15
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d124      	bne.n	800572a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80056e6:	4013      	ands	r3, r2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d035      	beq.n	8005758 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	091b      	lsrs	r3, r3, #4
 80056f4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80056f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	461a      	mov	r2, r3
 80056fe:	6a38      	ldr	r0, [r7, #32]
 8005700:	f005 fd18 	bl	800b134 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	091b      	lsrs	r3, r3, #4
 800570c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005710:	441a      	add	r2, r3
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	695a      	ldr	r2, [r3, #20]
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	091b      	lsrs	r3, r3, #4
 800571e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005722:	441a      	add	r2, r3
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	615a      	str	r2, [r3, #20]
 8005728:	e016      	b.n	8005758 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	0c5b      	lsrs	r3, r3, #17
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	2b06      	cmp	r3, #6
 8005734:	d110      	bne.n	8005758 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800573c:	2208      	movs	r2, #8
 800573e:	4619      	mov	r1, r3
 8005740:	6a38      	ldr	r0, [r7, #32]
 8005742:	f005 fcf7 	bl	800b134 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	695a      	ldr	r2, [r3, #20]
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	091b      	lsrs	r3, r3, #4
 800574e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005752:	441a      	add	r2, r3
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699a      	ldr	r2, [r3, #24]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0210 	orr.w	r2, r2, #16
 8005766:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4618      	mov	r0, r3
 800576e:	f005 fe75 	bl	800b45c <USB_ReadInterrupts>
 8005772:	4603      	mov	r3, r0
 8005774:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005778:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800577c:	f040 80a7 	bne.w	80058ce <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4618      	mov	r0, r3
 800578a:	f005 fe7a 	bl	800b482 <USB_ReadDevAllOutEpInterrupt>
 800578e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005790:	e099      	b.n	80058c6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 808e 	beq.w	80058ba <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	4611      	mov	r1, r2
 80057a8:	4618      	mov	r0, r3
 80057aa:	f005 fe9e 	bl	800b4ea <USB_ReadDevOutEPInterrupt>
 80057ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00c      	beq.n	80057d4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80057ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c6:	461a      	mov	r2, r3
 80057c8:	2301      	movs	r3, #1
 80057ca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80057cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fece 	bl	8006570 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00c      	beq.n	80057f8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80057de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ea:	461a      	mov	r2, r3
 80057ec:	2308      	movs	r3, #8
 80057ee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80057f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 ffa4 	bl	8006740 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f003 0310 	and.w	r3, r3, #16
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d008      	beq.n	8005814 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800580e:	461a      	mov	r2, r3
 8005810:	2310      	movs	r3, #16
 8005812:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d030      	beq.n	8005880 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005826:	2b80      	cmp	r3, #128	@ 0x80
 8005828:	d109      	bne.n	800583e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	69fa      	ldr	r2, [r7, #28]
 8005834:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005838:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800583c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800583e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005840:	4613      	mov	r3, r2
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	4413      	add	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	4413      	add	r3, r2
 8005850:	3304      	adds	r3, #4
 8005852:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	78db      	ldrb	r3, [r3, #3]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d108      	bne.n	800586e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2200      	movs	r2, #0
 8005860:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	b2db      	uxtb	r3, r3
 8005866:	4619      	mov	r1, r3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f00b fe81 	bl	8011570 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800586e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	4413      	add	r3, r2
 8005876:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800587a:	461a      	mov	r2, r3
 800587c:	2302      	movs	r3, #2
 800587e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f003 0320 	and.w	r3, r3, #32
 8005886:	2b00      	cmp	r3, #0
 8005888:	d008      	beq.n	800589c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800588a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005896:	461a      	mov	r2, r3
 8005898:	2320      	movs	r3, #32
 800589a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d009      	beq.n	80058ba <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80058a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b2:	461a      	mov	r2, r3
 80058b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80058b8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80058ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058bc:	3301      	adds	r3, #1
 80058be:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80058c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c2:	085b      	lsrs	r3, r3, #1
 80058c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80058c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f47f af62 	bne.w	8005792 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f005 fdc2 	bl	800b45c <USB_ReadInterrupts>
 80058d8:	4603      	mov	r3, r0
 80058da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058e2:	f040 80db 	bne.w	8005a9c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f005 fde3 	bl	800b4b6 <USB_ReadDevAllInEpInterrupt>
 80058f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80058f6:	e0cd      	b.n	8005a94 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80058f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 80c2 	beq.w	8005a88 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800590a:	b2d2      	uxtb	r2, r2
 800590c:	4611      	mov	r1, r2
 800590e:	4618      	mov	r0, r3
 8005910:	f005 fe09 	bl	800b526 <USB_ReadDevInEPInterrupt>
 8005914:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d057      	beq.n	80059d0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005922:	f003 030f 	and.w	r3, r3, #15
 8005926:	2201      	movs	r2, #1
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	43db      	mvns	r3, r3
 800593a:	69f9      	ldr	r1, [r7, #28]
 800593c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005940:	4013      	ands	r3, r2
 8005942:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005950:	461a      	mov	r2, r3
 8005952:	2301      	movs	r3, #1
 8005954:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	799b      	ldrb	r3, [r3, #6]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d132      	bne.n	80059c4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800595e:	6879      	ldr	r1, [r7, #4]
 8005960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005962:	4613      	mov	r3, r2
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	4413      	add	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	440b      	add	r3, r1
 800596c:	3320      	adds	r3, #32
 800596e:	6819      	ldr	r1, [r3, #0]
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005974:	4613      	mov	r3, r2
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	4413      	add	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4403      	add	r3, r0
 800597e:	331c      	adds	r3, #28
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4419      	add	r1, r3
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005988:	4613      	mov	r3, r2
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	4413      	add	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4403      	add	r3, r0
 8005992:	3320      	adds	r3, #32
 8005994:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005998:	2b00      	cmp	r3, #0
 800599a:	d113      	bne.n	80059c4 <HAL_PCD_IRQHandler+0x3a2>
 800599c:	6879      	ldr	r1, [r7, #4]
 800599e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059a0:	4613      	mov	r3, r2
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	4413      	add	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	440b      	add	r3, r1
 80059aa:	3324      	adds	r3, #36	@ 0x24
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d108      	bne.n	80059c4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6818      	ldr	r0, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80059bc:	461a      	mov	r2, r3
 80059be:	2101      	movs	r1, #1
 80059c0:	f005 fe10 	bl	800b5e4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80059c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	4619      	mov	r1, r3
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f00b fd4b 	bl	8011466 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f003 0308 	and.w	r3, r3, #8
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d008      	beq.n	80059ec <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80059da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059e6:	461a      	mov	r2, r3
 80059e8:	2308      	movs	r3, #8
 80059ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f003 0310 	and.w	r3, r3, #16
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d008      	beq.n	8005a08 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80059f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a02:	461a      	mov	r2, r3
 8005a04:	2310      	movs	r3, #16
 8005a06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d008      	beq.n	8005a24 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a1e:	461a      	mov	r2, r3
 8005a20:	2340      	movs	r3, #64	@ 0x40
 8005a22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d023      	beq.n	8005a76 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005a2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a30:	6a38      	ldr	r0, [r7, #32]
 8005a32:	f004 fdfd 	bl	800a630 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a38:	4613      	mov	r3, r2
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	3310      	adds	r3, #16
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	4413      	add	r3, r2
 8005a46:	3304      	adds	r3, #4
 8005a48:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	78db      	ldrb	r3, [r3, #3]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d108      	bne.n	8005a64 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2200      	movs	r2, #0
 8005a56:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f00b fd98 	bl	8011594 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a70:	461a      	mov	r2, r3
 8005a72:	2302      	movs	r3, #2
 8005a74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005a80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fce8 	bl	8006458 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a90:	085b      	lsrs	r3, r3, #1
 8005a92:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f47f af2e 	bne.w	80058f8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f005 fcdb 	bl	800b45c <USB_ReadInterrupts>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005aac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ab0:	d122      	bne.n	8005af8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	69fa      	ldr	r2, [r7, #28]
 8005abc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ac0:	f023 0301 	bic.w	r3, r3, #1
 8005ac4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d108      	bne.n	8005ae2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005ad8:	2100      	movs	r1, #0
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f00b ff12 	bl	8011904 <HAL_PCDEx_LPM_Callback>
 8005ae0:	e002      	b.n	8005ae8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f00b fd36 	bl	8011554 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	695a      	ldr	r2, [r3, #20]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005af6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f005 fcad 	bl	800b45c <USB_ReadInterrupts>
 8005b02:	4603      	mov	r3, r0
 8005b04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b0c:	d112      	bne.n	8005b34 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d102      	bne.n	8005b24 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f00b fcf2 	bl	8011508 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695a      	ldr	r2, [r3, #20]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005b32:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f005 fc8f 	bl	800b45c <USB_ReadInterrupts>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b48:	d121      	bne.n	8005b8e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695a      	ldr	r2, [r3, #20]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005b58:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d111      	bne.n	8005b88 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b72:	089b      	lsrs	r3, r3, #2
 8005b74:	f003 020f 	and.w	r2, r3, #15
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005b7e:	2101      	movs	r1, #1
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f00b febf 	bl	8011904 <HAL_PCDEx_LPM_Callback>
 8005b86:	e002      	b.n	8005b8e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f00b fcbd 	bl	8011508 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f005 fc62 	bl	800b45c <USB_ReadInterrupts>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ba2:	f040 80b7 	bne.w	8005d14 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bb4:	f023 0301 	bic.w	r3, r3, #1
 8005bb8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2110      	movs	r1, #16
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f004 fd35 	bl	800a630 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bca:	e046      	b.n	8005c5a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bd8:	461a      	mov	r2, r3
 8005bda:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005bde:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bf0:	0151      	lsls	r1, r2, #5
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bfa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005bfe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005c12:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c24:	0151      	lsls	r1, r2, #5
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	440a      	add	r2, r1
 8005c2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c44:	0151      	lsls	r1, r2, #5
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	440a      	add	r2, r1
 8005c4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c4e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c52:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c56:	3301      	adds	r3, #1
 8005c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	791b      	ldrb	r3, [r3, #4]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d3b2      	bcc.n	8005bcc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	69fa      	ldr	r2, [r7, #28]
 8005c70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c74:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005c78:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	7bdb      	ldrb	r3, [r3, #15]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d016      	beq.n	8005cb0 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c8c:	69fa      	ldr	r2, [r7, #28]
 8005c8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c92:	f043 030b 	orr.w	r3, r3, #11
 8005c96:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca2:	69fa      	ldr	r2, [r7, #28]
 8005ca4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ca8:	f043 030b 	orr.w	r3, r3, #11
 8005cac:	6453      	str	r3, [r2, #68]	@ 0x44
 8005cae:	e015      	b.n	8005cdc <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	69fa      	ldr	r2, [r7, #28]
 8005cba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cbe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005cc2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005cc6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	69fa      	ldr	r2, [r7, #28]
 8005cd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cd6:	f043 030b 	orr.w	r3, r3, #11
 8005cda:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	69fa      	ldr	r2, [r7, #28]
 8005ce6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005cee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6818      	ldr	r0, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005cfe:	461a      	mov	r2, r3
 8005d00:	f005 fc70 	bl	800b5e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	695a      	ldr	r2, [r3, #20]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005d12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f005 fb9f 	bl	800b45c <USB_ReadInterrupts>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d28:	d123      	bne.n	8005d72 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f005 fc35 	bl	800b59e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f004 fcf2 	bl	800a722 <USB_GetDevSpeed>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	461a      	mov	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681c      	ldr	r4, [r3, #0]
 8005d4a:	f000 fea1 	bl	8006a90 <HAL_RCC_GetHCLKFreq>
 8005d4e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d54:	461a      	mov	r2, r3
 8005d56:	4620      	mov	r0, r4
 8005d58:	f004 f9fc 	bl	800a154 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f00b fbaa 	bl	80114b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	695a      	ldr	r2, [r3, #20]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005d70:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f005 fb70 	bl	800b45c <USB_ReadInterrupts>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	f003 0308 	and.w	r3, r3, #8
 8005d82:	2b08      	cmp	r3, #8
 8005d84:	d10a      	bne.n	8005d9c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f00b fb87 	bl	801149a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	695a      	ldr	r2, [r3, #20]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f002 0208 	and.w	r2, r2, #8
 8005d9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f005 fb5b 	bl	800b45c <USB_ReadInterrupts>
 8005da6:	4603      	mov	r3, r0
 8005da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dac:	2b80      	cmp	r3, #128	@ 0x80
 8005dae:	d123      	bne.n	8005df8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dc0:	e014      	b.n	8005dec <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	4413      	add	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	440b      	add	r3, r1
 8005dd0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d105      	bne.n	8005de6 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	4619      	mov	r1, r3
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fb08 	bl	80063f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de8:	3301      	adds	r3, #1
 8005dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	791b      	ldrb	r3, [r3, #4]
 8005df0:	461a      	mov	r2, r3
 8005df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d3e4      	bcc.n	8005dc2 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f005 fb2d 	bl	800b45c <USB_ReadInterrupts>
 8005e02:	4603      	mov	r3, r0
 8005e04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e0c:	d13c      	bne.n	8005e88 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e0e:	2301      	movs	r3, #1
 8005e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e12:	e02b      	b.n	8005e6c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e24:	6879      	ldr	r1, [r7, #4]
 8005e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e28:	4613      	mov	r3, r2
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	4413      	add	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	440b      	add	r3, r1
 8005e32:	3318      	adds	r3, #24
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d115      	bne.n	8005e66 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005e3a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	da12      	bge.n	8005e66 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005e40:	6879      	ldr	r1, [r7, #4]
 8005e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e44:	4613      	mov	r3, r2
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	4413      	add	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	440b      	add	r3, r1
 8005e4e:	3317      	adds	r3, #23
 8005e50:	2201      	movs	r2, #1
 8005e52:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fac8 	bl	80063f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e68:	3301      	adds	r3, #1
 8005e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	791b      	ldrb	r3, [r3, #4]
 8005e70:	461a      	mov	r2, r3
 8005e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d3cd      	bcc.n	8005e14 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695a      	ldr	r2, [r3, #20]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005e86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f005 fae5 	bl	800b45c <USB_ReadInterrupts>
 8005e92:	4603      	mov	r3, r0
 8005e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e9c:	d156      	bne.n	8005f4c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ea2:	e045      	b.n	8005f30 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005eb4:	6879      	ldr	r1, [r7, #4]
 8005eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb8:	4613      	mov	r3, r2
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	440b      	add	r3, r1
 8005ec2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d12e      	bne.n	8005f2a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005ecc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	da2b      	bge.n	8005f2a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005ede:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d121      	bne.n	8005f2a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eea:	4613      	mov	r3, r2
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	4413      	add	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	440b      	add	r3, r1
 8005ef4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005ef8:	2201      	movs	r2, #1
 8005efa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	69fa      	ldr	r2, [r7, #28]
 8005f1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f26:	6053      	str	r3, [r2, #4]
            break;
 8005f28:	e008      	b.n	8005f3c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	791b      	ldrb	r3, [r3, #4]
 8005f34:	461a      	mov	r2, r3
 8005f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d3b3      	bcc.n	8005ea4 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	695a      	ldr	r2, [r3, #20]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005f4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f005 fa83 	bl	800b45c <USB_ReadInterrupts>
 8005f56:	4603      	mov	r3, r0
 8005f58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f60:	d10a      	bne.n	8005f78 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f00b fb28 	bl	80115b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	695a      	ldr	r2, [r3, #20]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005f76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f005 fa6d 	bl	800b45c <USB_ReadInterrupts>
 8005f82:	4603      	mov	r3, r0
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d115      	bne.n	8005fb8 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	f003 0304 	and.w	r3, r3, #4
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f00b fb18 	bl	80115d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6859      	ldr	r1, [r3, #4]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	605a      	str	r2, [r3, #4]
 8005fb4:	e000      	b.n	8005fb8 <HAL_PCD_IRQHandler+0x996>
      return;
 8005fb6:	bf00      	nop
    }
  }
}
 8005fb8:	3734      	adds	r7, #52	@ 0x34
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd90      	pop	{r4, r7, pc}

08005fbe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b082      	sub	sp, #8
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <HAL_PCD_SetAddress+0x1a>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e012      	b.n	8005ffe <HAL_PCD_SetAddress+0x40>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	78fa      	ldrb	r2, [r7, #3]
 8005fe4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	78fa      	ldrb	r2, [r7, #3]
 8005fec:	4611      	mov	r1, r2
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f005 f9cc 	bl	800b38c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b084      	sub	sp, #16
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	4608      	mov	r0, r1
 8006010:	4611      	mov	r1, r2
 8006012:	461a      	mov	r2, r3
 8006014:	4603      	mov	r3, r0
 8006016:	70fb      	strb	r3, [r7, #3]
 8006018:	460b      	mov	r3, r1
 800601a:	803b      	strh	r3, [r7, #0]
 800601c:	4613      	mov	r3, r2
 800601e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006020:	2300      	movs	r3, #0
 8006022:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006028:	2b00      	cmp	r3, #0
 800602a:	da0f      	bge.n	800604c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800602c:	78fb      	ldrb	r3, [r7, #3]
 800602e:	f003 020f 	and.w	r2, r3, #15
 8006032:	4613      	mov	r3, r2
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	4413      	add	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	3310      	adds	r3, #16
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	4413      	add	r3, r2
 8006040:	3304      	adds	r3, #4
 8006042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2201      	movs	r2, #1
 8006048:	705a      	strb	r2, [r3, #1]
 800604a:	e00f      	b.n	800606c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800604c:	78fb      	ldrb	r3, [r7, #3]
 800604e:	f003 020f 	and.w	r2, r3, #15
 8006052:	4613      	mov	r3, r2
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	4413      	add	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	4413      	add	r3, r2
 8006062:	3304      	adds	r3, #4
 8006064:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	f003 030f 	and.w	r3, r3, #15
 8006072:	b2da      	uxtb	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006078:	883a      	ldrh	r2, [r7, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	78ba      	ldrb	r2, [r7, #2]
 8006082:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	785b      	ldrb	r3, [r3, #1]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d004      	beq.n	8006096 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	461a      	mov	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006096:	78bb      	ldrb	r3, [r7, #2]
 8006098:	2b02      	cmp	r3, #2
 800609a:	d102      	bne.n	80060a2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d101      	bne.n	80060b0 <HAL_PCD_EP_Open+0xaa>
 80060ac:	2302      	movs	r3, #2
 80060ae:	e00e      	b.n	80060ce <HAL_PCD_EP_Open+0xc8>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68f9      	ldr	r1, [r7, #12]
 80060be:	4618      	mov	r0, r3
 80060c0:	f004 fb54 	bl	800a76c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80060cc:	7afb      	ldrb	r3, [r7, #11]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b084      	sub	sp, #16
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	460b      	mov	r3, r1
 80060e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80060e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	da0f      	bge.n	800610a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060ea:	78fb      	ldrb	r3, [r7, #3]
 80060ec:	f003 020f 	and.w	r2, r3, #15
 80060f0:	4613      	mov	r3, r2
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	4413      	add	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	3310      	adds	r3, #16
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	4413      	add	r3, r2
 80060fe:	3304      	adds	r3, #4
 8006100:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2201      	movs	r2, #1
 8006106:	705a      	strb	r2, [r3, #1]
 8006108:	e00f      	b.n	800612a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800610a:	78fb      	ldrb	r3, [r7, #3]
 800610c:	f003 020f 	and.w	r2, r3, #15
 8006110:	4613      	mov	r3, r2
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	4413      	add	r3, r2
 8006120:	3304      	adds	r3, #4
 8006122:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800612a:	78fb      	ldrb	r3, [r7, #3]
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	b2da      	uxtb	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800613c:	2b01      	cmp	r3, #1
 800613e:	d101      	bne.n	8006144 <HAL_PCD_EP_Close+0x6e>
 8006140:	2302      	movs	r3, #2
 8006142:	e00e      	b.n	8006162 <HAL_PCD_EP_Close+0x8c>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68f9      	ldr	r1, [r7, #12]
 8006152:	4618      	mov	r0, r3
 8006154:	f004 fb92 	bl	800a87c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b086      	sub	sp, #24
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	603b      	str	r3, [r7, #0]
 8006176:	460b      	mov	r3, r1
 8006178:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800617a:	7afb      	ldrb	r3, [r7, #11]
 800617c:	f003 020f 	and.w	r2, r3, #15
 8006180:	4613      	mov	r3, r2
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	4413      	add	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4413      	add	r3, r2
 8006190:	3304      	adds	r3, #4
 8006192:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	2200      	movs	r2, #0
 80061a4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2200      	movs	r2, #0
 80061aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061ac:	7afb      	ldrb	r3, [r7, #11]
 80061ae:	f003 030f 	and.w	r3, r3, #15
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	799b      	ldrb	r3, [r3, #6]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d102      	bne.n	80061c6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	799b      	ldrb	r3, [r3, #6]
 80061ce:	461a      	mov	r2, r3
 80061d0:	6979      	ldr	r1, [r7, #20]
 80061d2:	f004 fc2f 	bl	800aa34 <USB_EPStartXfer>

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80061ec:	78fb      	ldrb	r3, [r7, #3]
 80061ee:	f003 020f 	and.w	r2, r3, #15
 80061f2:	6879      	ldr	r1, [r7, #4]
 80061f4:	4613      	mov	r3, r2
 80061f6:	00db      	lsls	r3, r3, #3
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	440b      	add	r3, r1
 80061fe:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006202:	681b      	ldr	r3, [r3, #0]
}
 8006204:	4618      	mov	r0, r3
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	607a      	str	r2, [r7, #4]
 800621a:	603b      	str	r3, [r7, #0]
 800621c:	460b      	mov	r3, r1
 800621e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006220:	7afb      	ldrb	r3, [r7, #11]
 8006222:	f003 020f 	and.w	r2, r3, #15
 8006226:	4613      	mov	r3, r2
 8006228:	00db      	lsls	r3, r3, #3
 800622a:	4413      	add	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	3310      	adds	r3, #16
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	4413      	add	r3, r2
 8006234:	3304      	adds	r3, #4
 8006236:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	2200      	movs	r2, #0
 8006248:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2201      	movs	r2, #1
 800624e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006250:	7afb      	ldrb	r3, [r7, #11]
 8006252:	f003 030f 	and.w	r3, r3, #15
 8006256:	b2da      	uxtb	r2, r3
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	799b      	ldrb	r3, [r3, #6]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d102      	bne.n	800626a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6818      	ldr	r0, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	799b      	ldrb	r3, [r3, #6]
 8006272:	461a      	mov	r2, r3
 8006274:	6979      	ldr	r1, [r7, #20]
 8006276:	f004 fbdd 	bl	800aa34 <USB_EPStartXfer>

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	f003 030f 	and.w	r3, r3, #15
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	7912      	ldrb	r2, [r2, #4]
 800629a:	4293      	cmp	r3, r2
 800629c:	d901      	bls.n	80062a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e04f      	b.n	8006342 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80062a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	da0f      	bge.n	80062ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062aa:	78fb      	ldrb	r3, [r7, #3]
 80062ac:	f003 020f 	and.w	r2, r3, #15
 80062b0:	4613      	mov	r3, r2
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	4413      	add	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	3310      	adds	r3, #16
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	4413      	add	r3, r2
 80062be:	3304      	adds	r3, #4
 80062c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2201      	movs	r2, #1
 80062c6:	705a      	strb	r2, [r3, #1]
 80062c8:	e00d      	b.n	80062e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80062ca:	78fa      	ldrb	r2, [r7, #3]
 80062cc:	4613      	mov	r3, r2
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	4413      	add	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	4413      	add	r3, r2
 80062dc:	3304      	adds	r3, #4
 80062de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2201      	movs	r2, #1
 80062ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062ec:	78fb      	ldrb	r3, [r7, #3]
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d101      	bne.n	8006306 <HAL_PCD_EP_SetStall+0x82>
 8006302:	2302      	movs	r3, #2
 8006304:	e01d      	b.n	8006342 <HAL_PCD_EP_SetStall+0xbe>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68f9      	ldr	r1, [r7, #12]
 8006314:	4618      	mov	r0, r3
 8006316:	f004 ff65 	bl	800b1e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800631a:	78fb      	ldrb	r3, [r7, #3]
 800631c:	f003 030f 	and.w	r3, r3, #15
 8006320:	2b00      	cmp	r3, #0
 8006322:	d109      	bne.n	8006338 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6818      	ldr	r0, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	7999      	ldrb	r1, [r3, #6]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006332:	461a      	mov	r2, r3
 8006334:	f005 f956 	bl	800b5e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b084      	sub	sp, #16
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
 8006352:	460b      	mov	r3, r1
 8006354:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006356:	78fb      	ldrb	r3, [r7, #3]
 8006358:	f003 030f 	and.w	r3, r3, #15
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	7912      	ldrb	r2, [r2, #4]
 8006360:	4293      	cmp	r3, r2
 8006362:	d901      	bls.n	8006368 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e042      	b.n	80063ee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006368:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800636c:	2b00      	cmp	r3, #0
 800636e:	da0f      	bge.n	8006390 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006370:	78fb      	ldrb	r3, [r7, #3]
 8006372:	f003 020f 	and.w	r2, r3, #15
 8006376:	4613      	mov	r3, r2
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	4413      	add	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	3310      	adds	r3, #16
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	4413      	add	r3, r2
 8006384:	3304      	adds	r3, #4
 8006386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2201      	movs	r2, #1
 800638c:	705a      	strb	r2, [r3, #1]
 800638e:	e00f      	b.n	80063b0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	f003 020f 	and.w	r2, r3, #15
 8006396:	4613      	mov	r3, r2
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	4413      	add	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	4413      	add	r3, r2
 80063a6:	3304      	adds	r3, #4
 80063a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063b6:	78fb      	ldrb	r3, [r7, #3]
 80063b8:	f003 030f 	and.w	r3, r3, #15
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d101      	bne.n	80063d0 <HAL_PCD_EP_ClrStall+0x86>
 80063cc:	2302      	movs	r3, #2
 80063ce:	e00e      	b.n	80063ee <HAL_PCD_EP_ClrStall+0xa4>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68f9      	ldr	r1, [r7, #12]
 80063de:	4618      	mov	r0, r3
 80063e0:	f004 ff6e 	bl	800b2c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	460b      	mov	r3, r1
 8006400:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006402:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006406:	2b00      	cmp	r3, #0
 8006408:	da0c      	bge.n	8006424 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800640a:	78fb      	ldrb	r3, [r7, #3]
 800640c:	f003 020f 	and.w	r2, r3, #15
 8006410:	4613      	mov	r3, r2
 8006412:	00db      	lsls	r3, r3, #3
 8006414:	4413      	add	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	3310      	adds	r3, #16
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	4413      	add	r3, r2
 800641e:	3304      	adds	r3, #4
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	e00c      	b.n	800643e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006424:	78fb      	ldrb	r3, [r7, #3]
 8006426:	f003 020f 	and.w	r2, r3, #15
 800642a:	4613      	mov	r3, r2
 800642c:	00db      	lsls	r3, r3, #3
 800642e:	4413      	add	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	4413      	add	r3, r2
 800643a:	3304      	adds	r3, #4
 800643c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68f9      	ldr	r1, [r7, #12]
 8006444:	4618      	mov	r0, r3
 8006446:	f004 fd8d 	bl	800af64 <USB_EPStopXfer>
 800644a:	4603      	mov	r3, r0
 800644c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800644e:	7afb      	ldrb	r3, [r7, #11]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b08a      	sub	sp, #40	@ 0x28
 800645c:	af02      	add	r7, sp, #8
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800646c:	683a      	ldr	r2, [r7, #0]
 800646e:	4613      	mov	r3, r2
 8006470:	00db      	lsls	r3, r3, #3
 8006472:	4413      	add	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	3310      	adds	r3, #16
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	4413      	add	r3, r2
 800647c:	3304      	adds	r3, #4
 800647e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	695a      	ldr	r2, [r3, #20]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	429a      	cmp	r2, r3
 800648a:	d901      	bls.n	8006490 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e06b      	b.n	8006568 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	691a      	ldr	r2, [r3, #16]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	69fa      	ldr	r2, [r7, #28]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d902      	bls.n	80064ac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	3303      	adds	r3, #3
 80064b0:	089b      	lsrs	r3, r3, #2
 80064b2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80064b4:	e02a      	b.n	800650c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	691a      	ldr	r2, [r3, #16]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d902      	bls.n	80064d2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	3303      	adds	r3, #3
 80064d6:	089b      	lsrs	r3, r3, #2
 80064d8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	68d9      	ldr	r1, [r3, #12]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	4603      	mov	r3, r0
 80064ee:	6978      	ldr	r0, [r7, #20]
 80064f0:	f004 fde2 	bl	800b0b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	68da      	ldr	r2, [r3, #12]
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	441a      	add	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	695a      	ldr	r2, [r3, #20]
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	441a      	add	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	429a      	cmp	r2, r3
 8006520:	d809      	bhi.n	8006536 <PCD_WriteEmptyTxFifo+0xde>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	695a      	ldr	r2, [r3, #20]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800652a:	429a      	cmp	r2, r3
 800652c:	d203      	bcs.n	8006536 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1bf      	bne.n	80064b6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	691a      	ldr	r2, [r3, #16]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	429a      	cmp	r2, r3
 8006540:	d811      	bhi.n	8006566 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	f003 030f 	and.w	r3, r3, #15
 8006548:	2201      	movs	r2, #1
 800654a:	fa02 f303 	lsl.w	r3, r2, r3
 800654e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006556:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	43db      	mvns	r3, r3
 800655c:	6939      	ldr	r1, [r7, #16]
 800655e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006562:	4013      	ands	r3, r2
 8006564:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3720      	adds	r7, #32
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b088      	sub	sp, #32
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	333c      	adds	r3, #60	@ 0x3c
 8006588:	3304      	adds	r3, #4
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	799b      	ldrb	r3, [r3, #6]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d17b      	bne.n	800669e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	f003 0308 	and.w	r3, r3, #8
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d015      	beq.n	80065dc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	4a61      	ldr	r2, [pc, #388]	@ (8006738 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	f240 80b9 	bls.w	800672c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 80b3 	beq.w	800672c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d2:	461a      	mov	r2, r3
 80065d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065d8:	6093      	str	r3, [r2, #8]
 80065da:	e0a7      	b.n	800672c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f003 0320 	and.w	r3, r3, #32
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d009      	beq.n	80065fa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065f2:	461a      	mov	r2, r3
 80065f4:	2320      	movs	r3, #32
 80065f6:	6093      	str	r3, [r2, #8]
 80065f8:	e098      	b.n	800672c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006600:	2b00      	cmp	r3, #0
 8006602:	f040 8093 	bne.w	800672c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	4a4b      	ldr	r2, [pc, #300]	@ (8006738 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d90f      	bls.n	800662e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00a      	beq.n	800662e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006624:	461a      	mov	r2, r3
 8006626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800662a:	6093      	str	r3, [r2, #8]
 800662c:	e07e      	b.n	800672c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	4613      	mov	r3, r2
 8006632:	00db      	lsls	r3, r3, #3
 8006634:	4413      	add	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	4413      	add	r3, r2
 8006640:	3304      	adds	r3, #4
 8006642:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a1a      	ldr	r2, [r3, #32]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	0159      	lsls	r1, r3, #5
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	440b      	add	r3, r1
 8006650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800665a:	1ad2      	subs	r2, r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d114      	bne.n	8006690 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d109      	bne.n	8006682 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6818      	ldr	r0, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006678:	461a      	mov	r2, r3
 800667a:	2101      	movs	r1, #1
 800667c:	f004 ffb2 	bl	800b5e4 <USB_EP0_OutStart>
 8006680:	e006      	b.n	8006690 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	68da      	ldr	r2, [r3, #12]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	441a      	add	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	b2db      	uxtb	r3, r3
 8006694:	4619      	mov	r1, r3
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f00a feca 	bl	8011430 <HAL_PCD_DataOutStageCallback>
 800669c:	e046      	b.n	800672c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	4a26      	ldr	r2, [pc, #152]	@ (800673c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d124      	bne.n	80066f0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00a      	beq.n	80066c6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066bc:	461a      	mov	r2, r3
 80066be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066c2:	6093      	str	r3, [r2, #8]
 80066c4:	e032      	b.n	800672c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f003 0320 	and.w	r3, r3, #32
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d008      	beq.n	80066e2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066dc:	461a      	mov	r2, r3
 80066de:	2320      	movs	r3, #32
 80066e0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f00a fea1 	bl	8011430 <HAL_PCD_DataOutStageCallback>
 80066ee:	e01d      	b.n	800672c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d114      	bne.n	8006720 <PCD_EP_OutXfrComplete_int+0x1b0>
 80066f6:	6879      	ldr	r1, [r7, #4]
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	4613      	mov	r3, r2
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	4413      	add	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	440b      	add	r3, r1
 8006704:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d108      	bne.n	8006720 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6818      	ldr	r0, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006718:	461a      	mov	r2, r3
 800671a:	2100      	movs	r1, #0
 800671c:	f004 ff62 	bl	800b5e4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	b2db      	uxtb	r3, r3
 8006724:	4619      	mov	r1, r3
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f00a fe82 	bl	8011430 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3720      	adds	r7, #32
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	4f54300a 	.word	0x4f54300a
 800673c:	4f54310a 	.word	0x4f54310a

08006740 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	333c      	adds	r3, #60	@ 0x3c
 8006758:	3304      	adds	r3, #4
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	4413      	add	r3, r2
 8006766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	4a15      	ldr	r2, [pc, #84]	@ (80067c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d90e      	bls.n	8006794 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800677c:	2b00      	cmp	r3, #0
 800677e:	d009      	beq.n	8006794 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800678c:	461a      	mov	r2, r3
 800678e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006792:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f00a fe39 	bl	801140c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4a0a      	ldr	r2, [pc, #40]	@ (80067c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d90c      	bls.n	80067bc <PCD_EP_OutSetupPacket_int+0x7c>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	799b      	ldrb	r3, [r3, #6]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d108      	bne.n	80067bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6818      	ldr	r0, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80067b4:	461a      	mov	r2, r3
 80067b6:	2101      	movs	r1, #1
 80067b8:	f004 ff14 	bl	800b5e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	4f54300a 	.word	0x4f54300a

080067cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	70fb      	strb	r3, [r7, #3]
 80067d8:	4613      	mov	r3, r2
 80067da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80067e4:	78fb      	ldrb	r3, [r7, #3]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d107      	bne.n	80067fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80067ea:	883b      	ldrh	r3, [r7, #0]
 80067ec:	0419      	lsls	r1, r3, #16
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80067f8:	e028      	b.n	800684c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006800:	0c1b      	lsrs	r3, r3, #16
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	4413      	add	r3, r2
 8006806:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006808:	2300      	movs	r3, #0
 800680a:	73fb      	strb	r3, [r7, #15]
 800680c:	e00d      	b.n	800682a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	7bfb      	ldrb	r3, [r7, #15]
 8006814:	3340      	adds	r3, #64	@ 0x40
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	0c1b      	lsrs	r3, r3, #16
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	4413      	add	r3, r2
 8006822:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006824:	7bfb      	ldrb	r3, [r7, #15]
 8006826:	3301      	adds	r3, #1
 8006828:	73fb      	strb	r3, [r7, #15]
 800682a:	7bfa      	ldrb	r2, [r7, #15]
 800682c:	78fb      	ldrb	r3, [r7, #3]
 800682e:	3b01      	subs	r3, #1
 8006830:	429a      	cmp	r2, r3
 8006832:	d3ec      	bcc.n	800680e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006834:	883b      	ldrh	r3, [r7, #0]
 8006836:	0418      	lsls	r0, r3, #16
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6819      	ldr	r1, [r3, #0]
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	3b01      	subs	r3, #1
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	4302      	orrs	r2, r0
 8006844:	3340      	adds	r3, #64	@ 0x40
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	440b      	add	r3, r1
 800684a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	460b      	mov	r3, r1
 8006864:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	887a      	ldrh	r2, [r7, #2]
 800686c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068ae:	f043 0303 	orr.w	r3, r3, #3
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d101      	bne.n	80068d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e0cc      	b.n	8006a72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068d8:	4b68      	ldr	r3, [pc, #416]	@ (8006a7c <HAL_RCC_ClockConfig+0x1b8>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 030f 	and.w	r3, r3, #15
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d90c      	bls.n	8006900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068e6:	4b65      	ldr	r3, [pc, #404]	@ (8006a7c <HAL_RCC_ClockConfig+0x1b8>)
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ee:	4b63      	ldr	r3, [pc, #396]	@ (8006a7c <HAL_RCC_ClockConfig+0x1b8>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 030f 	and.w	r3, r3, #15
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d001      	beq.n	8006900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e0b8      	b.n	8006a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0302 	and.w	r3, r3, #2
 8006908:	2b00      	cmp	r3, #0
 800690a:	d020      	beq.n	800694e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0304 	and.w	r3, r3, #4
 8006914:	2b00      	cmp	r3, #0
 8006916:	d005      	beq.n	8006924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006918:	4b59      	ldr	r3, [pc, #356]	@ (8006a80 <HAL_RCC_ClockConfig+0x1bc>)
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	4a58      	ldr	r2, [pc, #352]	@ (8006a80 <HAL_RCC_ClockConfig+0x1bc>)
 800691e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006922:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b00      	cmp	r3, #0
 800692e:	d005      	beq.n	800693c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006930:	4b53      	ldr	r3, [pc, #332]	@ (8006a80 <HAL_RCC_ClockConfig+0x1bc>)
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	4a52      	ldr	r2, [pc, #328]	@ (8006a80 <HAL_RCC_ClockConfig+0x1bc>)
 8006936:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800693a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800693c:	4b50      	ldr	r3, [pc, #320]	@ (8006a80 <HAL_RCC_ClockConfig+0x1bc>)
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	494d      	ldr	r1, [pc, #308]	@ (8006a80 <HAL_RCC_ClockConfig+0x1bc>)
 800694a:	4313      	orrs	r3, r2
 800694c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d044      	beq.n	80069e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d107      	bne.n	8006972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006962:	4b47      	ldr	r3, [pc, #284]	@ (8006a80 <HAL_RCC_ClockConfig+0x1bc>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d119      	bne.n	80069a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e07f      	b.n	8006a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2b02      	cmp	r3, #2
 8006978:	d003      	beq.n	8006982 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800697e:	2b03      	cmp	r3, #3
 8006980:	d107      	bne.n	8006992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006982:	4b3f      	ldr	r3, [pc, #252]	@ (8006a80 <HAL_RCC_ClockConfig+0x1bc>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d109      	bne.n	80069a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e06f      	b.n	8006a72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006992:	4b3b      	ldr	r3, [pc, #236]	@ (8006a80 <HAL_RCC_ClockConfig+0x1bc>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e067      	b.n	8006a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069a2:	4b37      	ldr	r3, [pc, #220]	@ (8006a80 <HAL_RCC_ClockConfig+0x1bc>)
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f023 0203 	bic.w	r2, r3, #3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	4934      	ldr	r1, [pc, #208]	@ (8006a80 <HAL_RCC_ClockConfig+0x1bc>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069b4:	f7fc fa4e 	bl	8002e54 <HAL_GetTick>
 80069b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ba:	e00a      	b.n	80069d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069bc:	f7fc fa4a 	bl	8002e54 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e04f      	b.n	8006a72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069d2:	4b2b      	ldr	r3, [pc, #172]	@ (8006a80 <HAL_RCC_ClockConfig+0x1bc>)
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f003 020c 	and.w	r2, r3, #12
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d1eb      	bne.n	80069bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069e4:	4b25      	ldr	r3, [pc, #148]	@ (8006a7c <HAL_RCC_ClockConfig+0x1b8>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 030f 	and.w	r3, r3, #15
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d20c      	bcs.n	8006a0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069f2:	4b22      	ldr	r3, [pc, #136]	@ (8006a7c <HAL_RCC_ClockConfig+0x1b8>)
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	b2d2      	uxtb	r2, r2
 80069f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069fa:	4b20      	ldr	r3, [pc, #128]	@ (8006a7c <HAL_RCC_ClockConfig+0x1b8>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 030f 	and.w	r3, r3, #15
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d001      	beq.n	8006a0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e032      	b.n	8006a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d008      	beq.n	8006a2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a18:	4b19      	ldr	r3, [pc, #100]	@ (8006a80 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	4916      	ldr	r1, [pc, #88]	@ (8006a80 <HAL_RCC_ClockConfig+0x1bc>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d009      	beq.n	8006a4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a36:	4b12      	ldr	r3, [pc, #72]	@ (8006a80 <HAL_RCC_ClockConfig+0x1bc>)
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	00db      	lsls	r3, r3, #3
 8006a44:	490e      	ldr	r1, [pc, #56]	@ (8006a80 <HAL_RCC_ClockConfig+0x1bc>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a4a:	f000 fbb1 	bl	80071b0 <HAL_RCC_GetSysClockFreq>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	4b0b      	ldr	r3, [pc, #44]	@ (8006a80 <HAL_RCC_ClockConfig+0x1bc>)
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	091b      	lsrs	r3, r3, #4
 8006a56:	f003 030f 	and.w	r3, r3, #15
 8006a5a:	490a      	ldr	r1, [pc, #40]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c0>)
 8006a5c:	5ccb      	ldrb	r3, [r1, r3]
 8006a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a62:	4a09      	ldr	r2, [pc, #36]	@ (8006a88 <HAL_RCC_ClockConfig+0x1c4>)
 8006a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a66:	4b09      	ldr	r3, [pc, #36]	@ (8006a8c <HAL_RCC_ClockConfig+0x1c8>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fa fea2 	bl	80017b4 <HAL_InitTick>

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	40023c00 	.word	0x40023c00
 8006a80:	40023800 	.word	0x40023800
 8006a84:	08014914 	.word	0x08014914
 8006a88:	20000000 	.word	0x20000000
 8006a8c:	20000004 	.word	0x20000004

08006a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a90:	b480      	push	{r7}
 8006a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a94:	4b03      	ldr	r3, [pc, #12]	@ (8006aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a96:	681b      	ldr	r3, [r3, #0]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	20000000 	.word	0x20000000

08006aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006aac:	f7ff fff0 	bl	8006a90 <HAL_RCC_GetHCLKFreq>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	4b05      	ldr	r3, [pc, #20]	@ (8006ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	0a9b      	lsrs	r3, r3, #10
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	4903      	ldr	r1, [pc, #12]	@ (8006acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006abe:	5ccb      	ldrb	r3, [r1, r3]
 8006ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	40023800 	.word	0x40023800
 8006acc:	08014924 	.word	0x08014924

08006ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ad4:	f7ff ffdc 	bl	8006a90 <HAL_RCC_GetHCLKFreq>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	4b05      	ldr	r3, [pc, #20]	@ (8006af0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	0b5b      	lsrs	r3, r3, #13
 8006ae0:	f003 0307 	and.w	r3, r3, #7
 8006ae4:	4903      	ldr	r1, [pc, #12]	@ (8006af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ae6:	5ccb      	ldrb	r3, [r1, r3]
 8006ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	40023800 	.word	0x40023800
 8006af4:	08014924 	.word	0x08014924

08006af8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	220f      	movs	r2, #15
 8006b06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006b08:	4b12      	ldr	r3, [pc, #72]	@ (8006b54 <HAL_RCC_GetClockConfig+0x5c>)
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f003 0203 	and.w	r2, r3, #3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006b14:	4b0f      	ldr	r3, [pc, #60]	@ (8006b54 <HAL_RCC_GetClockConfig+0x5c>)
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006b20:	4b0c      	ldr	r3, [pc, #48]	@ (8006b54 <HAL_RCC_GetClockConfig+0x5c>)
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006b2c:	4b09      	ldr	r3, [pc, #36]	@ (8006b54 <HAL_RCC_GetClockConfig+0x5c>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	08db      	lsrs	r3, r3, #3
 8006b32:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006b3a:	4b07      	ldr	r3, [pc, #28]	@ (8006b58 <HAL_RCC_GetClockConfig+0x60>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 020f 	and.w	r2, r3, #15
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	601a      	str	r2, [r3, #0]
}
 8006b46:	bf00      	nop
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	40023800 	.word	0x40023800
 8006b58:	40023c00 	.word	0x40023c00

08006b5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08c      	sub	sp, #48	@ 0x30
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b64:	2300      	movs	r3, #0
 8006b66:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8006b84:	2300      	movs	r3, #0
 8006b86:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d010      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006b94:	4b6f      	ldr	r3, [pc, #444]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b9a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba2:	496c      	ldr	r1, [pc, #432]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d010      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006bc2:	4b64      	ldr	r3, [pc, #400]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bc8:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd0:	4960      	ldr	r1, [pc, #384]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006be0:	2301      	movs	r3, #1
 8006be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d017      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006bf0:	4b58      	ldr	r3, [pc, #352]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bf6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bfe:	4955      	ldr	r1, [pc, #340]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c0e:	d101      	bne.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006c10:	2301      	movs	r3, #1
 8006c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0308 	and.w	r3, r3, #8
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d017      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006c2c:	4b49      	ldr	r3, [pc, #292]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c32:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c3a:	4946      	ldr	r1, [pc, #280]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c4a:	d101      	bne.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0320 	and.w	r3, r3, #32
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 808a 	beq.w	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60bb      	str	r3, [r7, #8]
 8006c6e:	4b39      	ldr	r3, [pc, #228]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c72:	4a38      	ldr	r2, [pc, #224]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c7a:	4b36      	ldr	r3, [pc, #216]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c82:	60bb      	str	r3, [r7, #8]
 8006c84:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006c86:	4b34      	ldr	r3, [pc, #208]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a33      	ldr	r2, [pc, #204]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c90:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c92:	f7fc f8df 	bl	8002e54 <HAL_GetTick>
 8006c96:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c98:	e008      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c9a:	f7fc f8db 	bl	8002e54 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d901      	bls.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e278      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006cac:	4b2a      	ldr	r3, [pc, #168]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d0f0      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006cb8:	4b26      	ldr	r3, [pc, #152]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cc0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d02f      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ccc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cd0:	6a3a      	ldr	r2, [r7, #32]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d028      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cde:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006cec:	4a19      	ldr	r2, [pc, #100]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006cf2:	4b18      	ldr	r3, [pc, #96]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d114      	bne.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006cfe:	f7fc f8a9 	bl	8002e54 <HAL_GetTick>
 8006d02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d04:	e00a      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d06:	f7fc f8a5 	bl	8002e54 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d901      	bls.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e240      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0ee      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d34:	d114      	bne.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8006d36:	4b07      	ldr	r3, [pc, #28]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d42:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006d46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d4a:	4902      	ldr	r1, [pc, #8]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	608b      	str	r3, [r1, #8]
 8006d50:	e00c      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006d52:	bf00      	nop
 8006d54:	40023800 	.word	0x40023800
 8006d58:	40007000 	.word	0x40007000
 8006d5c:	42470e40 	.word	0x42470e40
 8006d60:	4b4a      	ldr	r3, [pc, #296]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	4a49      	ldr	r2, [pc, #292]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006d66:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006d6a:	6093      	str	r3, [r2, #8]
 8006d6c:	4b47      	ldr	r3, [pc, #284]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006d6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d78:	4944      	ldr	r1, [pc, #272]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0310 	and.w	r3, r3, #16
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d004      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8006d90:	4b3f      	ldr	r3, [pc, #252]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006d92:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00a      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006da0:	4b3a      	ldr	r3, [pc, #232]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006da6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dae:	4937      	ldr	r1, [pc, #220]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00a      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006dc2:	4b32      	ldr	r3, [pc, #200]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006dc8:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dd0:	492e      	ldr	r1, [pc, #184]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d011      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006de4:	4b29      	ldr	r3, [pc, #164]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006dea:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006df2:	4926      	ldr	r1, [pc, #152]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e02:	d101      	bne.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006e04:	2301      	movs	r3, #1
 8006e06:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00a      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006e14:	4b1d      	ldr	r3, [pc, #116]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e1a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e22:	491a      	ldr	r1, [pc, #104]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d011      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8006e36:	4b15      	ldr	r3, [pc, #84]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e3c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e44:	4911      	ldr	r1, [pc, #68]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e54:	d101      	bne.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8006e56:	2301      	movs	r3, #1
 8006e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d005      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e68:	f040 80ff 	bne.w	800706a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e6c:	4b09      	ldr	r3, [pc, #36]	@ (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e6e:	2200      	movs	r2, #0
 8006e70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e72:	f7fb ffef 	bl	8002e54 <HAL_GetTick>
 8006e76:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e78:	e00e      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006e7a:	f7fb ffeb 	bl	8002e54 <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d907      	bls.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e188      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006e8c:	40023800 	.word	0x40023800
 8006e90:	424711e0 	.word	0x424711e0
 8006e94:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e98:	4b7e      	ldr	r3, [pc, #504]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1ea      	bne.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d009      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d028      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d124      	bne.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006ecc:	4b71      	ldr	r3, [pc, #452]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ed2:	0c1b      	lsrs	r3, r3, #16
 8006ed4:	f003 0303 	and.w	r3, r3, #3
 8006ed8:	3301      	adds	r3, #1
 8006eda:	005b      	lsls	r3, r3, #1
 8006edc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006ede:	4b6d      	ldr	r3, [pc, #436]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ee4:	0e1b      	lsrs	r3, r3, #24
 8006ee6:	f003 030f 	and.w	r3, r3, #15
 8006eea:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	019b      	lsls	r3, r3, #6
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	085b      	lsrs	r3, r3, #1
 8006efc:	3b01      	subs	r3, #1
 8006efe:	041b      	lsls	r3, r3, #16
 8006f00:	431a      	orrs	r2, r3
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	061b      	lsls	r3, r3, #24
 8006f06:	431a      	orrs	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	071b      	lsls	r3, r3, #28
 8006f0e:	4961      	ldr	r1, [pc, #388]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0304 	and.w	r3, r3, #4
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d004      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f2a:	d00a      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d035      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f40:	d130      	bne.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006f42:	4b54      	ldr	r3, [pc, #336]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f48:	0c1b      	lsrs	r3, r3, #16
 8006f4a:	f003 0303 	and.w	r3, r3, #3
 8006f4e:	3301      	adds	r3, #1
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f54:	4b4f      	ldr	r3, [pc, #316]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f5a:	0f1b      	lsrs	r3, r3, #28
 8006f5c:	f003 0307 	and.w	r3, r3, #7
 8006f60:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	019b      	lsls	r3, r3, #6
 8006f6c:	431a      	orrs	r2, r3
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	085b      	lsrs	r3, r3, #1
 8006f72:	3b01      	subs	r3, #1
 8006f74:	041b      	lsls	r3, r3, #16
 8006f76:	431a      	orrs	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	061b      	lsls	r3, r3, #24
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	071b      	lsls	r3, r3, #28
 8006f84:	4943      	ldr	r1, [pc, #268]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006f8c:	4b41      	ldr	r3, [pc, #260]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f92:	f023 021f 	bic.w	r2, r3, #31
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	493d      	ldr	r1, [pc, #244]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d029      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fb8:	d124      	bne.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006fba:	4b36      	ldr	r3, [pc, #216]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fc0:	0c1b      	lsrs	r3, r3, #16
 8006fc2:	f003 0303 	and.w	r3, r3, #3
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006fcc:	4b31      	ldr	r3, [pc, #196]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fd2:	0f1b      	lsrs	r3, r3, #28
 8006fd4:	f003 0307 	and.w	r3, r3, #7
 8006fd8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	019b      	lsls	r3, r3, #6
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	085b      	lsrs	r3, r3, #1
 8006fec:	3b01      	subs	r3, #1
 8006fee:	041b      	lsls	r3, r3, #16
 8006ff0:	431a      	orrs	r2, r3
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	061b      	lsls	r3, r3, #24
 8006ff6:	431a      	orrs	r2, r3
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	071b      	lsls	r3, r3, #28
 8006ffc:	4925      	ldr	r1, [pc, #148]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800700c:	2b00      	cmp	r3, #0
 800700e:	d016      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	019b      	lsls	r3, r3, #6
 800701a:	431a      	orrs	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	085b      	lsrs	r3, r3, #1
 8007022:	3b01      	subs	r3, #1
 8007024:	041b      	lsls	r3, r3, #16
 8007026:	431a      	orrs	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	061b      	lsls	r3, r3, #24
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	071b      	lsls	r3, r3, #28
 8007036:	4917      	ldr	r1, [pc, #92]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007038:	4313      	orrs	r3, r2
 800703a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800703e:	4b16      	ldr	r3, [pc, #88]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007040:	2201      	movs	r2, #1
 8007042:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007044:	f7fb ff06 	bl	8002e54 <HAL_GetTick>
 8007048:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800704a:	e008      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800704c:	f7fb ff02 	bl	8002e54 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	2b02      	cmp	r3, #2
 8007058:	d901      	bls.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e09f      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800705e:	4b0d      	ldr	r3, [pc, #52]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0f0      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800706a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706c:	2b01      	cmp	r3, #1
 800706e:	f040 8095 	bne.w	800719c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007072:	4b0a      	ldr	r3, [pc, #40]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007074:	2200      	movs	r2, #0
 8007076:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007078:	f7fb feec 	bl	8002e54 <HAL_GetTick>
 800707c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800707e:	e00f      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007080:	f7fb fee8 	bl	8002e54 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	2b02      	cmp	r3, #2
 800708c:	d908      	bls.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e085      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007092:	bf00      	nop
 8007094:	40023800 	.word	0x40023800
 8007098:	42470068 	.word	0x42470068
 800709c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070a0:	4b41      	ldr	r3, [pc, #260]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070ac:	d0e8      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0304 	and.w	r3, r3, #4
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d003      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d009      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d02b      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d127      	bne.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80070d6:	4b34      	ldr	r3, [pc, #208]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80070d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070dc:	0c1b      	lsrs	r3, r3, #16
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	3301      	adds	r3, #1
 80070e4:	005b      	lsls	r3, r3, #1
 80070e6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	699a      	ldr	r2, [r3, #24]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	69db      	ldr	r3, [r3, #28]
 80070f0:	019b      	lsls	r3, r3, #6
 80070f2:	431a      	orrs	r2, r3
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	085b      	lsrs	r3, r3, #1
 80070f8:	3b01      	subs	r3, #1
 80070fa:	041b      	lsls	r3, r3, #16
 80070fc:	431a      	orrs	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007102:	061b      	lsls	r3, r3, #24
 8007104:	4928      	ldr	r1, [pc, #160]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007106:	4313      	orrs	r3, r2
 8007108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800710c:	4b26      	ldr	r3, [pc, #152]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800710e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007112:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711a:	3b01      	subs	r3, #1
 800711c:	021b      	lsls	r3, r3, #8
 800711e:	4922      	ldr	r1, [pc, #136]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007120:	4313      	orrs	r3, r2
 8007122:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800712e:	2b00      	cmp	r3, #0
 8007130:	d01d      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007136:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800713a:	d118      	bne.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800713c:	4b1a      	ldr	r3, [pc, #104]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800713e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007142:	0e1b      	lsrs	r3, r3, #24
 8007144:	f003 030f 	and.w	r3, r3, #15
 8007148:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	699a      	ldr	r2, [r3, #24]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	019b      	lsls	r3, r3, #6
 8007154:	431a      	orrs	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	085b      	lsrs	r3, r3, #1
 800715c:	3b01      	subs	r3, #1
 800715e:	041b      	lsls	r3, r3, #16
 8007160:	431a      	orrs	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	061b      	lsls	r3, r3, #24
 8007166:	4910      	ldr	r1, [pc, #64]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007168:	4313      	orrs	r3, r2
 800716a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800716e:	4b0f      	ldr	r3, [pc, #60]	@ (80071ac <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8007170:	2201      	movs	r2, #1
 8007172:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007174:	f7fb fe6e 	bl	8002e54 <HAL_GetTick>
 8007178:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800717a:	e008      	b.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800717c:	f7fb fe6a 	bl	8002e54 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b02      	cmp	r3, #2
 8007188:	d901      	bls.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e007      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800718e:	4b06      	ldr	r3, [pc, #24]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007196:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800719a:	d1ef      	bne.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3730      	adds	r7, #48	@ 0x30
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	40023800 	.word	0x40023800
 80071ac:	42470070 	.word	0x42470070

080071b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071b4:	b0a6      	sub	sp, #152	@ 0x98
 80071b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80071d0:	2300      	movs	r3, #0
 80071d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071d6:	4bc8      	ldr	r3, [pc, #800]	@ (80074f8 <HAL_RCC_GetSysClockFreq+0x348>)
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f003 030c 	and.w	r3, r3, #12
 80071de:	2b0c      	cmp	r3, #12
 80071e0:	f200 817e 	bhi.w	80074e0 <HAL_RCC_GetSysClockFreq+0x330>
 80071e4:	a201      	add	r2, pc, #4	@ (adr r2, 80071ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80071e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ea:	bf00      	nop
 80071ec:	08007221 	.word	0x08007221
 80071f0:	080074e1 	.word	0x080074e1
 80071f4:	080074e1 	.word	0x080074e1
 80071f8:	080074e1 	.word	0x080074e1
 80071fc:	08007229 	.word	0x08007229
 8007200:	080074e1 	.word	0x080074e1
 8007204:	080074e1 	.word	0x080074e1
 8007208:	080074e1 	.word	0x080074e1
 800720c:	08007231 	.word	0x08007231
 8007210:	080074e1 	.word	0x080074e1
 8007214:	080074e1 	.word	0x080074e1
 8007218:	080074e1 	.word	0x080074e1
 800721c:	0800739b 	.word	0x0800739b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007220:	4bb6      	ldr	r3, [pc, #728]	@ (80074fc <HAL_RCC_GetSysClockFreq+0x34c>)
 8007222:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8007226:	e15f      	b.n	80074e8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007228:	4bb5      	ldr	r3, [pc, #724]	@ (8007500 <HAL_RCC_GetSysClockFreq+0x350>)
 800722a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800722e:	e15b      	b.n	80074e8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007230:	4bb1      	ldr	r3, [pc, #708]	@ (80074f8 <HAL_RCC_GetSysClockFreq+0x348>)
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007238:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800723c:	4bae      	ldr	r3, [pc, #696]	@ (80074f8 <HAL_RCC_GetSysClockFreq+0x348>)
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d031      	beq.n	80072ac <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007248:	4bab      	ldr	r3, [pc, #684]	@ (80074f8 <HAL_RCC_GetSysClockFreq+0x348>)
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	099b      	lsrs	r3, r3, #6
 800724e:	2200      	movs	r2, #0
 8007250:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007252:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007254:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725a:	663b      	str	r3, [r7, #96]	@ 0x60
 800725c:	2300      	movs	r3, #0
 800725e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007260:	4ba7      	ldr	r3, [pc, #668]	@ (8007500 <HAL_RCC_GetSysClockFreq+0x350>)
 8007262:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007266:	462a      	mov	r2, r5
 8007268:	fb03 f202 	mul.w	r2, r3, r2
 800726c:	2300      	movs	r3, #0
 800726e:	4621      	mov	r1, r4
 8007270:	fb01 f303 	mul.w	r3, r1, r3
 8007274:	4413      	add	r3, r2
 8007276:	4aa2      	ldr	r2, [pc, #648]	@ (8007500 <HAL_RCC_GetSysClockFreq+0x350>)
 8007278:	4621      	mov	r1, r4
 800727a:	fba1 1202 	umull	r1, r2, r1, r2
 800727e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007280:	460a      	mov	r2, r1
 8007282:	67ba      	str	r2, [r7, #120]	@ 0x78
 8007284:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007286:	4413      	add	r3, r2
 8007288:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800728a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800728e:	2200      	movs	r2, #0
 8007290:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007292:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007294:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007298:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800729c:	f7f9 fca4 	bl	8000be8 <__aeabi_uldivmod>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4613      	mov	r3, r2
 80072a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80072aa:	e064      	b.n	8007376 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072ac:	4b92      	ldr	r3, [pc, #584]	@ (80074f8 <HAL_RCC_GetSysClockFreq+0x348>)
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	099b      	lsrs	r3, r3, #6
 80072b2:	2200      	movs	r2, #0
 80072b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80072b6:	657a      	str	r2, [r7, #84]	@ 0x54
 80072b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072c0:	2300      	movs	r3, #0
 80072c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072c4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80072c8:	4622      	mov	r2, r4
 80072ca:	462b      	mov	r3, r5
 80072cc:	f04f 0000 	mov.w	r0, #0
 80072d0:	f04f 0100 	mov.w	r1, #0
 80072d4:	0159      	lsls	r1, r3, #5
 80072d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072da:	0150      	lsls	r0, r2, #5
 80072dc:	4602      	mov	r2, r0
 80072de:	460b      	mov	r3, r1
 80072e0:	4621      	mov	r1, r4
 80072e2:	1a51      	subs	r1, r2, r1
 80072e4:	6139      	str	r1, [r7, #16]
 80072e6:	4629      	mov	r1, r5
 80072e8:	eb63 0301 	sbc.w	r3, r3, r1
 80072ec:	617b      	str	r3, [r7, #20]
 80072ee:	f04f 0200 	mov.w	r2, #0
 80072f2:	f04f 0300 	mov.w	r3, #0
 80072f6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072fa:	4659      	mov	r1, fp
 80072fc:	018b      	lsls	r3, r1, #6
 80072fe:	4651      	mov	r1, sl
 8007300:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007304:	4651      	mov	r1, sl
 8007306:	018a      	lsls	r2, r1, #6
 8007308:	4651      	mov	r1, sl
 800730a:	ebb2 0801 	subs.w	r8, r2, r1
 800730e:	4659      	mov	r1, fp
 8007310:	eb63 0901 	sbc.w	r9, r3, r1
 8007314:	f04f 0200 	mov.w	r2, #0
 8007318:	f04f 0300 	mov.w	r3, #0
 800731c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007320:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007324:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007328:	4690      	mov	r8, r2
 800732a:	4699      	mov	r9, r3
 800732c:	4623      	mov	r3, r4
 800732e:	eb18 0303 	adds.w	r3, r8, r3
 8007332:	60bb      	str	r3, [r7, #8]
 8007334:	462b      	mov	r3, r5
 8007336:	eb49 0303 	adc.w	r3, r9, r3
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	f04f 0200 	mov.w	r2, #0
 8007340:	f04f 0300 	mov.w	r3, #0
 8007344:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007348:	4629      	mov	r1, r5
 800734a:	028b      	lsls	r3, r1, #10
 800734c:	4621      	mov	r1, r4
 800734e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007352:	4621      	mov	r1, r4
 8007354:	028a      	lsls	r2, r1, #10
 8007356:	4610      	mov	r0, r2
 8007358:	4619      	mov	r1, r3
 800735a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800735e:	2200      	movs	r2, #0
 8007360:	643b      	str	r3, [r7, #64]	@ 0x40
 8007362:	647a      	str	r2, [r7, #68]	@ 0x44
 8007364:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007368:	f7f9 fc3e 	bl	8000be8 <__aeabi_uldivmod>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	4613      	mov	r3, r2
 8007372:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007376:	4b60      	ldr	r3, [pc, #384]	@ (80074f8 <HAL_RCC_GetSysClockFreq+0x348>)
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	0c1b      	lsrs	r3, r3, #16
 800737c:	f003 0303 	and.w	r3, r3, #3
 8007380:	3301      	adds	r3, #1
 8007382:	005b      	lsls	r3, r3, #1
 8007384:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8007388:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800738c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007390:	fbb2 f3f3 	udiv	r3, r2, r3
 8007394:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8007398:	e0a6      	b.n	80074e8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800739a:	4b57      	ldr	r3, [pc, #348]	@ (80074f8 <HAL_RCC_GetSysClockFreq+0x348>)
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80073a6:	4b54      	ldr	r3, [pc, #336]	@ (80074f8 <HAL_RCC_GetSysClockFreq+0x348>)
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d02a      	beq.n	8007408 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073b2:	4b51      	ldr	r3, [pc, #324]	@ (80074f8 <HAL_RCC_GetSysClockFreq+0x348>)
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	099b      	lsrs	r3, r3, #6
 80073b8:	2200      	movs	r2, #0
 80073ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80073be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80073c4:	2100      	movs	r1, #0
 80073c6:	4b4e      	ldr	r3, [pc, #312]	@ (8007500 <HAL_RCC_GetSysClockFreq+0x350>)
 80073c8:	fb03 f201 	mul.w	r2, r3, r1
 80073cc:	2300      	movs	r3, #0
 80073ce:	fb00 f303 	mul.w	r3, r0, r3
 80073d2:	4413      	add	r3, r2
 80073d4:	4a4a      	ldr	r2, [pc, #296]	@ (8007500 <HAL_RCC_GetSysClockFreq+0x350>)
 80073d6:	fba0 1202 	umull	r1, r2, r0, r2
 80073da:	677a      	str	r2, [r7, #116]	@ 0x74
 80073dc:	460a      	mov	r2, r1
 80073de:	673a      	str	r2, [r7, #112]	@ 0x70
 80073e0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80073e2:	4413      	add	r3, r2
 80073e4:	677b      	str	r3, [r7, #116]	@ 0x74
 80073e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073ea:	2200      	movs	r2, #0
 80073ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80073ee:	637a      	str	r2, [r7, #52]	@ 0x34
 80073f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80073f4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80073f8:	f7f9 fbf6 	bl	8000be8 <__aeabi_uldivmod>
 80073fc:	4602      	mov	r2, r0
 80073fe:	460b      	mov	r3, r1
 8007400:	4613      	mov	r3, r2
 8007402:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007406:	e05b      	b.n	80074c0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007408:	4b3b      	ldr	r3, [pc, #236]	@ (80074f8 <HAL_RCC_GetSysClockFreq+0x348>)
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	099b      	lsrs	r3, r3, #6
 800740e:	2200      	movs	r2, #0
 8007410:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007412:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800741a:	623b      	str	r3, [r7, #32]
 800741c:	2300      	movs	r3, #0
 800741e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007420:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007424:	4642      	mov	r2, r8
 8007426:	464b      	mov	r3, r9
 8007428:	f04f 0000 	mov.w	r0, #0
 800742c:	f04f 0100 	mov.w	r1, #0
 8007430:	0159      	lsls	r1, r3, #5
 8007432:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007436:	0150      	lsls	r0, r2, #5
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	4641      	mov	r1, r8
 800743e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007442:	4649      	mov	r1, r9
 8007444:	eb63 0b01 	sbc.w	fp, r3, r1
 8007448:	f04f 0200 	mov.w	r2, #0
 800744c:	f04f 0300 	mov.w	r3, #0
 8007450:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007454:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007458:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800745c:	ebb2 040a 	subs.w	r4, r2, sl
 8007460:	eb63 050b 	sbc.w	r5, r3, fp
 8007464:	f04f 0200 	mov.w	r2, #0
 8007468:	f04f 0300 	mov.w	r3, #0
 800746c:	00eb      	lsls	r3, r5, #3
 800746e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007472:	00e2      	lsls	r2, r4, #3
 8007474:	4614      	mov	r4, r2
 8007476:	461d      	mov	r5, r3
 8007478:	4643      	mov	r3, r8
 800747a:	18e3      	adds	r3, r4, r3
 800747c:	603b      	str	r3, [r7, #0]
 800747e:	464b      	mov	r3, r9
 8007480:	eb45 0303 	adc.w	r3, r5, r3
 8007484:	607b      	str	r3, [r7, #4]
 8007486:	f04f 0200 	mov.w	r2, #0
 800748a:	f04f 0300 	mov.w	r3, #0
 800748e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007492:	4629      	mov	r1, r5
 8007494:	028b      	lsls	r3, r1, #10
 8007496:	4621      	mov	r1, r4
 8007498:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800749c:	4621      	mov	r1, r4
 800749e:	028a      	lsls	r2, r1, #10
 80074a0:	4610      	mov	r0, r2
 80074a2:	4619      	mov	r1, r3
 80074a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074a8:	2200      	movs	r2, #0
 80074aa:	61bb      	str	r3, [r7, #24]
 80074ac:	61fa      	str	r2, [r7, #28]
 80074ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074b2:	f7f9 fb99 	bl	8000be8 <__aeabi_uldivmod>
 80074b6:	4602      	mov	r2, r0
 80074b8:	460b      	mov	r3, r1
 80074ba:	4613      	mov	r3, r2
 80074bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80074c0:	4b0d      	ldr	r3, [pc, #52]	@ (80074f8 <HAL_RCC_GetSysClockFreq+0x348>)
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	0f1b      	lsrs	r3, r3, #28
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 80074ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80074d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80074d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80074de:	e003      	b.n	80074e8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80074e0:	4b06      	ldr	r3, [pc, #24]	@ (80074fc <HAL_RCC_GetSysClockFreq+0x34c>)
 80074e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80074e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3798      	adds	r7, #152	@ 0x98
 80074f0:	46bd      	mov	sp, r7
 80074f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074f6:	bf00      	nop
 80074f8:	40023800 	.word	0x40023800
 80074fc:	00f42400 	.word	0x00f42400
 8007500:	00b71b00 	.word	0x00b71b00

08007504 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e28d      	b.n	8007a32 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	2b00      	cmp	r3, #0
 8007520:	f000 8083 	beq.w	800762a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007524:	4b94      	ldr	r3, [pc, #592]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f003 030c 	and.w	r3, r3, #12
 800752c:	2b04      	cmp	r3, #4
 800752e:	d019      	beq.n	8007564 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007530:	4b91      	ldr	r3, [pc, #580]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007538:	2b08      	cmp	r3, #8
 800753a:	d106      	bne.n	800754a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800753c:	4b8e      	ldr	r3, [pc, #568]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007544:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007548:	d00c      	beq.n	8007564 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800754a:	4b8b      	ldr	r3, [pc, #556]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007552:	2b0c      	cmp	r3, #12
 8007554:	d112      	bne.n	800757c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007556:	4b88      	ldr	r3, [pc, #544]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800755e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007562:	d10b      	bne.n	800757c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007564:	4b84      	ldr	r3, [pc, #528]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d05b      	beq.n	8007628 <HAL_RCC_OscConfig+0x124>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d157      	bne.n	8007628 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e25a      	b.n	8007a32 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007584:	d106      	bne.n	8007594 <HAL_RCC_OscConfig+0x90>
 8007586:	4b7c      	ldr	r3, [pc, #496]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a7b      	ldr	r2, [pc, #492]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 800758c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007590:	6013      	str	r3, [r2, #0]
 8007592:	e01d      	b.n	80075d0 <HAL_RCC_OscConfig+0xcc>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800759c:	d10c      	bne.n	80075b8 <HAL_RCC_OscConfig+0xb4>
 800759e:	4b76      	ldr	r3, [pc, #472]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a75      	ldr	r2, [pc, #468]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 80075a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	4b73      	ldr	r3, [pc, #460]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a72      	ldr	r2, [pc, #456]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 80075b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	e00b      	b.n	80075d0 <HAL_RCC_OscConfig+0xcc>
 80075b8:	4b6f      	ldr	r3, [pc, #444]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a6e      	ldr	r2, [pc, #440]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 80075be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075c2:	6013      	str	r3, [r2, #0]
 80075c4:	4b6c      	ldr	r3, [pc, #432]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a6b      	ldr	r2, [pc, #428]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 80075ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80075ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d013      	beq.n	8007600 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d8:	f7fb fc3c 	bl	8002e54 <HAL_GetTick>
 80075dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075de:	e008      	b.n	80075f2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075e0:	f7fb fc38 	bl	8002e54 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	2b64      	cmp	r3, #100	@ 0x64
 80075ec:	d901      	bls.n	80075f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e21f      	b.n	8007a32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075f2:	4b61      	ldr	r3, [pc, #388]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d0f0      	beq.n	80075e0 <HAL_RCC_OscConfig+0xdc>
 80075fe:	e014      	b.n	800762a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007600:	f7fb fc28 	bl	8002e54 <HAL_GetTick>
 8007604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007606:	e008      	b.n	800761a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007608:	f7fb fc24 	bl	8002e54 <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	2b64      	cmp	r3, #100	@ 0x64
 8007614:	d901      	bls.n	800761a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e20b      	b.n	8007a32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800761a:	4b57      	ldr	r3, [pc, #348]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1f0      	bne.n	8007608 <HAL_RCC_OscConfig+0x104>
 8007626:	e000      	b.n	800762a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	2b00      	cmp	r3, #0
 8007634:	d06f      	beq.n	8007716 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007636:	4b50      	ldr	r3, [pc, #320]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f003 030c 	and.w	r3, r3, #12
 800763e:	2b00      	cmp	r3, #0
 8007640:	d017      	beq.n	8007672 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007642:	4b4d      	ldr	r3, [pc, #308]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800764a:	2b08      	cmp	r3, #8
 800764c:	d105      	bne.n	800765a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800764e:	4b4a      	ldr	r3, [pc, #296]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00b      	beq.n	8007672 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800765a:	4b47      	ldr	r3, [pc, #284]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007662:	2b0c      	cmp	r3, #12
 8007664:	d11c      	bne.n	80076a0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007666:	4b44      	ldr	r3, [pc, #272]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d116      	bne.n	80076a0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007672:	4b41      	ldr	r3, [pc, #260]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b00      	cmp	r3, #0
 800767c:	d005      	beq.n	800768a <HAL_RCC_OscConfig+0x186>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d001      	beq.n	800768a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e1d3      	b.n	8007a32 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800768a:	4b3b      	ldr	r3, [pc, #236]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	00db      	lsls	r3, r3, #3
 8007698:	4937      	ldr	r1, [pc, #220]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 800769a:	4313      	orrs	r3, r2
 800769c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800769e:	e03a      	b.n	8007716 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d020      	beq.n	80076ea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076a8:	4b34      	ldr	r3, [pc, #208]	@ (800777c <HAL_RCC_OscConfig+0x278>)
 80076aa:	2201      	movs	r2, #1
 80076ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ae:	f7fb fbd1 	bl	8002e54 <HAL_GetTick>
 80076b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076b4:	e008      	b.n	80076c8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076b6:	f7fb fbcd 	bl	8002e54 <HAL_GetTick>
 80076ba:	4602      	mov	r2, r0
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d901      	bls.n	80076c8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e1b4      	b.n	8007a32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076c8:	4b2b      	ldr	r3, [pc, #172]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0302 	and.w	r3, r3, #2
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0f0      	beq.n	80076b6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076d4:	4b28      	ldr	r3, [pc, #160]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	4925      	ldr	r1, [pc, #148]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	600b      	str	r3, [r1, #0]
 80076e8:	e015      	b.n	8007716 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076ea:	4b24      	ldr	r3, [pc, #144]	@ (800777c <HAL_RCC_OscConfig+0x278>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f0:	f7fb fbb0 	bl	8002e54 <HAL_GetTick>
 80076f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076f6:	e008      	b.n	800770a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076f8:	f7fb fbac 	bl	8002e54 <HAL_GetTick>
 80076fc:	4602      	mov	r2, r0
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	2b02      	cmp	r3, #2
 8007704:	d901      	bls.n	800770a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e193      	b.n	8007a32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800770a:	4b1b      	ldr	r3, [pc, #108]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1f0      	bne.n	80076f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0308 	and.w	r3, r3, #8
 800771e:	2b00      	cmp	r3, #0
 8007720:	d036      	beq.n	8007790 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d016      	beq.n	8007758 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800772a:	4b15      	ldr	r3, [pc, #84]	@ (8007780 <HAL_RCC_OscConfig+0x27c>)
 800772c:	2201      	movs	r2, #1
 800772e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007730:	f7fb fb90 	bl	8002e54 <HAL_GetTick>
 8007734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007736:	e008      	b.n	800774a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007738:	f7fb fb8c 	bl	8002e54 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b02      	cmp	r3, #2
 8007744:	d901      	bls.n	800774a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e173      	b.n	8007a32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800774a:	4b0b      	ldr	r3, [pc, #44]	@ (8007778 <HAL_RCC_OscConfig+0x274>)
 800774c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d0f0      	beq.n	8007738 <HAL_RCC_OscConfig+0x234>
 8007756:	e01b      	b.n	8007790 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007758:	4b09      	ldr	r3, [pc, #36]	@ (8007780 <HAL_RCC_OscConfig+0x27c>)
 800775a:	2200      	movs	r2, #0
 800775c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800775e:	f7fb fb79 	bl	8002e54 <HAL_GetTick>
 8007762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007764:	e00e      	b.n	8007784 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007766:	f7fb fb75 	bl	8002e54 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	2b02      	cmp	r3, #2
 8007772:	d907      	bls.n	8007784 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e15c      	b.n	8007a32 <HAL_RCC_OscConfig+0x52e>
 8007778:	40023800 	.word	0x40023800
 800777c:	42470000 	.word	0x42470000
 8007780:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007784:	4b8a      	ldr	r3, [pc, #552]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 8007786:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007788:	f003 0302 	and.w	r3, r3, #2
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1ea      	bne.n	8007766 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0304 	and.w	r3, r3, #4
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 8097 	beq.w	80078cc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800779e:	2300      	movs	r3, #0
 80077a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077a2:	4b83      	ldr	r3, [pc, #524]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 80077a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10f      	bne.n	80077ce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077ae:	2300      	movs	r3, #0
 80077b0:	60bb      	str	r3, [r7, #8]
 80077b2:	4b7f      	ldr	r3, [pc, #508]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 80077b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b6:	4a7e      	ldr	r2, [pc, #504]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 80077b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80077be:	4b7c      	ldr	r3, [pc, #496]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 80077c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077c6:	60bb      	str	r3, [r7, #8]
 80077c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077ca:	2301      	movs	r3, #1
 80077cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077ce:	4b79      	ldr	r3, [pc, #484]	@ (80079b4 <HAL_RCC_OscConfig+0x4b0>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d118      	bne.n	800780c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80077da:	4b76      	ldr	r3, [pc, #472]	@ (80079b4 <HAL_RCC_OscConfig+0x4b0>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a75      	ldr	r2, [pc, #468]	@ (80079b4 <HAL_RCC_OscConfig+0x4b0>)
 80077e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077e6:	f7fb fb35 	bl	8002e54 <HAL_GetTick>
 80077ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077ec:	e008      	b.n	8007800 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077ee:	f7fb fb31 	bl	8002e54 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d901      	bls.n	8007800 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e118      	b.n	8007a32 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007800:	4b6c      	ldr	r3, [pc, #432]	@ (80079b4 <HAL_RCC_OscConfig+0x4b0>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007808:	2b00      	cmp	r3, #0
 800780a:	d0f0      	beq.n	80077ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d106      	bne.n	8007822 <HAL_RCC_OscConfig+0x31e>
 8007814:	4b66      	ldr	r3, [pc, #408]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 8007816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007818:	4a65      	ldr	r2, [pc, #404]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 800781a:	f043 0301 	orr.w	r3, r3, #1
 800781e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007820:	e01c      	b.n	800785c <HAL_RCC_OscConfig+0x358>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	2b05      	cmp	r3, #5
 8007828:	d10c      	bne.n	8007844 <HAL_RCC_OscConfig+0x340>
 800782a:	4b61      	ldr	r3, [pc, #388]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 800782c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800782e:	4a60      	ldr	r2, [pc, #384]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 8007830:	f043 0304 	orr.w	r3, r3, #4
 8007834:	6713      	str	r3, [r2, #112]	@ 0x70
 8007836:	4b5e      	ldr	r3, [pc, #376]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 8007838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800783a:	4a5d      	ldr	r2, [pc, #372]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 800783c:	f043 0301 	orr.w	r3, r3, #1
 8007840:	6713      	str	r3, [r2, #112]	@ 0x70
 8007842:	e00b      	b.n	800785c <HAL_RCC_OscConfig+0x358>
 8007844:	4b5a      	ldr	r3, [pc, #360]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 8007846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007848:	4a59      	ldr	r2, [pc, #356]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 800784a:	f023 0301 	bic.w	r3, r3, #1
 800784e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007850:	4b57      	ldr	r3, [pc, #348]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 8007852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007854:	4a56      	ldr	r2, [pc, #344]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 8007856:	f023 0304 	bic.w	r3, r3, #4
 800785a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d015      	beq.n	8007890 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007864:	f7fb faf6 	bl	8002e54 <HAL_GetTick>
 8007868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800786a:	e00a      	b.n	8007882 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800786c:	f7fb faf2 	bl	8002e54 <HAL_GetTick>
 8007870:	4602      	mov	r2, r0
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800787a:	4293      	cmp	r3, r2
 800787c:	d901      	bls.n	8007882 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e0d7      	b.n	8007a32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007882:	4b4b      	ldr	r3, [pc, #300]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 8007884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0ee      	beq.n	800786c <HAL_RCC_OscConfig+0x368>
 800788e:	e014      	b.n	80078ba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007890:	f7fb fae0 	bl	8002e54 <HAL_GetTick>
 8007894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007896:	e00a      	b.n	80078ae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007898:	f7fb fadc 	bl	8002e54 <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d901      	bls.n	80078ae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e0c1      	b.n	8007a32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078ae:	4b40      	ldr	r3, [pc, #256]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 80078b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078b2:	f003 0302 	and.w	r3, r3, #2
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1ee      	bne.n	8007898 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078ba:	7dfb      	ldrb	r3, [r7, #23]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d105      	bne.n	80078cc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078c0:	4b3b      	ldr	r3, [pc, #236]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 80078c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c4:	4a3a      	ldr	r2, [pc, #232]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 80078c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 80ad 	beq.w	8007a30 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80078d6:	4b36      	ldr	r3, [pc, #216]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f003 030c 	and.w	r3, r3, #12
 80078de:	2b08      	cmp	r3, #8
 80078e0:	d060      	beq.n	80079a4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d145      	bne.n	8007976 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078ea:	4b33      	ldr	r3, [pc, #204]	@ (80079b8 <HAL_RCC_OscConfig+0x4b4>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f0:	f7fb fab0 	bl	8002e54 <HAL_GetTick>
 80078f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078f6:	e008      	b.n	800790a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078f8:	f7fb faac 	bl	8002e54 <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	2b02      	cmp	r3, #2
 8007904:	d901      	bls.n	800790a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e093      	b.n	8007a32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800790a:	4b29      	ldr	r3, [pc, #164]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1f0      	bne.n	80078f8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	69da      	ldr	r2, [r3, #28]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	431a      	orrs	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007924:	019b      	lsls	r3, r3, #6
 8007926:	431a      	orrs	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792c:	085b      	lsrs	r3, r3, #1
 800792e:	3b01      	subs	r3, #1
 8007930:	041b      	lsls	r3, r3, #16
 8007932:	431a      	orrs	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007938:	061b      	lsls	r3, r3, #24
 800793a:	431a      	orrs	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007940:	071b      	lsls	r3, r3, #28
 8007942:	491b      	ldr	r1, [pc, #108]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 8007944:	4313      	orrs	r3, r2
 8007946:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007948:	4b1b      	ldr	r3, [pc, #108]	@ (80079b8 <HAL_RCC_OscConfig+0x4b4>)
 800794a:	2201      	movs	r2, #1
 800794c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800794e:	f7fb fa81 	bl	8002e54 <HAL_GetTick>
 8007952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007954:	e008      	b.n	8007968 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007956:	f7fb fa7d 	bl	8002e54 <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	2b02      	cmp	r3, #2
 8007962:	d901      	bls.n	8007968 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e064      	b.n	8007a32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007968:	4b11      	ldr	r3, [pc, #68]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d0f0      	beq.n	8007956 <HAL_RCC_OscConfig+0x452>
 8007974:	e05c      	b.n	8007a30 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007976:	4b10      	ldr	r3, [pc, #64]	@ (80079b8 <HAL_RCC_OscConfig+0x4b4>)
 8007978:	2200      	movs	r2, #0
 800797a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800797c:	f7fb fa6a 	bl	8002e54 <HAL_GetTick>
 8007980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007982:	e008      	b.n	8007996 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007984:	f7fb fa66 	bl	8002e54 <HAL_GetTick>
 8007988:	4602      	mov	r2, r0
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	2b02      	cmp	r3, #2
 8007990:	d901      	bls.n	8007996 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e04d      	b.n	8007a32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007996:	4b06      	ldr	r3, [pc, #24]	@ (80079b0 <HAL_RCC_OscConfig+0x4ac>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1f0      	bne.n	8007984 <HAL_RCC_OscConfig+0x480>
 80079a2:	e045      	b.n	8007a30 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d107      	bne.n	80079bc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e040      	b.n	8007a32 <HAL_RCC_OscConfig+0x52e>
 80079b0:	40023800 	.word	0x40023800
 80079b4:	40007000 	.word	0x40007000
 80079b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80079bc:	4b1f      	ldr	r3, [pc, #124]	@ (8007a3c <HAL_RCC_OscConfig+0x538>)
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d030      	beq.n	8007a2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d129      	bne.n	8007a2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d122      	bne.n	8007a2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80079ec:	4013      	ands	r3, r2
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80079f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d119      	bne.n	8007a2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a02:	085b      	lsrs	r3, r3, #1
 8007a04:	3b01      	subs	r3, #1
 8007a06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d10f      	bne.n	8007a2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d107      	bne.n	8007a2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a26:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d001      	beq.n	8007a30 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e000      	b.n	8007a32 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	40023800 	.word	0x40023800

08007a40 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d101      	bne.n	8007a56 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e073      	b.n	8007b3e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	7f5b      	ldrb	r3, [r3, #29]
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d105      	bne.n	8007a6c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7f9 fd1a 	bl	80014a0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2202      	movs	r2, #2
 8007a70:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	f003 0310 	and.w	r3, r3, #16
 8007a7c:	2b10      	cmp	r3, #16
 8007a7e:	d055      	beq.n	8007b2c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	22ca      	movs	r2, #202	@ 0xca
 8007a86:	625a      	str	r2, [r3, #36]	@ 0x24
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2253      	movs	r2, #83	@ 0x53
 8007a8e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fa49 	bl	8007f28 <RTC_EnterInitMode>
 8007a96:	4603      	mov	r3, r0
 8007a98:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d12c      	bne.n	8007afa <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	6812      	ldr	r2, [r2, #0]
 8007aaa:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007aae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ab2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6899      	ldr	r1, [r3, #8]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	695b      	ldr	r3, [r3, #20]
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	68d2      	ldr	r2, [r2, #12]
 8007ada:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6919      	ldr	r1, [r3, #16]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	041a      	lsls	r2, r3, #16
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	430a      	orrs	r2, r1
 8007aee:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fa50 	bl	8007f96 <RTC_ExitInitMode>
 8007af6:	4603      	mov	r3, r0
 8007af8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d110      	bne.n	8007b22 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007b0e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	699a      	ldr	r2, [r3, #24]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	22ff      	movs	r2, #255	@ 0xff
 8007b28:	625a      	str	r2, [r3, #36]	@ 0x24
 8007b2a:	e001      	b.n	8007b30 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d102      	bne.n	8007b3c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8007b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007b46:	b590      	push	{r4, r7, lr}
 8007b48:	b087      	sub	sp, #28
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	60f8      	str	r0, [r7, #12]
 8007b4e:	60b9      	str	r1, [r7, #8]
 8007b50:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	7f1b      	ldrb	r3, [r3, #28]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d101      	bne.n	8007b62 <HAL_RTC_SetTime+0x1c>
 8007b5e:	2302      	movs	r3, #2
 8007b60:	e087      	b.n	8007c72 <HAL_RTC_SetTime+0x12c>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2201      	movs	r2, #1
 8007b66:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d126      	bne.n	8007bc2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d102      	bne.n	8007b88 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2200      	movs	r2, #0
 8007b86:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f000 fa27 	bl	8007fe0 <RTC_ByteToBcd2>
 8007b92:	4603      	mov	r3, r0
 8007b94:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	785b      	ldrb	r3, [r3, #1]
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f000 fa20 	bl	8007fe0 <RTC_ByteToBcd2>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007ba4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	789b      	ldrb	r3, [r3, #2]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 fa18 	bl	8007fe0 <RTC_ByteToBcd2>
 8007bb0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007bb2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	78db      	ldrb	r3, [r3, #3]
 8007bba:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	617b      	str	r3, [r7, #20]
 8007bc0:	e018      	b.n	8007bf4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d102      	bne.n	8007bd6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	785b      	ldrb	r3, [r3, #1]
 8007be0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007be2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007be8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	78db      	ldrb	r3, [r3, #3]
 8007bee:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	22ca      	movs	r2, #202	@ 0xca
 8007bfa:	625a      	str	r2, [r3, #36]	@ 0x24
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2253      	movs	r2, #83	@ 0x53
 8007c02:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 f98f 	bl	8007f28 <RTC_EnterInitMode>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007c0e:	7cfb      	ldrb	r3, [r7, #19]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d120      	bne.n	8007c56 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007c1e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007c22:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689a      	ldr	r2, [r3, #8]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007c32:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6899      	ldr	r1, [r3, #8]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	68da      	ldr	r2, [r3, #12]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	431a      	orrs	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	430a      	orrs	r2, r1
 8007c4a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 f9a2 	bl	8007f96 <RTC_ExitInitMode>
 8007c52:	4603      	mov	r3, r0
 8007c54:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007c56:	7cfb      	ldrb	r3, [r7, #19]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d102      	bne.n	8007c62 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	22ff      	movs	r2, #255	@ 0xff
 8007c68:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	771a      	strb	r2, [r3, #28]

  return status;
 8007c70:	7cfb      	ldrb	r3, [r7, #19]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	371c      	adds	r7, #28
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd90      	pop	{r4, r7, pc}

08007c7a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b086      	sub	sp, #24
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	60f8      	str	r0, [r7, #12]
 8007c82:	60b9      	str	r1, [r7, #8]
 8007c84:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007cac:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007cb0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	0c1b      	lsrs	r3, r3, #16
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	0a1b      	lsrs	r3, r3, #8
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ccc:	b2da      	uxtb	r2, r3
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cda:	b2da      	uxtb	r2, r3
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	0d9b      	lsrs	r3, r3, #22
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	b2da      	uxtb	r2, r3
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d11a      	bne.n	8007d2c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 f98e 	bl	800801c <RTC_Bcd2ToByte>
 8007d00:	4603      	mov	r3, r0
 8007d02:	461a      	mov	r2, r3
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	785b      	ldrb	r3, [r3, #1]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 f985 	bl	800801c <RTC_Bcd2ToByte>
 8007d12:	4603      	mov	r3, r0
 8007d14:	461a      	mov	r2, r3
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	789b      	ldrb	r3, [r3, #2]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 f97c 	bl	800801c <RTC_Bcd2ToByte>
 8007d24:	4603      	mov	r3, r0
 8007d26:	461a      	mov	r2, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007d36:	b590      	push	{r4, r7, lr}
 8007d38:	b087      	sub	sp, #28
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007d42:	2300      	movs	r3, #0
 8007d44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	7f1b      	ldrb	r3, [r3, #28]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d101      	bne.n	8007d52 <HAL_RTC_SetDate+0x1c>
 8007d4e:	2302      	movs	r3, #2
 8007d50:	e071      	b.n	8007e36 <HAL_RTC_SetDate+0x100>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2201      	movs	r2, #1
 8007d56:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10e      	bne.n	8007d82 <HAL_RTC_SetDate+0x4c>
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	785b      	ldrb	r3, [r3, #1]
 8007d68:	f003 0310 	and.w	r3, r3, #16
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d008      	beq.n	8007d82 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	785b      	ldrb	r3, [r3, #1]
 8007d74:	f023 0310 	bic.w	r3, r3, #16
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	330a      	adds	r3, #10
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d11c      	bne.n	8007dc2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	78db      	ldrb	r3, [r3, #3]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 f927 	bl	8007fe0 <RTC_ByteToBcd2>
 8007d92:	4603      	mov	r3, r0
 8007d94:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	785b      	ldrb	r3, [r3, #1]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 f920 	bl	8007fe0 <RTC_ByteToBcd2>
 8007da0:	4603      	mov	r3, r0
 8007da2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007da4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	789b      	ldrb	r3, [r3, #2]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 f918 	bl	8007fe0 <RTC_ByteToBcd2>
 8007db0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007db2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	e00e      	b.n	8007de0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	78db      	ldrb	r3, [r3, #3]
 8007dc6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	785b      	ldrb	r3, [r3, #1]
 8007dcc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007dce:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007dd4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	22ca      	movs	r2, #202	@ 0xca
 8007de6:	625a      	str	r2, [r3, #36]	@ 0x24
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2253      	movs	r2, #83	@ 0x53
 8007dee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 f899 	bl	8007f28 <RTC_EnterInitMode>
 8007df6:	4603      	mov	r3, r0
 8007df8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007dfa:	7cfb      	ldrb	r3, [r7, #19]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10c      	bne.n	8007e1a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007e0a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007e0e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f000 f8c0 	bl	8007f96 <RTC_ExitInitMode>
 8007e16:	4603      	mov	r3, r0
 8007e18:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007e1a:	7cfb      	ldrb	r3, [r7, #19]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d102      	bne.n	8007e26 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2201      	movs	r2, #1
 8007e24:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	22ff      	movs	r2, #255	@ 0xff
 8007e2c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	771a      	strb	r2, [r3, #28]

  return status;
 8007e34:	7cfb      	ldrb	r3, [r7, #19]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	371c      	adds	r7, #28
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd90      	pop	{r4, r7, pc}

08007e3e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b086      	sub	sp, #24
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	60f8      	str	r0, [r7, #12]
 8007e46:	60b9      	str	r1, [r7, #8]
 8007e48:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007e58:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007e5c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	0c1b      	lsrs	r3, r3, #16
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	0a1b      	lsrs	r3, r3, #8
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	f003 031f 	and.w	r3, r3, #31
 8007e72:	b2da      	uxtb	r2, r3
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	0b5b      	lsrs	r3, r3, #13
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	f003 0307 	and.w	r3, r3, #7
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d11a      	bne.n	8007ed2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	78db      	ldrb	r3, [r3, #3]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 f8bb 	bl	800801c <RTC_Bcd2ToByte>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	785b      	ldrb	r3, [r3, #1]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 f8b2 	bl	800801c <RTC_Bcd2ToByte>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	461a      	mov	r2, r3
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	789b      	ldrb	r3, [r3, #2]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f000 f8a9 	bl	800801c <RTC_Bcd2ToByte>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	461a      	mov	r2, r3
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3718      	adds	r7, #24
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a0d      	ldr	r2, [pc, #52]	@ (8007f24 <HAL_RTC_WaitForSynchro+0x48>)
 8007eee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ef0:	f7fa ffb0 	bl	8002e54 <HAL_GetTick>
 8007ef4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007ef6:	e009      	b.n	8007f0c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ef8:	f7fa ffac 	bl	8002e54 <HAL_GetTick>
 8007efc:	4602      	mov	r2, r0
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f06:	d901      	bls.n	8007f0c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e007      	b.n	8007f1c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	f003 0320 	and.w	r3, r3, #32
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0ee      	beq.n	8007ef8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	00017f5f 	.word	0x00017f5f

08007f28 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d122      	bne.n	8007f8c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68da      	ldr	r2, [r3, #12]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007f54:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007f56:	f7fa ff7d 	bl	8002e54 <HAL_GetTick>
 8007f5a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007f5c:	e00c      	b.n	8007f78 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f5e:	f7fa ff79 	bl	8002e54 <HAL_GetTick>
 8007f62:	4602      	mov	r2, r0
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f6c:	d904      	bls.n	8007f78 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2204      	movs	r2, #4
 8007f72:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d102      	bne.n	8007f8c <RTC_EnterInitMode+0x64>
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d1e8      	bne.n	8007f5e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b084      	sub	sp, #16
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68da      	ldr	r2, [r3, #12]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007fb0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	f003 0320 	and.w	r3, r3, #32
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10a      	bne.n	8007fd6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff ff8b 	bl	8007edc <HAL_RTC_WaitForSynchro>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d004      	beq.n	8007fd6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2204      	movs	r2, #4
 8007fd0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007fea:	2300      	movs	r3, #0
 8007fec:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8007fee:	e005      	b.n	8007ffc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8007ff6:	79fb      	ldrb	r3, [r7, #7]
 8007ff8:	3b0a      	subs	r3, #10
 8007ffa:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007ffc:	79fb      	ldrb	r3, [r7, #7]
 8007ffe:	2b09      	cmp	r3, #9
 8008000:	d8f6      	bhi.n	8007ff0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	b2db      	uxtb	r3, r3
 8008006:	011b      	lsls	r3, r3, #4
 8008008:	b2da      	uxtb	r2, r3
 800800a:	79fb      	ldrb	r3, [r7, #7]
 800800c:	4313      	orrs	r3, r2
 800800e:	b2db      	uxtb	r3, r3
}
 8008010:	4618      	mov	r0, r3
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	4603      	mov	r3, r0
 8008024:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8008026:	2300      	movs	r3, #0
 8008028:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800802a:	79fb      	ldrb	r3, [r7, #7]
 800802c:	091b      	lsrs	r3, r3, #4
 800802e:	b2db      	uxtb	r3, r3
 8008030:	461a      	mov	r2, r3
 8008032:	4613      	mov	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	005b      	lsls	r3, r3, #1
 800803a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	b2da      	uxtb	r2, r3
 8008040:	79fb      	ldrb	r3, [r7, #7]
 8008042:	f003 030f 	and.w	r3, r3, #15
 8008046:	b2db      	uxtb	r3, r3
 8008048:	4413      	add	r3, r2
 800804a:	b2db      	uxtb	r3, r3
}
 800804c:	4618      	mov	r0, r3
 800804e:	3714      	adds	r7, #20
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e07b      	b.n	8008162 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800806e:	2b00      	cmp	r3, #0
 8008070:	d108      	bne.n	8008084 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800807a:	d009      	beq.n	8008090 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	61da      	str	r2, [r3, #28]
 8008082:	e005      	b.n	8008090 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d106      	bne.n	80080b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7f9 fa22 	bl	80014f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80080d8:	431a      	orrs	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080e2:	431a      	orrs	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	431a      	orrs	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	431a      	orrs	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008100:	431a      	orrs	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800810a:	431a      	orrs	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a1b      	ldr	r3, [r3, #32]
 8008110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008114:	ea42 0103 	orr.w	r1, r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800811c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	430a      	orrs	r2, r1
 8008126:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	0c1b      	lsrs	r3, r3, #16
 800812e:	f003 0104 	and.w	r1, r3, #4
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008136:	f003 0210 	and.w	r2, r3, #16
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	69da      	ldr	r2, [r3, #28]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008150:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b082      	sub	sp, #8
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	e041      	b.n	8008200 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b00      	cmp	r3, #0
 8008186:	d106      	bne.n	8008196 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7f9 f9f7 	bl	8001584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2202      	movs	r2, #2
 800819a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	3304      	adds	r3, #4
 80081a6:	4619      	mov	r1, r3
 80081a8:	4610      	mov	r0, r2
 80081aa:	f000 fcaf 	bl	8008b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2201      	movs	r2, #1
 80081b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2201      	movs	r2, #1
 80081ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2201      	movs	r2, #1
 80081ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008216:	b2db      	uxtb	r3, r3
 8008218:	2b01      	cmp	r3, #1
 800821a:	d001      	beq.n	8008220 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	e04e      	b.n	80082be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2202      	movs	r2, #2
 8008224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68da      	ldr	r2, [r3, #12]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f042 0201 	orr.w	r2, r2, #1
 8008236:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a23      	ldr	r2, [pc, #140]	@ (80082cc <HAL_TIM_Base_Start_IT+0xc4>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d022      	beq.n	8008288 <HAL_TIM_Base_Start_IT+0x80>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800824a:	d01d      	beq.n	8008288 <HAL_TIM_Base_Start_IT+0x80>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a1f      	ldr	r2, [pc, #124]	@ (80082d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d018      	beq.n	8008288 <HAL_TIM_Base_Start_IT+0x80>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a1e      	ldr	r2, [pc, #120]	@ (80082d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d013      	beq.n	8008288 <HAL_TIM_Base_Start_IT+0x80>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a1c      	ldr	r2, [pc, #112]	@ (80082d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d00e      	beq.n	8008288 <HAL_TIM_Base_Start_IT+0x80>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a1b      	ldr	r2, [pc, #108]	@ (80082dc <HAL_TIM_Base_Start_IT+0xd4>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d009      	beq.n	8008288 <HAL_TIM_Base_Start_IT+0x80>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a19      	ldr	r2, [pc, #100]	@ (80082e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d004      	beq.n	8008288 <HAL_TIM_Base_Start_IT+0x80>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a18      	ldr	r2, [pc, #96]	@ (80082e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d111      	bne.n	80082ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	f003 0307 	and.w	r3, r3, #7
 8008292:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2b06      	cmp	r3, #6
 8008298:	d010      	beq.n	80082bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f042 0201 	orr.w	r2, r2, #1
 80082a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082aa:	e007      	b.n	80082bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f042 0201 	orr.w	r2, r2, #1
 80082ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3714      	adds	r7, #20
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	40010000 	.word	0x40010000
 80082d0:	40000400 	.word	0x40000400
 80082d4:	40000800 	.word	0x40000800
 80082d8:	40000c00 	.word	0x40000c00
 80082dc:	40010400 	.word	0x40010400
 80082e0:	40014000 	.word	0x40014000
 80082e4:	40001800 	.word	0x40001800

080082e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e041      	b.n	800837e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008300:	b2db      	uxtb	r3, r3
 8008302:	2b00      	cmp	r3, #0
 8008304:	d106      	bne.n	8008314 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f839 	bl	8008386 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	3304      	adds	r3, #4
 8008324:	4619      	mov	r1, r3
 8008326:	4610      	mov	r0, r2
 8008328:	f000 fbf0 	bl	8008b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008386:	b480      	push	{r7}
 8008388:	b083      	sub	sp, #12
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800838e:	bf00      	nop
 8008390:	370c      	adds	r7, #12
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
	...

0800839c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d109      	bne.n	80083c4 <HAL_TIM_PWM_Start_IT+0x28>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	bf14      	ite	ne
 80083bc:	2301      	movne	r3, #1
 80083be:	2300      	moveq	r3, #0
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	e022      	b.n	800840a <HAL_TIM_PWM_Start_IT+0x6e>
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	2b04      	cmp	r3, #4
 80083c8:	d109      	bne.n	80083de <HAL_TIM_PWM_Start_IT+0x42>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	bf14      	ite	ne
 80083d6:	2301      	movne	r3, #1
 80083d8:	2300      	moveq	r3, #0
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	e015      	b.n	800840a <HAL_TIM_PWM_Start_IT+0x6e>
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b08      	cmp	r3, #8
 80083e2:	d109      	bne.n	80083f8 <HAL_TIM_PWM_Start_IT+0x5c>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	bf14      	ite	ne
 80083f0:	2301      	movne	r3, #1
 80083f2:	2300      	moveq	r3, #0
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	e008      	b.n	800840a <HAL_TIM_PWM_Start_IT+0x6e>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b01      	cmp	r3, #1
 8008402:	bf14      	ite	ne
 8008404:	2301      	movne	r3, #1
 8008406:	2300      	moveq	r3, #0
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e0c7      	b.n	80085a2 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d104      	bne.n	8008422 <HAL_TIM_PWM_Start_IT+0x86>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2202      	movs	r2, #2
 800841c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008420:	e013      	b.n	800844a <HAL_TIM_PWM_Start_IT+0xae>
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b04      	cmp	r3, #4
 8008426:	d104      	bne.n	8008432 <HAL_TIM_PWM_Start_IT+0x96>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2202      	movs	r2, #2
 800842c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008430:	e00b      	b.n	800844a <HAL_TIM_PWM_Start_IT+0xae>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b08      	cmp	r3, #8
 8008436:	d104      	bne.n	8008442 <HAL_TIM_PWM_Start_IT+0xa6>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008440:	e003      	b.n	800844a <HAL_TIM_PWM_Start_IT+0xae>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2202      	movs	r2, #2
 8008446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	2b0c      	cmp	r3, #12
 800844e:	d841      	bhi.n	80084d4 <HAL_TIM_PWM_Start_IT+0x138>
 8008450:	a201      	add	r2, pc, #4	@ (adr r2, 8008458 <HAL_TIM_PWM_Start_IT+0xbc>)
 8008452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008456:	bf00      	nop
 8008458:	0800848d 	.word	0x0800848d
 800845c:	080084d5 	.word	0x080084d5
 8008460:	080084d5 	.word	0x080084d5
 8008464:	080084d5 	.word	0x080084d5
 8008468:	0800849f 	.word	0x0800849f
 800846c:	080084d5 	.word	0x080084d5
 8008470:	080084d5 	.word	0x080084d5
 8008474:	080084d5 	.word	0x080084d5
 8008478:	080084b1 	.word	0x080084b1
 800847c:	080084d5 	.word	0x080084d5
 8008480:	080084d5 	.word	0x080084d5
 8008484:	080084d5 	.word	0x080084d5
 8008488:	080084c3 	.word	0x080084c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68da      	ldr	r2, [r3, #12]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f042 0202 	orr.w	r2, r2, #2
 800849a:	60da      	str	r2, [r3, #12]
      break;
 800849c:	e01d      	b.n	80084da <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68da      	ldr	r2, [r3, #12]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f042 0204 	orr.w	r2, r2, #4
 80084ac:	60da      	str	r2, [r3, #12]
      break;
 80084ae:	e014      	b.n	80084da <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68da      	ldr	r2, [r3, #12]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f042 0208 	orr.w	r2, r2, #8
 80084be:	60da      	str	r2, [r3, #12]
      break;
 80084c0:	e00b      	b.n	80084da <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68da      	ldr	r2, [r3, #12]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f042 0210 	orr.w	r2, r2, #16
 80084d0:	60da      	str	r2, [r3, #12]
      break;
 80084d2:	e002      	b.n	80084da <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	73fb      	strb	r3, [r7, #15]
      break;
 80084d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80084da:	7bfb      	ldrb	r3, [r7, #15]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d15f      	bne.n	80085a0 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2201      	movs	r2, #1
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f000 fe05 	bl	80090f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a2e      	ldr	r2, [pc, #184]	@ (80085ac <HAL_TIM_PWM_Start_IT+0x210>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d004      	beq.n	8008502 <HAL_TIM_PWM_Start_IT+0x166>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a2c      	ldr	r2, [pc, #176]	@ (80085b0 <HAL_TIM_PWM_Start_IT+0x214>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d101      	bne.n	8008506 <HAL_TIM_PWM_Start_IT+0x16a>
 8008502:	2301      	movs	r3, #1
 8008504:	e000      	b.n	8008508 <HAL_TIM_PWM_Start_IT+0x16c>
 8008506:	2300      	movs	r3, #0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d007      	beq.n	800851c <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800851a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a22      	ldr	r2, [pc, #136]	@ (80085ac <HAL_TIM_PWM_Start_IT+0x210>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d022      	beq.n	800856c <HAL_TIM_PWM_Start_IT+0x1d0>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800852e:	d01d      	beq.n	800856c <HAL_TIM_PWM_Start_IT+0x1d0>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a1f      	ldr	r2, [pc, #124]	@ (80085b4 <HAL_TIM_PWM_Start_IT+0x218>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d018      	beq.n	800856c <HAL_TIM_PWM_Start_IT+0x1d0>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a1e      	ldr	r2, [pc, #120]	@ (80085b8 <HAL_TIM_PWM_Start_IT+0x21c>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d013      	beq.n	800856c <HAL_TIM_PWM_Start_IT+0x1d0>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a1c      	ldr	r2, [pc, #112]	@ (80085bc <HAL_TIM_PWM_Start_IT+0x220>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d00e      	beq.n	800856c <HAL_TIM_PWM_Start_IT+0x1d0>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a17      	ldr	r2, [pc, #92]	@ (80085b0 <HAL_TIM_PWM_Start_IT+0x214>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d009      	beq.n	800856c <HAL_TIM_PWM_Start_IT+0x1d0>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a18      	ldr	r2, [pc, #96]	@ (80085c0 <HAL_TIM_PWM_Start_IT+0x224>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d004      	beq.n	800856c <HAL_TIM_PWM_Start_IT+0x1d0>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a17      	ldr	r2, [pc, #92]	@ (80085c4 <HAL_TIM_PWM_Start_IT+0x228>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d111      	bne.n	8008590 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f003 0307 	and.w	r3, r3, #7
 8008576:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	2b06      	cmp	r3, #6
 800857c:	d010      	beq.n	80085a0 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f042 0201 	orr.w	r2, r2, #1
 800858c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800858e:	e007      	b.n	80085a0 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f042 0201 	orr.w	r2, r2, #1
 800859e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	40010000 	.word	0x40010000
 80085b0:	40010400 	.word	0x40010400
 80085b4:	40000400 	.word	0x40000400
 80085b8:	40000800 	.word	0x40000800
 80085bc:	40000c00 	.word	0x40000c00
 80085c0:	40014000 	.word	0x40014000
 80085c4:	40001800 	.word	0x40001800

080085c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d020      	beq.n	800862c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f003 0302 	and.w	r3, r3, #2
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d01b      	beq.n	800862c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f06f 0202 	mvn.w	r2, #2
 80085fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	699b      	ldr	r3, [r3, #24]
 800860a:	f003 0303 	and.w	r3, r3, #3
 800860e:	2b00      	cmp	r3, #0
 8008610:	d003      	beq.n	800861a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fa5b 	bl	8008ace <HAL_TIM_IC_CaptureCallback>
 8008618:	e005      	b.n	8008626 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 fa4d 	bl	8008aba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fa5e 	bl	8008ae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	f003 0304 	and.w	r3, r3, #4
 8008632:	2b00      	cmp	r3, #0
 8008634:	d020      	beq.n	8008678 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f003 0304 	and.w	r3, r3, #4
 800863c:	2b00      	cmp	r3, #0
 800863e:	d01b      	beq.n	8008678 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f06f 0204 	mvn.w	r2, #4
 8008648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2202      	movs	r2, #2
 800864e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800865a:	2b00      	cmp	r3, #0
 800865c:	d003      	beq.n	8008666 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fa35 	bl	8008ace <HAL_TIM_IC_CaptureCallback>
 8008664:	e005      	b.n	8008672 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fa27 	bl	8008aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fa38 	bl	8008ae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	f003 0308 	and.w	r3, r3, #8
 800867e:	2b00      	cmp	r3, #0
 8008680:	d020      	beq.n	80086c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f003 0308 	and.w	r3, r3, #8
 8008688:	2b00      	cmp	r3, #0
 800868a:	d01b      	beq.n	80086c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f06f 0208 	mvn.w	r2, #8
 8008694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2204      	movs	r2, #4
 800869a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	69db      	ldr	r3, [r3, #28]
 80086a2:	f003 0303 	and.w	r3, r3, #3
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d003      	beq.n	80086b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fa0f 	bl	8008ace <HAL_TIM_IC_CaptureCallback>
 80086b0:	e005      	b.n	80086be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fa01 	bl	8008aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fa12 	bl	8008ae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	f003 0310 	and.w	r3, r3, #16
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d020      	beq.n	8008710 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f003 0310 	and.w	r3, r3, #16
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d01b      	beq.n	8008710 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f06f 0210 	mvn.w	r2, #16
 80086e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2208      	movs	r2, #8
 80086e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d003      	beq.n	80086fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f9e9 	bl	8008ace <HAL_TIM_IC_CaptureCallback>
 80086fc:	e005      	b.n	800870a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 f9db 	bl	8008aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f9ec 	bl	8008ae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00c      	beq.n	8008734 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	2b00      	cmp	r3, #0
 8008722:	d007      	beq.n	8008734 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f06f 0201 	mvn.w	r2, #1
 800872c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f7f8 fde0 	bl	80012f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00c      	beq.n	8008758 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008744:	2b00      	cmp	r3, #0
 8008746:	d007      	beq.n	8008758 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 fd7c 	bl	8009250 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00c      	beq.n	800877c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008768:	2b00      	cmp	r3, #0
 800876a:	d007      	beq.n	800877c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f9bd 	bl	8008af6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	f003 0320 	and.w	r3, r3, #32
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00c      	beq.n	80087a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f003 0320 	and.w	r3, r3, #32
 800878c:	2b00      	cmp	r3, #0
 800878e:	d007      	beq.n	80087a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f06f 0220 	mvn.w	r2, #32
 8008798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fd4e 	bl	800923c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087a0:	bf00      	nop
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b086      	sub	sp, #24
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d101      	bne.n	80087c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80087c2:	2302      	movs	r3, #2
 80087c4:	e0ae      	b.n	8008924 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b0c      	cmp	r3, #12
 80087d2:	f200 809f 	bhi.w	8008914 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80087d6:	a201      	add	r2, pc, #4	@ (adr r2, 80087dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80087d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087dc:	08008811 	.word	0x08008811
 80087e0:	08008915 	.word	0x08008915
 80087e4:	08008915 	.word	0x08008915
 80087e8:	08008915 	.word	0x08008915
 80087ec:	08008851 	.word	0x08008851
 80087f0:	08008915 	.word	0x08008915
 80087f4:	08008915 	.word	0x08008915
 80087f8:	08008915 	.word	0x08008915
 80087fc:	08008893 	.word	0x08008893
 8008800:	08008915 	.word	0x08008915
 8008804:	08008915 	.word	0x08008915
 8008808:	08008915 	.word	0x08008915
 800880c:	080088d3 	.word	0x080088d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68b9      	ldr	r1, [r7, #8]
 8008816:	4618      	mov	r0, r3
 8008818:	f000 fa24 	bl	8008c64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	699a      	ldr	r2, [r3, #24]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0208 	orr.w	r2, r2, #8
 800882a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	699a      	ldr	r2, [r3, #24]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f022 0204 	bic.w	r2, r2, #4
 800883a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6999      	ldr	r1, [r3, #24]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	691a      	ldr	r2, [r3, #16]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	430a      	orrs	r2, r1
 800884c:	619a      	str	r2, [r3, #24]
      break;
 800884e:	e064      	b.n	800891a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68b9      	ldr	r1, [r7, #8]
 8008856:	4618      	mov	r0, r3
 8008858:	f000 fa74 	bl	8008d44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	699a      	ldr	r2, [r3, #24]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800886a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	699a      	ldr	r2, [r3, #24]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800887a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6999      	ldr	r1, [r3, #24]
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	021a      	lsls	r2, r3, #8
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	430a      	orrs	r2, r1
 800888e:	619a      	str	r2, [r3, #24]
      break;
 8008890:	e043      	b.n	800891a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68b9      	ldr	r1, [r7, #8]
 8008898:	4618      	mov	r0, r3
 800889a:	f000 fac9 	bl	8008e30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	69da      	ldr	r2, [r3, #28]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f042 0208 	orr.w	r2, r2, #8
 80088ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	69da      	ldr	r2, [r3, #28]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f022 0204 	bic.w	r2, r2, #4
 80088bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	69d9      	ldr	r1, [r3, #28]
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	691a      	ldr	r2, [r3, #16]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	430a      	orrs	r2, r1
 80088ce:	61da      	str	r2, [r3, #28]
      break;
 80088d0:	e023      	b.n	800891a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68b9      	ldr	r1, [r7, #8]
 80088d8:	4618      	mov	r0, r3
 80088da:	f000 fb1d 	bl	8008f18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	69da      	ldr	r2, [r3, #28]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	69da      	ldr	r2, [r3, #28]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	69d9      	ldr	r1, [r3, #28]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	021a      	lsls	r2, r3, #8
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	430a      	orrs	r2, r1
 8008910:	61da      	str	r2, [r3, #28]
      break;
 8008912:	e002      	b.n	800891a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	75fb      	strb	r3, [r7, #23]
      break;
 8008918:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008922:	7dfb      	ldrb	r3, [r7, #23]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3718      	adds	r7, #24
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008936:	2300      	movs	r3, #0
 8008938:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008940:	2b01      	cmp	r3, #1
 8008942:	d101      	bne.n	8008948 <HAL_TIM_ConfigClockSource+0x1c>
 8008944:	2302      	movs	r3, #2
 8008946:	e0b4      	b.n	8008ab2 <HAL_TIM_ConfigClockSource+0x186>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2202      	movs	r2, #2
 8008954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800896e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68ba      	ldr	r2, [r7, #8]
 8008976:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008980:	d03e      	beq.n	8008a00 <HAL_TIM_ConfigClockSource+0xd4>
 8008982:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008986:	f200 8087 	bhi.w	8008a98 <HAL_TIM_ConfigClockSource+0x16c>
 800898a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800898e:	f000 8086 	beq.w	8008a9e <HAL_TIM_ConfigClockSource+0x172>
 8008992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008996:	d87f      	bhi.n	8008a98 <HAL_TIM_ConfigClockSource+0x16c>
 8008998:	2b70      	cmp	r3, #112	@ 0x70
 800899a:	d01a      	beq.n	80089d2 <HAL_TIM_ConfigClockSource+0xa6>
 800899c:	2b70      	cmp	r3, #112	@ 0x70
 800899e:	d87b      	bhi.n	8008a98 <HAL_TIM_ConfigClockSource+0x16c>
 80089a0:	2b60      	cmp	r3, #96	@ 0x60
 80089a2:	d050      	beq.n	8008a46 <HAL_TIM_ConfigClockSource+0x11a>
 80089a4:	2b60      	cmp	r3, #96	@ 0x60
 80089a6:	d877      	bhi.n	8008a98 <HAL_TIM_ConfigClockSource+0x16c>
 80089a8:	2b50      	cmp	r3, #80	@ 0x50
 80089aa:	d03c      	beq.n	8008a26 <HAL_TIM_ConfigClockSource+0xfa>
 80089ac:	2b50      	cmp	r3, #80	@ 0x50
 80089ae:	d873      	bhi.n	8008a98 <HAL_TIM_ConfigClockSource+0x16c>
 80089b0:	2b40      	cmp	r3, #64	@ 0x40
 80089b2:	d058      	beq.n	8008a66 <HAL_TIM_ConfigClockSource+0x13a>
 80089b4:	2b40      	cmp	r3, #64	@ 0x40
 80089b6:	d86f      	bhi.n	8008a98 <HAL_TIM_ConfigClockSource+0x16c>
 80089b8:	2b30      	cmp	r3, #48	@ 0x30
 80089ba:	d064      	beq.n	8008a86 <HAL_TIM_ConfigClockSource+0x15a>
 80089bc:	2b30      	cmp	r3, #48	@ 0x30
 80089be:	d86b      	bhi.n	8008a98 <HAL_TIM_ConfigClockSource+0x16c>
 80089c0:	2b20      	cmp	r3, #32
 80089c2:	d060      	beq.n	8008a86 <HAL_TIM_ConfigClockSource+0x15a>
 80089c4:	2b20      	cmp	r3, #32
 80089c6:	d867      	bhi.n	8008a98 <HAL_TIM_ConfigClockSource+0x16c>
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d05c      	beq.n	8008a86 <HAL_TIM_ConfigClockSource+0x15a>
 80089cc:	2b10      	cmp	r3, #16
 80089ce:	d05a      	beq.n	8008a86 <HAL_TIM_ConfigClockSource+0x15a>
 80089d0:	e062      	b.n	8008a98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80089e2:	f000 fb69 	bl	80090b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80089f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	609a      	str	r2, [r3, #8]
      break;
 80089fe:	e04f      	b.n	8008aa0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a10:	f000 fb52 	bl	80090b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	689a      	ldr	r2, [r3, #8]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a22:	609a      	str	r2, [r3, #8]
      break;
 8008a24:	e03c      	b.n	8008aa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a32:	461a      	mov	r2, r3
 8008a34:	f000 fac6 	bl	8008fc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2150      	movs	r1, #80	@ 0x50
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 fb1f 	bl	8009082 <TIM_ITRx_SetConfig>
      break;
 8008a44:	e02c      	b.n	8008aa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a52:	461a      	mov	r2, r3
 8008a54:	f000 fae5 	bl	8009022 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2160      	movs	r1, #96	@ 0x60
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 fb0f 	bl	8009082 <TIM_ITRx_SetConfig>
      break;
 8008a64:	e01c      	b.n	8008aa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a72:	461a      	mov	r2, r3
 8008a74:	f000 faa6 	bl	8008fc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2140      	movs	r1, #64	@ 0x40
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 faff 	bl	8009082 <TIM_ITRx_SetConfig>
      break;
 8008a84:	e00c      	b.n	8008aa0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4619      	mov	r1, r3
 8008a90:	4610      	mov	r0, r2
 8008a92:	f000 faf6 	bl	8009082 <TIM_ITRx_SetConfig>
      break;
 8008a96:	e003      	b.n	8008aa0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a9c:	e000      	b.n	8008aa0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b083      	sub	sp, #12
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ac2:	bf00      	nop
 8008ac4:	370c      	adds	r7, #12
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr

08008ace <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b083      	sub	sp, #12
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ad6:	bf00      	nop
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b083      	sub	sp, #12
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008aea:	bf00      	nop
 8008aec:	370c      	adds	r7, #12
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008af6:	b480      	push	{r7}
 8008af8:	b083      	sub	sp, #12
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008afe:	bf00      	nop
 8008b00:	370c      	adds	r7, #12
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
	...

08008b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a46      	ldr	r2, [pc, #280]	@ (8008c38 <TIM_Base_SetConfig+0x12c>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d013      	beq.n	8008b4c <TIM_Base_SetConfig+0x40>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b2a:	d00f      	beq.n	8008b4c <TIM_Base_SetConfig+0x40>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a43      	ldr	r2, [pc, #268]	@ (8008c3c <TIM_Base_SetConfig+0x130>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d00b      	beq.n	8008b4c <TIM_Base_SetConfig+0x40>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a42      	ldr	r2, [pc, #264]	@ (8008c40 <TIM_Base_SetConfig+0x134>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d007      	beq.n	8008b4c <TIM_Base_SetConfig+0x40>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a41      	ldr	r2, [pc, #260]	@ (8008c44 <TIM_Base_SetConfig+0x138>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d003      	beq.n	8008b4c <TIM_Base_SetConfig+0x40>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a40      	ldr	r2, [pc, #256]	@ (8008c48 <TIM_Base_SetConfig+0x13c>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d108      	bne.n	8008b5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a35      	ldr	r2, [pc, #212]	@ (8008c38 <TIM_Base_SetConfig+0x12c>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d02b      	beq.n	8008bbe <TIM_Base_SetConfig+0xb2>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b6c:	d027      	beq.n	8008bbe <TIM_Base_SetConfig+0xb2>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a32      	ldr	r2, [pc, #200]	@ (8008c3c <TIM_Base_SetConfig+0x130>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d023      	beq.n	8008bbe <TIM_Base_SetConfig+0xb2>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a31      	ldr	r2, [pc, #196]	@ (8008c40 <TIM_Base_SetConfig+0x134>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d01f      	beq.n	8008bbe <TIM_Base_SetConfig+0xb2>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a30      	ldr	r2, [pc, #192]	@ (8008c44 <TIM_Base_SetConfig+0x138>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d01b      	beq.n	8008bbe <TIM_Base_SetConfig+0xb2>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a2f      	ldr	r2, [pc, #188]	@ (8008c48 <TIM_Base_SetConfig+0x13c>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d017      	beq.n	8008bbe <TIM_Base_SetConfig+0xb2>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a2e      	ldr	r2, [pc, #184]	@ (8008c4c <TIM_Base_SetConfig+0x140>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d013      	beq.n	8008bbe <TIM_Base_SetConfig+0xb2>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a2d      	ldr	r2, [pc, #180]	@ (8008c50 <TIM_Base_SetConfig+0x144>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d00f      	beq.n	8008bbe <TIM_Base_SetConfig+0xb2>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a2c      	ldr	r2, [pc, #176]	@ (8008c54 <TIM_Base_SetConfig+0x148>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d00b      	beq.n	8008bbe <TIM_Base_SetConfig+0xb2>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8008c58 <TIM_Base_SetConfig+0x14c>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d007      	beq.n	8008bbe <TIM_Base_SetConfig+0xb2>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a2a      	ldr	r2, [pc, #168]	@ (8008c5c <TIM_Base_SetConfig+0x150>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d003      	beq.n	8008bbe <TIM_Base_SetConfig+0xb2>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a29      	ldr	r2, [pc, #164]	@ (8008c60 <TIM_Base_SetConfig+0x154>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d108      	bne.n	8008bd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	689a      	ldr	r2, [r3, #8]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a10      	ldr	r2, [pc, #64]	@ (8008c38 <TIM_Base_SetConfig+0x12c>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d003      	beq.n	8008c04 <TIM_Base_SetConfig+0xf8>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a12      	ldr	r2, [pc, #72]	@ (8008c48 <TIM_Base_SetConfig+0x13c>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d103      	bne.n	8008c0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	691a      	ldr	r2, [r3, #16]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d105      	bne.n	8008c2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	f023 0201 	bic.w	r2, r3, #1
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	611a      	str	r2, [r3, #16]
  }
}
 8008c2a:	bf00      	nop
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	40010000 	.word	0x40010000
 8008c3c:	40000400 	.word	0x40000400
 8008c40:	40000800 	.word	0x40000800
 8008c44:	40000c00 	.word	0x40000c00
 8008c48:	40010400 	.word	0x40010400
 8008c4c:	40014000 	.word	0x40014000
 8008c50:	40014400 	.word	0x40014400
 8008c54:	40014800 	.word	0x40014800
 8008c58:	40001800 	.word	0x40001800
 8008c5c:	40001c00 	.word	0x40001c00
 8008c60:	40002000 	.word	0x40002000

08008c64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b087      	sub	sp, #28
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a1b      	ldr	r3, [r3, #32]
 8008c72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6a1b      	ldr	r3, [r3, #32]
 8008c78:	f023 0201 	bic.w	r2, r3, #1
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f023 0303 	bic.w	r3, r3, #3
 8008c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	f023 0302 	bic.w	r3, r3, #2
 8008cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	697a      	ldr	r2, [r7, #20]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a20      	ldr	r2, [pc, #128]	@ (8008d3c <TIM_OC1_SetConfig+0xd8>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d003      	beq.n	8008cc8 <TIM_OC1_SetConfig+0x64>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8008d40 <TIM_OC1_SetConfig+0xdc>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d10c      	bne.n	8008ce2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	f023 0308 	bic.w	r3, r3, #8
 8008cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	697a      	ldr	r2, [r7, #20]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f023 0304 	bic.w	r3, r3, #4
 8008ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a15      	ldr	r2, [pc, #84]	@ (8008d3c <TIM_OC1_SetConfig+0xd8>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d003      	beq.n	8008cf2 <TIM_OC1_SetConfig+0x8e>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a14      	ldr	r2, [pc, #80]	@ (8008d40 <TIM_OC1_SetConfig+0xdc>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d111      	bne.n	8008d16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	695b      	ldr	r3, [r3, #20]
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	693a      	ldr	r2, [r7, #16]
 8008d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	685a      	ldr	r2, [r3, #4]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	697a      	ldr	r2, [r7, #20]
 8008d2e:	621a      	str	r2, [r3, #32]
}
 8008d30:	bf00      	nop
 8008d32:	371c      	adds	r7, #28
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	40010000 	.word	0x40010000
 8008d40:	40010400 	.word	0x40010400

08008d44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a1b      	ldr	r3, [r3, #32]
 8008d58:	f023 0210 	bic.w	r2, r3, #16
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	021b      	lsls	r3, r3, #8
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	f023 0320 	bic.w	r3, r3, #32
 8008d8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	011b      	lsls	r3, r3, #4
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a22      	ldr	r2, [pc, #136]	@ (8008e28 <TIM_OC2_SetConfig+0xe4>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d003      	beq.n	8008dac <TIM_OC2_SetConfig+0x68>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a21      	ldr	r2, [pc, #132]	@ (8008e2c <TIM_OC2_SetConfig+0xe8>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d10d      	bne.n	8008dc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	011b      	lsls	r3, r3, #4
 8008dba:	697a      	ldr	r2, [r7, #20]
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a17      	ldr	r2, [pc, #92]	@ (8008e28 <TIM_OC2_SetConfig+0xe4>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d003      	beq.n	8008dd8 <TIM_OC2_SetConfig+0x94>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a16      	ldr	r2, [pc, #88]	@ (8008e2c <TIM_OC2_SetConfig+0xe8>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d113      	bne.n	8008e00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008dde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008de6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	695b      	ldr	r3, [r3, #20]
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	699b      	ldr	r3, [r3, #24]
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	693a      	ldr	r2, [r7, #16]
 8008e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	685a      	ldr	r2, [r3, #4]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	621a      	str	r2, [r3, #32]
}
 8008e1a:	bf00      	nop
 8008e1c:	371c      	adds	r7, #28
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	40010000 	.word	0x40010000
 8008e2c:	40010400 	.word	0x40010400

08008e30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a1b      	ldr	r3, [r3, #32]
 8008e44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f023 0303 	bic.w	r3, r3, #3
 8008e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	021b      	lsls	r3, r3, #8
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a21      	ldr	r2, [pc, #132]	@ (8008f10 <TIM_OC3_SetConfig+0xe0>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d003      	beq.n	8008e96 <TIM_OC3_SetConfig+0x66>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a20      	ldr	r2, [pc, #128]	@ (8008f14 <TIM_OC3_SetConfig+0xe4>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d10d      	bne.n	8008eb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	021b      	lsls	r3, r3, #8
 8008ea4:	697a      	ldr	r2, [r7, #20]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a16      	ldr	r2, [pc, #88]	@ (8008f10 <TIM_OC3_SetConfig+0xe0>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d003      	beq.n	8008ec2 <TIM_OC3_SetConfig+0x92>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a15      	ldr	r2, [pc, #84]	@ (8008f14 <TIM_OC3_SetConfig+0xe4>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d113      	bne.n	8008eea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	695b      	ldr	r3, [r3, #20]
 8008ed6:	011b      	lsls	r3, r3, #4
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	011b      	lsls	r3, r3, #4
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	685a      	ldr	r2, [r3, #4]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	697a      	ldr	r2, [r7, #20]
 8008f02:	621a      	str	r2, [r3, #32]
}
 8008f04:	bf00      	nop
 8008f06:	371c      	adds	r7, #28
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	40010000 	.word	0x40010000
 8008f14:	40010400 	.word	0x40010400

08008f18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a1b      	ldr	r3, [r3, #32]
 8008f2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	021b      	lsls	r3, r3, #8
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	031b      	lsls	r3, r3, #12
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a12      	ldr	r2, [pc, #72]	@ (8008fbc <TIM_OC4_SetConfig+0xa4>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d003      	beq.n	8008f80 <TIM_OC4_SetConfig+0x68>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a11      	ldr	r2, [pc, #68]	@ (8008fc0 <TIM_OC4_SetConfig+0xa8>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d109      	bne.n	8008f94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	695b      	ldr	r3, [r3, #20]
 8008f8c:	019b      	lsls	r3, r3, #6
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	697a      	ldr	r2, [r7, #20]
 8008f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	685a      	ldr	r2, [r3, #4]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	693a      	ldr	r2, [r7, #16]
 8008fac:	621a      	str	r2, [r3, #32]
}
 8008fae:	bf00      	nop
 8008fb0:	371c      	adds	r7, #28
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	40010000 	.word	0x40010000
 8008fc0:	40010400 	.word	0x40010400

08008fc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b087      	sub	sp, #28
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6a1b      	ldr	r3, [r3, #32]
 8008fd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	f023 0201 	bic.w	r2, r3, #1
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	011b      	lsls	r3, r3, #4
 8008ff4:	693a      	ldr	r2, [r7, #16]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	f023 030a 	bic.w	r3, r3, #10
 8009000:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009002:	697a      	ldr	r2, [r7, #20]
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	4313      	orrs	r3, r2
 8009008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	697a      	ldr	r2, [r7, #20]
 8009014:	621a      	str	r2, [r3, #32]
}
 8009016:	bf00      	nop
 8009018:	371c      	adds	r7, #28
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009022:	b480      	push	{r7}
 8009024:	b087      	sub	sp, #28
 8009026:	af00      	add	r7, sp, #0
 8009028:	60f8      	str	r0, [r7, #12]
 800902a:	60b9      	str	r1, [r7, #8]
 800902c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6a1b      	ldr	r3, [r3, #32]
 8009038:	f023 0210 	bic.w	r2, r3, #16
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800904c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	031b      	lsls	r3, r3, #12
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	4313      	orrs	r3, r2
 8009056:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800905e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	011b      	lsls	r3, r3, #4
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	4313      	orrs	r3, r2
 8009068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	697a      	ldr	r2, [r7, #20]
 8009074:	621a      	str	r2, [r3, #32]
}
 8009076:	bf00      	nop
 8009078:	371c      	adds	r7, #28
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr

08009082 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009082:	b480      	push	{r7}
 8009084:	b085      	sub	sp, #20
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009098:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	4313      	orrs	r3, r2
 80090a0:	f043 0307 	orr.w	r3, r3, #7
 80090a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	609a      	str	r2, [r3, #8]
}
 80090ac:	bf00      	nop
 80090ae:	3714      	adds	r7, #20
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b087      	sub	sp, #28
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
 80090c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80090d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	021a      	lsls	r2, r3, #8
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	431a      	orrs	r2, r3
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	4313      	orrs	r3, r2
 80090e0:	697a      	ldr	r2, [r7, #20]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	697a      	ldr	r2, [r7, #20]
 80090ea:	609a      	str	r2, [r3, #8]
}
 80090ec:	bf00      	nop
 80090ee:	371c      	adds	r7, #28
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b087      	sub	sp, #28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	f003 031f 	and.w	r3, r3, #31
 800910a:	2201      	movs	r2, #1
 800910c:	fa02 f303 	lsl.w	r3, r2, r3
 8009110:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6a1a      	ldr	r2, [r3, #32]
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	43db      	mvns	r3, r3
 800911a:	401a      	ands	r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6a1a      	ldr	r2, [r3, #32]
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	f003 031f 	and.w	r3, r3, #31
 800912a:	6879      	ldr	r1, [r7, #4]
 800912c:	fa01 f303 	lsl.w	r3, r1, r3
 8009130:	431a      	orrs	r2, r3
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	621a      	str	r2, [r3, #32]
}
 8009136:	bf00      	nop
 8009138:	371c      	adds	r7, #28
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
	...

08009144 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009154:	2b01      	cmp	r3, #1
 8009156:	d101      	bne.n	800915c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009158:	2302      	movs	r3, #2
 800915a:	e05a      	b.n	8009212 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2202      	movs	r2, #2
 8009168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009182:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	4313      	orrs	r3, r2
 800918c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a21      	ldr	r2, [pc, #132]	@ (8009220 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d022      	beq.n	80091e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091a8:	d01d      	beq.n	80091e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a1d      	ldr	r2, [pc, #116]	@ (8009224 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d018      	beq.n	80091e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a1b      	ldr	r2, [pc, #108]	@ (8009228 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d013      	beq.n	80091e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a1a      	ldr	r2, [pc, #104]	@ (800922c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d00e      	beq.n	80091e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a18      	ldr	r2, [pc, #96]	@ (8009230 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d009      	beq.n	80091e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a17      	ldr	r2, [pc, #92]	@ (8009234 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d004      	beq.n	80091e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a15      	ldr	r2, [pc, #84]	@ (8009238 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d10c      	bne.n	8009200 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3714      	adds	r7, #20
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	40010000 	.word	0x40010000
 8009224:	40000400 	.word	0x40000400
 8009228:	40000800 	.word	0x40000800
 800922c:	40000c00 	.word	0x40000c00
 8009230:	40010400 	.word	0x40010400
 8009234:	40014000 	.word	0x40014000
 8009238:	40001800 	.word	0x40001800

0800923c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d101      	bne.n	8009276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e042      	b.n	80092fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800927c:	b2db      	uxtb	r3, r3
 800927e:	2b00      	cmp	r3, #0
 8009280:	d106      	bne.n	8009290 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7f8 f9d6 	bl	800163c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2224      	movs	r2, #36	@ 0x24
 8009294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68da      	ldr	r2, [r3, #12]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80092a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fc7b 	bl	8009ba4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	691a      	ldr	r2, [r3, #16]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80092bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	695a      	ldr	r2, [r3, #20]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80092cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68da      	ldr	r2, [r3, #12]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80092dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2220      	movs	r2, #32
 80092e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2220      	movs	r2, #32
 80092f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3708      	adds	r7, #8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b0ba      	sub	sp, #232	@ 0xe8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800932a:	2300      	movs	r3, #0
 800932c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009330:	2300      	movs	r3, #0
 8009332:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800933a:	f003 030f 	and.w	r3, r3, #15
 800933e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10f      	bne.n	800936a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800934a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800934e:	f003 0320 	and.w	r3, r3, #32
 8009352:	2b00      	cmp	r3, #0
 8009354:	d009      	beq.n	800936a <HAL_UART_IRQHandler+0x66>
 8009356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800935a:	f003 0320 	and.w	r3, r3, #32
 800935e:	2b00      	cmp	r3, #0
 8009360:	d003      	beq.n	800936a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fb5f 	bl	8009a26 <UART_Receive_IT>
      return;
 8009368:	e25b      	b.n	8009822 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800936a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800936e:	2b00      	cmp	r3, #0
 8009370:	f000 80de 	beq.w	8009530 <HAL_UART_IRQHandler+0x22c>
 8009374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009378:	f003 0301 	and.w	r3, r3, #1
 800937c:	2b00      	cmp	r3, #0
 800937e:	d106      	bne.n	800938e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009384:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009388:	2b00      	cmp	r3, #0
 800938a:	f000 80d1 	beq.w	8009530 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800938e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009392:	f003 0301 	and.w	r3, r3, #1
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00b      	beq.n	80093b2 <HAL_UART_IRQHandler+0xae>
 800939a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800939e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d005      	beq.n	80093b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093aa:	f043 0201 	orr.w	r2, r3, #1
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093b6:	f003 0304 	and.w	r3, r3, #4
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00b      	beq.n	80093d6 <HAL_UART_IRQHandler+0xd2>
 80093be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d005      	beq.n	80093d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093ce:	f043 0202 	orr.w	r2, r3, #2
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093da:	f003 0302 	and.w	r3, r3, #2
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d00b      	beq.n	80093fa <HAL_UART_IRQHandler+0xf6>
 80093e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093e6:	f003 0301 	and.w	r3, r3, #1
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d005      	beq.n	80093fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093f2:	f043 0204 	orr.w	r2, r3, #4
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80093fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093fe:	f003 0308 	and.w	r3, r3, #8
 8009402:	2b00      	cmp	r3, #0
 8009404:	d011      	beq.n	800942a <HAL_UART_IRQHandler+0x126>
 8009406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800940a:	f003 0320 	and.w	r3, r3, #32
 800940e:	2b00      	cmp	r3, #0
 8009410:	d105      	bne.n	800941e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009416:	f003 0301 	and.w	r3, r3, #1
 800941a:	2b00      	cmp	r3, #0
 800941c:	d005      	beq.n	800942a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009422:	f043 0208 	orr.w	r2, r3, #8
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800942e:	2b00      	cmp	r3, #0
 8009430:	f000 81f2 	beq.w	8009818 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009438:	f003 0320 	and.w	r3, r3, #32
 800943c:	2b00      	cmp	r3, #0
 800943e:	d008      	beq.n	8009452 <HAL_UART_IRQHandler+0x14e>
 8009440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009444:	f003 0320 	and.w	r3, r3, #32
 8009448:	2b00      	cmp	r3, #0
 800944a:	d002      	beq.n	8009452 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 faea 	bl	8009a26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	695b      	ldr	r3, [r3, #20]
 8009458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800945c:	2b40      	cmp	r3, #64	@ 0x40
 800945e:	bf0c      	ite	eq
 8009460:	2301      	moveq	r3, #1
 8009462:	2300      	movne	r3, #0
 8009464:	b2db      	uxtb	r3, r3
 8009466:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800946e:	f003 0308 	and.w	r3, r3, #8
 8009472:	2b00      	cmp	r3, #0
 8009474:	d103      	bne.n	800947e <HAL_UART_IRQHandler+0x17a>
 8009476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800947a:	2b00      	cmp	r3, #0
 800947c:	d04f      	beq.n	800951e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f9f2 	bl	8009868 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800948e:	2b40      	cmp	r3, #64	@ 0x40
 8009490:	d141      	bne.n	8009516 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	3314      	adds	r3, #20
 8009498:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80094a0:	e853 3f00 	ldrex	r3, [r3]
 80094a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80094a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80094ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	3314      	adds	r3, #20
 80094ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80094be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80094c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80094ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80094ce:	e841 2300 	strex	r3, r2, [r1]
 80094d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80094d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1d9      	bne.n	8009492 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d013      	beq.n	800950e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094ea:	4a7e      	ldr	r2, [pc, #504]	@ (80096e4 <HAL_UART_IRQHandler+0x3e0>)
 80094ec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fa f8a2 	bl	800363c <HAL_DMA_Abort_IT>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d016      	beq.n	800952c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009508:	4610      	mov	r0, r2
 800950a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800950c:	e00e      	b.n	800952c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f994 	bl	800983c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009514:	e00a      	b.n	800952c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f990 	bl	800983c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800951c:	e006      	b.n	800952c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f98c 	bl	800983c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800952a:	e175      	b.n	8009818 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800952c:	bf00      	nop
    return;
 800952e:	e173      	b.n	8009818 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009534:	2b01      	cmp	r3, #1
 8009536:	f040 814f 	bne.w	80097d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800953a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800953e:	f003 0310 	and.w	r3, r3, #16
 8009542:	2b00      	cmp	r3, #0
 8009544:	f000 8148 	beq.w	80097d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800954c:	f003 0310 	and.w	r3, r3, #16
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 8141 	beq.w	80097d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009556:	2300      	movs	r3, #0
 8009558:	60bb      	str	r3, [r7, #8]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	60bb      	str	r3, [r7, #8]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	60bb      	str	r3, [r7, #8]
 800956a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009576:	2b40      	cmp	r3, #64	@ 0x40
 8009578:	f040 80b6 	bne.w	80096e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009588:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 8145 	beq.w	800981c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009596:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800959a:	429a      	cmp	r2, r3
 800959c:	f080 813e 	bcs.w	800981c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095ac:	69db      	ldr	r3, [r3, #28]
 80095ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095b2:	f000 8088 	beq.w	80096c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	330c      	adds	r3, #12
 80095bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80095c4:	e853 3f00 	ldrex	r3, [r3]
 80095c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80095cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80095d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	330c      	adds	r3, #12
 80095de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80095e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80095e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80095ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80095f2:	e841 2300 	strex	r3, r2, [r1]
 80095f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80095fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1d9      	bne.n	80095b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3314      	adds	r3, #20
 8009608:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800960c:	e853 3f00 	ldrex	r3, [r3]
 8009610:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009612:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009614:	f023 0301 	bic.w	r3, r3, #1
 8009618:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3314      	adds	r3, #20
 8009622:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009626:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800962a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800962e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009632:	e841 2300 	strex	r3, r2, [r1]
 8009636:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009638:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1e1      	bne.n	8009602 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	3314      	adds	r3, #20
 8009644:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009646:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009648:	e853 3f00 	ldrex	r3, [r3]
 800964c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800964e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009654:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3314      	adds	r3, #20
 800965e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009662:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009664:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009666:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009668:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800966a:	e841 2300 	strex	r3, r2, [r1]
 800966e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009670:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1e3      	bne.n	800963e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2220      	movs	r2, #32
 800967a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	330c      	adds	r3, #12
 800968a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800968e:	e853 3f00 	ldrex	r3, [r3]
 8009692:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009694:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009696:	f023 0310 	bic.w	r3, r3, #16
 800969a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	330c      	adds	r3, #12
 80096a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80096a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80096aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80096ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096b0:	e841 2300 	strex	r3, r2, [r1]
 80096b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80096b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1e3      	bne.n	8009684 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7f9 ff4b 	bl	800355c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2202      	movs	r2, #2
 80096ca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	1ad3      	subs	r3, r2, r3
 80096d8:	b29b      	uxth	r3, r3
 80096da:	4619      	mov	r1, r3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f8b7 	bl	8009850 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80096e2:	e09b      	b.n	800981c <HAL_UART_IRQHandler+0x518>
 80096e4:	0800992f 	.word	0x0800992f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f000 808e 	beq.w	8009820 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009704:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009708:	2b00      	cmp	r3, #0
 800970a:	f000 8089 	beq.w	8009820 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	330c      	adds	r3, #12
 8009714:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009718:	e853 3f00 	ldrex	r3, [r3]
 800971c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800971e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009720:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009724:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	330c      	adds	r3, #12
 800972e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009732:	647a      	str	r2, [r7, #68]	@ 0x44
 8009734:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009736:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009738:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800973a:	e841 2300 	strex	r3, r2, [r1]
 800973e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1e3      	bne.n	800970e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	3314      	adds	r3, #20
 800974c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009750:	e853 3f00 	ldrex	r3, [r3]
 8009754:	623b      	str	r3, [r7, #32]
   return(result);
 8009756:	6a3b      	ldr	r3, [r7, #32]
 8009758:	f023 0301 	bic.w	r3, r3, #1
 800975c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	3314      	adds	r3, #20
 8009766:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800976a:	633a      	str	r2, [r7, #48]	@ 0x30
 800976c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009772:	e841 2300 	strex	r3, r2, [r1]
 8009776:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800977a:	2b00      	cmp	r3, #0
 800977c:	d1e3      	bne.n	8009746 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2220      	movs	r2, #32
 8009782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	330c      	adds	r3, #12
 8009792:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	e853 3f00 	ldrex	r3, [r3]
 800979a:	60fb      	str	r3, [r7, #12]
   return(result);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f023 0310 	bic.w	r3, r3, #16
 80097a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	330c      	adds	r3, #12
 80097ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80097b0:	61fa      	str	r2, [r7, #28]
 80097b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b4:	69b9      	ldr	r1, [r7, #24]
 80097b6:	69fa      	ldr	r2, [r7, #28]
 80097b8:	e841 2300 	strex	r3, r2, [r1]
 80097bc:	617b      	str	r3, [r7, #20]
   return(result);
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1e3      	bne.n	800978c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2202      	movs	r2, #2
 80097c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097ce:	4619      	mov	r1, r3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 f83d 	bl	8009850 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80097d6:	e023      	b.n	8009820 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80097d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d009      	beq.n	80097f8 <HAL_UART_IRQHandler+0x4f4>
 80097e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d003      	beq.n	80097f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f8b0 	bl	8009956 <UART_Transmit_IT>
    return;
 80097f6:	e014      	b.n	8009822 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80097f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00e      	beq.n	8009822 <HAL_UART_IRQHandler+0x51e>
 8009804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800980c:	2b00      	cmp	r3, #0
 800980e:	d008      	beq.n	8009822 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f8f0 	bl	80099f6 <UART_EndTransmit_IT>
    return;
 8009816:	e004      	b.n	8009822 <HAL_UART_IRQHandler+0x51e>
    return;
 8009818:	bf00      	nop
 800981a:	e002      	b.n	8009822 <HAL_UART_IRQHandler+0x51e>
      return;
 800981c:	bf00      	nop
 800981e:	e000      	b.n	8009822 <HAL_UART_IRQHandler+0x51e>
      return;
 8009820:	bf00      	nop
  }
}
 8009822:	37e8      	adds	r7, #232	@ 0xe8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009830:	bf00      	nop
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	460b      	mov	r3, r1
 800985a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009868:	b480      	push	{r7}
 800986a:	b095      	sub	sp, #84	@ 0x54
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	330c      	adds	r3, #12
 8009876:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800987a:	e853 3f00 	ldrex	r3, [r3]
 800987e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009882:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009886:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	330c      	adds	r3, #12
 800988e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009890:	643a      	str	r2, [r7, #64]	@ 0x40
 8009892:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009894:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009896:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009898:	e841 2300 	strex	r3, r2, [r1]
 800989c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800989e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1e5      	bne.n	8009870 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	3314      	adds	r3, #20
 80098aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ac:	6a3b      	ldr	r3, [r7, #32]
 80098ae:	e853 3f00 	ldrex	r3, [r3]
 80098b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	f023 0301 	bic.w	r3, r3, #1
 80098ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3314      	adds	r3, #20
 80098c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80098c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098cc:	e841 2300 	strex	r3, r2, [r1]
 80098d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1e5      	bne.n	80098a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d119      	bne.n	8009914 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	330c      	adds	r3, #12
 80098e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	e853 3f00 	ldrex	r3, [r3]
 80098ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	f023 0310 	bic.w	r3, r3, #16
 80098f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	330c      	adds	r3, #12
 80098fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009900:	61ba      	str	r2, [r7, #24]
 8009902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009904:	6979      	ldr	r1, [r7, #20]
 8009906:	69ba      	ldr	r2, [r7, #24]
 8009908:	e841 2300 	strex	r3, r2, [r1]
 800990c:	613b      	str	r3, [r7, #16]
   return(result);
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1e5      	bne.n	80098e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2220      	movs	r2, #32
 8009918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009922:	bf00      	nop
 8009924:	3754      	adds	r7, #84	@ 0x54
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr

0800992e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b084      	sub	sp, #16
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800993a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2200      	movs	r2, #0
 8009940:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2200      	movs	r2, #0
 8009946:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f7ff ff77 	bl	800983c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800994e:	bf00      	nop
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009956:	b480      	push	{r7}
 8009958:	b085      	sub	sp, #20
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009964:	b2db      	uxtb	r3, r3
 8009966:	2b21      	cmp	r3, #33	@ 0x21
 8009968:	d13e      	bne.n	80099e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009972:	d114      	bne.n	800999e <UART_Transmit_IT+0x48>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d110      	bne.n	800999e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a1b      	ldr	r3, [r3, #32]
 8009980:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	881b      	ldrh	r3, [r3, #0]
 8009986:	461a      	mov	r2, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009990:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a1b      	ldr	r3, [r3, #32]
 8009996:	1c9a      	adds	r2, r3, #2
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	621a      	str	r2, [r3, #32]
 800999c:	e008      	b.n	80099b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	1c59      	adds	r1, r3, #1
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	6211      	str	r1, [r2, #32]
 80099a8:	781a      	ldrb	r2, [r3, #0]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	3b01      	subs	r3, #1
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	4619      	mov	r1, r3
 80099be:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10f      	bne.n	80099e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68da      	ldr	r2, [r3, #12]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80099d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68da      	ldr	r2, [r3, #12]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	e000      	b.n	80099ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80099e8:	2302      	movs	r3, #2
  }
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b082      	sub	sp, #8
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68da      	ldr	r2, [r3, #12]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2220      	movs	r2, #32
 8009a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7ff ff06 	bl	8009828 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3708      	adds	r7, #8
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b08c      	sub	sp, #48	@ 0x30
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	2b22      	cmp	r3, #34	@ 0x22
 8009a38:	f040 80ae 	bne.w	8009b98 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a44:	d117      	bne.n	8009a76 <UART_Receive_IT+0x50>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d113      	bne.n	8009a76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a56:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a64:	b29a      	uxth	r2, r3
 8009a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a6e:	1c9a      	adds	r2, r3, #2
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	629a      	str	r2, [r3, #40]	@ 0x28
 8009a74:	e026      	b.n	8009ac4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a88:	d007      	beq.n	8009a9a <UART_Receive_IT+0x74>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d10a      	bne.n	8009aa8 <UART_Receive_IT+0x82>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d106      	bne.n	8009aa8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	b2da      	uxtb	r2, r3
 8009aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aa4:	701a      	strb	r2, [r3, #0]
 8009aa6:	e008      	b.n	8009aba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ab4:	b2da      	uxtb	r2, r3
 8009ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009abe:	1c5a      	adds	r2, r3, #1
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	3b01      	subs	r3, #1
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d15d      	bne.n	8009b94 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68da      	ldr	r2, [r3, #12]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f022 0220 	bic.w	r2, r2, #32
 8009ae6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68da      	ldr	r2, [r3, #12]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009af6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	695a      	ldr	r2, [r3, #20]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f022 0201 	bic.w	r2, r2, #1
 8009b06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2220      	movs	r2, #32
 8009b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d135      	bne.n	8009b8a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	330c      	adds	r3, #12
 8009b2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	e853 3f00 	ldrex	r3, [r3]
 8009b32:	613b      	str	r3, [r7, #16]
   return(result);
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	f023 0310 	bic.w	r3, r3, #16
 8009b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	330c      	adds	r3, #12
 8009b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b44:	623a      	str	r2, [r7, #32]
 8009b46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b48:	69f9      	ldr	r1, [r7, #28]
 8009b4a:	6a3a      	ldr	r2, [r7, #32]
 8009b4c:	e841 2300 	strex	r3, r2, [r1]
 8009b50:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1e5      	bne.n	8009b24 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f003 0310 	and.w	r3, r3, #16
 8009b62:	2b10      	cmp	r3, #16
 8009b64:	d10a      	bne.n	8009b7c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b66:	2300      	movs	r3, #0
 8009b68:	60fb      	str	r3, [r7, #12]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	60fb      	str	r3, [r7, #12]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	60fb      	str	r3, [r7, #12]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009b80:	4619      	mov	r1, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7ff fe64 	bl	8009850 <HAL_UARTEx_RxEventCallback>
 8009b88:	e002      	b.n	8009b90 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7f7 fabe 	bl	800110c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009b90:	2300      	movs	r3, #0
 8009b92:	e002      	b.n	8009b9a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	e000      	b.n	8009b9a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009b98:	2302      	movs	r3, #2
  }
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3730      	adds	r7, #48	@ 0x30
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
	...

08009ba4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ba8:	b0c0      	sub	sp, #256	@ 0x100
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bc0:	68d9      	ldr	r1, [r3, #12]
 8009bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	ea40 0301 	orr.w	r3, r0, r1
 8009bcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bd2:	689a      	ldr	r2, [r3, #8]
 8009bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	431a      	orrs	r2, r3
 8009bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009be0:	695b      	ldr	r3, [r3, #20]
 8009be2:	431a      	orrs	r2, r3
 8009be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009be8:	69db      	ldr	r3, [r3, #28]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009bfc:	f021 010c 	bic.w	r1, r1, #12
 8009c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009c0a:	430b      	orrs	r3, r1
 8009c0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c1e:	6999      	ldr	r1, [r3, #24]
 8009c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	ea40 0301 	orr.w	r3, r0, r1
 8009c2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	4b8f      	ldr	r3, [pc, #572]	@ (8009e70 <UART_SetConfig+0x2cc>)
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d005      	beq.n	8009c44 <UART_SetConfig+0xa0>
 8009c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	4b8d      	ldr	r3, [pc, #564]	@ (8009e74 <UART_SetConfig+0x2d0>)
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d104      	bne.n	8009c4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c44:	f7fc ff44 	bl	8006ad0 <HAL_RCC_GetPCLK2Freq>
 8009c48:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009c4c:	e003      	b.n	8009c56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c4e:	f7fc ff2b 	bl	8006aa8 <HAL_RCC_GetPCLK1Freq>
 8009c52:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c5a:	69db      	ldr	r3, [r3, #28]
 8009c5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c60:	f040 810c 	bne.w	8009e7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009c6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009c72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009c76:	4622      	mov	r2, r4
 8009c78:	462b      	mov	r3, r5
 8009c7a:	1891      	adds	r1, r2, r2
 8009c7c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009c7e:	415b      	adcs	r3, r3
 8009c80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009c86:	4621      	mov	r1, r4
 8009c88:	eb12 0801 	adds.w	r8, r2, r1
 8009c8c:	4629      	mov	r1, r5
 8009c8e:	eb43 0901 	adc.w	r9, r3, r1
 8009c92:	f04f 0200 	mov.w	r2, #0
 8009c96:	f04f 0300 	mov.w	r3, #0
 8009c9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ca2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009ca6:	4690      	mov	r8, r2
 8009ca8:	4699      	mov	r9, r3
 8009caa:	4623      	mov	r3, r4
 8009cac:	eb18 0303 	adds.w	r3, r8, r3
 8009cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009cb4:	462b      	mov	r3, r5
 8009cb6:	eb49 0303 	adc.w	r3, r9, r3
 8009cba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009cca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009cce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	18db      	adds	r3, r3, r3
 8009cd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009cd8:	4613      	mov	r3, r2
 8009cda:	eb42 0303 	adc.w	r3, r2, r3
 8009cde:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ce0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009ce4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009ce8:	f7f6 ff7e 	bl	8000be8 <__aeabi_uldivmod>
 8009cec:	4602      	mov	r2, r0
 8009cee:	460b      	mov	r3, r1
 8009cf0:	4b61      	ldr	r3, [pc, #388]	@ (8009e78 <UART_SetConfig+0x2d4>)
 8009cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8009cf6:	095b      	lsrs	r3, r3, #5
 8009cf8:	011c      	lsls	r4, r3, #4
 8009cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009d08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009d0c:	4642      	mov	r2, r8
 8009d0e:	464b      	mov	r3, r9
 8009d10:	1891      	adds	r1, r2, r2
 8009d12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009d14:	415b      	adcs	r3, r3
 8009d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009d1c:	4641      	mov	r1, r8
 8009d1e:	eb12 0a01 	adds.w	sl, r2, r1
 8009d22:	4649      	mov	r1, r9
 8009d24:	eb43 0b01 	adc.w	fp, r3, r1
 8009d28:	f04f 0200 	mov.w	r2, #0
 8009d2c:	f04f 0300 	mov.w	r3, #0
 8009d30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009d34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009d38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d3c:	4692      	mov	sl, r2
 8009d3e:	469b      	mov	fp, r3
 8009d40:	4643      	mov	r3, r8
 8009d42:	eb1a 0303 	adds.w	r3, sl, r3
 8009d46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d4a:	464b      	mov	r3, r9
 8009d4c:	eb4b 0303 	adc.w	r3, fp, r3
 8009d50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009d64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009d68:	460b      	mov	r3, r1
 8009d6a:	18db      	adds	r3, r3, r3
 8009d6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d6e:	4613      	mov	r3, r2
 8009d70:	eb42 0303 	adc.w	r3, r2, r3
 8009d74:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009d7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009d7e:	f7f6 ff33 	bl	8000be8 <__aeabi_uldivmod>
 8009d82:	4602      	mov	r2, r0
 8009d84:	460b      	mov	r3, r1
 8009d86:	4611      	mov	r1, r2
 8009d88:	4b3b      	ldr	r3, [pc, #236]	@ (8009e78 <UART_SetConfig+0x2d4>)
 8009d8a:	fba3 2301 	umull	r2, r3, r3, r1
 8009d8e:	095b      	lsrs	r3, r3, #5
 8009d90:	2264      	movs	r2, #100	@ 0x64
 8009d92:	fb02 f303 	mul.w	r3, r2, r3
 8009d96:	1acb      	subs	r3, r1, r3
 8009d98:	00db      	lsls	r3, r3, #3
 8009d9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009d9e:	4b36      	ldr	r3, [pc, #216]	@ (8009e78 <UART_SetConfig+0x2d4>)
 8009da0:	fba3 2302 	umull	r2, r3, r3, r2
 8009da4:	095b      	lsrs	r3, r3, #5
 8009da6:	005b      	lsls	r3, r3, #1
 8009da8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009dac:	441c      	add	r4, r3
 8009dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009db2:	2200      	movs	r2, #0
 8009db4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009db8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009dbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009dc0:	4642      	mov	r2, r8
 8009dc2:	464b      	mov	r3, r9
 8009dc4:	1891      	adds	r1, r2, r2
 8009dc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009dc8:	415b      	adcs	r3, r3
 8009dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009dd0:	4641      	mov	r1, r8
 8009dd2:	1851      	adds	r1, r2, r1
 8009dd4:	6339      	str	r1, [r7, #48]	@ 0x30
 8009dd6:	4649      	mov	r1, r9
 8009dd8:	414b      	adcs	r3, r1
 8009dda:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ddc:	f04f 0200 	mov.w	r2, #0
 8009de0:	f04f 0300 	mov.w	r3, #0
 8009de4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009de8:	4659      	mov	r1, fp
 8009dea:	00cb      	lsls	r3, r1, #3
 8009dec:	4651      	mov	r1, sl
 8009dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009df2:	4651      	mov	r1, sl
 8009df4:	00ca      	lsls	r2, r1, #3
 8009df6:	4610      	mov	r0, r2
 8009df8:	4619      	mov	r1, r3
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	4642      	mov	r2, r8
 8009dfe:	189b      	adds	r3, r3, r2
 8009e00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e04:	464b      	mov	r3, r9
 8009e06:	460a      	mov	r2, r1
 8009e08:	eb42 0303 	adc.w	r3, r2, r3
 8009e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009e1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009e20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009e24:	460b      	mov	r3, r1
 8009e26:	18db      	adds	r3, r3, r3
 8009e28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	eb42 0303 	adc.w	r3, r2, r3
 8009e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009e36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009e3a:	f7f6 fed5 	bl	8000be8 <__aeabi_uldivmod>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	460b      	mov	r3, r1
 8009e42:	4b0d      	ldr	r3, [pc, #52]	@ (8009e78 <UART_SetConfig+0x2d4>)
 8009e44:	fba3 1302 	umull	r1, r3, r3, r2
 8009e48:	095b      	lsrs	r3, r3, #5
 8009e4a:	2164      	movs	r1, #100	@ 0x64
 8009e4c:	fb01 f303 	mul.w	r3, r1, r3
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	00db      	lsls	r3, r3, #3
 8009e54:	3332      	adds	r3, #50	@ 0x32
 8009e56:	4a08      	ldr	r2, [pc, #32]	@ (8009e78 <UART_SetConfig+0x2d4>)
 8009e58:	fba2 2303 	umull	r2, r3, r2, r3
 8009e5c:	095b      	lsrs	r3, r3, #5
 8009e5e:	f003 0207 	and.w	r2, r3, #7
 8009e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4422      	add	r2, r4
 8009e6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e6c:	e106      	b.n	800a07c <UART_SetConfig+0x4d8>
 8009e6e:	bf00      	nop
 8009e70:	40011000 	.word	0x40011000
 8009e74:	40011400 	.word	0x40011400
 8009e78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e80:	2200      	movs	r2, #0
 8009e82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009e8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009e8e:	4642      	mov	r2, r8
 8009e90:	464b      	mov	r3, r9
 8009e92:	1891      	adds	r1, r2, r2
 8009e94:	6239      	str	r1, [r7, #32]
 8009e96:	415b      	adcs	r3, r3
 8009e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e9e:	4641      	mov	r1, r8
 8009ea0:	1854      	adds	r4, r2, r1
 8009ea2:	4649      	mov	r1, r9
 8009ea4:	eb43 0501 	adc.w	r5, r3, r1
 8009ea8:	f04f 0200 	mov.w	r2, #0
 8009eac:	f04f 0300 	mov.w	r3, #0
 8009eb0:	00eb      	lsls	r3, r5, #3
 8009eb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009eb6:	00e2      	lsls	r2, r4, #3
 8009eb8:	4614      	mov	r4, r2
 8009eba:	461d      	mov	r5, r3
 8009ebc:	4643      	mov	r3, r8
 8009ebe:	18e3      	adds	r3, r4, r3
 8009ec0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009ec4:	464b      	mov	r3, r9
 8009ec6:	eb45 0303 	adc.w	r3, r5, r3
 8009eca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009eda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009ede:	f04f 0200 	mov.w	r2, #0
 8009ee2:	f04f 0300 	mov.w	r3, #0
 8009ee6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009eea:	4629      	mov	r1, r5
 8009eec:	008b      	lsls	r3, r1, #2
 8009eee:	4621      	mov	r1, r4
 8009ef0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ef4:	4621      	mov	r1, r4
 8009ef6:	008a      	lsls	r2, r1, #2
 8009ef8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009efc:	f7f6 fe74 	bl	8000be8 <__aeabi_uldivmod>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	4b60      	ldr	r3, [pc, #384]	@ (800a088 <UART_SetConfig+0x4e4>)
 8009f06:	fba3 2302 	umull	r2, r3, r3, r2
 8009f0a:	095b      	lsrs	r3, r3, #5
 8009f0c:	011c      	lsls	r4, r3, #4
 8009f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f12:	2200      	movs	r2, #0
 8009f14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009f1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009f20:	4642      	mov	r2, r8
 8009f22:	464b      	mov	r3, r9
 8009f24:	1891      	adds	r1, r2, r2
 8009f26:	61b9      	str	r1, [r7, #24]
 8009f28:	415b      	adcs	r3, r3
 8009f2a:	61fb      	str	r3, [r7, #28]
 8009f2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f30:	4641      	mov	r1, r8
 8009f32:	1851      	adds	r1, r2, r1
 8009f34:	6139      	str	r1, [r7, #16]
 8009f36:	4649      	mov	r1, r9
 8009f38:	414b      	adcs	r3, r1
 8009f3a:	617b      	str	r3, [r7, #20]
 8009f3c:	f04f 0200 	mov.w	r2, #0
 8009f40:	f04f 0300 	mov.w	r3, #0
 8009f44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f48:	4659      	mov	r1, fp
 8009f4a:	00cb      	lsls	r3, r1, #3
 8009f4c:	4651      	mov	r1, sl
 8009f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f52:	4651      	mov	r1, sl
 8009f54:	00ca      	lsls	r2, r1, #3
 8009f56:	4610      	mov	r0, r2
 8009f58:	4619      	mov	r1, r3
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	4642      	mov	r2, r8
 8009f5e:	189b      	adds	r3, r3, r2
 8009f60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f64:	464b      	mov	r3, r9
 8009f66:	460a      	mov	r2, r1
 8009f68:	eb42 0303 	adc.w	r3, r2, r3
 8009f6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009f7c:	f04f 0200 	mov.w	r2, #0
 8009f80:	f04f 0300 	mov.w	r3, #0
 8009f84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009f88:	4649      	mov	r1, r9
 8009f8a:	008b      	lsls	r3, r1, #2
 8009f8c:	4641      	mov	r1, r8
 8009f8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f92:	4641      	mov	r1, r8
 8009f94:	008a      	lsls	r2, r1, #2
 8009f96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009f9a:	f7f6 fe25 	bl	8000be8 <__aeabi_uldivmod>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	4611      	mov	r1, r2
 8009fa4:	4b38      	ldr	r3, [pc, #224]	@ (800a088 <UART_SetConfig+0x4e4>)
 8009fa6:	fba3 2301 	umull	r2, r3, r3, r1
 8009faa:	095b      	lsrs	r3, r3, #5
 8009fac:	2264      	movs	r2, #100	@ 0x64
 8009fae:	fb02 f303 	mul.w	r3, r2, r3
 8009fb2:	1acb      	subs	r3, r1, r3
 8009fb4:	011b      	lsls	r3, r3, #4
 8009fb6:	3332      	adds	r3, #50	@ 0x32
 8009fb8:	4a33      	ldr	r2, [pc, #204]	@ (800a088 <UART_SetConfig+0x4e4>)
 8009fba:	fba2 2303 	umull	r2, r3, r2, r3
 8009fbe:	095b      	lsrs	r3, r3, #5
 8009fc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009fc4:	441c      	add	r4, r3
 8009fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009fca:	2200      	movs	r2, #0
 8009fcc:	673b      	str	r3, [r7, #112]	@ 0x70
 8009fce:	677a      	str	r2, [r7, #116]	@ 0x74
 8009fd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009fd4:	4642      	mov	r2, r8
 8009fd6:	464b      	mov	r3, r9
 8009fd8:	1891      	adds	r1, r2, r2
 8009fda:	60b9      	str	r1, [r7, #8]
 8009fdc:	415b      	adcs	r3, r3
 8009fde:	60fb      	str	r3, [r7, #12]
 8009fe0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009fe4:	4641      	mov	r1, r8
 8009fe6:	1851      	adds	r1, r2, r1
 8009fe8:	6039      	str	r1, [r7, #0]
 8009fea:	4649      	mov	r1, r9
 8009fec:	414b      	adcs	r3, r1
 8009fee:	607b      	str	r3, [r7, #4]
 8009ff0:	f04f 0200 	mov.w	r2, #0
 8009ff4:	f04f 0300 	mov.w	r3, #0
 8009ff8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009ffc:	4659      	mov	r1, fp
 8009ffe:	00cb      	lsls	r3, r1, #3
 800a000:	4651      	mov	r1, sl
 800a002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a006:	4651      	mov	r1, sl
 800a008:	00ca      	lsls	r2, r1, #3
 800a00a:	4610      	mov	r0, r2
 800a00c:	4619      	mov	r1, r3
 800a00e:	4603      	mov	r3, r0
 800a010:	4642      	mov	r2, r8
 800a012:	189b      	adds	r3, r3, r2
 800a014:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a016:	464b      	mov	r3, r9
 800a018:	460a      	mov	r2, r1
 800a01a:	eb42 0303 	adc.w	r3, r2, r3
 800a01e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	663b      	str	r3, [r7, #96]	@ 0x60
 800a02a:	667a      	str	r2, [r7, #100]	@ 0x64
 800a02c:	f04f 0200 	mov.w	r2, #0
 800a030:	f04f 0300 	mov.w	r3, #0
 800a034:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a038:	4649      	mov	r1, r9
 800a03a:	008b      	lsls	r3, r1, #2
 800a03c:	4641      	mov	r1, r8
 800a03e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a042:	4641      	mov	r1, r8
 800a044:	008a      	lsls	r2, r1, #2
 800a046:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a04a:	f7f6 fdcd 	bl	8000be8 <__aeabi_uldivmod>
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	4b0d      	ldr	r3, [pc, #52]	@ (800a088 <UART_SetConfig+0x4e4>)
 800a054:	fba3 1302 	umull	r1, r3, r3, r2
 800a058:	095b      	lsrs	r3, r3, #5
 800a05a:	2164      	movs	r1, #100	@ 0x64
 800a05c:	fb01 f303 	mul.w	r3, r1, r3
 800a060:	1ad3      	subs	r3, r2, r3
 800a062:	011b      	lsls	r3, r3, #4
 800a064:	3332      	adds	r3, #50	@ 0x32
 800a066:	4a08      	ldr	r2, [pc, #32]	@ (800a088 <UART_SetConfig+0x4e4>)
 800a068:	fba2 2303 	umull	r2, r3, r2, r3
 800a06c:	095b      	lsrs	r3, r3, #5
 800a06e:	f003 020f 	and.w	r2, r3, #15
 800a072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4422      	add	r2, r4
 800a07a:	609a      	str	r2, [r3, #8]
}
 800a07c:	bf00      	nop
 800a07e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a082:	46bd      	mov	sp, r7
 800a084:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a088:	51eb851f 	.word	0x51eb851f

0800a08c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a08c:	b084      	sub	sp, #16
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	f107 001c 	add.w	r0, r7, #28
 800a09a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a09e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d123      	bne.n	800a0ee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a0ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a0ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d105      	bne.n	800a0e2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f001 fadc 	bl	800b6a0 <USB_CoreReset>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	73fb      	strb	r3, [r7, #15]
 800a0ec:	e01b      	b.n	800a126 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f001 fad0 	bl	800b6a0 <USB_CoreReset>
 800a100:	4603      	mov	r3, r0
 800a102:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a104:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d106      	bne.n	800a11a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a110:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	639a      	str	r2, [r3, #56]	@ 0x38
 800a118:	e005      	b.n	800a126 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a11e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a126:	7fbb      	ldrb	r3, [r7, #30]
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d10b      	bne.n	800a144 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	f043 0206 	orr.w	r2, r3, #6
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	f043 0220 	orr.w	r2, r3, #32
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a144:	7bfb      	ldrb	r3, [r7, #15]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a150:	b004      	add	sp, #16
 800a152:	4770      	bx	lr

0800a154 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a154:	b480      	push	{r7}
 800a156:	b087      	sub	sp, #28
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	4613      	mov	r3, r2
 800a160:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a162:	79fb      	ldrb	r3, [r7, #7]
 800a164:	2b02      	cmp	r3, #2
 800a166:	d165      	bne.n	800a234 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	4a41      	ldr	r2, [pc, #260]	@ (800a270 <USB_SetTurnaroundTime+0x11c>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d906      	bls.n	800a17e <USB_SetTurnaroundTime+0x2a>
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	4a40      	ldr	r2, [pc, #256]	@ (800a274 <USB_SetTurnaroundTime+0x120>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d202      	bcs.n	800a17e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a178:	230f      	movs	r3, #15
 800a17a:	617b      	str	r3, [r7, #20]
 800a17c:	e062      	b.n	800a244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	4a3c      	ldr	r2, [pc, #240]	@ (800a274 <USB_SetTurnaroundTime+0x120>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d306      	bcc.n	800a194 <USB_SetTurnaroundTime+0x40>
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	4a3b      	ldr	r2, [pc, #236]	@ (800a278 <USB_SetTurnaroundTime+0x124>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d202      	bcs.n	800a194 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a18e:	230e      	movs	r3, #14
 800a190:	617b      	str	r3, [r7, #20]
 800a192:	e057      	b.n	800a244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	4a38      	ldr	r2, [pc, #224]	@ (800a278 <USB_SetTurnaroundTime+0x124>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d306      	bcc.n	800a1aa <USB_SetTurnaroundTime+0x56>
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	4a37      	ldr	r2, [pc, #220]	@ (800a27c <USB_SetTurnaroundTime+0x128>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d202      	bcs.n	800a1aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a1a4:	230d      	movs	r3, #13
 800a1a6:	617b      	str	r3, [r7, #20]
 800a1a8:	e04c      	b.n	800a244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	4a33      	ldr	r2, [pc, #204]	@ (800a27c <USB_SetTurnaroundTime+0x128>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d306      	bcc.n	800a1c0 <USB_SetTurnaroundTime+0x6c>
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	4a32      	ldr	r2, [pc, #200]	@ (800a280 <USB_SetTurnaroundTime+0x12c>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d802      	bhi.n	800a1c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a1ba:	230c      	movs	r3, #12
 800a1bc:	617b      	str	r3, [r7, #20]
 800a1be:	e041      	b.n	800a244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	4a2f      	ldr	r2, [pc, #188]	@ (800a280 <USB_SetTurnaroundTime+0x12c>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d906      	bls.n	800a1d6 <USB_SetTurnaroundTime+0x82>
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	4a2e      	ldr	r2, [pc, #184]	@ (800a284 <USB_SetTurnaroundTime+0x130>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d802      	bhi.n	800a1d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a1d0:	230b      	movs	r3, #11
 800a1d2:	617b      	str	r3, [r7, #20]
 800a1d4:	e036      	b.n	800a244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	4a2a      	ldr	r2, [pc, #168]	@ (800a284 <USB_SetTurnaroundTime+0x130>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d906      	bls.n	800a1ec <USB_SetTurnaroundTime+0x98>
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	4a29      	ldr	r2, [pc, #164]	@ (800a288 <USB_SetTurnaroundTime+0x134>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d802      	bhi.n	800a1ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a1e6:	230a      	movs	r3, #10
 800a1e8:	617b      	str	r3, [r7, #20]
 800a1ea:	e02b      	b.n	800a244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	4a26      	ldr	r2, [pc, #152]	@ (800a288 <USB_SetTurnaroundTime+0x134>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d906      	bls.n	800a202 <USB_SetTurnaroundTime+0xae>
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	4a25      	ldr	r2, [pc, #148]	@ (800a28c <USB_SetTurnaroundTime+0x138>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d202      	bcs.n	800a202 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a1fc:	2309      	movs	r3, #9
 800a1fe:	617b      	str	r3, [r7, #20]
 800a200:	e020      	b.n	800a244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	4a21      	ldr	r2, [pc, #132]	@ (800a28c <USB_SetTurnaroundTime+0x138>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d306      	bcc.n	800a218 <USB_SetTurnaroundTime+0xc4>
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	4a20      	ldr	r2, [pc, #128]	@ (800a290 <USB_SetTurnaroundTime+0x13c>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d802      	bhi.n	800a218 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a212:	2308      	movs	r3, #8
 800a214:	617b      	str	r3, [r7, #20]
 800a216:	e015      	b.n	800a244 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	4a1d      	ldr	r2, [pc, #116]	@ (800a290 <USB_SetTurnaroundTime+0x13c>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d906      	bls.n	800a22e <USB_SetTurnaroundTime+0xda>
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	4a1c      	ldr	r2, [pc, #112]	@ (800a294 <USB_SetTurnaroundTime+0x140>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d202      	bcs.n	800a22e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a228:	2307      	movs	r3, #7
 800a22a:	617b      	str	r3, [r7, #20]
 800a22c:	e00a      	b.n	800a244 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a22e:	2306      	movs	r3, #6
 800a230:	617b      	str	r3, [r7, #20]
 800a232:	e007      	b.n	800a244 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a234:	79fb      	ldrb	r3, [r7, #7]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d102      	bne.n	800a240 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a23a:	2309      	movs	r3, #9
 800a23c:	617b      	str	r3, [r7, #20]
 800a23e:	e001      	b.n	800a244 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a240:	2309      	movs	r3, #9
 800a242:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	68da      	ldr	r2, [r3, #12]
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	029b      	lsls	r3, r3, #10
 800a258:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a25c:	431a      	orrs	r2, r3
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	371c      	adds	r7, #28
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	00d8acbf 	.word	0x00d8acbf
 800a274:	00e4e1c0 	.word	0x00e4e1c0
 800a278:	00f42400 	.word	0x00f42400
 800a27c:	01067380 	.word	0x01067380
 800a280:	011a499f 	.word	0x011a499f
 800a284:	01312cff 	.word	0x01312cff
 800a288:	014ca43f 	.word	0x014ca43f
 800a28c:	016e3600 	.word	0x016e3600
 800a290:	01a6ab1f 	.word	0x01a6ab1f
 800a294:	01e84800 	.word	0x01e84800

0800a298 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	f043 0201 	orr.w	r2, r3, #1
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b083      	sub	sp, #12
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	f023 0201 	bic.w	r2, r3, #1
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a2f8:	78fb      	ldrb	r3, [r7, #3]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d115      	bne.n	800a32a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a30a:	200a      	movs	r0, #10
 800a30c:	f7f8 fdae 	bl	8002e6c <HAL_Delay>
      ms += 10U;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	330a      	adds	r3, #10
 800a314:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f001 f933 	bl	800b582 <USB_GetMode>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d01e      	beq.n	800a360 <USB_SetCurrentMode+0x84>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2bc7      	cmp	r3, #199	@ 0xc7
 800a326:	d9f0      	bls.n	800a30a <USB_SetCurrentMode+0x2e>
 800a328:	e01a      	b.n	800a360 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a32a:	78fb      	ldrb	r3, [r7, #3]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d115      	bne.n	800a35c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a33c:	200a      	movs	r0, #10
 800a33e:	f7f8 fd95 	bl	8002e6c <HAL_Delay>
      ms += 10U;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	330a      	adds	r3, #10
 800a346:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f001 f91a 	bl	800b582 <USB_GetMode>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d005      	beq.n	800a360 <USB_SetCurrentMode+0x84>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2bc7      	cmp	r3, #199	@ 0xc7
 800a358:	d9f0      	bls.n	800a33c <USB_SetCurrentMode+0x60>
 800a35a:	e001      	b.n	800a360 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	e005      	b.n	800a36c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2bc8      	cmp	r3, #200	@ 0xc8
 800a364:	d101      	bne.n	800a36a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	e000      	b.n	800a36c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a374:	b084      	sub	sp, #16
 800a376:	b580      	push	{r7, lr}
 800a378:	b086      	sub	sp, #24
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
 800a37e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a382:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a386:	2300      	movs	r3, #0
 800a388:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a38e:	2300      	movs	r3, #0
 800a390:	613b      	str	r3, [r7, #16]
 800a392:	e009      	b.n	800a3a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	3340      	adds	r3, #64	@ 0x40
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	4413      	add	r3, r2
 800a39e:	2200      	movs	r2, #0
 800a3a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	613b      	str	r3, [r7, #16]
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	2b0e      	cmp	r3, #14
 800a3ac:	d9f2      	bls.n	800a394 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a3ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d11c      	bne.n	800a3f0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a3c4:	f043 0302 	orr.w	r3, r3, #2
 800a3c8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3ce:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	601a      	str	r2, [r3, #0]
 800a3ee:	e005      	b.n	800a3fc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a402:	461a      	mov	r2, r3
 800a404:	2300      	movs	r3, #0
 800a406:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a408:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d10d      	bne.n	800a42c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a410:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a414:	2b00      	cmp	r3, #0
 800a416:	d104      	bne.n	800a422 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a418:	2100      	movs	r1, #0
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f968 	bl	800a6f0 <USB_SetDevSpeed>
 800a420:	e008      	b.n	800a434 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a422:	2101      	movs	r1, #1
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 f963 	bl	800a6f0 <USB_SetDevSpeed>
 800a42a:	e003      	b.n	800a434 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a42c:	2103      	movs	r1, #3
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 f95e 	bl	800a6f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a434:	2110      	movs	r1, #16
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 f8fa 	bl	800a630 <USB_FlushTxFifo>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d001      	beq.n	800a446 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 f924 	bl	800a694 <USB_FlushRxFifo>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d001      	beq.n	800a456 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a45c:	461a      	mov	r2, r3
 800a45e:	2300      	movs	r3, #0
 800a460:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a468:	461a      	mov	r2, r3
 800a46a:	2300      	movs	r3, #0
 800a46c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a474:	461a      	mov	r2, r3
 800a476:	2300      	movs	r3, #0
 800a478:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a47a:	2300      	movs	r3, #0
 800a47c:	613b      	str	r3, [r7, #16]
 800a47e:	e043      	b.n	800a508 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	015a      	lsls	r2, r3, #5
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	4413      	add	r3, r2
 800a488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a492:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a496:	d118      	bne.n	800a4ca <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d10a      	bne.n	800a4b4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	015a      	lsls	r2, r3, #5
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a4b0:	6013      	str	r3, [r2, #0]
 800a4b2:	e013      	b.n	800a4dc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	015a      	lsls	r2, r3, #5
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a4c6:	6013      	str	r3, [r2, #0]
 800a4c8:	e008      	b.n	800a4dc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	015a      	lsls	r2, r3, #5
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	2300      	movs	r3, #0
 800a4da:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	015a      	lsls	r2, r3, #5
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	015a      	lsls	r2, r3, #5
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a500:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	3301      	adds	r3, #1
 800a506:	613b      	str	r3, [r7, #16]
 800a508:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a50c:	461a      	mov	r2, r3
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	4293      	cmp	r3, r2
 800a512:	d3b5      	bcc.n	800a480 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a514:	2300      	movs	r3, #0
 800a516:	613b      	str	r3, [r7, #16]
 800a518:	e043      	b.n	800a5a2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	015a      	lsls	r2, r3, #5
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	4413      	add	r3, r2
 800a522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a52c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a530:	d118      	bne.n	800a564 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10a      	bne.n	800a54e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	015a      	lsls	r2, r3, #5
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	4413      	add	r3, r2
 800a540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a544:	461a      	mov	r2, r3
 800a546:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a54a:	6013      	str	r3, [r2, #0]
 800a54c:	e013      	b.n	800a576 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	015a      	lsls	r2, r3, #5
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	4413      	add	r3, r2
 800a556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a55a:	461a      	mov	r2, r3
 800a55c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a560:	6013      	str	r3, [r2, #0]
 800a562:	e008      	b.n	800a576 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	015a      	lsls	r2, r3, #5
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	4413      	add	r3, r2
 800a56c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a570:	461a      	mov	r2, r3
 800a572:	2300      	movs	r3, #0
 800a574:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	015a      	lsls	r2, r3, #5
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	4413      	add	r3, r2
 800a57e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a582:	461a      	mov	r2, r3
 800a584:	2300      	movs	r3, #0
 800a586:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	015a      	lsls	r2, r3, #5
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	4413      	add	r3, r2
 800a590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a594:	461a      	mov	r2, r3
 800a596:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a59a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	613b      	str	r3, [r7, #16]
 800a5a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d3b5      	bcc.n	800a51a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	68fa      	ldr	r2, [r7, #12]
 800a5b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a5bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5c0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a5ce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a5d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d105      	bne.n	800a5e4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	699b      	ldr	r3, [r3, #24]
 800a5dc:	f043 0210 	orr.w	r2, r3, #16
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	699a      	ldr	r2, [r3, #24]
 800a5e8:	4b10      	ldr	r3, [pc, #64]	@ (800a62c <USB_DevInit+0x2b8>)
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a5f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d005      	beq.n	800a604 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	699b      	ldr	r3, [r3, #24]
 800a5fc:	f043 0208 	orr.w	r2, r3, #8
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a604:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d107      	bne.n	800a61c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	699b      	ldr	r3, [r3, #24]
 800a610:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a614:	f043 0304 	orr.w	r3, r3, #4
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a61c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3718      	adds	r7, #24
 800a622:	46bd      	mov	sp, r7
 800a624:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a628:	b004      	add	sp, #16
 800a62a:	4770      	bx	lr
 800a62c:	803c3800 	.word	0x803c3800

0800a630 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a63a:	2300      	movs	r3, #0
 800a63c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	3301      	adds	r3, #1
 800a642:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a64a:	d901      	bls.n	800a650 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a64c:	2303      	movs	r3, #3
 800a64e:	e01b      	b.n	800a688 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	691b      	ldr	r3, [r3, #16]
 800a654:	2b00      	cmp	r3, #0
 800a656:	daf2      	bge.n	800a63e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a658:	2300      	movs	r3, #0
 800a65a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	019b      	lsls	r3, r3, #6
 800a660:	f043 0220 	orr.w	r2, r3, #32
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	3301      	adds	r3, #1
 800a66c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a674:	d901      	bls.n	800a67a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a676:	2303      	movs	r3, #3
 800a678:	e006      	b.n	800a688 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	f003 0320 	and.w	r3, r3, #32
 800a682:	2b20      	cmp	r3, #32
 800a684:	d0f0      	beq.n	800a668 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a686:	2300      	movs	r3, #0
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3714      	adds	r7, #20
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a69c:	2300      	movs	r3, #0
 800a69e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a6ac:	d901      	bls.n	800a6b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a6ae:	2303      	movs	r3, #3
 800a6b0:	e018      	b.n	800a6e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	daf2      	bge.n	800a6a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2210      	movs	r2, #16
 800a6c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a6d0:	d901      	bls.n	800a6d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	e006      	b.n	800a6e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	691b      	ldr	r3, [r3, #16]
 800a6da:	f003 0310 	and.w	r3, r3, #16
 800a6de:	2b10      	cmp	r3, #16
 800a6e0:	d0f0      	beq.n	800a6c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3714      	adds	r7, #20
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	78fb      	ldrb	r3, [r7, #3]
 800a70a:	68f9      	ldr	r1, [r7, #12]
 800a70c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a710:	4313      	orrs	r3, r2
 800a712:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr

0800a722 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a722:	b480      	push	{r7}
 800a724:	b087      	sub	sp, #28
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	f003 0306 	and.w	r3, r3, #6
 800a73a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d102      	bne.n	800a748 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a742:	2300      	movs	r3, #0
 800a744:	75fb      	strb	r3, [r7, #23]
 800a746:	e00a      	b.n	800a75e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2b02      	cmp	r3, #2
 800a74c:	d002      	beq.n	800a754 <USB_GetDevSpeed+0x32>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2b06      	cmp	r3, #6
 800a752:	d102      	bne.n	800a75a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a754:	2302      	movs	r3, #2
 800a756:	75fb      	strb	r3, [r7, #23]
 800a758:	e001      	b.n	800a75e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a75a:	230f      	movs	r3, #15
 800a75c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a75e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a760:	4618      	mov	r0, r3
 800a762:	371c      	adds	r7, #28
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	785b      	ldrb	r3, [r3, #1]
 800a784:	2b01      	cmp	r3, #1
 800a786:	d13a      	bne.n	800a7fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a78e:	69da      	ldr	r2, [r3, #28]
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	f003 030f 	and.w	r3, r3, #15
 800a798:	2101      	movs	r1, #1
 800a79a:	fa01 f303 	lsl.w	r3, r1, r3
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	68f9      	ldr	r1, [r7, #12]
 800a7a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	015a      	lsls	r2, r3, #5
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d155      	bne.n	800a86c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	015a      	lsls	r2, r3, #5
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	791b      	ldrb	r3, [r3, #4]
 800a7da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a7dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	059b      	lsls	r3, r3, #22
 800a7e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	68ba      	ldr	r2, [r7, #8]
 800a7e8:	0151      	lsls	r1, r2, #5
 800a7ea:	68fa      	ldr	r2, [r7, #12]
 800a7ec:	440a      	add	r2, r1
 800a7ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7fa:	6013      	str	r3, [r2, #0]
 800a7fc:	e036      	b.n	800a86c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a804:	69da      	ldr	r2, [r3, #28]
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	f003 030f 	and.w	r3, r3, #15
 800a80e:	2101      	movs	r1, #1
 800a810:	fa01 f303 	lsl.w	r3, r1, r3
 800a814:	041b      	lsls	r3, r3, #16
 800a816:	68f9      	ldr	r1, [r7, #12]
 800a818:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a81c:	4313      	orrs	r3, r2
 800a81e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	015a      	lsls	r2, r3, #5
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	4413      	add	r3, r2
 800a828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a832:	2b00      	cmp	r3, #0
 800a834:	d11a      	bne.n	800a86c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	015a      	lsls	r2, r3, #5
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	4413      	add	r3, r2
 800a83e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	791b      	ldrb	r3, [r3, #4]
 800a850:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a852:	430b      	orrs	r3, r1
 800a854:	4313      	orrs	r3, r2
 800a856:	68ba      	ldr	r2, [r7, #8]
 800a858:	0151      	lsls	r1, r2, #5
 800a85a:	68fa      	ldr	r2, [r7, #12]
 800a85c:	440a      	add	r2, r1
 800a85e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a86a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a86c:	2300      	movs	r3, #0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3714      	adds	r7, #20
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr
	...

0800a87c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b085      	sub	sp, #20
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	785b      	ldrb	r3, [r3, #1]
 800a894:	2b01      	cmp	r3, #1
 800a896:	d161      	bne.n	800a95c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	015a      	lsls	r2, r3, #5
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	4413      	add	r3, r2
 800a8a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8ae:	d11f      	bne.n	800a8f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	015a      	lsls	r2, r3, #5
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	0151      	lsls	r1, r2, #5
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	440a      	add	r2, r1
 800a8c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a8ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	015a      	lsls	r2, r3, #5
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	68ba      	ldr	r2, [r7, #8]
 800a8e0:	0151      	lsls	r1, r2, #5
 800a8e2:	68fa      	ldr	r2, [r7, #12]
 800a8e4:	440a      	add	r2, r1
 800a8e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a8ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	f003 030f 	and.w	r3, r3, #15
 800a900:	2101      	movs	r1, #1
 800a902:	fa01 f303 	lsl.w	r3, r1, r3
 800a906:	b29b      	uxth	r3, r3
 800a908:	43db      	mvns	r3, r3
 800a90a:	68f9      	ldr	r1, [r7, #12]
 800a90c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a910:	4013      	ands	r3, r2
 800a912:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a91a:	69da      	ldr	r2, [r3, #28]
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	f003 030f 	and.w	r3, r3, #15
 800a924:	2101      	movs	r1, #1
 800a926:	fa01 f303 	lsl.w	r3, r1, r3
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	43db      	mvns	r3, r3
 800a92e:	68f9      	ldr	r1, [r7, #12]
 800a930:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a934:	4013      	ands	r3, r2
 800a936:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	015a      	lsls	r2, r3, #5
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	4413      	add	r3, r2
 800a940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	0159      	lsls	r1, r3, #5
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	440b      	add	r3, r1
 800a94e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a952:	4619      	mov	r1, r3
 800a954:	4b35      	ldr	r3, [pc, #212]	@ (800aa2c <USB_DeactivateEndpoint+0x1b0>)
 800a956:	4013      	ands	r3, r2
 800a958:	600b      	str	r3, [r1, #0]
 800a95a:	e060      	b.n	800aa1e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	015a      	lsls	r2, r3, #5
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	4413      	add	r3, r2
 800a964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a96e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a972:	d11f      	bne.n	800a9b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	015a      	lsls	r2, r3, #5
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	4413      	add	r3, r2
 800a97c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68ba      	ldr	r2, [r7, #8]
 800a984:	0151      	lsls	r1, r2, #5
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	440a      	add	r2, r1
 800a98a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a98e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a992:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	015a      	lsls	r2, r3, #5
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	4413      	add	r3, r2
 800a99c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68ba      	ldr	r2, [r7, #8]
 800a9a4:	0151      	lsls	r1, r2, #5
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	440a      	add	r2, r1
 800a9aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a9b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	f003 030f 	and.w	r3, r3, #15
 800a9c4:	2101      	movs	r1, #1
 800a9c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a9ca:	041b      	lsls	r3, r3, #16
 800a9cc:	43db      	mvns	r3, r3
 800a9ce:	68f9      	ldr	r1, [r7, #12]
 800a9d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a9d4:	4013      	ands	r3, r2
 800a9d6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9de:	69da      	ldr	r2, [r3, #28]
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	f003 030f 	and.w	r3, r3, #15
 800a9e8:	2101      	movs	r1, #1
 800a9ea:	fa01 f303 	lsl.w	r3, r1, r3
 800a9ee:	041b      	lsls	r3, r3, #16
 800a9f0:	43db      	mvns	r3, r3
 800a9f2:	68f9      	ldr	r1, [r7, #12]
 800a9f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a9f8:	4013      	ands	r3, r2
 800a9fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	015a      	lsls	r2, r3, #5
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	4413      	add	r3, r2
 800aa04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	0159      	lsls	r1, r3, #5
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	440b      	add	r3, r1
 800aa12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa16:	4619      	mov	r1, r3
 800aa18:	4b05      	ldr	r3, [pc, #20]	@ (800aa30 <USB_DeactivateEndpoint+0x1b4>)
 800aa1a:	4013      	ands	r3, r2
 800aa1c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800aa1e:	2300      	movs	r3, #0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3714      	adds	r7, #20
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr
 800aa2c:	ec337800 	.word	0xec337800
 800aa30:	eff37800 	.word	0xeff37800

0800aa34 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b08a      	sub	sp, #40	@ 0x28
 800aa38:	af02      	add	r7, sp, #8
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	4613      	mov	r3, r2
 800aa40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	785b      	ldrb	r3, [r3, #1]
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	f040 817a 	bne.w	800ad4a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d132      	bne.n	800aac4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	015a      	lsls	r2, r3, #5
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	4413      	add	r3, r2
 800aa66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	69ba      	ldr	r2, [r7, #24]
 800aa6e:	0151      	lsls	r1, r2, #5
 800aa70:	69fa      	ldr	r2, [r7, #28]
 800aa72:	440a      	add	r2, r1
 800aa74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa78:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800aa7c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800aa80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	015a      	lsls	r2, r3, #5
 800aa86:	69fb      	ldr	r3, [r7, #28]
 800aa88:	4413      	add	r3, r2
 800aa8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa8e:	691b      	ldr	r3, [r3, #16]
 800aa90:	69ba      	ldr	r2, [r7, #24]
 800aa92:	0151      	lsls	r1, r2, #5
 800aa94:	69fa      	ldr	r2, [r7, #28]
 800aa96:	440a      	add	r2, r1
 800aa98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aaa0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aaa2:	69bb      	ldr	r3, [r7, #24]
 800aaa4:	015a      	lsls	r2, r3, #5
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaae:	691b      	ldr	r3, [r3, #16]
 800aab0:	69ba      	ldr	r2, [r7, #24]
 800aab2:	0151      	lsls	r1, r2, #5
 800aab4:	69fa      	ldr	r2, [r7, #28]
 800aab6:	440a      	add	r2, r1
 800aab8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aabc:	0cdb      	lsrs	r3, r3, #19
 800aabe:	04db      	lsls	r3, r3, #19
 800aac0:	6113      	str	r3, [r2, #16]
 800aac2:	e092      	b.n	800abea <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	015a      	lsls	r2, r3, #5
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	4413      	add	r3, r2
 800aacc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	69ba      	ldr	r2, [r7, #24]
 800aad4:	0151      	lsls	r1, r2, #5
 800aad6:	69fa      	ldr	r2, [r7, #28]
 800aad8:	440a      	add	r2, r1
 800aada:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aade:	0cdb      	lsrs	r3, r3, #19
 800aae0:	04db      	lsls	r3, r3, #19
 800aae2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aae4:	69bb      	ldr	r3, [r7, #24]
 800aae6:	015a      	lsls	r2, r3, #5
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	4413      	add	r3, r2
 800aaec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	69ba      	ldr	r2, [r7, #24]
 800aaf4:	0151      	lsls	r1, r2, #5
 800aaf6:	69fa      	ldr	r2, [r7, #28]
 800aaf8:	440a      	add	r2, r1
 800aafa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aafe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ab02:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ab06:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d11a      	bne.n	800ab44 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	691a      	ldr	r2, [r3, #16]
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d903      	bls.n	800ab22 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	689a      	ldr	r2, [r3, #8]
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	015a      	lsls	r2, r3, #5
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	4413      	add	r3, r2
 800ab2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	69ba      	ldr	r2, [r7, #24]
 800ab32:	0151      	lsls	r1, r2, #5
 800ab34:	69fa      	ldr	r2, [r7, #28]
 800ab36:	440a      	add	r2, r1
 800ab38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ab40:	6113      	str	r3, [r2, #16]
 800ab42:	e01b      	b.n	800ab7c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	015a      	lsls	r2, r3, #5
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab50:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	6919      	ldr	r1, [r3, #16]
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	440b      	add	r3, r1
 800ab5c:	1e59      	subs	r1, r3, #1
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	689b      	ldr	r3, [r3, #8]
 800ab62:	fbb1 f3f3 	udiv	r3, r1, r3
 800ab66:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ab68:	4ba2      	ldr	r3, [pc, #648]	@ (800adf4 <USB_EPStartXfer+0x3c0>)
 800ab6a:	400b      	ands	r3, r1
 800ab6c:	69b9      	ldr	r1, [r7, #24]
 800ab6e:	0148      	lsls	r0, r1, #5
 800ab70:	69f9      	ldr	r1, [r7, #28]
 800ab72:	4401      	add	r1, r0
 800ab74:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	015a      	lsls	r2, r3, #5
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	4413      	add	r3, r2
 800ab84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab88:	691a      	ldr	r2, [r3, #16]
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	691b      	ldr	r3, [r3, #16]
 800ab8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab92:	69b9      	ldr	r1, [r7, #24]
 800ab94:	0148      	lsls	r0, r1, #5
 800ab96:	69f9      	ldr	r1, [r7, #28]
 800ab98:	4401      	add	r1, r0
 800ab9a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	791b      	ldrb	r3, [r3, #4]
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d11f      	bne.n	800abea <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800abaa:	69bb      	ldr	r3, [r7, #24]
 800abac:	015a      	lsls	r2, r3, #5
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	4413      	add	r3, r2
 800abb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abb6:	691b      	ldr	r3, [r3, #16]
 800abb8:	69ba      	ldr	r2, [r7, #24]
 800abba:	0151      	lsls	r1, r2, #5
 800abbc:	69fa      	ldr	r2, [r7, #28]
 800abbe:	440a      	add	r2, r1
 800abc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abc4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800abc8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	015a      	lsls	r2, r3, #5
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	4413      	add	r3, r2
 800abd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abd6:	691b      	ldr	r3, [r3, #16]
 800abd8:	69ba      	ldr	r2, [r7, #24]
 800abda:	0151      	lsls	r1, r2, #5
 800abdc:	69fa      	ldr	r2, [r7, #28]
 800abde:	440a      	add	r2, r1
 800abe0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abe4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800abe8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800abea:	79fb      	ldrb	r3, [r7, #7]
 800abec:	2b01      	cmp	r3, #1
 800abee:	d14b      	bne.n	800ac88 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	69db      	ldr	r3, [r3, #28]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d009      	beq.n	800ac0c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	015a      	lsls	r2, r3, #5
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	4413      	add	r3, r2
 800ac00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac04:	461a      	mov	r2, r3
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	69db      	ldr	r3, [r3, #28]
 800ac0a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	791b      	ldrb	r3, [r3, #4]
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d128      	bne.n	800ac66 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d110      	bne.n	800ac46 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	015a      	lsls	r2, r3, #5
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	69ba      	ldr	r2, [r7, #24]
 800ac34:	0151      	lsls	r1, r2, #5
 800ac36:	69fa      	ldr	r2, [r7, #28]
 800ac38:	440a      	add	r2, r1
 800ac3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac3e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ac42:	6013      	str	r3, [r2, #0]
 800ac44:	e00f      	b.n	800ac66 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	015a      	lsls	r2, r3, #5
 800ac4a:	69fb      	ldr	r3, [r7, #28]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	69ba      	ldr	r2, [r7, #24]
 800ac56:	0151      	lsls	r1, r2, #5
 800ac58:	69fa      	ldr	r2, [r7, #28]
 800ac5a:	440a      	add	r2, r1
 800ac5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac64:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	015a      	lsls	r2, r3, #5
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	69ba      	ldr	r2, [r7, #24]
 800ac76:	0151      	lsls	r1, r2, #5
 800ac78:	69fa      	ldr	r2, [r7, #28]
 800ac7a:	440a      	add	r2, r1
 800ac7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac80:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ac84:	6013      	str	r3, [r2, #0]
 800ac86:	e165      	b.n	800af54 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	015a      	lsls	r2, r3, #5
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	4413      	add	r3, r2
 800ac90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	69ba      	ldr	r2, [r7, #24]
 800ac98:	0151      	lsls	r1, r2, #5
 800ac9a:	69fa      	ldr	r2, [r7, #28]
 800ac9c:	440a      	add	r2, r1
 800ac9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aca2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800aca6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	791b      	ldrb	r3, [r3, #4]
 800acac:	2b01      	cmp	r3, #1
 800acae:	d015      	beq.n	800acdc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	691b      	ldr	r3, [r3, #16]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f000 814d 	beq.w	800af54 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800acba:	69fb      	ldr	r3, [r7, #28]
 800acbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	f003 030f 	and.w	r3, r3, #15
 800acca:	2101      	movs	r1, #1
 800accc:	fa01 f303 	lsl.w	r3, r1, r3
 800acd0:	69f9      	ldr	r1, [r7, #28]
 800acd2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800acd6:	4313      	orrs	r3, r2
 800acd8:	634b      	str	r3, [r1, #52]	@ 0x34
 800acda:	e13b      	b.n	800af54 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d110      	bne.n	800ad0e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	015a      	lsls	r2, r3, #5
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	4413      	add	r3, r2
 800acf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	69ba      	ldr	r2, [r7, #24]
 800acfc:	0151      	lsls	r1, r2, #5
 800acfe:	69fa      	ldr	r2, [r7, #28]
 800ad00:	440a      	add	r2, r1
 800ad02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad06:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ad0a:	6013      	str	r3, [r2, #0]
 800ad0c:	e00f      	b.n	800ad2e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	015a      	lsls	r2, r3, #5
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	4413      	add	r3, r2
 800ad16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	69ba      	ldr	r2, [r7, #24]
 800ad1e:	0151      	lsls	r1, r2, #5
 800ad20:	69fa      	ldr	r2, [r7, #28]
 800ad22:	440a      	add	r2, r1
 800ad24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad2c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	68d9      	ldr	r1, [r3, #12]
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	781a      	ldrb	r2, [r3, #0]
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	691b      	ldr	r3, [r3, #16]
 800ad3a:	b298      	uxth	r0, r3
 800ad3c:	79fb      	ldrb	r3, [r7, #7]
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	4603      	mov	r3, r0
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f000 f9b8 	bl	800b0b8 <USB_WritePacket>
 800ad48:	e104      	b.n	800af54 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	015a      	lsls	r2, r3, #5
 800ad4e:	69fb      	ldr	r3, [r7, #28]
 800ad50:	4413      	add	r3, r2
 800ad52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	69ba      	ldr	r2, [r7, #24]
 800ad5a:	0151      	lsls	r1, r2, #5
 800ad5c:	69fa      	ldr	r2, [r7, #28]
 800ad5e:	440a      	add	r2, r1
 800ad60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad64:	0cdb      	lsrs	r3, r3, #19
 800ad66:	04db      	lsls	r3, r3, #19
 800ad68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ad6a:	69bb      	ldr	r3, [r7, #24]
 800ad6c:	015a      	lsls	r2, r3, #5
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	4413      	add	r3, r2
 800ad72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad76:	691b      	ldr	r3, [r3, #16]
 800ad78:	69ba      	ldr	r2, [r7, #24]
 800ad7a:	0151      	lsls	r1, r2, #5
 800ad7c:	69fa      	ldr	r2, [r7, #28]
 800ad7e:	440a      	add	r2, r1
 800ad80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad84:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ad88:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ad8c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800ad8e:	69bb      	ldr	r3, [r7, #24]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d131      	bne.n	800adf8 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	691b      	ldr	r3, [r3, #16]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d003      	beq.n	800ada4 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	689a      	ldr	r2, [r3, #8]
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	689a      	ldr	r2, [r3, #8]
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	015a      	lsls	r2, r3, #5
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	4413      	add	r3, r2
 800adb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adb8:	691a      	ldr	r2, [r3, #16]
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	6a1b      	ldr	r3, [r3, #32]
 800adbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adc2:	69b9      	ldr	r1, [r7, #24]
 800adc4:	0148      	lsls	r0, r1, #5
 800adc6:	69f9      	ldr	r1, [r7, #28]
 800adc8:	4401      	add	r1, r0
 800adca:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800adce:	4313      	orrs	r3, r2
 800add0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	015a      	lsls	r2, r3, #5
 800add6:	69fb      	ldr	r3, [r7, #28]
 800add8:	4413      	add	r3, r2
 800adda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adde:	691b      	ldr	r3, [r3, #16]
 800ade0:	69ba      	ldr	r2, [r7, #24]
 800ade2:	0151      	lsls	r1, r2, #5
 800ade4:	69fa      	ldr	r2, [r7, #28]
 800ade6:	440a      	add	r2, r1
 800ade8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800adf0:	6113      	str	r3, [r2, #16]
 800adf2:	e061      	b.n	800aeb8 <USB_EPStartXfer+0x484>
 800adf4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d123      	bne.n	800ae48 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	015a      	lsls	r2, r3, #5
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	4413      	add	r3, r2
 800ae08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae0c:	691a      	ldr	r2, [r3, #16]
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae16:	69b9      	ldr	r1, [r7, #24]
 800ae18:	0148      	lsls	r0, r1, #5
 800ae1a:	69f9      	ldr	r1, [r7, #28]
 800ae1c:	4401      	add	r1, r0
 800ae1e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ae22:	4313      	orrs	r3, r2
 800ae24:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	015a      	lsls	r2, r3, #5
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae32:	691b      	ldr	r3, [r3, #16]
 800ae34:	69ba      	ldr	r2, [r7, #24]
 800ae36:	0151      	lsls	r1, r2, #5
 800ae38:	69fa      	ldr	r2, [r7, #28]
 800ae3a:	440a      	add	r2, r1
 800ae3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ae44:	6113      	str	r3, [r2, #16]
 800ae46:	e037      	b.n	800aeb8 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	691a      	ldr	r2, [r3, #16]
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	4413      	add	r3, r2
 800ae52:	1e5a      	subs	r2, r3, #1
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae5c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	8afa      	ldrh	r2, [r7, #22]
 800ae64:	fb03 f202 	mul.w	r2, r3, r2
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	015a      	lsls	r2, r3, #5
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	4413      	add	r3, r2
 800ae74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae78:	691a      	ldr	r2, [r3, #16]
 800ae7a:	8afb      	ldrh	r3, [r7, #22]
 800ae7c:	04d9      	lsls	r1, r3, #19
 800ae7e:	4b38      	ldr	r3, [pc, #224]	@ (800af60 <USB_EPStartXfer+0x52c>)
 800ae80:	400b      	ands	r3, r1
 800ae82:	69b9      	ldr	r1, [r7, #24]
 800ae84:	0148      	lsls	r0, r1, #5
 800ae86:	69f9      	ldr	r1, [r7, #28]
 800ae88:	4401      	add	r1, r0
 800ae8a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	015a      	lsls	r2, r3, #5
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	4413      	add	r3, r2
 800ae9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae9e:	691a      	ldr	r2, [r3, #16]
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	6a1b      	ldr	r3, [r3, #32]
 800aea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aea8:	69b9      	ldr	r1, [r7, #24]
 800aeaa:	0148      	lsls	r0, r1, #5
 800aeac:	69f9      	ldr	r1, [r7, #28]
 800aeae:	4401      	add	r1, r0
 800aeb0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800aeb8:	79fb      	ldrb	r3, [r7, #7]
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d10d      	bne.n	800aeda <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d009      	beq.n	800aeda <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	68d9      	ldr	r1, [r3, #12]
 800aeca:	69bb      	ldr	r3, [r7, #24]
 800aecc:	015a      	lsls	r2, r3, #5
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	4413      	add	r3, r2
 800aed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aed6:	460a      	mov	r2, r1
 800aed8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	791b      	ldrb	r3, [r3, #4]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d128      	bne.n	800af34 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d110      	bne.n	800af14 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800aef2:	69bb      	ldr	r3, [r7, #24]
 800aef4:	015a      	lsls	r2, r3, #5
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	4413      	add	r3, r2
 800aefa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	69ba      	ldr	r2, [r7, #24]
 800af02:	0151      	lsls	r1, r2, #5
 800af04:	69fa      	ldr	r2, [r7, #28]
 800af06:	440a      	add	r2, r1
 800af08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af0c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800af10:	6013      	str	r3, [r2, #0]
 800af12:	e00f      	b.n	800af34 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	015a      	lsls	r2, r3, #5
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	4413      	add	r3, r2
 800af1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	69ba      	ldr	r2, [r7, #24]
 800af24:	0151      	lsls	r1, r2, #5
 800af26:	69fa      	ldr	r2, [r7, #28]
 800af28:	440a      	add	r2, r1
 800af2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af32:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800af34:	69bb      	ldr	r3, [r7, #24]
 800af36:	015a      	lsls	r2, r3, #5
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	4413      	add	r3, r2
 800af3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	69ba      	ldr	r2, [r7, #24]
 800af44:	0151      	lsls	r1, r2, #5
 800af46:	69fa      	ldr	r2, [r7, #28]
 800af48:	440a      	add	r2, r1
 800af4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af4e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800af52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3720      	adds	r7, #32
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	1ff80000 	.word	0x1ff80000

0800af64 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800af64:	b480      	push	{r7}
 800af66:	b087      	sub	sp, #28
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800af6e:	2300      	movs	r3, #0
 800af70:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800af72:	2300      	movs	r3, #0
 800af74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	785b      	ldrb	r3, [r3, #1]
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d14a      	bne.n	800b018 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	015a      	lsls	r2, r3, #5
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	4413      	add	r3, r2
 800af8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af9a:	f040 8086 	bne.w	800b0aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	015a      	lsls	r2, r3, #5
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	4413      	add	r3, r2
 800afa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	683a      	ldr	r2, [r7, #0]
 800afb0:	7812      	ldrb	r2, [r2, #0]
 800afb2:	0151      	lsls	r1, r2, #5
 800afb4:	693a      	ldr	r2, [r7, #16]
 800afb6:	440a      	add	r2, r1
 800afb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afbc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800afc0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	015a      	lsls	r2, r3, #5
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	4413      	add	r3, r2
 800afcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	683a      	ldr	r2, [r7, #0]
 800afd4:	7812      	ldrb	r2, [r2, #0]
 800afd6:	0151      	lsls	r1, r2, #5
 800afd8:	693a      	ldr	r2, [r7, #16]
 800afda:	440a      	add	r2, r1
 800afdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afe0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800afe4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	3301      	adds	r3, #1
 800afea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f242 7210 	movw	r2, #10000	@ 0x2710
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d902      	bls.n	800affc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	75fb      	strb	r3, [r7, #23]
          break;
 800affa:	e056      	b.n	800b0aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	015a      	lsls	r2, r3, #5
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	4413      	add	r3, r2
 800b006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b010:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b014:	d0e7      	beq.n	800afe6 <USB_EPStopXfer+0x82>
 800b016:	e048      	b.n	800b0aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	015a      	lsls	r2, r3, #5
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	4413      	add	r3, r2
 800b022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b02c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b030:	d13b      	bne.n	800b0aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	015a      	lsls	r2, r3, #5
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	4413      	add	r3, r2
 800b03c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	683a      	ldr	r2, [r7, #0]
 800b044:	7812      	ldrb	r2, [r2, #0]
 800b046:	0151      	lsls	r1, r2, #5
 800b048:	693a      	ldr	r2, [r7, #16]
 800b04a:	440a      	add	r2, r1
 800b04c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b050:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b054:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	015a      	lsls	r2, r3, #5
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	4413      	add	r3, r2
 800b060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	683a      	ldr	r2, [r7, #0]
 800b068:	7812      	ldrb	r2, [r2, #0]
 800b06a:	0151      	lsls	r1, r2, #5
 800b06c:	693a      	ldr	r2, [r7, #16]
 800b06e:	440a      	add	r2, r1
 800b070:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b074:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b078:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	3301      	adds	r3, #1
 800b07e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b086:	4293      	cmp	r3, r2
 800b088:	d902      	bls.n	800b090 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	75fb      	strb	r3, [r7, #23]
          break;
 800b08e:	e00c      	b.n	800b0aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	015a      	lsls	r2, r3, #5
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	4413      	add	r3, r2
 800b09a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b0a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b0a8:	d0e7      	beq.n	800b07a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b0aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	371c      	adds	r7, #28
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b089      	sub	sp, #36	@ 0x24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	4611      	mov	r1, r2
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	71fb      	strb	r3, [r7, #7]
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b0d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d123      	bne.n	800b126 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b0de:	88bb      	ldrh	r3, [r7, #4]
 800b0e0:	3303      	adds	r3, #3
 800b0e2:	089b      	lsrs	r3, r3, #2
 800b0e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	61bb      	str	r3, [r7, #24]
 800b0ea:	e018      	b.n	800b11e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b0ec:	79fb      	ldrb	r3, [r7, #7]
 800b0ee:	031a      	lsls	r2, r3, #12
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b100:	69fb      	ldr	r3, [r7, #28]
 800b102:	3301      	adds	r3, #1
 800b104:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	3301      	adds	r3, #1
 800b10a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	3301      	adds	r3, #1
 800b110:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b112:	69fb      	ldr	r3, [r7, #28]
 800b114:	3301      	adds	r3, #1
 800b116:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	3301      	adds	r3, #1
 800b11c:	61bb      	str	r3, [r7, #24]
 800b11e:	69ba      	ldr	r2, [r7, #24]
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	429a      	cmp	r2, r3
 800b124:	d3e2      	bcc.n	800b0ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3724      	adds	r7, #36	@ 0x24
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b134:	b480      	push	{r7}
 800b136:	b08b      	sub	sp, #44	@ 0x2c
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	4613      	mov	r3, r2
 800b140:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b14a:	88fb      	ldrh	r3, [r7, #6]
 800b14c:	089b      	lsrs	r3, r3, #2
 800b14e:	b29b      	uxth	r3, r3
 800b150:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b152:	88fb      	ldrh	r3, [r7, #6]
 800b154:	f003 0303 	and.w	r3, r3, #3
 800b158:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b15a:	2300      	movs	r3, #0
 800b15c:	623b      	str	r3, [r7, #32]
 800b15e:	e014      	b.n	800b18a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b16a:	601a      	str	r2, [r3, #0]
    pDest++;
 800b16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b16e:	3301      	adds	r3, #1
 800b170:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b174:	3301      	adds	r3, #1
 800b176:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17a:	3301      	adds	r3, #1
 800b17c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b180:	3301      	adds	r3, #1
 800b182:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b184:	6a3b      	ldr	r3, [r7, #32]
 800b186:	3301      	adds	r3, #1
 800b188:	623b      	str	r3, [r7, #32]
 800b18a:	6a3a      	ldr	r2, [r7, #32]
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d3e6      	bcc.n	800b160 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b192:	8bfb      	ldrh	r3, [r7, #30]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d01e      	beq.n	800b1d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b198:	2300      	movs	r3, #0
 800b19a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	f107 0310 	add.w	r3, r7, #16
 800b1a8:	6812      	ldr	r2, [r2, #0]
 800b1aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b1ac:	693a      	ldr	r2, [r7, #16]
 800b1ae:	6a3b      	ldr	r3, [r7, #32]
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	00db      	lsls	r3, r3, #3
 800b1b4:	fa22 f303 	lsr.w	r3, r2, r3
 800b1b8:	b2da      	uxtb	r2, r3
 800b1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1bc:	701a      	strb	r2, [r3, #0]
      i++;
 800b1be:	6a3b      	ldr	r3, [r7, #32]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	623b      	str	r3, [r7, #32]
      pDest++;
 800b1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b1ca:	8bfb      	ldrh	r3, [r7, #30]
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b1d0:	8bfb      	ldrh	r3, [r7, #30]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d1ea      	bne.n	800b1ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	372c      	adds	r7, #44	@ 0x2c
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	785b      	ldrb	r3, [r3, #1]
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d12c      	bne.n	800b25a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	015a      	lsls	r2, r3, #5
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	4413      	add	r3, r2
 800b208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	db12      	blt.n	800b238 <USB_EPSetStall+0x54>
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00f      	beq.n	800b238 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	015a      	lsls	r2, r3, #5
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	4413      	add	r3, r2
 800b220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	68ba      	ldr	r2, [r7, #8]
 800b228:	0151      	lsls	r1, r2, #5
 800b22a:	68fa      	ldr	r2, [r7, #12]
 800b22c:	440a      	add	r2, r1
 800b22e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b232:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b236:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	015a      	lsls	r2, r3, #5
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	4413      	add	r3, r2
 800b240:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	68ba      	ldr	r2, [r7, #8]
 800b248:	0151      	lsls	r1, r2, #5
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	440a      	add	r2, r1
 800b24e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b252:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b256:	6013      	str	r3, [r2, #0]
 800b258:	e02b      	b.n	800b2b2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	015a      	lsls	r2, r3, #5
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	4413      	add	r3, r2
 800b262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	db12      	blt.n	800b292 <USB_EPSetStall+0xae>
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00f      	beq.n	800b292 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	015a      	lsls	r2, r3, #5
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	4413      	add	r3, r2
 800b27a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	68ba      	ldr	r2, [r7, #8]
 800b282:	0151      	lsls	r1, r2, #5
 800b284:	68fa      	ldr	r2, [r7, #12]
 800b286:	440a      	add	r2, r1
 800b288:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b28c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b290:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	015a      	lsls	r2, r3, #5
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	4413      	add	r3, r2
 800b29a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	68ba      	ldr	r2, [r7, #8]
 800b2a2:	0151      	lsls	r1, r2, #5
 800b2a4:	68fa      	ldr	r2, [r7, #12]
 800b2a6:	440a      	add	r2, r1
 800b2a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b2ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b2b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3714      	adds	r7, #20
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	785b      	ldrb	r3, [r3, #1]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d128      	bne.n	800b32e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	015a      	lsls	r2, r3, #5
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	68ba      	ldr	r2, [r7, #8]
 800b2ec:	0151      	lsls	r1, r2, #5
 800b2ee:	68fa      	ldr	r2, [r7, #12]
 800b2f0:	440a      	add	r2, r1
 800b2f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b2fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	791b      	ldrb	r3, [r3, #4]
 800b300:	2b03      	cmp	r3, #3
 800b302:	d003      	beq.n	800b30c <USB_EPClearStall+0x4c>
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	791b      	ldrb	r3, [r3, #4]
 800b308:	2b02      	cmp	r3, #2
 800b30a:	d138      	bne.n	800b37e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	015a      	lsls	r2, r3, #5
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	4413      	add	r3, r2
 800b314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	0151      	lsls	r1, r2, #5
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	440a      	add	r2, r1
 800b322:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b326:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b32a:	6013      	str	r3, [r2, #0]
 800b32c:	e027      	b.n	800b37e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	015a      	lsls	r2, r3, #5
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	4413      	add	r3, r2
 800b336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	0151      	lsls	r1, r2, #5
 800b340:	68fa      	ldr	r2, [r7, #12]
 800b342:	440a      	add	r2, r1
 800b344:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b348:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b34c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	791b      	ldrb	r3, [r3, #4]
 800b352:	2b03      	cmp	r3, #3
 800b354:	d003      	beq.n	800b35e <USB_EPClearStall+0x9e>
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	791b      	ldrb	r3, [r3, #4]
 800b35a:	2b02      	cmp	r3, #2
 800b35c:	d10f      	bne.n	800b37e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	015a      	lsls	r2, r3, #5
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	4413      	add	r3, r2
 800b366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	0151      	lsls	r1, r2, #5
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	440a      	add	r2, r1
 800b374:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b37c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3714      	adds	r7, #20
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b085      	sub	sp, #20
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	460b      	mov	r3, r1
 800b396:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b3aa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b3ae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	78fb      	ldrb	r3, [r7, #3]
 800b3ba:	011b      	lsls	r3, r3, #4
 800b3bc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b3c0:	68f9      	ldr	r1, [r7, #12]
 800b3c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b3ca:	2300      	movs	r3, #0
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3714      	adds	r7, #20
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b085      	sub	sp, #20
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b3f2:	f023 0303 	bic.w	r3, r3, #3
 800b3f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b406:	f023 0302 	bic.w	r3, r3, #2
 800b40a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3714      	adds	r7, #20
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr

0800b41a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b41a:	b480      	push	{r7}
 800b41c:	b085      	sub	sp, #20
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b434:	f023 0303 	bic.w	r3, r3, #3
 800b438:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b448:	f043 0302 	orr.w	r3, r3, #2
 800b44c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b44e:	2300      	movs	r3, #0
}
 800b450:	4618      	mov	r0, r3
 800b452:	3714      	adds	r7, #20
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	695b      	ldr	r3, [r3, #20]
 800b468:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	699b      	ldr	r3, [r3, #24]
 800b46e:	68fa      	ldr	r2, [r7, #12]
 800b470:	4013      	ands	r3, r2
 800b472:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b474:	68fb      	ldr	r3, [r7, #12]
}
 800b476:	4618      	mov	r0, r3
 800b478:	3714      	adds	r7, #20
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr

0800b482 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b482:	b480      	push	{r7}
 800b484:	b085      	sub	sp, #20
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b494:	699b      	ldr	r3, [r3, #24]
 800b496:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b49e:	69db      	ldr	r3, [r3, #28]
 800b4a0:	68ba      	ldr	r2, [r7, #8]
 800b4a2:	4013      	ands	r3, r2
 800b4a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	0c1b      	lsrs	r3, r3, #16
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr

0800b4b6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b4b6:	b480      	push	{r7}
 800b4b8:	b085      	sub	sp, #20
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4c8:	699b      	ldr	r3, [r3, #24]
 800b4ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4d2:	69db      	ldr	r3, [r3, #28]
 800b4d4:	68ba      	ldr	r2, [r7, #8]
 800b4d6:	4013      	ands	r3, r2
 800b4d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	b29b      	uxth	r3, r3
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3714      	adds	r7, #20
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr

0800b4ea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b4ea:	b480      	push	{r7}
 800b4ec:	b085      	sub	sp, #20
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b4fa:	78fb      	ldrb	r3, [r7, #3]
 800b4fc:	015a      	lsls	r2, r3, #5
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	4413      	add	r3, r2
 800b502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b510:	695b      	ldr	r3, [r3, #20]
 800b512:	68ba      	ldr	r2, [r7, #8]
 800b514:	4013      	ands	r3, r2
 800b516:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b518:	68bb      	ldr	r3, [r7, #8]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3714      	adds	r7, #20
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr

0800b526 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b526:	b480      	push	{r7}
 800b528:	b087      	sub	sp, #28
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
 800b52e:	460b      	mov	r3, r1
 800b530:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b53c:	691b      	ldr	r3, [r3, #16]
 800b53e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b548:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b54a:	78fb      	ldrb	r3, [r7, #3]
 800b54c:	f003 030f 	and.w	r3, r3, #15
 800b550:	68fa      	ldr	r2, [r7, #12]
 800b552:	fa22 f303 	lsr.w	r3, r2, r3
 800b556:	01db      	lsls	r3, r3, #7
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	693a      	ldr	r2, [r7, #16]
 800b55c:	4313      	orrs	r3, r2
 800b55e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b560:	78fb      	ldrb	r3, [r7, #3]
 800b562:	015a      	lsls	r2, r3, #5
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	4413      	add	r3, r2
 800b568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b56c:	689b      	ldr	r3, [r3, #8]
 800b56e:	693a      	ldr	r2, [r7, #16]
 800b570:	4013      	ands	r3, r2
 800b572:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b574:	68bb      	ldr	r3, [r7, #8]
}
 800b576:	4618      	mov	r0, r3
 800b578:	371c      	adds	r7, #28
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr

0800b582 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b582:	b480      	push	{r7}
 800b584:	b083      	sub	sp, #12
 800b586:	af00      	add	r7, sp, #0
 800b588:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	695b      	ldr	r3, [r3, #20]
 800b58e:	f003 0301 	and.w	r3, r3, #1
}
 800b592:	4618      	mov	r0, r3
 800b594:	370c      	adds	r7, #12
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr

0800b59e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b59e:	b480      	push	{r7}
 800b5a0:	b085      	sub	sp, #20
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b5b8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b5bc:	f023 0307 	bic.w	r3, r3, #7
 800b5c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	68fa      	ldr	r2, [r7, #12]
 800b5cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b5d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b5d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3714      	adds	r7, #20
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b087      	sub	sp, #28
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	607a      	str	r2, [r7, #4]
 800b5f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	333c      	adds	r3, #60	@ 0x3c
 800b5fa:	3304      	adds	r3, #4
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	4a26      	ldr	r2, [pc, #152]	@ (800b69c <USB_EP0_OutStart+0xb8>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d90a      	bls.n	800b61e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b614:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b618:	d101      	bne.n	800b61e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b61a:	2300      	movs	r3, #0
 800b61c:	e037      	b.n	800b68e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b624:	461a      	mov	r2, r3
 800b626:	2300      	movs	r3, #0
 800b628:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b630:	691b      	ldr	r3, [r3, #16]
 800b632:	697a      	ldr	r2, [r7, #20]
 800b634:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b638:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b63c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b644:	691b      	ldr	r3, [r3, #16]
 800b646:	697a      	ldr	r2, [r7, #20]
 800b648:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b64c:	f043 0318 	orr.w	r3, r3, #24
 800b650:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b658:	691b      	ldr	r3, [r3, #16]
 800b65a:	697a      	ldr	r2, [r7, #20]
 800b65c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b660:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b664:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b666:	7afb      	ldrb	r3, [r7, #11]
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d10f      	bne.n	800b68c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b672:	461a      	mov	r2, r3
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	697a      	ldr	r2, [r7, #20]
 800b682:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b686:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b68a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	371c      	adds	r7, #28
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	4f54300a 	.word	0x4f54300a

0800b6a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b085      	sub	sp, #20
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b6b8:	d901      	bls.n	800b6be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b6ba:	2303      	movs	r3, #3
 800b6bc:	e01b      	b.n	800b6f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	691b      	ldr	r3, [r3, #16]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	daf2      	bge.n	800b6ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	f043 0201 	orr.w	r2, r3, #1
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b6e2:	d901      	bls.n	800b6e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b6e4:	2303      	movs	r3, #3
 800b6e6:	e006      	b.n	800b6f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	691b      	ldr	r3, [r3, #16]
 800b6ec:	f003 0301 	and.w	r3, r3, #1
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d0f0      	beq.n	800b6d6 <USB_CoreReset+0x36>

  return HAL_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3714      	adds	r7, #20
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
	...

0800b704 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b708:	4904      	ldr	r1, [pc, #16]	@ (800b71c <MX_FATFS_Init+0x18>)
 800b70a:	4805      	ldr	r0, [pc, #20]	@ (800b720 <MX_FATFS_Init+0x1c>)
 800b70c:	f002 f8a0 	bl	800d850 <FATFS_LinkDriver>
 800b710:	4603      	mov	r3, r0
 800b712:	461a      	mov	r2, r3
 800b714:	4b03      	ldr	r3, [pc, #12]	@ (800b724 <MX_FATFS_Init+0x20>)
 800b716:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b718:	bf00      	nop
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	20000644 	.word	0x20000644
 800b720:	2000000c 	.word	0x2000000c
 800b724:	20000640 	.word	0x20000640

0800b728 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	4603      	mov	r3, r0
 800b730:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800b732:	4b06      	ldr	r3, [pc, #24]	@ (800b74c <USER_initialize+0x24>)
 800b734:	2201      	movs	r2, #1
 800b736:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b738:	4b04      	ldr	r3, [pc, #16]	@ (800b74c <USER_initialize+0x24>)
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b73e:	4618      	mov	r0, r3
 800b740:	370c      	adds	r7, #12
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	20000009 	.word	0x20000009

0800b750 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	4603      	mov	r3, r0
 800b758:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800b75a:	4b06      	ldr	r3, [pc, #24]	@ (800b774 <USER_status+0x24>)
 800b75c:	2201      	movs	r2, #1
 800b75e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b760:	4b04      	ldr	r3, [pc, #16]	@ (800b774 <USER_status+0x24>)
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b766:	4618      	mov	r0, r3
 800b768:	370c      	adds	r7, #12
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop
 800b774:	20000009 	.word	0x20000009

0800b778 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b778:	b480      	push	{r7}
 800b77a:	b085      	sub	sp, #20
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	60b9      	str	r1, [r7, #8]
 800b780:	607a      	str	r2, [r7, #4]
 800b782:	603b      	str	r3, [r7, #0]
 800b784:	4603      	mov	r3, r0
 800b786:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800b788:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3714      	adds	r7, #20
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr

0800b796 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b796:	b480      	push	{r7}
 800b798:	b085      	sub	sp, #20
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	607a      	str	r2, [r7, #4]
 800b7a0:	603b      	str	r3, [r7, #0]
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800b7a6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3714      	adds	r7, #20
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr

0800b7b4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	603a      	str	r2, [r7, #0]
 800b7be:	71fb      	strb	r3, [r7, #7]
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	73fb      	strb	r3, [r7, #15]
    return res;
 800b7c8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3714      	adds	r7, #20
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr
	...

0800b7d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b7e4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b7e8:	f006 f8da 	bl	80119a0 <USBD_static_malloc>
 800b7ec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d109      	bne.n	800b808 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	32b0      	adds	r2, #176	@ 0xb0
 800b7fe:	2100      	movs	r1, #0
 800b800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b804:	2302      	movs	r3, #2
 800b806:	e0d4      	b.n	800b9b2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b808:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b80c:	2100      	movs	r1, #0
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f007 f82c 	bl	801286c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	32b0      	adds	r2, #176	@ 0xb0
 800b81e:	68f9      	ldr	r1, [r7, #12]
 800b820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	32b0      	adds	r2, #176	@ 0xb0
 800b82e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	7c1b      	ldrb	r3, [r3, #16]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d138      	bne.n	800b8b2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b840:	4b5e      	ldr	r3, [pc, #376]	@ (800b9bc <USBD_CDC_Init+0x1e4>)
 800b842:	7819      	ldrb	r1, [r3, #0]
 800b844:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b848:	2202      	movs	r2, #2
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f005 ff37 	bl	80116be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b850:	4b5a      	ldr	r3, [pc, #360]	@ (800b9bc <USBD_CDC_Init+0x1e4>)
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	f003 020f 	and.w	r2, r3, #15
 800b858:	6879      	ldr	r1, [r7, #4]
 800b85a:	4613      	mov	r3, r2
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	4413      	add	r3, r2
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	440b      	add	r3, r1
 800b864:	3324      	adds	r3, #36	@ 0x24
 800b866:	2201      	movs	r2, #1
 800b868:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b86a:	4b55      	ldr	r3, [pc, #340]	@ (800b9c0 <USBD_CDC_Init+0x1e8>)
 800b86c:	7819      	ldrb	r1, [r3, #0]
 800b86e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b872:	2202      	movs	r2, #2
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f005 ff22 	bl	80116be <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b87a:	4b51      	ldr	r3, [pc, #324]	@ (800b9c0 <USBD_CDC_Init+0x1e8>)
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	f003 020f 	and.w	r2, r3, #15
 800b882:	6879      	ldr	r1, [r7, #4]
 800b884:	4613      	mov	r3, r2
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	4413      	add	r3, r2
 800b88a:	009b      	lsls	r3, r3, #2
 800b88c:	440b      	add	r3, r1
 800b88e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b892:	2201      	movs	r2, #1
 800b894:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b896:	4b4b      	ldr	r3, [pc, #300]	@ (800b9c4 <USBD_CDC_Init+0x1ec>)
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	f003 020f 	and.w	r2, r3, #15
 800b89e:	6879      	ldr	r1, [r7, #4]
 800b8a0:	4613      	mov	r3, r2
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	4413      	add	r3, r2
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	440b      	add	r3, r1
 800b8aa:	3326      	adds	r3, #38	@ 0x26
 800b8ac:	2210      	movs	r2, #16
 800b8ae:	801a      	strh	r2, [r3, #0]
 800b8b0:	e035      	b.n	800b91e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b8b2:	4b42      	ldr	r3, [pc, #264]	@ (800b9bc <USBD_CDC_Init+0x1e4>)
 800b8b4:	7819      	ldrb	r1, [r3, #0]
 800b8b6:	2340      	movs	r3, #64	@ 0x40
 800b8b8:	2202      	movs	r2, #2
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f005 feff 	bl	80116be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b8c0:	4b3e      	ldr	r3, [pc, #248]	@ (800b9bc <USBD_CDC_Init+0x1e4>)
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	f003 020f 	and.w	r2, r3, #15
 800b8c8:	6879      	ldr	r1, [r7, #4]
 800b8ca:	4613      	mov	r3, r2
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	4413      	add	r3, r2
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	440b      	add	r3, r1
 800b8d4:	3324      	adds	r3, #36	@ 0x24
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b8da:	4b39      	ldr	r3, [pc, #228]	@ (800b9c0 <USBD_CDC_Init+0x1e8>)
 800b8dc:	7819      	ldrb	r1, [r3, #0]
 800b8de:	2340      	movs	r3, #64	@ 0x40
 800b8e0:	2202      	movs	r2, #2
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f005 feeb 	bl	80116be <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b8e8:	4b35      	ldr	r3, [pc, #212]	@ (800b9c0 <USBD_CDC_Init+0x1e8>)
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	f003 020f 	and.w	r2, r3, #15
 800b8f0:	6879      	ldr	r1, [r7, #4]
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	4413      	add	r3, r2
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	440b      	add	r3, r1
 800b8fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b900:	2201      	movs	r2, #1
 800b902:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b904:	4b2f      	ldr	r3, [pc, #188]	@ (800b9c4 <USBD_CDC_Init+0x1ec>)
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	f003 020f 	and.w	r2, r3, #15
 800b90c:	6879      	ldr	r1, [r7, #4]
 800b90e:	4613      	mov	r3, r2
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	4413      	add	r3, r2
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	440b      	add	r3, r1
 800b918:	3326      	adds	r3, #38	@ 0x26
 800b91a:	2210      	movs	r2, #16
 800b91c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b91e:	4b29      	ldr	r3, [pc, #164]	@ (800b9c4 <USBD_CDC_Init+0x1ec>)
 800b920:	7819      	ldrb	r1, [r3, #0]
 800b922:	2308      	movs	r3, #8
 800b924:	2203      	movs	r2, #3
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f005 fec9 	bl	80116be <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b92c:	4b25      	ldr	r3, [pc, #148]	@ (800b9c4 <USBD_CDC_Init+0x1ec>)
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	f003 020f 	and.w	r2, r3, #15
 800b934:	6879      	ldr	r1, [r7, #4]
 800b936:	4613      	mov	r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4413      	add	r3, r2
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	440b      	add	r3, r1
 800b940:	3324      	adds	r3, #36	@ 0x24
 800b942:	2201      	movs	r2, #1
 800b944:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2200      	movs	r2, #0
 800b94a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	33b0      	adds	r3, #176	@ 0xb0
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	4413      	add	r3, r2
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2200      	movs	r2, #0
 800b966:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2200      	movs	r2, #0
 800b96e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d101      	bne.n	800b980 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b97c:	2302      	movs	r3, #2
 800b97e:	e018      	b.n	800b9b2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	7c1b      	ldrb	r3, [r3, #16]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10a      	bne.n	800b99e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b988:	4b0d      	ldr	r3, [pc, #52]	@ (800b9c0 <USBD_CDC_Init+0x1e8>)
 800b98a:	7819      	ldrb	r1, [r3, #0]
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b992:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f005 ff80 	bl	801189c <USBD_LL_PrepareReceive>
 800b99c:	e008      	b.n	800b9b0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b99e:	4b08      	ldr	r3, [pc, #32]	@ (800b9c0 <USBD_CDC_Init+0x1e8>)
 800b9a0:	7819      	ldrb	r1, [r3, #0]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b9a8:	2340      	movs	r3, #64	@ 0x40
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f005 ff76 	bl	801189c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b9b0:	2300      	movs	r3, #0
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3710      	adds	r7, #16
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	200000a7 	.word	0x200000a7
 800b9c0:	200000a8 	.word	0x200000a8
 800b9c4:	200000a9 	.word	0x200000a9

0800b9c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b9d4:	4b3a      	ldr	r3, [pc, #232]	@ (800bac0 <USBD_CDC_DeInit+0xf8>)
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	4619      	mov	r1, r3
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f005 fe95 	bl	801170a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b9e0:	4b37      	ldr	r3, [pc, #220]	@ (800bac0 <USBD_CDC_DeInit+0xf8>)
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	f003 020f 	and.w	r2, r3, #15
 800b9e8:	6879      	ldr	r1, [r7, #4]
 800b9ea:	4613      	mov	r3, r2
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	4413      	add	r3, r2
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	440b      	add	r3, r1
 800b9f4:	3324      	adds	r3, #36	@ 0x24
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b9fa:	4b32      	ldr	r3, [pc, #200]	@ (800bac4 <USBD_CDC_DeInit+0xfc>)
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	4619      	mov	r1, r3
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f005 fe82 	bl	801170a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ba06:	4b2f      	ldr	r3, [pc, #188]	@ (800bac4 <USBD_CDC_DeInit+0xfc>)
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	f003 020f 	and.w	r2, r3, #15
 800ba0e:	6879      	ldr	r1, [r7, #4]
 800ba10:	4613      	mov	r3, r2
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	4413      	add	r3, r2
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	440b      	add	r3, r1
 800ba1a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ba1e:	2200      	movs	r2, #0
 800ba20:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ba22:	4b29      	ldr	r3, [pc, #164]	@ (800bac8 <USBD_CDC_DeInit+0x100>)
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	4619      	mov	r1, r3
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f005 fe6e 	bl	801170a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ba2e:	4b26      	ldr	r3, [pc, #152]	@ (800bac8 <USBD_CDC_DeInit+0x100>)
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	f003 020f 	and.w	r2, r3, #15
 800ba36:	6879      	ldr	r1, [r7, #4]
 800ba38:	4613      	mov	r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	4413      	add	r3, r2
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	440b      	add	r3, r1
 800ba42:	3324      	adds	r3, #36	@ 0x24
 800ba44:	2200      	movs	r2, #0
 800ba46:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ba48:	4b1f      	ldr	r3, [pc, #124]	@ (800bac8 <USBD_CDC_DeInit+0x100>)
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	f003 020f 	and.w	r2, r3, #15
 800ba50:	6879      	ldr	r1, [r7, #4]
 800ba52:	4613      	mov	r3, r2
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	4413      	add	r3, r2
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	440b      	add	r3, r1
 800ba5c:	3326      	adds	r3, #38	@ 0x26
 800ba5e:	2200      	movs	r2, #0
 800ba60:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	32b0      	adds	r2, #176	@ 0xb0
 800ba6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d01f      	beq.n	800bab4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	33b0      	adds	r3, #176	@ 0xb0
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	4413      	add	r3, r2
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	32b0      	adds	r2, #176	@ 0xb0
 800ba92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba96:	4618      	mov	r0, r3
 800ba98:	f005 ff90 	bl	80119bc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	32b0      	adds	r2, #176	@ 0xb0
 800baa6:	2100      	movs	r1, #0
 800baa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bab4:	2300      	movs	r3, #0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3708      	adds	r7, #8
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	200000a7 	.word	0x200000a7
 800bac4:	200000a8 	.word	0x200000a8
 800bac8:	200000a9 	.word	0x200000a9

0800bacc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b086      	sub	sp, #24
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	32b0      	adds	r2, #176	@ 0xb0
 800bae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bae4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bae6:	2300      	movs	r3, #0
 800bae8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800baea:	2300      	movs	r3, #0
 800baec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800baee:	2300      	movs	r3, #0
 800baf0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d101      	bne.n	800bafc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800baf8:	2303      	movs	r3, #3
 800bafa:	e0bf      	b.n	800bc7c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d050      	beq.n	800bbaa <USBD_CDC_Setup+0xde>
 800bb08:	2b20      	cmp	r3, #32
 800bb0a:	f040 80af 	bne.w	800bc6c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	88db      	ldrh	r3, [r3, #6]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d03a      	beq.n	800bb8c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	b25b      	sxtb	r3, r3
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	da1b      	bge.n	800bb58 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	33b0      	adds	r3, #176	@ 0xb0
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	4413      	add	r3, r2
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	683a      	ldr	r2, [r7, #0]
 800bb34:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bb36:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bb38:	683a      	ldr	r2, [r7, #0]
 800bb3a:	88d2      	ldrh	r2, [r2, #6]
 800bb3c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	88db      	ldrh	r3, [r3, #6]
 800bb42:	2b07      	cmp	r3, #7
 800bb44:	bf28      	it	cs
 800bb46:	2307      	movcs	r3, #7
 800bb48:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	89fa      	ldrh	r2, [r7, #14]
 800bb4e:	4619      	mov	r1, r3
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f001 fdb1 	bl	800d6b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bb56:	e090      	b.n	800bc7a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	785a      	ldrb	r2, [r3, #1]
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	88db      	ldrh	r3, [r3, #6]
 800bb66:	2b3f      	cmp	r3, #63	@ 0x3f
 800bb68:	d803      	bhi.n	800bb72 <USBD_CDC_Setup+0xa6>
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	88db      	ldrh	r3, [r3, #6]
 800bb6e:	b2da      	uxtb	r2, r3
 800bb70:	e000      	b.n	800bb74 <USBD_CDC_Setup+0xa8>
 800bb72:	2240      	movs	r2, #64	@ 0x40
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bb7a:	6939      	ldr	r1, [r7, #16]
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800bb82:	461a      	mov	r2, r3
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f001 fdc3 	bl	800d710 <USBD_CtlPrepareRx>
      break;
 800bb8a:	e076      	b.n	800bc7a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	33b0      	adds	r3, #176	@ 0xb0
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	4413      	add	r3, r2
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	689b      	ldr	r3, [r3, #8]
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	7850      	ldrb	r0, [r2, #1]
 800bba2:	2200      	movs	r2, #0
 800bba4:	6839      	ldr	r1, [r7, #0]
 800bba6:	4798      	blx	r3
      break;
 800bba8:	e067      	b.n	800bc7a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	785b      	ldrb	r3, [r3, #1]
 800bbae:	2b0b      	cmp	r3, #11
 800bbb0:	d851      	bhi.n	800bc56 <USBD_CDC_Setup+0x18a>
 800bbb2:	a201      	add	r2, pc, #4	@ (adr r2, 800bbb8 <USBD_CDC_Setup+0xec>)
 800bbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb8:	0800bbe9 	.word	0x0800bbe9
 800bbbc:	0800bc65 	.word	0x0800bc65
 800bbc0:	0800bc57 	.word	0x0800bc57
 800bbc4:	0800bc57 	.word	0x0800bc57
 800bbc8:	0800bc57 	.word	0x0800bc57
 800bbcc:	0800bc57 	.word	0x0800bc57
 800bbd0:	0800bc57 	.word	0x0800bc57
 800bbd4:	0800bc57 	.word	0x0800bc57
 800bbd8:	0800bc57 	.word	0x0800bc57
 800bbdc:	0800bc57 	.word	0x0800bc57
 800bbe0:	0800bc13 	.word	0x0800bc13
 800bbe4:	0800bc3d 	.word	0x0800bc3d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	2b03      	cmp	r3, #3
 800bbf2:	d107      	bne.n	800bc04 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bbf4:	f107 030a 	add.w	r3, r7, #10
 800bbf8:	2202      	movs	r2, #2
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f001 fd5b 	bl	800d6b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc02:	e032      	b.n	800bc6a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bc04:	6839      	ldr	r1, [r7, #0]
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f001 fce5 	bl	800d5d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800bc0c:	2303      	movs	r3, #3
 800bc0e:	75fb      	strb	r3, [r7, #23]
          break;
 800bc10:	e02b      	b.n	800bc6a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	2b03      	cmp	r3, #3
 800bc1c:	d107      	bne.n	800bc2e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bc1e:	f107 030d 	add.w	r3, r7, #13
 800bc22:	2201      	movs	r2, #1
 800bc24:	4619      	mov	r1, r3
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f001 fd46 	bl	800d6b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc2c:	e01d      	b.n	800bc6a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bc2e:	6839      	ldr	r1, [r7, #0]
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f001 fcd0 	bl	800d5d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800bc36:	2303      	movs	r3, #3
 800bc38:	75fb      	strb	r3, [r7, #23]
          break;
 800bc3a:	e016      	b.n	800bc6a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	2b03      	cmp	r3, #3
 800bc46:	d00f      	beq.n	800bc68 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bc48:	6839      	ldr	r1, [r7, #0]
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f001 fcc3 	bl	800d5d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800bc50:	2303      	movs	r3, #3
 800bc52:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bc54:	e008      	b.n	800bc68 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bc56:	6839      	ldr	r1, [r7, #0]
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f001 fcbc 	bl	800d5d6 <USBD_CtlError>
          ret = USBD_FAIL;
 800bc5e:	2303      	movs	r3, #3
 800bc60:	75fb      	strb	r3, [r7, #23]
          break;
 800bc62:	e002      	b.n	800bc6a <USBD_CDC_Setup+0x19e>
          break;
 800bc64:	bf00      	nop
 800bc66:	e008      	b.n	800bc7a <USBD_CDC_Setup+0x1ae>
          break;
 800bc68:	bf00      	nop
      }
      break;
 800bc6a:	e006      	b.n	800bc7a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bc6c:	6839      	ldr	r1, [r7, #0]
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f001 fcb1 	bl	800d5d6 <USBD_CtlError>
      ret = USBD_FAIL;
 800bc74:	2303      	movs	r3, #3
 800bc76:	75fb      	strb	r3, [r7, #23]
      break;
 800bc78:	bf00      	nop
  }

  return (uint8_t)ret;
 800bc7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3718      	adds	r7, #24
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bc96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	32b0      	adds	r2, #176	@ 0xb0
 800bca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d101      	bne.n	800bcae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bcaa:	2303      	movs	r3, #3
 800bcac:	e065      	b.n	800bd7a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	32b0      	adds	r2, #176	@ 0xb0
 800bcb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcbc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bcbe:	78fb      	ldrb	r3, [r7, #3]
 800bcc0:	f003 020f 	and.w	r2, r3, #15
 800bcc4:	6879      	ldr	r1, [r7, #4]
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	4413      	add	r3, r2
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	440b      	add	r3, r1
 800bcd0:	3318      	adds	r3, #24
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d02f      	beq.n	800bd38 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bcd8:	78fb      	ldrb	r3, [r7, #3]
 800bcda:	f003 020f 	and.w	r2, r3, #15
 800bcde:	6879      	ldr	r1, [r7, #4]
 800bce0:	4613      	mov	r3, r2
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	4413      	add	r3, r2
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	440b      	add	r3, r1
 800bcea:	3318      	adds	r3, #24
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	78fb      	ldrb	r3, [r7, #3]
 800bcf0:	f003 010f 	and.w	r1, r3, #15
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	00db      	lsls	r3, r3, #3
 800bcfa:	440b      	add	r3, r1
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	4403      	add	r3, r0
 800bd00:	331c      	adds	r3, #28
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	fbb2 f1f3 	udiv	r1, r2, r3
 800bd08:	fb01 f303 	mul.w	r3, r1, r3
 800bd0c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d112      	bne.n	800bd38 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bd12:	78fb      	ldrb	r3, [r7, #3]
 800bd14:	f003 020f 	and.w	r2, r3, #15
 800bd18:	6879      	ldr	r1, [r7, #4]
 800bd1a:	4613      	mov	r3, r2
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4413      	add	r3, r2
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	440b      	add	r3, r1
 800bd24:	3318      	adds	r3, #24
 800bd26:	2200      	movs	r2, #0
 800bd28:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bd2a:	78f9      	ldrb	r1, [r7, #3]
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	2200      	movs	r2, #0
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f005 fd92 	bl	801185a <USBD_LL_Transmit>
 800bd36:	e01f      	b.n	800bd78 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	33b0      	adds	r3, #176	@ 0xb0
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	4413      	add	r3, r2
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d010      	beq.n	800bd78 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	33b0      	adds	r3, #176	@ 0xb0
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	4413      	add	r3, r2
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	691b      	ldr	r3, [r3, #16]
 800bd68:	68ba      	ldr	r2, [r7, #8]
 800bd6a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800bd6e:	68ba      	ldr	r2, [r7, #8]
 800bd70:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800bd74:	78fa      	ldrb	r2, [r7, #3]
 800bd76:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bd78:	2300      	movs	r3, #0
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3710      	adds	r7, #16
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}

0800bd82 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd82:	b580      	push	{r7, lr}
 800bd84:	b084      	sub	sp, #16
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	32b0      	adds	r2, #176	@ 0xb0
 800bd98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd9c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	32b0      	adds	r2, #176	@ 0xb0
 800bda8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d101      	bne.n	800bdb4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	e01a      	b.n	800bdea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bdb4:	78fb      	ldrb	r3, [r7, #3]
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f005 fd90 	bl	80118de <USBD_LL_GetRxDataSize>
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	33b0      	adds	r3, #176	@ 0xb0
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	4413      	add	r3, r2
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	68fa      	ldr	r2, [r7, #12]
 800bdda:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800bdde:	68fa      	ldr	r2, [r7, #12]
 800bde0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800bde4:	4611      	mov	r1, r2
 800bde6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bde8:	2300      	movs	r3, #0
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3710      	adds	r7, #16
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}

0800bdf2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bdf2:	b580      	push	{r7, lr}
 800bdf4:	b084      	sub	sp, #16
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	32b0      	adds	r2, #176	@ 0xb0
 800be04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be08:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d101      	bne.n	800be14 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800be10:	2303      	movs	r3, #3
 800be12:	e024      	b.n	800be5e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	33b0      	adds	r3, #176	@ 0xb0
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	4413      	add	r3, r2
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d019      	beq.n	800be5c <USBD_CDC_EP0_RxReady+0x6a>
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800be2e:	2bff      	cmp	r3, #255	@ 0xff
 800be30:	d014      	beq.n	800be5c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be38:	687a      	ldr	r2, [r7, #4]
 800be3a:	33b0      	adds	r3, #176	@ 0xb0
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	4413      	add	r3, r2
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	689b      	ldr	r3, [r3, #8]
 800be44:	68fa      	ldr	r2, [r7, #12]
 800be46:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800be4a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800be4c:	68fa      	ldr	r2, [r7, #12]
 800be4e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800be52:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	22ff      	movs	r2, #255	@ 0xff
 800be58:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3710      	adds	r7, #16
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
	...

0800be68 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b086      	sub	sp, #24
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800be70:	2182      	movs	r1, #130	@ 0x82
 800be72:	4818      	ldr	r0, [pc, #96]	@ (800bed4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800be74:	f000 fd4f 	bl	800c916 <USBD_GetEpDesc>
 800be78:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800be7a:	2101      	movs	r1, #1
 800be7c:	4815      	ldr	r0, [pc, #84]	@ (800bed4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800be7e:	f000 fd4a 	bl	800c916 <USBD_GetEpDesc>
 800be82:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800be84:	2181      	movs	r1, #129	@ 0x81
 800be86:	4813      	ldr	r0, [pc, #76]	@ (800bed4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800be88:	f000 fd45 	bl	800c916 <USBD_GetEpDesc>
 800be8c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d002      	beq.n	800be9a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	2210      	movs	r2, #16
 800be98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d006      	beq.n	800beae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	2200      	movs	r2, #0
 800bea4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bea8:	711a      	strb	r2, [r3, #4]
 800beaa:	2200      	movs	r2, #0
 800beac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d006      	beq.n	800bec2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2200      	movs	r2, #0
 800beb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bebc:	711a      	strb	r2, [r3, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2243      	movs	r2, #67	@ 0x43
 800bec6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bec8:	4b02      	ldr	r3, [pc, #8]	@ (800bed4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800beca:	4618      	mov	r0, r3
 800becc:	3718      	adds	r7, #24
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	20000064 	.word	0x20000064

0800bed8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b086      	sub	sp, #24
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bee0:	2182      	movs	r1, #130	@ 0x82
 800bee2:	4818      	ldr	r0, [pc, #96]	@ (800bf44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bee4:	f000 fd17 	bl	800c916 <USBD_GetEpDesc>
 800bee8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800beea:	2101      	movs	r1, #1
 800beec:	4815      	ldr	r0, [pc, #84]	@ (800bf44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800beee:	f000 fd12 	bl	800c916 <USBD_GetEpDesc>
 800bef2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bef4:	2181      	movs	r1, #129	@ 0x81
 800bef6:	4813      	ldr	r0, [pc, #76]	@ (800bf44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bef8:	f000 fd0d 	bl	800c916 <USBD_GetEpDesc>
 800befc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d002      	beq.n	800bf0a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	2210      	movs	r2, #16
 800bf08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d006      	beq.n	800bf1e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	2200      	movs	r2, #0
 800bf14:	711a      	strb	r2, [r3, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	f042 0202 	orr.w	r2, r2, #2
 800bf1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d006      	beq.n	800bf32 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2200      	movs	r2, #0
 800bf28:	711a      	strb	r2, [r3, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f042 0202 	orr.w	r2, r2, #2
 800bf30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2243      	movs	r2, #67	@ 0x43
 800bf36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bf38:	4b02      	ldr	r3, [pc, #8]	@ (800bf44 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3718      	adds	r7, #24
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	20000064 	.word	0x20000064

0800bf48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b086      	sub	sp, #24
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bf50:	2182      	movs	r1, #130	@ 0x82
 800bf52:	4818      	ldr	r0, [pc, #96]	@ (800bfb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bf54:	f000 fcdf 	bl	800c916 <USBD_GetEpDesc>
 800bf58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bf5a:	2101      	movs	r1, #1
 800bf5c:	4815      	ldr	r0, [pc, #84]	@ (800bfb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bf5e:	f000 fcda 	bl	800c916 <USBD_GetEpDesc>
 800bf62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bf64:	2181      	movs	r1, #129	@ 0x81
 800bf66:	4813      	ldr	r0, [pc, #76]	@ (800bfb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bf68:	f000 fcd5 	bl	800c916 <USBD_GetEpDesc>
 800bf6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d002      	beq.n	800bf7a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	2210      	movs	r2, #16
 800bf78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d006      	beq.n	800bf8e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	2200      	movs	r2, #0
 800bf84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bf88:	711a      	strb	r2, [r3, #4]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d006      	beq.n	800bfa2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bf9c:	711a      	strb	r2, [r3, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2243      	movs	r2, #67	@ 0x43
 800bfa6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bfa8:	4b02      	ldr	r3, [pc, #8]	@ (800bfb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3718      	adds	r7, #24
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	20000064 	.word	0x20000064

0800bfb8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b083      	sub	sp, #12
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	220a      	movs	r2, #10
 800bfc4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bfc6:	4b03      	ldr	r3, [pc, #12]	@ (800bfd4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	370c      	adds	r7, #12
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr
 800bfd4:	20000020 	.word	0x20000020

0800bfd8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d101      	bne.n	800bfec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bfe8:	2303      	movs	r3, #3
 800bfea:	e009      	b.n	800c000 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	33b0      	adds	r3, #176	@ 0xb0
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	4413      	add	r3, r2
 800bffa:	683a      	ldr	r2, [r7, #0]
 800bffc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bffe:	2300      	movs	r3, #0
}
 800c000:	4618      	mov	r0, r3
 800c002:	370c      	adds	r7, #12
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr

0800c00c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b087      	sub	sp, #28
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	32b0      	adds	r2, #176	@ 0xb0
 800c022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c026:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d101      	bne.n	800c032 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c02e:	2303      	movs	r3, #3
 800c030:	e008      	b.n	800c044 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	68ba      	ldr	r2, [r7, #8]
 800c036:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c042:	2300      	movs	r3, #0
}
 800c044:	4618      	mov	r0, r3
 800c046:	371c      	adds	r7, #28
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c050:	b480      	push	{r7}
 800c052:	b085      	sub	sp, #20
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	32b0      	adds	r2, #176	@ 0xb0
 800c064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c068:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d101      	bne.n	800c074 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c070:	2303      	movs	r3, #3
 800c072:	e004      	b.n	800c07e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	683a      	ldr	r2, [r7, #0]
 800c078:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c07c:	2300      	movs	r3, #0
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3714      	adds	r7, #20
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr
	...

0800c08c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	32b0      	adds	r2, #176	@ 0xb0
 800c09e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0a2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d101      	bne.n	800c0b2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c0ae:	2303      	movs	r3, #3
 800c0b0:	e025      	b.n	800c0fe <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d11f      	bne.n	800c0fc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c0c4:	4b10      	ldr	r3, [pc, #64]	@ (800c108 <USBD_CDC_TransmitPacket+0x7c>)
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	f003 020f 	and.w	r2, r3, #15
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	4413      	add	r3, r2
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	4403      	add	r3, r0
 800c0de:	3318      	adds	r3, #24
 800c0e0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c0e2:	4b09      	ldr	r3, [pc, #36]	@ (800c108 <USBD_CDC_TransmitPacket+0x7c>)
 800c0e4:	7819      	ldrb	r1, [r3, #0]
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f005 fbb1 	bl	801185a <USBD_LL_Transmit>

    ret = USBD_OK;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	200000a7 	.word	0x200000a7

0800c10c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b084      	sub	sp, #16
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	32b0      	adds	r2, #176	@ 0xb0
 800c11e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c122:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	32b0      	adds	r2, #176	@ 0xb0
 800c12e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d101      	bne.n	800c13a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c136:	2303      	movs	r3, #3
 800c138:	e018      	b.n	800c16c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	7c1b      	ldrb	r3, [r3, #16]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d10a      	bne.n	800c158 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c142:	4b0c      	ldr	r3, [pc, #48]	@ (800c174 <USBD_CDC_ReceivePacket+0x68>)
 800c144:	7819      	ldrb	r1, [r3, #0]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c14c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f005 fba3 	bl	801189c <USBD_LL_PrepareReceive>
 800c156:	e008      	b.n	800c16a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c158:	4b06      	ldr	r3, [pc, #24]	@ (800c174 <USBD_CDC_ReceivePacket+0x68>)
 800c15a:	7819      	ldrb	r1, [r3, #0]
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c162:	2340      	movs	r3, #64	@ 0x40
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f005 fb99 	bl	801189c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c16a:	2300      	movs	r3, #0
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3710      	adds	r7, #16
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	200000a8 	.word	0x200000a8

0800c178 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b086      	sub	sp, #24
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	4613      	mov	r3, r2
 800c184:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d101      	bne.n	800c190 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c18c:	2303      	movs	r3, #3
 800c18e:	e01f      	b.n	800c1d0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2200      	movs	r2, #0
 800c194:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2200      	movs	r2, #0
 800c19c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d003      	beq.n	800c1b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	68ba      	ldr	r2, [r7, #8]
 800c1b2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	79fa      	ldrb	r2, [r7, #7]
 800c1c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c1c4:	68f8      	ldr	r0, [r7, #12]
 800c1c6:	f005 fa13 	bl	80115f0 <USBD_LL_Init>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c1ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3718      	adds	r7, #24
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d101      	bne.n	800c1f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c1ec:	2303      	movs	r3, #3
 800c1ee:	e025      	b.n	800c23c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	683a      	ldr	r2, [r7, #0]
 800c1f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	32ae      	adds	r2, #174	@ 0xae
 800c202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d00f      	beq.n	800c22c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	32ae      	adds	r2, #174	@ 0xae
 800c216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c21a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c21c:	f107 020e 	add.w	r2, r7, #14
 800c220:	4610      	mov	r0, r2
 800c222:	4798      	blx	r3
 800c224:	4602      	mov	r2, r0
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c232:	1c5a      	adds	r2, r3, #1
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c23a:	2300      	movs	r3, #0
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3710      	adds	r7, #16
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f005 fa1b 	bl	8011688 <USBD_LL_Start>
 800c252:	4603      	mov	r3, r0
}
 800c254:	4618      	mov	r0, r3
 800c256:	3708      	adds	r7, #8
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b083      	sub	sp, #12
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c264:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c266:	4618      	mov	r0, r3
 800c268:	370c      	adds	r7, #12
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr

0800c272 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c272:	b580      	push	{r7, lr}
 800c274:	b084      	sub	sp, #16
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	460b      	mov	r3, r1
 800c27c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c27e:	2300      	movs	r3, #0
 800c280:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d009      	beq.n	800c2a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	78fa      	ldrb	r2, [r7, #3]
 800c296:	4611      	mov	r1, r2
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	4798      	blx	r3
 800c29c:	4603      	mov	r3, r0
 800c29e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3710      	adds	r7, #16
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b084      	sub	sp, #16
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6078      	str	r0, [r7, #4]
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	78fa      	ldrb	r2, [r7, #3]
 800c2c4:	4611      	mov	r1, r2
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	4798      	blx	r3
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d001      	beq.n	800c2d4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c2d0:	2303      	movs	r3, #3
 800c2d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3710      	adds	r7, #16
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}

0800c2de <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c2de:	b580      	push	{r7, lr}
 800c2e0:	b084      	sub	sp, #16
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
 800c2e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c2ee:	6839      	ldr	r1, [r7, #0]
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f001 f936 	bl	800d562 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c304:	461a      	mov	r2, r3
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c312:	f003 031f 	and.w	r3, r3, #31
 800c316:	2b02      	cmp	r3, #2
 800c318:	d01a      	beq.n	800c350 <USBD_LL_SetupStage+0x72>
 800c31a:	2b02      	cmp	r3, #2
 800c31c:	d822      	bhi.n	800c364 <USBD_LL_SetupStage+0x86>
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d002      	beq.n	800c328 <USBD_LL_SetupStage+0x4a>
 800c322:	2b01      	cmp	r3, #1
 800c324:	d00a      	beq.n	800c33c <USBD_LL_SetupStage+0x5e>
 800c326:	e01d      	b.n	800c364 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c32e:	4619      	mov	r1, r3
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 fb63 	bl	800c9fc <USBD_StdDevReq>
 800c336:	4603      	mov	r3, r0
 800c338:	73fb      	strb	r3, [r7, #15]
      break;
 800c33a:	e020      	b.n	800c37e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c342:	4619      	mov	r1, r3
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 fbcb 	bl	800cae0 <USBD_StdItfReq>
 800c34a:	4603      	mov	r3, r0
 800c34c:	73fb      	strb	r3, [r7, #15]
      break;
 800c34e:	e016      	b.n	800c37e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c356:	4619      	mov	r1, r3
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f000 fc2d 	bl	800cbb8 <USBD_StdEPReq>
 800c35e:	4603      	mov	r3, r0
 800c360:	73fb      	strb	r3, [r7, #15]
      break;
 800c362:	e00c      	b.n	800c37e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c36a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	4619      	mov	r1, r3
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f005 f9e8 	bl	8011748 <USBD_LL_StallEP>
 800c378:	4603      	mov	r3, r0
 800c37a:	73fb      	strb	r3, [r7, #15]
      break;
 800c37c:	bf00      	nop
  }

  return ret;
 800c37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c380:	4618      	mov	r0, r3
 800c382:	3710      	adds	r7, #16
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b086      	sub	sp, #24
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	460b      	mov	r3, r1
 800c392:	607a      	str	r2, [r7, #4]
 800c394:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c396:	2300      	movs	r3, #0
 800c398:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c39a:	7afb      	ldrb	r3, [r7, #11]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d16e      	bne.n	800c47e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c3a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c3ae:	2b03      	cmp	r3, #3
 800c3b0:	f040 8098 	bne.w	800c4e4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	689a      	ldr	r2, [r3, #8]
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d913      	bls.n	800c3e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	689a      	ldr	r2, [r3, #8]
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	1ad2      	subs	r2, r2, r3
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	68da      	ldr	r2, [r3, #12]
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	bf28      	it	cs
 800c3da:	4613      	movcs	r3, r2
 800c3dc:	461a      	mov	r2, r3
 800c3de:	6879      	ldr	r1, [r7, #4]
 800c3e0:	68f8      	ldr	r0, [r7, #12]
 800c3e2:	f001 f9b2 	bl	800d74a <USBD_CtlContinueRx>
 800c3e6:	e07d      	b.n	800c4e4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c3ee:	f003 031f 	and.w	r3, r3, #31
 800c3f2:	2b02      	cmp	r3, #2
 800c3f4:	d014      	beq.n	800c420 <USBD_LL_DataOutStage+0x98>
 800c3f6:	2b02      	cmp	r3, #2
 800c3f8:	d81d      	bhi.n	800c436 <USBD_LL_DataOutStage+0xae>
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d002      	beq.n	800c404 <USBD_LL_DataOutStage+0x7c>
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d003      	beq.n	800c40a <USBD_LL_DataOutStage+0x82>
 800c402:	e018      	b.n	800c436 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c404:	2300      	movs	r3, #0
 800c406:	75bb      	strb	r3, [r7, #22]
            break;
 800c408:	e018      	b.n	800c43c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c410:	b2db      	uxtb	r3, r3
 800c412:	4619      	mov	r1, r3
 800c414:	68f8      	ldr	r0, [r7, #12]
 800c416:	f000 fa64 	bl	800c8e2 <USBD_CoreFindIF>
 800c41a:	4603      	mov	r3, r0
 800c41c:	75bb      	strb	r3, [r7, #22]
            break;
 800c41e:	e00d      	b.n	800c43c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c426:	b2db      	uxtb	r3, r3
 800c428:	4619      	mov	r1, r3
 800c42a:	68f8      	ldr	r0, [r7, #12]
 800c42c:	f000 fa66 	bl	800c8fc <USBD_CoreFindEP>
 800c430:	4603      	mov	r3, r0
 800c432:	75bb      	strb	r3, [r7, #22]
            break;
 800c434:	e002      	b.n	800c43c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c436:	2300      	movs	r3, #0
 800c438:	75bb      	strb	r3, [r7, #22]
            break;
 800c43a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c43c:	7dbb      	ldrb	r3, [r7, #22]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d119      	bne.n	800c476 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	2b03      	cmp	r3, #3
 800c44c:	d113      	bne.n	800c476 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c44e:	7dba      	ldrb	r2, [r7, #22]
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	32ae      	adds	r2, #174	@ 0xae
 800c454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c458:	691b      	ldr	r3, [r3, #16]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d00b      	beq.n	800c476 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c45e:	7dba      	ldrb	r2, [r7, #22]
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c466:	7dba      	ldrb	r2, [r7, #22]
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	32ae      	adds	r2, #174	@ 0xae
 800c46c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c470:	691b      	ldr	r3, [r3, #16]
 800c472:	68f8      	ldr	r0, [r7, #12]
 800c474:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c476:	68f8      	ldr	r0, [r7, #12]
 800c478:	f001 f978 	bl	800d76c <USBD_CtlSendStatus>
 800c47c:	e032      	b.n	800c4e4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c47e:	7afb      	ldrb	r3, [r7, #11]
 800c480:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c484:	b2db      	uxtb	r3, r3
 800c486:	4619      	mov	r1, r3
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	f000 fa37 	bl	800c8fc <USBD_CoreFindEP>
 800c48e:	4603      	mov	r3, r0
 800c490:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c492:	7dbb      	ldrb	r3, [r7, #22]
 800c494:	2bff      	cmp	r3, #255	@ 0xff
 800c496:	d025      	beq.n	800c4e4 <USBD_LL_DataOutStage+0x15c>
 800c498:	7dbb      	ldrb	r3, [r7, #22]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d122      	bne.n	800c4e4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	2b03      	cmp	r3, #3
 800c4a8:	d117      	bne.n	800c4da <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c4aa:	7dba      	ldrb	r2, [r7, #22]
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	32ae      	adds	r2, #174	@ 0xae
 800c4b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4b4:	699b      	ldr	r3, [r3, #24]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d00f      	beq.n	800c4da <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c4ba:	7dba      	ldrb	r2, [r7, #22]
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c4c2:	7dba      	ldrb	r2, [r7, #22]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	32ae      	adds	r2, #174	@ 0xae
 800c4c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4cc:	699b      	ldr	r3, [r3, #24]
 800c4ce:	7afa      	ldrb	r2, [r7, #11]
 800c4d0:	4611      	mov	r1, r2
 800c4d2:	68f8      	ldr	r0, [r7, #12]
 800c4d4:	4798      	blx	r3
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c4da:	7dfb      	ldrb	r3, [r7, #23]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d001      	beq.n	800c4e4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c4e0:	7dfb      	ldrb	r3, [r7, #23]
 800c4e2:	e000      	b.n	800c4e6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c4e4:	2300      	movs	r3, #0
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3718      	adds	r7, #24
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b086      	sub	sp, #24
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	60f8      	str	r0, [r7, #12]
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	607a      	str	r2, [r7, #4]
 800c4fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c4fc:	7afb      	ldrb	r3, [r7, #11]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d16f      	bne.n	800c5e2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	3314      	adds	r3, #20
 800c506:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c50e:	2b02      	cmp	r3, #2
 800c510:	d15a      	bne.n	800c5c8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	689a      	ldr	r2, [r3, #8]
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	68db      	ldr	r3, [r3, #12]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d914      	bls.n	800c548 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	689a      	ldr	r2, [r3, #8]
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	68db      	ldr	r3, [r3, #12]
 800c526:	1ad2      	subs	r2, r2, r3
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	689b      	ldr	r3, [r3, #8]
 800c530:	461a      	mov	r2, r3
 800c532:	6879      	ldr	r1, [r7, #4]
 800c534:	68f8      	ldr	r0, [r7, #12]
 800c536:	f001 f8da 	bl	800d6ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c53a:	2300      	movs	r3, #0
 800c53c:	2200      	movs	r2, #0
 800c53e:	2100      	movs	r1, #0
 800c540:	68f8      	ldr	r0, [r7, #12]
 800c542:	f005 f9ab 	bl	801189c <USBD_LL_PrepareReceive>
 800c546:	e03f      	b.n	800c5c8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	68da      	ldr	r2, [r3, #12]
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	689b      	ldr	r3, [r3, #8]
 800c550:	429a      	cmp	r2, r3
 800c552:	d11c      	bne.n	800c58e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	685a      	ldr	r2, [r3, #4]
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d316      	bcc.n	800c58e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	685a      	ldr	r2, [r3, #4]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d20f      	bcs.n	800c58e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c56e:	2200      	movs	r2, #0
 800c570:	2100      	movs	r1, #0
 800c572:	68f8      	ldr	r0, [r7, #12]
 800c574:	f001 f8bb 	bl	800d6ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2200      	movs	r2, #0
 800c57c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c580:	2300      	movs	r3, #0
 800c582:	2200      	movs	r2, #0
 800c584:	2100      	movs	r1, #0
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f005 f988 	bl	801189c <USBD_LL_PrepareReceive>
 800c58c:	e01c      	b.n	800c5c8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c594:	b2db      	uxtb	r3, r3
 800c596:	2b03      	cmp	r3, #3
 800c598:	d10f      	bne.n	800c5ba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d009      	beq.n	800c5ba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5b4:	68db      	ldr	r3, [r3, #12]
 800c5b6:	68f8      	ldr	r0, [r7, #12]
 800c5b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5ba:	2180      	movs	r1, #128	@ 0x80
 800c5bc:	68f8      	ldr	r0, [r7, #12]
 800c5be:	f005 f8c3 	bl	8011748 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	f001 f8e5 	bl	800d792 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d03a      	beq.n	800c648 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c5d2:	68f8      	ldr	r0, [r7, #12]
 800c5d4:	f7ff fe42 	bl	800c25c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c5e0:	e032      	b.n	800c648 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c5e2:	7afb      	ldrb	r3, [r7, #11]
 800c5e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	68f8      	ldr	r0, [r7, #12]
 800c5ee:	f000 f985 	bl	800c8fc <USBD_CoreFindEP>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c5f6:	7dfb      	ldrb	r3, [r7, #23]
 800c5f8:	2bff      	cmp	r3, #255	@ 0xff
 800c5fa:	d025      	beq.n	800c648 <USBD_LL_DataInStage+0x15a>
 800c5fc:	7dfb      	ldrb	r3, [r7, #23]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d122      	bne.n	800c648 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	2b03      	cmp	r3, #3
 800c60c:	d11c      	bne.n	800c648 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c60e:	7dfa      	ldrb	r2, [r7, #23]
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	32ae      	adds	r2, #174	@ 0xae
 800c614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c618:	695b      	ldr	r3, [r3, #20]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d014      	beq.n	800c648 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c61e:	7dfa      	ldrb	r2, [r7, #23]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c626:	7dfa      	ldrb	r2, [r7, #23]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	32ae      	adds	r2, #174	@ 0xae
 800c62c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c630:	695b      	ldr	r3, [r3, #20]
 800c632:	7afa      	ldrb	r2, [r7, #11]
 800c634:	4611      	mov	r1, r2
 800c636:	68f8      	ldr	r0, [r7, #12]
 800c638:	4798      	blx	r3
 800c63a:	4603      	mov	r3, r0
 800c63c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c63e:	7dbb      	ldrb	r3, [r7, #22]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d001      	beq.n	800c648 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c644:	7dbb      	ldrb	r3, [r7, #22]
 800c646:	e000      	b.n	800c64a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c648:	2300      	movs	r3, #0
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3718      	adds	r7, #24
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}

0800c652 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c652:	b580      	push	{r7, lr}
 800c654:	b084      	sub	sp, #16
 800c656:	af00      	add	r7, sp, #0
 800c658:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c65a:	2300      	movs	r3, #0
 800c65c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2201      	movs	r2, #1
 800c662:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2200      	movs	r2, #0
 800c66a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2200      	movs	r2, #0
 800c672:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2200      	movs	r2, #0
 800c678:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2200      	movs	r2, #0
 800c680:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d014      	beq.n	800c6b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d00e      	beq.n	800c6b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	6852      	ldr	r2, [r2, #4]
 800c6a6:	b2d2      	uxtb	r2, r2
 800c6a8:	4611      	mov	r1, r2
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	4798      	blx	r3
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d001      	beq.n	800c6b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c6b4:	2303      	movs	r3, #3
 800c6b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c6b8:	2340      	movs	r3, #64	@ 0x40
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	2100      	movs	r1, #0
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f004 fffd 	bl	80116be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2240      	movs	r2, #64	@ 0x40
 800c6d0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c6d4:	2340      	movs	r3, #64	@ 0x40
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	2180      	movs	r1, #128	@ 0x80
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f004 ffef 	bl	80116be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2240      	movs	r2, #64	@ 0x40
 800c6ea:	621a      	str	r2, [r3, #32]

  return ret;
 800c6ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3710      	adds	r7, #16
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}

0800c6f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c6f6:	b480      	push	{r7}
 800c6f8:	b083      	sub	sp, #12
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
 800c6fe:	460b      	mov	r3, r1
 800c700:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	78fa      	ldrb	r2, [r7, #3]
 800c706:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c708:	2300      	movs	r3, #0
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	370c      	adds	r7, #12
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr

0800c716 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c716:	b480      	push	{r7}
 800c718:	b083      	sub	sp, #12
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c724:	b2db      	uxtb	r3, r3
 800c726:	2b04      	cmp	r3, #4
 800c728:	d006      	beq.n	800c738 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c730:	b2da      	uxtb	r2, r3
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2204      	movs	r2, #4
 800c73c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c740:	2300      	movs	r3, #0
}
 800c742:	4618      	mov	r0, r3
 800c744:	370c      	adds	r7, #12
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr

0800c74e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c74e:	b480      	push	{r7}
 800c750:	b083      	sub	sp, #12
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	2b04      	cmp	r3, #4
 800c760:	d106      	bne.n	800c770 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c768:	b2da      	uxtb	r2, r3
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c770:	2300      	movs	r3, #0
}
 800c772:	4618      	mov	r0, r3
 800c774:	370c      	adds	r7, #12
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr

0800c77e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c77e:	b580      	push	{r7, lr}
 800c780:	b082      	sub	sp, #8
 800c782:	af00      	add	r7, sp, #0
 800c784:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	2b03      	cmp	r3, #3
 800c790:	d110      	bne.n	800c7b4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d00b      	beq.n	800c7b4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7a2:	69db      	ldr	r3, [r3, #28]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d005      	beq.n	800c7b4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7ae:	69db      	ldr	r3, [r3, #28]
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c7b4:	2300      	movs	r3, #0
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3708      	adds	r7, #8
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}

0800c7be <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c7be:	b580      	push	{r7, lr}
 800c7c0:	b082      	sub	sp, #8
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
 800c7c6:	460b      	mov	r3, r1
 800c7c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	32ae      	adds	r2, #174	@ 0xae
 800c7d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d101      	bne.n	800c7e0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c7dc:	2303      	movs	r3, #3
 800c7de:	e01c      	b.n	800c81a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	2b03      	cmp	r3, #3
 800c7ea:	d115      	bne.n	800c818 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	32ae      	adds	r2, #174	@ 0xae
 800c7f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7fa:	6a1b      	ldr	r3, [r3, #32]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d00b      	beq.n	800c818 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	32ae      	adds	r2, #174	@ 0xae
 800c80a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c80e:	6a1b      	ldr	r3, [r3, #32]
 800c810:	78fa      	ldrb	r2, [r7, #3]
 800c812:	4611      	mov	r1, r2
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c818:	2300      	movs	r3, #0
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3708      	adds	r7, #8
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}

0800c822 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b082      	sub	sp, #8
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
 800c82a:	460b      	mov	r3, r1
 800c82c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	32ae      	adds	r2, #174	@ 0xae
 800c838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d101      	bne.n	800c844 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c840:	2303      	movs	r3, #3
 800c842:	e01c      	b.n	800c87e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	2b03      	cmp	r3, #3
 800c84e:	d115      	bne.n	800c87c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	32ae      	adds	r2, #174	@ 0xae
 800c85a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c85e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c860:	2b00      	cmp	r3, #0
 800c862:	d00b      	beq.n	800c87c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	32ae      	adds	r2, #174	@ 0xae
 800c86e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c874:	78fa      	ldrb	r2, [r7, #3]
 800c876:	4611      	mov	r1, r2
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c87c:	2300      	movs	r3, #0
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3708      	adds	r7, #8
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c886:	b480      	push	{r7}
 800c888:	b083      	sub	sp, #12
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c88e:	2300      	movs	r3, #0
}
 800c890:	4618      	mov	r0, r3
 800c892:	370c      	adds	r7, #12
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d00e      	beq.n	800c8d8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	6852      	ldr	r2, [r2, #4]
 800c8c6:	b2d2      	uxtb	r2, r2
 800c8c8:	4611      	mov	r1, r2
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	4798      	blx	r3
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d001      	beq.n	800c8d8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c8d4:	2303      	movs	r3, #3
 800c8d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c8e2:	b480      	push	{r7}
 800c8e4:	b083      	sub	sp, #12
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
 800c8ea:	460b      	mov	r3, r1
 800c8ec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c8ee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	370c      	adds	r7, #12
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr

0800c8fc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b083      	sub	sp, #12
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	460b      	mov	r3, r1
 800c906:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c908:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	370c      	adds	r7, #12
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr

0800c916 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b086      	sub	sp, #24
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
 800c91e:	460b      	mov	r3, r1
 800c920:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c92a:	2300      	movs	r3, #0
 800c92c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	885b      	ldrh	r3, [r3, #2]
 800c932:	b29b      	uxth	r3, r3
 800c934:	68fa      	ldr	r2, [r7, #12]
 800c936:	7812      	ldrb	r2, [r2, #0]
 800c938:	4293      	cmp	r3, r2
 800c93a:	d91f      	bls.n	800c97c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c942:	e013      	b.n	800c96c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c944:	f107 030a 	add.w	r3, r7, #10
 800c948:	4619      	mov	r1, r3
 800c94a:	6978      	ldr	r0, [r7, #20]
 800c94c:	f000 f81b 	bl	800c986 <USBD_GetNextDesc>
 800c950:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	785b      	ldrb	r3, [r3, #1]
 800c956:	2b05      	cmp	r3, #5
 800c958:	d108      	bne.n	800c96c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	789b      	ldrb	r3, [r3, #2]
 800c962:	78fa      	ldrb	r2, [r7, #3]
 800c964:	429a      	cmp	r2, r3
 800c966:	d008      	beq.n	800c97a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c968:	2300      	movs	r3, #0
 800c96a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	885b      	ldrh	r3, [r3, #2]
 800c970:	b29a      	uxth	r2, r3
 800c972:	897b      	ldrh	r3, [r7, #10]
 800c974:	429a      	cmp	r2, r3
 800c976:	d8e5      	bhi.n	800c944 <USBD_GetEpDesc+0x2e>
 800c978:	e000      	b.n	800c97c <USBD_GetEpDesc+0x66>
          break;
 800c97a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c97c:	693b      	ldr	r3, [r7, #16]
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3718      	adds	r7, #24
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c986:	b480      	push	{r7}
 800c988:	b085      	sub	sp, #20
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
 800c98e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	881b      	ldrh	r3, [r3, #0]
 800c998:	68fa      	ldr	r2, [r7, #12]
 800c99a:	7812      	ldrb	r2, [r2, #0]
 800c99c:	4413      	add	r3, r2
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	461a      	mov	r2, r3
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	4413      	add	r3, r2
 800c9ae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3714      	adds	r7, #20
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr

0800c9be <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c9be:	b480      	push	{r7}
 800c9c0:	b087      	sub	sp, #28
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c9dc:	8a3b      	ldrh	r3, [r7, #16]
 800c9de:	021b      	lsls	r3, r3, #8
 800c9e0:	b21a      	sxth	r2, r3
 800c9e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	b21b      	sxth	r3, r3
 800c9ea:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c9ec:	89fb      	ldrh	r3, [r7, #14]
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	371c      	adds	r7, #28
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr
	...

0800c9fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b084      	sub	sp, #16
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca06:	2300      	movs	r3, #0
 800ca08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ca12:	2b40      	cmp	r3, #64	@ 0x40
 800ca14:	d005      	beq.n	800ca22 <USBD_StdDevReq+0x26>
 800ca16:	2b40      	cmp	r3, #64	@ 0x40
 800ca18:	d857      	bhi.n	800caca <USBD_StdDevReq+0xce>
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00f      	beq.n	800ca3e <USBD_StdDevReq+0x42>
 800ca1e:	2b20      	cmp	r3, #32
 800ca20:	d153      	bne.n	800caca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	32ae      	adds	r2, #174	@ 0xae
 800ca2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca30:	689b      	ldr	r3, [r3, #8]
 800ca32:	6839      	ldr	r1, [r7, #0]
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	4798      	blx	r3
 800ca38:	4603      	mov	r3, r0
 800ca3a:	73fb      	strb	r3, [r7, #15]
      break;
 800ca3c:	e04a      	b.n	800cad4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	785b      	ldrb	r3, [r3, #1]
 800ca42:	2b09      	cmp	r3, #9
 800ca44:	d83b      	bhi.n	800cabe <USBD_StdDevReq+0xc2>
 800ca46:	a201      	add	r2, pc, #4	@ (adr r2, 800ca4c <USBD_StdDevReq+0x50>)
 800ca48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca4c:	0800caa1 	.word	0x0800caa1
 800ca50:	0800cab5 	.word	0x0800cab5
 800ca54:	0800cabf 	.word	0x0800cabf
 800ca58:	0800caab 	.word	0x0800caab
 800ca5c:	0800cabf 	.word	0x0800cabf
 800ca60:	0800ca7f 	.word	0x0800ca7f
 800ca64:	0800ca75 	.word	0x0800ca75
 800ca68:	0800cabf 	.word	0x0800cabf
 800ca6c:	0800ca97 	.word	0x0800ca97
 800ca70:	0800ca89 	.word	0x0800ca89
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ca74:	6839      	ldr	r1, [r7, #0]
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 fa3c 	bl	800cef4 <USBD_GetDescriptor>
          break;
 800ca7c:	e024      	b.n	800cac8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ca7e:	6839      	ldr	r1, [r7, #0]
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 fbcb 	bl	800d21c <USBD_SetAddress>
          break;
 800ca86:	e01f      	b.n	800cac8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ca88:	6839      	ldr	r1, [r7, #0]
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 fc0a 	bl	800d2a4 <USBD_SetConfig>
 800ca90:	4603      	mov	r3, r0
 800ca92:	73fb      	strb	r3, [r7, #15]
          break;
 800ca94:	e018      	b.n	800cac8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ca96:	6839      	ldr	r1, [r7, #0]
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f000 fcad 	bl	800d3f8 <USBD_GetConfig>
          break;
 800ca9e:	e013      	b.n	800cac8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800caa0:	6839      	ldr	r1, [r7, #0]
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 fcde 	bl	800d464 <USBD_GetStatus>
          break;
 800caa8:	e00e      	b.n	800cac8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800caaa:	6839      	ldr	r1, [r7, #0]
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 fd0d 	bl	800d4cc <USBD_SetFeature>
          break;
 800cab2:	e009      	b.n	800cac8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cab4:	6839      	ldr	r1, [r7, #0]
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 fd31 	bl	800d51e <USBD_ClrFeature>
          break;
 800cabc:	e004      	b.n	800cac8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cabe:	6839      	ldr	r1, [r7, #0]
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f000 fd88 	bl	800d5d6 <USBD_CtlError>
          break;
 800cac6:	bf00      	nop
      }
      break;
 800cac8:	e004      	b.n	800cad4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800caca:	6839      	ldr	r1, [r7, #0]
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f000 fd82 	bl	800d5d6 <USBD_CtlError>
      break;
 800cad2:	bf00      	nop
  }

  return ret;
 800cad4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3710      	adds	r7, #16
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop

0800cae0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800caea:	2300      	movs	r3, #0
 800caec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800caf6:	2b40      	cmp	r3, #64	@ 0x40
 800caf8:	d005      	beq.n	800cb06 <USBD_StdItfReq+0x26>
 800cafa:	2b40      	cmp	r3, #64	@ 0x40
 800cafc:	d852      	bhi.n	800cba4 <USBD_StdItfReq+0xc4>
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d001      	beq.n	800cb06 <USBD_StdItfReq+0x26>
 800cb02:	2b20      	cmp	r3, #32
 800cb04:	d14e      	bne.n	800cba4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	3b01      	subs	r3, #1
 800cb10:	2b02      	cmp	r3, #2
 800cb12:	d840      	bhi.n	800cb96 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	889b      	ldrh	r3, [r3, #4]
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d836      	bhi.n	800cb8c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	889b      	ldrh	r3, [r3, #4]
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	4619      	mov	r1, r3
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f7ff fedb 	bl	800c8e2 <USBD_CoreFindIF>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb30:	7bbb      	ldrb	r3, [r7, #14]
 800cb32:	2bff      	cmp	r3, #255	@ 0xff
 800cb34:	d01d      	beq.n	800cb72 <USBD_StdItfReq+0x92>
 800cb36:	7bbb      	ldrb	r3, [r7, #14]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d11a      	bne.n	800cb72 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cb3c:	7bba      	ldrb	r2, [r7, #14]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	32ae      	adds	r2, #174	@ 0xae
 800cb42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb46:	689b      	ldr	r3, [r3, #8]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d00f      	beq.n	800cb6c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cb4c:	7bba      	ldrb	r2, [r7, #14]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cb54:	7bba      	ldrb	r2, [r7, #14]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	32ae      	adds	r2, #174	@ 0xae
 800cb5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	6839      	ldr	r1, [r7, #0]
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	4798      	blx	r3
 800cb66:	4603      	mov	r3, r0
 800cb68:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cb6a:	e004      	b.n	800cb76 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cb6c:	2303      	movs	r3, #3
 800cb6e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cb70:	e001      	b.n	800cb76 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cb72:	2303      	movs	r3, #3
 800cb74:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	88db      	ldrh	r3, [r3, #6]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d110      	bne.n	800cba0 <USBD_StdItfReq+0xc0>
 800cb7e:	7bfb      	ldrb	r3, [r7, #15]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d10d      	bne.n	800cba0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f000 fdf1 	bl	800d76c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cb8a:	e009      	b.n	800cba0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cb8c:	6839      	ldr	r1, [r7, #0]
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f000 fd21 	bl	800d5d6 <USBD_CtlError>
          break;
 800cb94:	e004      	b.n	800cba0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cb96:	6839      	ldr	r1, [r7, #0]
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f000 fd1c 	bl	800d5d6 <USBD_CtlError>
          break;
 800cb9e:	e000      	b.n	800cba2 <USBD_StdItfReq+0xc2>
          break;
 800cba0:	bf00      	nop
      }
      break;
 800cba2:	e004      	b.n	800cbae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cba4:	6839      	ldr	r1, [r7, #0]
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f000 fd15 	bl	800d5d6 <USBD_CtlError>
      break;
 800cbac:	bf00      	nop
  }

  return ret;
 800cbae:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3710      	adds	r7, #16
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	889b      	ldrh	r3, [r3, #4]
 800cbca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cbd4:	2b40      	cmp	r3, #64	@ 0x40
 800cbd6:	d007      	beq.n	800cbe8 <USBD_StdEPReq+0x30>
 800cbd8:	2b40      	cmp	r3, #64	@ 0x40
 800cbda:	f200 817f 	bhi.w	800cedc <USBD_StdEPReq+0x324>
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d02a      	beq.n	800cc38 <USBD_StdEPReq+0x80>
 800cbe2:	2b20      	cmp	r3, #32
 800cbe4:	f040 817a 	bne.w	800cedc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cbe8:	7bbb      	ldrb	r3, [r7, #14]
 800cbea:	4619      	mov	r1, r3
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f7ff fe85 	bl	800c8fc <USBD_CoreFindEP>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cbf6:	7b7b      	ldrb	r3, [r7, #13]
 800cbf8:	2bff      	cmp	r3, #255	@ 0xff
 800cbfa:	f000 8174 	beq.w	800cee6 <USBD_StdEPReq+0x32e>
 800cbfe:	7b7b      	ldrb	r3, [r7, #13]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	f040 8170 	bne.w	800cee6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cc06:	7b7a      	ldrb	r2, [r7, #13]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cc0e:	7b7a      	ldrb	r2, [r7, #13]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	32ae      	adds	r2, #174	@ 0xae
 800cc14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc18:	689b      	ldr	r3, [r3, #8]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	f000 8163 	beq.w	800cee6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cc20:	7b7a      	ldrb	r2, [r7, #13]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	32ae      	adds	r2, #174	@ 0xae
 800cc26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc2a:	689b      	ldr	r3, [r3, #8]
 800cc2c:	6839      	ldr	r1, [r7, #0]
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	4798      	blx	r3
 800cc32:	4603      	mov	r3, r0
 800cc34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cc36:	e156      	b.n	800cee6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	785b      	ldrb	r3, [r3, #1]
 800cc3c:	2b03      	cmp	r3, #3
 800cc3e:	d008      	beq.n	800cc52 <USBD_StdEPReq+0x9a>
 800cc40:	2b03      	cmp	r3, #3
 800cc42:	f300 8145 	bgt.w	800ced0 <USBD_StdEPReq+0x318>
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	f000 809b 	beq.w	800cd82 <USBD_StdEPReq+0x1ca>
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d03c      	beq.n	800ccca <USBD_StdEPReq+0x112>
 800cc50:	e13e      	b.n	800ced0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	2b02      	cmp	r3, #2
 800cc5c:	d002      	beq.n	800cc64 <USBD_StdEPReq+0xac>
 800cc5e:	2b03      	cmp	r3, #3
 800cc60:	d016      	beq.n	800cc90 <USBD_StdEPReq+0xd8>
 800cc62:	e02c      	b.n	800ccbe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc64:	7bbb      	ldrb	r3, [r7, #14]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d00d      	beq.n	800cc86 <USBD_StdEPReq+0xce>
 800cc6a:	7bbb      	ldrb	r3, [r7, #14]
 800cc6c:	2b80      	cmp	r3, #128	@ 0x80
 800cc6e:	d00a      	beq.n	800cc86 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc70:	7bbb      	ldrb	r3, [r7, #14]
 800cc72:	4619      	mov	r1, r3
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f004 fd67 	bl	8011748 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc7a:	2180      	movs	r1, #128	@ 0x80
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f004 fd63 	bl	8011748 <USBD_LL_StallEP>
 800cc82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc84:	e020      	b.n	800ccc8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cc86:	6839      	ldr	r1, [r7, #0]
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f000 fca4 	bl	800d5d6 <USBD_CtlError>
              break;
 800cc8e:	e01b      	b.n	800ccc8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	885b      	ldrh	r3, [r3, #2]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d10e      	bne.n	800ccb6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cc98:	7bbb      	ldrb	r3, [r7, #14]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d00b      	beq.n	800ccb6 <USBD_StdEPReq+0xfe>
 800cc9e:	7bbb      	ldrb	r3, [r7, #14]
 800cca0:	2b80      	cmp	r3, #128	@ 0x80
 800cca2:	d008      	beq.n	800ccb6 <USBD_StdEPReq+0xfe>
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	88db      	ldrh	r3, [r3, #6]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d104      	bne.n	800ccb6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ccac:	7bbb      	ldrb	r3, [r7, #14]
 800ccae:	4619      	mov	r1, r3
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f004 fd49 	bl	8011748 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f000 fd58 	bl	800d76c <USBD_CtlSendStatus>

              break;
 800ccbc:	e004      	b.n	800ccc8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ccbe:	6839      	ldr	r1, [r7, #0]
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 fc88 	bl	800d5d6 <USBD_CtlError>
              break;
 800ccc6:	bf00      	nop
          }
          break;
 800ccc8:	e107      	b.n	800ceda <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ccd0:	b2db      	uxtb	r3, r3
 800ccd2:	2b02      	cmp	r3, #2
 800ccd4:	d002      	beq.n	800ccdc <USBD_StdEPReq+0x124>
 800ccd6:	2b03      	cmp	r3, #3
 800ccd8:	d016      	beq.n	800cd08 <USBD_StdEPReq+0x150>
 800ccda:	e04b      	b.n	800cd74 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ccdc:	7bbb      	ldrb	r3, [r7, #14]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d00d      	beq.n	800ccfe <USBD_StdEPReq+0x146>
 800cce2:	7bbb      	ldrb	r3, [r7, #14]
 800cce4:	2b80      	cmp	r3, #128	@ 0x80
 800cce6:	d00a      	beq.n	800ccfe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cce8:	7bbb      	ldrb	r3, [r7, #14]
 800ccea:	4619      	mov	r1, r3
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f004 fd2b 	bl	8011748 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ccf2:	2180      	movs	r1, #128	@ 0x80
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f004 fd27 	bl	8011748 <USBD_LL_StallEP>
 800ccfa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ccfc:	e040      	b.n	800cd80 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ccfe:	6839      	ldr	r1, [r7, #0]
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 fc68 	bl	800d5d6 <USBD_CtlError>
              break;
 800cd06:	e03b      	b.n	800cd80 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	885b      	ldrh	r3, [r3, #2]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d136      	bne.n	800cd7e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cd10:	7bbb      	ldrb	r3, [r7, #14]
 800cd12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d004      	beq.n	800cd24 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cd1a:	7bbb      	ldrb	r3, [r7, #14]
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f004 fd31 	bl	8011786 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f000 fd21 	bl	800d76c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cd2a:	7bbb      	ldrb	r3, [r7, #14]
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f7ff fde4 	bl	800c8fc <USBD_CoreFindEP>
 800cd34:	4603      	mov	r3, r0
 800cd36:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cd38:	7b7b      	ldrb	r3, [r7, #13]
 800cd3a:	2bff      	cmp	r3, #255	@ 0xff
 800cd3c:	d01f      	beq.n	800cd7e <USBD_StdEPReq+0x1c6>
 800cd3e:	7b7b      	ldrb	r3, [r7, #13]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d11c      	bne.n	800cd7e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cd44:	7b7a      	ldrb	r2, [r7, #13]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cd4c:	7b7a      	ldrb	r2, [r7, #13]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	32ae      	adds	r2, #174	@ 0xae
 800cd52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd56:	689b      	ldr	r3, [r3, #8]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d010      	beq.n	800cd7e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cd5c:	7b7a      	ldrb	r2, [r7, #13]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	32ae      	adds	r2, #174	@ 0xae
 800cd62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	6839      	ldr	r1, [r7, #0]
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	4798      	blx	r3
 800cd6e:	4603      	mov	r3, r0
 800cd70:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cd72:	e004      	b.n	800cd7e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cd74:	6839      	ldr	r1, [r7, #0]
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 fc2d 	bl	800d5d6 <USBD_CtlError>
              break;
 800cd7c:	e000      	b.n	800cd80 <USBD_StdEPReq+0x1c8>
              break;
 800cd7e:	bf00      	nop
          }
          break;
 800cd80:	e0ab      	b.n	800ceda <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd88:	b2db      	uxtb	r3, r3
 800cd8a:	2b02      	cmp	r3, #2
 800cd8c:	d002      	beq.n	800cd94 <USBD_StdEPReq+0x1dc>
 800cd8e:	2b03      	cmp	r3, #3
 800cd90:	d032      	beq.n	800cdf8 <USBD_StdEPReq+0x240>
 800cd92:	e097      	b.n	800cec4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd94:	7bbb      	ldrb	r3, [r7, #14]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d007      	beq.n	800cdaa <USBD_StdEPReq+0x1f2>
 800cd9a:	7bbb      	ldrb	r3, [r7, #14]
 800cd9c:	2b80      	cmp	r3, #128	@ 0x80
 800cd9e:	d004      	beq.n	800cdaa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cda0:	6839      	ldr	r1, [r7, #0]
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f000 fc17 	bl	800d5d6 <USBD_CtlError>
                break;
 800cda8:	e091      	b.n	800cece <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cdaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	da0b      	bge.n	800cdca <USBD_StdEPReq+0x212>
 800cdb2:	7bbb      	ldrb	r3, [r7, #14]
 800cdb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cdb8:	4613      	mov	r3, r2
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	4413      	add	r3, r2
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	3310      	adds	r3, #16
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	4413      	add	r3, r2
 800cdc6:	3304      	adds	r3, #4
 800cdc8:	e00b      	b.n	800cde2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cdca:	7bbb      	ldrb	r3, [r7, #14]
 800cdcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cdd0:	4613      	mov	r3, r2
 800cdd2:	009b      	lsls	r3, r3, #2
 800cdd4:	4413      	add	r3, r2
 800cdd6:	009b      	lsls	r3, r3, #2
 800cdd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	4413      	add	r3, r2
 800cde0:	3304      	adds	r3, #4
 800cde2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	2200      	movs	r2, #0
 800cde8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	2202      	movs	r2, #2
 800cdee:	4619      	mov	r1, r3
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f000 fc61 	bl	800d6b8 <USBD_CtlSendData>
              break;
 800cdf6:	e06a      	b.n	800cece <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cdf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	da11      	bge.n	800ce24 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ce00:	7bbb      	ldrb	r3, [r7, #14]
 800ce02:	f003 020f 	and.w	r2, r3, #15
 800ce06:	6879      	ldr	r1, [r7, #4]
 800ce08:	4613      	mov	r3, r2
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	4413      	add	r3, r2
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	440b      	add	r3, r1
 800ce12:	3324      	adds	r3, #36	@ 0x24
 800ce14:	881b      	ldrh	r3, [r3, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d117      	bne.n	800ce4a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ce1a:	6839      	ldr	r1, [r7, #0]
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 fbda 	bl	800d5d6 <USBD_CtlError>
                  break;
 800ce22:	e054      	b.n	800cece <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ce24:	7bbb      	ldrb	r3, [r7, #14]
 800ce26:	f003 020f 	and.w	r2, r3, #15
 800ce2a:	6879      	ldr	r1, [r7, #4]
 800ce2c:	4613      	mov	r3, r2
 800ce2e:	009b      	lsls	r3, r3, #2
 800ce30:	4413      	add	r3, r2
 800ce32:	009b      	lsls	r3, r3, #2
 800ce34:	440b      	add	r3, r1
 800ce36:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ce3a:	881b      	ldrh	r3, [r3, #0]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d104      	bne.n	800ce4a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ce40:	6839      	ldr	r1, [r7, #0]
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 fbc7 	bl	800d5d6 <USBD_CtlError>
                  break;
 800ce48:	e041      	b.n	800cece <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	da0b      	bge.n	800ce6a <USBD_StdEPReq+0x2b2>
 800ce52:	7bbb      	ldrb	r3, [r7, #14]
 800ce54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ce58:	4613      	mov	r3, r2
 800ce5a:	009b      	lsls	r3, r3, #2
 800ce5c:	4413      	add	r3, r2
 800ce5e:	009b      	lsls	r3, r3, #2
 800ce60:	3310      	adds	r3, #16
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	4413      	add	r3, r2
 800ce66:	3304      	adds	r3, #4
 800ce68:	e00b      	b.n	800ce82 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ce6a:	7bbb      	ldrb	r3, [r7, #14]
 800ce6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce70:	4613      	mov	r3, r2
 800ce72:	009b      	lsls	r3, r3, #2
 800ce74:	4413      	add	r3, r2
 800ce76:	009b      	lsls	r3, r3, #2
 800ce78:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	4413      	add	r3, r2
 800ce80:	3304      	adds	r3, #4
 800ce82:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ce84:	7bbb      	ldrb	r3, [r7, #14]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d002      	beq.n	800ce90 <USBD_StdEPReq+0x2d8>
 800ce8a:	7bbb      	ldrb	r3, [r7, #14]
 800ce8c:	2b80      	cmp	r3, #128	@ 0x80
 800ce8e:	d103      	bne.n	800ce98 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	2200      	movs	r2, #0
 800ce94:	601a      	str	r2, [r3, #0]
 800ce96:	e00e      	b.n	800ceb6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ce98:	7bbb      	ldrb	r3, [r7, #14]
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f004 fc91 	bl	80117c4 <USBD_LL_IsStallEP>
 800cea2:	4603      	mov	r3, r0
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d003      	beq.n	800ceb0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	2201      	movs	r2, #1
 800ceac:	601a      	str	r2, [r3, #0]
 800ceae:	e002      	b.n	800ceb6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	2202      	movs	r2, #2
 800ceba:	4619      	mov	r1, r3
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f000 fbfb 	bl	800d6b8 <USBD_CtlSendData>
              break;
 800cec2:	e004      	b.n	800cece <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cec4:	6839      	ldr	r1, [r7, #0]
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 fb85 	bl	800d5d6 <USBD_CtlError>
              break;
 800cecc:	bf00      	nop
          }
          break;
 800cece:	e004      	b.n	800ceda <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ced0:	6839      	ldr	r1, [r7, #0]
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f000 fb7f 	bl	800d5d6 <USBD_CtlError>
          break;
 800ced8:	bf00      	nop
      }
      break;
 800ceda:	e005      	b.n	800cee8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cedc:	6839      	ldr	r1, [r7, #0]
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f000 fb79 	bl	800d5d6 <USBD_CtlError>
      break;
 800cee4:	e000      	b.n	800cee8 <USBD_StdEPReq+0x330>
      break;
 800cee6:	bf00      	nop
  }

  return ret;
 800cee8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3710      	adds	r7, #16
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
	...

0800cef4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b084      	sub	sp, #16
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cefe:	2300      	movs	r3, #0
 800cf00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cf02:	2300      	movs	r3, #0
 800cf04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cf06:	2300      	movs	r3, #0
 800cf08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	885b      	ldrh	r3, [r3, #2]
 800cf0e:	0a1b      	lsrs	r3, r3, #8
 800cf10:	b29b      	uxth	r3, r3
 800cf12:	3b01      	subs	r3, #1
 800cf14:	2b0e      	cmp	r3, #14
 800cf16:	f200 8152 	bhi.w	800d1be <USBD_GetDescriptor+0x2ca>
 800cf1a:	a201      	add	r2, pc, #4	@ (adr r2, 800cf20 <USBD_GetDescriptor+0x2c>)
 800cf1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf20:	0800cf91 	.word	0x0800cf91
 800cf24:	0800cfa9 	.word	0x0800cfa9
 800cf28:	0800cfe9 	.word	0x0800cfe9
 800cf2c:	0800d1bf 	.word	0x0800d1bf
 800cf30:	0800d1bf 	.word	0x0800d1bf
 800cf34:	0800d15f 	.word	0x0800d15f
 800cf38:	0800d18b 	.word	0x0800d18b
 800cf3c:	0800d1bf 	.word	0x0800d1bf
 800cf40:	0800d1bf 	.word	0x0800d1bf
 800cf44:	0800d1bf 	.word	0x0800d1bf
 800cf48:	0800d1bf 	.word	0x0800d1bf
 800cf4c:	0800d1bf 	.word	0x0800d1bf
 800cf50:	0800d1bf 	.word	0x0800d1bf
 800cf54:	0800d1bf 	.word	0x0800d1bf
 800cf58:	0800cf5d 	.word	0x0800cf5d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf62:	69db      	ldr	r3, [r3, #28]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d00b      	beq.n	800cf80 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf6e:	69db      	ldr	r3, [r3, #28]
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	7c12      	ldrb	r2, [r2, #16]
 800cf74:	f107 0108 	add.w	r1, r7, #8
 800cf78:	4610      	mov	r0, r2
 800cf7a:	4798      	blx	r3
 800cf7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf7e:	e126      	b.n	800d1ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cf80:	6839      	ldr	r1, [r7, #0]
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f000 fb27 	bl	800d5d6 <USBD_CtlError>
        err++;
 800cf88:	7afb      	ldrb	r3, [r7, #11]
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	72fb      	strb	r3, [r7, #11]
      break;
 800cf8e:	e11e      	b.n	800d1ce <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	7c12      	ldrb	r2, [r2, #16]
 800cf9c:	f107 0108 	add.w	r1, r7, #8
 800cfa0:	4610      	mov	r0, r2
 800cfa2:	4798      	blx	r3
 800cfa4:	60f8      	str	r0, [r7, #12]
      break;
 800cfa6:	e112      	b.n	800d1ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	7c1b      	ldrb	r3, [r3, #16]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d10d      	bne.n	800cfcc <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cfb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfb8:	f107 0208 	add.w	r2, r7, #8
 800cfbc:	4610      	mov	r0, r2
 800cfbe:	4798      	blx	r3
 800cfc0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	2202      	movs	r2, #2
 800cfc8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cfca:	e100      	b.n	800d1ce <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cfd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfd4:	f107 0208 	add.w	r2, r7, #8
 800cfd8:	4610      	mov	r0, r2
 800cfda:	4798      	blx	r3
 800cfdc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	2202      	movs	r2, #2
 800cfe4:	701a      	strb	r2, [r3, #0]
      break;
 800cfe6:	e0f2      	b.n	800d1ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	885b      	ldrh	r3, [r3, #2]
 800cfec:	b2db      	uxtb	r3, r3
 800cfee:	2b05      	cmp	r3, #5
 800cff0:	f200 80ac 	bhi.w	800d14c <USBD_GetDescriptor+0x258>
 800cff4:	a201      	add	r2, pc, #4	@ (adr r2, 800cffc <USBD_GetDescriptor+0x108>)
 800cff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cffa:	bf00      	nop
 800cffc:	0800d015 	.word	0x0800d015
 800d000:	0800d049 	.word	0x0800d049
 800d004:	0800d07d 	.word	0x0800d07d
 800d008:	0800d0b1 	.word	0x0800d0b1
 800d00c:	0800d0e5 	.word	0x0800d0e5
 800d010:	0800d119 	.word	0x0800d119
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d00b      	beq.n	800d038 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	687a      	ldr	r2, [r7, #4]
 800d02a:	7c12      	ldrb	r2, [r2, #16]
 800d02c:	f107 0108 	add.w	r1, r7, #8
 800d030:	4610      	mov	r0, r2
 800d032:	4798      	blx	r3
 800d034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d036:	e091      	b.n	800d15c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d038:	6839      	ldr	r1, [r7, #0]
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f000 facb 	bl	800d5d6 <USBD_CtlError>
            err++;
 800d040:	7afb      	ldrb	r3, [r7, #11]
 800d042:	3301      	adds	r3, #1
 800d044:	72fb      	strb	r3, [r7, #11]
          break;
 800d046:	e089      	b.n	800d15c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d04e:	689b      	ldr	r3, [r3, #8]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d00b      	beq.n	800d06c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d05a:	689b      	ldr	r3, [r3, #8]
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	7c12      	ldrb	r2, [r2, #16]
 800d060:	f107 0108 	add.w	r1, r7, #8
 800d064:	4610      	mov	r0, r2
 800d066:	4798      	blx	r3
 800d068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d06a:	e077      	b.n	800d15c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d06c:	6839      	ldr	r1, [r7, #0]
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f000 fab1 	bl	800d5d6 <USBD_CtlError>
            err++;
 800d074:	7afb      	ldrb	r3, [r7, #11]
 800d076:	3301      	adds	r3, #1
 800d078:	72fb      	strb	r3, [r7, #11]
          break;
 800d07a:	e06f      	b.n	800d15c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d00b      	beq.n	800d0a0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d08e:	68db      	ldr	r3, [r3, #12]
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	7c12      	ldrb	r2, [r2, #16]
 800d094:	f107 0108 	add.w	r1, r7, #8
 800d098:	4610      	mov	r0, r2
 800d09a:	4798      	blx	r3
 800d09c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d09e:	e05d      	b.n	800d15c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d0a0:	6839      	ldr	r1, [r7, #0]
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f000 fa97 	bl	800d5d6 <USBD_CtlError>
            err++;
 800d0a8:	7afb      	ldrb	r3, [r7, #11]
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	72fb      	strb	r3, [r7, #11]
          break;
 800d0ae:	e055      	b.n	800d15c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0b6:	691b      	ldr	r3, [r3, #16]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d00b      	beq.n	800d0d4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0c2:	691b      	ldr	r3, [r3, #16]
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	7c12      	ldrb	r2, [r2, #16]
 800d0c8:	f107 0108 	add.w	r1, r7, #8
 800d0cc:	4610      	mov	r0, r2
 800d0ce:	4798      	blx	r3
 800d0d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0d2:	e043      	b.n	800d15c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d0d4:	6839      	ldr	r1, [r7, #0]
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 fa7d 	bl	800d5d6 <USBD_CtlError>
            err++;
 800d0dc:	7afb      	ldrb	r3, [r7, #11]
 800d0de:	3301      	adds	r3, #1
 800d0e0:	72fb      	strb	r3, [r7, #11]
          break;
 800d0e2:	e03b      	b.n	800d15c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0ea:	695b      	ldr	r3, [r3, #20]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d00b      	beq.n	800d108 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0f6:	695b      	ldr	r3, [r3, #20]
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	7c12      	ldrb	r2, [r2, #16]
 800d0fc:	f107 0108 	add.w	r1, r7, #8
 800d100:	4610      	mov	r0, r2
 800d102:	4798      	blx	r3
 800d104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d106:	e029      	b.n	800d15c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d108:	6839      	ldr	r1, [r7, #0]
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 fa63 	bl	800d5d6 <USBD_CtlError>
            err++;
 800d110:	7afb      	ldrb	r3, [r7, #11]
 800d112:	3301      	adds	r3, #1
 800d114:	72fb      	strb	r3, [r7, #11]
          break;
 800d116:	e021      	b.n	800d15c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d11e:	699b      	ldr	r3, [r3, #24]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d00b      	beq.n	800d13c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d12a:	699b      	ldr	r3, [r3, #24]
 800d12c:	687a      	ldr	r2, [r7, #4]
 800d12e:	7c12      	ldrb	r2, [r2, #16]
 800d130:	f107 0108 	add.w	r1, r7, #8
 800d134:	4610      	mov	r0, r2
 800d136:	4798      	blx	r3
 800d138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d13a:	e00f      	b.n	800d15c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d13c:	6839      	ldr	r1, [r7, #0]
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f000 fa49 	bl	800d5d6 <USBD_CtlError>
            err++;
 800d144:	7afb      	ldrb	r3, [r7, #11]
 800d146:	3301      	adds	r3, #1
 800d148:	72fb      	strb	r3, [r7, #11]
          break;
 800d14a:	e007      	b.n	800d15c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d14c:	6839      	ldr	r1, [r7, #0]
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 fa41 	bl	800d5d6 <USBD_CtlError>
          err++;
 800d154:	7afb      	ldrb	r3, [r7, #11]
 800d156:	3301      	adds	r3, #1
 800d158:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d15a:	bf00      	nop
      }
      break;
 800d15c:	e037      	b.n	800d1ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	7c1b      	ldrb	r3, [r3, #16]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d109      	bne.n	800d17a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d16c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d16e:	f107 0208 	add.w	r2, r7, #8
 800d172:	4610      	mov	r0, r2
 800d174:	4798      	blx	r3
 800d176:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d178:	e029      	b.n	800d1ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d17a:	6839      	ldr	r1, [r7, #0]
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 fa2a 	bl	800d5d6 <USBD_CtlError>
        err++;
 800d182:	7afb      	ldrb	r3, [r7, #11]
 800d184:	3301      	adds	r3, #1
 800d186:	72fb      	strb	r3, [r7, #11]
      break;
 800d188:	e021      	b.n	800d1ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	7c1b      	ldrb	r3, [r3, #16]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d10d      	bne.n	800d1ae <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d19a:	f107 0208 	add.w	r2, r7, #8
 800d19e:	4610      	mov	r0, r2
 800d1a0:	4798      	blx	r3
 800d1a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	2207      	movs	r2, #7
 800d1aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d1ac:	e00f      	b.n	800d1ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d1ae:	6839      	ldr	r1, [r7, #0]
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f000 fa10 	bl	800d5d6 <USBD_CtlError>
        err++;
 800d1b6:	7afb      	ldrb	r3, [r7, #11]
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	72fb      	strb	r3, [r7, #11]
      break;
 800d1bc:	e007      	b.n	800d1ce <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d1be:	6839      	ldr	r1, [r7, #0]
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f000 fa08 	bl	800d5d6 <USBD_CtlError>
      err++;
 800d1c6:	7afb      	ldrb	r3, [r7, #11]
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	72fb      	strb	r3, [r7, #11]
      break;
 800d1cc:	bf00      	nop
  }

  if (err != 0U)
 800d1ce:	7afb      	ldrb	r3, [r7, #11]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d11e      	bne.n	800d212 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	88db      	ldrh	r3, [r3, #6]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d016      	beq.n	800d20a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d1dc:	893b      	ldrh	r3, [r7, #8]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d00e      	beq.n	800d200 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	88da      	ldrh	r2, [r3, #6]
 800d1e6:	893b      	ldrh	r3, [r7, #8]
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	bf28      	it	cs
 800d1ec:	4613      	movcs	r3, r2
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d1f2:	893b      	ldrh	r3, [r7, #8]
 800d1f4:	461a      	mov	r2, r3
 800d1f6:	68f9      	ldr	r1, [r7, #12]
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 fa5d 	bl	800d6b8 <USBD_CtlSendData>
 800d1fe:	e009      	b.n	800d214 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d200:	6839      	ldr	r1, [r7, #0]
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f000 f9e7 	bl	800d5d6 <USBD_CtlError>
 800d208:	e004      	b.n	800d214 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 faae 	bl	800d76c <USBD_CtlSendStatus>
 800d210:	e000      	b.n	800d214 <USBD_GetDescriptor+0x320>
    return;
 800d212:	bf00      	nop
  }
}
 800d214:	3710      	adds	r7, #16
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop

0800d21c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
 800d224:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	889b      	ldrh	r3, [r3, #4]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d131      	bne.n	800d292 <USBD_SetAddress+0x76>
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	88db      	ldrh	r3, [r3, #6]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d12d      	bne.n	800d292 <USBD_SetAddress+0x76>
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	885b      	ldrh	r3, [r3, #2]
 800d23a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d23c:	d829      	bhi.n	800d292 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	885b      	ldrh	r3, [r3, #2]
 800d242:	b2db      	uxtb	r3, r3
 800d244:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d248:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d250:	b2db      	uxtb	r3, r3
 800d252:	2b03      	cmp	r3, #3
 800d254:	d104      	bne.n	800d260 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d256:	6839      	ldr	r1, [r7, #0]
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 f9bc 	bl	800d5d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d25e:	e01d      	b.n	800d29c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	7bfa      	ldrb	r2, [r7, #15]
 800d264:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d268:	7bfb      	ldrb	r3, [r7, #15]
 800d26a:	4619      	mov	r1, r3
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f004 fad5 	bl	801181c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f000 fa7a 	bl	800d76c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d278:	7bfb      	ldrb	r3, [r7, #15]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d004      	beq.n	800d288 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2202      	movs	r2, #2
 800d282:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d286:	e009      	b.n	800d29c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2201      	movs	r2, #1
 800d28c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d290:	e004      	b.n	800d29c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d292:	6839      	ldr	r1, [r7, #0]
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 f99e 	bl	800d5d6 <USBD_CtlError>
  }
}
 800d29a:	bf00      	nop
 800d29c:	bf00      	nop
 800d29e:	3710      	adds	r7, #16
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	885b      	ldrh	r3, [r3, #2]
 800d2b6:	b2da      	uxtb	r2, r3
 800d2b8:	4b4e      	ldr	r3, [pc, #312]	@ (800d3f4 <USBD_SetConfig+0x150>)
 800d2ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d2bc:	4b4d      	ldr	r3, [pc, #308]	@ (800d3f4 <USBD_SetConfig+0x150>)
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	d905      	bls.n	800d2d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d2c4:	6839      	ldr	r1, [r7, #0]
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 f985 	bl	800d5d6 <USBD_CtlError>
    return USBD_FAIL;
 800d2cc:	2303      	movs	r3, #3
 800d2ce:	e08c      	b.n	800d3ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2d6:	b2db      	uxtb	r3, r3
 800d2d8:	2b02      	cmp	r3, #2
 800d2da:	d002      	beq.n	800d2e2 <USBD_SetConfig+0x3e>
 800d2dc:	2b03      	cmp	r3, #3
 800d2de:	d029      	beq.n	800d334 <USBD_SetConfig+0x90>
 800d2e0:	e075      	b.n	800d3ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d2e2:	4b44      	ldr	r3, [pc, #272]	@ (800d3f4 <USBD_SetConfig+0x150>)
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d020      	beq.n	800d32c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d2ea:	4b42      	ldr	r3, [pc, #264]	@ (800d3f4 <USBD_SetConfig+0x150>)
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d2f4:	4b3f      	ldr	r3, [pc, #252]	@ (800d3f4 <USBD_SetConfig+0x150>)
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f7fe ffb9 	bl	800c272 <USBD_SetClassConfig>
 800d300:	4603      	mov	r3, r0
 800d302:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d304:	7bfb      	ldrb	r3, [r7, #15]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d008      	beq.n	800d31c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d30a:	6839      	ldr	r1, [r7, #0]
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 f962 	bl	800d5d6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2202      	movs	r2, #2
 800d316:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d31a:	e065      	b.n	800d3e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f000 fa25 	bl	800d76c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2203      	movs	r2, #3
 800d326:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d32a:	e05d      	b.n	800d3e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f000 fa1d 	bl	800d76c <USBD_CtlSendStatus>
      break;
 800d332:	e059      	b.n	800d3e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d334:	4b2f      	ldr	r3, [pc, #188]	@ (800d3f4 <USBD_SetConfig+0x150>)
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d112      	bne.n	800d362 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2202      	movs	r2, #2
 800d340:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d344:	4b2b      	ldr	r3, [pc, #172]	@ (800d3f4 <USBD_SetConfig+0x150>)
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	461a      	mov	r2, r3
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d34e:	4b29      	ldr	r3, [pc, #164]	@ (800d3f4 <USBD_SetConfig+0x150>)
 800d350:	781b      	ldrb	r3, [r3, #0]
 800d352:	4619      	mov	r1, r3
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f7fe ffa8 	bl	800c2aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 fa06 	bl	800d76c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d360:	e042      	b.n	800d3e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d362:	4b24      	ldr	r3, [pc, #144]	@ (800d3f4 <USBD_SetConfig+0x150>)
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	461a      	mov	r2, r3
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d02a      	beq.n	800d3c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	b2db      	uxtb	r3, r3
 800d376:	4619      	mov	r1, r3
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f7fe ff96 	bl	800c2aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d37e:	4b1d      	ldr	r3, [pc, #116]	@ (800d3f4 <USBD_SetConfig+0x150>)
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	461a      	mov	r2, r3
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d388:	4b1a      	ldr	r3, [pc, #104]	@ (800d3f4 <USBD_SetConfig+0x150>)
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	4619      	mov	r1, r3
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f7fe ff6f 	bl	800c272 <USBD_SetClassConfig>
 800d394:	4603      	mov	r3, r0
 800d396:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d398:	7bfb      	ldrb	r3, [r7, #15]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d00f      	beq.n	800d3be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d39e:	6839      	ldr	r1, [r7, #0]
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 f918 	bl	800d5d6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	b2db      	uxtb	r3, r3
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f7fe ff7b 	bl	800c2aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2202      	movs	r2, #2
 800d3b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d3bc:	e014      	b.n	800d3e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f000 f9d4 	bl	800d76c <USBD_CtlSendStatus>
      break;
 800d3c4:	e010      	b.n	800d3e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f000 f9d0 	bl	800d76c <USBD_CtlSendStatus>
      break;
 800d3cc:	e00c      	b.n	800d3e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d3ce:	6839      	ldr	r1, [r7, #0]
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f000 f900 	bl	800d5d6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d3d6:	4b07      	ldr	r3, [pc, #28]	@ (800d3f4 <USBD_SetConfig+0x150>)
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	4619      	mov	r1, r3
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f7fe ff64 	bl	800c2aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d3e2:	2303      	movs	r3, #3
 800d3e4:	73fb      	strb	r3, [r7, #15]
      break;
 800d3e6:	bf00      	nop
  }

  return ret;
 800d3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3710      	adds	r7, #16
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	20000648 	.word	0x20000648

0800d3f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	88db      	ldrh	r3, [r3, #6]
 800d406:	2b01      	cmp	r3, #1
 800d408:	d004      	beq.n	800d414 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d40a:	6839      	ldr	r1, [r7, #0]
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f000 f8e2 	bl	800d5d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d412:	e023      	b.n	800d45c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	2b02      	cmp	r3, #2
 800d41e:	dc02      	bgt.n	800d426 <USBD_GetConfig+0x2e>
 800d420:	2b00      	cmp	r3, #0
 800d422:	dc03      	bgt.n	800d42c <USBD_GetConfig+0x34>
 800d424:	e015      	b.n	800d452 <USBD_GetConfig+0x5a>
 800d426:	2b03      	cmp	r3, #3
 800d428:	d00b      	beq.n	800d442 <USBD_GetConfig+0x4a>
 800d42a:	e012      	b.n	800d452 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2200      	movs	r2, #0
 800d430:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	3308      	adds	r3, #8
 800d436:	2201      	movs	r2, #1
 800d438:	4619      	mov	r1, r3
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f000 f93c 	bl	800d6b8 <USBD_CtlSendData>
        break;
 800d440:	e00c      	b.n	800d45c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	3304      	adds	r3, #4
 800d446:	2201      	movs	r2, #1
 800d448:	4619      	mov	r1, r3
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f000 f934 	bl	800d6b8 <USBD_CtlSendData>
        break;
 800d450:	e004      	b.n	800d45c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d452:	6839      	ldr	r1, [r7, #0]
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f000 f8be 	bl	800d5d6 <USBD_CtlError>
        break;
 800d45a:	bf00      	nop
}
 800d45c:	bf00      	nop
 800d45e:	3708      	adds	r7, #8
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d474:	b2db      	uxtb	r3, r3
 800d476:	3b01      	subs	r3, #1
 800d478:	2b02      	cmp	r3, #2
 800d47a:	d81e      	bhi.n	800d4ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	88db      	ldrh	r3, [r3, #6]
 800d480:	2b02      	cmp	r3, #2
 800d482:	d004      	beq.n	800d48e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d484:	6839      	ldr	r1, [r7, #0]
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 f8a5 	bl	800d5d6 <USBD_CtlError>
        break;
 800d48c:	e01a      	b.n	800d4c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2201      	movs	r2, #1
 800d492:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d005      	beq.n	800d4aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	68db      	ldr	r3, [r3, #12]
 800d4a2:	f043 0202 	orr.w	r2, r3, #2
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	330c      	adds	r3, #12
 800d4ae:	2202      	movs	r2, #2
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 f900 	bl	800d6b8 <USBD_CtlSendData>
      break;
 800d4b8:	e004      	b.n	800d4c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d4ba:	6839      	ldr	r1, [r7, #0]
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 f88a 	bl	800d5d6 <USBD_CtlError>
      break;
 800d4c2:	bf00      	nop
  }
}
 800d4c4:	bf00      	nop
 800d4c6:	3708      	adds	r7, #8
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	885b      	ldrh	r3, [r3, #2]
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	d107      	bne.n	800d4ee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 f940 	bl	800d76c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d4ec:	e013      	b.n	800d516 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	885b      	ldrh	r3, [r3, #2]
 800d4f2:	2b02      	cmp	r3, #2
 800d4f4:	d10b      	bne.n	800d50e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	889b      	ldrh	r3, [r3, #4]
 800d4fa:	0a1b      	lsrs	r3, r3, #8
 800d4fc:	b29b      	uxth	r3, r3
 800d4fe:	b2da      	uxtb	r2, r3
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f000 f930 	bl	800d76c <USBD_CtlSendStatus>
}
 800d50c:	e003      	b.n	800d516 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d50e:	6839      	ldr	r1, [r7, #0]
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f000 f860 	bl	800d5d6 <USBD_CtlError>
}
 800d516:	bf00      	nop
 800d518:	3708      	adds	r7, #8
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d51e:	b580      	push	{r7, lr}
 800d520:	b082      	sub	sp, #8
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
 800d526:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	3b01      	subs	r3, #1
 800d532:	2b02      	cmp	r3, #2
 800d534:	d80b      	bhi.n	800d54e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	885b      	ldrh	r3, [r3, #2]
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d10c      	bne.n	800d558 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2200      	movs	r2, #0
 800d542:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f000 f910 	bl	800d76c <USBD_CtlSendStatus>
      }
      break;
 800d54c:	e004      	b.n	800d558 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d54e:	6839      	ldr	r1, [r7, #0]
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 f840 	bl	800d5d6 <USBD_CtlError>
      break;
 800d556:	e000      	b.n	800d55a <USBD_ClrFeature+0x3c>
      break;
 800d558:	bf00      	nop
  }
}
 800d55a:	bf00      	nop
 800d55c:	3708      	adds	r7, #8
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d562:	b580      	push	{r7, lr}
 800d564:	b084      	sub	sp, #16
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
 800d56a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	781a      	ldrb	r2, [r3, #0]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	3301      	adds	r3, #1
 800d57c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	781a      	ldrb	r2, [r3, #0]
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	3301      	adds	r3, #1
 800d58a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	f7ff fa16 	bl	800c9be <SWAPBYTE>
 800d592:	4603      	mov	r3, r0
 800d594:	461a      	mov	r2, r3
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	3301      	adds	r3, #1
 800d59e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d5a6:	68f8      	ldr	r0, [r7, #12]
 800d5a8:	f7ff fa09 	bl	800c9be <SWAPBYTE>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	3301      	adds	r3, #1
 800d5be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d5c0:	68f8      	ldr	r0, [r7, #12]
 800d5c2:	f7ff f9fc 	bl	800c9be <SWAPBYTE>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	80da      	strh	r2, [r3, #6]
}
 800d5ce:	bf00      	nop
 800d5d0:	3710      	adds	r7, #16
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}

0800d5d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5d6:	b580      	push	{r7, lr}
 800d5d8:	b082      	sub	sp, #8
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	6078      	str	r0, [r7, #4]
 800d5de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d5e0:	2180      	movs	r1, #128	@ 0x80
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f004 f8b0 	bl	8011748 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d5e8:	2100      	movs	r1, #0
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f004 f8ac 	bl	8011748 <USBD_LL_StallEP>
}
 800d5f0:	bf00      	nop
 800d5f2:	3708      	adds	r7, #8
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b086      	sub	sp, #24
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	60f8      	str	r0, [r7, #12]
 800d600:	60b9      	str	r1, [r7, #8]
 800d602:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d604:	2300      	movs	r3, #0
 800d606:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d036      	beq.n	800d67c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d612:	6938      	ldr	r0, [r7, #16]
 800d614:	f000 f836 	bl	800d684 <USBD_GetLen>
 800d618:	4603      	mov	r3, r0
 800d61a:	3301      	adds	r3, #1
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	005b      	lsls	r3, r3, #1
 800d620:	b29a      	uxth	r2, r3
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d626:	7dfb      	ldrb	r3, [r7, #23]
 800d628:	68ba      	ldr	r2, [r7, #8]
 800d62a:	4413      	add	r3, r2
 800d62c:	687a      	ldr	r2, [r7, #4]
 800d62e:	7812      	ldrb	r2, [r2, #0]
 800d630:	701a      	strb	r2, [r3, #0]
  idx++;
 800d632:	7dfb      	ldrb	r3, [r7, #23]
 800d634:	3301      	adds	r3, #1
 800d636:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d638:	7dfb      	ldrb	r3, [r7, #23]
 800d63a:	68ba      	ldr	r2, [r7, #8]
 800d63c:	4413      	add	r3, r2
 800d63e:	2203      	movs	r2, #3
 800d640:	701a      	strb	r2, [r3, #0]
  idx++;
 800d642:	7dfb      	ldrb	r3, [r7, #23]
 800d644:	3301      	adds	r3, #1
 800d646:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d648:	e013      	b.n	800d672 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d64a:	7dfb      	ldrb	r3, [r7, #23]
 800d64c:	68ba      	ldr	r2, [r7, #8]
 800d64e:	4413      	add	r3, r2
 800d650:	693a      	ldr	r2, [r7, #16]
 800d652:	7812      	ldrb	r2, [r2, #0]
 800d654:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	3301      	adds	r3, #1
 800d65a:	613b      	str	r3, [r7, #16]
    idx++;
 800d65c:	7dfb      	ldrb	r3, [r7, #23]
 800d65e:	3301      	adds	r3, #1
 800d660:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d662:	7dfb      	ldrb	r3, [r7, #23]
 800d664:	68ba      	ldr	r2, [r7, #8]
 800d666:	4413      	add	r3, r2
 800d668:	2200      	movs	r2, #0
 800d66a:	701a      	strb	r2, [r3, #0]
    idx++;
 800d66c:	7dfb      	ldrb	r3, [r7, #23]
 800d66e:	3301      	adds	r3, #1
 800d670:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d1e7      	bne.n	800d64a <USBD_GetString+0x52>
 800d67a:	e000      	b.n	800d67e <USBD_GetString+0x86>
    return;
 800d67c:	bf00      	nop
  }
}
 800d67e:	3718      	adds	r7, #24
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d684:	b480      	push	{r7}
 800d686:	b085      	sub	sp, #20
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d68c:	2300      	movs	r3, #0
 800d68e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d694:	e005      	b.n	800d6a2 <USBD_GetLen+0x1e>
  {
    len++;
 800d696:	7bfb      	ldrb	r3, [r7, #15]
 800d698:	3301      	adds	r3, #1
 800d69a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	3301      	adds	r3, #1
 800d6a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d1f5      	bne.n	800d696 <USBD_GetLen+0x12>
  }

  return len;
 800d6aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3714      	adds	r7, #20
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b084      	sub	sp, #16
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2202      	movs	r2, #2
 800d6c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	687a      	ldr	r2, [r7, #4]
 800d6d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	687a      	ldr	r2, [r7, #4]
 800d6d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	68ba      	ldr	r2, [r7, #8]
 800d6dc:	2100      	movs	r1, #0
 800d6de:	68f8      	ldr	r0, [r7, #12]
 800d6e0:	f004 f8bb 	bl	801185a <USBD_LL_Transmit>

  return USBD_OK;
 800d6e4:	2300      	movs	r3, #0
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3710      	adds	r7, #16
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}

0800d6ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d6ee:	b580      	push	{r7, lr}
 800d6f0:	b084      	sub	sp, #16
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	60f8      	str	r0, [r7, #12]
 800d6f6:	60b9      	str	r1, [r7, #8]
 800d6f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	68ba      	ldr	r2, [r7, #8]
 800d6fe:	2100      	movs	r1, #0
 800d700:	68f8      	ldr	r0, [r7, #12]
 800d702:	f004 f8aa 	bl	801185a <USBD_LL_Transmit>

  return USBD_OK;
 800d706:	2300      	movs	r3, #0
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3710      	adds	r7, #16
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b084      	sub	sp, #16
 800d714:	af00      	add	r7, sp, #0
 800d716:	60f8      	str	r0, [r7, #12]
 800d718:	60b9      	str	r1, [r7, #8]
 800d71a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2203      	movs	r2, #3
 800d720:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	68ba      	ldr	r2, [r7, #8]
 800d738:	2100      	movs	r1, #0
 800d73a:	68f8      	ldr	r0, [r7, #12]
 800d73c:	f004 f8ae 	bl	801189c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d740:	2300      	movs	r3, #0
}
 800d742:	4618      	mov	r0, r3
 800d744:	3710      	adds	r7, #16
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}

0800d74a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d74a:	b580      	push	{r7, lr}
 800d74c:	b084      	sub	sp, #16
 800d74e:	af00      	add	r7, sp, #0
 800d750:	60f8      	str	r0, [r7, #12]
 800d752:	60b9      	str	r1, [r7, #8]
 800d754:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	68ba      	ldr	r2, [r7, #8]
 800d75a:	2100      	movs	r1, #0
 800d75c:	68f8      	ldr	r0, [r7, #12]
 800d75e:	f004 f89d 	bl	801189c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d762:	2300      	movs	r3, #0
}
 800d764:	4618      	mov	r0, r3
 800d766:	3710      	adds	r7, #16
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2204      	movs	r2, #4
 800d778:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d77c:	2300      	movs	r3, #0
 800d77e:	2200      	movs	r2, #0
 800d780:	2100      	movs	r1, #0
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f004 f869 	bl	801185a <USBD_LL_Transmit>

  return USBD_OK;
 800d788:	2300      	movs	r3, #0
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3708      	adds	r7, #8
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}

0800d792 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d792:	b580      	push	{r7, lr}
 800d794:	b082      	sub	sp, #8
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2205      	movs	r2, #5
 800d79e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	2100      	movs	r1, #0
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f004 f877 	bl	801189c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d7ae:	2300      	movs	r3, #0
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3708      	adds	r7, #8
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b087      	sub	sp, #28
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	60f8      	str	r0, [r7, #12]
 800d7c0:	60b9      	str	r1, [r7, #8]
 800d7c2:	4613      	mov	r3, r2
 800d7c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d7ce:	4b1f      	ldr	r3, [pc, #124]	@ (800d84c <FATFS_LinkDriverEx+0x94>)
 800d7d0:	7a5b      	ldrb	r3, [r3, #9]
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d131      	bne.n	800d83c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d7d8:	4b1c      	ldr	r3, [pc, #112]	@ (800d84c <FATFS_LinkDriverEx+0x94>)
 800d7da:	7a5b      	ldrb	r3, [r3, #9]
 800d7dc:	b2db      	uxtb	r3, r3
 800d7de:	461a      	mov	r2, r3
 800d7e0:	4b1a      	ldr	r3, [pc, #104]	@ (800d84c <FATFS_LinkDriverEx+0x94>)
 800d7e2:	2100      	movs	r1, #0
 800d7e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d7e6:	4b19      	ldr	r3, [pc, #100]	@ (800d84c <FATFS_LinkDriverEx+0x94>)
 800d7e8:	7a5b      	ldrb	r3, [r3, #9]
 800d7ea:	b2db      	uxtb	r3, r3
 800d7ec:	4a17      	ldr	r2, [pc, #92]	@ (800d84c <FATFS_LinkDriverEx+0x94>)
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	4413      	add	r3, r2
 800d7f2:	68fa      	ldr	r2, [r7, #12]
 800d7f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d7f6:	4b15      	ldr	r3, [pc, #84]	@ (800d84c <FATFS_LinkDriverEx+0x94>)
 800d7f8:	7a5b      	ldrb	r3, [r3, #9]
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	4b13      	ldr	r3, [pc, #76]	@ (800d84c <FATFS_LinkDriverEx+0x94>)
 800d800:	4413      	add	r3, r2
 800d802:	79fa      	ldrb	r2, [r7, #7]
 800d804:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d806:	4b11      	ldr	r3, [pc, #68]	@ (800d84c <FATFS_LinkDriverEx+0x94>)
 800d808:	7a5b      	ldrb	r3, [r3, #9]
 800d80a:	b2db      	uxtb	r3, r3
 800d80c:	1c5a      	adds	r2, r3, #1
 800d80e:	b2d1      	uxtb	r1, r2
 800d810:	4a0e      	ldr	r2, [pc, #56]	@ (800d84c <FATFS_LinkDriverEx+0x94>)
 800d812:	7251      	strb	r1, [r2, #9]
 800d814:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d816:	7dbb      	ldrb	r3, [r7, #22]
 800d818:	3330      	adds	r3, #48	@ 0x30
 800d81a:	b2da      	uxtb	r2, r3
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	3301      	adds	r3, #1
 800d824:	223a      	movs	r2, #58	@ 0x3a
 800d826:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	3302      	adds	r3, #2
 800d82c:	222f      	movs	r2, #47	@ 0x2f
 800d82e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	3303      	adds	r3, #3
 800d834:	2200      	movs	r2, #0
 800d836:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d838:	2300      	movs	r3, #0
 800d83a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d83c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	371c      	adds	r7, #28
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr
 800d84a:	bf00      	nop
 800d84c:	2000064c 	.word	0x2000064c

0800d850 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b082      	sub	sp, #8
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d85a:	2200      	movs	r2, #0
 800d85c:	6839      	ldr	r1, [r7, #0]
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f7ff ffaa 	bl	800d7b8 <FATFS_LinkDriverEx>
 800d864:	4603      	mov	r3, r0
}
 800d866:	4618      	mov	r0, r3
 800d868:	3708      	adds	r7, #8
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
	...

0800d870 <__NVIC_SetPriority>:
{
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	4603      	mov	r3, r0
 800d878:	6039      	str	r1, [r7, #0]
 800d87a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d87c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d880:	2b00      	cmp	r3, #0
 800d882:	db0a      	blt.n	800d89a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	b2da      	uxtb	r2, r3
 800d888:	490c      	ldr	r1, [pc, #48]	@ (800d8bc <__NVIC_SetPriority+0x4c>)
 800d88a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d88e:	0112      	lsls	r2, r2, #4
 800d890:	b2d2      	uxtb	r2, r2
 800d892:	440b      	add	r3, r1
 800d894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d898:	e00a      	b.n	800d8b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	b2da      	uxtb	r2, r3
 800d89e:	4908      	ldr	r1, [pc, #32]	@ (800d8c0 <__NVIC_SetPriority+0x50>)
 800d8a0:	79fb      	ldrb	r3, [r7, #7]
 800d8a2:	f003 030f 	and.w	r3, r3, #15
 800d8a6:	3b04      	subs	r3, #4
 800d8a8:	0112      	lsls	r2, r2, #4
 800d8aa:	b2d2      	uxtb	r2, r2
 800d8ac:	440b      	add	r3, r1
 800d8ae:	761a      	strb	r2, [r3, #24]
}
 800d8b0:	bf00      	nop
 800d8b2:	370c      	adds	r7, #12
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr
 800d8bc:	e000e100 	.word	0xe000e100
 800d8c0:	e000ed00 	.word	0xe000ed00

0800d8c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d8c8:	4b05      	ldr	r3, [pc, #20]	@ (800d8e0 <SysTick_Handler+0x1c>)
 800d8ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d8cc:	f002 f984 	bl	800fbd8 <xTaskGetSchedulerState>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d001      	beq.n	800d8da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d8d6:	f003 f877 	bl	80109c8 <xPortSysTickHandler>
  }
}
 800d8da:	bf00      	nop
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	e000e010 	.word	0xe000e010

0800d8e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d8e8:	2100      	movs	r1, #0
 800d8ea:	f06f 0004 	mvn.w	r0, #4
 800d8ee:	f7ff ffbf 	bl	800d870 <__NVIC_SetPriority>
#endif
}
 800d8f2:	bf00      	nop
 800d8f4:	bd80      	pop	{r7, pc}
	...

0800d8f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d8f8:	b480      	push	{r7}
 800d8fa:	b083      	sub	sp, #12
 800d8fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8fe:	f3ef 8305 	mrs	r3, IPSR
 800d902:	603b      	str	r3, [r7, #0]
  return(result);
 800d904:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d906:	2b00      	cmp	r3, #0
 800d908:	d003      	beq.n	800d912 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d90a:	f06f 0305 	mvn.w	r3, #5
 800d90e:	607b      	str	r3, [r7, #4]
 800d910:	e00c      	b.n	800d92c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d912:	4b0a      	ldr	r3, [pc, #40]	@ (800d93c <osKernelInitialize+0x44>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d105      	bne.n	800d926 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d91a:	4b08      	ldr	r3, [pc, #32]	@ (800d93c <osKernelInitialize+0x44>)
 800d91c:	2201      	movs	r2, #1
 800d91e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d920:	2300      	movs	r3, #0
 800d922:	607b      	str	r3, [r7, #4]
 800d924:	e002      	b.n	800d92c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d926:	f04f 33ff 	mov.w	r3, #4294967295
 800d92a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d92c:	687b      	ldr	r3, [r7, #4]
}
 800d92e:	4618      	mov	r0, r3
 800d930:	370c      	adds	r7, #12
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	20000658 	.word	0x20000658

0800d940 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d940:	b580      	push	{r7, lr}
 800d942:	b082      	sub	sp, #8
 800d944:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d946:	f3ef 8305 	mrs	r3, IPSR
 800d94a:	603b      	str	r3, [r7, #0]
  return(result);
 800d94c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d003      	beq.n	800d95a <osKernelStart+0x1a>
    stat = osErrorISR;
 800d952:	f06f 0305 	mvn.w	r3, #5
 800d956:	607b      	str	r3, [r7, #4]
 800d958:	e010      	b.n	800d97c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d95a:	4b0b      	ldr	r3, [pc, #44]	@ (800d988 <osKernelStart+0x48>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	2b01      	cmp	r3, #1
 800d960:	d109      	bne.n	800d976 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d962:	f7ff ffbf 	bl	800d8e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d966:	4b08      	ldr	r3, [pc, #32]	@ (800d988 <osKernelStart+0x48>)
 800d968:	2202      	movs	r2, #2
 800d96a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d96c:	f001 fc2e 	bl	800f1cc <vTaskStartScheduler>
      stat = osOK;
 800d970:	2300      	movs	r3, #0
 800d972:	607b      	str	r3, [r7, #4]
 800d974:	e002      	b.n	800d97c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d976:	f04f 33ff 	mov.w	r3, #4294967295
 800d97a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d97c:	687b      	ldr	r3, [r7, #4]
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3708      	adds	r7, #8
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}
 800d986:	bf00      	nop
 800d988:	20000658 	.word	0x20000658

0800d98c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b08e      	sub	sp, #56	@ 0x38
 800d990:	af04      	add	r7, sp, #16
 800d992:	60f8      	str	r0, [r7, #12]
 800d994:	60b9      	str	r1, [r7, #8]
 800d996:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d998:	2300      	movs	r3, #0
 800d99a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d99c:	f3ef 8305 	mrs	r3, IPSR
 800d9a0:	617b      	str	r3, [r7, #20]
  return(result);
 800d9a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d17e      	bne.n	800daa6 <osThreadNew+0x11a>
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d07b      	beq.n	800daa6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d9ae:	2380      	movs	r3, #128	@ 0x80
 800d9b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d9b2:	2318      	movs	r3, #24
 800d9b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800d9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d9be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d045      	beq.n	800da52 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d002      	beq.n	800d9d4 <osThreadNew+0x48>
        name = attr->name;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	699b      	ldr	r3, [r3, #24]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d002      	beq.n	800d9e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	699b      	ldr	r3, [r3, #24]
 800d9e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d9e2:	69fb      	ldr	r3, [r7, #28]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d008      	beq.n	800d9fa <osThreadNew+0x6e>
 800d9e8:	69fb      	ldr	r3, [r7, #28]
 800d9ea:	2b38      	cmp	r3, #56	@ 0x38
 800d9ec:	d805      	bhi.n	800d9fa <osThreadNew+0x6e>
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	f003 0301 	and.w	r3, r3, #1
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d001      	beq.n	800d9fe <osThreadNew+0x72>
        return (NULL);
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	e054      	b.n	800daa8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	695b      	ldr	r3, [r3, #20]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d003      	beq.n	800da0e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	695b      	ldr	r3, [r3, #20]
 800da0a:	089b      	lsrs	r3, r3, #2
 800da0c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	689b      	ldr	r3, [r3, #8]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d00e      	beq.n	800da34 <osThreadNew+0xa8>
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	68db      	ldr	r3, [r3, #12]
 800da1a:	2ba7      	cmp	r3, #167	@ 0xa7
 800da1c:	d90a      	bls.n	800da34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800da22:	2b00      	cmp	r3, #0
 800da24:	d006      	beq.n	800da34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	695b      	ldr	r3, [r3, #20]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d002      	beq.n	800da34 <osThreadNew+0xa8>
        mem = 1;
 800da2e:	2301      	movs	r3, #1
 800da30:	61bb      	str	r3, [r7, #24]
 800da32:	e010      	b.n	800da56 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	689b      	ldr	r3, [r3, #8]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d10c      	bne.n	800da56 <osThreadNew+0xca>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	68db      	ldr	r3, [r3, #12]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d108      	bne.n	800da56 <osThreadNew+0xca>
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	691b      	ldr	r3, [r3, #16]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d104      	bne.n	800da56 <osThreadNew+0xca>
          mem = 0;
 800da4c:	2300      	movs	r3, #0
 800da4e:	61bb      	str	r3, [r7, #24]
 800da50:	e001      	b.n	800da56 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800da52:	2300      	movs	r3, #0
 800da54:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800da56:	69bb      	ldr	r3, [r7, #24]
 800da58:	2b01      	cmp	r3, #1
 800da5a:	d110      	bne.n	800da7e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800da60:	687a      	ldr	r2, [r7, #4]
 800da62:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800da64:	9202      	str	r2, [sp, #8]
 800da66:	9301      	str	r3, [sp, #4]
 800da68:	69fb      	ldr	r3, [r7, #28]
 800da6a:	9300      	str	r3, [sp, #0]
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	6a3a      	ldr	r2, [r7, #32]
 800da70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da72:	68f8      	ldr	r0, [r7, #12]
 800da74:	f001 f9b6 	bl	800ede4 <xTaskCreateStatic>
 800da78:	4603      	mov	r3, r0
 800da7a:	613b      	str	r3, [r7, #16]
 800da7c:	e013      	b.n	800daa6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800da7e:	69bb      	ldr	r3, [r7, #24]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d110      	bne.n	800daa6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800da84:	6a3b      	ldr	r3, [r7, #32]
 800da86:	b29a      	uxth	r2, r3
 800da88:	f107 0310 	add.w	r3, r7, #16
 800da8c:	9301      	str	r3, [sp, #4]
 800da8e:	69fb      	ldr	r3, [r7, #28]
 800da90:	9300      	str	r3, [sp, #0]
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da96:	68f8      	ldr	r0, [r7, #12]
 800da98:	f001 fa04 	bl	800eea4 <xTaskCreate>
 800da9c:	4603      	mov	r3, r0
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	d001      	beq.n	800daa6 <osThreadNew+0x11a>
            hTask = NULL;
 800daa2:	2300      	movs	r3, #0
 800daa4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800daa6:	693b      	ldr	r3, [r7, #16]
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3728      	adds	r7, #40	@ 0x28
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b084      	sub	sp, #16
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dab8:	f3ef 8305 	mrs	r3, IPSR
 800dabc:	60bb      	str	r3, [r7, #8]
  return(result);
 800dabe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d003      	beq.n	800dacc <osDelay+0x1c>
    stat = osErrorISR;
 800dac4:	f06f 0305 	mvn.w	r3, #5
 800dac8:	60fb      	str	r3, [r7, #12]
 800daca:	e007      	b.n	800dadc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800dacc:	2300      	movs	r3, #0
 800dace:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d002      	beq.n	800dadc <osDelay+0x2c>
      vTaskDelay(ticks);
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f001 fb42 	bl	800f160 <vTaskDelay>
    }
  }

  return (stat);
 800dadc:	68fb      	ldr	r3, [r7, #12]
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3710      	adds	r7, #16
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b084      	sub	sp, #16
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f002 fd64 	bl	80105bc <pvTimerGetTimerID>
 800daf4:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d005      	beq.n	800db08 <TimerCallback+0x22>
    callb->func (callb->arg);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	68fa      	ldr	r2, [r7, #12]
 800db02:	6852      	ldr	r2, [r2, #4]
 800db04:	4610      	mov	r0, r2
 800db06:	4798      	blx	r3
  }
}
 800db08:	bf00      	nop
 800db0a:	3710      	adds	r7, #16
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800db10:	b580      	push	{r7, lr}
 800db12:	b08c      	sub	sp, #48	@ 0x30
 800db14:	af02      	add	r7, sp, #8
 800db16:	60f8      	str	r0, [r7, #12]
 800db18:	607a      	str	r2, [r7, #4]
 800db1a:	603b      	str	r3, [r7, #0]
 800db1c:	460b      	mov	r3, r1
 800db1e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800db20:	2300      	movs	r3, #0
 800db22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db24:	f3ef 8305 	mrs	r3, IPSR
 800db28:	613b      	str	r3, [r7, #16]
  return(result);
 800db2a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d163      	bne.n	800dbf8 <osTimerNew+0xe8>
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d060      	beq.n	800dbf8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800db36:	2008      	movs	r0, #8
 800db38:	f002 ffd8 	bl	8010aec <pvPortMalloc>
 800db3c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d059      	beq.n	800dbf8 <osTimerNew+0xe8>
      callb->func = func;
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	68fa      	ldr	r2, [r7, #12]
 800db48:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	687a      	ldr	r2, [r7, #4]
 800db4e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800db50:	7afb      	ldrb	r3, [r7, #11]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d102      	bne.n	800db5c <osTimerNew+0x4c>
        reload = pdFALSE;
 800db56:	2300      	movs	r3, #0
 800db58:	61fb      	str	r3, [r7, #28]
 800db5a:	e001      	b.n	800db60 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800db5c:	2301      	movs	r3, #1
 800db5e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800db60:	f04f 33ff 	mov.w	r3, #4294967295
 800db64:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800db66:	2300      	movs	r3, #0
 800db68:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d01c      	beq.n	800dbaa <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d002      	beq.n	800db7e <osTimerNew+0x6e>
          name = attr->name;
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	689b      	ldr	r3, [r3, #8]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d006      	beq.n	800db94 <osTimerNew+0x84>
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	68db      	ldr	r3, [r3, #12]
 800db8a:	2b2b      	cmp	r3, #43	@ 0x2b
 800db8c:	d902      	bls.n	800db94 <osTimerNew+0x84>
          mem = 1;
 800db8e:	2301      	movs	r3, #1
 800db90:	61bb      	str	r3, [r7, #24]
 800db92:	e00c      	b.n	800dbae <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	689b      	ldr	r3, [r3, #8]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d108      	bne.n	800dbae <osTimerNew+0x9e>
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	68db      	ldr	r3, [r3, #12]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d104      	bne.n	800dbae <osTimerNew+0x9e>
            mem = 0;
 800dba4:	2300      	movs	r3, #0
 800dba6:	61bb      	str	r3, [r7, #24]
 800dba8:	e001      	b.n	800dbae <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800dbae:	69bb      	ldr	r3, [r7, #24]
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d10c      	bne.n	800dbce <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	689b      	ldr	r3, [r3, #8]
 800dbb8:	9301      	str	r3, [sp, #4]
 800dbba:	4b12      	ldr	r3, [pc, #72]	@ (800dc04 <osTimerNew+0xf4>)
 800dbbc:	9300      	str	r3, [sp, #0]
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	69fa      	ldr	r2, [r7, #28]
 800dbc2:	2101      	movs	r1, #1
 800dbc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dbc6:	f002 f96c 	bl	800fea2 <xTimerCreateStatic>
 800dbca:	6238      	str	r0, [r7, #32]
 800dbcc:	e00b      	b.n	800dbe6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800dbce:	69bb      	ldr	r3, [r7, #24]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d108      	bne.n	800dbe6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800dbd4:	4b0b      	ldr	r3, [pc, #44]	@ (800dc04 <osTimerNew+0xf4>)
 800dbd6:	9300      	str	r3, [sp, #0]
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	69fa      	ldr	r2, [r7, #28]
 800dbdc:	2101      	movs	r1, #1
 800dbde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dbe0:	f002 f93e 	bl	800fe60 <xTimerCreate>
 800dbe4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800dbe6:	6a3b      	ldr	r3, [r7, #32]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d105      	bne.n	800dbf8 <osTimerNew+0xe8>
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d002      	beq.n	800dbf8 <osTimerNew+0xe8>
        vPortFree (callb);
 800dbf2:	6978      	ldr	r0, [r7, #20]
 800dbf4:	f003 f848 	bl	8010c88 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800dbf8:	6a3b      	ldr	r3, [r7, #32]
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3728      	adds	r7, #40	@ 0x28
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
 800dc02:	bf00      	nop
 800dc04:	0800dae7 	.word	0x0800dae7

0800dc08 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b088      	sub	sp, #32
 800dc0c:	af02      	add	r7, sp, #8
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc16:	f3ef 8305 	mrs	r3, IPSR
 800dc1a:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc1c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d003      	beq.n	800dc2a <osTimerStart+0x22>
    stat = osErrorISR;
 800dc22:	f06f 0305 	mvn.w	r3, #5
 800dc26:	617b      	str	r3, [r7, #20]
 800dc28:	e017      	b.n	800dc5a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d103      	bne.n	800dc38 <osTimerStart+0x30>
    stat = osErrorParameter;
 800dc30:	f06f 0303 	mvn.w	r3, #3
 800dc34:	617b      	str	r3, [r7, #20]
 800dc36:	e010      	b.n	800dc5a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800dc38:	2300      	movs	r3, #0
 800dc3a:	9300      	str	r3, [sp, #0]
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	683a      	ldr	r2, [r7, #0]
 800dc40:	2104      	movs	r1, #4
 800dc42:	6938      	ldr	r0, [r7, #16]
 800dc44:	f002 f9aa 	bl	800ff9c <xTimerGenericCommand>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d102      	bne.n	800dc54 <osTimerStart+0x4c>
      stat = osOK;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	617b      	str	r3, [r7, #20]
 800dc52:	e002      	b.n	800dc5a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800dc54:	f06f 0302 	mvn.w	r3, #2
 800dc58:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800dc5a:	697b      	ldr	r3, [r7, #20]
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3718      	adds	r7, #24
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b086      	sub	sp, #24
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc70:	f3ef 8305 	mrs	r3, IPSR
 800dc74:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc76:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d12d      	bne.n	800dcd8 <osEventFlagsNew+0x74>
    mem = -1;
 800dc7c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc80:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d015      	beq.n	800dcb4 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	689b      	ldr	r3, [r3, #8]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d006      	beq.n	800dc9e <osEventFlagsNew+0x3a>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	68db      	ldr	r3, [r3, #12]
 800dc94:	2b1f      	cmp	r3, #31
 800dc96:	d902      	bls.n	800dc9e <osEventFlagsNew+0x3a>
        mem = 1;
 800dc98:	2301      	movs	r3, #1
 800dc9a:	613b      	str	r3, [r7, #16]
 800dc9c:	e00c      	b.n	800dcb8 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	689b      	ldr	r3, [r3, #8]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d108      	bne.n	800dcb8 <osEventFlagsNew+0x54>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	68db      	ldr	r3, [r3, #12]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d104      	bne.n	800dcb8 <osEventFlagsNew+0x54>
          mem = 0;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	613b      	str	r3, [r7, #16]
 800dcb2:	e001      	b.n	800dcb8 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	d106      	bne.n	800dccc <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	689b      	ldr	r3, [r3, #8]
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f000 f8ea 	bl	800de9c <xEventGroupCreateStatic>
 800dcc8:	6178      	str	r0, [r7, #20]
 800dcca:	e005      	b.n	800dcd8 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d102      	bne.n	800dcd8 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800dcd2:	f000 f91c 	bl	800df0e <xEventGroupCreate>
 800dcd6:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800dcd8:	697b      	ldr	r3, [r7, #20]
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3718      	adds	r7, #24
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
	...

0800dce4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b086      	sub	sp, #24
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d003      	beq.n	800dd00 <osEventFlagsSet+0x1c>
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dcfe:	d303      	bcc.n	800dd08 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 800dd00:	f06f 0303 	mvn.w	r3, #3
 800dd04:	617b      	str	r3, [r7, #20]
 800dd06:	e028      	b.n	800dd5a <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd08:	f3ef 8305 	mrs	r3, IPSR
 800dd0c:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd0e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d01d      	beq.n	800dd50 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800dd14:	2300      	movs	r3, #0
 800dd16:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800dd18:	f107 0308 	add.w	r3, r7, #8
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	6839      	ldr	r1, [r7, #0]
 800dd20:	6938      	ldr	r0, [r7, #16]
 800dd22:	f000 fa9d 	bl	800e260 <xEventGroupSetBitsFromISR>
 800dd26:	4603      	mov	r3, r0
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d103      	bne.n	800dd34 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 800dd2c:	f06f 0302 	mvn.w	r3, #2
 800dd30:	617b      	str	r3, [r7, #20]
 800dd32:	e012      	b.n	800dd5a <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d00d      	beq.n	800dd5a <osEventFlagsSet+0x76>
 800dd3e:	4b09      	ldr	r3, [pc, #36]	@ (800dd64 <osEventFlagsSet+0x80>)
 800dd40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd44:	601a      	str	r2, [r3, #0]
 800dd46:	f3bf 8f4f 	dsb	sy
 800dd4a:	f3bf 8f6f 	isb	sy
 800dd4e:	e004      	b.n	800dd5a <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800dd50:	6839      	ldr	r1, [r7, #0]
 800dd52:	6938      	ldr	r0, [r7, #16]
 800dd54:	f000 f9c8 	bl	800e0e8 <xEventGroupSetBits>
 800dd58:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800dd5a:	697b      	ldr	r3, [r7, #20]
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3718      	adds	r7, #24
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}
 800dd64:	e000ed04 	.word	0xe000ed04

0800dd68 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b08c      	sub	sp, #48	@ 0x30
 800dd6c:	af02      	add	r7, sp, #8
 800dd6e:	60f8      	str	r0, [r7, #12]
 800dd70:	60b9      	str	r1, [r7, #8]
 800dd72:	607a      	str	r2, [r7, #4]
 800dd74:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800dd7a:	69bb      	ldr	r3, [r7, #24]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d003      	beq.n	800dd88 <osEventFlagsWait+0x20>
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dd86:	d303      	bcc.n	800dd90 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 800dd88:	f06f 0303 	mvn.w	r3, #3
 800dd8c:	61fb      	str	r3, [r7, #28]
 800dd8e:	e04b      	b.n	800de28 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd90:	f3ef 8305 	mrs	r3, IPSR
 800dd94:	617b      	str	r3, [r7, #20]
  return(result);
 800dd96:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d003      	beq.n	800dda4 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 800dd9c:	f06f 0305 	mvn.w	r3, #5
 800dda0:	61fb      	str	r3, [r7, #28]
 800dda2:	e041      	b.n	800de28 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f003 0301 	and.w	r3, r3, #1
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d002      	beq.n	800ddb4 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	627b      	str	r3, [r7, #36]	@ 0x24
 800ddb2:	e001      	b.n	800ddb8 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f003 0302 	and.w	r3, r3, #2
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d002      	beq.n	800ddc8 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	623b      	str	r3, [r7, #32]
 800ddc6:	e001      	b.n	800ddcc <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 800ddc8:	2301      	movs	r3, #1
 800ddca:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	9300      	str	r3, [sp, #0]
 800ddd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddd2:	6a3a      	ldr	r2, [r7, #32]
 800ddd4:	68b9      	ldr	r1, [r7, #8]
 800ddd6:	69b8      	ldr	r0, [r7, #24]
 800ddd8:	f000 f8b4 	bl	800df44 <xEventGroupWaitBits>
 800dddc:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f003 0301 	and.w	r3, r3, #1
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d010      	beq.n	800de0a <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 800dde8:	68ba      	ldr	r2, [r7, #8]
 800ddea:	69fb      	ldr	r3, [r7, #28]
 800ddec:	4013      	ands	r3, r2
 800ddee:	68ba      	ldr	r2, [r7, #8]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d019      	beq.n	800de28 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d003      	beq.n	800de02 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 800ddfa:	f06f 0301 	mvn.w	r3, #1
 800ddfe:	61fb      	str	r3, [r7, #28]
 800de00:	e012      	b.n	800de28 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800de02:	f06f 0302 	mvn.w	r3, #2
 800de06:	61fb      	str	r3, [r7, #28]
 800de08:	e00e      	b.n	800de28 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800de0a:	68ba      	ldr	r2, [r7, #8]
 800de0c:	69fb      	ldr	r3, [r7, #28]
 800de0e:	4013      	ands	r3, r2
 800de10:	2b00      	cmp	r3, #0
 800de12:	d109      	bne.n	800de28 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d003      	beq.n	800de22 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 800de1a:	f06f 0301 	mvn.w	r3, #1
 800de1e:	61fb      	str	r3, [r7, #28]
 800de20:	e002      	b.n	800de28 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800de22:	f06f 0302 	mvn.w	r3, #2
 800de26:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800de28:	69fb      	ldr	r3, [r7, #28]
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3728      	adds	r7, #40	@ 0x28
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}
	...

0800de34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800de34:	b480      	push	{r7}
 800de36:	b085      	sub	sp, #20
 800de38:	af00      	add	r7, sp, #0
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	60b9      	str	r1, [r7, #8]
 800de3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	4a07      	ldr	r2, [pc, #28]	@ (800de60 <vApplicationGetIdleTaskMemory+0x2c>)
 800de44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	4a06      	ldr	r2, [pc, #24]	@ (800de64 <vApplicationGetIdleTaskMemory+0x30>)
 800de4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2280      	movs	r2, #128	@ 0x80
 800de50:	601a      	str	r2, [r3, #0]
}
 800de52:	bf00      	nop
 800de54:	3714      	adds	r7, #20
 800de56:	46bd      	mov	sp, r7
 800de58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5c:	4770      	bx	lr
 800de5e:	bf00      	nop
 800de60:	2000065c 	.word	0x2000065c
 800de64:	20000704 	.word	0x20000704

0800de68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800de68:	b480      	push	{r7}
 800de6a:	b085      	sub	sp, #20
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	60f8      	str	r0, [r7, #12]
 800de70:	60b9      	str	r1, [r7, #8]
 800de72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	4a07      	ldr	r2, [pc, #28]	@ (800de94 <vApplicationGetTimerTaskMemory+0x2c>)
 800de78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	4a06      	ldr	r2, [pc, #24]	@ (800de98 <vApplicationGetTimerTaskMemory+0x30>)
 800de7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800de86:	601a      	str	r2, [r3, #0]
}
 800de88:	bf00      	nop
 800de8a:	3714      	adds	r7, #20
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr
 800de94:	20000904 	.word	0x20000904
 800de98:	200009ac 	.word	0x200009ac

0800de9c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b086      	sub	sp, #24
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d10b      	bne.n	800dec2 <xEventGroupCreateStatic+0x26>
	__asm volatile
 800deaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deae:	f383 8811 	msr	BASEPRI, r3
 800deb2:	f3bf 8f6f 	isb	sy
 800deb6:	f3bf 8f4f 	dsb	sy
 800deba:	613b      	str	r3, [r7, #16]
}
 800debc:	bf00      	nop
 800debe:	bf00      	nop
 800dec0:	e7fd      	b.n	800debe <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800dec2:	2320      	movs	r3, #32
 800dec4:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	2b20      	cmp	r3, #32
 800deca:	d00b      	beq.n	800dee4 <xEventGroupCreateStatic+0x48>
	__asm volatile
 800decc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ded0:	f383 8811 	msr	BASEPRI, r3
 800ded4:	f3bf 8f6f 	isb	sy
 800ded8:	f3bf 8f4f 	dsb	sy
 800dedc:	60fb      	str	r3, [r7, #12]
}
 800dede:	bf00      	nop
 800dee0:	bf00      	nop
 800dee2:	e7fd      	b.n	800dee0 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d00a      	beq.n	800df04 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	2200      	movs	r2, #0
 800def2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	3304      	adds	r3, #4
 800def8:	4618      	mov	r0, r3
 800defa:	f000 f9c5 	bl	800e288 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	2201      	movs	r2, #1
 800df02:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800df04:	697b      	ldr	r3, [r7, #20]
	}
 800df06:	4618      	mov	r0, r3
 800df08:	3718      	adds	r7, #24
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800df0e:	b580      	push	{r7, lr}
 800df10:	b082      	sub	sp, #8
 800df12:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800df14:	2020      	movs	r0, #32
 800df16:	f002 fde9 	bl	8010aec <pvPortMalloc>
 800df1a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d00a      	beq.n	800df38 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2200      	movs	r2, #0
 800df26:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	3304      	adds	r3, #4
 800df2c:	4618      	mov	r0, r3
 800df2e:	f000 f9ab 	bl	800e288 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2200      	movs	r2, #0
 800df36:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800df38:	687b      	ldr	r3, [r7, #4]
	}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3708      	adds	r7, #8
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
	...

0800df44 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b090      	sub	sp, #64	@ 0x40
 800df48:	af00      	add	r7, sp, #0
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	60b9      	str	r1, [r7, #8]
 800df4e:	607a      	str	r2, [r7, #4]
 800df50:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800df56:	2300      	movs	r3, #0
 800df58:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800df5a:	2300      	movs	r3, #0
 800df5c:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d10b      	bne.n	800df7c <xEventGroupWaitBits+0x38>
	__asm volatile
 800df64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df68:	f383 8811 	msr	BASEPRI, r3
 800df6c:	f3bf 8f6f 	isb	sy
 800df70:	f3bf 8f4f 	dsb	sy
 800df74:	623b      	str	r3, [r7, #32]
}
 800df76:	bf00      	nop
 800df78:	bf00      	nop
 800df7a:	e7fd      	b.n	800df78 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800df82:	d30b      	bcc.n	800df9c <xEventGroupWaitBits+0x58>
	__asm volatile
 800df84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df88:	f383 8811 	msr	BASEPRI, r3
 800df8c:	f3bf 8f6f 	isb	sy
 800df90:	f3bf 8f4f 	dsb	sy
 800df94:	61fb      	str	r3, [r7, #28]
}
 800df96:	bf00      	nop
 800df98:	bf00      	nop
 800df9a:	e7fd      	b.n	800df98 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d10b      	bne.n	800dfba <xEventGroupWaitBits+0x76>
	__asm volatile
 800dfa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfa6:	f383 8811 	msr	BASEPRI, r3
 800dfaa:	f3bf 8f6f 	isb	sy
 800dfae:	f3bf 8f4f 	dsb	sy
 800dfb2:	61bb      	str	r3, [r7, #24]
}
 800dfb4:	bf00      	nop
 800dfb6:	bf00      	nop
 800dfb8:	e7fd      	b.n	800dfb6 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dfba:	f001 fe0d 	bl	800fbd8 <xTaskGetSchedulerState>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d102      	bne.n	800dfca <xEventGroupWaitBits+0x86>
 800dfc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d101      	bne.n	800dfce <xEventGroupWaitBits+0x8a>
 800dfca:	2301      	movs	r3, #1
 800dfcc:	e000      	b.n	800dfd0 <xEventGroupWaitBits+0x8c>
 800dfce:	2300      	movs	r3, #0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d10b      	bne.n	800dfec <xEventGroupWaitBits+0xa8>
	__asm volatile
 800dfd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfd8:	f383 8811 	msr	BASEPRI, r3
 800dfdc:	f3bf 8f6f 	isb	sy
 800dfe0:	f3bf 8f4f 	dsb	sy
 800dfe4:	617b      	str	r3, [r7, #20]
}
 800dfe6:	bf00      	nop
 800dfe8:	bf00      	nop
 800dfea:	e7fd      	b.n	800dfe8 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800dfec:	f001 f95e 	bl	800f2ac <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800dff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800dff6:	683a      	ldr	r2, [r7, #0]
 800dff8:	68b9      	ldr	r1, [r7, #8]
 800dffa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dffc:	f000 f90d 	bl	800e21a <prvTestWaitCondition>
 800e000:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800e002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e004:	2b00      	cmp	r3, #0
 800e006:	d00e      	beq.n	800e026 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800e008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e00a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800e00c:	2300      	movs	r3, #0
 800e00e:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d028      	beq.n	800e068 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e018:	681a      	ldr	r2, [r3, #0]
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	43db      	mvns	r3, r3
 800e01e:	401a      	ands	r2, r3
 800e020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e022:	601a      	str	r2, [r3, #0]
 800e024:	e020      	b.n	800e068 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800e026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d104      	bne.n	800e036 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800e02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e02e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800e030:	2301      	movs	r3, #1
 800e032:	633b      	str	r3, [r7, #48]	@ 0x30
 800e034:	e018      	b.n	800e068 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d003      	beq.n	800e044 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800e03c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e03e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e042:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d003      	beq.n	800e052 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800e04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e04c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e050:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800e052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e054:	1d18      	adds	r0, r3, #4
 800e056:	68ba      	ldr	r2, [r7, #8]
 800e058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e05a:	4313      	orrs	r3, r2
 800e05c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e05e:	4619      	mov	r1, r3
 800e060:	f001 fb26 	bl	800f6b0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800e064:	2300      	movs	r3, #0
 800e066:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800e068:	f001 f92e 	bl	800f2c8 <xTaskResumeAll>
 800e06c:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800e06e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e070:	2b00      	cmp	r3, #0
 800e072:	d031      	beq.n	800e0d8 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800e074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e076:	2b00      	cmp	r3, #0
 800e078:	d107      	bne.n	800e08a <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800e07a:	4b1a      	ldr	r3, [pc, #104]	@ (800e0e4 <xEventGroupWaitBits+0x1a0>)
 800e07c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e080:	601a      	str	r2, [r3, #0]
 800e082:	f3bf 8f4f 	dsb	sy
 800e086:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800e08a:	f001 fe33 	bl	800fcf4 <uxTaskResetEventItemValue>
 800e08e:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800e090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e096:	2b00      	cmp	r3, #0
 800e098:	d11a      	bne.n	800e0d0 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800e09a:	f002 fc05 	bl	80108a8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800e09e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800e0a4:	683a      	ldr	r2, [r7, #0]
 800e0a6:	68b9      	ldr	r1, [r7, #8]
 800e0a8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e0aa:	f000 f8b6 	bl	800e21a <prvTestWaitCondition>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d009      	beq.n	800e0c8 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d006      	beq.n	800e0c8 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e0ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0bc:	681a      	ldr	r2, [r3, #0]
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	43db      	mvns	r3, r3
 800e0c2:	401a      	ands	r2, r3
 800e0c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0c6:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800e0cc:	f002 fc1e 	bl	801090c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800e0d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0d2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800e0d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3740      	adds	r7, #64	@ 0x40
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
 800e0e2:	bf00      	nop
 800e0e4:	e000ed04 	.word	0xe000ed04

0800e0e8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b08e      	sub	sp, #56	@ 0x38
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d10b      	bne.n	800e11c <xEventGroupSetBits+0x34>
	__asm volatile
 800e104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e108:	f383 8811 	msr	BASEPRI, r3
 800e10c:	f3bf 8f6f 	isb	sy
 800e110:	f3bf 8f4f 	dsb	sy
 800e114:	613b      	str	r3, [r7, #16]
}
 800e116:	bf00      	nop
 800e118:	bf00      	nop
 800e11a:	e7fd      	b.n	800e118 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e122:	d30b      	bcc.n	800e13c <xEventGroupSetBits+0x54>
	__asm volatile
 800e124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e128:	f383 8811 	msr	BASEPRI, r3
 800e12c:	f3bf 8f6f 	isb	sy
 800e130:	f3bf 8f4f 	dsb	sy
 800e134:	60fb      	str	r3, [r7, #12]
}
 800e136:	bf00      	nop
 800e138:	bf00      	nop
 800e13a:	e7fd      	b.n	800e138 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800e13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e13e:	3304      	adds	r3, #4
 800e140:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e144:	3308      	adds	r3, #8
 800e146:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800e148:	f001 f8b0 	bl	800f2ac <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800e14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800e152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e154:	681a      	ldr	r2, [r3, #0]
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	431a      	orrs	r2, r3
 800e15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e15c:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800e15e:	e03c      	b.n	800e1da <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800e160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800e166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800e16c:	2300      	movs	r3, #0
 800e16e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800e170:	69bb      	ldr	r3, [r7, #24]
 800e172:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800e176:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800e178:	69bb      	ldr	r3, [r7, #24]
 800e17a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e17e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e186:	2b00      	cmp	r3, #0
 800e188:	d108      	bne.n	800e19c <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800e18a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e18c:	681a      	ldr	r2, [r3, #0]
 800e18e:	69bb      	ldr	r3, [r7, #24]
 800e190:	4013      	ands	r3, r2
 800e192:	2b00      	cmp	r3, #0
 800e194:	d00b      	beq.n	800e1ae <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800e196:	2301      	movs	r3, #1
 800e198:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e19a:	e008      	b.n	800e1ae <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800e19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e19e:	681a      	ldr	r2, [r3, #0]
 800e1a0:	69bb      	ldr	r3, [r7, #24]
 800e1a2:	4013      	ands	r3, r2
 800e1a4:	69ba      	ldr	r2, [r7, #24]
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d101      	bne.n	800e1ae <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800e1ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d010      	beq.n	800e1d6 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d003      	beq.n	800e1c6 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800e1be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1c0:	69bb      	ldr	r3, [r7, #24]
 800e1c2:	4313      	orrs	r3, r2
 800e1c4:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800e1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e1d2:	f001 fb3b 	bl	800f84c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800e1d6:	69fb      	ldr	r3, [r7, #28]
 800e1d8:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800e1da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e1dc:	6a3b      	ldr	r3, [r7, #32]
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d1be      	bne.n	800e160 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800e1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1e4:	681a      	ldr	r2, [r3, #0]
 800e1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e8:	43db      	mvns	r3, r3
 800e1ea:	401a      	ands	r2, r3
 800e1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1ee:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800e1f0:	f001 f86a 	bl	800f2c8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800e1f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1f6:	681b      	ldr	r3, [r3, #0]
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3738      	adds	r7, #56	@ 0x38
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800e20a:	6839      	ldr	r1, [r7, #0]
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f7ff ff6b 	bl	800e0e8 <xEventGroupSetBits>
}
 800e212:	bf00      	nop
 800e214:	3708      	adds	r7, #8
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}

0800e21a <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800e21a:	b480      	push	{r7}
 800e21c:	b087      	sub	sp, #28
 800e21e:	af00      	add	r7, sp, #0
 800e220:	60f8      	str	r0, [r7, #12]
 800e222:	60b9      	str	r1, [r7, #8]
 800e224:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800e226:	2300      	movs	r3, #0
 800e228:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d107      	bne.n	800e240 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800e230:	68fa      	ldr	r2, [r7, #12]
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	4013      	ands	r3, r2
 800e236:	2b00      	cmp	r3, #0
 800e238:	d00a      	beq.n	800e250 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800e23a:	2301      	movs	r3, #1
 800e23c:	617b      	str	r3, [r7, #20]
 800e23e:	e007      	b.n	800e250 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800e240:	68fa      	ldr	r2, [r7, #12]
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	4013      	ands	r3, r2
 800e246:	68ba      	ldr	r2, [r7, #8]
 800e248:	429a      	cmp	r2, r3
 800e24a:	d101      	bne.n	800e250 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800e24c:	2301      	movs	r3, #1
 800e24e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800e250:	697b      	ldr	r3, [r7, #20]
}
 800e252:	4618      	mov	r0, r3
 800e254:	371c      	adds	r7, #28
 800e256:	46bd      	mov	sp, r7
 800e258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25c:	4770      	bx	lr
	...

0800e260 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e260:	b580      	push	{r7, lr}
 800e262:	b086      	sub	sp, #24
 800e264:	af00      	add	r7, sp, #0
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	60b9      	str	r1, [r7, #8]
 800e26a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	68ba      	ldr	r2, [r7, #8]
 800e270:	68f9      	ldr	r1, [r7, #12]
 800e272:	4804      	ldr	r0, [pc, #16]	@ (800e284 <xEventGroupSetBitsFromISR+0x24>)
 800e274:	f002 f9c4 	bl	8010600 <xTimerPendFunctionCallFromISR>
 800e278:	6178      	str	r0, [r7, #20]

		return xReturn;
 800e27a:	697b      	ldr	r3, [r7, #20]
	}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3718      	adds	r7, #24
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}
 800e284:	0800e201 	.word	0x0800e201

0800e288 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f103 0208 	add.w	r2, r3, #8
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f04f 32ff 	mov.w	r2, #4294967295
 800e2a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f103 0208 	add.w	r2, r3, #8
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f103 0208 	add.w	r2, r3, #8
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e2bc:	bf00      	nop
 800e2be:	370c      	adds	r7, #12
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr

0800e2c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b083      	sub	sp, #12
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e2d6:	bf00      	nop
 800e2d8:	370c      	adds	r7, #12
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e0:	4770      	bx	lr

0800e2e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e2e2:	b480      	push	{r7}
 800e2e4:	b085      	sub	sp, #20
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	6078      	str	r0, [r7, #4]
 800e2ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	68fa      	ldr	r2, [r7, #12]
 800e2f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	689a      	ldr	r2, [r3, #8]
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	683a      	ldr	r2, [r7, #0]
 800e306:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	683a      	ldr	r2, [r7, #0]
 800e30c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	1c5a      	adds	r2, r3, #1
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	601a      	str	r2, [r3, #0]
}
 800e31e:	bf00      	nop
 800e320:	3714      	adds	r7, #20
 800e322:	46bd      	mov	sp, r7
 800e324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e328:	4770      	bx	lr

0800e32a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e32a:	b480      	push	{r7}
 800e32c:	b085      	sub	sp, #20
 800e32e:	af00      	add	r7, sp, #0
 800e330:	6078      	str	r0, [r7, #4]
 800e332:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e340:	d103      	bne.n	800e34a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	691b      	ldr	r3, [r3, #16]
 800e346:	60fb      	str	r3, [r7, #12]
 800e348:	e00c      	b.n	800e364 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	3308      	adds	r3, #8
 800e34e:	60fb      	str	r3, [r7, #12]
 800e350:	e002      	b.n	800e358 <vListInsert+0x2e>
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	685b      	ldr	r3, [r3, #4]
 800e356:	60fb      	str	r3, [r7, #12]
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	685b      	ldr	r3, [r3, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	68ba      	ldr	r2, [r7, #8]
 800e360:	429a      	cmp	r2, r3
 800e362:	d2f6      	bcs.n	800e352 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	685a      	ldr	r2, [r3, #4]
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	683a      	ldr	r2, [r7, #0]
 800e372:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	68fa      	ldr	r2, [r7, #12]
 800e378:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	683a      	ldr	r2, [r7, #0]
 800e37e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	687a      	ldr	r2, [r7, #4]
 800e384:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	1c5a      	adds	r2, r3, #1
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	601a      	str	r2, [r3, #0]
}
 800e390:	bf00      	nop
 800e392:	3714      	adds	r7, #20
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr

0800e39c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e39c:	b480      	push	{r7}
 800e39e:	b085      	sub	sp, #20
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	691b      	ldr	r3, [r3, #16]
 800e3a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	685b      	ldr	r3, [r3, #4]
 800e3ae:	687a      	ldr	r2, [r7, #4]
 800e3b0:	6892      	ldr	r2, [r2, #8]
 800e3b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	689b      	ldr	r3, [r3, #8]
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	6852      	ldr	r2, [r2, #4]
 800e3bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	685b      	ldr	r3, [r3, #4]
 800e3c2:	687a      	ldr	r2, [r7, #4]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d103      	bne.n	800e3d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	689a      	ldr	r2, [r3, #8]
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	1e5a      	subs	r2, r3, #1
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	681b      	ldr	r3, [r3, #0]
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3714      	adds	r7, #20
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr

0800e3f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b084      	sub	sp, #16
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d10b      	bne.n	800e41c <xQueueGenericReset+0x2c>
	__asm volatile
 800e404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e408:	f383 8811 	msr	BASEPRI, r3
 800e40c:	f3bf 8f6f 	isb	sy
 800e410:	f3bf 8f4f 	dsb	sy
 800e414:	60bb      	str	r3, [r7, #8]
}
 800e416:	bf00      	nop
 800e418:	bf00      	nop
 800e41a:	e7fd      	b.n	800e418 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e41c:	f002 fa44 	bl	80108a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	681a      	ldr	r2, [r3, #0]
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e428:	68f9      	ldr	r1, [r7, #12]
 800e42a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e42c:	fb01 f303 	mul.w	r3, r1, r3
 800e430:	441a      	add	r2, r3
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2200      	movs	r2, #0
 800e43a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	681a      	ldr	r2, [r3, #0]
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681a      	ldr	r2, [r3, #0]
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e44c:	3b01      	subs	r3, #1
 800e44e:	68f9      	ldr	r1, [r7, #12]
 800e450:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e452:	fb01 f303 	mul.w	r3, r1, r3
 800e456:	441a      	add	r2, r3
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	22ff      	movs	r2, #255	@ 0xff
 800e460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	22ff      	movs	r2, #255	@ 0xff
 800e468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d114      	bne.n	800e49c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	691b      	ldr	r3, [r3, #16]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d01a      	beq.n	800e4b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	3310      	adds	r3, #16
 800e47e:	4618      	mov	r0, r3
 800e480:	f001 f980 	bl	800f784 <xTaskRemoveFromEventList>
 800e484:	4603      	mov	r3, r0
 800e486:	2b00      	cmp	r3, #0
 800e488:	d012      	beq.n	800e4b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e48a:	4b0d      	ldr	r3, [pc, #52]	@ (800e4c0 <xQueueGenericReset+0xd0>)
 800e48c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e490:	601a      	str	r2, [r3, #0]
 800e492:	f3bf 8f4f 	dsb	sy
 800e496:	f3bf 8f6f 	isb	sy
 800e49a:	e009      	b.n	800e4b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	3310      	adds	r3, #16
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f7ff fef1 	bl	800e288 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	3324      	adds	r3, #36	@ 0x24
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7ff feec 	bl	800e288 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e4b0:	f002 fa2c 	bl	801090c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e4b4:	2301      	movs	r3, #1
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3710      	adds	r7, #16
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}
 800e4be:	bf00      	nop
 800e4c0:	e000ed04 	.word	0xe000ed04

0800e4c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b08e      	sub	sp, #56	@ 0x38
 800e4c8:	af02      	add	r7, sp, #8
 800e4ca:	60f8      	str	r0, [r7, #12]
 800e4cc:	60b9      	str	r1, [r7, #8]
 800e4ce:	607a      	str	r2, [r7, #4]
 800e4d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d10b      	bne.n	800e4f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e4d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4dc:	f383 8811 	msr	BASEPRI, r3
 800e4e0:	f3bf 8f6f 	isb	sy
 800e4e4:	f3bf 8f4f 	dsb	sy
 800e4e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e4ea:	bf00      	nop
 800e4ec:	bf00      	nop
 800e4ee:	e7fd      	b.n	800e4ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d10b      	bne.n	800e50e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4fa:	f383 8811 	msr	BASEPRI, r3
 800e4fe:	f3bf 8f6f 	isb	sy
 800e502:	f3bf 8f4f 	dsb	sy
 800e506:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e508:	bf00      	nop
 800e50a:	bf00      	nop
 800e50c:	e7fd      	b.n	800e50a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d002      	beq.n	800e51a <xQueueGenericCreateStatic+0x56>
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d001      	beq.n	800e51e <xQueueGenericCreateStatic+0x5a>
 800e51a:	2301      	movs	r3, #1
 800e51c:	e000      	b.n	800e520 <xQueueGenericCreateStatic+0x5c>
 800e51e:	2300      	movs	r3, #0
 800e520:	2b00      	cmp	r3, #0
 800e522:	d10b      	bne.n	800e53c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e528:	f383 8811 	msr	BASEPRI, r3
 800e52c:	f3bf 8f6f 	isb	sy
 800e530:	f3bf 8f4f 	dsb	sy
 800e534:	623b      	str	r3, [r7, #32]
}
 800e536:	bf00      	nop
 800e538:	bf00      	nop
 800e53a:	e7fd      	b.n	800e538 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d102      	bne.n	800e548 <xQueueGenericCreateStatic+0x84>
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d101      	bne.n	800e54c <xQueueGenericCreateStatic+0x88>
 800e548:	2301      	movs	r3, #1
 800e54a:	e000      	b.n	800e54e <xQueueGenericCreateStatic+0x8a>
 800e54c:	2300      	movs	r3, #0
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d10b      	bne.n	800e56a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e556:	f383 8811 	msr	BASEPRI, r3
 800e55a:	f3bf 8f6f 	isb	sy
 800e55e:	f3bf 8f4f 	dsb	sy
 800e562:	61fb      	str	r3, [r7, #28]
}
 800e564:	bf00      	nop
 800e566:	bf00      	nop
 800e568:	e7fd      	b.n	800e566 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e56a:	2350      	movs	r3, #80	@ 0x50
 800e56c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	2b50      	cmp	r3, #80	@ 0x50
 800e572:	d00b      	beq.n	800e58c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e578:	f383 8811 	msr	BASEPRI, r3
 800e57c:	f3bf 8f6f 	isb	sy
 800e580:	f3bf 8f4f 	dsb	sy
 800e584:	61bb      	str	r3, [r7, #24]
}
 800e586:	bf00      	nop
 800e588:	bf00      	nop
 800e58a:	e7fd      	b.n	800e588 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e58c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e594:	2b00      	cmp	r3, #0
 800e596:	d00d      	beq.n	800e5b4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e59a:	2201      	movs	r2, #1
 800e59c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e5a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5a6:	9300      	str	r3, [sp, #0]
 800e5a8:	4613      	mov	r3, r2
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	68b9      	ldr	r1, [r7, #8]
 800e5ae:	68f8      	ldr	r0, [r7, #12]
 800e5b0:	f000 f805 	bl	800e5be <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3730      	adds	r7, #48	@ 0x30
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}

0800e5be <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e5be:	b580      	push	{r7, lr}
 800e5c0:	b084      	sub	sp, #16
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	60f8      	str	r0, [r7, #12]
 800e5c6:	60b9      	str	r1, [r7, #8]
 800e5c8:	607a      	str	r2, [r7, #4]
 800e5ca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d103      	bne.n	800e5da <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e5d2:	69bb      	ldr	r3, [r7, #24]
 800e5d4:	69ba      	ldr	r2, [r7, #24]
 800e5d6:	601a      	str	r2, [r3, #0]
 800e5d8:	e002      	b.n	800e5e0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e5da:	69bb      	ldr	r3, [r7, #24]
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e5e0:	69bb      	ldr	r3, [r7, #24]
 800e5e2:	68fa      	ldr	r2, [r7, #12]
 800e5e4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e5e6:	69bb      	ldr	r3, [r7, #24]
 800e5e8:	68ba      	ldr	r2, [r7, #8]
 800e5ea:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e5ec:	2101      	movs	r1, #1
 800e5ee:	69b8      	ldr	r0, [r7, #24]
 800e5f0:	f7ff fefe 	bl	800e3f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e5f4:	69bb      	ldr	r3, [r7, #24]
 800e5f6:	78fa      	ldrb	r2, [r7, #3]
 800e5f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e5fc:	bf00      	nop
 800e5fe:	3710      	adds	r7, #16
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b08e      	sub	sp, #56	@ 0x38
 800e608:	af00      	add	r7, sp, #0
 800e60a:	60f8      	str	r0, [r7, #12]
 800e60c:	60b9      	str	r1, [r7, #8]
 800e60e:	607a      	str	r2, [r7, #4]
 800e610:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e612:	2300      	movs	r3, #0
 800e614:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d10b      	bne.n	800e638 <xQueueGenericSend+0x34>
	__asm volatile
 800e620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e624:	f383 8811 	msr	BASEPRI, r3
 800e628:	f3bf 8f6f 	isb	sy
 800e62c:	f3bf 8f4f 	dsb	sy
 800e630:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e632:	bf00      	nop
 800e634:	bf00      	nop
 800e636:	e7fd      	b.n	800e634 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d103      	bne.n	800e646 <xQueueGenericSend+0x42>
 800e63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e642:	2b00      	cmp	r3, #0
 800e644:	d101      	bne.n	800e64a <xQueueGenericSend+0x46>
 800e646:	2301      	movs	r3, #1
 800e648:	e000      	b.n	800e64c <xQueueGenericSend+0x48>
 800e64a:	2300      	movs	r3, #0
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d10b      	bne.n	800e668 <xQueueGenericSend+0x64>
	__asm volatile
 800e650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e654:	f383 8811 	msr	BASEPRI, r3
 800e658:	f3bf 8f6f 	isb	sy
 800e65c:	f3bf 8f4f 	dsb	sy
 800e660:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e662:	bf00      	nop
 800e664:	bf00      	nop
 800e666:	e7fd      	b.n	800e664 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	2b02      	cmp	r3, #2
 800e66c:	d103      	bne.n	800e676 <xQueueGenericSend+0x72>
 800e66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e672:	2b01      	cmp	r3, #1
 800e674:	d101      	bne.n	800e67a <xQueueGenericSend+0x76>
 800e676:	2301      	movs	r3, #1
 800e678:	e000      	b.n	800e67c <xQueueGenericSend+0x78>
 800e67a:	2300      	movs	r3, #0
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d10b      	bne.n	800e698 <xQueueGenericSend+0x94>
	__asm volatile
 800e680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e684:	f383 8811 	msr	BASEPRI, r3
 800e688:	f3bf 8f6f 	isb	sy
 800e68c:	f3bf 8f4f 	dsb	sy
 800e690:	623b      	str	r3, [r7, #32]
}
 800e692:	bf00      	nop
 800e694:	bf00      	nop
 800e696:	e7fd      	b.n	800e694 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e698:	f001 fa9e 	bl	800fbd8 <xTaskGetSchedulerState>
 800e69c:	4603      	mov	r3, r0
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d102      	bne.n	800e6a8 <xQueueGenericSend+0xa4>
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d101      	bne.n	800e6ac <xQueueGenericSend+0xa8>
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	e000      	b.n	800e6ae <xQueueGenericSend+0xaa>
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d10b      	bne.n	800e6ca <xQueueGenericSend+0xc6>
	__asm volatile
 800e6b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6b6:	f383 8811 	msr	BASEPRI, r3
 800e6ba:	f3bf 8f6f 	isb	sy
 800e6be:	f3bf 8f4f 	dsb	sy
 800e6c2:	61fb      	str	r3, [r7, #28]
}
 800e6c4:	bf00      	nop
 800e6c6:	bf00      	nop
 800e6c8:	e7fd      	b.n	800e6c6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e6ca:	f002 f8ed 	bl	80108a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d302      	bcc.n	800e6e0 <xQueueGenericSend+0xdc>
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	2b02      	cmp	r3, #2
 800e6de:	d129      	bne.n	800e734 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e6e0:	683a      	ldr	r2, [r7, #0]
 800e6e2:	68b9      	ldr	r1, [r7, #8]
 800e6e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e6e6:	f000 fa0f 	bl	800eb08 <prvCopyDataToQueue>
 800e6ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d010      	beq.n	800e716 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f6:	3324      	adds	r3, #36	@ 0x24
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f001 f843 	bl	800f784 <xTaskRemoveFromEventList>
 800e6fe:	4603      	mov	r3, r0
 800e700:	2b00      	cmp	r3, #0
 800e702:	d013      	beq.n	800e72c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e704:	4b3f      	ldr	r3, [pc, #252]	@ (800e804 <xQueueGenericSend+0x200>)
 800e706:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e70a:	601a      	str	r2, [r3, #0]
 800e70c:	f3bf 8f4f 	dsb	sy
 800e710:	f3bf 8f6f 	isb	sy
 800e714:	e00a      	b.n	800e72c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d007      	beq.n	800e72c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e71c:	4b39      	ldr	r3, [pc, #228]	@ (800e804 <xQueueGenericSend+0x200>)
 800e71e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e722:	601a      	str	r2, [r3, #0]
 800e724:	f3bf 8f4f 	dsb	sy
 800e728:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e72c:	f002 f8ee 	bl	801090c <vPortExitCritical>
				return pdPASS;
 800e730:	2301      	movs	r3, #1
 800e732:	e063      	b.n	800e7fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d103      	bne.n	800e742 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e73a:	f002 f8e7 	bl	801090c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e73e:	2300      	movs	r3, #0
 800e740:	e05c      	b.n	800e7fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e744:	2b00      	cmp	r3, #0
 800e746:	d106      	bne.n	800e756 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e748:	f107 0314 	add.w	r3, r7, #20
 800e74c:	4618      	mov	r0, r3
 800e74e:	f001 f8e1 	bl	800f914 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e752:	2301      	movs	r3, #1
 800e754:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e756:	f002 f8d9 	bl	801090c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e75a:	f000 fda7 	bl	800f2ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e75e:	f002 f8a3 	bl	80108a8 <vPortEnterCritical>
 800e762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e764:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e768:	b25b      	sxtb	r3, r3
 800e76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e76e:	d103      	bne.n	800e778 <xQueueGenericSend+0x174>
 800e770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e772:	2200      	movs	r2, #0
 800e774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e77a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e77e:	b25b      	sxtb	r3, r3
 800e780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e784:	d103      	bne.n	800e78e <xQueueGenericSend+0x18a>
 800e786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e788:	2200      	movs	r2, #0
 800e78a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e78e:	f002 f8bd 	bl	801090c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e792:	1d3a      	adds	r2, r7, #4
 800e794:	f107 0314 	add.w	r3, r7, #20
 800e798:	4611      	mov	r1, r2
 800e79a:	4618      	mov	r0, r3
 800e79c:	f001 f8d0 	bl	800f940 <xTaskCheckForTimeOut>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d124      	bne.n	800e7f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e7a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e7a8:	f000 faa6 	bl	800ecf8 <prvIsQueueFull>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d018      	beq.n	800e7e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7b4:	3310      	adds	r3, #16
 800e7b6:	687a      	ldr	r2, [r7, #4]
 800e7b8:	4611      	mov	r1, r2
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f000 ff52 	bl	800f664 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e7c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e7c2:	f000 fa31 	bl	800ec28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e7c6:	f000 fd7f 	bl	800f2c8 <xTaskResumeAll>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	f47f af7c 	bne.w	800e6ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e7d2:	4b0c      	ldr	r3, [pc, #48]	@ (800e804 <xQueueGenericSend+0x200>)
 800e7d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e7d8:	601a      	str	r2, [r3, #0]
 800e7da:	f3bf 8f4f 	dsb	sy
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	e772      	b.n	800e6ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e7e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e7e6:	f000 fa1f 	bl	800ec28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e7ea:	f000 fd6d 	bl	800f2c8 <xTaskResumeAll>
 800e7ee:	e76c      	b.n	800e6ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e7f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e7f2:	f000 fa19 	bl	800ec28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e7f6:	f000 fd67 	bl	800f2c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e7fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3738      	adds	r7, #56	@ 0x38
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}
 800e804:	e000ed04 	.word	0xe000ed04

0800e808 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b090      	sub	sp, #64	@ 0x40
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	60f8      	str	r0, [r7, #12]
 800e810:	60b9      	str	r1, [r7, #8]
 800e812:	607a      	str	r2, [r7, #4]
 800e814:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e81a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d10b      	bne.n	800e838 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e824:	f383 8811 	msr	BASEPRI, r3
 800e828:	f3bf 8f6f 	isb	sy
 800e82c:	f3bf 8f4f 	dsb	sy
 800e830:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e832:	bf00      	nop
 800e834:	bf00      	nop
 800e836:	e7fd      	b.n	800e834 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d103      	bne.n	800e846 <xQueueGenericSendFromISR+0x3e>
 800e83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e842:	2b00      	cmp	r3, #0
 800e844:	d101      	bne.n	800e84a <xQueueGenericSendFromISR+0x42>
 800e846:	2301      	movs	r3, #1
 800e848:	e000      	b.n	800e84c <xQueueGenericSendFromISR+0x44>
 800e84a:	2300      	movs	r3, #0
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d10b      	bne.n	800e868 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e854:	f383 8811 	msr	BASEPRI, r3
 800e858:	f3bf 8f6f 	isb	sy
 800e85c:	f3bf 8f4f 	dsb	sy
 800e860:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e862:	bf00      	nop
 800e864:	bf00      	nop
 800e866:	e7fd      	b.n	800e864 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	2b02      	cmp	r3, #2
 800e86c:	d103      	bne.n	800e876 <xQueueGenericSendFromISR+0x6e>
 800e86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e872:	2b01      	cmp	r3, #1
 800e874:	d101      	bne.n	800e87a <xQueueGenericSendFromISR+0x72>
 800e876:	2301      	movs	r3, #1
 800e878:	e000      	b.n	800e87c <xQueueGenericSendFromISR+0x74>
 800e87a:	2300      	movs	r3, #0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d10b      	bne.n	800e898 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e884:	f383 8811 	msr	BASEPRI, r3
 800e888:	f3bf 8f6f 	isb	sy
 800e88c:	f3bf 8f4f 	dsb	sy
 800e890:	623b      	str	r3, [r7, #32]
}
 800e892:	bf00      	nop
 800e894:	bf00      	nop
 800e896:	e7fd      	b.n	800e894 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e898:	f002 f8e6 	bl	8010a68 <vPortValidateInterruptPriority>
	__asm volatile
 800e89c:	f3ef 8211 	mrs	r2, BASEPRI
 800e8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8a4:	f383 8811 	msr	BASEPRI, r3
 800e8a8:	f3bf 8f6f 	isb	sy
 800e8ac:	f3bf 8f4f 	dsb	sy
 800e8b0:	61fa      	str	r2, [r7, #28]
 800e8b2:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800e8b4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e8b6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	d302      	bcc.n	800e8ca <xQueueGenericSendFromISR+0xc2>
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	2b02      	cmp	r3, #2
 800e8c8:	d12f      	bne.n	800e92a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e8ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e8d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e8da:	683a      	ldr	r2, [r7, #0]
 800e8dc:	68b9      	ldr	r1, [r7, #8]
 800e8de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e8e0:	f000 f912 	bl	800eb08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e8e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ec:	d112      	bne.n	800e914 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d016      	beq.n	800e924 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e8f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8f8:	3324      	adds	r3, #36	@ 0x24
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f000 ff42 	bl	800f784 <xTaskRemoveFromEventList>
 800e900:	4603      	mov	r3, r0
 800e902:	2b00      	cmp	r3, #0
 800e904:	d00e      	beq.n	800e924 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d00b      	beq.n	800e924 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2201      	movs	r2, #1
 800e910:	601a      	str	r2, [r3, #0]
 800e912:	e007      	b.n	800e924 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e914:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e918:	3301      	adds	r3, #1
 800e91a:	b2db      	uxtb	r3, r3
 800e91c:	b25a      	sxtb	r2, r3
 800e91e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e920:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e924:	2301      	movs	r3, #1
 800e926:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e928:	e001      	b.n	800e92e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e92a:	2300      	movs	r3, #0
 800e92c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e92e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e930:	617b      	str	r3, [r7, #20]
	__asm volatile
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	f383 8811 	msr	BASEPRI, r3
}
 800e938:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e93a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3740      	adds	r7, #64	@ 0x40
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}

0800e944 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b08c      	sub	sp, #48	@ 0x30
 800e948:	af00      	add	r7, sp, #0
 800e94a:	60f8      	str	r0, [r7, #12]
 800e94c:	60b9      	str	r1, [r7, #8]
 800e94e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e950:	2300      	movs	r3, #0
 800e952:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d10b      	bne.n	800e976 <xQueueReceive+0x32>
	__asm volatile
 800e95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e962:	f383 8811 	msr	BASEPRI, r3
 800e966:	f3bf 8f6f 	isb	sy
 800e96a:	f3bf 8f4f 	dsb	sy
 800e96e:	623b      	str	r3, [r7, #32]
}
 800e970:	bf00      	nop
 800e972:	bf00      	nop
 800e974:	e7fd      	b.n	800e972 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d103      	bne.n	800e984 <xQueueReceive+0x40>
 800e97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e97e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e980:	2b00      	cmp	r3, #0
 800e982:	d101      	bne.n	800e988 <xQueueReceive+0x44>
 800e984:	2301      	movs	r3, #1
 800e986:	e000      	b.n	800e98a <xQueueReceive+0x46>
 800e988:	2300      	movs	r3, #0
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d10b      	bne.n	800e9a6 <xQueueReceive+0x62>
	__asm volatile
 800e98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e992:	f383 8811 	msr	BASEPRI, r3
 800e996:	f3bf 8f6f 	isb	sy
 800e99a:	f3bf 8f4f 	dsb	sy
 800e99e:	61fb      	str	r3, [r7, #28]
}
 800e9a0:	bf00      	nop
 800e9a2:	bf00      	nop
 800e9a4:	e7fd      	b.n	800e9a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e9a6:	f001 f917 	bl	800fbd8 <xTaskGetSchedulerState>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d102      	bne.n	800e9b6 <xQueueReceive+0x72>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d101      	bne.n	800e9ba <xQueueReceive+0x76>
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	e000      	b.n	800e9bc <xQueueReceive+0x78>
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d10b      	bne.n	800e9d8 <xQueueReceive+0x94>
	__asm volatile
 800e9c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9c4:	f383 8811 	msr	BASEPRI, r3
 800e9c8:	f3bf 8f6f 	isb	sy
 800e9cc:	f3bf 8f4f 	dsb	sy
 800e9d0:	61bb      	str	r3, [r7, #24]
}
 800e9d2:	bf00      	nop
 800e9d4:	bf00      	nop
 800e9d6:	e7fd      	b.n	800e9d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e9d8:	f001 ff66 	bl	80108a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d01f      	beq.n	800ea28 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e9e8:	68b9      	ldr	r1, [r7, #8]
 800e9ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9ec:	f000 f8f6 	bl	800ebdc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9f2:	1e5a      	subs	r2, r3, #1
 800e9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9fa:	691b      	ldr	r3, [r3, #16]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d00f      	beq.n	800ea20 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea02:	3310      	adds	r3, #16
 800ea04:	4618      	mov	r0, r3
 800ea06:	f000 febd 	bl	800f784 <xTaskRemoveFromEventList>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d007      	beq.n	800ea20 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ea10:	4b3c      	ldr	r3, [pc, #240]	@ (800eb04 <xQueueReceive+0x1c0>)
 800ea12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea16:	601a      	str	r2, [r3, #0]
 800ea18:	f3bf 8f4f 	dsb	sy
 800ea1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ea20:	f001 ff74 	bl	801090c <vPortExitCritical>
				return pdPASS;
 800ea24:	2301      	movs	r3, #1
 800ea26:	e069      	b.n	800eafc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d103      	bne.n	800ea36 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ea2e:	f001 ff6d 	bl	801090c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ea32:	2300      	movs	r3, #0
 800ea34:	e062      	b.n	800eafc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ea36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d106      	bne.n	800ea4a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ea3c:	f107 0310 	add.w	r3, r7, #16
 800ea40:	4618      	mov	r0, r3
 800ea42:	f000 ff67 	bl	800f914 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ea46:	2301      	movs	r3, #1
 800ea48:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ea4a:	f001 ff5f 	bl	801090c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ea4e:	f000 fc2d 	bl	800f2ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ea52:	f001 ff29 	bl	80108a8 <vPortEnterCritical>
 800ea56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ea5c:	b25b      	sxtb	r3, r3
 800ea5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea62:	d103      	bne.n	800ea6c <xQueueReceive+0x128>
 800ea64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea66:	2200      	movs	r2, #0
 800ea68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ea6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ea72:	b25b      	sxtb	r3, r3
 800ea74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea78:	d103      	bne.n	800ea82 <xQueueReceive+0x13e>
 800ea7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ea82:	f001 ff43 	bl	801090c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ea86:	1d3a      	adds	r2, r7, #4
 800ea88:	f107 0310 	add.w	r3, r7, #16
 800ea8c:	4611      	mov	r1, r2
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f000 ff56 	bl	800f940 <xTaskCheckForTimeOut>
 800ea94:	4603      	mov	r3, r0
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d123      	bne.n	800eae2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea9c:	f000 f916 	bl	800eccc <prvIsQueueEmpty>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d017      	beq.n	800ead6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eaa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaa8:	3324      	adds	r3, #36	@ 0x24
 800eaaa:	687a      	ldr	r2, [r7, #4]
 800eaac:	4611      	mov	r1, r2
 800eaae:	4618      	mov	r0, r3
 800eab0:	f000 fdd8 	bl	800f664 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eab4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eab6:	f000 f8b7 	bl	800ec28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eaba:	f000 fc05 	bl	800f2c8 <xTaskResumeAll>
 800eabe:	4603      	mov	r3, r0
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d189      	bne.n	800e9d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800eac4:	4b0f      	ldr	r3, [pc, #60]	@ (800eb04 <xQueueReceive+0x1c0>)
 800eac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eaca:	601a      	str	r2, [r3, #0]
 800eacc:	f3bf 8f4f 	dsb	sy
 800ead0:	f3bf 8f6f 	isb	sy
 800ead4:	e780      	b.n	800e9d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ead6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ead8:	f000 f8a6 	bl	800ec28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eadc:	f000 fbf4 	bl	800f2c8 <xTaskResumeAll>
 800eae0:	e77a      	b.n	800e9d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800eae2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eae4:	f000 f8a0 	bl	800ec28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eae8:	f000 fbee 	bl	800f2c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eaec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eaee:	f000 f8ed 	bl	800eccc <prvIsQueueEmpty>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	f43f af6f 	beq.w	800e9d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eafa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3730      	adds	r7, #48	@ 0x30
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	e000ed04 	.word	0xe000ed04

0800eb08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b086      	sub	sp, #24
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	60f8      	str	r0, [r7, #12]
 800eb10:	60b9      	str	r1, [r7, #8]
 800eb12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800eb14:	2300      	movs	r3, #0
 800eb16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d10d      	bne.n	800eb42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d14d      	bne.n	800ebca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	689b      	ldr	r3, [r3, #8]
 800eb32:	4618      	mov	r0, r3
 800eb34:	f001 f86e 	bl	800fc14 <xTaskPriorityDisinherit>
 800eb38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	609a      	str	r2, [r3, #8]
 800eb40:	e043      	b.n	800ebca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d119      	bne.n	800eb7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	6858      	ldr	r0, [r3, #4]
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb50:	461a      	mov	r2, r3
 800eb52:	68b9      	ldr	r1, [r7, #8]
 800eb54:	f003 ff6c 	bl	8012a30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	685a      	ldr	r2, [r3, #4]
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb60:	441a      	add	r2, r3
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	685a      	ldr	r2, [r3, #4]
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	689b      	ldr	r3, [r3, #8]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d32b      	bcc.n	800ebca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	681a      	ldr	r2, [r3, #0]
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	605a      	str	r2, [r3, #4]
 800eb7a:	e026      	b.n	800ebca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	68d8      	ldr	r0, [r3, #12]
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb84:	461a      	mov	r2, r3
 800eb86:	68b9      	ldr	r1, [r7, #8]
 800eb88:	f003 ff52 	bl	8012a30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	68da      	ldr	r2, [r3, #12]
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb94:	425b      	negs	r3, r3
 800eb96:	441a      	add	r2, r3
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	68da      	ldr	r2, [r3, #12]
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	429a      	cmp	r2, r3
 800eba6:	d207      	bcs.n	800ebb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	689a      	ldr	r2, [r3, #8]
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebb0:	425b      	negs	r3, r3
 800ebb2:	441a      	add	r2, r3
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2b02      	cmp	r3, #2
 800ebbc:	d105      	bne.n	800ebca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d002      	beq.n	800ebca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	3b01      	subs	r3, #1
 800ebc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ebca:	693b      	ldr	r3, [r7, #16]
 800ebcc:	1c5a      	adds	r2, r3, #1
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ebd2:	697b      	ldr	r3, [r7, #20]
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3718      	adds	r7, #24
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d018      	beq.n	800ec20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	68da      	ldr	r2, [r3, #12]
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebf6:	441a      	add	r2, r3
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	68da      	ldr	r2, [r3, #12]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	689b      	ldr	r3, [r3, #8]
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d303      	bcc.n	800ec10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	68d9      	ldr	r1, [r3, #12]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec18:	461a      	mov	r2, r3
 800ec1a:	6838      	ldr	r0, [r7, #0]
 800ec1c:	f003 ff08 	bl	8012a30 <memcpy>
	}
}
 800ec20:	bf00      	nop
 800ec22:	3708      	adds	r7, #8
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}

0800ec28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b084      	sub	sp, #16
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ec30:	f001 fe3a 	bl	80108a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ec3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ec3c:	e011      	b.n	800ec62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d012      	beq.n	800ec6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	3324      	adds	r3, #36	@ 0x24
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f000 fd9a 	bl	800f784 <xTaskRemoveFromEventList>
 800ec50:	4603      	mov	r3, r0
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d001      	beq.n	800ec5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ec56:	f000 fed7 	bl	800fa08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ec5a:	7bfb      	ldrb	r3, [r7, #15]
 800ec5c:	3b01      	subs	r3, #1
 800ec5e:	b2db      	uxtb	r3, r3
 800ec60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ec62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	dce9      	bgt.n	800ec3e <prvUnlockQueue+0x16>
 800ec6a:	e000      	b.n	800ec6e <prvUnlockQueue+0x46>
					break;
 800ec6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	22ff      	movs	r2, #255	@ 0xff
 800ec72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ec76:	f001 fe49 	bl	801090c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ec7a:	f001 fe15 	bl	80108a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ec84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ec86:	e011      	b.n	800ecac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	691b      	ldr	r3, [r3, #16]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d012      	beq.n	800ecb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	3310      	adds	r3, #16
 800ec94:	4618      	mov	r0, r3
 800ec96:	f000 fd75 	bl	800f784 <xTaskRemoveFromEventList>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d001      	beq.n	800eca4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800eca0:	f000 feb2 	bl	800fa08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800eca4:	7bbb      	ldrb	r3, [r7, #14]
 800eca6:	3b01      	subs	r3, #1
 800eca8:	b2db      	uxtb	r3, r3
 800ecaa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ecac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	dce9      	bgt.n	800ec88 <prvUnlockQueue+0x60>
 800ecb4:	e000      	b.n	800ecb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ecb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	22ff      	movs	r2, #255	@ 0xff
 800ecbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ecc0:	f001 fe24 	bl	801090c <vPortExitCritical>
}
 800ecc4:	bf00      	nop
 800ecc6:	3710      	adds	r7, #16
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}

0800eccc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b084      	sub	sp, #16
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ecd4:	f001 fde8 	bl	80108a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d102      	bne.n	800ece6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ece0:	2301      	movs	r3, #1
 800ece2:	60fb      	str	r3, [r7, #12]
 800ece4:	e001      	b.n	800ecea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ece6:	2300      	movs	r3, #0
 800ece8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ecea:	f001 fe0f 	bl	801090c <vPortExitCritical>

	return xReturn;
 800ecee:	68fb      	ldr	r3, [r7, #12]
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	3710      	adds	r7, #16
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}

0800ecf8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b084      	sub	sp, #16
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ed00:	f001 fdd2 	bl	80108a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d102      	bne.n	800ed16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ed10:	2301      	movs	r3, #1
 800ed12:	60fb      	str	r3, [r7, #12]
 800ed14:	e001      	b.n	800ed1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ed16:	2300      	movs	r3, #0
 800ed18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ed1a:	f001 fdf7 	bl	801090c <vPortExitCritical>

	return xReturn;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3710      	adds	r7, #16
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}

0800ed28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ed28:	b480      	push	{r7}
 800ed2a:	b085      	sub	sp, #20
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ed32:	2300      	movs	r3, #0
 800ed34:	60fb      	str	r3, [r7, #12]
 800ed36:	e014      	b.n	800ed62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ed38:	4a0f      	ldr	r2, [pc, #60]	@ (800ed78 <vQueueAddToRegistry+0x50>)
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d10b      	bne.n	800ed5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ed44:	490c      	ldr	r1, [pc, #48]	@ (800ed78 <vQueueAddToRegistry+0x50>)
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	683a      	ldr	r2, [r7, #0]
 800ed4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ed4e:	4a0a      	ldr	r2, [pc, #40]	@ (800ed78 <vQueueAddToRegistry+0x50>)
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	00db      	lsls	r3, r3, #3
 800ed54:	4413      	add	r3, r2
 800ed56:	687a      	ldr	r2, [r7, #4]
 800ed58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ed5a:	e006      	b.n	800ed6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	3301      	adds	r3, #1
 800ed60:	60fb      	str	r3, [r7, #12]
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	2b07      	cmp	r3, #7
 800ed66:	d9e7      	bls.n	800ed38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ed68:	bf00      	nop
 800ed6a:	bf00      	nop
 800ed6c:	3714      	adds	r7, #20
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed74:	4770      	bx	lr
 800ed76:	bf00      	nop
 800ed78:	20000dac 	.word	0x20000dac

0800ed7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b086      	sub	sp, #24
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	60f8      	str	r0, [r7, #12]
 800ed84:	60b9      	str	r1, [r7, #8]
 800ed86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ed8c:	f001 fd8c 	bl	80108a8 <vPortEnterCritical>
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ed96:	b25b      	sxtb	r3, r3
 800ed98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed9c:	d103      	bne.n	800eda6 <vQueueWaitForMessageRestricted+0x2a>
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	2200      	movs	r2, #0
 800eda2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800edac:	b25b      	sxtb	r3, r3
 800edae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edb2:	d103      	bne.n	800edbc <vQueueWaitForMessageRestricted+0x40>
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	2200      	movs	r2, #0
 800edb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800edbc:	f001 fda6 	bl	801090c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d106      	bne.n	800edd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	3324      	adds	r3, #36	@ 0x24
 800edcc:	687a      	ldr	r2, [r7, #4]
 800edce:	68b9      	ldr	r1, [r7, #8]
 800edd0:	4618      	mov	r0, r3
 800edd2:	f000 fcab 	bl	800f72c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800edd6:	6978      	ldr	r0, [r7, #20]
 800edd8:	f7ff ff26 	bl	800ec28 <prvUnlockQueue>
	}
 800eddc:	bf00      	nop
 800edde:	3718      	adds	r7, #24
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}

0800ede4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b08e      	sub	sp, #56	@ 0x38
 800ede8:	af04      	add	r7, sp, #16
 800edea:	60f8      	str	r0, [r7, #12]
 800edec:	60b9      	str	r1, [r7, #8]
 800edee:	607a      	str	r2, [r7, #4]
 800edf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800edf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d10b      	bne.n	800ee10 <xTaskCreateStatic+0x2c>
	__asm volatile
 800edf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edfc:	f383 8811 	msr	BASEPRI, r3
 800ee00:	f3bf 8f6f 	isb	sy
 800ee04:	f3bf 8f4f 	dsb	sy
 800ee08:	623b      	str	r3, [r7, #32]
}
 800ee0a:	bf00      	nop
 800ee0c:	bf00      	nop
 800ee0e:	e7fd      	b.n	800ee0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ee10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d10b      	bne.n	800ee2e <xTaskCreateStatic+0x4a>
	__asm volatile
 800ee16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee1a:	f383 8811 	msr	BASEPRI, r3
 800ee1e:	f3bf 8f6f 	isb	sy
 800ee22:	f3bf 8f4f 	dsb	sy
 800ee26:	61fb      	str	r3, [r7, #28]
}
 800ee28:	bf00      	nop
 800ee2a:	bf00      	nop
 800ee2c:	e7fd      	b.n	800ee2a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ee2e:	23a8      	movs	r3, #168	@ 0xa8
 800ee30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	2ba8      	cmp	r3, #168	@ 0xa8
 800ee36:	d00b      	beq.n	800ee50 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ee38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee3c:	f383 8811 	msr	BASEPRI, r3
 800ee40:	f3bf 8f6f 	isb	sy
 800ee44:	f3bf 8f4f 	dsb	sy
 800ee48:	61bb      	str	r3, [r7, #24]
}
 800ee4a:	bf00      	nop
 800ee4c:	bf00      	nop
 800ee4e:	e7fd      	b.n	800ee4c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ee50:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ee52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d01e      	beq.n	800ee96 <xTaskCreateStatic+0xb2>
 800ee58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d01b      	beq.n	800ee96 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ee5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee60:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ee62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ee66:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ee68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee6a:	2202      	movs	r2, #2
 800ee6c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ee70:	2300      	movs	r3, #0
 800ee72:	9303      	str	r3, [sp, #12]
 800ee74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee76:	9302      	str	r3, [sp, #8]
 800ee78:	f107 0314 	add.w	r3, r7, #20
 800ee7c:	9301      	str	r3, [sp, #4]
 800ee7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee80:	9300      	str	r3, [sp, #0]
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	687a      	ldr	r2, [r7, #4]
 800ee86:	68b9      	ldr	r1, [r7, #8]
 800ee88:	68f8      	ldr	r0, [r7, #12]
 800ee8a:	f000 f851 	bl	800ef30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ee8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee90:	f000 f8f6 	bl	800f080 <prvAddNewTaskToReadyList>
 800ee94:	e001      	b.n	800ee9a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ee96:	2300      	movs	r3, #0
 800ee98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ee9a:	697b      	ldr	r3, [r7, #20]
	}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3728      	adds	r7, #40	@ 0x28
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b08c      	sub	sp, #48	@ 0x30
 800eea8:	af04      	add	r7, sp, #16
 800eeaa:	60f8      	str	r0, [r7, #12]
 800eeac:	60b9      	str	r1, [r7, #8]
 800eeae:	603b      	str	r3, [r7, #0]
 800eeb0:	4613      	mov	r3, r2
 800eeb2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800eeb4:	88fb      	ldrh	r3, [r7, #6]
 800eeb6:	009b      	lsls	r3, r3, #2
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f001 fe17 	bl	8010aec <pvPortMalloc>
 800eebe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d00e      	beq.n	800eee4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eec6:	20a8      	movs	r0, #168	@ 0xa8
 800eec8:	f001 fe10 	bl	8010aec <pvPortMalloc>
 800eecc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800eece:	69fb      	ldr	r3, [r7, #28]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d003      	beq.n	800eedc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eed4:	69fb      	ldr	r3, [r7, #28]
 800eed6:	697a      	ldr	r2, [r7, #20]
 800eed8:	631a      	str	r2, [r3, #48]	@ 0x30
 800eeda:	e005      	b.n	800eee8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eedc:	6978      	ldr	r0, [r7, #20]
 800eede:	f001 fed3 	bl	8010c88 <vPortFree>
 800eee2:	e001      	b.n	800eee8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800eee4:	2300      	movs	r3, #0
 800eee6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800eee8:	69fb      	ldr	r3, [r7, #28]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d017      	beq.n	800ef1e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800eeee:	69fb      	ldr	r3, [r7, #28]
 800eef0:	2200      	movs	r2, #0
 800eef2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800eef6:	88fa      	ldrh	r2, [r7, #6]
 800eef8:	2300      	movs	r3, #0
 800eefa:	9303      	str	r3, [sp, #12]
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	9302      	str	r3, [sp, #8]
 800ef00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef02:	9301      	str	r3, [sp, #4]
 800ef04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef06:	9300      	str	r3, [sp, #0]
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	68b9      	ldr	r1, [r7, #8]
 800ef0c:	68f8      	ldr	r0, [r7, #12]
 800ef0e:	f000 f80f 	bl	800ef30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ef12:	69f8      	ldr	r0, [r7, #28]
 800ef14:	f000 f8b4 	bl	800f080 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ef18:	2301      	movs	r3, #1
 800ef1a:	61bb      	str	r3, [r7, #24]
 800ef1c:	e002      	b.n	800ef24 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ef1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ef22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ef24:	69bb      	ldr	r3, [r7, #24]
	}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3720      	adds	r7, #32
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}
	...

0800ef30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b088      	sub	sp, #32
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	60f8      	str	r0, [r7, #12]
 800ef38:	60b9      	str	r1, [r7, #8]
 800ef3a:	607a      	str	r2, [r7, #4]
 800ef3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ef3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef40:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	009b      	lsls	r3, r3, #2
 800ef46:	461a      	mov	r2, r3
 800ef48:	21a5      	movs	r1, #165	@ 0xa5
 800ef4a:	f003 fc8f 	bl	801286c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ef4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef58:	3b01      	subs	r3, #1
 800ef5a:	009b      	lsls	r3, r3, #2
 800ef5c:	4413      	add	r3, r2
 800ef5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ef60:	69bb      	ldr	r3, [r7, #24]
 800ef62:	f023 0307 	bic.w	r3, r3, #7
 800ef66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ef68:	69bb      	ldr	r3, [r7, #24]
 800ef6a:	f003 0307 	and.w	r3, r3, #7
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d00b      	beq.n	800ef8a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ef72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef76:	f383 8811 	msr	BASEPRI, r3
 800ef7a:	f3bf 8f6f 	isb	sy
 800ef7e:	f3bf 8f4f 	dsb	sy
 800ef82:	617b      	str	r3, [r7, #20]
}
 800ef84:	bf00      	nop
 800ef86:	bf00      	nop
 800ef88:	e7fd      	b.n	800ef86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d01f      	beq.n	800efd0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ef90:	2300      	movs	r3, #0
 800ef92:	61fb      	str	r3, [r7, #28]
 800ef94:	e012      	b.n	800efbc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ef96:	68ba      	ldr	r2, [r7, #8]
 800ef98:	69fb      	ldr	r3, [r7, #28]
 800ef9a:	4413      	add	r3, r2
 800ef9c:	7819      	ldrb	r1, [r3, #0]
 800ef9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800efa0:	69fb      	ldr	r3, [r7, #28]
 800efa2:	4413      	add	r3, r2
 800efa4:	3334      	adds	r3, #52	@ 0x34
 800efa6:	460a      	mov	r2, r1
 800efa8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800efaa:	68ba      	ldr	r2, [r7, #8]
 800efac:	69fb      	ldr	r3, [r7, #28]
 800efae:	4413      	add	r3, r2
 800efb0:	781b      	ldrb	r3, [r3, #0]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d006      	beq.n	800efc4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800efb6:	69fb      	ldr	r3, [r7, #28]
 800efb8:	3301      	adds	r3, #1
 800efba:	61fb      	str	r3, [r7, #28]
 800efbc:	69fb      	ldr	r3, [r7, #28]
 800efbe:	2b0f      	cmp	r3, #15
 800efc0:	d9e9      	bls.n	800ef96 <prvInitialiseNewTask+0x66>
 800efc2:	e000      	b.n	800efc6 <prvInitialiseNewTask+0x96>
			{
				break;
 800efc4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800efc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efc8:	2200      	movs	r2, #0
 800efca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800efce:	e003      	b.n	800efd8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800efd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efd2:	2200      	movs	r2, #0
 800efd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800efd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efda:	2b37      	cmp	r3, #55	@ 0x37
 800efdc:	d901      	bls.n	800efe2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800efde:	2337      	movs	r3, #55	@ 0x37
 800efe0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800efe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efe4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800efe6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800efe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800efec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800efee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eff0:	2200      	movs	r2, #0
 800eff2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800eff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eff6:	3304      	adds	r3, #4
 800eff8:	4618      	mov	r0, r3
 800effa:	f7ff f965 	bl	800e2c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800effe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f000:	3318      	adds	r3, #24
 800f002:	4618      	mov	r0, r3
 800f004:	f7ff f960 	bl	800e2c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f00a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f00c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f010:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f016:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f01a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f01c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f020:	2200      	movs	r2, #0
 800f022:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f028:	2200      	movs	r2, #0
 800f02a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f030:	3354      	adds	r3, #84	@ 0x54
 800f032:	224c      	movs	r2, #76	@ 0x4c
 800f034:	2100      	movs	r1, #0
 800f036:	4618      	mov	r0, r3
 800f038:	f003 fc18 	bl	801286c <memset>
 800f03c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f03e:	4a0d      	ldr	r2, [pc, #52]	@ (800f074 <prvInitialiseNewTask+0x144>)
 800f040:	659a      	str	r2, [r3, #88]	@ 0x58
 800f042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f044:	4a0c      	ldr	r2, [pc, #48]	@ (800f078 <prvInitialiseNewTask+0x148>)
 800f046:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f04a:	4a0c      	ldr	r2, [pc, #48]	@ (800f07c <prvInitialiseNewTask+0x14c>)
 800f04c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f04e:	683a      	ldr	r2, [r7, #0]
 800f050:	68f9      	ldr	r1, [r7, #12]
 800f052:	69b8      	ldr	r0, [r7, #24]
 800f054:	f001 faf4 	bl	8010640 <pxPortInitialiseStack>
 800f058:	4602      	mov	r2, r0
 800f05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f05c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f060:	2b00      	cmp	r3, #0
 800f062:	d002      	beq.n	800f06a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f068:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f06a:	bf00      	nop
 800f06c:	3720      	adds	r7, #32
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	20006c34 	.word	0x20006c34
 800f078:	20006c9c 	.word	0x20006c9c
 800f07c:	20006d04 	.word	0x20006d04

0800f080 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b082      	sub	sp, #8
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f088:	f001 fc0e 	bl	80108a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f08c:	4b2d      	ldr	r3, [pc, #180]	@ (800f144 <prvAddNewTaskToReadyList+0xc4>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	3301      	adds	r3, #1
 800f092:	4a2c      	ldr	r2, [pc, #176]	@ (800f144 <prvAddNewTaskToReadyList+0xc4>)
 800f094:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f096:	4b2c      	ldr	r3, [pc, #176]	@ (800f148 <prvAddNewTaskToReadyList+0xc8>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d109      	bne.n	800f0b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f09e:	4a2a      	ldr	r2, [pc, #168]	@ (800f148 <prvAddNewTaskToReadyList+0xc8>)
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f0a4:	4b27      	ldr	r3, [pc, #156]	@ (800f144 <prvAddNewTaskToReadyList+0xc4>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d110      	bne.n	800f0ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f0ac:	f000 fcd0 	bl	800fa50 <prvInitialiseTaskLists>
 800f0b0:	e00d      	b.n	800f0ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f0b2:	4b26      	ldr	r3, [pc, #152]	@ (800f14c <prvAddNewTaskToReadyList+0xcc>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d109      	bne.n	800f0ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f0ba:	4b23      	ldr	r3, [pc, #140]	@ (800f148 <prvAddNewTaskToReadyList+0xc8>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d802      	bhi.n	800f0ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f0c8:	4a1f      	ldr	r2, [pc, #124]	@ (800f148 <prvAddNewTaskToReadyList+0xc8>)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f0ce:	4b20      	ldr	r3, [pc, #128]	@ (800f150 <prvAddNewTaskToReadyList+0xd0>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	3301      	adds	r3, #1
 800f0d4:	4a1e      	ldr	r2, [pc, #120]	@ (800f150 <prvAddNewTaskToReadyList+0xd0>)
 800f0d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f0d8:	4b1d      	ldr	r3, [pc, #116]	@ (800f150 <prvAddNewTaskToReadyList+0xd0>)
 800f0da:	681a      	ldr	r2, [r3, #0]
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0e4:	4b1b      	ldr	r3, [pc, #108]	@ (800f154 <prvAddNewTaskToReadyList+0xd4>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d903      	bls.n	800f0f4 <prvAddNewTaskToReadyList+0x74>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0f0:	4a18      	ldr	r2, [pc, #96]	@ (800f154 <prvAddNewTaskToReadyList+0xd4>)
 800f0f2:	6013      	str	r3, [r2, #0]
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0f8:	4613      	mov	r3, r2
 800f0fa:	009b      	lsls	r3, r3, #2
 800f0fc:	4413      	add	r3, r2
 800f0fe:	009b      	lsls	r3, r3, #2
 800f100:	4a15      	ldr	r2, [pc, #84]	@ (800f158 <prvAddNewTaskToReadyList+0xd8>)
 800f102:	441a      	add	r2, r3
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	3304      	adds	r3, #4
 800f108:	4619      	mov	r1, r3
 800f10a:	4610      	mov	r0, r2
 800f10c:	f7ff f8e9 	bl	800e2e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f110:	f001 fbfc 	bl	801090c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f114:	4b0d      	ldr	r3, [pc, #52]	@ (800f14c <prvAddNewTaskToReadyList+0xcc>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d00e      	beq.n	800f13a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f11c:	4b0a      	ldr	r3, [pc, #40]	@ (800f148 <prvAddNewTaskToReadyList+0xc8>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f126:	429a      	cmp	r2, r3
 800f128:	d207      	bcs.n	800f13a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f12a:	4b0c      	ldr	r3, [pc, #48]	@ (800f15c <prvAddNewTaskToReadyList+0xdc>)
 800f12c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f130:	601a      	str	r2, [r3, #0]
 800f132:	f3bf 8f4f 	dsb	sy
 800f136:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f13a:	bf00      	nop
 800f13c:	3708      	adds	r7, #8
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
 800f142:	bf00      	nop
 800f144:	200012c0 	.word	0x200012c0
 800f148:	20000dec 	.word	0x20000dec
 800f14c:	200012cc 	.word	0x200012cc
 800f150:	200012dc 	.word	0x200012dc
 800f154:	200012c8 	.word	0x200012c8
 800f158:	20000df0 	.word	0x20000df0
 800f15c:	e000ed04 	.word	0xe000ed04

0800f160 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f160:	b580      	push	{r7, lr}
 800f162:	b084      	sub	sp, #16
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f168:	2300      	movs	r3, #0
 800f16a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d018      	beq.n	800f1a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f172:	4b14      	ldr	r3, [pc, #80]	@ (800f1c4 <vTaskDelay+0x64>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d00b      	beq.n	800f192 <vTaskDelay+0x32>
	__asm volatile
 800f17a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f17e:	f383 8811 	msr	BASEPRI, r3
 800f182:	f3bf 8f6f 	isb	sy
 800f186:	f3bf 8f4f 	dsb	sy
 800f18a:	60bb      	str	r3, [r7, #8]
}
 800f18c:	bf00      	nop
 800f18e:	bf00      	nop
 800f190:	e7fd      	b.n	800f18e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f192:	f000 f88b 	bl	800f2ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f196:	2100      	movs	r1, #0
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f000 fdc3 	bl	800fd24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f19e:	f000 f893 	bl	800f2c8 <xTaskResumeAll>
 800f1a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d107      	bne.n	800f1ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f1aa:	4b07      	ldr	r3, [pc, #28]	@ (800f1c8 <vTaskDelay+0x68>)
 800f1ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1b0:	601a      	str	r2, [r3, #0]
 800f1b2:	f3bf 8f4f 	dsb	sy
 800f1b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f1ba:	bf00      	nop
 800f1bc:	3710      	adds	r7, #16
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}
 800f1c2:	bf00      	nop
 800f1c4:	200012e8 	.word	0x200012e8
 800f1c8:	e000ed04 	.word	0xe000ed04

0800f1cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b08a      	sub	sp, #40	@ 0x28
 800f1d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f1da:	463a      	mov	r2, r7
 800f1dc:	1d39      	adds	r1, r7, #4
 800f1de:	f107 0308 	add.w	r3, r7, #8
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7fe fe26 	bl	800de34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f1e8:	6839      	ldr	r1, [r7, #0]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	68ba      	ldr	r2, [r7, #8]
 800f1ee:	9202      	str	r2, [sp, #8]
 800f1f0:	9301      	str	r3, [sp, #4]
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	9300      	str	r3, [sp, #0]
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	460a      	mov	r2, r1
 800f1fa:	4924      	ldr	r1, [pc, #144]	@ (800f28c <vTaskStartScheduler+0xc0>)
 800f1fc:	4824      	ldr	r0, [pc, #144]	@ (800f290 <vTaskStartScheduler+0xc4>)
 800f1fe:	f7ff fdf1 	bl	800ede4 <xTaskCreateStatic>
 800f202:	4603      	mov	r3, r0
 800f204:	4a23      	ldr	r2, [pc, #140]	@ (800f294 <vTaskStartScheduler+0xc8>)
 800f206:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f208:	4b22      	ldr	r3, [pc, #136]	@ (800f294 <vTaskStartScheduler+0xc8>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d002      	beq.n	800f216 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f210:	2301      	movs	r3, #1
 800f212:	617b      	str	r3, [r7, #20]
 800f214:	e001      	b.n	800f21a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f216:	2300      	movs	r3, #0
 800f218:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	2b01      	cmp	r3, #1
 800f21e:	d102      	bne.n	800f226 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f220:	f000 fdd4 	bl	800fdcc <xTimerCreateTimerTask>
 800f224:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	2b01      	cmp	r3, #1
 800f22a:	d11b      	bne.n	800f264 <vTaskStartScheduler+0x98>
	__asm volatile
 800f22c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f230:	f383 8811 	msr	BASEPRI, r3
 800f234:	f3bf 8f6f 	isb	sy
 800f238:	f3bf 8f4f 	dsb	sy
 800f23c:	613b      	str	r3, [r7, #16]
}
 800f23e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f240:	4b15      	ldr	r3, [pc, #84]	@ (800f298 <vTaskStartScheduler+0xcc>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	3354      	adds	r3, #84	@ 0x54
 800f246:	4a15      	ldr	r2, [pc, #84]	@ (800f29c <vTaskStartScheduler+0xd0>)
 800f248:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f24a:	4b15      	ldr	r3, [pc, #84]	@ (800f2a0 <vTaskStartScheduler+0xd4>)
 800f24c:	f04f 32ff 	mov.w	r2, #4294967295
 800f250:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f252:	4b14      	ldr	r3, [pc, #80]	@ (800f2a4 <vTaskStartScheduler+0xd8>)
 800f254:	2201      	movs	r2, #1
 800f256:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f258:	4b13      	ldr	r3, [pc, #76]	@ (800f2a8 <vTaskStartScheduler+0xdc>)
 800f25a:	2200      	movs	r2, #0
 800f25c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f25e:	f001 fa7f 	bl	8010760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f262:	e00f      	b.n	800f284 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f26a:	d10b      	bne.n	800f284 <vTaskStartScheduler+0xb8>
	__asm volatile
 800f26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f270:	f383 8811 	msr	BASEPRI, r3
 800f274:	f3bf 8f6f 	isb	sy
 800f278:	f3bf 8f4f 	dsb	sy
 800f27c:	60fb      	str	r3, [r7, #12]
}
 800f27e:	bf00      	nop
 800f280:	bf00      	nop
 800f282:	e7fd      	b.n	800f280 <vTaskStartScheduler+0xb4>
}
 800f284:	bf00      	nop
 800f286:	3718      	adds	r7, #24
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}
 800f28c:	0801484c 	.word	0x0801484c
 800f290:	0800fa21 	.word	0x0800fa21
 800f294:	200012e4 	.word	0x200012e4
 800f298:	20000dec 	.word	0x20000dec
 800f29c:	20000130 	.word	0x20000130
 800f2a0:	200012e0 	.word	0x200012e0
 800f2a4:	200012cc 	.word	0x200012cc
 800f2a8:	200012c4 	.word	0x200012c4

0800f2ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f2b0:	4b04      	ldr	r3, [pc, #16]	@ (800f2c4 <vTaskSuspendAll+0x18>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	3301      	adds	r3, #1
 800f2b6:	4a03      	ldr	r2, [pc, #12]	@ (800f2c4 <vTaskSuspendAll+0x18>)
 800f2b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f2ba:	bf00      	nop
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c2:	4770      	bx	lr
 800f2c4:	200012e8 	.word	0x200012e8

0800f2c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b084      	sub	sp, #16
 800f2cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f2d6:	4b42      	ldr	r3, [pc, #264]	@ (800f3e0 <xTaskResumeAll+0x118>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d10b      	bne.n	800f2f6 <xTaskResumeAll+0x2e>
	__asm volatile
 800f2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2e2:	f383 8811 	msr	BASEPRI, r3
 800f2e6:	f3bf 8f6f 	isb	sy
 800f2ea:	f3bf 8f4f 	dsb	sy
 800f2ee:	603b      	str	r3, [r7, #0]
}
 800f2f0:	bf00      	nop
 800f2f2:	bf00      	nop
 800f2f4:	e7fd      	b.n	800f2f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f2f6:	f001 fad7 	bl	80108a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f2fa:	4b39      	ldr	r3, [pc, #228]	@ (800f3e0 <xTaskResumeAll+0x118>)
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	3b01      	subs	r3, #1
 800f300:	4a37      	ldr	r2, [pc, #220]	@ (800f3e0 <xTaskResumeAll+0x118>)
 800f302:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f304:	4b36      	ldr	r3, [pc, #216]	@ (800f3e0 <xTaskResumeAll+0x118>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d162      	bne.n	800f3d2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f30c:	4b35      	ldr	r3, [pc, #212]	@ (800f3e4 <xTaskResumeAll+0x11c>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d05e      	beq.n	800f3d2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f314:	e02f      	b.n	800f376 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f316:	4b34      	ldr	r3, [pc, #208]	@ (800f3e8 <xTaskResumeAll+0x120>)
 800f318:	68db      	ldr	r3, [r3, #12]
 800f31a:	68db      	ldr	r3, [r3, #12]
 800f31c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	3318      	adds	r3, #24
 800f322:	4618      	mov	r0, r3
 800f324:	f7ff f83a 	bl	800e39c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	3304      	adds	r3, #4
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7ff f835 	bl	800e39c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f336:	4b2d      	ldr	r3, [pc, #180]	@ (800f3ec <xTaskResumeAll+0x124>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d903      	bls.n	800f346 <xTaskResumeAll+0x7e>
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f342:	4a2a      	ldr	r2, [pc, #168]	@ (800f3ec <xTaskResumeAll+0x124>)
 800f344:	6013      	str	r3, [r2, #0]
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f34a:	4613      	mov	r3, r2
 800f34c:	009b      	lsls	r3, r3, #2
 800f34e:	4413      	add	r3, r2
 800f350:	009b      	lsls	r3, r3, #2
 800f352:	4a27      	ldr	r2, [pc, #156]	@ (800f3f0 <xTaskResumeAll+0x128>)
 800f354:	441a      	add	r2, r3
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	3304      	adds	r3, #4
 800f35a:	4619      	mov	r1, r3
 800f35c:	4610      	mov	r0, r2
 800f35e:	f7fe ffc0 	bl	800e2e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f366:	4b23      	ldr	r3, [pc, #140]	@ (800f3f4 <xTaskResumeAll+0x12c>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d302      	bcc.n	800f376 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800f370:	4b21      	ldr	r3, [pc, #132]	@ (800f3f8 <xTaskResumeAll+0x130>)
 800f372:	2201      	movs	r2, #1
 800f374:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f376:	4b1c      	ldr	r3, [pc, #112]	@ (800f3e8 <xTaskResumeAll+0x120>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d1cb      	bne.n	800f316 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d001      	beq.n	800f388 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f384:	f000 fc08 	bl	800fb98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f388:	4b1c      	ldr	r3, [pc, #112]	@ (800f3fc <xTaskResumeAll+0x134>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d010      	beq.n	800f3b6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f394:	f000 f846 	bl	800f424 <xTaskIncrementTick>
 800f398:	4603      	mov	r3, r0
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d002      	beq.n	800f3a4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800f39e:	4b16      	ldr	r3, [pc, #88]	@ (800f3f8 <xTaskResumeAll+0x130>)
 800f3a0:	2201      	movs	r2, #1
 800f3a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	3b01      	subs	r3, #1
 800f3a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d1f1      	bne.n	800f394 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800f3b0:	4b12      	ldr	r3, [pc, #72]	@ (800f3fc <xTaskResumeAll+0x134>)
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f3b6:	4b10      	ldr	r3, [pc, #64]	@ (800f3f8 <xTaskResumeAll+0x130>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d009      	beq.n	800f3d2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f3be:	2301      	movs	r3, #1
 800f3c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f3c2:	4b0f      	ldr	r3, [pc, #60]	@ (800f400 <xTaskResumeAll+0x138>)
 800f3c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f3c8:	601a      	str	r2, [r3, #0]
 800f3ca:	f3bf 8f4f 	dsb	sy
 800f3ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f3d2:	f001 fa9b 	bl	801090c <vPortExitCritical>

	return xAlreadyYielded;
 800f3d6:	68bb      	ldr	r3, [r7, #8]
}
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3710      	adds	r7, #16
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}
 800f3e0:	200012e8 	.word	0x200012e8
 800f3e4:	200012c0 	.word	0x200012c0
 800f3e8:	20001280 	.word	0x20001280
 800f3ec:	200012c8 	.word	0x200012c8
 800f3f0:	20000df0 	.word	0x20000df0
 800f3f4:	20000dec 	.word	0x20000dec
 800f3f8:	200012d4 	.word	0x200012d4
 800f3fc:	200012d0 	.word	0x200012d0
 800f400:	e000ed04 	.word	0xe000ed04

0800f404 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f404:	b480      	push	{r7}
 800f406:	b083      	sub	sp, #12
 800f408:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f40a:	4b05      	ldr	r3, [pc, #20]	@ (800f420 <xTaskGetTickCount+0x1c>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f410:	687b      	ldr	r3, [r7, #4]
}
 800f412:	4618      	mov	r0, r3
 800f414:	370c      	adds	r7, #12
 800f416:	46bd      	mov	sp, r7
 800f418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41c:	4770      	bx	lr
 800f41e:	bf00      	nop
 800f420:	200012c4 	.word	0x200012c4

0800f424 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b086      	sub	sp, #24
 800f428:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f42a:	2300      	movs	r3, #0
 800f42c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f42e:	4b4f      	ldr	r3, [pc, #316]	@ (800f56c <xTaskIncrementTick+0x148>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	2b00      	cmp	r3, #0
 800f434:	f040 8090 	bne.w	800f558 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f438:	4b4d      	ldr	r3, [pc, #308]	@ (800f570 <xTaskIncrementTick+0x14c>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	3301      	adds	r3, #1
 800f43e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f440:	4a4b      	ldr	r2, [pc, #300]	@ (800f570 <xTaskIncrementTick+0x14c>)
 800f442:	693b      	ldr	r3, [r7, #16]
 800f444:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f446:	693b      	ldr	r3, [r7, #16]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d121      	bne.n	800f490 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f44c:	4b49      	ldr	r3, [pc, #292]	@ (800f574 <xTaskIncrementTick+0x150>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d00b      	beq.n	800f46e <xTaskIncrementTick+0x4a>
	__asm volatile
 800f456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f45a:	f383 8811 	msr	BASEPRI, r3
 800f45e:	f3bf 8f6f 	isb	sy
 800f462:	f3bf 8f4f 	dsb	sy
 800f466:	603b      	str	r3, [r7, #0]
}
 800f468:	bf00      	nop
 800f46a:	bf00      	nop
 800f46c:	e7fd      	b.n	800f46a <xTaskIncrementTick+0x46>
 800f46e:	4b41      	ldr	r3, [pc, #260]	@ (800f574 <xTaskIncrementTick+0x150>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	60fb      	str	r3, [r7, #12]
 800f474:	4b40      	ldr	r3, [pc, #256]	@ (800f578 <xTaskIncrementTick+0x154>)
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	4a3e      	ldr	r2, [pc, #248]	@ (800f574 <xTaskIncrementTick+0x150>)
 800f47a:	6013      	str	r3, [r2, #0]
 800f47c:	4a3e      	ldr	r2, [pc, #248]	@ (800f578 <xTaskIncrementTick+0x154>)
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	6013      	str	r3, [r2, #0]
 800f482:	4b3e      	ldr	r3, [pc, #248]	@ (800f57c <xTaskIncrementTick+0x158>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	3301      	adds	r3, #1
 800f488:	4a3c      	ldr	r2, [pc, #240]	@ (800f57c <xTaskIncrementTick+0x158>)
 800f48a:	6013      	str	r3, [r2, #0]
 800f48c:	f000 fb84 	bl	800fb98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f490:	4b3b      	ldr	r3, [pc, #236]	@ (800f580 <xTaskIncrementTick+0x15c>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	693a      	ldr	r2, [r7, #16]
 800f496:	429a      	cmp	r2, r3
 800f498:	d349      	bcc.n	800f52e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f49a:	4b36      	ldr	r3, [pc, #216]	@ (800f574 <xTaskIncrementTick+0x150>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d104      	bne.n	800f4ae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4a4:	4b36      	ldr	r3, [pc, #216]	@ (800f580 <xTaskIncrementTick+0x15c>)
 800f4a6:	f04f 32ff 	mov.w	r2, #4294967295
 800f4aa:	601a      	str	r2, [r3, #0]
					break;
 800f4ac:	e03f      	b.n	800f52e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4ae:	4b31      	ldr	r3, [pc, #196]	@ (800f574 <xTaskIncrementTick+0x150>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	68db      	ldr	r3, [r3, #12]
 800f4b4:	68db      	ldr	r3, [r3, #12]
 800f4b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f4be:	693a      	ldr	r2, [r7, #16]
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d203      	bcs.n	800f4ce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f4c6:	4a2e      	ldr	r2, [pc, #184]	@ (800f580 <xTaskIncrementTick+0x15c>)
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f4cc:	e02f      	b.n	800f52e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	3304      	adds	r3, #4
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f7fe ff62 	bl	800e39c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d004      	beq.n	800f4ea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	3318      	adds	r3, #24
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f7fe ff59 	bl	800e39c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4ee:	4b25      	ldr	r3, [pc, #148]	@ (800f584 <xTaskIncrementTick+0x160>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	d903      	bls.n	800f4fe <xTaskIncrementTick+0xda>
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4fa:	4a22      	ldr	r2, [pc, #136]	@ (800f584 <xTaskIncrementTick+0x160>)
 800f4fc:	6013      	str	r3, [r2, #0]
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f502:	4613      	mov	r3, r2
 800f504:	009b      	lsls	r3, r3, #2
 800f506:	4413      	add	r3, r2
 800f508:	009b      	lsls	r3, r3, #2
 800f50a:	4a1f      	ldr	r2, [pc, #124]	@ (800f588 <xTaskIncrementTick+0x164>)
 800f50c:	441a      	add	r2, r3
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	3304      	adds	r3, #4
 800f512:	4619      	mov	r1, r3
 800f514:	4610      	mov	r0, r2
 800f516:	f7fe fee4 	bl	800e2e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f51e:	4b1b      	ldr	r3, [pc, #108]	@ (800f58c <xTaskIncrementTick+0x168>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f524:	429a      	cmp	r2, r3
 800f526:	d3b8      	bcc.n	800f49a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f528:	2301      	movs	r3, #1
 800f52a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f52c:	e7b5      	b.n	800f49a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f52e:	4b17      	ldr	r3, [pc, #92]	@ (800f58c <xTaskIncrementTick+0x168>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f534:	4914      	ldr	r1, [pc, #80]	@ (800f588 <xTaskIncrementTick+0x164>)
 800f536:	4613      	mov	r3, r2
 800f538:	009b      	lsls	r3, r3, #2
 800f53a:	4413      	add	r3, r2
 800f53c:	009b      	lsls	r3, r3, #2
 800f53e:	440b      	add	r3, r1
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	2b01      	cmp	r3, #1
 800f544:	d901      	bls.n	800f54a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800f546:	2301      	movs	r3, #1
 800f548:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f54a:	4b11      	ldr	r3, [pc, #68]	@ (800f590 <xTaskIncrementTick+0x16c>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d007      	beq.n	800f562 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800f552:	2301      	movs	r3, #1
 800f554:	617b      	str	r3, [r7, #20]
 800f556:	e004      	b.n	800f562 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f558:	4b0e      	ldr	r3, [pc, #56]	@ (800f594 <xTaskIncrementTick+0x170>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	3301      	adds	r3, #1
 800f55e:	4a0d      	ldr	r2, [pc, #52]	@ (800f594 <xTaskIncrementTick+0x170>)
 800f560:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f562:	697b      	ldr	r3, [r7, #20]
}
 800f564:	4618      	mov	r0, r3
 800f566:	3718      	adds	r7, #24
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}
 800f56c:	200012e8 	.word	0x200012e8
 800f570:	200012c4 	.word	0x200012c4
 800f574:	20001278 	.word	0x20001278
 800f578:	2000127c 	.word	0x2000127c
 800f57c:	200012d8 	.word	0x200012d8
 800f580:	200012e0 	.word	0x200012e0
 800f584:	200012c8 	.word	0x200012c8
 800f588:	20000df0 	.word	0x20000df0
 800f58c:	20000dec 	.word	0x20000dec
 800f590:	200012d4 	.word	0x200012d4
 800f594:	200012d0 	.word	0x200012d0

0800f598 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f598:	b480      	push	{r7}
 800f59a:	b085      	sub	sp, #20
 800f59c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f59e:	4b2b      	ldr	r3, [pc, #172]	@ (800f64c <vTaskSwitchContext+0xb4>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d003      	beq.n	800f5ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f5a6:	4b2a      	ldr	r3, [pc, #168]	@ (800f650 <vTaskSwitchContext+0xb8>)
 800f5a8:	2201      	movs	r2, #1
 800f5aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f5ac:	e047      	b.n	800f63e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800f5ae:	4b28      	ldr	r3, [pc, #160]	@ (800f650 <vTaskSwitchContext+0xb8>)
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5b4:	4b27      	ldr	r3, [pc, #156]	@ (800f654 <vTaskSwitchContext+0xbc>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	60fb      	str	r3, [r7, #12]
 800f5ba:	e011      	b.n	800f5e0 <vTaskSwitchContext+0x48>
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d10b      	bne.n	800f5da <vTaskSwitchContext+0x42>
	__asm volatile
 800f5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5c6:	f383 8811 	msr	BASEPRI, r3
 800f5ca:	f3bf 8f6f 	isb	sy
 800f5ce:	f3bf 8f4f 	dsb	sy
 800f5d2:	607b      	str	r3, [r7, #4]
}
 800f5d4:	bf00      	nop
 800f5d6:	bf00      	nop
 800f5d8:	e7fd      	b.n	800f5d6 <vTaskSwitchContext+0x3e>
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	3b01      	subs	r3, #1
 800f5de:	60fb      	str	r3, [r7, #12]
 800f5e0:	491d      	ldr	r1, [pc, #116]	@ (800f658 <vTaskSwitchContext+0xc0>)
 800f5e2:	68fa      	ldr	r2, [r7, #12]
 800f5e4:	4613      	mov	r3, r2
 800f5e6:	009b      	lsls	r3, r3, #2
 800f5e8:	4413      	add	r3, r2
 800f5ea:	009b      	lsls	r3, r3, #2
 800f5ec:	440b      	add	r3, r1
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d0e3      	beq.n	800f5bc <vTaskSwitchContext+0x24>
 800f5f4:	68fa      	ldr	r2, [r7, #12]
 800f5f6:	4613      	mov	r3, r2
 800f5f8:	009b      	lsls	r3, r3, #2
 800f5fa:	4413      	add	r3, r2
 800f5fc:	009b      	lsls	r3, r3, #2
 800f5fe:	4a16      	ldr	r2, [pc, #88]	@ (800f658 <vTaskSwitchContext+0xc0>)
 800f600:	4413      	add	r3, r2
 800f602:	60bb      	str	r3, [r7, #8]
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	685b      	ldr	r3, [r3, #4]
 800f608:	685a      	ldr	r2, [r3, #4]
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	605a      	str	r2, [r3, #4]
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	685a      	ldr	r2, [r3, #4]
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	3308      	adds	r3, #8
 800f616:	429a      	cmp	r2, r3
 800f618:	d104      	bne.n	800f624 <vTaskSwitchContext+0x8c>
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	685b      	ldr	r3, [r3, #4]
 800f61e:	685a      	ldr	r2, [r3, #4]
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	605a      	str	r2, [r3, #4]
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	68db      	ldr	r3, [r3, #12]
 800f62a:	4a0c      	ldr	r2, [pc, #48]	@ (800f65c <vTaskSwitchContext+0xc4>)
 800f62c:	6013      	str	r3, [r2, #0]
 800f62e:	4a09      	ldr	r2, [pc, #36]	@ (800f654 <vTaskSwitchContext+0xbc>)
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f634:	4b09      	ldr	r3, [pc, #36]	@ (800f65c <vTaskSwitchContext+0xc4>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	3354      	adds	r3, #84	@ 0x54
 800f63a:	4a09      	ldr	r2, [pc, #36]	@ (800f660 <vTaskSwitchContext+0xc8>)
 800f63c:	6013      	str	r3, [r2, #0]
}
 800f63e:	bf00      	nop
 800f640:	3714      	adds	r7, #20
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr
 800f64a:	bf00      	nop
 800f64c:	200012e8 	.word	0x200012e8
 800f650:	200012d4 	.word	0x200012d4
 800f654:	200012c8 	.word	0x200012c8
 800f658:	20000df0 	.word	0x20000df0
 800f65c:	20000dec 	.word	0x20000dec
 800f660:	20000130 	.word	0x20000130

0800f664 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b084      	sub	sp, #16
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
 800f66c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d10b      	bne.n	800f68c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f678:	f383 8811 	msr	BASEPRI, r3
 800f67c:	f3bf 8f6f 	isb	sy
 800f680:	f3bf 8f4f 	dsb	sy
 800f684:	60fb      	str	r3, [r7, #12]
}
 800f686:	bf00      	nop
 800f688:	bf00      	nop
 800f68a:	e7fd      	b.n	800f688 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f68c:	4b07      	ldr	r3, [pc, #28]	@ (800f6ac <vTaskPlaceOnEventList+0x48>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	3318      	adds	r3, #24
 800f692:	4619      	mov	r1, r3
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f7fe fe48 	bl	800e32a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f69a:	2101      	movs	r1, #1
 800f69c:	6838      	ldr	r0, [r7, #0]
 800f69e:	f000 fb41 	bl	800fd24 <prvAddCurrentTaskToDelayedList>
}
 800f6a2:	bf00      	nop
 800f6a4:	3710      	adds	r7, #16
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}
 800f6aa:	bf00      	nop
 800f6ac:	20000dec 	.word	0x20000dec

0800f6b0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b086      	sub	sp, #24
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	60f8      	str	r0, [r7, #12]
 800f6b8:	60b9      	str	r1, [r7, #8]
 800f6ba:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d10b      	bne.n	800f6da <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800f6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6c6:	f383 8811 	msr	BASEPRI, r3
 800f6ca:	f3bf 8f6f 	isb	sy
 800f6ce:	f3bf 8f4f 	dsb	sy
 800f6d2:	617b      	str	r3, [r7, #20]
}
 800f6d4:	bf00      	nop
 800f6d6:	bf00      	nop
 800f6d8:	e7fd      	b.n	800f6d6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800f6da:	4b12      	ldr	r3, [pc, #72]	@ (800f724 <vTaskPlaceOnUnorderedEventList+0x74>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d10b      	bne.n	800f6fa <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800f6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6e6:	f383 8811 	msr	BASEPRI, r3
 800f6ea:	f3bf 8f6f 	isb	sy
 800f6ee:	f3bf 8f4f 	dsb	sy
 800f6f2:	613b      	str	r3, [r7, #16]
}
 800f6f4:	bf00      	nop
 800f6f6:	bf00      	nop
 800f6f8:	e7fd      	b.n	800f6f6 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f6fa:	4b0b      	ldr	r3, [pc, #44]	@ (800f728 <vTaskPlaceOnUnorderedEventList+0x78>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	68ba      	ldr	r2, [r7, #8]
 800f700:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f704:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f706:	4b08      	ldr	r3, [pc, #32]	@ (800f728 <vTaskPlaceOnUnorderedEventList+0x78>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	3318      	adds	r3, #24
 800f70c:	4619      	mov	r1, r3
 800f70e:	68f8      	ldr	r0, [r7, #12]
 800f710:	f7fe fde7 	bl	800e2e2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f714:	2101      	movs	r1, #1
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f000 fb04 	bl	800fd24 <prvAddCurrentTaskToDelayedList>
}
 800f71c:	bf00      	nop
 800f71e:	3718      	adds	r7, #24
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}
 800f724:	200012e8 	.word	0x200012e8
 800f728:	20000dec 	.word	0x20000dec

0800f72c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b086      	sub	sp, #24
 800f730:	af00      	add	r7, sp, #0
 800f732:	60f8      	str	r0, [r7, #12]
 800f734:	60b9      	str	r1, [r7, #8]
 800f736:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d10b      	bne.n	800f756 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f742:	f383 8811 	msr	BASEPRI, r3
 800f746:	f3bf 8f6f 	isb	sy
 800f74a:	f3bf 8f4f 	dsb	sy
 800f74e:	617b      	str	r3, [r7, #20]
}
 800f750:	bf00      	nop
 800f752:	bf00      	nop
 800f754:	e7fd      	b.n	800f752 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f756:	4b0a      	ldr	r3, [pc, #40]	@ (800f780 <vTaskPlaceOnEventListRestricted+0x54>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	3318      	adds	r3, #24
 800f75c:	4619      	mov	r1, r3
 800f75e:	68f8      	ldr	r0, [r7, #12]
 800f760:	f7fe fdbf 	bl	800e2e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d002      	beq.n	800f770 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f76a:	f04f 33ff 	mov.w	r3, #4294967295
 800f76e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f770:	6879      	ldr	r1, [r7, #4]
 800f772:	68b8      	ldr	r0, [r7, #8]
 800f774:	f000 fad6 	bl	800fd24 <prvAddCurrentTaskToDelayedList>
	}
 800f778:	bf00      	nop
 800f77a:	3718      	adds	r7, #24
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}
 800f780:	20000dec 	.word	0x20000dec

0800f784 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b086      	sub	sp, #24
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	68db      	ldr	r3, [r3, #12]
 800f790:	68db      	ldr	r3, [r3, #12]
 800f792:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f794:	693b      	ldr	r3, [r7, #16]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d10b      	bne.n	800f7b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f79e:	f383 8811 	msr	BASEPRI, r3
 800f7a2:	f3bf 8f6f 	isb	sy
 800f7a6:	f3bf 8f4f 	dsb	sy
 800f7aa:	60fb      	str	r3, [r7, #12]
}
 800f7ac:	bf00      	nop
 800f7ae:	bf00      	nop
 800f7b0:	e7fd      	b.n	800f7ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f7b2:	693b      	ldr	r3, [r7, #16]
 800f7b4:	3318      	adds	r3, #24
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f7fe fdf0 	bl	800e39c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7bc:	4b1d      	ldr	r3, [pc, #116]	@ (800f834 <xTaskRemoveFromEventList+0xb0>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d11d      	bne.n	800f800 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	3304      	adds	r3, #4
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7fe fde7 	bl	800e39c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f7ce:	693b      	ldr	r3, [r7, #16]
 800f7d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7d2:	4b19      	ldr	r3, [pc, #100]	@ (800f838 <xTaskRemoveFromEventList+0xb4>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	429a      	cmp	r2, r3
 800f7d8:	d903      	bls.n	800f7e2 <xTaskRemoveFromEventList+0x5e>
 800f7da:	693b      	ldr	r3, [r7, #16]
 800f7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7de:	4a16      	ldr	r2, [pc, #88]	@ (800f838 <xTaskRemoveFromEventList+0xb4>)
 800f7e0:	6013      	str	r3, [r2, #0]
 800f7e2:	693b      	ldr	r3, [r7, #16]
 800f7e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7e6:	4613      	mov	r3, r2
 800f7e8:	009b      	lsls	r3, r3, #2
 800f7ea:	4413      	add	r3, r2
 800f7ec:	009b      	lsls	r3, r3, #2
 800f7ee:	4a13      	ldr	r2, [pc, #76]	@ (800f83c <xTaskRemoveFromEventList+0xb8>)
 800f7f0:	441a      	add	r2, r3
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	3304      	adds	r3, #4
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	4610      	mov	r0, r2
 800f7fa:	f7fe fd72 	bl	800e2e2 <vListInsertEnd>
 800f7fe:	e005      	b.n	800f80c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	3318      	adds	r3, #24
 800f804:	4619      	mov	r1, r3
 800f806:	480e      	ldr	r0, [pc, #56]	@ (800f840 <xTaskRemoveFromEventList+0xbc>)
 800f808:	f7fe fd6b 	bl	800e2e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f80c:	693b      	ldr	r3, [r7, #16]
 800f80e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f810:	4b0c      	ldr	r3, [pc, #48]	@ (800f844 <xTaskRemoveFromEventList+0xc0>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f816:	429a      	cmp	r2, r3
 800f818:	d905      	bls.n	800f826 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f81a:	2301      	movs	r3, #1
 800f81c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f81e:	4b0a      	ldr	r3, [pc, #40]	@ (800f848 <xTaskRemoveFromEventList+0xc4>)
 800f820:	2201      	movs	r2, #1
 800f822:	601a      	str	r2, [r3, #0]
 800f824:	e001      	b.n	800f82a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f826:	2300      	movs	r3, #0
 800f828:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f82a:	697b      	ldr	r3, [r7, #20]
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3718      	adds	r7, #24
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}
 800f834:	200012e8 	.word	0x200012e8
 800f838:	200012c8 	.word	0x200012c8
 800f83c:	20000df0 	.word	0x20000df0
 800f840:	20001280 	.word	0x20001280
 800f844:	20000dec 	.word	0x20000dec
 800f848:	200012d4 	.word	0x200012d4

0800f84c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b086      	sub	sp, #24
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800f856:	4b2a      	ldr	r3, [pc, #168]	@ (800f900 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d10b      	bne.n	800f876 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800f85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f862:	f383 8811 	msr	BASEPRI, r3
 800f866:	f3bf 8f6f 	isb	sy
 800f86a:	f3bf 8f4f 	dsb	sy
 800f86e:	613b      	str	r3, [r7, #16]
}
 800f870:	bf00      	nop
 800f872:	bf00      	nop
 800f874:	e7fd      	b.n	800f872 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	68db      	ldr	r3, [r3, #12]
 800f884:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d10b      	bne.n	800f8a4 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800f88c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f890:	f383 8811 	msr	BASEPRI, r3
 800f894:	f3bf 8f6f 	isb	sy
 800f898:	f3bf 8f4f 	dsb	sy
 800f89c:	60fb      	str	r3, [r7, #12]
}
 800f89e:	bf00      	nop
 800f8a0:	bf00      	nop
 800f8a2:	e7fd      	b.n	800f8a0 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f7fe fd79 	bl	800e39c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	3304      	adds	r3, #4
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7fe fd74 	bl	800e39c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8b8:	4b12      	ldr	r3, [pc, #72]	@ (800f904 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d903      	bls.n	800f8c8 <vTaskRemoveFromUnorderedEventList+0x7c>
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8c4:	4a0f      	ldr	r2, [pc, #60]	@ (800f904 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800f8c6:	6013      	str	r3, [r2, #0]
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8cc:	4613      	mov	r3, r2
 800f8ce:	009b      	lsls	r3, r3, #2
 800f8d0:	4413      	add	r3, r2
 800f8d2:	009b      	lsls	r3, r3, #2
 800f8d4:	4a0c      	ldr	r2, [pc, #48]	@ (800f908 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800f8d6:	441a      	add	r2, r3
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	3304      	adds	r3, #4
 800f8dc:	4619      	mov	r1, r3
 800f8de:	4610      	mov	r0, r2
 800f8e0:	f7fe fcff 	bl	800e2e2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8e8:	4b08      	ldr	r3, [pc, #32]	@ (800f90c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d902      	bls.n	800f8f8 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800f8f2:	4b07      	ldr	r3, [pc, #28]	@ (800f910 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800f8f4:	2201      	movs	r2, #1
 800f8f6:	601a      	str	r2, [r3, #0]
	}
}
 800f8f8:	bf00      	nop
 800f8fa:	3718      	adds	r7, #24
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}
 800f900:	200012e8 	.word	0x200012e8
 800f904:	200012c8 	.word	0x200012c8
 800f908:	20000df0 	.word	0x20000df0
 800f90c:	20000dec 	.word	0x20000dec
 800f910:	200012d4 	.word	0x200012d4

0800f914 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f914:	b480      	push	{r7}
 800f916:	b083      	sub	sp, #12
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f91c:	4b06      	ldr	r3, [pc, #24]	@ (800f938 <vTaskInternalSetTimeOutState+0x24>)
 800f91e:	681a      	ldr	r2, [r3, #0]
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f924:	4b05      	ldr	r3, [pc, #20]	@ (800f93c <vTaskInternalSetTimeOutState+0x28>)
 800f926:	681a      	ldr	r2, [r3, #0]
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	605a      	str	r2, [r3, #4]
}
 800f92c:	bf00      	nop
 800f92e:	370c      	adds	r7, #12
 800f930:	46bd      	mov	sp, r7
 800f932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f936:	4770      	bx	lr
 800f938:	200012d8 	.word	0x200012d8
 800f93c:	200012c4 	.word	0x200012c4

0800f940 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b088      	sub	sp, #32
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
 800f948:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d10b      	bne.n	800f968 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f954:	f383 8811 	msr	BASEPRI, r3
 800f958:	f3bf 8f6f 	isb	sy
 800f95c:	f3bf 8f4f 	dsb	sy
 800f960:	613b      	str	r3, [r7, #16]
}
 800f962:	bf00      	nop
 800f964:	bf00      	nop
 800f966:	e7fd      	b.n	800f964 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d10b      	bne.n	800f986 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f972:	f383 8811 	msr	BASEPRI, r3
 800f976:	f3bf 8f6f 	isb	sy
 800f97a:	f3bf 8f4f 	dsb	sy
 800f97e:	60fb      	str	r3, [r7, #12]
}
 800f980:	bf00      	nop
 800f982:	bf00      	nop
 800f984:	e7fd      	b.n	800f982 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f986:	f000 ff8f 	bl	80108a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f98a:	4b1d      	ldr	r3, [pc, #116]	@ (800fa00 <xTaskCheckForTimeOut+0xc0>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	685b      	ldr	r3, [r3, #4]
 800f994:	69ba      	ldr	r2, [r7, #24]
 800f996:	1ad3      	subs	r3, r2, r3
 800f998:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9a2:	d102      	bne.n	800f9aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	61fb      	str	r3, [r7, #28]
 800f9a8:	e023      	b.n	800f9f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681a      	ldr	r2, [r3, #0]
 800f9ae:	4b15      	ldr	r3, [pc, #84]	@ (800fa04 <xTaskCheckForTimeOut+0xc4>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	429a      	cmp	r2, r3
 800f9b4:	d007      	beq.n	800f9c6 <xTaskCheckForTimeOut+0x86>
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	685b      	ldr	r3, [r3, #4]
 800f9ba:	69ba      	ldr	r2, [r7, #24]
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	d302      	bcc.n	800f9c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	61fb      	str	r3, [r7, #28]
 800f9c4:	e015      	b.n	800f9f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	697a      	ldr	r2, [r7, #20]
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d20b      	bcs.n	800f9e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	681a      	ldr	r2, [r3, #0]
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	1ad2      	subs	r2, r2, r3
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f7ff ff99 	bl	800f914 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	61fb      	str	r3, [r7, #28]
 800f9e6:	e004      	b.n	800f9f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f9f2:	f000 ff8b 	bl	801090c <vPortExitCritical>

	return xReturn;
 800f9f6:	69fb      	ldr	r3, [r7, #28]
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3720      	adds	r7, #32
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}
 800fa00:	200012c4 	.word	0x200012c4
 800fa04:	200012d8 	.word	0x200012d8

0800fa08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fa08:	b480      	push	{r7}
 800fa0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fa0c:	4b03      	ldr	r3, [pc, #12]	@ (800fa1c <vTaskMissedYield+0x14>)
 800fa0e:	2201      	movs	r2, #1
 800fa10:	601a      	str	r2, [r3, #0]
}
 800fa12:	bf00      	nop
 800fa14:	46bd      	mov	sp, r7
 800fa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1a:	4770      	bx	lr
 800fa1c:	200012d4 	.word	0x200012d4

0800fa20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fa28:	f000 f852 	bl	800fad0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fa2c:	4b06      	ldr	r3, [pc, #24]	@ (800fa48 <prvIdleTask+0x28>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	2b01      	cmp	r3, #1
 800fa32:	d9f9      	bls.n	800fa28 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fa34:	4b05      	ldr	r3, [pc, #20]	@ (800fa4c <prvIdleTask+0x2c>)
 800fa36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa3a:	601a      	str	r2, [r3, #0]
 800fa3c:	f3bf 8f4f 	dsb	sy
 800fa40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fa44:	e7f0      	b.n	800fa28 <prvIdleTask+0x8>
 800fa46:	bf00      	nop
 800fa48:	20000df0 	.word	0x20000df0
 800fa4c:	e000ed04 	.word	0xe000ed04

0800fa50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fa56:	2300      	movs	r3, #0
 800fa58:	607b      	str	r3, [r7, #4]
 800fa5a:	e00c      	b.n	800fa76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fa5c:	687a      	ldr	r2, [r7, #4]
 800fa5e:	4613      	mov	r3, r2
 800fa60:	009b      	lsls	r3, r3, #2
 800fa62:	4413      	add	r3, r2
 800fa64:	009b      	lsls	r3, r3, #2
 800fa66:	4a12      	ldr	r2, [pc, #72]	@ (800fab0 <prvInitialiseTaskLists+0x60>)
 800fa68:	4413      	add	r3, r2
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7fe fc0c 	bl	800e288 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	3301      	adds	r3, #1
 800fa74:	607b      	str	r3, [r7, #4]
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2b37      	cmp	r3, #55	@ 0x37
 800fa7a:	d9ef      	bls.n	800fa5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fa7c:	480d      	ldr	r0, [pc, #52]	@ (800fab4 <prvInitialiseTaskLists+0x64>)
 800fa7e:	f7fe fc03 	bl	800e288 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fa82:	480d      	ldr	r0, [pc, #52]	@ (800fab8 <prvInitialiseTaskLists+0x68>)
 800fa84:	f7fe fc00 	bl	800e288 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fa88:	480c      	ldr	r0, [pc, #48]	@ (800fabc <prvInitialiseTaskLists+0x6c>)
 800fa8a:	f7fe fbfd 	bl	800e288 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fa8e:	480c      	ldr	r0, [pc, #48]	@ (800fac0 <prvInitialiseTaskLists+0x70>)
 800fa90:	f7fe fbfa 	bl	800e288 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fa94:	480b      	ldr	r0, [pc, #44]	@ (800fac4 <prvInitialiseTaskLists+0x74>)
 800fa96:	f7fe fbf7 	bl	800e288 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fa9a:	4b0b      	ldr	r3, [pc, #44]	@ (800fac8 <prvInitialiseTaskLists+0x78>)
 800fa9c:	4a05      	ldr	r2, [pc, #20]	@ (800fab4 <prvInitialiseTaskLists+0x64>)
 800fa9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800faa0:	4b0a      	ldr	r3, [pc, #40]	@ (800facc <prvInitialiseTaskLists+0x7c>)
 800faa2:	4a05      	ldr	r2, [pc, #20]	@ (800fab8 <prvInitialiseTaskLists+0x68>)
 800faa4:	601a      	str	r2, [r3, #0]
}
 800faa6:	bf00      	nop
 800faa8:	3708      	adds	r7, #8
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}
 800faae:	bf00      	nop
 800fab0:	20000df0 	.word	0x20000df0
 800fab4:	20001250 	.word	0x20001250
 800fab8:	20001264 	.word	0x20001264
 800fabc:	20001280 	.word	0x20001280
 800fac0:	20001294 	.word	0x20001294
 800fac4:	200012ac 	.word	0x200012ac
 800fac8:	20001278 	.word	0x20001278
 800facc:	2000127c 	.word	0x2000127c

0800fad0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b082      	sub	sp, #8
 800fad4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fad6:	e019      	b.n	800fb0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fad8:	f000 fee6 	bl	80108a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fadc:	4b10      	ldr	r3, [pc, #64]	@ (800fb20 <prvCheckTasksWaitingTermination+0x50>)
 800fade:	68db      	ldr	r3, [r3, #12]
 800fae0:	68db      	ldr	r3, [r3, #12]
 800fae2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	3304      	adds	r3, #4
 800fae8:	4618      	mov	r0, r3
 800faea:	f7fe fc57 	bl	800e39c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800faee:	4b0d      	ldr	r3, [pc, #52]	@ (800fb24 <prvCheckTasksWaitingTermination+0x54>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	3b01      	subs	r3, #1
 800faf4:	4a0b      	ldr	r2, [pc, #44]	@ (800fb24 <prvCheckTasksWaitingTermination+0x54>)
 800faf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800faf8:	4b0b      	ldr	r3, [pc, #44]	@ (800fb28 <prvCheckTasksWaitingTermination+0x58>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	3b01      	subs	r3, #1
 800fafe:	4a0a      	ldr	r2, [pc, #40]	@ (800fb28 <prvCheckTasksWaitingTermination+0x58>)
 800fb00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fb02:	f000 ff03 	bl	801090c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f000 f810 	bl	800fb2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb0c:	4b06      	ldr	r3, [pc, #24]	@ (800fb28 <prvCheckTasksWaitingTermination+0x58>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d1e1      	bne.n	800fad8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fb14:	bf00      	nop
 800fb16:	bf00      	nop
 800fb18:	3708      	adds	r7, #8
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}
 800fb1e:	bf00      	nop
 800fb20:	20001294 	.word	0x20001294
 800fb24:	200012c0 	.word	0x200012c0
 800fb28:	200012a8 	.word	0x200012a8

0800fb2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	3354      	adds	r3, #84	@ 0x54
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f002 feb3 	bl	80128a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d108      	bne.n	800fb5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f001 f89b 	bl	8010c88 <vPortFree>
				vPortFree( pxTCB );
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f001 f898 	bl	8010c88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fb58:	e019      	b.n	800fb8e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800fb60:	2b01      	cmp	r3, #1
 800fb62:	d103      	bne.n	800fb6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f001 f88f 	bl	8010c88 <vPortFree>
	}
 800fb6a:	e010      	b.n	800fb8e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800fb72:	2b02      	cmp	r3, #2
 800fb74:	d00b      	beq.n	800fb8e <prvDeleteTCB+0x62>
	__asm volatile
 800fb76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb7a:	f383 8811 	msr	BASEPRI, r3
 800fb7e:	f3bf 8f6f 	isb	sy
 800fb82:	f3bf 8f4f 	dsb	sy
 800fb86:	60fb      	str	r3, [r7, #12]
}
 800fb88:	bf00      	nop
 800fb8a:	bf00      	nop
 800fb8c:	e7fd      	b.n	800fb8a <prvDeleteTCB+0x5e>
	}
 800fb8e:	bf00      	nop
 800fb90:	3710      	adds	r7, #16
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}
	...

0800fb98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b083      	sub	sp, #12
 800fb9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fb9e:	4b0c      	ldr	r3, [pc, #48]	@ (800fbd0 <prvResetNextTaskUnblockTime+0x38>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d104      	bne.n	800fbb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fba8:	4b0a      	ldr	r3, [pc, #40]	@ (800fbd4 <prvResetNextTaskUnblockTime+0x3c>)
 800fbaa:	f04f 32ff 	mov.w	r2, #4294967295
 800fbae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fbb0:	e008      	b.n	800fbc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbb2:	4b07      	ldr	r3, [pc, #28]	@ (800fbd0 <prvResetNextTaskUnblockTime+0x38>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	68db      	ldr	r3, [r3, #12]
 800fbb8:	68db      	ldr	r3, [r3, #12]
 800fbba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	685b      	ldr	r3, [r3, #4]
 800fbc0:	4a04      	ldr	r2, [pc, #16]	@ (800fbd4 <prvResetNextTaskUnblockTime+0x3c>)
 800fbc2:	6013      	str	r3, [r2, #0]
}
 800fbc4:	bf00      	nop
 800fbc6:	370c      	adds	r7, #12
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbce:	4770      	bx	lr
 800fbd0:	20001278 	.word	0x20001278
 800fbd4:	200012e0 	.word	0x200012e0

0800fbd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fbd8:	b480      	push	{r7}
 800fbda:	b083      	sub	sp, #12
 800fbdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fbde:	4b0b      	ldr	r3, [pc, #44]	@ (800fc0c <xTaskGetSchedulerState+0x34>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d102      	bne.n	800fbec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fbe6:	2301      	movs	r3, #1
 800fbe8:	607b      	str	r3, [r7, #4]
 800fbea:	e008      	b.n	800fbfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbec:	4b08      	ldr	r3, [pc, #32]	@ (800fc10 <xTaskGetSchedulerState+0x38>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d102      	bne.n	800fbfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fbf4:	2302      	movs	r3, #2
 800fbf6:	607b      	str	r3, [r7, #4]
 800fbf8:	e001      	b.n	800fbfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fbfe:	687b      	ldr	r3, [r7, #4]
	}
 800fc00:	4618      	mov	r0, r3
 800fc02:	370c      	adds	r7, #12
 800fc04:	46bd      	mov	sp, r7
 800fc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0a:	4770      	bx	lr
 800fc0c:	200012cc 	.word	0x200012cc
 800fc10:	200012e8 	.word	0x200012e8

0800fc14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b086      	sub	sp, #24
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fc20:	2300      	movs	r3, #0
 800fc22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d058      	beq.n	800fcdc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fc2a:	4b2f      	ldr	r3, [pc, #188]	@ (800fce8 <xTaskPriorityDisinherit+0xd4>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	693a      	ldr	r2, [r7, #16]
 800fc30:	429a      	cmp	r2, r3
 800fc32:	d00b      	beq.n	800fc4c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800fc34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc38:	f383 8811 	msr	BASEPRI, r3
 800fc3c:	f3bf 8f6f 	isb	sy
 800fc40:	f3bf 8f4f 	dsb	sy
 800fc44:	60fb      	str	r3, [r7, #12]
}
 800fc46:	bf00      	nop
 800fc48:	bf00      	nop
 800fc4a:	e7fd      	b.n	800fc48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d10b      	bne.n	800fc6c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800fc54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc58:	f383 8811 	msr	BASEPRI, r3
 800fc5c:	f3bf 8f6f 	isb	sy
 800fc60:	f3bf 8f4f 	dsb	sy
 800fc64:	60bb      	str	r3, [r7, #8]
}
 800fc66:	bf00      	nop
 800fc68:	bf00      	nop
 800fc6a:	e7fd      	b.n	800fc68 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800fc6c:	693b      	ldr	r3, [r7, #16]
 800fc6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc70:	1e5a      	subs	r2, r3, #1
 800fc72:	693b      	ldr	r3, [r7, #16]
 800fc74:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fc76:	693b      	ldr	r3, [r7, #16]
 800fc78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc7a:	693b      	ldr	r3, [r7, #16]
 800fc7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d02c      	beq.n	800fcdc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fc82:	693b      	ldr	r3, [r7, #16]
 800fc84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d128      	bne.n	800fcdc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc8a:	693b      	ldr	r3, [r7, #16]
 800fc8c:	3304      	adds	r3, #4
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7fe fb84 	bl	800e39c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fc98:	693b      	ldr	r3, [r7, #16]
 800fc9a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc9c:	693b      	ldr	r3, [r7, #16]
 800fc9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fca0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fca4:	693b      	ldr	r3, [r7, #16]
 800fca6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fca8:	693b      	ldr	r3, [r7, #16]
 800fcaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcac:	4b0f      	ldr	r3, [pc, #60]	@ (800fcec <xTaskPriorityDisinherit+0xd8>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	d903      	bls.n	800fcbc <xTaskPriorityDisinherit+0xa8>
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcb8:	4a0c      	ldr	r2, [pc, #48]	@ (800fcec <xTaskPriorityDisinherit+0xd8>)
 800fcba:	6013      	str	r3, [r2, #0]
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcc0:	4613      	mov	r3, r2
 800fcc2:	009b      	lsls	r3, r3, #2
 800fcc4:	4413      	add	r3, r2
 800fcc6:	009b      	lsls	r3, r3, #2
 800fcc8:	4a09      	ldr	r2, [pc, #36]	@ (800fcf0 <xTaskPriorityDisinherit+0xdc>)
 800fcca:	441a      	add	r2, r3
 800fccc:	693b      	ldr	r3, [r7, #16]
 800fcce:	3304      	adds	r3, #4
 800fcd0:	4619      	mov	r1, r3
 800fcd2:	4610      	mov	r0, r2
 800fcd4:	f7fe fb05 	bl	800e2e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fcd8:	2301      	movs	r3, #1
 800fcda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fcdc:	697b      	ldr	r3, [r7, #20]
	}
 800fcde:	4618      	mov	r0, r3
 800fce0:	3718      	adds	r7, #24
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}
 800fce6:	bf00      	nop
 800fce8:	20000dec 	.word	0x20000dec
 800fcec:	200012c8 	.word	0x200012c8
 800fcf0:	20000df0 	.word	0x20000df0

0800fcf4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b083      	sub	sp, #12
 800fcf8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800fcfa:	4b09      	ldr	r3, [pc, #36]	@ (800fd20 <uxTaskResetEventItemValue+0x2c>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	699b      	ldr	r3, [r3, #24]
 800fd00:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd02:	4b07      	ldr	r3, [pc, #28]	@ (800fd20 <uxTaskResetEventItemValue+0x2c>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd08:	4b05      	ldr	r3, [pc, #20]	@ (800fd20 <uxTaskResetEventItemValue+0x2c>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800fd10:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800fd12:	687b      	ldr	r3, [r7, #4]
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	370c      	adds	r7, #12
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1e:	4770      	bx	lr
 800fd20:	20000dec 	.word	0x20000dec

0800fd24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b084      	sub	sp, #16
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
 800fd2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fd2e:	4b21      	ldr	r3, [pc, #132]	@ (800fdb4 <prvAddCurrentTaskToDelayedList+0x90>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd34:	4b20      	ldr	r3, [pc, #128]	@ (800fdb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	3304      	adds	r3, #4
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7fe fb2e 	bl	800e39c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd46:	d10a      	bne.n	800fd5e <prvAddCurrentTaskToDelayedList+0x3a>
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d007      	beq.n	800fd5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd4e:	4b1a      	ldr	r3, [pc, #104]	@ (800fdb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	3304      	adds	r3, #4
 800fd54:	4619      	mov	r1, r3
 800fd56:	4819      	ldr	r0, [pc, #100]	@ (800fdbc <prvAddCurrentTaskToDelayedList+0x98>)
 800fd58:	f7fe fac3 	bl	800e2e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fd5c:	e026      	b.n	800fdac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fd5e:	68fa      	ldr	r2, [r7, #12]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	4413      	add	r3, r2
 800fd64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fd66:	4b14      	ldr	r3, [pc, #80]	@ (800fdb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	68ba      	ldr	r2, [r7, #8]
 800fd6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fd6e:	68ba      	ldr	r2, [r7, #8]
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	429a      	cmp	r2, r3
 800fd74:	d209      	bcs.n	800fd8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd76:	4b12      	ldr	r3, [pc, #72]	@ (800fdc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fd78:	681a      	ldr	r2, [r3, #0]
 800fd7a:	4b0f      	ldr	r3, [pc, #60]	@ (800fdb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	3304      	adds	r3, #4
 800fd80:	4619      	mov	r1, r3
 800fd82:	4610      	mov	r0, r2
 800fd84:	f7fe fad1 	bl	800e32a <vListInsert>
}
 800fd88:	e010      	b.n	800fdac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd8a:	4b0e      	ldr	r3, [pc, #56]	@ (800fdc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fd8c:	681a      	ldr	r2, [r3, #0]
 800fd8e:	4b0a      	ldr	r3, [pc, #40]	@ (800fdb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	3304      	adds	r3, #4
 800fd94:	4619      	mov	r1, r3
 800fd96:	4610      	mov	r0, r2
 800fd98:	f7fe fac7 	bl	800e32a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fd9c:	4b0a      	ldr	r3, [pc, #40]	@ (800fdc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	68ba      	ldr	r2, [r7, #8]
 800fda2:	429a      	cmp	r2, r3
 800fda4:	d202      	bcs.n	800fdac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fda6:	4a08      	ldr	r2, [pc, #32]	@ (800fdc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	6013      	str	r3, [r2, #0]
}
 800fdac:	bf00      	nop
 800fdae:	3710      	adds	r7, #16
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}
 800fdb4:	200012c4 	.word	0x200012c4
 800fdb8:	20000dec 	.word	0x20000dec
 800fdbc:	200012ac 	.word	0x200012ac
 800fdc0:	2000127c 	.word	0x2000127c
 800fdc4:	20001278 	.word	0x20001278
 800fdc8:	200012e0 	.word	0x200012e0

0800fdcc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b08a      	sub	sp, #40	@ 0x28
 800fdd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fdd6:	f000 fbb1 	bl	801053c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fdda:	4b1d      	ldr	r3, [pc, #116]	@ (800fe50 <xTimerCreateTimerTask+0x84>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d021      	beq.n	800fe26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fde2:	2300      	movs	r3, #0
 800fde4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fde6:	2300      	movs	r3, #0
 800fde8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fdea:	1d3a      	adds	r2, r7, #4
 800fdec:	f107 0108 	add.w	r1, r7, #8
 800fdf0:	f107 030c 	add.w	r3, r7, #12
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f7fe f837 	bl	800de68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fdfa:	6879      	ldr	r1, [r7, #4]
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	68fa      	ldr	r2, [r7, #12]
 800fe00:	9202      	str	r2, [sp, #8]
 800fe02:	9301      	str	r3, [sp, #4]
 800fe04:	2302      	movs	r3, #2
 800fe06:	9300      	str	r3, [sp, #0]
 800fe08:	2300      	movs	r3, #0
 800fe0a:	460a      	mov	r2, r1
 800fe0c:	4911      	ldr	r1, [pc, #68]	@ (800fe54 <xTimerCreateTimerTask+0x88>)
 800fe0e:	4812      	ldr	r0, [pc, #72]	@ (800fe58 <xTimerCreateTimerTask+0x8c>)
 800fe10:	f7fe ffe8 	bl	800ede4 <xTaskCreateStatic>
 800fe14:	4603      	mov	r3, r0
 800fe16:	4a11      	ldr	r2, [pc, #68]	@ (800fe5c <xTimerCreateTimerTask+0x90>)
 800fe18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fe1a:	4b10      	ldr	r3, [pc, #64]	@ (800fe5c <xTimerCreateTimerTask+0x90>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d001      	beq.n	800fe26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fe22:	2301      	movs	r3, #1
 800fe24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d10b      	bne.n	800fe44 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800fe2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe30:	f383 8811 	msr	BASEPRI, r3
 800fe34:	f3bf 8f6f 	isb	sy
 800fe38:	f3bf 8f4f 	dsb	sy
 800fe3c:	613b      	str	r3, [r7, #16]
}
 800fe3e:	bf00      	nop
 800fe40:	bf00      	nop
 800fe42:	e7fd      	b.n	800fe40 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fe44:	697b      	ldr	r3, [r7, #20]
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3718      	adds	r7, #24
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}
 800fe4e:	bf00      	nop
 800fe50:	2000131c 	.word	0x2000131c
 800fe54:	08014854 	.word	0x08014854
 800fe58:	080100d5 	.word	0x080100d5
 800fe5c:	20001320 	.word	0x20001320

0800fe60 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b088      	sub	sp, #32
 800fe64:	af02      	add	r7, sp, #8
 800fe66:	60f8      	str	r0, [r7, #12]
 800fe68:	60b9      	str	r1, [r7, #8]
 800fe6a:	607a      	str	r2, [r7, #4]
 800fe6c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800fe6e:	202c      	movs	r0, #44	@ 0x2c
 800fe70:	f000 fe3c 	bl	8010aec <pvPortMalloc>
 800fe74:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d00d      	beq.n	800fe98 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800fe84:	697b      	ldr	r3, [r7, #20]
 800fe86:	9301      	str	r3, [sp, #4]
 800fe88:	6a3b      	ldr	r3, [r7, #32]
 800fe8a:	9300      	str	r3, [sp, #0]
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	687a      	ldr	r2, [r7, #4]
 800fe90:	68b9      	ldr	r1, [r7, #8]
 800fe92:	68f8      	ldr	r0, [r7, #12]
 800fe94:	f000 f845 	bl	800ff22 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800fe98:	697b      	ldr	r3, [r7, #20]
	}
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	3718      	adds	r7, #24
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}

0800fea2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800fea2:	b580      	push	{r7, lr}
 800fea4:	b08a      	sub	sp, #40	@ 0x28
 800fea6:	af02      	add	r7, sp, #8
 800fea8:	60f8      	str	r0, [r7, #12]
 800feaa:	60b9      	str	r1, [r7, #8]
 800feac:	607a      	str	r2, [r7, #4]
 800feae:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800feb0:	232c      	movs	r3, #44	@ 0x2c
 800feb2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800feb4:	693b      	ldr	r3, [r7, #16]
 800feb6:	2b2c      	cmp	r3, #44	@ 0x2c
 800feb8:	d00b      	beq.n	800fed2 <xTimerCreateStatic+0x30>
	__asm volatile
 800feba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800febe:	f383 8811 	msr	BASEPRI, r3
 800fec2:	f3bf 8f6f 	isb	sy
 800fec6:	f3bf 8f4f 	dsb	sy
 800feca:	61bb      	str	r3, [r7, #24]
}
 800fecc:	bf00      	nop
 800fece:	bf00      	nop
 800fed0:	e7fd      	b.n	800fece <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fed2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800fed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d10b      	bne.n	800fef2 <xTimerCreateStatic+0x50>
	__asm volatile
 800feda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fede:	f383 8811 	msr	BASEPRI, r3
 800fee2:	f3bf 8f6f 	isb	sy
 800fee6:	f3bf 8f4f 	dsb	sy
 800feea:	617b      	str	r3, [r7, #20]
}
 800feec:	bf00      	nop
 800feee:	bf00      	nop
 800fef0:	e7fd      	b.n	800feee <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800fef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fef4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800fef6:	69fb      	ldr	r3, [r7, #28]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d00d      	beq.n	800ff18 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800fefc:	69fb      	ldr	r3, [r7, #28]
 800fefe:	2202      	movs	r2, #2
 800ff00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ff04:	69fb      	ldr	r3, [r7, #28]
 800ff06:	9301      	str	r3, [sp, #4]
 800ff08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff0a:	9300      	str	r3, [sp, #0]
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	687a      	ldr	r2, [r7, #4]
 800ff10:	68b9      	ldr	r1, [r7, #8]
 800ff12:	68f8      	ldr	r0, [r7, #12]
 800ff14:	f000 f805 	bl	800ff22 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ff18:	69fb      	ldr	r3, [r7, #28]
	}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3720      	adds	r7, #32
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}

0800ff22 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ff22:	b580      	push	{r7, lr}
 800ff24:	b086      	sub	sp, #24
 800ff26:	af00      	add	r7, sp, #0
 800ff28:	60f8      	str	r0, [r7, #12]
 800ff2a:	60b9      	str	r1, [r7, #8]
 800ff2c:	607a      	str	r2, [r7, #4]
 800ff2e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d10b      	bne.n	800ff4e <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800ff36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff3a:	f383 8811 	msr	BASEPRI, r3
 800ff3e:	f3bf 8f6f 	isb	sy
 800ff42:	f3bf 8f4f 	dsb	sy
 800ff46:	617b      	str	r3, [r7, #20]
}
 800ff48:	bf00      	nop
 800ff4a:	bf00      	nop
 800ff4c:	e7fd      	b.n	800ff4a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ff4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d01e      	beq.n	800ff92 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ff54:	f000 faf2 	bl	801053c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ff58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff5a:	68fa      	ldr	r2, [r7, #12]
 800ff5c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ff5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff60:	68ba      	ldr	r2, [r7, #8]
 800ff62:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800ff64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff66:	683a      	ldr	r2, [r7, #0]
 800ff68:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ff6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff6c:	6a3a      	ldr	r2, [r7, #32]
 800ff6e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ff70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff72:	3304      	adds	r3, #4
 800ff74:	4618      	mov	r0, r3
 800ff76:	f7fe f9a7 	bl	800e2c8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d008      	beq.n	800ff92 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ff80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ff86:	f043 0304 	orr.w	r3, r3, #4
 800ff8a:	b2da      	uxtb	r2, r3
 800ff8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ff92:	bf00      	nop
 800ff94:	3718      	adds	r7, #24
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}
	...

0800ff9c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b08a      	sub	sp, #40	@ 0x28
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	60f8      	str	r0, [r7, #12]
 800ffa4:	60b9      	str	r1, [r7, #8]
 800ffa6:	607a      	str	r2, [r7, #4]
 800ffa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d10b      	bne.n	800ffcc <xTimerGenericCommand+0x30>
	__asm volatile
 800ffb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffb8:	f383 8811 	msr	BASEPRI, r3
 800ffbc:	f3bf 8f6f 	isb	sy
 800ffc0:	f3bf 8f4f 	dsb	sy
 800ffc4:	623b      	str	r3, [r7, #32]
}
 800ffc6:	bf00      	nop
 800ffc8:	bf00      	nop
 800ffca:	e7fd      	b.n	800ffc8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ffcc:	4b19      	ldr	r3, [pc, #100]	@ (8010034 <xTimerGenericCommand+0x98>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d02a      	beq.n	801002a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	2b05      	cmp	r3, #5
 800ffe4:	dc18      	bgt.n	8010018 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ffe6:	f7ff fdf7 	bl	800fbd8 <xTaskGetSchedulerState>
 800ffea:	4603      	mov	r3, r0
 800ffec:	2b02      	cmp	r3, #2
 800ffee:	d109      	bne.n	8010004 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fff0:	4b10      	ldr	r3, [pc, #64]	@ (8010034 <xTimerGenericCommand+0x98>)
 800fff2:	6818      	ldr	r0, [r3, #0]
 800fff4:	f107 0110 	add.w	r1, r7, #16
 800fff8:	2300      	movs	r3, #0
 800fffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fffc:	f7fe fb02 	bl	800e604 <xQueueGenericSend>
 8010000:	6278      	str	r0, [r7, #36]	@ 0x24
 8010002:	e012      	b.n	801002a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010004:	4b0b      	ldr	r3, [pc, #44]	@ (8010034 <xTimerGenericCommand+0x98>)
 8010006:	6818      	ldr	r0, [r3, #0]
 8010008:	f107 0110 	add.w	r1, r7, #16
 801000c:	2300      	movs	r3, #0
 801000e:	2200      	movs	r2, #0
 8010010:	f7fe faf8 	bl	800e604 <xQueueGenericSend>
 8010014:	6278      	str	r0, [r7, #36]	@ 0x24
 8010016:	e008      	b.n	801002a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010018:	4b06      	ldr	r3, [pc, #24]	@ (8010034 <xTimerGenericCommand+0x98>)
 801001a:	6818      	ldr	r0, [r3, #0]
 801001c:	f107 0110 	add.w	r1, r7, #16
 8010020:	2300      	movs	r3, #0
 8010022:	683a      	ldr	r2, [r7, #0]
 8010024:	f7fe fbf0 	bl	800e808 <xQueueGenericSendFromISR>
 8010028:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801002a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801002c:	4618      	mov	r0, r3
 801002e:	3728      	adds	r7, #40	@ 0x28
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}
 8010034:	2000131c 	.word	0x2000131c

08010038 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b088      	sub	sp, #32
 801003c:	af02      	add	r7, sp, #8
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010042:	4b23      	ldr	r3, [pc, #140]	@ (80100d0 <prvProcessExpiredTimer+0x98>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	68db      	ldr	r3, [r3, #12]
 8010048:	68db      	ldr	r3, [r3, #12]
 801004a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	3304      	adds	r3, #4
 8010050:	4618      	mov	r0, r3
 8010052:	f7fe f9a3 	bl	800e39c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801005c:	f003 0304 	and.w	r3, r3, #4
 8010060:	2b00      	cmp	r3, #0
 8010062:	d023      	beq.n	80100ac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	699a      	ldr	r2, [r3, #24]
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	18d1      	adds	r1, r2, r3
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	683a      	ldr	r2, [r7, #0]
 8010070:	6978      	ldr	r0, [r7, #20]
 8010072:	f000 f8d5 	bl	8010220 <prvInsertTimerInActiveList>
 8010076:	4603      	mov	r3, r0
 8010078:	2b00      	cmp	r3, #0
 801007a:	d020      	beq.n	80100be <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801007c:	2300      	movs	r3, #0
 801007e:	9300      	str	r3, [sp, #0]
 8010080:	2300      	movs	r3, #0
 8010082:	687a      	ldr	r2, [r7, #4]
 8010084:	2100      	movs	r1, #0
 8010086:	6978      	ldr	r0, [r7, #20]
 8010088:	f7ff ff88 	bl	800ff9c <xTimerGenericCommand>
 801008c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801008e:	693b      	ldr	r3, [r7, #16]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d114      	bne.n	80100be <prvProcessExpiredTimer+0x86>
	__asm volatile
 8010094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010098:	f383 8811 	msr	BASEPRI, r3
 801009c:	f3bf 8f6f 	isb	sy
 80100a0:	f3bf 8f4f 	dsb	sy
 80100a4:	60fb      	str	r3, [r7, #12]
}
 80100a6:	bf00      	nop
 80100a8:	bf00      	nop
 80100aa:	e7fd      	b.n	80100a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80100ac:	697b      	ldr	r3, [r7, #20]
 80100ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80100b2:	f023 0301 	bic.w	r3, r3, #1
 80100b6:	b2da      	uxtb	r2, r3
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80100be:	697b      	ldr	r3, [r7, #20]
 80100c0:	6a1b      	ldr	r3, [r3, #32]
 80100c2:	6978      	ldr	r0, [r7, #20]
 80100c4:	4798      	blx	r3
}
 80100c6:	bf00      	nop
 80100c8:	3718      	adds	r7, #24
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
 80100ce:	bf00      	nop
 80100d0:	20001314 	.word	0x20001314

080100d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b084      	sub	sp, #16
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80100dc:	f107 0308 	add.w	r3, r7, #8
 80100e0:	4618      	mov	r0, r3
 80100e2:	f000 f859 	bl	8010198 <prvGetNextExpireTime>
 80100e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	4619      	mov	r1, r3
 80100ec:	68f8      	ldr	r0, [r7, #12]
 80100ee:	f000 f805 	bl	80100fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80100f2:	f000 f8d7 	bl	80102a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80100f6:	bf00      	nop
 80100f8:	e7f0      	b.n	80100dc <prvTimerTask+0x8>
	...

080100fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b084      	sub	sp, #16
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
 8010104:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010106:	f7ff f8d1 	bl	800f2ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801010a:	f107 0308 	add.w	r3, r7, #8
 801010e:	4618      	mov	r0, r3
 8010110:	f000 f866 	bl	80101e0 <prvSampleTimeNow>
 8010114:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d130      	bne.n	801017e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d10a      	bne.n	8010138 <prvProcessTimerOrBlockTask+0x3c>
 8010122:	687a      	ldr	r2, [r7, #4]
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	429a      	cmp	r2, r3
 8010128:	d806      	bhi.n	8010138 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801012a:	f7ff f8cd 	bl	800f2c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801012e:	68f9      	ldr	r1, [r7, #12]
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f7ff ff81 	bl	8010038 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010136:	e024      	b.n	8010182 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d008      	beq.n	8010150 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801013e:	4b13      	ldr	r3, [pc, #76]	@ (801018c <prvProcessTimerOrBlockTask+0x90>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d101      	bne.n	801014c <prvProcessTimerOrBlockTask+0x50>
 8010148:	2301      	movs	r3, #1
 801014a:	e000      	b.n	801014e <prvProcessTimerOrBlockTask+0x52>
 801014c:	2300      	movs	r3, #0
 801014e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010150:	4b0f      	ldr	r3, [pc, #60]	@ (8010190 <prvProcessTimerOrBlockTask+0x94>)
 8010152:	6818      	ldr	r0, [r3, #0]
 8010154:	687a      	ldr	r2, [r7, #4]
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	1ad3      	subs	r3, r2, r3
 801015a:	683a      	ldr	r2, [r7, #0]
 801015c:	4619      	mov	r1, r3
 801015e:	f7fe fe0d 	bl	800ed7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010162:	f7ff f8b1 	bl	800f2c8 <xTaskResumeAll>
 8010166:	4603      	mov	r3, r0
 8010168:	2b00      	cmp	r3, #0
 801016a:	d10a      	bne.n	8010182 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801016c:	4b09      	ldr	r3, [pc, #36]	@ (8010194 <prvProcessTimerOrBlockTask+0x98>)
 801016e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010172:	601a      	str	r2, [r3, #0]
 8010174:	f3bf 8f4f 	dsb	sy
 8010178:	f3bf 8f6f 	isb	sy
}
 801017c:	e001      	b.n	8010182 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801017e:	f7ff f8a3 	bl	800f2c8 <xTaskResumeAll>
}
 8010182:	bf00      	nop
 8010184:	3710      	adds	r7, #16
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}
 801018a:	bf00      	nop
 801018c:	20001318 	.word	0x20001318
 8010190:	2000131c 	.word	0x2000131c
 8010194:	e000ed04 	.word	0xe000ed04

08010198 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010198:	b480      	push	{r7}
 801019a:	b085      	sub	sp, #20
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80101a0:	4b0e      	ldr	r3, [pc, #56]	@ (80101dc <prvGetNextExpireTime+0x44>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d101      	bne.n	80101ae <prvGetNextExpireTime+0x16>
 80101aa:	2201      	movs	r2, #1
 80101ac:	e000      	b.n	80101b0 <prvGetNextExpireTime+0x18>
 80101ae:	2200      	movs	r2, #0
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d105      	bne.n	80101c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80101bc:	4b07      	ldr	r3, [pc, #28]	@ (80101dc <prvGetNextExpireTime+0x44>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	68db      	ldr	r3, [r3, #12]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	60fb      	str	r3, [r7, #12]
 80101c6:	e001      	b.n	80101cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80101c8:	2300      	movs	r3, #0
 80101ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80101cc:	68fb      	ldr	r3, [r7, #12]
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	3714      	adds	r7, #20
 80101d2:	46bd      	mov	sp, r7
 80101d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d8:	4770      	bx	lr
 80101da:	bf00      	nop
 80101dc:	20001314 	.word	0x20001314

080101e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b084      	sub	sp, #16
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80101e8:	f7ff f90c 	bl	800f404 <xTaskGetTickCount>
 80101ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80101ee:	4b0b      	ldr	r3, [pc, #44]	@ (801021c <prvSampleTimeNow+0x3c>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	68fa      	ldr	r2, [r7, #12]
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d205      	bcs.n	8010204 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80101f8:	f000 f93a 	bl	8010470 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2201      	movs	r2, #1
 8010200:	601a      	str	r2, [r3, #0]
 8010202:	e002      	b.n	801020a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2200      	movs	r2, #0
 8010208:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801020a:	4a04      	ldr	r2, [pc, #16]	@ (801021c <prvSampleTimeNow+0x3c>)
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010210:	68fb      	ldr	r3, [r7, #12]
}
 8010212:	4618      	mov	r0, r3
 8010214:	3710      	adds	r7, #16
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
 801021a:	bf00      	nop
 801021c:	20001324 	.word	0x20001324

08010220 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b086      	sub	sp, #24
 8010224:	af00      	add	r7, sp, #0
 8010226:	60f8      	str	r0, [r7, #12]
 8010228:	60b9      	str	r1, [r7, #8]
 801022a:	607a      	str	r2, [r7, #4]
 801022c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801022e:	2300      	movs	r3, #0
 8010230:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	68ba      	ldr	r2, [r7, #8]
 8010236:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	68fa      	ldr	r2, [r7, #12]
 801023c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801023e:	68ba      	ldr	r2, [r7, #8]
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	429a      	cmp	r2, r3
 8010244:	d812      	bhi.n	801026c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010246:	687a      	ldr	r2, [r7, #4]
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	1ad2      	subs	r2, r2, r3
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	699b      	ldr	r3, [r3, #24]
 8010250:	429a      	cmp	r2, r3
 8010252:	d302      	bcc.n	801025a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010254:	2301      	movs	r3, #1
 8010256:	617b      	str	r3, [r7, #20]
 8010258:	e01b      	b.n	8010292 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801025a:	4b10      	ldr	r3, [pc, #64]	@ (801029c <prvInsertTimerInActiveList+0x7c>)
 801025c:	681a      	ldr	r2, [r3, #0]
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	3304      	adds	r3, #4
 8010262:	4619      	mov	r1, r3
 8010264:	4610      	mov	r0, r2
 8010266:	f7fe f860 	bl	800e32a <vListInsert>
 801026a:	e012      	b.n	8010292 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801026c:	687a      	ldr	r2, [r7, #4]
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	429a      	cmp	r2, r3
 8010272:	d206      	bcs.n	8010282 <prvInsertTimerInActiveList+0x62>
 8010274:	68ba      	ldr	r2, [r7, #8]
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	429a      	cmp	r2, r3
 801027a:	d302      	bcc.n	8010282 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801027c:	2301      	movs	r3, #1
 801027e:	617b      	str	r3, [r7, #20]
 8010280:	e007      	b.n	8010292 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010282:	4b07      	ldr	r3, [pc, #28]	@ (80102a0 <prvInsertTimerInActiveList+0x80>)
 8010284:	681a      	ldr	r2, [r3, #0]
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	3304      	adds	r3, #4
 801028a:	4619      	mov	r1, r3
 801028c:	4610      	mov	r0, r2
 801028e:	f7fe f84c 	bl	800e32a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010292:	697b      	ldr	r3, [r7, #20]
}
 8010294:	4618      	mov	r0, r3
 8010296:	3718      	adds	r7, #24
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}
 801029c:	20001318 	.word	0x20001318
 80102a0:	20001314 	.word	0x20001314

080102a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b08e      	sub	sp, #56	@ 0x38
 80102a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80102aa:	e0ce      	b.n	801044a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	da19      	bge.n	80102e6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80102b2:	1d3b      	adds	r3, r7, #4
 80102b4:	3304      	adds	r3, #4
 80102b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80102b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d10b      	bne.n	80102d6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80102be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102c2:	f383 8811 	msr	BASEPRI, r3
 80102c6:	f3bf 8f6f 	isb	sy
 80102ca:	f3bf 8f4f 	dsb	sy
 80102ce:	61fb      	str	r3, [r7, #28]
}
 80102d0:	bf00      	nop
 80102d2:	bf00      	nop
 80102d4:	e7fd      	b.n	80102d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80102d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80102dc:	6850      	ldr	r0, [r2, #4]
 80102de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80102e0:	6892      	ldr	r2, [r2, #8]
 80102e2:	4611      	mov	r1, r2
 80102e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	f2c0 80ae 	blt.w	801044a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80102f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102f4:	695b      	ldr	r3, [r3, #20]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d004      	beq.n	8010304 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80102fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102fc:	3304      	adds	r3, #4
 80102fe:	4618      	mov	r0, r3
 8010300:	f7fe f84c 	bl	800e39c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010304:	463b      	mov	r3, r7
 8010306:	4618      	mov	r0, r3
 8010308:	f7ff ff6a 	bl	80101e0 <prvSampleTimeNow>
 801030c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	2b09      	cmp	r3, #9
 8010312:	f200 8097 	bhi.w	8010444 <prvProcessReceivedCommands+0x1a0>
 8010316:	a201      	add	r2, pc, #4	@ (adr r2, 801031c <prvProcessReceivedCommands+0x78>)
 8010318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801031c:	08010345 	.word	0x08010345
 8010320:	08010345 	.word	0x08010345
 8010324:	08010345 	.word	0x08010345
 8010328:	080103bb 	.word	0x080103bb
 801032c:	080103cf 	.word	0x080103cf
 8010330:	0801041b 	.word	0x0801041b
 8010334:	08010345 	.word	0x08010345
 8010338:	08010345 	.word	0x08010345
 801033c:	080103bb 	.word	0x080103bb
 8010340:	080103cf 	.word	0x080103cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010346:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801034a:	f043 0301 	orr.w	r3, r3, #1
 801034e:	b2da      	uxtb	r2, r3
 8010350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010352:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010356:	68ba      	ldr	r2, [r7, #8]
 8010358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801035a:	699b      	ldr	r3, [r3, #24]
 801035c:	18d1      	adds	r1, r2, r3
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010362:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010364:	f7ff ff5c 	bl	8010220 <prvInsertTimerInActiveList>
 8010368:	4603      	mov	r3, r0
 801036a:	2b00      	cmp	r3, #0
 801036c:	d06c      	beq.n	8010448 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801036e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010370:	6a1b      	ldr	r3, [r3, #32]
 8010372:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010374:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010378:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801037c:	f003 0304 	and.w	r3, r3, #4
 8010380:	2b00      	cmp	r3, #0
 8010382:	d061      	beq.n	8010448 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010384:	68ba      	ldr	r2, [r7, #8]
 8010386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010388:	699b      	ldr	r3, [r3, #24]
 801038a:	441a      	add	r2, r3
 801038c:	2300      	movs	r3, #0
 801038e:	9300      	str	r3, [sp, #0]
 8010390:	2300      	movs	r3, #0
 8010392:	2100      	movs	r1, #0
 8010394:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010396:	f7ff fe01 	bl	800ff9c <xTimerGenericCommand>
 801039a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801039c:	6a3b      	ldr	r3, [r7, #32]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d152      	bne.n	8010448 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80103a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103a6:	f383 8811 	msr	BASEPRI, r3
 80103aa:	f3bf 8f6f 	isb	sy
 80103ae:	f3bf 8f4f 	dsb	sy
 80103b2:	61bb      	str	r3, [r7, #24]
}
 80103b4:	bf00      	nop
 80103b6:	bf00      	nop
 80103b8:	e7fd      	b.n	80103b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80103ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80103c0:	f023 0301 	bic.w	r3, r3, #1
 80103c4:	b2da      	uxtb	r2, r3
 80103c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80103cc:	e03d      	b.n	801044a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80103ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80103d4:	f043 0301 	orr.w	r3, r3, #1
 80103d8:	b2da      	uxtb	r2, r3
 80103da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80103e0:	68ba      	ldr	r2, [r7, #8]
 80103e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80103e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103e8:	699b      	ldr	r3, [r3, #24]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d10b      	bne.n	8010406 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80103ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103f2:	f383 8811 	msr	BASEPRI, r3
 80103f6:	f3bf 8f6f 	isb	sy
 80103fa:	f3bf 8f4f 	dsb	sy
 80103fe:	617b      	str	r3, [r7, #20]
}
 8010400:	bf00      	nop
 8010402:	bf00      	nop
 8010404:	e7fd      	b.n	8010402 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010408:	699a      	ldr	r2, [r3, #24]
 801040a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801040c:	18d1      	adds	r1, r2, r3
 801040e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010412:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010414:	f7ff ff04 	bl	8010220 <prvInsertTimerInActiveList>
					break;
 8010418:	e017      	b.n	801044a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801041a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801041c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010420:	f003 0302 	and.w	r3, r3, #2
 8010424:	2b00      	cmp	r3, #0
 8010426:	d103      	bne.n	8010430 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8010428:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801042a:	f000 fc2d 	bl	8010c88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801042e:	e00c      	b.n	801044a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010432:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010436:	f023 0301 	bic.w	r3, r3, #1
 801043a:	b2da      	uxtb	r2, r3
 801043c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801043e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010442:	e002      	b.n	801044a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8010444:	bf00      	nop
 8010446:	e000      	b.n	801044a <prvProcessReceivedCommands+0x1a6>
					break;
 8010448:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801044a:	4b08      	ldr	r3, [pc, #32]	@ (801046c <prvProcessReceivedCommands+0x1c8>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	1d39      	adds	r1, r7, #4
 8010450:	2200      	movs	r2, #0
 8010452:	4618      	mov	r0, r3
 8010454:	f7fe fa76 	bl	800e944 <xQueueReceive>
 8010458:	4603      	mov	r3, r0
 801045a:	2b00      	cmp	r3, #0
 801045c:	f47f af26 	bne.w	80102ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010460:	bf00      	nop
 8010462:	bf00      	nop
 8010464:	3730      	adds	r7, #48	@ 0x30
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}
 801046a:	bf00      	nop
 801046c:	2000131c 	.word	0x2000131c

08010470 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b088      	sub	sp, #32
 8010474:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010476:	e049      	b.n	801050c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010478:	4b2e      	ldr	r3, [pc, #184]	@ (8010534 <prvSwitchTimerLists+0xc4>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	68db      	ldr	r3, [r3, #12]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010482:	4b2c      	ldr	r3, [pc, #176]	@ (8010534 <prvSwitchTimerLists+0xc4>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	68db      	ldr	r3, [r3, #12]
 8010488:	68db      	ldr	r3, [r3, #12]
 801048a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	3304      	adds	r3, #4
 8010490:	4618      	mov	r0, r3
 8010492:	f7fd ff83 	bl	800e39c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	6a1b      	ldr	r3, [r3, #32]
 801049a:	68f8      	ldr	r0, [r7, #12]
 801049c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80104a4:	f003 0304 	and.w	r3, r3, #4
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d02f      	beq.n	801050c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	699b      	ldr	r3, [r3, #24]
 80104b0:	693a      	ldr	r2, [r7, #16]
 80104b2:	4413      	add	r3, r2
 80104b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80104b6:	68ba      	ldr	r2, [r7, #8]
 80104b8:	693b      	ldr	r3, [r7, #16]
 80104ba:	429a      	cmp	r2, r3
 80104bc:	d90e      	bls.n	80104dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	68ba      	ldr	r2, [r7, #8]
 80104c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	68fa      	ldr	r2, [r7, #12]
 80104c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80104ca:	4b1a      	ldr	r3, [pc, #104]	@ (8010534 <prvSwitchTimerLists+0xc4>)
 80104cc:	681a      	ldr	r2, [r3, #0]
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	3304      	adds	r3, #4
 80104d2:	4619      	mov	r1, r3
 80104d4:	4610      	mov	r0, r2
 80104d6:	f7fd ff28 	bl	800e32a <vListInsert>
 80104da:	e017      	b.n	801050c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80104dc:	2300      	movs	r3, #0
 80104de:	9300      	str	r3, [sp, #0]
 80104e0:	2300      	movs	r3, #0
 80104e2:	693a      	ldr	r2, [r7, #16]
 80104e4:	2100      	movs	r1, #0
 80104e6:	68f8      	ldr	r0, [r7, #12]
 80104e8:	f7ff fd58 	bl	800ff9c <xTimerGenericCommand>
 80104ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d10b      	bne.n	801050c <prvSwitchTimerLists+0x9c>
	__asm volatile
 80104f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104f8:	f383 8811 	msr	BASEPRI, r3
 80104fc:	f3bf 8f6f 	isb	sy
 8010500:	f3bf 8f4f 	dsb	sy
 8010504:	603b      	str	r3, [r7, #0]
}
 8010506:	bf00      	nop
 8010508:	bf00      	nop
 801050a:	e7fd      	b.n	8010508 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801050c:	4b09      	ldr	r3, [pc, #36]	@ (8010534 <prvSwitchTimerLists+0xc4>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d1b0      	bne.n	8010478 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010516:	4b07      	ldr	r3, [pc, #28]	@ (8010534 <prvSwitchTimerLists+0xc4>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801051c:	4b06      	ldr	r3, [pc, #24]	@ (8010538 <prvSwitchTimerLists+0xc8>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	4a04      	ldr	r2, [pc, #16]	@ (8010534 <prvSwitchTimerLists+0xc4>)
 8010522:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010524:	4a04      	ldr	r2, [pc, #16]	@ (8010538 <prvSwitchTimerLists+0xc8>)
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	6013      	str	r3, [r2, #0]
}
 801052a:	bf00      	nop
 801052c:	3718      	adds	r7, #24
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}
 8010532:	bf00      	nop
 8010534:	20001314 	.word	0x20001314
 8010538:	20001318 	.word	0x20001318

0801053c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b082      	sub	sp, #8
 8010540:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010542:	f000 f9b1 	bl	80108a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010546:	4b15      	ldr	r3, [pc, #84]	@ (801059c <prvCheckForValidListAndQueue+0x60>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d120      	bne.n	8010590 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801054e:	4814      	ldr	r0, [pc, #80]	@ (80105a0 <prvCheckForValidListAndQueue+0x64>)
 8010550:	f7fd fe9a 	bl	800e288 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010554:	4813      	ldr	r0, [pc, #76]	@ (80105a4 <prvCheckForValidListAndQueue+0x68>)
 8010556:	f7fd fe97 	bl	800e288 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801055a:	4b13      	ldr	r3, [pc, #76]	@ (80105a8 <prvCheckForValidListAndQueue+0x6c>)
 801055c:	4a10      	ldr	r2, [pc, #64]	@ (80105a0 <prvCheckForValidListAndQueue+0x64>)
 801055e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010560:	4b12      	ldr	r3, [pc, #72]	@ (80105ac <prvCheckForValidListAndQueue+0x70>)
 8010562:	4a10      	ldr	r2, [pc, #64]	@ (80105a4 <prvCheckForValidListAndQueue+0x68>)
 8010564:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010566:	2300      	movs	r3, #0
 8010568:	9300      	str	r3, [sp, #0]
 801056a:	4b11      	ldr	r3, [pc, #68]	@ (80105b0 <prvCheckForValidListAndQueue+0x74>)
 801056c:	4a11      	ldr	r2, [pc, #68]	@ (80105b4 <prvCheckForValidListAndQueue+0x78>)
 801056e:	2110      	movs	r1, #16
 8010570:	200a      	movs	r0, #10
 8010572:	f7fd ffa7 	bl	800e4c4 <xQueueGenericCreateStatic>
 8010576:	4603      	mov	r3, r0
 8010578:	4a08      	ldr	r2, [pc, #32]	@ (801059c <prvCheckForValidListAndQueue+0x60>)
 801057a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801057c:	4b07      	ldr	r3, [pc, #28]	@ (801059c <prvCheckForValidListAndQueue+0x60>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d005      	beq.n	8010590 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010584:	4b05      	ldr	r3, [pc, #20]	@ (801059c <prvCheckForValidListAndQueue+0x60>)
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	490b      	ldr	r1, [pc, #44]	@ (80105b8 <prvCheckForValidListAndQueue+0x7c>)
 801058a:	4618      	mov	r0, r3
 801058c:	f7fe fbcc 	bl	800ed28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010590:	f000 f9bc 	bl	801090c <vPortExitCritical>
}
 8010594:	bf00      	nop
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}
 801059a:	bf00      	nop
 801059c:	2000131c 	.word	0x2000131c
 80105a0:	200012ec 	.word	0x200012ec
 80105a4:	20001300 	.word	0x20001300
 80105a8:	20001314 	.word	0x20001314
 80105ac:	20001318 	.word	0x20001318
 80105b0:	200013c8 	.word	0x200013c8
 80105b4:	20001328 	.word	0x20001328
 80105b8:	0801485c 	.word	0x0801485c

080105bc <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b086      	sub	sp, #24
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d10b      	bne.n	80105e6 <pvTimerGetTimerID+0x2a>
	__asm volatile
 80105ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105d2:	f383 8811 	msr	BASEPRI, r3
 80105d6:	f3bf 8f6f 	isb	sy
 80105da:	f3bf 8f4f 	dsb	sy
 80105de:	60fb      	str	r3, [r7, #12]
}
 80105e0:	bf00      	nop
 80105e2:	bf00      	nop
 80105e4:	e7fd      	b.n	80105e2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80105e6:	f000 f95f 	bl	80108a8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80105ea:	697b      	ldr	r3, [r7, #20]
 80105ec:	69db      	ldr	r3, [r3, #28]
 80105ee:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80105f0:	f000 f98c 	bl	801090c <vPortExitCritical>

	return pvReturn;
 80105f4:	693b      	ldr	r3, [r7, #16]
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	3718      	adds	r7, #24
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}
	...

08010600 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010600:	b580      	push	{r7, lr}
 8010602:	b08a      	sub	sp, #40	@ 0x28
 8010604:	af00      	add	r7, sp, #0
 8010606:	60f8      	str	r0, [r7, #12]
 8010608:	60b9      	str	r1, [r7, #8]
 801060a:	607a      	str	r2, [r7, #4]
 801060c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801060e:	f06f 0301 	mvn.w	r3, #1
 8010612:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010620:	4b06      	ldr	r3, [pc, #24]	@ (801063c <xTimerPendFunctionCallFromISR+0x3c>)
 8010622:	6818      	ldr	r0, [r3, #0]
 8010624:	f107 0114 	add.w	r1, r7, #20
 8010628:	2300      	movs	r3, #0
 801062a:	683a      	ldr	r2, [r7, #0]
 801062c:	f7fe f8ec 	bl	800e808 <xQueueGenericSendFromISR>
 8010630:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8010632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8010634:	4618      	mov	r0, r3
 8010636:	3728      	adds	r7, #40	@ 0x28
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}
 801063c:	2000131c 	.word	0x2000131c

08010640 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010640:	b480      	push	{r7}
 8010642:	b085      	sub	sp, #20
 8010644:	af00      	add	r7, sp, #0
 8010646:	60f8      	str	r0, [r7, #12]
 8010648:	60b9      	str	r1, [r7, #8]
 801064a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	3b04      	subs	r3, #4
 8010650:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010658:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	3b04      	subs	r3, #4
 801065e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	f023 0201 	bic.w	r2, r3, #1
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	3b04      	subs	r3, #4
 801066e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010670:	4a0c      	ldr	r2, [pc, #48]	@ (80106a4 <pxPortInitialiseStack+0x64>)
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	3b14      	subs	r3, #20
 801067a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801067c:	687a      	ldr	r2, [r7, #4]
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	3b04      	subs	r3, #4
 8010686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	f06f 0202 	mvn.w	r2, #2
 801068e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	3b20      	subs	r3, #32
 8010694:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010696:	68fb      	ldr	r3, [r7, #12]
}
 8010698:	4618      	mov	r0, r3
 801069a:	3714      	adds	r7, #20
 801069c:	46bd      	mov	sp, r7
 801069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a2:	4770      	bx	lr
 80106a4:	080106a9 	.word	0x080106a9

080106a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80106a8:	b480      	push	{r7}
 80106aa:	b085      	sub	sp, #20
 80106ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80106ae:	2300      	movs	r3, #0
 80106b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80106b2:	4b13      	ldr	r3, [pc, #76]	@ (8010700 <prvTaskExitError+0x58>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ba:	d00b      	beq.n	80106d4 <prvTaskExitError+0x2c>
	__asm volatile
 80106bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106c0:	f383 8811 	msr	BASEPRI, r3
 80106c4:	f3bf 8f6f 	isb	sy
 80106c8:	f3bf 8f4f 	dsb	sy
 80106cc:	60fb      	str	r3, [r7, #12]
}
 80106ce:	bf00      	nop
 80106d0:	bf00      	nop
 80106d2:	e7fd      	b.n	80106d0 <prvTaskExitError+0x28>
	__asm volatile
 80106d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106d8:	f383 8811 	msr	BASEPRI, r3
 80106dc:	f3bf 8f6f 	isb	sy
 80106e0:	f3bf 8f4f 	dsb	sy
 80106e4:	60bb      	str	r3, [r7, #8]
}
 80106e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80106e8:	bf00      	nop
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d0fc      	beq.n	80106ea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80106f0:	bf00      	nop
 80106f2:	bf00      	nop
 80106f4:	3714      	adds	r7, #20
 80106f6:	46bd      	mov	sp, r7
 80106f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fc:	4770      	bx	lr
 80106fe:	bf00      	nop
 8010700:	200000ac 	.word	0x200000ac
	...

08010710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010710:	4b07      	ldr	r3, [pc, #28]	@ (8010730 <pxCurrentTCBConst2>)
 8010712:	6819      	ldr	r1, [r3, #0]
 8010714:	6808      	ldr	r0, [r1, #0]
 8010716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801071a:	f380 8809 	msr	PSP, r0
 801071e:	f3bf 8f6f 	isb	sy
 8010722:	f04f 0000 	mov.w	r0, #0
 8010726:	f380 8811 	msr	BASEPRI, r0
 801072a:	4770      	bx	lr
 801072c:	f3af 8000 	nop.w

08010730 <pxCurrentTCBConst2>:
 8010730:	20000dec 	.word	0x20000dec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010734:	bf00      	nop
 8010736:	bf00      	nop

08010738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010738:	4808      	ldr	r0, [pc, #32]	@ (801075c <prvPortStartFirstTask+0x24>)
 801073a:	6800      	ldr	r0, [r0, #0]
 801073c:	6800      	ldr	r0, [r0, #0]
 801073e:	f380 8808 	msr	MSP, r0
 8010742:	f04f 0000 	mov.w	r0, #0
 8010746:	f380 8814 	msr	CONTROL, r0
 801074a:	b662      	cpsie	i
 801074c:	b661      	cpsie	f
 801074e:	f3bf 8f4f 	dsb	sy
 8010752:	f3bf 8f6f 	isb	sy
 8010756:	df00      	svc	0
 8010758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801075a:	bf00      	nop
 801075c:	e000ed08 	.word	0xe000ed08

08010760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b086      	sub	sp, #24
 8010764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010766:	4b47      	ldr	r3, [pc, #284]	@ (8010884 <xPortStartScheduler+0x124>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	4a47      	ldr	r2, [pc, #284]	@ (8010888 <xPortStartScheduler+0x128>)
 801076c:	4293      	cmp	r3, r2
 801076e:	d10b      	bne.n	8010788 <xPortStartScheduler+0x28>
	__asm volatile
 8010770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010774:	f383 8811 	msr	BASEPRI, r3
 8010778:	f3bf 8f6f 	isb	sy
 801077c:	f3bf 8f4f 	dsb	sy
 8010780:	613b      	str	r3, [r7, #16]
}
 8010782:	bf00      	nop
 8010784:	bf00      	nop
 8010786:	e7fd      	b.n	8010784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010788:	4b3e      	ldr	r3, [pc, #248]	@ (8010884 <xPortStartScheduler+0x124>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	4a3f      	ldr	r2, [pc, #252]	@ (801088c <xPortStartScheduler+0x12c>)
 801078e:	4293      	cmp	r3, r2
 8010790:	d10b      	bne.n	80107aa <xPortStartScheduler+0x4a>
	__asm volatile
 8010792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010796:	f383 8811 	msr	BASEPRI, r3
 801079a:	f3bf 8f6f 	isb	sy
 801079e:	f3bf 8f4f 	dsb	sy
 80107a2:	60fb      	str	r3, [r7, #12]
}
 80107a4:	bf00      	nop
 80107a6:	bf00      	nop
 80107a8:	e7fd      	b.n	80107a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80107aa:	4b39      	ldr	r3, [pc, #228]	@ (8010890 <xPortStartScheduler+0x130>)
 80107ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	781b      	ldrb	r3, [r3, #0]
 80107b2:	b2db      	uxtb	r3, r3
 80107b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80107b6:	697b      	ldr	r3, [r7, #20]
 80107b8:	22ff      	movs	r2, #255	@ 0xff
 80107ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	781b      	ldrb	r3, [r3, #0]
 80107c0:	b2db      	uxtb	r3, r3
 80107c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80107c4:	78fb      	ldrb	r3, [r7, #3]
 80107c6:	b2db      	uxtb	r3, r3
 80107c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80107cc:	b2da      	uxtb	r2, r3
 80107ce:	4b31      	ldr	r3, [pc, #196]	@ (8010894 <xPortStartScheduler+0x134>)
 80107d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80107d2:	4b31      	ldr	r3, [pc, #196]	@ (8010898 <xPortStartScheduler+0x138>)
 80107d4:	2207      	movs	r2, #7
 80107d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80107d8:	e009      	b.n	80107ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80107da:	4b2f      	ldr	r3, [pc, #188]	@ (8010898 <xPortStartScheduler+0x138>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	3b01      	subs	r3, #1
 80107e0:	4a2d      	ldr	r2, [pc, #180]	@ (8010898 <xPortStartScheduler+0x138>)
 80107e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80107e4:	78fb      	ldrb	r3, [r7, #3]
 80107e6:	b2db      	uxtb	r3, r3
 80107e8:	005b      	lsls	r3, r3, #1
 80107ea:	b2db      	uxtb	r3, r3
 80107ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80107ee:	78fb      	ldrb	r3, [r7, #3]
 80107f0:	b2db      	uxtb	r3, r3
 80107f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80107f6:	2b80      	cmp	r3, #128	@ 0x80
 80107f8:	d0ef      	beq.n	80107da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80107fa:	4b27      	ldr	r3, [pc, #156]	@ (8010898 <xPortStartScheduler+0x138>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	f1c3 0307 	rsb	r3, r3, #7
 8010802:	2b04      	cmp	r3, #4
 8010804:	d00b      	beq.n	801081e <xPortStartScheduler+0xbe>
	__asm volatile
 8010806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801080a:	f383 8811 	msr	BASEPRI, r3
 801080e:	f3bf 8f6f 	isb	sy
 8010812:	f3bf 8f4f 	dsb	sy
 8010816:	60bb      	str	r3, [r7, #8]
}
 8010818:	bf00      	nop
 801081a:	bf00      	nop
 801081c:	e7fd      	b.n	801081a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801081e:	4b1e      	ldr	r3, [pc, #120]	@ (8010898 <xPortStartScheduler+0x138>)
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	021b      	lsls	r3, r3, #8
 8010824:	4a1c      	ldr	r2, [pc, #112]	@ (8010898 <xPortStartScheduler+0x138>)
 8010826:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010828:	4b1b      	ldr	r3, [pc, #108]	@ (8010898 <xPortStartScheduler+0x138>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010830:	4a19      	ldr	r2, [pc, #100]	@ (8010898 <xPortStartScheduler+0x138>)
 8010832:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	b2da      	uxtb	r2, r3
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801083c:	4b17      	ldr	r3, [pc, #92]	@ (801089c <xPortStartScheduler+0x13c>)
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	4a16      	ldr	r2, [pc, #88]	@ (801089c <xPortStartScheduler+0x13c>)
 8010842:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010846:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010848:	4b14      	ldr	r3, [pc, #80]	@ (801089c <xPortStartScheduler+0x13c>)
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	4a13      	ldr	r2, [pc, #76]	@ (801089c <xPortStartScheduler+0x13c>)
 801084e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010852:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010854:	f000 f8da 	bl	8010a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010858:	4b11      	ldr	r3, [pc, #68]	@ (80108a0 <xPortStartScheduler+0x140>)
 801085a:	2200      	movs	r2, #0
 801085c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801085e:	f000 f8f9 	bl	8010a54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010862:	4b10      	ldr	r3, [pc, #64]	@ (80108a4 <xPortStartScheduler+0x144>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	4a0f      	ldr	r2, [pc, #60]	@ (80108a4 <xPortStartScheduler+0x144>)
 8010868:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801086c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801086e:	f7ff ff63 	bl	8010738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010872:	f7fe fe91 	bl	800f598 <vTaskSwitchContext>
	prvTaskExitError();
 8010876:	f7ff ff17 	bl	80106a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801087a:	2300      	movs	r3, #0
}
 801087c:	4618      	mov	r0, r3
 801087e:	3718      	adds	r7, #24
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}
 8010884:	e000ed00 	.word	0xe000ed00
 8010888:	410fc271 	.word	0x410fc271
 801088c:	410fc270 	.word	0x410fc270
 8010890:	e000e400 	.word	0xe000e400
 8010894:	20001418 	.word	0x20001418
 8010898:	2000141c 	.word	0x2000141c
 801089c:	e000ed20 	.word	0xe000ed20
 80108a0:	200000ac 	.word	0x200000ac
 80108a4:	e000ef34 	.word	0xe000ef34

080108a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80108a8:	b480      	push	{r7}
 80108aa:	b083      	sub	sp, #12
 80108ac:	af00      	add	r7, sp, #0
	__asm volatile
 80108ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108b2:	f383 8811 	msr	BASEPRI, r3
 80108b6:	f3bf 8f6f 	isb	sy
 80108ba:	f3bf 8f4f 	dsb	sy
 80108be:	607b      	str	r3, [r7, #4]
}
 80108c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80108c2:	4b10      	ldr	r3, [pc, #64]	@ (8010904 <vPortEnterCritical+0x5c>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	3301      	adds	r3, #1
 80108c8:	4a0e      	ldr	r2, [pc, #56]	@ (8010904 <vPortEnterCritical+0x5c>)
 80108ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80108cc:	4b0d      	ldr	r3, [pc, #52]	@ (8010904 <vPortEnterCritical+0x5c>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	2b01      	cmp	r3, #1
 80108d2:	d110      	bne.n	80108f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80108d4:	4b0c      	ldr	r3, [pc, #48]	@ (8010908 <vPortEnterCritical+0x60>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	b2db      	uxtb	r3, r3
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d00b      	beq.n	80108f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80108de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108e2:	f383 8811 	msr	BASEPRI, r3
 80108e6:	f3bf 8f6f 	isb	sy
 80108ea:	f3bf 8f4f 	dsb	sy
 80108ee:	603b      	str	r3, [r7, #0]
}
 80108f0:	bf00      	nop
 80108f2:	bf00      	nop
 80108f4:	e7fd      	b.n	80108f2 <vPortEnterCritical+0x4a>
	}
}
 80108f6:	bf00      	nop
 80108f8:	370c      	adds	r7, #12
 80108fa:	46bd      	mov	sp, r7
 80108fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010900:	4770      	bx	lr
 8010902:	bf00      	nop
 8010904:	200000ac 	.word	0x200000ac
 8010908:	e000ed04 	.word	0xe000ed04

0801090c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801090c:	b480      	push	{r7}
 801090e:	b083      	sub	sp, #12
 8010910:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010912:	4b12      	ldr	r3, [pc, #72]	@ (801095c <vPortExitCritical+0x50>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d10b      	bne.n	8010932 <vPortExitCritical+0x26>
	__asm volatile
 801091a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801091e:	f383 8811 	msr	BASEPRI, r3
 8010922:	f3bf 8f6f 	isb	sy
 8010926:	f3bf 8f4f 	dsb	sy
 801092a:	607b      	str	r3, [r7, #4]
}
 801092c:	bf00      	nop
 801092e:	bf00      	nop
 8010930:	e7fd      	b.n	801092e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010932:	4b0a      	ldr	r3, [pc, #40]	@ (801095c <vPortExitCritical+0x50>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	3b01      	subs	r3, #1
 8010938:	4a08      	ldr	r2, [pc, #32]	@ (801095c <vPortExitCritical+0x50>)
 801093a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801093c:	4b07      	ldr	r3, [pc, #28]	@ (801095c <vPortExitCritical+0x50>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d105      	bne.n	8010950 <vPortExitCritical+0x44>
 8010944:	2300      	movs	r3, #0
 8010946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	f383 8811 	msr	BASEPRI, r3
}
 801094e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010950:	bf00      	nop
 8010952:	370c      	adds	r7, #12
 8010954:	46bd      	mov	sp, r7
 8010956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095a:	4770      	bx	lr
 801095c:	200000ac 	.word	0x200000ac

08010960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010960:	f3ef 8009 	mrs	r0, PSP
 8010964:	f3bf 8f6f 	isb	sy
 8010968:	4b15      	ldr	r3, [pc, #84]	@ (80109c0 <pxCurrentTCBConst>)
 801096a:	681a      	ldr	r2, [r3, #0]
 801096c:	f01e 0f10 	tst.w	lr, #16
 8010970:	bf08      	it	eq
 8010972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801097a:	6010      	str	r0, [r2, #0]
 801097c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010980:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010984:	f380 8811 	msr	BASEPRI, r0
 8010988:	f3bf 8f4f 	dsb	sy
 801098c:	f3bf 8f6f 	isb	sy
 8010990:	f7fe fe02 	bl	800f598 <vTaskSwitchContext>
 8010994:	f04f 0000 	mov.w	r0, #0
 8010998:	f380 8811 	msr	BASEPRI, r0
 801099c:	bc09      	pop	{r0, r3}
 801099e:	6819      	ldr	r1, [r3, #0]
 80109a0:	6808      	ldr	r0, [r1, #0]
 80109a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a6:	f01e 0f10 	tst.w	lr, #16
 80109aa:	bf08      	it	eq
 80109ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80109b0:	f380 8809 	msr	PSP, r0
 80109b4:	f3bf 8f6f 	isb	sy
 80109b8:	4770      	bx	lr
 80109ba:	bf00      	nop
 80109bc:	f3af 8000 	nop.w

080109c0 <pxCurrentTCBConst>:
 80109c0:	20000dec 	.word	0x20000dec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80109c4:	bf00      	nop
 80109c6:	bf00      	nop

080109c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b082      	sub	sp, #8
 80109cc:	af00      	add	r7, sp, #0
	__asm volatile
 80109ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109d2:	f383 8811 	msr	BASEPRI, r3
 80109d6:	f3bf 8f6f 	isb	sy
 80109da:	f3bf 8f4f 	dsb	sy
 80109de:	607b      	str	r3, [r7, #4]
}
 80109e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80109e2:	f7fe fd1f 	bl	800f424 <xTaskIncrementTick>
 80109e6:	4603      	mov	r3, r0
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d003      	beq.n	80109f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80109ec:	4b06      	ldr	r3, [pc, #24]	@ (8010a08 <xPortSysTickHandler+0x40>)
 80109ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80109f2:	601a      	str	r2, [r3, #0]
 80109f4:	2300      	movs	r3, #0
 80109f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	f383 8811 	msr	BASEPRI, r3
}
 80109fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010a00:	bf00      	nop
 8010a02:	3708      	adds	r7, #8
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}
 8010a08:	e000ed04 	.word	0xe000ed04

08010a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010a0c:	b480      	push	{r7}
 8010a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010a10:	4b0b      	ldr	r3, [pc, #44]	@ (8010a40 <vPortSetupTimerInterrupt+0x34>)
 8010a12:	2200      	movs	r2, #0
 8010a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010a16:	4b0b      	ldr	r3, [pc, #44]	@ (8010a44 <vPortSetupTimerInterrupt+0x38>)
 8010a18:	2200      	movs	r2, #0
 8010a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8010a48 <vPortSetupTimerInterrupt+0x3c>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	4a0a      	ldr	r2, [pc, #40]	@ (8010a4c <vPortSetupTimerInterrupt+0x40>)
 8010a22:	fba2 2303 	umull	r2, r3, r2, r3
 8010a26:	099b      	lsrs	r3, r3, #6
 8010a28:	4a09      	ldr	r2, [pc, #36]	@ (8010a50 <vPortSetupTimerInterrupt+0x44>)
 8010a2a:	3b01      	subs	r3, #1
 8010a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010a2e:	4b04      	ldr	r3, [pc, #16]	@ (8010a40 <vPortSetupTimerInterrupt+0x34>)
 8010a30:	2207      	movs	r2, #7
 8010a32:	601a      	str	r2, [r3, #0]
}
 8010a34:	bf00      	nop
 8010a36:	46bd      	mov	sp, r7
 8010a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3c:	4770      	bx	lr
 8010a3e:	bf00      	nop
 8010a40:	e000e010 	.word	0xe000e010
 8010a44:	e000e018 	.word	0xe000e018
 8010a48:	20000000 	.word	0x20000000
 8010a4c:	10624dd3 	.word	0x10624dd3
 8010a50:	e000e014 	.word	0xe000e014

08010a54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010a54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010a64 <vPortEnableVFP+0x10>
 8010a58:	6801      	ldr	r1, [r0, #0]
 8010a5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010a5e:	6001      	str	r1, [r0, #0]
 8010a60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010a62:	bf00      	nop
 8010a64:	e000ed88 	.word	0xe000ed88

08010a68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010a68:	b480      	push	{r7}
 8010a6a:	b085      	sub	sp, #20
 8010a6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010a6e:	f3ef 8305 	mrs	r3, IPSR
 8010a72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	2b0f      	cmp	r3, #15
 8010a78:	d915      	bls.n	8010aa6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010a7a:	4a18      	ldr	r2, [pc, #96]	@ (8010adc <vPortValidateInterruptPriority+0x74>)
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	4413      	add	r3, r2
 8010a80:	781b      	ldrb	r3, [r3, #0]
 8010a82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010a84:	4b16      	ldr	r3, [pc, #88]	@ (8010ae0 <vPortValidateInterruptPriority+0x78>)
 8010a86:	781b      	ldrb	r3, [r3, #0]
 8010a88:	7afa      	ldrb	r2, [r7, #11]
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d20b      	bcs.n	8010aa6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8010a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a92:	f383 8811 	msr	BASEPRI, r3
 8010a96:	f3bf 8f6f 	isb	sy
 8010a9a:	f3bf 8f4f 	dsb	sy
 8010a9e:	607b      	str	r3, [r7, #4]
}
 8010aa0:	bf00      	nop
 8010aa2:	bf00      	nop
 8010aa4:	e7fd      	b.n	8010aa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8010ae4 <vPortValidateInterruptPriority+0x7c>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010aae:	4b0e      	ldr	r3, [pc, #56]	@ (8010ae8 <vPortValidateInterruptPriority+0x80>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	d90b      	bls.n	8010ace <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010aba:	f383 8811 	msr	BASEPRI, r3
 8010abe:	f3bf 8f6f 	isb	sy
 8010ac2:	f3bf 8f4f 	dsb	sy
 8010ac6:	603b      	str	r3, [r7, #0]
}
 8010ac8:	bf00      	nop
 8010aca:	bf00      	nop
 8010acc:	e7fd      	b.n	8010aca <vPortValidateInterruptPriority+0x62>
	}
 8010ace:	bf00      	nop
 8010ad0:	3714      	adds	r7, #20
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad8:	4770      	bx	lr
 8010ada:	bf00      	nop
 8010adc:	e000e3f0 	.word	0xe000e3f0
 8010ae0:	20001418 	.word	0x20001418
 8010ae4:	e000ed0c 	.word	0xe000ed0c
 8010ae8:	2000141c 	.word	0x2000141c

08010aec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b08a      	sub	sp, #40	@ 0x28
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010af4:	2300      	movs	r3, #0
 8010af6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010af8:	f7fe fbd8 	bl	800f2ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010afc:	4b5c      	ldr	r3, [pc, #368]	@ (8010c70 <pvPortMalloc+0x184>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d101      	bne.n	8010b08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010b04:	f000 f924 	bl	8010d50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010b08:	4b5a      	ldr	r3, [pc, #360]	@ (8010c74 <pvPortMalloc+0x188>)
 8010b0a:	681a      	ldr	r2, [r3, #0]
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	4013      	ands	r3, r2
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	f040 8095 	bne.w	8010c40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d01e      	beq.n	8010b5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8010b1c:	2208      	movs	r2, #8
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	4413      	add	r3, r2
 8010b22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f003 0307 	and.w	r3, r3, #7
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d015      	beq.n	8010b5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f023 0307 	bic.w	r3, r3, #7
 8010b34:	3308      	adds	r3, #8
 8010b36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f003 0307 	and.w	r3, r3, #7
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d00b      	beq.n	8010b5a <pvPortMalloc+0x6e>
	__asm volatile
 8010b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b46:	f383 8811 	msr	BASEPRI, r3
 8010b4a:	f3bf 8f6f 	isb	sy
 8010b4e:	f3bf 8f4f 	dsb	sy
 8010b52:	617b      	str	r3, [r7, #20]
}
 8010b54:	bf00      	nop
 8010b56:	bf00      	nop
 8010b58:	e7fd      	b.n	8010b56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d06f      	beq.n	8010c40 <pvPortMalloc+0x154>
 8010b60:	4b45      	ldr	r3, [pc, #276]	@ (8010c78 <pvPortMalloc+0x18c>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	687a      	ldr	r2, [r7, #4]
 8010b66:	429a      	cmp	r2, r3
 8010b68:	d86a      	bhi.n	8010c40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010b6a:	4b44      	ldr	r3, [pc, #272]	@ (8010c7c <pvPortMalloc+0x190>)
 8010b6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010b6e:	4b43      	ldr	r3, [pc, #268]	@ (8010c7c <pvPortMalloc+0x190>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010b74:	e004      	b.n	8010b80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b82:	685b      	ldr	r3, [r3, #4]
 8010b84:	687a      	ldr	r2, [r7, #4]
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d903      	bls.n	8010b92 <pvPortMalloc+0xa6>
 8010b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d1f1      	bne.n	8010b76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010b92:	4b37      	ldr	r3, [pc, #220]	@ (8010c70 <pvPortMalloc+0x184>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b98:	429a      	cmp	r2, r3
 8010b9a:	d051      	beq.n	8010c40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010b9c:	6a3b      	ldr	r3, [r7, #32]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	2208      	movs	r2, #8
 8010ba2:	4413      	add	r3, r2
 8010ba4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	6a3b      	ldr	r3, [r7, #32]
 8010bac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bb0:	685a      	ldr	r2, [r3, #4]
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	1ad2      	subs	r2, r2, r3
 8010bb6:	2308      	movs	r3, #8
 8010bb8:	005b      	lsls	r3, r3, #1
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d920      	bls.n	8010c00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	4413      	add	r3, r2
 8010bc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010bc6:	69bb      	ldr	r3, [r7, #24]
 8010bc8:	f003 0307 	and.w	r3, r3, #7
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d00b      	beq.n	8010be8 <pvPortMalloc+0xfc>
	__asm volatile
 8010bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bd4:	f383 8811 	msr	BASEPRI, r3
 8010bd8:	f3bf 8f6f 	isb	sy
 8010bdc:	f3bf 8f4f 	dsb	sy
 8010be0:	613b      	str	r3, [r7, #16]
}
 8010be2:	bf00      	nop
 8010be4:	bf00      	nop
 8010be6:	e7fd      	b.n	8010be4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bea:	685a      	ldr	r2, [r3, #4]
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	1ad2      	subs	r2, r2, r3
 8010bf0:	69bb      	ldr	r3, [r7, #24]
 8010bf2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bf6:	687a      	ldr	r2, [r7, #4]
 8010bf8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010bfa:	69b8      	ldr	r0, [r7, #24]
 8010bfc:	f000 f90a 	bl	8010e14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010c00:	4b1d      	ldr	r3, [pc, #116]	@ (8010c78 <pvPortMalloc+0x18c>)
 8010c02:	681a      	ldr	r2, [r3, #0]
 8010c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c06:	685b      	ldr	r3, [r3, #4]
 8010c08:	1ad3      	subs	r3, r2, r3
 8010c0a:	4a1b      	ldr	r2, [pc, #108]	@ (8010c78 <pvPortMalloc+0x18c>)
 8010c0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8010c78 <pvPortMalloc+0x18c>)
 8010c10:	681a      	ldr	r2, [r3, #0]
 8010c12:	4b1b      	ldr	r3, [pc, #108]	@ (8010c80 <pvPortMalloc+0x194>)
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d203      	bcs.n	8010c22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010c1a:	4b17      	ldr	r3, [pc, #92]	@ (8010c78 <pvPortMalloc+0x18c>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	4a18      	ldr	r2, [pc, #96]	@ (8010c80 <pvPortMalloc+0x194>)
 8010c20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c24:	685a      	ldr	r2, [r3, #4]
 8010c26:	4b13      	ldr	r3, [pc, #76]	@ (8010c74 <pvPortMalloc+0x188>)
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	431a      	orrs	r2, r3
 8010c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c32:	2200      	movs	r2, #0
 8010c34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010c36:	4b13      	ldr	r3, [pc, #76]	@ (8010c84 <pvPortMalloc+0x198>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	3301      	adds	r3, #1
 8010c3c:	4a11      	ldr	r2, [pc, #68]	@ (8010c84 <pvPortMalloc+0x198>)
 8010c3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010c40:	f7fe fb42 	bl	800f2c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010c44:	69fb      	ldr	r3, [r7, #28]
 8010c46:	f003 0307 	and.w	r3, r3, #7
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d00b      	beq.n	8010c66 <pvPortMalloc+0x17a>
	__asm volatile
 8010c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c52:	f383 8811 	msr	BASEPRI, r3
 8010c56:	f3bf 8f6f 	isb	sy
 8010c5a:	f3bf 8f4f 	dsb	sy
 8010c5e:	60fb      	str	r3, [r7, #12]
}
 8010c60:	bf00      	nop
 8010c62:	bf00      	nop
 8010c64:	e7fd      	b.n	8010c62 <pvPortMalloc+0x176>
	return pvReturn;
 8010c66:	69fb      	ldr	r3, [r7, #28]
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3728      	adds	r7, #40	@ 0x28
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}
 8010c70:	20005028 	.word	0x20005028
 8010c74:	2000503c 	.word	0x2000503c
 8010c78:	2000502c 	.word	0x2000502c
 8010c7c:	20005020 	.word	0x20005020
 8010c80:	20005030 	.word	0x20005030
 8010c84:	20005034 	.word	0x20005034

08010c88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b086      	sub	sp, #24
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d04f      	beq.n	8010d3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010c9a:	2308      	movs	r3, #8
 8010c9c:	425b      	negs	r3, r3
 8010c9e:	697a      	ldr	r2, [r7, #20]
 8010ca0:	4413      	add	r3, r2
 8010ca2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010ca8:	693b      	ldr	r3, [r7, #16]
 8010caa:	685a      	ldr	r2, [r3, #4]
 8010cac:	4b25      	ldr	r3, [pc, #148]	@ (8010d44 <vPortFree+0xbc>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	4013      	ands	r3, r2
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d10b      	bne.n	8010cce <vPortFree+0x46>
	__asm volatile
 8010cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cba:	f383 8811 	msr	BASEPRI, r3
 8010cbe:	f3bf 8f6f 	isb	sy
 8010cc2:	f3bf 8f4f 	dsb	sy
 8010cc6:	60fb      	str	r3, [r7, #12]
}
 8010cc8:	bf00      	nop
 8010cca:	bf00      	nop
 8010ccc:	e7fd      	b.n	8010cca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d00b      	beq.n	8010cee <vPortFree+0x66>
	__asm volatile
 8010cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cda:	f383 8811 	msr	BASEPRI, r3
 8010cde:	f3bf 8f6f 	isb	sy
 8010ce2:	f3bf 8f4f 	dsb	sy
 8010ce6:	60bb      	str	r3, [r7, #8]
}
 8010ce8:	bf00      	nop
 8010cea:	bf00      	nop
 8010cec:	e7fd      	b.n	8010cea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	685a      	ldr	r2, [r3, #4]
 8010cf2:	4b14      	ldr	r3, [pc, #80]	@ (8010d44 <vPortFree+0xbc>)
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	4013      	ands	r3, r2
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d01e      	beq.n	8010d3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010cfc:	693b      	ldr	r3, [r7, #16]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d11a      	bne.n	8010d3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010d04:	693b      	ldr	r3, [r7, #16]
 8010d06:	685a      	ldr	r2, [r3, #4]
 8010d08:	4b0e      	ldr	r3, [pc, #56]	@ (8010d44 <vPortFree+0xbc>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	43db      	mvns	r3, r3
 8010d0e:	401a      	ands	r2, r3
 8010d10:	693b      	ldr	r3, [r7, #16]
 8010d12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010d14:	f7fe faca 	bl	800f2ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010d18:	693b      	ldr	r3, [r7, #16]
 8010d1a:	685a      	ldr	r2, [r3, #4]
 8010d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8010d48 <vPortFree+0xc0>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	4413      	add	r3, r2
 8010d22:	4a09      	ldr	r2, [pc, #36]	@ (8010d48 <vPortFree+0xc0>)
 8010d24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010d26:	6938      	ldr	r0, [r7, #16]
 8010d28:	f000 f874 	bl	8010e14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010d2c:	4b07      	ldr	r3, [pc, #28]	@ (8010d4c <vPortFree+0xc4>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	3301      	adds	r3, #1
 8010d32:	4a06      	ldr	r2, [pc, #24]	@ (8010d4c <vPortFree+0xc4>)
 8010d34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010d36:	f7fe fac7 	bl	800f2c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010d3a:	bf00      	nop
 8010d3c:	3718      	adds	r7, #24
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	bd80      	pop	{r7, pc}
 8010d42:	bf00      	nop
 8010d44:	2000503c 	.word	0x2000503c
 8010d48:	2000502c 	.word	0x2000502c
 8010d4c:	20005038 	.word	0x20005038

08010d50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010d50:	b480      	push	{r7}
 8010d52:	b085      	sub	sp, #20
 8010d54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010d56:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8010d5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010d5c:	4b27      	ldr	r3, [pc, #156]	@ (8010dfc <prvHeapInit+0xac>)
 8010d5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	f003 0307 	and.w	r3, r3, #7
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d00c      	beq.n	8010d84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	3307      	adds	r3, #7
 8010d6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	f023 0307 	bic.w	r3, r3, #7
 8010d76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010d78:	68ba      	ldr	r2, [r7, #8]
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	1ad3      	subs	r3, r2, r3
 8010d7e:	4a1f      	ldr	r2, [pc, #124]	@ (8010dfc <prvHeapInit+0xac>)
 8010d80:	4413      	add	r3, r2
 8010d82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010d88:	4a1d      	ldr	r2, [pc, #116]	@ (8010e00 <prvHeapInit+0xb0>)
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8010e00 <prvHeapInit+0xb0>)
 8010d90:	2200      	movs	r2, #0
 8010d92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	68ba      	ldr	r2, [r7, #8]
 8010d98:	4413      	add	r3, r2
 8010d9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010d9c:	2208      	movs	r2, #8
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	1a9b      	subs	r3, r3, r2
 8010da2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	f023 0307 	bic.w	r3, r3, #7
 8010daa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	4a15      	ldr	r2, [pc, #84]	@ (8010e04 <prvHeapInit+0xb4>)
 8010db0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010db2:	4b14      	ldr	r3, [pc, #80]	@ (8010e04 <prvHeapInit+0xb4>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	2200      	movs	r2, #0
 8010db8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010dba:	4b12      	ldr	r3, [pc, #72]	@ (8010e04 <prvHeapInit+0xb4>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010dc6:	683b      	ldr	r3, [r7, #0]
 8010dc8:	68fa      	ldr	r2, [r7, #12]
 8010dca:	1ad2      	subs	r2, r2, r3
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8010e04 <prvHeapInit+0xb4>)
 8010dd2:	681a      	ldr	r2, [r3, #0]
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	685b      	ldr	r3, [r3, #4]
 8010ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8010e08 <prvHeapInit+0xb8>)
 8010dde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010de0:	683b      	ldr	r3, [r7, #0]
 8010de2:	685b      	ldr	r3, [r3, #4]
 8010de4:	4a09      	ldr	r2, [pc, #36]	@ (8010e0c <prvHeapInit+0xbc>)
 8010de6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010de8:	4b09      	ldr	r3, [pc, #36]	@ (8010e10 <prvHeapInit+0xc0>)
 8010dea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010dee:	601a      	str	r2, [r3, #0]
}
 8010df0:	bf00      	nop
 8010df2:	3714      	adds	r7, #20
 8010df4:	46bd      	mov	sp, r7
 8010df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfa:	4770      	bx	lr
 8010dfc:	20001420 	.word	0x20001420
 8010e00:	20005020 	.word	0x20005020
 8010e04:	20005028 	.word	0x20005028
 8010e08:	20005030 	.word	0x20005030
 8010e0c:	2000502c 	.word	0x2000502c
 8010e10:	2000503c 	.word	0x2000503c

08010e14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010e14:	b480      	push	{r7}
 8010e16:	b085      	sub	sp, #20
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010e1c:	4b28      	ldr	r3, [pc, #160]	@ (8010ec0 <prvInsertBlockIntoFreeList+0xac>)
 8010e1e:	60fb      	str	r3, [r7, #12]
 8010e20:	e002      	b.n	8010e28 <prvInsertBlockIntoFreeList+0x14>
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	60fb      	str	r3, [r7, #12]
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	687a      	ldr	r2, [r7, #4]
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	d8f7      	bhi.n	8010e22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	685b      	ldr	r3, [r3, #4]
 8010e3a:	68ba      	ldr	r2, [r7, #8]
 8010e3c:	4413      	add	r3, r2
 8010e3e:	687a      	ldr	r2, [r7, #4]
 8010e40:	429a      	cmp	r2, r3
 8010e42:	d108      	bne.n	8010e56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	685a      	ldr	r2, [r3, #4]
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	685b      	ldr	r3, [r3, #4]
 8010e4c:	441a      	add	r2, r3
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	685b      	ldr	r3, [r3, #4]
 8010e5e:	68ba      	ldr	r2, [r7, #8]
 8010e60:	441a      	add	r2, r3
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d118      	bne.n	8010e9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	681a      	ldr	r2, [r3, #0]
 8010e6e:	4b15      	ldr	r3, [pc, #84]	@ (8010ec4 <prvInsertBlockIntoFreeList+0xb0>)
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	429a      	cmp	r2, r3
 8010e74:	d00d      	beq.n	8010e92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	685a      	ldr	r2, [r3, #4]
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	685b      	ldr	r3, [r3, #4]
 8010e80:	441a      	add	r2, r3
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	681a      	ldr	r2, [r3, #0]
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	601a      	str	r2, [r3, #0]
 8010e90:	e008      	b.n	8010ea4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010e92:	4b0c      	ldr	r3, [pc, #48]	@ (8010ec4 <prvInsertBlockIntoFreeList+0xb0>)
 8010e94:	681a      	ldr	r2, [r3, #0]
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	601a      	str	r2, [r3, #0]
 8010e9a:	e003      	b.n	8010ea4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	681a      	ldr	r2, [r3, #0]
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010ea4:	68fa      	ldr	r2, [r7, #12]
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	429a      	cmp	r2, r3
 8010eaa:	d002      	beq.n	8010eb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	687a      	ldr	r2, [r7, #4]
 8010eb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010eb2:	bf00      	nop
 8010eb4:	3714      	adds	r7, #20
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebc:	4770      	bx	lr
 8010ebe:	bf00      	nop
 8010ec0:	20005020 	.word	0x20005020
 8010ec4:	20005028 	.word	0x20005028

08010ec8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010ecc:	2200      	movs	r2, #0
 8010ece:	4912      	ldr	r1, [pc, #72]	@ (8010f18 <MX_USB_DEVICE_Init+0x50>)
 8010ed0:	4812      	ldr	r0, [pc, #72]	@ (8010f1c <MX_USB_DEVICE_Init+0x54>)
 8010ed2:	f7fb f951 	bl	800c178 <USBD_Init>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d001      	beq.n	8010ee0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010edc:	f7f0 fa1c 	bl	8001318 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010ee0:	490f      	ldr	r1, [pc, #60]	@ (8010f20 <MX_USB_DEVICE_Init+0x58>)
 8010ee2:	480e      	ldr	r0, [pc, #56]	@ (8010f1c <MX_USB_DEVICE_Init+0x54>)
 8010ee4:	f7fb f978 	bl	800c1d8 <USBD_RegisterClass>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d001      	beq.n	8010ef2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010eee:	f7f0 fa13 	bl	8001318 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010ef2:	490c      	ldr	r1, [pc, #48]	@ (8010f24 <MX_USB_DEVICE_Init+0x5c>)
 8010ef4:	4809      	ldr	r0, [pc, #36]	@ (8010f1c <MX_USB_DEVICE_Init+0x54>)
 8010ef6:	f7fb f86f 	bl	800bfd8 <USBD_CDC_RegisterInterface>
 8010efa:	4603      	mov	r3, r0
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d001      	beq.n	8010f04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010f00:	f7f0 fa0a 	bl	8001318 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010f04:	4805      	ldr	r0, [pc, #20]	@ (8010f1c <MX_USB_DEVICE_Init+0x54>)
 8010f06:	f7fb f99d 	bl	800c244 <USBD_Start>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d001      	beq.n	8010f14 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010f10:	f7f0 fa02 	bl	8001318 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010f14:	bf00      	nop
 8010f16:	bd80      	pop	{r7, pc}
 8010f18:	200000c4 	.word	0x200000c4
 8010f1c:	20005040 	.word	0x20005040
 8010f20:	2000002c 	.word	0x2000002c
 8010f24:	200000b0 	.word	0x200000b0

08010f28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	4905      	ldr	r1, [pc, #20]	@ (8010f44 <CDC_Init_FS+0x1c>)
 8010f30:	4805      	ldr	r0, [pc, #20]	@ (8010f48 <CDC_Init_FS+0x20>)
 8010f32:	f7fb f86b 	bl	800c00c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010f36:	4905      	ldr	r1, [pc, #20]	@ (8010f4c <CDC_Init_FS+0x24>)
 8010f38:	4803      	ldr	r0, [pc, #12]	@ (8010f48 <CDC_Init_FS+0x20>)
 8010f3a:	f7fb f889 	bl	800c050 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010f3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010f40:	4618      	mov	r0, r3
 8010f42:	bd80      	pop	{r7, pc}
 8010f44:	20005b28 	.word	0x20005b28
 8010f48:	20005040 	.word	0x20005040
 8010f4c:	20005328 	.word	0x20005328

08010f50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010f50:	b480      	push	{r7}
 8010f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010f54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5e:	4770      	bx	lr

08010f60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010f60:	b480      	push	{r7}
 8010f62:	b083      	sub	sp, #12
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	4603      	mov	r3, r0
 8010f68:	6039      	str	r1, [r7, #0]
 8010f6a:	71fb      	strb	r3, [r7, #7]
 8010f6c:	4613      	mov	r3, r2
 8010f6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010f70:	79fb      	ldrb	r3, [r7, #7]
 8010f72:	2b23      	cmp	r3, #35	@ 0x23
 8010f74:	d84a      	bhi.n	801100c <CDC_Control_FS+0xac>
 8010f76:	a201      	add	r2, pc, #4	@ (adr r2, 8010f7c <CDC_Control_FS+0x1c>)
 8010f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f7c:	0801100d 	.word	0x0801100d
 8010f80:	0801100d 	.word	0x0801100d
 8010f84:	0801100d 	.word	0x0801100d
 8010f88:	0801100d 	.word	0x0801100d
 8010f8c:	0801100d 	.word	0x0801100d
 8010f90:	0801100d 	.word	0x0801100d
 8010f94:	0801100d 	.word	0x0801100d
 8010f98:	0801100d 	.word	0x0801100d
 8010f9c:	0801100d 	.word	0x0801100d
 8010fa0:	0801100d 	.word	0x0801100d
 8010fa4:	0801100d 	.word	0x0801100d
 8010fa8:	0801100d 	.word	0x0801100d
 8010fac:	0801100d 	.word	0x0801100d
 8010fb0:	0801100d 	.word	0x0801100d
 8010fb4:	0801100d 	.word	0x0801100d
 8010fb8:	0801100d 	.word	0x0801100d
 8010fbc:	0801100d 	.word	0x0801100d
 8010fc0:	0801100d 	.word	0x0801100d
 8010fc4:	0801100d 	.word	0x0801100d
 8010fc8:	0801100d 	.word	0x0801100d
 8010fcc:	0801100d 	.word	0x0801100d
 8010fd0:	0801100d 	.word	0x0801100d
 8010fd4:	0801100d 	.word	0x0801100d
 8010fd8:	0801100d 	.word	0x0801100d
 8010fdc:	0801100d 	.word	0x0801100d
 8010fe0:	0801100d 	.word	0x0801100d
 8010fe4:	0801100d 	.word	0x0801100d
 8010fe8:	0801100d 	.word	0x0801100d
 8010fec:	0801100d 	.word	0x0801100d
 8010ff0:	0801100d 	.word	0x0801100d
 8010ff4:	0801100d 	.word	0x0801100d
 8010ff8:	0801100d 	.word	0x0801100d
 8010ffc:	0801100d 	.word	0x0801100d
 8011000:	0801100d 	.word	0x0801100d
 8011004:	0801100d 	.word	0x0801100d
 8011008:	0801100d 	.word	0x0801100d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801100c:	bf00      	nop
  }

  return (USBD_OK);
 801100e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011010:	4618      	mov	r0, r3
 8011012:	370c      	adds	r7, #12
 8011014:	46bd      	mov	sp, r7
 8011016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101a:	4770      	bx	lr

0801101c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b082      	sub	sp, #8
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
 8011024:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011026:	6879      	ldr	r1, [r7, #4]
 8011028:	481a      	ldr	r0, [pc, #104]	@ (8011094 <CDC_Receive_FS+0x78>)
 801102a:	f7fb f811 	bl	800c050 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801102e:	4819      	ldr	r0, [pc, #100]	@ (8011094 <CDC_Receive_FS+0x78>)
 8011030:	f7fb f86c 	bl	800c10c <USBD_CDC_ReceivePacket>

  if(Buf[0] == '\r') {
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	781b      	ldrb	r3, [r3, #0]
 8011038:	2b0d      	cmp	r3, #13
 801103a:	d112      	bne.n	8011062 <CDC_Receive_FS+0x46>
	  memcpy(usb_rx_buffer.buffer, _buffer.buffer, sizeof(usb_rx_buffer.buffer));
 801103c:	4a16      	ldr	r2, [pc, #88]	@ (8011098 <CDC_Receive_FS+0x7c>)
 801103e:	4b17      	ldr	r3, [pc, #92]	@ (801109c <CDC_Receive_FS+0x80>)
 8011040:	cb03      	ldmia	r3!, {r0, r1}
 8011042:	6010      	str	r0, [r2, #0]
 8011044:	6051      	str	r1, [r2, #4]
	  memset(_buffer.buffer, 0, RECEIVED_USB);
 8011046:	4b15      	ldr	r3, [pc, #84]	@ (801109c <CDC_Receive_FS+0x80>)
 8011048:	2200      	movs	r2, #0
 801104a:	701a      	strb	r2, [r3, #0]
	  _buffer.pos = 0;
 801104c:	4b13      	ldr	r3, [pc, #76]	@ (801109c <CDC_Receive_FS+0x80>)
 801104e:	2200      	movs	r2, #0
 8011050:	811a      	strh	r2, [r3, #8]
	  osEventFlagsSet(EventReceivedHandle, RECEIVED_USB);
 8011052:	4b13      	ldr	r3, [pc, #76]	@ (80110a0 <CDC_Receive_FS+0x84>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	2101      	movs	r1, #1
 8011058:	4618      	mov	r0, r3
 801105a:	f7fc fe43 	bl	800dce4 <osEventFlagsSet>
	  return (USBD_OK);
 801105e:	2300      	movs	r3, #0
 8011060:	e014      	b.n	801108c <CDC_Receive_FS+0x70>
  }

  _buffer.buffer[_buffer.pos++] = Buf[0];
 8011062:	4b0e      	ldr	r3, [pc, #56]	@ (801109c <CDC_Receive_FS+0x80>)
 8011064:	891b      	ldrh	r3, [r3, #8]
 8011066:	b29b      	uxth	r3, r3
 8011068:	1c5a      	adds	r2, r3, #1
 801106a:	b291      	uxth	r1, r2
 801106c:	4a0b      	ldr	r2, [pc, #44]	@ (801109c <CDC_Receive_FS+0x80>)
 801106e:	8111      	strh	r1, [r2, #8]
 8011070:	461a      	mov	r2, r3
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	7819      	ldrb	r1, [r3, #0]
 8011076:	4b09      	ldr	r3, [pc, #36]	@ (801109c <CDC_Receive_FS+0x80>)
 8011078:	5499      	strb	r1, [r3, r2]
    if(_buffer.pos > USB_BUFFER_SIZE)
 801107a:	4b08      	ldr	r3, [pc, #32]	@ (801109c <CDC_Receive_FS+0x80>)
 801107c:	891b      	ldrh	r3, [r3, #8]
 801107e:	b29b      	uxth	r3, r3
 8011080:	2b08      	cmp	r3, #8
 8011082:	d902      	bls.n	801108a <CDC_Receive_FS+0x6e>
    {

    	  _buffer.pos = 0;
 8011084:	4b05      	ldr	r3, [pc, #20]	@ (801109c <CDC_Receive_FS+0x80>)
 8011086:	2200      	movs	r2, #0
 8011088:	811a      	strh	r2, [r3, #8]
    }




  return (USBD_OK);
 801108a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801108c:	4618      	mov	r0, r3
 801108e:	3708      	adds	r7, #8
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}
 8011094:	20005040 	.word	0x20005040
 8011098:	2000034c 	.word	0x2000034c
 801109c:	2000531c 	.word	0x2000531c
 80110a0:	20000330 	.word	0x20000330

080110a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b084      	sub	sp, #16
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
 80110ac:	460b      	mov	r3, r1
 80110ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80110b0:	2300      	movs	r3, #0
 80110b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80110b4:	4b0d      	ldr	r3, [pc, #52]	@ (80110ec <CDC_Transmit_FS+0x48>)
 80110b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80110ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80110bc:	68bb      	ldr	r3, [r7, #8]
 80110be:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d001      	beq.n	80110ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80110c6:	2301      	movs	r3, #1
 80110c8:	e00b      	b.n	80110e2 <CDC_Transmit_FS+0x3e>
  }

  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80110ca:	887b      	ldrh	r3, [r7, #2]
 80110cc:	461a      	mov	r2, r3
 80110ce:	6879      	ldr	r1, [r7, #4]
 80110d0:	4806      	ldr	r0, [pc, #24]	@ (80110ec <CDC_Transmit_FS+0x48>)
 80110d2:	f7fa ff9b 	bl	800c00c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80110d6:	4805      	ldr	r0, [pc, #20]	@ (80110ec <CDC_Transmit_FS+0x48>)
 80110d8:	f7fa ffd8 	bl	800c08c <USBD_CDC_TransmitPacket>
 80110dc:	4603      	mov	r3, r0
 80110de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80110e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3710      	adds	r7, #16
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}
 80110ea:	bf00      	nop
 80110ec:	20005040 	.word	0x20005040

080110f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80110f0:	b480      	push	{r7}
 80110f2:	b087      	sub	sp, #28
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	60f8      	str	r0, [r7, #12]
 80110f8:	60b9      	str	r1, [r7, #8]
 80110fa:	4613      	mov	r3, r2
 80110fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80110fe:	2300      	movs	r3, #0
 8011100:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011102:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011106:	4618      	mov	r0, r3
 8011108:	371c      	adds	r7, #28
 801110a:	46bd      	mov	sp, r7
 801110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011110:	4770      	bx	lr
	...

08011114 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011114:	b480      	push	{r7}
 8011116:	b083      	sub	sp, #12
 8011118:	af00      	add	r7, sp, #0
 801111a:	4603      	mov	r3, r0
 801111c:	6039      	str	r1, [r7, #0]
 801111e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011120:	683b      	ldr	r3, [r7, #0]
 8011122:	2212      	movs	r2, #18
 8011124:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011126:	4b03      	ldr	r3, [pc, #12]	@ (8011134 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011128:	4618      	mov	r0, r3
 801112a:	370c      	adds	r7, #12
 801112c:	46bd      	mov	sp, r7
 801112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011132:	4770      	bx	lr
 8011134:	200000e4 	.word	0x200000e4

08011138 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011138:	b480      	push	{r7}
 801113a:	b083      	sub	sp, #12
 801113c:	af00      	add	r7, sp, #0
 801113e:	4603      	mov	r3, r0
 8011140:	6039      	str	r1, [r7, #0]
 8011142:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011144:	683b      	ldr	r3, [r7, #0]
 8011146:	2204      	movs	r2, #4
 8011148:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801114a:	4b03      	ldr	r3, [pc, #12]	@ (8011158 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801114c:	4618      	mov	r0, r3
 801114e:	370c      	adds	r7, #12
 8011150:	46bd      	mov	sp, r7
 8011152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011156:	4770      	bx	lr
 8011158:	20000104 	.word	0x20000104

0801115c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b082      	sub	sp, #8
 8011160:	af00      	add	r7, sp, #0
 8011162:	4603      	mov	r3, r0
 8011164:	6039      	str	r1, [r7, #0]
 8011166:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011168:	79fb      	ldrb	r3, [r7, #7]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d105      	bne.n	801117a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801116e:	683a      	ldr	r2, [r7, #0]
 8011170:	4907      	ldr	r1, [pc, #28]	@ (8011190 <USBD_FS_ProductStrDescriptor+0x34>)
 8011172:	4808      	ldr	r0, [pc, #32]	@ (8011194 <USBD_FS_ProductStrDescriptor+0x38>)
 8011174:	f7fc fa40 	bl	800d5f8 <USBD_GetString>
 8011178:	e004      	b.n	8011184 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801117a:	683a      	ldr	r2, [r7, #0]
 801117c:	4904      	ldr	r1, [pc, #16]	@ (8011190 <USBD_FS_ProductStrDescriptor+0x34>)
 801117e:	4805      	ldr	r0, [pc, #20]	@ (8011194 <USBD_FS_ProductStrDescriptor+0x38>)
 8011180:	f7fc fa3a 	bl	800d5f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011184:	4b02      	ldr	r3, [pc, #8]	@ (8011190 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011186:	4618      	mov	r0, r3
 8011188:	3708      	adds	r7, #8
 801118a:	46bd      	mov	sp, r7
 801118c:	bd80      	pop	{r7, pc}
 801118e:	bf00      	nop
 8011190:	20006328 	.word	0x20006328
 8011194:	08014864 	.word	0x08014864

08011198 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b082      	sub	sp, #8
 801119c:	af00      	add	r7, sp, #0
 801119e:	4603      	mov	r3, r0
 80111a0:	6039      	str	r1, [r7, #0]
 80111a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80111a4:	683a      	ldr	r2, [r7, #0]
 80111a6:	4904      	ldr	r1, [pc, #16]	@ (80111b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80111a8:	4804      	ldr	r0, [pc, #16]	@ (80111bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80111aa:	f7fc fa25 	bl	800d5f8 <USBD_GetString>
  return USBD_StrDesc;
 80111ae:	4b02      	ldr	r3, [pc, #8]	@ (80111b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80111b0:	4618      	mov	r0, r3
 80111b2:	3708      	adds	r7, #8
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}
 80111b8:	20006328 	.word	0x20006328
 80111bc:	0801487c 	.word	0x0801487c

080111c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b082      	sub	sp, #8
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	4603      	mov	r3, r0
 80111c8:	6039      	str	r1, [r7, #0]
 80111ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	221a      	movs	r2, #26
 80111d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80111d2:	f000 f855 	bl	8011280 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80111d6:	4b02      	ldr	r3, [pc, #8]	@ (80111e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80111d8:	4618      	mov	r0, r3
 80111da:	3708      	adds	r7, #8
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}
 80111e0:	20000108 	.word	0x20000108

080111e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b082      	sub	sp, #8
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	4603      	mov	r3, r0
 80111ec:	6039      	str	r1, [r7, #0]
 80111ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80111f0:	79fb      	ldrb	r3, [r7, #7]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d105      	bne.n	8011202 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80111f6:	683a      	ldr	r2, [r7, #0]
 80111f8:	4907      	ldr	r1, [pc, #28]	@ (8011218 <USBD_FS_ConfigStrDescriptor+0x34>)
 80111fa:	4808      	ldr	r0, [pc, #32]	@ (801121c <USBD_FS_ConfigStrDescriptor+0x38>)
 80111fc:	f7fc f9fc 	bl	800d5f8 <USBD_GetString>
 8011200:	e004      	b.n	801120c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011202:	683a      	ldr	r2, [r7, #0]
 8011204:	4904      	ldr	r1, [pc, #16]	@ (8011218 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011206:	4805      	ldr	r0, [pc, #20]	@ (801121c <USBD_FS_ConfigStrDescriptor+0x38>)
 8011208:	f7fc f9f6 	bl	800d5f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801120c:	4b02      	ldr	r3, [pc, #8]	@ (8011218 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801120e:	4618      	mov	r0, r3
 8011210:	3708      	adds	r7, #8
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop
 8011218:	20006328 	.word	0x20006328
 801121c:	08014890 	.word	0x08014890

08011220 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b082      	sub	sp, #8
 8011224:	af00      	add	r7, sp, #0
 8011226:	4603      	mov	r3, r0
 8011228:	6039      	str	r1, [r7, #0]
 801122a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801122c:	79fb      	ldrb	r3, [r7, #7]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d105      	bne.n	801123e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011232:	683a      	ldr	r2, [r7, #0]
 8011234:	4907      	ldr	r1, [pc, #28]	@ (8011254 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011236:	4808      	ldr	r0, [pc, #32]	@ (8011258 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011238:	f7fc f9de 	bl	800d5f8 <USBD_GetString>
 801123c:	e004      	b.n	8011248 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801123e:	683a      	ldr	r2, [r7, #0]
 8011240:	4904      	ldr	r1, [pc, #16]	@ (8011254 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011242:	4805      	ldr	r0, [pc, #20]	@ (8011258 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011244:	f7fc f9d8 	bl	800d5f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011248:	4b02      	ldr	r3, [pc, #8]	@ (8011254 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801124a:	4618      	mov	r0, r3
 801124c:	3708      	adds	r7, #8
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}
 8011252:	bf00      	nop
 8011254:	20006328 	.word	0x20006328
 8011258:	0801489c 	.word	0x0801489c

0801125c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801125c:	b480      	push	{r7}
 801125e:	b083      	sub	sp, #12
 8011260:	af00      	add	r7, sp, #0
 8011262:	4603      	mov	r3, r0
 8011264:	6039      	str	r1, [r7, #0]
 8011266:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	220c      	movs	r2, #12
 801126c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801126e:	4b03      	ldr	r3, [pc, #12]	@ (801127c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8011270:	4618      	mov	r0, r3
 8011272:	370c      	adds	r7, #12
 8011274:	46bd      	mov	sp, r7
 8011276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127a:	4770      	bx	lr
 801127c:	200000f8 	.word	0x200000f8

08011280 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b084      	sub	sp, #16
 8011284:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8011286:	68fa      	ldr	r2, [r7, #12]
 8011288:	68bb      	ldr	r3, [r7, #8]
 801128a:	4413      	add	r3, r2
 801128c:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d009      	beq.n	80112a8 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011294:	2208      	movs	r2, #8
 8011296:	4906      	ldr	r1, [pc, #24]	@ (80112b0 <Get_SerialNum+0x30>)
 8011298:	68f8      	ldr	r0, [r7, #12]
 801129a:	f000 f80d 	bl	80112b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801129e:	2204      	movs	r2, #4
 80112a0:	4904      	ldr	r1, [pc, #16]	@ (80112b4 <Get_SerialNum+0x34>)
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	f000 f808 	bl	80112b8 <IntToUnicode>
  }
}
 80112a8:	bf00      	nop
 80112aa:	3710      	adds	r7, #16
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}
 80112b0:	2000010a 	.word	0x2000010a
 80112b4:	2000011a 	.word	0x2000011a

080112b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80112b8:	b480      	push	{r7}
 80112ba:	b087      	sub	sp, #28
 80112bc:	af00      	add	r7, sp, #0
 80112be:	60f8      	str	r0, [r7, #12]
 80112c0:	60b9      	str	r1, [r7, #8]
 80112c2:	4613      	mov	r3, r2
 80112c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80112c6:	2300      	movs	r3, #0
 80112c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80112ca:	2300      	movs	r3, #0
 80112cc:	75fb      	strb	r3, [r7, #23]
 80112ce:	e027      	b.n	8011320 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	0f1b      	lsrs	r3, r3, #28
 80112d4:	2b09      	cmp	r3, #9
 80112d6:	d80b      	bhi.n	80112f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	0f1b      	lsrs	r3, r3, #28
 80112dc:	b2da      	uxtb	r2, r3
 80112de:	7dfb      	ldrb	r3, [r7, #23]
 80112e0:	005b      	lsls	r3, r3, #1
 80112e2:	4619      	mov	r1, r3
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	440b      	add	r3, r1
 80112e8:	3230      	adds	r2, #48	@ 0x30
 80112ea:	b2d2      	uxtb	r2, r2
 80112ec:	701a      	strb	r2, [r3, #0]
 80112ee:	e00a      	b.n	8011306 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	0f1b      	lsrs	r3, r3, #28
 80112f4:	b2da      	uxtb	r2, r3
 80112f6:	7dfb      	ldrb	r3, [r7, #23]
 80112f8:	005b      	lsls	r3, r3, #1
 80112fa:	4619      	mov	r1, r3
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	440b      	add	r3, r1
 8011300:	3237      	adds	r2, #55	@ 0x37
 8011302:	b2d2      	uxtb	r2, r2
 8011304:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	011b      	lsls	r3, r3, #4
 801130a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801130c:	7dfb      	ldrb	r3, [r7, #23]
 801130e:	005b      	lsls	r3, r3, #1
 8011310:	3301      	adds	r3, #1
 8011312:	68ba      	ldr	r2, [r7, #8]
 8011314:	4413      	add	r3, r2
 8011316:	2200      	movs	r2, #0
 8011318:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801131a:	7dfb      	ldrb	r3, [r7, #23]
 801131c:	3301      	adds	r3, #1
 801131e:	75fb      	strb	r3, [r7, #23]
 8011320:	7dfa      	ldrb	r2, [r7, #23]
 8011322:	79fb      	ldrb	r3, [r7, #7]
 8011324:	429a      	cmp	r2, r3
 8011326:	d3d3      	bcc.n	80112d0 <IntToUnicode+0x18>
  }
}
 8011328:	bf00      	nop
 801132a:	bf00      	nop
 801132c:	371c      	adds	r7, #28
 801132e:	46bd      	mov	sp, r7
 8011330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011334:	4770      	bx	lr
	...

08011338 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b0a0      	sub	sp, #128	@ 0x80
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011340:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8011344:	2200      	movs	r2, #0
 8011346:	601a      	str	r2, [r3, #0]
 8011348:	605a      	str	r2, [r3, #4]
 801134a:	609a      	str	r2, [r3, #8]
 801134c:	60da      	str	r2, [r3, #12]
 801134e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011350:	f107 0310 	add.w	r3, r7, #16
 8011354:	225c      	movs	r2, #92	@ 0x5c
 8011356:	2100      	movs	r1, #0
 8011358:	4618      	mov	r0, r3
 801135a:	f001 fa87 	bl	801286c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011366:	d149      	bne.n	80113fc <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8011368:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801136c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 801136e:	2300      	movs	r3, #0
 8011370:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011372:	f107 0310 	add.w	r3, r7, #16
 8011376:	4618      	mov	r0, r3
 8011378:	f7f5 fbf0 	bl	8006b5c <HAL_RCCEx_PeriphCLKConfig>
 801137c:	4603      	mov	r3, r0
 801137e:	2b00      	cmp	r3, #0
 8011380:	d001      	beq.n	8011386 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8011382:	f7ef ffc9 	bl	8001318 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011386:	2300      	movs	r3, #0
 8011388:	60fb      	str	r3, [r7, #12]
 801138a:	4b1e      	ldr	r3, [pc, #120]	@ (8011404 <HAL_PCD_MspInit+0xcc>)
 801138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801138e:	4a1d      	ldr	r2, [pc, #116]	@ (8011404 <HAL_PCD_MspInit+0xcc>)
 8011390:	f043 0301 	orr.w	r3, r3, #1
 8011394:	6313      	str	r3, [r2, #48]	@ 0x30
 8011396:	4b1b      	ldr	r3, [pc, #108]	@ (8011404 <HAL_PCD_MspInit+0xcc>)
 8011398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801139a:	f003 0301 	and.w	r3, r3, #1
 801139e:	60fb      	str	r3, [r7, #12]
 80113a0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80113a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80113a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113a8:	2302      	movs	r3, #2
 80113aa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113ac:	2300      	movs	r3, #0
 80113ae:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80113b0:	2303      	movs	r3, #3
 80113b2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80113b4:	230a      	movs	r3, #10
 80113b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80113b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80113bc:	4619      	mov	r1, r3
 80113be:	4812      	ldr	r0, [pc, #72]	@ (8011408 <HAL_PCD_MspInit+0xd0>)
 80113c0:	f7f2 f95e 	bl	8003680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80113c4:	4b0f      	ldr	r3, [pc, #60]	@ (8011404 <HAL_PCD_MspInit+0xcc>)
 80113c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113c8:	4a0e      	ldr	r2, [pc, #56]	@ (8011404 <HAL_PCD_MspInit+0xcc>)
 80113ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80113ce:	6353      	str	r3, [r2, #52]	@ 0x34
 80113d0:	2300      	movs	r3, #0
 80113d2:	60bb      	str	r3, [r7, #8]
 80113d4:	4b0b      	ldr	r3, [pc, #44]	@ (8011404 <HAL_PCD_MspInit+0xcc>)
 80113d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80113d8:	4a0a      	ldr	r2, [pc, #40]	@ (8011404 <HAL_PCD_MspInit+0xcc>)
 80113da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80113de:	6453      	str	r3, [r2, #68]	@ 0x44
 80113e0:	4b08      	ldr	r3, [pc, #32]	@ (8011404 <HAL_PCD_MspInit+0xcc>)
 80113e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80113e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80113e8:	60bb      	str	r3, [r7, #8]
 80113ea:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80113ec:	2200      	movs	r2, #0
 80113ee:	2105      	movs	r1, #5
 80113f0:	2043      	movs	r0, #67	@ 0x43
 80113f2:	f7f2 f889 	bl	8003508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80113f6:	2043      	movs	r0, #67	@ 0x43
 80113f8:	f7f2 f8a2 	bl	8003540 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80113fc:	bf00      	nop
 80113fe:	3780      	adds	r7, #128	@ 0x80
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}
 8011404:	40023800 	.word	0x40023800
 8011408:	40020000 	.word	0x40020000

0801140c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b082      	sub	sp, #8
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8011420:	4619      	mov	r1, r3
 8011422:	4610      	mov	r0, r2
 8011424:	f7fa ff5b 	bl	800c2de <USBD_LL_SetupStage>
}
 8011428:	bf00      	nop
 801142a:	3708      	adds	r7, #8
 801142c:	46bd      	mov	sp, r7
 801142e:	bd80      	pop	{r7, pc}

08011430 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b082      	sub	sp, #8
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	460b      	mov	r3, r1
 801143a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011442:	78fa      	ldrb	r2, [r7, #3]
 8011444:	6879      	ldr	r1, [r7, #4]
 8011446:	4613      	mov	r3, r2
 8011448:	00db      	lsls	r3, r3, #3
 801144a:	4413      	add	r3, r2
 801144c:	009b      	lsls	r3, r3, #2
 801144e:	440b      	add	r3, r1
 8011450:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011454:	681a      	ldr	r2, [r3, #0]
 8011456:	78fb      	ldrb	r3, [r7, #3]
 8011458:	4619      	mov	r1, r3
 801145a:	f7fa ff95 	bl	800c388 <USBD_LL_DataOutStage>
}
 801145e:	bf00      	nop
 8011460:	3708      	adds	r7, #8
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}

08011466 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011466:	b580      	push	{r7, lr}
 8011468:	b082      	sub	sp, #8
 801146a:	af00      	add	r7, sp, #0
 801146c:	6078      	str	r0, [r7, #4]
 801146e:	460b      	mov	r3, r1
 8011470:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011478:	78fa      	ldrb	r2, [r7, #3]
 801147a:	6879      	ldr	r1, [r7, #4]
 801147c:	4613      	mov	r3, r2
 801147e:	00db      	lsls	r3, r3, #3
 8011480:	4413      	add	r3, r2
 8011482:	009b      	lsls	r3, r3, #2
 8011484:	440b      	add	r3, r1
 8011486:	3320      	adds	r3, #32
 8011488:	681a      	ldr	r2, [r3, #0]
 801148a:	78fb      	ldrb	r3, [r7, #3]
 801148c:	4619      	mov	r1, r3
 801148e:	f7fb f82e 	bl	800c4ee <USBD_LL_DataInStage>
}
 8011492:	bf00      	nop
 8011494:	3708      	adds	r7, #8
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}

0801149a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801149a:	b580      	push	{r7, lr}
 801149c:	b082      	sub	sp, #8
 801149e:	af00      	add	r7, sp, #0
 80114a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80114a8:	4618      	mov	r0, r3
 80114aa:	f7fb f968 	bl	800c77e <USBD_LL_SOF>
}
 80114ae:	bf00      	nop
 80114b0:	3708      	adds	r7, #8
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}

080114b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80114b6:	b580      	push	{r7, lr}
 80114b8:	b084      	sub	sp, #16
 80114ba:	af00      	add	r7, sp, #0
 80114bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80114be:	2301      	movs	r3, #1
 80114c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	79db      	ldrb	r3, [r3, #7]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d102      	bne.n	80114d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80114ca:	2300      	movs	r3, #0
 80114cc:	73fb      	strb	r3, [r7, #15]
 80114ce:	e008      	b.n	80114e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	79db      	ldrb	r3, [r3, #7]
 80114d4:	2b02      	cmp	r3, #2
 80114d6:	d102      	bne.n	80114de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80114d8:	2301      	movs	r3, #1
 80114da:	73fb      	strb	r3, [r7, #15]
 80114dc:	e001      	b.n	80114e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80114de:	f7ef ff1b 	bl	8001318 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80114e8:	7bfa      	ldrb	r2, [r7, #15]
 80114ea:	4611      	mov	r1, r2
 80114ec:	4618      	mov	r0, r3
 80114ee:	f7fb f902 	bl	800c6f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80114f8:	4618      	mov	r0, r3
 80114fa:	f7fb f8aa 	bl	800c652 <USBD_LL_Reset>
}
 80114fe:	bf00      	nop
 8011500:	3710      	adds	r7, #16
 8011502:	46bd      	mov	sp, r7
 8011504:	bd80      	pop	{r7, pc}
	...

08011508 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b082      	sub	sp, #8
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011516:	4618      	mov	r0, r3
 8011518:	f7fb f8fd 	bl	800c716 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	687a      	ldr	r2, [r7, #4]
 8011528:	6812      	ldr	r2, [r2, #0]
 801152a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801152e:	f043 0301 	orr.w	r3, r3, #1
 8011532:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	7adb      	ldrb	r3, [r3, #11]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d005      	beq.n	8011548 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801153c:	4b04      	ldr	r3, [pc, #16]	@ (8011550 <HAL_PCD_SuspendCallback+0x48>)
 801153e:	691b      	ldr	r3, [r3, #16]
 8011540:	4a03      	ldr	r2, [pc, #12]	@ (8011550 <HAL_PCD_SuspendCallback+0x48>)
 8011542:	f043 0306 	orr.w	r3, r3, #6
 8011546:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011548:	bf00      	nop
 801154a:	3708      	adds	r7, #8
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}
 8011550:	e000ed00 	.word	0xe000ed00

08011554 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b082      	sub	sp, #8
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011562:	4618      	mov	r0, r3
 8011564:	f7fb f8f3 	bl	800c74e <USBD_LL_Resume>
}
 8011568:	bf00      	nop
 801156a:	3708      	adds	r7, #8
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}

08011570 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b082      	sub	sp, #8
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
 8011578:	460b      	mov	r3, r1
 801157a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011582:	78fa      	ldrb	r2, [r7, #3]
 8011584:	4611      	mov	r1, r2
 8011586:	4618      	mov	r0, r3
 8011588:	f7fb f94b 	bl	800c822 <USBD_LL_IsoOUTIncomplete>
}
 801158c:	bf00      	nop
 801158e:	3708      	adds	r7, #8
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}

08011594 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b082      	sub	sp, #8
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
 801159c:	460b      	mov	r3, r1
 801159e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80115a6:	78fa      	ldrb	r2, [r7, #3]
 80115a8:	4611      	mov	r1, r2
 80115aa:	4618      	mov	r0, r3
 80115ac:	f7fb f907 	bl	800c7be <USBD_LL_IsoINIncomplete>
}
 80115b0:	bf00      	nop
 80115b2:	3708      	adds	r7, #8
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}

080115b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b082      	sub	sp, #8
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7fb f95d 	bl	800c886 <USBD_LL_DevConnected>
}
 80115cc:	bf00      	nop
 80115ce:	3708      	adds	r7, #8
 80115d0:	46bd      	mov	sp, r7
 80115d2:	bd80      	pop	{r7, pc}

080115d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b082      	sub	sp, #8
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7fb f95a 	bl	800c89c <USBD_LL_DevDisconnected>
}
 80115e8:	bf00      	nop
 80115ea:	3708      	adds	r7, #8
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}

080115f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b082      	sub	sp, #8
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	781b      	ldrb	r3, [r3, #0]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d13c      	bne.n	801167a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011600:	4a20      	ldr	r2, [pc, #128]	@ (8011684 <USBD_LL_Init+0x94>)
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	4a1e      	ldr	r2, [pc, #120]	@ (8011684 <USBD_LL_Init+0x94>)
 801160c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011610:	4b1c      	ldr	r3, [pc, #112]	@ (8011684 <USBD_LL_Init+0x94>)
 8011612:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8011616:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8011618:	4b1a      	ldr	r3, [pc, #104]	@ (8011684 <USBD_LL_Init+0x94>)
 801161a:	2206      	movs	r2, #6
 801161c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801161e:	4b19      	ldr	r3, [pc, #100]	@ (8011684 <USBD_LL_Init+0x94>)
 8011620:	2202      	movs	r2, #2
 8011622:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011624:	4b17      	ldr	r3, [pc, #92]	@ (8011684 <USBD_LL_Init+0x94>)
 8011626:	2200      	movs	r2, #0
 8011628:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801162a:	4b16      	ldr	r3, [pc, #88]	@ (8011684 <USBD_LL_Init+0x94>)
 801162c:	2202      	movs	r2, #2
 801162e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011630:	4b14      	ldr	r3, [pc, #80]	@ (8011684 <USBD_LL_Init+0x94>)
 8011632:	2200      	movs	r2, #0
 8011634:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011636:	4b13      	ldr	r3, [pc, #76]	@ (8011684 <USBD_LL_Init+0x94>)
 8011638:	2200      	movs	r2, #0
 801163a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801163c:	4b11      	ldr	r3, [pc, #68]	@ (8011684 <USBD_LL_Init+0x94>)
 801163e:	2200      	movs	r2, #0
 8011640:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011642:	4b10      	ldr	r3, [pc, #64]	@ (8011684 <USBD_LL_Init+0x94>)
 8011644:	2200      	movs	r2, #0
 8011646:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011648:	4b0e      	ldr	r3, [pc, #56]	@ (8011684 <USBD_LL_Init+0x94>)
 801164a:	2200      	movs	r2, #0
 801164c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801164e:	480d      	ldr	r0, [pc, #52]	@ (8011684 <USBD_LL_Init+0x94>)
 8011650:	f7f3 fe9c 	bl	800538c <HAL_PCD_Init>
 8011654:	4603      	mov	r3, r0
 8011656:	2b00      	cmp	r3, #0
 8011658:	d001      	beq.n	801165e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801165a:	f7ef fe5d 	bl	8001318 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801165e:	2180      	movs	r1, #128	@ 0x80
 8011660:	4808      	ldr	r0, [pc, #32]	@ (8011684 <USBD_LL_Init+0x94>)
 8011662:	f7f5 f8fa 	bl	800685a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011666:	2240      	movs	r2, #64	@ 0x40
 8011668:	2100      	movs	r1, #0
 801166a:	4806      	ldr	r0, [pc, #24]	@ (8011684 <USBD_LL_Init+0x94>)
 801166c:	f7f5 f8ae 	bl	80067cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011670:	2280      	movs	r2, #128	@ 0x80
 8011672:	2101      	movs	r1, #1
 8011674:	4803      	ldr	r0, [pc, #12]	@ (8011684 <USBD_LL_Init+0x94>)
 8011676:	f7f5 f8a9 	bl	80067cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801167a:	2300      	movs	r3, #0
}
 801167c:	4618      	mov	r0, r3
 801167e:	3708      	adds	r7, #8
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}
 8011684:	20006528 	.word	0x20006528

08011688 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b084      	sub	sp, #16
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011690:	2300      	movs	r3, #0
 8011692:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011694:	2300      	movs	r3, #0
 8011696:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801169e:	4618      	mov	r0, r3
 80116a0:	f7f3 ff8a 	bl	80055b8 <HAL_PCD_Start>
 80116a4:	4603      	mov	r3, r0
 80116a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116a8:	7bfb      	ldrb	r3, [r7, #15]
 80116aa:	4618      	mov	r0, r3
 80116ac:	f000 f990 	bl	80119d0 <USBD_Get_USB_Status>
 80116b0:	4603      	mov	r3, r0
 80116b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80116b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80116b6:	4618      	mov	r0, r3
 80116b8:	3710      	adds	r7, #16
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bd80      	pop	{r7, pc}

080116be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80116be:	b580      	push	{r7, lr}
 80116c0:	b084      	sub	sp, #16
 80116c2:	af00      	add	r7, sp, #0
 80116c4:	6078      	str	r0, [r7, #4]
 80116c6:	4608      	mov	r0, r1
 80116c8:	4611      	mov	r1, r2
 80116ca:	461a      	mov	r2, r3
 80116cc:	4603      	mov	r3, r0
 80116ce:	70fb      	strb	r3, [r7, #3]
 80116d0:	460b      	mov	r3, r1
 80116d2:	70bb      	strb	r3, [r7, #2]
 80116d4:	4613      	mov	r3, r2
 80116d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116d8:	2300      	movs	r3, #0
 80116da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80116dc:	2300      	movs	r3, #0
 80116de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80116e6:	78bb      	ldrb	r3, [r7, #2]
 80116e8:	883a      	ldrh	r2, [r7, #0]
 80116ea:	78f9      	ldrb	r1, [r7, #3]
 80116ec:	f7f4 fc8b 	bl	8006006 <HAL_PCD_EP_Open>
 80116f0:	4603      	mov	r3, r0
 80116f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116f4:	7bfb      	ldrb	r3, [r7, #15]
 80116f6:	4618      	mov	r0, r3
 80116f8:	f000 f96a 	bl	80119d0 <USBD_Get_USB_Status>
 80116fc:	4603      	mov	r3, r0
 80116fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011700:	7bbb      	ldrb	r3, [r7, #14]
}
 8011702:	4618      	mov	r0, r3
 8011704:	3710      	adds	r7, #16
 8011706:	46bd      	mov	sp, r7
 8011708:	bd80      	pop	{r7, pc}

0801170a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801170a:	b580      	push	{r7, lr}
 801170c:	b084      	sub	sp, #16
 801170e:	af00      	add	r7, sp, #0
 8011710:	6078      	str	r0, [r7, #4]
 8011712:	460b      	mov	r3, r1
 8011714:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011716:	2300      	movs	r3, #0
 8011718:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801171a:	2300      	movs	r3, #0
 801171c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011724:	78fa      	ldrb	r2, [r7, #3]
 8011726:	4611      	mov	r1, r2
 8011728:	4618      	mov	r0, r3
 801172a:	f7f4 fcd4 	bl	80060d6 <HAL_PCD_EP_Close>
 801172e:	4603      	mov	r3, r0
 8011730:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011732:	7bfb      	ldrb	r3, [r7, #15]
 8011734:	4618      	mov	r0, r3
 8011736:	f000 f94b 	bl	80119d0 <USBD_Get_USB_Status>
 801173a:	4603      	mov	r3, r0
 801173c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801173e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011740:	4618      	mov	r0, r3
 8011742:	3710      	adds	r7, #16
 8011744:	46bd      	mov	sp, r7
 8011746:	bd80      	pop	{r7, pc}

08011748 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b084      	sub	sp, #16
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
 8011750:	460b      	mov	r3, r1
 8011752:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011754:	2300      	movs	r3, #0
 8011756:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011758:	2300      	movs	r3, #0
 801175a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011762:	78fa      	ldrb	r2, [r7, #3]
 8011764:	4611      	mov	r1, r2
 8011766:	4618      	mov	r0, r3
 8011768:	f7f4 fd8c 	bl	8006284 <HAL_PCD_EP_SetStall>
 801176c:	4603      	mov	r3, r0
 801176e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011770:	7bfb      	ldrb	r3, [r7, #15]
 8011772:	4618      	mov	r0, r3
 8011774:	f000 f92c 	bl	80119d0 <USBD_Get_USB_Status>
 8011778:	4603      	mov	r3, r0
 801177a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801177c:	7bbb      	ldrb	r3, [r7, #14]
}
 801177e:	4618      	mov	r0, r3
 8011780:	3710      	adds	r7, #16
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}

08011786 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011786:	b580      	push	{r7, lr}
 8011788:	b084      	sub	sp, #16
 801178a:	af00      	add	r7, sp, #0
 801178c:	6078      	str	r0, [r7, #4]
 801178e:	460b      	mov	r3, r1
 8011790:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011792:	2300      	movs	r3, #0
 8011794:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011796:	2300      	movs	r3, #0
 8011798:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80117a0:	78fa      	ldrb	r2, [r7, #3]
 80117a2:	4611      	mov	r1, r2
 80117a4:	4618      	mov	r0, r3
 80117a6:	f7f4 fdd0 	bl	800634a <HAL_PCD_EP_ClrStall>
 80117aa:	4603      	mov	r3, r0
 80117ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80117ae:	7bfb      	ldrb	r3, [r7, #15]
 80117b0:	4618      	mov	r0, r3
 80117b2:	f000 f90d 	bl	80119d0 <USBD_Get_USB_Status>
 80117b6:	4603      	mov	r3, r0
 80117b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80117bc:	4618      	mov	r0, r3
 80117be:	3710      	adds	r7, #16
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}

080117c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80117c4:	b480      	push	{r7}
 80117c6:	b085      	sub	sp, #20
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	460b      	mov	r3, r1
 80117ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80117d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80117d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	da0b      	bge.n	80117f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80117e0:	78fb      	ldrb	r3, [r7, #3]
 80117e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80117e6:	68f9      	ldr	r1, [r7, #12]
 80117e8:	4613      	mov	r3, r2
 80117ea:	00db      	lsls	r3, r3, #3
 80117ec:	4413      	add	r3, r2
 80117ee:	009b      	lsls	r3, r3, #2
 80117f0:	440b      	add	r3, r1
 80117f2:	3316      	adds	r3, #22
 80117f4:	781b      	ldrb	r3, [r3, #0]
 80117f6:	e00b      	b.n	8011810 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80117f8:	78fb      	ldrb	r3, [r7, #3]
 80117fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80117fe:	68f9      	ldr	r1, [r7, #12]
 8011800:	4613      	mov	r3, r2
 8011802:	00db      	lsls	r3, r3, #3
 8011804:	4413      	add	r3, r2
 8011806:	009b      	lsls	r3, r3, #2
 8011808:	440b      	add	r3, r1
 801180a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801180e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011810:	4618      	mov	r0, r3
 8011812:	3714      	adds	r7, #20
 8011814:	46bd      	mov	sp, r7
 8011816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181a:	4770      	bx	lr

0801181c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b084      	sub	sp, #16
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
 8011824:	460b      	mov	r3, r1
 8011826:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011828:	2300      	movs	r3, #0
 801182a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801182c:	2300      	movs	r3, #0
 801182e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011836:	78fa      	ldrb	r2, [r7, #3]
 8011838:	4611      	mov	r1, r2
 801183a:	4618      	mov	r0, r3
 801183c:	f7f4 fbbf 	bl	8005fbe <HAL_PCD_SetAddress>
 8011840:	4603      	mov	r3, r0
 8011842:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011844:	7bfb      	ldrb	r3, [r7, #15]
 8011846:	4618      	mov	r0, r3
 8011848:	f000 f8c2 	bl	80119d0 <USBD_Get_USB_Status>
 801184c:	4603      	mov	r3, r0
 801184e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011850:	7bbb      	ldrb	r3, [r7, #14]
}
 8011852:	4618      	mov	r0, r3
 8011854:	3710      	adds	r7, #16
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}

0801185a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801185a:	b580      	push	{r7, lr}
 801185c:	b086      	sub	sp, #24
 801185e:	af00      	add	r7, sp, #0
 8011860:	60f8      	str	r0, [r7, #12]
 8011862:	607a      	str	r2, [r7, #4]
 8011864:	603b      	str	r3, [r7, #0]
 8011866:	460b      	mov	r3, r1
 8011868:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801186a:	2300      	movs	r3, #0
 801186c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801186e:	2300      	movs	r3, #0
 8011870:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011878:	7af9      	ldrb	r1, [r7, #11]
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	687a      	ldr	r2, [r7, #4]
 801187e:	f7f4 fcc7 	bl	8006210 <HAL_PCD_EP_Transmit>
 8011882:	4603      	mov	r3, r0
 8011884:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011886:	7dfb      	ldrb	r3, [r7, #23]
 8011888:	4618      	mov	r0, r3
 801188a:	f000 f8a1 	bl	80119d0 <USBD_Get_USB_Status>
 801188e:	4603      	mov	r3, r0
 8011890:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011892:	7dbb      	ldrb	r3, [r7, #22]
}
 8011894:	4618      	mov	r0, r3
 8011896:	3718      	adds	r7, #24
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}

0801189c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b086      	sub	sp, #24
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	60f8      	str	r0, [r7, #12]
 80118a4:	607a      	str	r2, [r7, #4]
 80118a6:	603b      	str	r3, [r7, #0]
 80118a8:	460b      	mov	r3, r1
 80118aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118ac:	2300      	movs	r3, #0
 80118ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118b0:	2300      	movs	r3, #0
 80118b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80118ba:	7af9      	ldrb	r1, [r7, #11]
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	687a      	ldr	r2, [r7, #4]
 80118c0:	f7f4 fc53 	bl	800616a <HAL_PCD_EP_Receive>
 80118c4:	4603      	mov	r3, r0
 80118c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80118c8:	7dfb      	ldrb	r3, [r7, #23]
 80118ca:	4618      	mov	r0, r3
 80118cc:	f000 f880 	bl	80119d0 <USBD_Get_USB_Status>
 80118d0:	4603      	mov	r3, r0
 80118d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80118d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80118d6:	4618      	mov	r0, r3
 80118d8:	3718      	adds	r7, #24
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}

080118de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80118de:	b580      	push	{r7, lr}
 80118e0:	b082      	sub	sp, #8
 80118e2:	af00      	add	r7, sp, #0
 80118e4:	6078      	str	r0, [r7, #4]
 80118e6:	460b      	mov	r3, r1
 80118e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80118f0:	78fa      	ldrb	r2, [r7, #3]
 80118f2:	4611      	mov	r1, r2
 80118f4:	4618      	mov	r0, r3
 80118f6:	f7f4 fc73 	bl	80061e0 <HAL_PCD_EP_GetRxCount>
 80118fa:	4603      	mov	r3, r0
}
 80118fc:	4618      	mov	r0, r3
 80118fe:	3708      	adds	r7, #8
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}

08011904 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b082      	sub	sp, #8
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
 801190c:	460b      	mov	r3, r1
 801190e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011910:	78fb      	ldrb	r3, [r7, #3]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d002      	beq.n	801191c <HAL_PCDEx_LPM_Callback+0x18>
 8011916:	2b01      	cmp	r3, #1
 8011918:	d01f      	beq.n	801195a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801191a:	e03b      	b.n	8011994 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	7adb      	ldrb	r3, [r3, #11]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d007      	beq.n	8011934 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8011924:	f7f0 f91a 	bl	8001b5c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011928:	4b1c      	ldr	r3, [pc, #112]	@ (801199c <HAL_PCDEx_LPM_Callback+0x98>)
 801192a:	691b      	ldr	r3, [r3, #16]
 801192c:	4a1b      	ldr	r2, [pc, #108]	@ (801199c <HAL_PCDEx_LPM_Callback+0x98>)
 801192e:	f023 0306 	bic.w	r3, r3, #6
 8011932:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	687a      	ldr	r2, [r7, #4]
 8011940:	6812      	ldr	r2, [r2, #0]
 8011942:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011946:	f023 0301 	bic.w	r3, r3, #1
 801194a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011952:	4618      	mov	r0, r3
 8011954:	f7fa fefb 	bl	800c74e <USBD_LL_Resume>
    break;
 8011958:	e01c      	b.n	8011994 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	687a      	ldr	r2, [r7, #4]
 8011966:	6812      	ldr	r2, [r2, #0]
 8011968:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801196c:	f043 0301 	orr.w	r3, r3, #1
 8011970:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011978:	4618      	mov	r0, r3
 801197a:	f7fa fecc 	bl	800c716 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	7adb      	ldrb	r3, [r3, #11]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d005      	beq.n	8011992 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011986:	4b05      	ldr	r3, [pc, #20]	@ (801199c <HAL_PCDEx_LPM_Callback+0x98>)
 8011988:	691b      	ldr	r3, [r3, #16]
 801198a:	4a04      	ldr	r2, [pc, #16]	@ (801199c <HAL_PCDEx_LPM_Callback+0x98>)
 801198c:	f043 0306 	orr.w	r3, r3, #6
 8011990:	6113      	str	r3, [r2, #16]
    break;
 8011992:	bf00      	nop
}
 8011994:	bf00      	nop
 8011996:	3708      	adds	r7, #8
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}
 801199c:	e000ed00 	.word	0xe000ed00

080119a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80119a0:	b480      	push	{r7}
 80119a2:	b083      	sub	sp, #12
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80119a8:	4b03      	ldr	r3, [pc, #12]	@ (80119b8 <USBD_static_malloc+0x18>)
}
 80119aa:	4618      	mov	r0, r3
 80119ac:	370c      	adds	r7, #12
 80119ae:	46bd      	mov	sp, r7
 80119b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b4:	4770      	bx	lr
 80119b6:	bf00      	nop
 80119b8:	20006a0c 	.word	0x20006a0c

080119bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80119bc:	b480      	push	{r7}
 80119be:	b083      	sub	sp, #12
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]

}
 80119c4:	bf00      	nop
 80119c6:	370c      	adds	r7, #12
 80119c8:	46bd      	mov	sp, r7
 80119ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ce:	4770      	bx	lr

080119d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80119d0:	b480      	push	{r7}
 80119d2:	b085      	sub	sp, #20
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	4603      	mov	r3, r0
 80119d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119da:	2300      	movs	r3, #0
 80119dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80119de:	79fb      	ldrb	r3, [r7, #7]
 80119e0:	2b03      	cmp	r3, #3
 80119e2:	d817      	bhi.n	8011a14 <USBD_Get_USB_Status+0x44>
 80119e4:	a201      	add	r2, pc, #4	@ (adr r2, 80119ec <USBD_Get_USB_Status+0x1c>)
 80119e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119ea:	bf00      	nop
 80119ec:	080119fd 	.word	0x080119fd
 80119f0:	08011a03 	.word	0x08011a03
 80119f4:	08011a09 	.word	0x08011a09
 80119f8:	08011a0f 	.word	0x08011a0f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80119fc:	2300      	movs	r3, #0
 80119fe:	73fb      	strb	r3, [r7, #15]
    break;
 8011a00:	e00b      	b.n	8011a1a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011a02:	2303      	movs	r3, #3
 8011a04:	73fb      	strb	r3, [r7, #15]
    break;
 8011a06:	e008      	b.n	8011a1a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011a08:	2301      	movs	r3, #1
 8011a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8011a0c:	e005      	b.n	8011a1a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011a0e:	2303      	movs	r3, #3
 8011a10:	73fb      	strb	r3, [r7, #15]
    break;
 8011a12:	e002      	b.n	8011a1a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011a14:	2303      	movs	r3, #3
 8011a16:	73fb      	strb	r3, [r7, #15]
    break;
 8011a18:	bf00      	nop
  }
  return usb_status;
 8011a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	3714      	adds	r7, #20
 8011a20:	46bd      	mov	sp, r7
 8011a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a26:	4770      	bx	lr

08011a28 <malloc>:
 8011a28:	4b02      	ldr	r3, [pc, #8]	@ (8011a34 <malloc+0xc>)
 8011a2a:	4601      	mov	r1, r0
 8011a2c:	6818      	ldr	r0, [r3, #0]
 8011a2e:	f000 b825 	b.w	8011a7c <_malloc_r>
 8011a32:	bf00      	nop
 8011a34:	20000130 	.word	0x20000130

08011a38 <sbrk_aligned>:
 8011a38:	b570      	push	{r4, r5, r6, lr}
 8011a3a:	4e0f      	ldr	r6, [pc, #60]	@ (8011a78 <sbrk_aligned+0x40>)
 8011a3c:	460c      	mov	r4, r1
 8011a3e:	6831      	ldr	r1, [r6, #0]
 8011a40:	4605      	mov	r5, r0
 8011a42:	b911      	cbnz	r1, 8011a4a <sbrk_aligned+0x12>
 8011a44:	f000 ffa8 	bl	8012998 <_sbrk_r>
 8011a48:	6030      	str	r0, [r6, #0]
 8011a4a:	4621      	mov	r1, r4
 8011a4c:	4628      	mov	r0, r5
 8011a4e:	f000 ffa3 	bl	8012998 <_sbrk_r>
 8011a52:	1c43      	adds	r3, r0, #1
 8011a54:	d103      	bne.n	8011a5e <sbrk_aligned+0x26>
 8011a56:	f04f 34ff 	mov.w	r4, #4294967295
 8011a5a:	4620      	mov	r0, r4
 8011a5c:	bd70      	pop	{r4, r5, r6, pc}
 8011a5e:	1cc4      	adds	r4, r0, #3
 8011a60:	f024 0403 	bic.w	r4, r4, #3
 8011a64:	42a0      	cmp	r0, r4
 8011a66:	d0f8      	beq.n	8011a5a <sbrk_aligned+0x22>
 8011a68:	1a21      	subs	r1, r4, r0
 8011a6a:	4628      	mov	r0, r5
 8011a6c:	f000 ff94 	bl	8012998 <_sbrk_r>
 8011a70:	3001      	adds	r0, #1
 8011a72:	d1f2      	bne.n	8011a5a <sbrk_aligned+0x22>
 8011a74:	e7ef      	b.n	8011a56 <sbrk_aligned+0x1e>
 8011a76:	bf00      	nop
 8011a78:	20006c2c 	.word	0x20006c2c

08011a7c <_malloc_r>:
 8011a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a80:	1ccd      	adds	r5, r1, #3
 8011a82:	f025 0503 	bic.w	r5, r5, #3
 8011a86:	3508      	adds	r5, #8
 8011a88:	2d0c      	cmp	r5, #12
 8011a8a:	bf38      	it	cc
 8011a8c:	250c      	movcc	r5, #12
 8011a8e:	2d00      	cmp	r5, #0
 8011a90:	4606      	mov	r6, r0
 8011a92:	db01      	blt.n	8011a98 <_malloc_r+0x1c>
 8011a94:	42a9      	cmp	r1, r5
 8011a96:	d904      	bls.n	8011aa2 <_malloc_r+0x26>
 8011a98:	230c      	movs	r3, #12
 8011a9a:	6033      	str	r3, [r6, #0]
 8011a9c:	2000      	movs	r0, #0
 8011a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011aa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011b78 <_malloc_r+0xfc>
 8011aa6:	f000 f869 	bl	8011b7c <__malloc_lock>
 8011aaa:	f8d8 3000 	ldr.w	r3, [r8]
 8011aae:	461c      	mov	r4, r3
 8011ab0:	bb44      	cbnz	r4, 8011b04 <_malloc_r+0x88>
 8011ab2:	4629      	mov	r1, r5
 8011ab4:	4630      	mov	r0, r6
 8011ab6:	f7ff ffbf 	bl	8011a38 <sbrk_aligned>
 8011aba:	1c43      	adds	r3, r0, #1
 8011abc:	4604      	mov	r4, r0
 8011abe:	d158      	bne.n	8011b72 <_malloc_r+0xf6>
 8011ac0:	f8d8 4000 	ldr.w	r4, [r8]
 8011ac4:	4627      	mov	r7, r4
 8011ac6:	2f00      	cmp	r7, #0
 8011ac8:	d143      	bne.n	8011b52 <_malloc_r+0xd6>
 8011aca:	2c00      	cmp	r4, #0
 8011acc:	d04b      	beq.n	8011b66 <_malloc_r+0xea>
 8011ace:	6823      	ldr	r3, [r4, #0]
 8011ad0:	4639      	mov	r1, r7
 8011ad2:	4630      	mov	r0, r6
 8011ad4:	eb04 0903 	add.w	r9, r4, r3
 8011ad8:	f000 ff5e 	bl	8012998 <_sbrk_r>
 8011adc:	4581      	cmp	r9, r0
 8011ade:	d142      	bne.n	8011b66 <_malloc_r+0xea>
 8011ae0:	6821      	ldr	r1, [r4, #0]
 8011ae2:	1a6d      	subs	r5, r5, r1
 8011ae4:	4629      	mov	r1, r5
 8011ae6:	4630      	mov	r0, r6
 8011ae8:	f7ff ffa6 	bl	8011a38 <sbrk_aligned>
 8011aec:	3001      	adds	r0, #1
 8011aee:	d03a      	beq.n	8011b66 <_malloc_r+0xea>
 8011af0:	6823      	ldr	r3, [r4, #0]
 8011af2:	442b      	add	r3, r5
 8011af4:	6023      	str	r3, [r4, #0]
 8011af6:	f8d8 3000 	ldr.w	r3, [r8]
 8011afa:	685a      	ldr	r2, [r3, #4]
 8011afc:	bb62      	cbnz	r2, 8011b58 <_malloc_r+0xdc>
 8011afe:	f8c8 7000 	str.w	r7, [r8]
 8011b02:	e00f      	b.n	8011b24 <_malloc_r+0xa8>
 8011b04:	6822      	ldr	r2, [r4, #0]
 8011b06:	1b52      	subs	r2, r2, r5
 8011b08:	d420      	bmi.n	8011b4c <_malloc_r+0xd0>
 8011b0a:	2a0b      	cmp	r2, #11
 8011b0c:	d917      	bls.n	8011b3e <_malloc_r+0xc2>
 8011b0e:	1961      	adds	r1, r4, r5
 8011b10:	42a3      	cmp	r3, r4
 8011b12:	6025      	str	r5, [r4, #0]
 8011b14:	bf18      	it	ne
 8011b16:	6059      	strne	r1, [r3, #4]
 8011b18:	6863      	ldr	r3, [r4, #4]
 8011b1a:	bf08      	it	eq
 8011b1c:	f8c8 1000 	streq.w	r1, [r8]
 8011b20:	5162      	str	r2, [r4, r5]
 8011b22:	604b      	str	r3, [r1, #4]
 8011b24:	4630      	mov	r0, r6
 8011b26:	f000 f82f 	bl	8011b88 <__malloc_unlock>
 8011b2a:	f104 000b 	add.w	r0, r4, #11
 8011b2e:	1d23      	adds	r3, r4, #4
 8011b30:	f020 0007 	bic.w	r0, r0, #7
 8011b34:	1ac2      	subs	r2, r0, r3
 8011b36:	bf1c      	itt	ne
 8011b38:	1a1b      	subne	r3, r3, r0
 8011b3a:	50a3      	strne	r3, [r4, r2]
 8011b3c:	e7af      	b.n	8011a9e <_malloc_r+0x22>
 8011b3e:	6862      	ldr	r2, [r4, #4]
 8011b40:	42a3      	cmp	r3, r4
 8011b42:	bf0c      	ite	eq
 8011b44:	f8c8 2000 	streq.w	r2, [r8]
 8011b48:	605a      	strne	r2, [r3, #4]
 8011b4a:	e7eb      	b.n	8011b24 <_malloc_r+0xa8>
 8011b4c:	4623      	mov	r3, r4
 8011b4e:	6864      	ldr	r4, [r4, #4]
 8011b50:	e7ae      	b.n	8011ab0 <_malloc_r+0x34>
 8011b52:	463c      	mov	r4, r7
 8011b54:	687f      	ldr	r7, [r7, #4]
 8011b56:	e7b6      	b.n	8011ac6 <_malloc_r+0x4a>
 8011b58:	461a      	mov	r2, r3
 8011b5a:	685b      	ldr	r3, [r3, #4]
 8011b5c:	42a3      	cmp	r3, r4
 8011b5e:	d1fb      	bne.n	8011b58 <_malloc_r+0xdc>
 8011b60:	2300      	movs	r3, #0
 8011b62:	6053      	str	r3, [r2, #4]
 8011b64:	e7de      	b.n	8011b24 <_malloc_r+0xa8>
 8011b66:	230c      	movs	r3, #12
 8011b68:	6033      	str	r3, [r6, #0]
 8011b6a:	4630      	mov	r0, r6
 8011b6c:	f000 f80c 	bl	8011b88 <__malloc_unlock>
 8011b70:	e794      	b.n	8011a9c <_malloc_r+0x20>
 8011b72:	6005      	str	r5, [r0, #0]
 8011b74:	e7d6      	b.n	8011b24 <_malloc_r+0xa8>
 8011b76:	bf00      	nop
 8011b78:	20006c30 	.word	0x20006c30

08011b7c <__malloc_lock>:
 8011b7c:	4801      	ldr	r0, [pc, #4]	@ (8011b84 <__malloc_lock+0x8>)
 8011b7e:	f7f1 b909 	b.w	8002d94 <__retarget_lock_acquire_recursive>
 8011b82:	bf00      	nop
 8011b84:	20000630 	.word	0x20000630

08011b88 <__malloc_unlock>:
 8011b88:	4801      	ldr	r0, [pc, #4]	@ (8011b90 <__malloc_unlock+0x8>)
 8011b8a:	f7f1 b918 	b.w	8002dbe <__retarget_lock_release_recursive>
 8011b8e:	bf00      	nop
 8011b90:	20000630 	.word	0x20000630

08011b94 <__cvt>:
 8011b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b98:	ec57 6b10 	vmov	r6, r7, d0
 8011b9c:	2f00      	cmp	r7, #0
 8011b9e:	460c      	mov	r4, r1
 8011ba0:	4619      	mov	r1, r3
 8011ba2:	463b      	mov	r3, r7
 8011ba4:	bfbb      	ittet	lt
 8011ba6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8011baa:	461f      	movlt	r7, r3
 8011bac:	2300      	movge	r3, #0
 8011bae:	232d      	movlt	r3, #45	@ 0x2d
 8011bb0:	700b      	strb	r3, [r1, #0]
 8011bb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011bb4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011bb8:	4691      	mov	r9, r2
 8011bba:	f023 0820 	bic.w	r8, r3, #32
 8011bbe:	bfbc      	itt	lt
 8011bc0:	4632      	movlt	r2, r6
 8011bc2:	4616      	movlt	r6, r2
 8011bc4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011bc8:	d005      	beq.n	8011bd6 <__cvt+0x42>
 8011bca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011bce:	d100      	bne.n	8011bd2 <__cvt+0x3e>
 8011bd0:	3401      	adds	r4, #1
 8011bd2:	2102      	movs	r1, #2
 8011bd4:	e000      	b.n	8011bd8 <__cvt+0x44>
 8011bd6:	2103      	movs	r1, #3
 8011bd8:	ab03      	add	r3, sp, #12
 8011bda:	9301      	str	r3, [sp, #4]
 8011bdc:	ab02      	add	r3, sp, #8
 8011bde:	9300      	str	r3, [sp, #0]
 8011be0:	ec47 6b10 	vmov	d0, r6, r7
 8011be4:	4653      	mov	r3, sl
 8011be6:	4622      	mov	r2, r4
 8011be8:	f000 ffba 	bl	8012b60 <_dtoa_r>
 8011bec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011bf0:	4605      	mov	r5, r0
 8011bf2:	d119      	bne.n	8011c28 <__cvt+0x94>
 8011bf4:	f019 0f01 	tst.w	r9, #1
 8011bf8:	d00e      	beq.n	8011c18 <__cvt+0x84>
 8011bfa:	eb00 0904 	add.w	r9, r0, r4
 8011bfe:	2200      	movs	r2, #0
 8011c00:	2300      	movs	r3, #0
 8011c02:	4630      	mov	r0, r6
 8011c04:	4639      	mov	r1, r7
 8011c06:	f7ee ff7f 	bl	8000b08 <__aeabi_dcmpeq>
 8011c0a:	b108      	cbz	r0, 8011c10 <__cvt+0x7c>
 8011c0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8011c10:	2230      	movs	r2, #48	@ 0x30
 8011c12:	9b03      	ldr	r3, [sp, #12]
 8011c14:	454b      	cmp	r3, r9
 8011c16:	d31e      	bcc.n	8011c56 <__cvt+0xc2>
 8011c18:	9b03      	ldr	r3, [sp, #12]
 8011c1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011c1c:	1b5b      	subs	r3, r3, r5
 8011c1e:	4628      	mov	r0, r5
 8011c20:	6013      	str	r3, [r2, #0]
 8011c22:	b004      	add	sp, #16
 8011c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011c2c:	eb00 0904 	add.w	r9, r0, r4
 8011c30:	d1e5      	bne.n	8011bfe <__cvt+0x6a>
 8011c32:	7803      	ldrb	r3, [r0, #0]
 8011c34:	2b30      	cmp	r3, #48	@ 0x30
 8011c36:	d10a      	bne.n	8011c4e <__cvt+0xba>
 8011c38:	2200      	movs	r2, #0
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	4630      	mov	r0, r6
 8011c3e:	4639      	mov	r1, r7
 8011c40:	f7ee ff62 	bl	8000b08 <__aeabi_dcmpeq>
 8011c44:	b918      	cbnz	r0, 8011c4e <__cvt+0xba>
 8011c46:	f1c4 0401 	rsb	r4, r4, #1
 8011c4a:	f8ca 4000 	str.w	r4, [sl]
 8011c4e:	f8da 3000 	ldr.w	r3, [sl]
 8011c52:	4499      	add	r9, r3
 8011c54:	e7d3      	b.n	8011bfe <__cvt+0x6a>
 8011c56:	1c59      	adds	r1, r3, #1
 8011c58:	9103      	str	r1, [sp, #12]
 8011c5a:	701a      	strb	r2, [r3, #0]
 8011c5c:	e7d9      	b.n	8011c12 <__cvt+0x7e>

08011c5e <__exponent>:
 8011c5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c60:	2900      	cmp	r1, #0
 8011c62:	bfba      	itte	lt
 8011c64:	4249      	neglt	r1, r1
 8011c66:	232d      	movlt	r3, #45	@ 0x2d
 8011c68:	232b      	movge	r3, #43	@ 0x2b
 8011c6a:	2909      	cmp	r1, #9
 8011c6c:	7002      	strb	r2, [r0, #0]
 8011c6e:	7043      	strb	r3, [r0, #1]
 8011c70:	dd29      	ble.n	8011cc6 <__exponent+0x68>
 8011c72:	f10d 0307 	add.w	r3, sp, #7
 8011c76:	461d      	mov	r5, r3
 8011c78:	270a      	movs	r7, #10
 8011c7a:	461a      	mov	r2, r3
 8011c7c:	fbb1 f6f7 	udiv	r6, r1, r7
 8011c80:	fb07 1416 	mls	r4, r7, r6, r1
 8011c84:	3430      	adds	r4, #48	@ 0x30
 8011c86:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011c8a:	460c      	mov	r4, r1
 8011c8c:	2c63      	cmp	r4, #99	@ 0x63
 8011c8e:	f103 33ff 	add.w	r3, r3, #4294967295
 8011c92:	4631      	mov	r1, r6
 8011c94:	dcf1      	bgt.n	8011c7a <__exponent+0x1c>
 8011c96:	3130      	adds	r1, #48	@ 0x30
 8011c98:	1e94      	subs	r4, r2, #2
 8011c9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011c9e:	1c41      	adds	r1, r0, #1
 8011ca0:	4623      	mov	r3, r4
 8011ca2:	42ab      	cmp	r3, r5
 8011ca4:	d30a      	bcc.n	8011cbc <__exponent+0x5e>
 8011ca6:	f10d 0309 	add.w	r3, sp, #9
 8011caa:	1a9b      	subs	r3, r3, r2
 8011cac:	42ac      	cmp	r4, r5
 8011cae:	bf88      	it	hi
 8011cb0:	2300      	movhi	r3, #0
 8011cb2:	3302      	adds	r3, #2
 8011cb4:	4403      	add	r3, r0
 8011cb6:	1a18      	subs	r0, r3, r0
 8011cb8:	b003      	add	sp, #12
 8011cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cbc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011cc0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011cc4:	e7ed      	b.n	8011ca2 <__exponent+0x44>
 8011cc6:	2330      	movs	r3, #48	@ 0x30
 8011cc8:	3130      	adds	r1, #48	@ 0x30
 8011cca:	7083      	strb	r3, [r0, #2]
 8011ccc:	70c1      	strb	r1, [r0, #3]
 8011cce:	1d03      	adds	r3, r0, #4
 8011cd0:	e7f1      	b.n	8011cb6 <__exponent+0x58>
	...

08011cd4 <_printf_float>:
 8011cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cd8:	b08d      	sub	sp, #52	@ 0x34
 8011cda:	460c      	mov	r4, r1
 8011cdc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011ce0:	4616      	mov	r6, r2
 8011ce2:	461f      	mov	r7, r3
 8011ce4:	4605      	mov	r5, r0
 8011ce6:	f000 fdc9 	bl	801287c <_localeconv_r>
 8011cea:	6803      	ldr	r3, [r0, #0]
 8011cec:	9304      	str	r3, [sp, #16]
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f7ee fade 	bl	80002b0 <strlen>
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8011cf8:	f8d8 3000 	ldr.w	r3, [r8]
 8011cfc:	9005      	str	r0, [sp, #20]
 8011cfe:	3307      	adds	r3, #7
 8011d00:	f023 0307 	bic.w	r3, r3, #7
 8011d04:	f103 0208 	add.w	r2, r3, #8
 8011d08:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011d0c:	f8d4 b000 	ldr.w	fp, [r4]
 8011d10:	f8c8 2000 	str.w	r2, [r8]
 8011d14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011d18:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011d1c:	9307      	str	r3, [sp, #28]
 8011d1e:	f8cd 8018 	str.w	r8, [sp, #24]
 8011d22:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011d26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011d2a:	4b9c      	ldr	r3, [pc, #624]	@ (8011f9c <_printf_float+0x2c8>)
 8011d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8011d30:	f7ee ff1c 	bl	8000b6c <__aeabi_dcmpun>
 8011d34:	bb70      	cbnz	r0, 8011d94 <_printf_float+0xc0>
 8011d36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011d3a:	4b98      	ldr	r3, [pc, #608]	@ (8011f9c <_printf_float+0x2c8>)
 8011d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8011d40:	f7ee fef6 	bl	8000b30 <__aeabi_dcmple>
 8011d44:	bb30      	cbnz	r0, 8011d94 <_printf_float+0xc0>
 8011d46:	2200      	movs	r2, #0
 8011d48:	2300      	movs	r3, #0
 8011d4a:	4640      	mov	r0, r8
 8011d4c:	4649      	mov	r1, r9
 8011d4e:	f7ee fee5 	bl	8000b1c <__aeabi_dcmplt>
 8011d52:	b110      	cbz	r0, 8011d5a <_printf_float+0x86>
 8011d54:	232d      	movs	r3, #45	@ 0x2d
 8011d56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011d5a:	4a91      	ldr	r2, [pc, #580]	@ (8011fa0 <_printf_float+0x2cc>)
 8011d5c:	4b91      	ldr	r3, [pc, #580]	@ (8011fa4 <_printf_float+0x2d0>)
 8011d5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011d62:	bf94      	ite	ls
 8011d64:	4690      	movls	r8, r2
 8011d66:	4698      	movhi	r8, r3
 8011d68:	2303      	movs	r3, #3
 8011d6a:	6123      	str	r3, [r4, #16]
 8011d6c:	f02b 0304 	bic.w	r3, fp, #4
 8011d70:	6023      	str	r3, [r4, #0]
 8011d72:	f04f 0900 	mov.w	r9, #0
 8011d76:	9700      	str	r7, [sp, #0]
 8011d78:	4633      	mov	r3, r6
 8011d7a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011d7c:	4621      	mov	r1, r4
 8011d7e:	4628      	mov	r0, r5
 8011d80:	f000 f9d2 	bl	8012128 <_printf_common>
 8011d84:	3001      	adds	r0, #1
 8011d86:	f040 808d 	bne.w	8011ea4 <_printf_float+0x1d0>
 8011d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8011d8e:	b00d      	add	sp, #52	@ 0x34
 8011d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d94:	4642      	mov	r2, r8
 8011d96:	464b      	mov	r3, r9
 8011d98:	4640      	mov	r0, r8
 8011d9a:	4649      	mov	r1, r9
 8011d9c:	f7ee fee6 	bl	8000b6c <__aeabi_dcmpun>
 8011da0:	b140      	cbz	r0, 8011db4 <_printf_float+0xe0>
 8011da2:	464b      	mov	r3, r9
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	bfbc      	itt	lt
 8011da8:	232d      	movlt	r3, #45	@ 0x2d
 8011daa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011dae:	4a7e      	ldr	r2, [pc, #504]	@ (8011fa8 <_printf_float+0x2d4>)
 8011db0:	4b7e      	ldr	r3, [pc, #504]	@ (8011fac <_printf_float+0x2d8>)
 8011db2:	e7d4      	b.n	8011d5e <_printf_float+0x8a>
 8011db4:	6863      	ldr	r3, [r4, #4]
 8011db6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011dba:	9206      	str	r2, [sp, #24]
 8011dbc:	1c5a      	adds	r2, r3, #1
 8011dbe:	d13b      	bne.n	8011e38 <_printf_float+0x164>
 8011dc0:	2306      	movs	r3, #6
 8011dc2:	6063      	str	r3, [r4, #4]
 8011dc4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011dc8:	2300      	movs	r3, #0
 8011dca:	6022      	str	r2, [r4, #0]
 8011dcc:	9303      	str	r3, [sp, #12]
 8011dce:	ab0a      	add	r3, sp, #40	@ 0x28
 8011dd0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011dd4:	ab09      	add	r3, sp, #36	@ 0x24
 8011dd6:	9300      	str	r3, [sp, #0]
 8011dd8:	6861      	ldr	r1, [r4, #4]
 8011dda:	ec49 8b10 	vmov	d0, r8, r9
 8011dde:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011de2:	4628      	mov	r0, r5
 8011de4:	f7ff fed6 	bl	8011b94 <__cvt>
 8011de8:	9b06      	ldr	r3, [sp, #24]
 8011dea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011dec:	2b47      	cmp	r3, #71	@ 0x47
 8011dee:	4680      	mov	r8, r0
 8011df0:	d129      	bne.n	8011e46 <_printf_float+0x172>
 8011df2:	1cc8      	adds	r0, r1, #3
 8011df4:	db02      	blt.n	8011dfc <_printf_float+0x128>
 8011df6:	6863      	ldr	r3, [r4, #4]
 8011df8:	4299      	cmp	r1, r3
 8011dfa:	dd41      	ble.n	8011e80 <_printf_float+0x1ac>
 8011dfc:	f1aa 0a02 	sub.w	sl, sl, #2
 8011e00:	fa5f fa8a 	uxtb.w	sl, sl
 8011e04:	3901      	subs	r1, #1
 8011e06:	4652      	mov	r2, sl
 8011e08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011e0c:	9109      	str	r1, [sp, #36]	@ 0x24
 8011e0e:	f7ff ff26 	bl	8011c5e <__exponent>
 8011e12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011e14:	1813      	adds	r3, r2, r0
 8011e16:	2a01      	cmp	r2, #1
 8011e18:	4681      	mov	r9, r0
 8011e1a:	6123      	str	r3, [r4, #16]
 8011e1c:	dc02      	bgt.n	8011e24 <_printf_float+0x150>
 8011e1e:	6822      	ldr	r2, [r4, #0]
 8011e20:	07d2      	lsls	r2, r2, #31
 8011e22:	d501      	bpl.n	8011e28 <_printf_float+0x154>
 8011e24:	3301      	adds	r3, #1
 8011e26:	6123      	str	r3, [r4, #16]
 8011e28:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d0a2      	beq.n	8011d76 <_printf_float+0xa2>
 8011e30:	232d      	movs	r3, #45	@ 0x2d
 8011e32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011e36:	e79e      	b.n	8011d76 <_printf_float+0xa2>
 8011e38:	9a06      	ldr	r2, [sp, #24]
 8011e3a:	2a47      	cmp	r2, #71	@ 0x47
 8011e3c:	d1c2      	bne.n	8011dc4 <_printf_float+0xf0>
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d1c0      	bne.n	8011dc4 <_printf_float+0xf0>
 8011e42:	2301      	movs	r3, #1
 8011e44:	e7bd      	b.n	8011dc2 <_printf_float+0xee>
 8011e46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011e4a:	d9db      	bls.n	8011e04 <_printf_float+0x130>
 8011e4c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011e50:	d118      	bne.n	8011e84 <_printf_float+0x1b0>
 8011e52:	2900      	cmp	r1, #0
 8011e54:	6863      	ldr	r3, [r4, #4]
 8011e56:	dd0b      	ble.n	8011e70 <_printf_float+0x19c>
 8011e58:	6121      	str	r1, [r4, #16]
 8011e5a:	b913      	cbnz	r3, 8011e62 <_printf_float+0x18e>
 8011e5c:	6822      	ldr	r2, [r4, #0]
 8011e5e:	07d0      	lsls	r0, r2, #31
 8011e60:	d502      	bpl.n	8011e68 <_printf_float+0x194>
 8011e62:	3301      	adds	r3, #1
 8011e64:	440b      	add	r3, r1
 8011e66:	6123      	str	r3, [r4, #16]
 8011e68:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011e6a:	f04f 0900 	mov.w	r9, #0
 8011e6e:	e7db      	b.n	8011e28 <_printf_float+0x154>
 8011e70:	b913      	cbnz	r3, 8011e78 <_printf_float+0x1a4>
 8011e72:	6822      	ldr	r2, [r4, #0]
 8011e74:	07d2      	lsls	r2, r2, #31
 8011e76:	d501      	bpl.n	8011e7c <_printf_float+0x1a8>
 8011e78:	3302      	adds	r3, #2
 8011e7a:	e7f4      	b.n	8011e66 <_printf_float+0x192>
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	e7f2      	b.n	8011e66 <_printf_float+0x192>
 8011e80:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011e84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e86:	4299      	cmp	r1, r3
 8011e88:	db05      	blt.n	8011e96 <_printf_float+0x1c2>
 8011e8a:	6823      	ldr	r3, [r4, #0]
 8011e8c:	6121      	str	r1, [r4, #16]
 8011e8e:	07d8      	lsls	r0, r3, #31
 8011e90:	d5ea      	bpl.n	8011e68 <_printf_float+0x194>
 8011e92:	1c4b      	adds	r3, r1, #1
 8011e94:	e7e7      	b.n	8011e66 <_printf_float+0x192>
 8011e96:	2900      	cmp	r1, #0
 8011e98:	bfd4      	ite	le
 8011e9a:	f1c1 0202 	rsble	r2, r1, #2
 8011e9e:	2201      	movgt	r2, #1
 8011ea0:	4413      	add	r3, r2
 8011ea2:	e7e0      	b.n	8011e66 <_printf_float+0x192>
 8011ea4:	6823      	ldr	r3, [r4, #0]
 8011ea6:	055a      	lsls	r2, r3, #21
 8011ea8:	d407      	bmi.n	8011eba <_printf_float+0x1e6>
 8011eaa:	6923      	ldr	r3, [r4, #16]
 8011eac:	4642      	mov	r2, r8
 8011eae:	4631      	mov	r1, r6
 8011eb0:	4628      	mov	r0, r5
 8011eb2:	47b8      	blx	r7
 8011eb4:	3001      	adds	r0, #1
 8011eb6:	d12b      	bne.n	8011f10 <_printf_float+0x23c>
 8011eb8:	e767      	b.n	8011d8a <_printf_float+0xb6>
 8011eba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011ebe:	f240 80dd 	bls.w	801207c <_printf_float+0x3a8>
 8011ec2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	2300      	movs	r3, #0
 8011eca:	f7ee fe1d 	bl	8000b08 <__aeabi_dcmpeq>
 8011ece:	2800      	cmp	r0, #0
 8011ed0:	d033      	beq.n	8011f3a <_printf_float+0x266>
 8011ed2:	4a37      	ldr	r2, [pc, #220]	@ (8011fb0 <_printf_float+0x2dc>)
 8011ed4:	2301      	movs	r3, #1
 8011ed6:	4631      	mov	r1, r6
 8011ed8:	4628      	mov	r0, r5
 8011eda:	47b8      	blx	r7
 8011edc:	3001      	adds	r0, #1
 8011ede:	f43f af54 	beq.w	8011d8a <_printf_float+0xb6>
 8011ee2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011ee6:	4543      	cmp	r3, r8
 8011ee8:	db02      	blt.n	8011ef0 <_printf_float+0x21c>
 8011eea:	6823      	ldr	r3, [r4, #0]
 8011eec:	07d8      	lsls	r0, r3, #31
 8011eee:	d50f      	bpl.n	8011f10 <_printf_float+0x23c>
 8011ef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ef4:	4631      	mov	r1, r6
 8011ef6:	4628      	mov	r0, r5
 8011ef8:	47b8      	blx	r7
 8011efa:	3001      	adds	r0, #1
 8011efc:	f43f af45 	beq.w	8011d8a <_printf_float+0xb6>
 8011f00:	f04f 0900 	mov.w	r9, #0
 8011f04:	f108 38ff 	add.w	r8, r8, #4294967295
 8011f08:	f104 0a1a 	add.w	sl, r4, #26
 8011f0c:	45c8      	cmp	r8, r9
 8011f0e:	dc09      	bgt.n	8011f24 <_printf_float+0x250>
 8011f10:	6823      	ldr	r3, [r4, #0]
 8011f12:	079b      	lsls	r3, r3, #30
 8011f14:	f100 8103 	bmi.w	801211e <_printf_float+0x44a>
 8011f18:	68e0      	ldr	r0, [r4, #12]
 8011f1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f1c:	4298      	cmp	r0, r3
 8011f1e:	bfb8      	it	lt
 8011f20:	4618      	movlt	r0, r3
 8011f22:	e734      	b.n	8011d8e <_printf_float+0xba>
 8011f24:	2301      	movs	r3, #1
 8011f26:	4652      	mov	r2, sl
 8011f28:	4631      	mov	r1, r6
 8011f2a:	4628      	mov	r0, r5
 8011f2c:	47b8      	blx	r7
 8011f2e:	3001      	adds	r0, #1
 8011f30:	f43f af2b 	beq.w	8011d8a <_printf_float+0xb6>
 8011f34:	f109 0901 	add.w	r9, r9, #1
 8011f38:	e7e8      	b.n	8011f0c <_printf_float+0x238>
 8011f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	dc39      	bgt.n	8011fb4 <_printf_float+0x2e0>
 8011f40:	4a1b      	ldr	r2, [pc, #108]	@ (8011fb0 <_printf_float+0x2dc>)
 8011f42:	2301      	movs	r3, #1
 8011f44:	4631      	mov	r1, r6
 8011f46:	4628      	mov	r0, r5
 8011f48:	47b8      	blx	r7
 8011f4a:	3001      	adds	r0, #1
 8011f4c:	f43f af1d 	beq.w	8011d8a <_printf_float+0xb6>
 8011f50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011f54:	ea59 0303 	orrs.w	r3, r9, r3
 8011f58:	d102      	bne.n	8011f60 <_printf_float+0x28c>
 8011f5a:	6823      	ldr	r3, [r4, #0]
 8011f5c:	07d9      	lsls	r1, r3, #31
 8011f5e:	d5d7      	bpl.n	8011f10 <_printf_float+0x23c>
 8011f60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011f64:	4631      	mov	r1, r6
 8011f66:	4628      	mov	r0, r5
 8011f68:	47b8      	blx	r7
 8011f6a:	3001      	adds	r0, #1
 8011f6c:	f43f af0d 	beq.w	8011d8a <_printf_float+0xb6>
 8011f70:	f04f 0a00 	mov.w	sl, #0
 8011f74:	f104 0b1a 	add.w	fp, r4, #26
 8011f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f7a:	425b      	negs	r3, r3
 8011f7c:	4553      	cmp	r3, sl
 8011f7e:	dc01      	bgt.n	8011f84 <_printf_float+0x2b0>
 8011f80:	464b      	mov	r3, r9
 8011f82:	e793      	b.n	8011eac <_printf_float+0x1d8>
 8011f84:	2301      	movs	r3, #1
 8011f86:	465a      	mov	r2, fp
 8011f88:	4631      	mov	r1, r6
 8011f8a:	4628      	mov	r0, r5
 8011f8c:	47b8      	blx	r7
 8011f8e:	3001      	adds	r0, #1
 8011f90:	f43f aefb 	beq.w	8011d8a <_printf_float+0xb6>
 8011f94:	f10a 0a01 	add.w	sl, sl, #1
 8011f98:	e7ee      	b.n	8011f78 <_printf_float+0x2a4>
 8011f9a:	bf00      	nop
 8011f9c:	7fefffff 	.word	0x7fefffff
 8011fa0:	0801492c 	.word	0x0801492c
 8011fa4:	08014930 	.word	0x08014930
 8011fa8:	08014934 	.word	0x08014934
 8011fac:	08014938 	.word	0x08014938
 8011fb0:	0801493c 	.word	0x0801493c
 8011fb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011fb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011fba:	4553      	cmp	r3, sl
 8011fbc:	bfa8      	it	ge
 8011fbe:	4653      	movge	r3, sl
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	4699      	mov	r9, r3
 8011fc4:	dc36      	bgt.n	8012034 <_printf_float+0x360>
 8011fc6:	f04f 0b00 	mov.w	fp, #0
 8011fca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011fce:	f104 021a 	add.w	r2, r4, #26
 8011fd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011fd4:	9306      	str	r3, [sp, #24]
 8011fd6:	eba3 0309 	sub.w	r3, r3, r9
 8011fda:	455b      	cmp	r3, fp
 8011fdc:	dc31      	bgt.n	8012042 <_printf_float+0x36e>
 8011fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fe0:	459a      	cmp	sl, r3
 8011fe2:	dc3a      	bgt.n	801205a <_printf_float+0x386>
 8011fe4:	6823      	ldr	r3, [r4, #0]
 8011fe6:	07da      	lsls	r2, r3, #31
 8011fe8:	d437      	bmi.n	801205a <_printf_float+0x386>
 8011fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fec:	ebaa 0903 	sub.w	r9, sl, r3
 8011ff0:	9b06      	ldr	r3, [sp, #24]
 8011ff2:	ebaa 0303 	sub.w	r3, sl, r3
 8011ff6:	4599      	cmp	r9, r3
 8011ff8:	bfa8      	it	ge
 8011ffa:	4699      	movge	r9, r3
 8011ffc:	f1b9 0f00 	cmp.w	r9, #0
 8012000:	dc33      	bgt.n	801206a <_printf_float+0x396>
 8012002:	f04f 0800 	mov.w	r8, #0
 8012006:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801200a:	f104 0b1a 	add.w	fp, r4, #26
 801200e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012010:	ebaa 0303 	sub.w	r3, sl, r3
 8012014:	eba3 0309 	sub.w	r3, r3, r9
 8012018:	4543      	cmp	r3, r8
 801201a:	f77f af79 	ble.w	8011f10 <_printf_float+0x23c>
 801201e:	2301      	movs	r3, #1
 8012020:	465a      	mov	r2, fp
 8012022:	4631      	mov	r1, r6
 8012024:	4628      	mov	r0, r5
 8012026:	47b8      	blx	r7
 8012028:	3001      	adds	r0, #1
 801202a:	f43f aeae 	beq.w	8011d8a <_printf_float+0xb6>
 801202e:	f108 0801 	add.w	r8, r8, #1
 8012032:	e7ec      	b.n	801200e <_printf_float+0x33a>
 8012034:	4642      	mov	r2, r8
 8012036:	4631      	mov	r1, r6
 8012038:	4628      	mov	r0, r5
 801203a:	47b8      	blx	r7
 801203c:	3001      	adds	r0, #1
 801203e:	d1c2      	bne.n	8011fc6 <_printf_float+0x2f2>
 8012040:	e6a3      	b.n	8011d8a <_printf_float+0xb6>
 8012042:	2301      	movs	r3, #1
 8012044:	4631      	mov	r1, r6
 8012046:	4628      	mov	r0, r5
 8012048:	9206      	str	r2, [sp, #24]
 801204a:	47b8      	blx	r7
 801204c:	3001      	adds	r0, #1
 801204e:	f43f ae9c 	beq.w	8011d8a <_printf_float+0xb6>
 8012052:	9a06      	ldr	r2, [sp, #24]
 8012054:	f10b 0b01 	add.w	fp, fp, #1
 8012058:	e7bb      	b.n	8011fd2 <_printf_float+0x2fe>
 801205a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801205e:	4631      	mov	r1, r6
 8012060:	4628      	mov	r0, r5
 8012062:	47b8      	blx	r7
 8012064:	3001      	adds	r0, #1
 8012066:	d1c0      	bne.n	8011fea <_printf_float+0x316>
 8012068:	e68f      	b.n	8011d8a <_printf_float+0xb6>
 801206a:	9a06      	ldr	r2, [sp, #24]
 801206c:	464b      	mov	r3, r9
 801206e:	4442      	add	r2, r8
 8012070:	4631      	mov	r1, r6
 8012072:	4628      	mov	r0, r5
 8012074:	47b8      	blx	r7
 8012076:	3001      	adds	r0, #1
 8012078:	d1c3      	bne.n	8012002 <_printf_float+0x32e>
 801207a:	e686      	b.n	8011d8a <_printf_float+0xb6>
 801207c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012080:	f1ba 0f01 	cmp.w	sl, #1
 8012084:	dc01      	bgt.n	801208a <_printf_float+0x3b6>
 8012086:	07db      	lsls	r3, r3, #31
 8012088:	d536      	bpl.n	80120f8 <_printf_float+0x424>
 801208a:	2301      	movs	r3, #1
 801208c:	4642      	mov	r2, r8
 801208e:	4631      	mov	r1, r6
 8012090:	4628      	mov	r0, r5
 8012092:	47b8      	blx	r7
 8012094:	3001      	adds	r0, #1
 8012096:	f43f ae78 	beq.w	8011d8a <_printf_float+0xb6>
 801209a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801209e:	4631      	mov	r1, r6
 80120a0:	4628      	mov	r0, r5
 80120a2:	47b8      	blx	r7
 80120a4:	3001      	adds	r0, #1
 80120a6:	f43f ae70 	beq.w	8011d8a <_printf_float+0xb6>
 80120aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80120ae:	2200      	movs	r2, #0
 80120b0:	2300      	movs	r3, #0
 80120b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80120b6:	f7ee fd27 	bl	8000b08 <__aeabi_dcmpeq>
 80120ba:	b9c0      	cbnz	r0, 80120ee <_printf_float+0x41a>
 80120bc:	4653      	mov	r3, sl
 80120be:	f108 0201 	add.w	r2, r8, #1
 80120c2:	4631      	mov	r1, r6
 80120c4:	4628      	mov	r0, r5
 80120c6:	47b8      	blx	r7
 80120c8:	3001      	adds	r0, #1
 80120ca:	d10c      	bne.n	80120e6 <_printf_float+0x412>
 80120cc:	e65d      	b.n	8011d8a <_printf_float+0xb6>
 80120ce:	2301      	movs	r3, #1
 80120d0:	465a      	mov	r2, fp
 80120d2:	4631      	mov	r1, r6
 80120d4:	4628      	mov	r0, r5
 80120d6:	47b8      	blx	r7
 80120d8:	3001      	adds	r0, #1
 80120da:	f43f ae56 	beq.w	8011d8a <_printf_float+0xb6>
 80120de:	f108 0801 	add.w	r8, r8, #1
 80120e2:	45d0      	cmp	r8, sl
 80120e4:	dbf3      	blt.n	80120ce <_printf_float+0x3fa>
 80120e6:	464b      	mov	r3, r9
 80120e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80120ec:	e6df      	b.n	8011eae <_printf_float+0x1da>
 80120ee:	f04f 0800 	mov.w	r8, #0
 80120f2:	f104 0b1a 	add.w	fp, r4, #26
 80120f6:	e7f4      	b.n	80120e2 <_printf_float+0x40e>
 80120f8:	2301      	movs	r3, #1
 80120fa:	4642      	mov	r2, r8
 80120fc:	e7e1      	b.n	80120c2 <_printf_float+0x3ee>
 80120fe:	2301      	movs	r3, #1
 8012100:	464a      	mov	r2, r9
 8012102:	4631      	mov	r1, r6
 8012104:	4628      	mov	r0, r5
 8012106:	47b8      	blx	r7
 8012108:	3001      	adds	r0, #1
 801210a:	f43f ae3e 	beq.w	8011d8a <_printf_float+0xb6>
 801210e:	f108 0801 	add.w	r8, r8, #1
 8012112:	68e3      	ldr	r3, [r4, #12]
 8012114:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012116:	1a5b      	subs	r3, r3, r1
 8012118:	4543      	cmp	r3, r8
 801211a:	dcf0      	bgt.n	80120fe <_printf_float+0x42a>
 801211c:	e6fc      	b.n	8011f18 <_printf_float+0x244>
 801211e:	f04f 0800 	mov.w	r8, #0
 8012122:	f104 0919 	add.w	r9, r4, #25
 8012126:	e7f4      	b.n	8012112 <_printf_float+0x43e>

08012128 <_printf_common>:
 8012128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801212c:	4616      	mov	r6, r2
 801212e:	4698      	mov	r8, r3
 8012130:	688a      	ldr	r2, [r1, #8]
 8012132:	690b      	ldr	r3, [r1, #16]
 8012134:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012138:	4293      	cmp	r3, r2
 801213a:	bfb8      	it	lt
 801213c:	4613      	movlt	r3, r2
 801213e:	6033      	str	r3, [r6, #0]
 8012140:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012144:	4607      	mov	r7, r0
 8012146:	460c      	mov	r4, r1
 8012148:	b10a      	cbz	r2, 801214e <_printf_common+0x26>
 801214a:	3301      	adds	r3, #1
 801214c:	6033      	str	r3, [r6, #0]
 801214e:	6823      	ldr	r3, [r4, #0]
 8012150:	0699      	lsls	r1, r3, #26
 8012152:	bf42      	ittt	mi
 8012154:	6833      	ldrmi	r3, [r6, #0]
 8012156:	3302      	addmi	r3, #2
 8012158:	6033      	strmi	r3, [r6, #0]
 801215a:	6825      	ldr	r5, [r4, #0]
 801215c:	f015 0506 	ands.w	r5, r5, #6
 8012160:	d106      	bne.n	8012170 <_printf_common+0x48>
 8012162:	f104 0a19 	add.w	sl, r4, #25
 8012166:	68e3      	ldr	r3, [r4, #12]
 8012168:	6832      	ldr	r2, [r6, #0]
 801216a:	1a9b      	subs	r3, r3, r2
 801216c:	42ab      	cmp	r3, r5
 801216e:	dc26      	bgt.n	80121be <_printf_common+0x96>
 8012170:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012174:	6822      	ldr	r2, [r4, #0]
 8012176:	3b00      	subs	r3, #0
 8012178:	bf18      	it	ne
 801217a:	2301      	movne	r3, #1
 801217c:	0692      	lsls	r2, r2, #26
 801217e:	d42b      	bmi.n	80121d8 <_printf_common+0xb0>
 8012180:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012184:	4641      	mov	r1, r8
 8012186:	4638      	mov	r0, r7
 8012188:	47c8      	blx	r9
 801218a:	3001      	adds	r0, #1
 801218c:	d01e      	beq.n	80121cc <_printf_common+0xa4>
 801218e:	6823      	ldr	r3, [r4, #0]
 8012190:	6922      	ldr	r2, [r4, #16]
 8012192:	f003 0306 	and.w	r3, r3, #6
 8012196:	2b04      	cmp	r3, #4
 8012198:	bf02      	ittt	eq
 801219a:	68e5      	ldreq	r5, [r4, #12]
 801219c:	6833      	ldreq	r3, [r6, #0]
 801219e:	1aed      	subeq	r5, r5, r3
 80121a0:	68a3      	ldr	r3, [r4, #8]
 80121a2:	bf0c      	ite	eq
 80121a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80121a8:	2500      	movne	r5, #0
 80121aa:	4293      	cmp	r3, r2
 80121ac:	bfc4      	itt	gt
 80121ae:	1a9b      	subgt	r3, r3, r2
 80121b0:	18ed      	addgt	r5, r5, r3
 80121b2:	2600      	movs	r6, #0
 80121b4:	341a      	adds	r4, #26
 80121b6:	42b5      	cmp	r5, r6
 80121b8:	d11a      	bne.n	80121f0 <_printf_common+0xc8>
 80121ba:	2000      	movs	r0, #0
 80121bc:	e008      	b.n	80121d0 <_printf_common+0xa8>
 80121be:	2301      	movs	r3, #1
 80121c0:	4652      	mov	r2, sl
 80121c2:	4641      	mov	r1, r8
 80121c4:	4638      	mov	r0, r7
 80121c6:	47c8      	blx	r9
 80121c8:	3001      	adds	r0, #1
 80121ca:	d103      	bne.n	80121d4 <_printf_common+0xac>
 80121cc:	f04f 30ff 	mov.w	r0, #4294967295
 80121d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121d4:	3501      	adds	r5, #1
 80121d6:	e7c6      	b.n	8012166 <_printf_common+0x3e>
 80121d8:	18e1      	adds	r1, r4, r3
 80121da:	1c5a      	adds	r2, r3, #1
 80121dc:	2030      	movs	r0, #48	@ 0x30
 80121de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80121e2:	4422      	add	r2, r4
 80121e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80121e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80121ec:	3302      	adds	r3, #2
 80121ee:	e7c7      	b.n	8012180 <_printf_common+0x58>
 80121f0:	2301      	movs	r3, #1
 80121f2:	4622      	mov	r2, r4
 80121f4:	4641      	mov	r1, r8
 80121f6:	4638      	mov	r0, r7
 80121f8:	47c8      	blx	r9
 80121fa:	3001      	adds	r0, #1
 80121fc:	d0e6      	beq.n	80121cc <_printf_common+0xa4>
 80121fe:	3601      	adds	r6, #1
 8012200:	e7d9      	b.n	80121b6 <_printf_common+0x8e>
	...

08012204 <_printf_i>:
 8012204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012208:	7e0f      	ldrb	r7, [r1, #24]
 801220a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801220c:	2f78      	cmp	r7, #120	@ 0x78
 801220e:	4691      	mov	r9, r2
 8012210:	4680      	mov	r8, r0
 8012212:	460c      	mov	r4, r1
 8012214:	469a      	mov	sl, r3
 8012216:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801221a:	d807      	bhi.n	801222c <_printf_i+0x28>
 801221c:	2f62      	cmp	r7, #98	@ 0x62
 801221e:	d80a      	bhi.n	8012236 <_printf_i+0x32>
 8012220:	2f00      	cmp	r7, #0
 8012222:	f000 80d2 	beq.w	80123ca <_printf_i+0x1c6>
 8012226:	2f58      	cmp	r7, #88	@ 0x58
 8012228:	f000 80b9 	beq.w	801239e <_printf_i+0x19a>
 801222c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012230:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012234:	e03a      	b.n	80122ac <_printf_i+0xa8>
 8012236:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801223a:	2b15      	cmp	r3, #21
 801223c:	d8f6      	bhi.n	801222c <_printf_i+0x28>
 801223e:	a101      	add	r1, pc, #4	@ (adr r1, 8012244 <_printf_i+0x40>)
 8012240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012244:	0801229d 	.word	0x0801229d
 8012248:	080122b1 	.word	0x080122b1
 801224c:	0801222d 	.word	0x0801222d
 8012250:	0801222d 	.word	0x0801222d
 8012254:	0801222d 	.word	0x0801222d
 8012258:	0801222d 	.word	0x0801222d
 801225c:	080122b1 	.word	0x080122b1
 8012260:	0801222d 	.word	0x0801222d
 8012264:	0801222d 	.word	0x0801222d
 8012268:	0801222d 	.word	0x0801222d
 801226c:	0801222d 	.word	0x0801222d
 8012270:	080123b1 	.word	0x080123b1
 8012274:	080122db 	.word	0x080122db
 8012278:	0801236b 	.word	0x0801236b
 801227c:	0801222d 	.word	0x0801222d
 8012280:	0801222d 	.word	0x0801222d
 8012284:	080123d3 	.word	0x080123d3
 8012288:	0801222d 	.word	0x0801222d
 801228c:	080122db 	.word	0x080122db
 8012290:	0801222d 	.word	0x0801222d
 8012294:	0801222d 	.word	0x0801222d
 8012298:	08012373 	.word	0x08012373
 801229c:	6833      	ldr	r3, [r6, #0]
 801229e:	1d1a      	adds	r2, r3, #4
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	6032      	str	r2, [r6, #0]
 80122a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80122a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80122ac:	2301      	movs	r3, #1
 80122ae:	e09d      	b.n	80123ec <_printf_i+0x1e8>
 80122b0:	6833      	ldr	r3, [r6, #0]
 80122b2:	6820      	ldr	r0, [r4, #0]
 80122b4:	1d19      	adds	r1, r3, #4
 80122b6:	6031      	str	r1, [r6, #0]
 80122b8:	0606      	lsls	r6, r0, #24
 80122ba:	d501      	bpl.n	80122c0 <_printf_i+0xbc>
 80122bc:	681d      	ldr	r5, [r3, #0]
 80122be:	e003      	b.n	80122c8 <_printf_i+0xc4>
 80122c0:	0645      	lsls	r5, r0, #25
 80122c2:	d5fb      	bpl.n	80122bc <_printf_i+0xb8>
 80122c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80122c8:	2d00      	cmp	r5, #0
 80122ca:	da03      	bge.n	80122d4 <_printf_i+0xd0>
 80122cc:	232d      	movs	r3, #45	@ 0x2d
 80122ce:	426d      	negs	r5, r5
 80122d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80122d4:	4859      	ldr	r0, [pc, #356]	@ (801243c <_printf_i+0x238>)
 80122d6:	230a      	movs	r3, #10
 80122d8:	e011      	b.n	80122fe <_printf_i+0xfa>
 80122da:	6821      	ldr	r1, [r4, #0]
 80122dc:	6833      	ldr	r3, [r6, #0]
 80122de:	0608      	lsls	r0, r1, #24
 80122e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80122e4:	d402      	bmi.n	80122ec <_printf_i+0xe8>
 80122e6:	0649      	lsls	r1, r1, #25
 80122e8:	bf48      	it	mi
 80122ea:	b2ad      	uxthmi	r5, r5
 80122ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80122ee:	4853      	ldr	r0, [pc, #332]	@ (801243c <_printf_i+0x238>)
 80122f0:	6033      	str	r3, [r6, #0]
 80122f2:	bf14      	ite	ne
 80122f4:	230a      	movne	r3, #10
 80122f6:	2308      	moveq	r3, #8
 80122f8:	2100      	movs	r1, #0
 80122fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80122fe:	6866      	ldr	r6, [r4, #4]
 8012300:	60a6      	str	r6, [r4, #8]
 8012302:	2e00      	cmp	r6, #0
 8012304:	bfa2      	ittt	ge
 8012306:	6821      	ldrge	r1, [r4, #0]
 8012308:	f021 0104 	bicge.w	r1, r1, #4
 801230c:	6021      	strge	r1, [r4, #0]
 801230e:	b90d      	cbnz	r5, 8012314 <_printf_i+0x110>
 8012310:	2e00      	cmp	r6, #0
 8012312:	d04b      	beq.n	80123ac <_printf_i+0x1a8>
 8012314:	4616      	mov	r6, r2
 8012316:	fbb5 f1f3 	udiv	r1, r5, r3
 801231a:	fb03 5711 	mls	r7, r3, r1, r5
 801231e:	5dc7      	ldrb	r7, [r0, r7]
 8012320:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012324:	462f      	mov	r7, r5
 8012326:	42bb      	cmp	r3, r7
 8012328:	460d      	mov	r5, r1
 801232a:	d9f4      	bls.n	8012316 <_printf_i+0x112>
 801232c:	2b08      	cmp	r3, #8
 801232e:	d10b      	bne.n	8012348 <_printf_i+0x144>
 8012330:	6823      	ldr	r3, [r4, #0]
 8012332:	07df      	lsls	r7, r3, #31
 8012334:	d508      	bpl.n	8012348 <_printf_i+0x144>
 8012336:	6923      	ldr	r3, [r4, #16]
 8012338:	6861      	ldr	r1, [r4, #4]
 801233a:	4299      	cmp	r1, r3
 801233c:	bfde      	ittt	le
 801233e:	2330      	movle	r3, #48	@ 0x30
 8012340:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012344:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012348:	1b92      	subs	r2, r2, r6
 801234a:	6122      	str	r2, [r4, #16]
 801234c:	f8cd a000 	str.w	sl, [sp]
 8012350:	464b      	mov	r3, r9
 8012352:	aa03      	add	r2, sp, #12
 8012354:	4621      	mov	r1, r4
 8012356:	4640      	mov	r0, r8
 8012358:	f7ff fee6 	bl	8012128 <_printf_common>
 801235c:	3001      	adds	r0, #1
 801235e:	d14a      	bne.n	80123f6 <_printf_i+0x1f2>
 8012360:	f04f 30ff 	mov.w	r0, #4294967295
 8012364:	b004      	add	sp, #16
 8012366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801236a:	6823      	ldr	r3, [r4, #0]
 801236c:	f043 0320 	orr.w	r3, r3, #32
 8012370:	6023      	str	r3, [r4, #0]
 8012372:	4833      	ldr	r0, [pc, #204]	@ (8012440 <_printf_i+0x23c>)
 8012374:	2778      	movs	r7, #120	@ 0x78
 8012376:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801237a:	6823      	ldr	r3, [r4, #0]
 801237c:	6831      	ldr	r1, [r6, #0]
 801237e:	061f      	lsls	r7, r3, #24
 8012380:	f851 5b04 	ldr.w	r5, [r1], #4
 8012384:	d402      	bmi.n	801238c <_printf_i+0x188>
 8012386:	065f      	lsls	r7, r3, #25
 8012388:	bf48      	it	mi
 801238a:	b2ad      	uxthmi	r5, r5
 801238c:	6031      	str	r1, [r6, #0]
 801238e:	07d9      	lsls	r1, r3, #31
 8012390:	bf44      	itt	mi
 8012392:	f043 0320 	orrmi.w	r3, r3, #32
 8012396:	6023      	strmi	r3, [r4, #0]
 8012398:	b11d      	cbz	r5, 80123a2 <_printf_i+0x19e>
 801239a:	2310      	movs	r3, #16
 801239c:	e7ac      	b.n	80122f8 <_printf_i+0xf4>
 801239e:	4827      	ldr	r0, [pc, #156]	@ (801243c <_printf_i+0x238>)
 80123a0:	e7e9      	b.n	8012376 <_printf_i+0x172>
 80123a2:	6823      	ldr	r3, [r4, #0]
 80123a4:	f023 0320 	bic.w	r3, r3, #32
 80123a8:	6023      	str	r3, [r4, #0]
 80123aa:	e7f6      	b.n	801239a <_printf_i+0x196>
 80123ac:	4616      	mov	r6, r2
 80123ae:	e7bd      	b.n	801232c <_printf_i+0x128>
 80123b0:	6833      	ldr	r3, [r6, #0]
 80123b2:	6825      	ldr	r5, [r4, #0]
 80123b4:	6961      	ldr	r1, [r4, #20]
 80123b6:	1d18      	adds	r0, r3, #4
 80123b8:	6030      	str	r0, [r6, #0]
 80123ba:	062e      	lsls	r6, r5, #24
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	d501      	bpl.n	80123c4 <_printf_i+0x1c0>
 80123c0:	6019      	str	r1, [r3, #0]
 80123c2:	e002      	b.n	80123ca <_printf_i+0x1c6>
 80123c4:	0668      	lsls	r0, r5, #25
 80123c6:	d5fb      	bpl.n	80123c0 <_printf_i+0x1bc>
 80123c8:	8019      	strh	r1, [r3, #0]
 80123ca:	2300      	movs	r3, #0
 80123cc:	6123      	str	r3, [r4, #16]
 80123ce:	4616      	mov	r6, r2
 80123d0:	e7bc      	b.n	801234c <_printf_i+0x148>
 80123d2:	6833      	ldr	r3, [r6, #0]
 80123d4:	1d1a      	adds	r2, r3, #4
 80123d6:	6032      	str	r2, [r6, #0]
 80123d8:	681e      	ldr	r6, [r3, #0]
 80123da:	6862      	ldr	r2, [r4, #4]
 80123dc:	2100      	movs	r1, #0
 80123de:	4630      	mov	r0, r6
 80123e0:	f7ed ff16 	bl	8000210 <memchr>
 80123e4:	b108      	cbz	r0, 80123ea <_printf_i+0x1e6>
 80123e6:	1b80      	subs	r0, r0, r6
 80123e8:	6060      	str	r0, [r4, #4]
 80123ea:	6863      	ldr	r3, [r4, #4]
 80123ec:	6123      	str	r3, [r4, #16]
 80123ee:	2300      	movs	r3, #0
 80123f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80123f4:	e7aa      	b.n	801234c <_printf_i+0x148>
 80123f6:	6923      	ldr	r3, [r4, #16]
 80123f8:	4632      	mov	r2, r6
 80123fa:	4649      	mov	r1, r9
 80123fc:	4640      	mov	r0, r8
 80123fe:	47d0      	blx	sl
 8012400:	3001      	adds	r0, #1
 8012402:	d0ad      	beq.n	8012360 <_printf_i+0x15c>
 8012404:	6823      	ldr	r3, [r4, #0]
 8012406:	079b      	lsls	r3, r3, #30
 8012408:	d413      	bmi.n	8012432 <_printf_i+0x22e>
 801240a:	68e0      	ldr	r0, [r4, #12]
 801240c:	9b03      	ldr	r3, [sp, #12]
 801240e:	4298      	cmp	r0, r3
 8012410:	bfb8      	it	lt
 8012412:	4618      	movlt	r0, r3
 8012414:	e7a6      	b.n	8012364 <_printf_i+0x160>
 8012416:	2301      	movs	r3, #1
 8012418:	4632      	mov	r2, r6
 801241a:	4649      	mov	r1, r9
 801241c:	4640      	mov	r0, r8
 801241e:	47d0      	blx	sl
 8012420:	3001      	adds	r0, #1
 8012422:	d09d      	beq.n	8012360 <_printf_i+0x15c>
 8012424:	3501      	adds	r5, #1
 8012426:	68e3      	ldr	r3, [r4, #12]
 8012428:	9903      	ldr	r1, [sp, #12]
 801242a:	1a5b      	subs	r3, r3, r1
 801242c:	42ab      	cmp	r3, r5
 801242e:	dcf2      	bgt.n	8012416 <_printf_i+0x212>
 8012430:	e7eb      	b.n	801240a <_printf_i+0x206>
 8012432:	2500      	movs	r5, #0
 8012434:	f104 0619 	add.w	r6, r4, #25
 8012438:	e7f5      	b.n	8012426 <_printf_i+0x222>
 801243a:	bf00      	nop
 801243c:	0801493e 	.word	0x0801493e
 8012440:	0801494f 	.word	0x0801494f

08012444 <std>:
 8012444:	2300      	movs	r3, #0
 8012446:	b510      	push	{r4, lr}
 8012448:	4604      	mov	r4, r0
 801244a:	e9c0 3300 	strd	r3, r3, [r0]
 801244e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012452:	6083      	str	r3, [r0, #8]
 8012454:	8181      	strh	r1, [r0, #12]
 8012456:	6643      	str	r3, [r0, #100]	@ 0x64
 8012458:	81c2      	strh	r2, [r0, #14]
 801245a:	6183      	str	r3, [r0, #24]
 801245c:	4619      	mov	r1, r3
 801245e:	2208      	movs	r2, #8
 8012460:	305c      	adds	r0, #92	@ 0x5c
 8012462:	f000 fa03 	bl	801286c <memset>
 8012466:	4b0d      	ldr	r3, [pc, #52]	@ (801249c <std+0x58>)
 8012468:	6263      	str	r3, [r4, #36]	@ 0x24
 801246a:	4b0d      	ldr	r3, [pc, #52]	@ (80124a0 <std+0x5c>)
 801246c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801246e:	4b0d      	ldr	r3, [pc, #52]	@ (80124a4 <std+0x60>)
 8012470:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012472:	4b0d      	ldr	r3, [pc, #52]	@ (80124a8 <std+0x64>)
 8012474:	6323      	str	r3, [r4, #48]	@ 0x30
 8012476:	4b0d      	ldr	r3, [pc, #52]	@ (80124ac <std+0x68>)
 8012478:	6224      	str	r4, [r4, #32]
 801247a:	429c      	cmp	r4, r3
 801247c:	d006      	beq.n	801248c <std+0x48>
 801247e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012482:	4294      	cmp	r4, r2
 8012484:	d002      	beq.n	801248c <std+0x48>
 8012486:	33d0      	adds	r3, #208	@ 0xd0
 8012488:	429c      	cmp	r4, r3
 801248a:	d105      	bne.n	8012498 <std+0x54>
 801248c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012494:	f7f0 bc57 	b.w	8002d46 <__retarget_lock_init_recursive>
 8012498:	bd10      	pop	{r4, pc}
 801249a:	bf00      	nop
 801249c:	080126a9 	.word	0x080126a9
 80124a0:	080126cb 	.word	0x080126cb
 80124a4:	08012703 	.word	0x08012703
 80124a8:	08012727 	.word	0x08012727
 80124ac:	20006c34 	.word	0x20006c34

080124b0 <stdio_exit_handler>:
 80124b0:	4a02      	ldr	r2, [pc, #8]	@ (80124bc <stdio_exit_handler+0xc>)
 80124b2:	4903      	ldr	r1, [pc, #12]	@ (80124c0 <stdio_exit_handler+0x10>)
 80124b4:	4803      	ldr	r0, [pc, #12]	@ (80124c4 <stdio_exit_handler+0x14>)
 80124b6:	f000 b869 	b.w	801258c <_fwalk_sglue>
 80124ba:	bf00      	nop
 80124bc:	20000124 	.word	0x20000124
 80124c0:	0801420d 	.word	0x0801420d
 80124c4:	20000134 	.word	0x20000134

080124c8 <cleanup_stdio>:
 80124c8:	6841      	ldr	r1, [r0, #4]
 80124ca:	4b0c      	ldr	r3, [pc, #48]	@ (80124fc <cleanup_stdio+0x34>)
 80124cc:	4299      	cmp	r1, r3
 80124ce:	b510      	push	{r4, lr}
 80124d0:	4604      	mov	r4, r0
 80124d2:	d001      	beq.n	80124d8 <cleanup_stdio+0x10>
 80124d4:	f001 fe9a 	bl	801420c <_fflush_r>
 80124d8:	68a1      	ldr	r1, [r4, #8]
 80124da:	4b09      	ldr	r3, [pc, #36]	@ (8012500 <cleanup_stdio+0x38>)
 80124dc:	4299      	cmp	r1, r3
 80124de:	d002      	beq.n	80124e6 <cleanup_stdio+0x1e>
 80124e0:	4620      	mov	r0, r4
 80124e2:	f001 fe93 	bl	801420c <_fflush_r>
 80124e6:	68e1      	ldr	r1, [r4, #12]
 80124e8:	4b06      	ldr	r3, [pc, #24]	@ (8012504 <cleanup_stdio+0x3c>)
 80124ea:	4299      	cmp	r1, r3
 80124ec:	d004      	beq.n	80124f8 <cleanup_stdio+0x30>
 80124ee:	4620      	mov	r0, r4
 80124f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124f4:	f001 be8a 	b.w	801420c <_fflush_r>
 80124f8:	bd10      	pop	{r4, pc}
 80124fa:	bf00      	nop
 80124fc:	20006c34 	.word	0x20006c34
 8012500:	20006c9c 	.word	0x20006c9c
 8012504:	20006d04 	.word	0x20006d04

08012508 <global_stdio_init.part.0>:
 8012508:	b510      	push	{r4, lr}
 801250a:	4b0b      	ldr	r3, [pc, #44]	@ (8012538 <global_stdio_init.part.0+0x30>)
 801250c:	4c0b      	ldr	r4, [pc, #44]	@ (801253c <global_stdio_init.part.0+0x34>)
 801250e:	4a0c      	ldr	r2, [pc, #48]	@ (8012540 <global_stdio_init.part.0+0x38>)
 8012510:	601a      	str	r2, [r3, #0]
 8012512:	4620      	mov	r0, r4
 8012514:	2200      	movs	r2, #0
 8012516:	2104      	movs	r1, #4
 8012518:	f7ff ff94 	bl	8012444 <std>
 801251c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012520:	2201      	movs	r2, #1
 8012522:	2109      	movs	r1, #9
 8012524:	f7ff ff8e 	bl	8012444 <std>
 8012528:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801252c:	2202      	movs	r2, #2
 801252e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012532:	2112      	movs	r1, #18
 8012534:	f7ff bf86 	b.w	8012444 <std>
 8012538:	20006d6c 	.word	0x20006d6c
 801253c:	20006c34 	.word	0x20006c34
 8012540:	080124b1 	.word	0x080124b1

08012544 <__sfp_lock_acquire>:
 8012544:	4801      	ldr	r0, [pc, #4]	@ (801254c <__sfp_lock_acquire+0x8>)
 8012546:	f7f0 bc25 	b.w	8002d94 <__retarget_lock_acquire_recursive>
 801254a:	bf00      	nop
 801254c:	20000624 	.word	0x20000624

08012550 <__sfp_lock_release>:
 8012550:	4801      	ldr	r0, [pc, #4]	@ (8012558 <__sfp_lock_release+0x8>)
 8012552:	f7f0 bc34 	b.w	8002dbe <__retarget_lock_release_recursive>
 8012556:	bf00      	nop
 8012558:	20000624 	.word	0x20000624

0801255c <__sinit>:
 801255c:	b510      	push	{r4, lr}
 801255e:	4604      	mov	r4, r0
 8012560:	f7ff fff0 	bl	8012544 <__sfp_lock_acquire>
 8012564:	6a23      	ldr	r3, [r4, #32]
 8012566:	b11b      	cbz	r3, 8012570 <__sinit+0x14>
 8012568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801256c:	f7ff bff0 	b.w	8012550 <__sfp_lock_release>
 8012570:	4b04      	ldr	r3, [pc, #16]	@ (8012584 <__sinit+0x28>)
 8012572:	6223      	str	r3, [r4, #32]
 8012574:	4b04      	ldr	r3, [pc, #16]	@ (8012588 <__sinit+0x2c>)
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d1f5      	bne.n	8012568 <__sinit+0xc>
 801257c:	f7ff ffc4 	bl	8012508 <global_stdio_init.part.0>
 8012580:	e7f2      	b.n	8012568 <__sinit+0xc>
 8012582:	bf00      	nop
 8012584:	080124c9 	.word	0x080124c9
 8012588:	20006d6c 	.word	0x20006d6c

0801258c <_fwalk_sglue>:
 801258c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012590:	4607      	mov	r7, r0
 8012592:	4688      	mov	r8, r1
 8012594:	4614      	mov	r4, r2
 8012596:	2600      	movs	r6, #0
 8012598:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801259c:	f1b9 0901 	subs.w	r9, r9, #1
 80125a0:	d505      	bpl.n	80125ae <_fwalk_sglue+0x22>
 80125a2:	6824      	ldr	r4, [r4, #0]
 80125a4:	2c00      	cmp	r4, #0
 80125a6:	d1f7      	bne.n	8012598 <_fwalk_sglue+0xc>
 80125a8:	4630      	mov	r0, r6
 80125aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125ae:	89ab      	ldrh	r3, [r5, #12]
 80125b0:	2b01      	cmp	r3, #1
 80125b2:	d907      	bls.n	80125c4 <_fwalk_sglue+0x38>
 80125b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80125b8:	3301      	adds	r3, #1
 80125ba:	d003      	beq.n	80125c4 <_fwalk_sglue+0x38>
 80125bc:	4629      	mov	r1, r5
 80125be:	4638      	mov	r0, r7
 80125c0:	47c0      	blx	r8
 80125c2:	4306      	orrs	r6, r0
 80125c4:	3568      	adds	r5, #104	@ 0x68
 80125c6:	e7e9      	b.n	801259c <_fwalk_sglue+0x10>

080125c8 <iprintf>:
 80125c8:	b40f      	push	{r0, r1, r2, r3}
 80125ca:	b507      	push	{r0, r1, r2, lr}
 80125cc:	4906      	ldr	r1, [pc, #24]	@ (80125e8 <iprintf+0x20>)
 80125ce:	ab04      	add	r3, sp, #16
 80125d0:	6808      	ldr	r0, [r1, #0]
 80125d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80125d6:	6881      	ldr	r1, [r0, #8]
 80125d8:	9301      	str	r3, [sp, #4]
 80125da:	f001 fc7b 	bl	8013ed4 <_vfiprintf_r>
 80125de:	b003      	add	sp, #12
 80125e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80125e4:	b004      	add	sp, #16
 80125e6:	4770      	bx	lr
 80125e8:	20000130 	.word	0x20000130

080125ec <_puts_r>:
 80125ec:	6a03      	ldr	r3, [r0, #32]
 80125ee:	b570      	push	{r4, r5, r6, lr}
 80125f0:	6884      	ldr	r4, [r0, #8]
 80125f2:	4605      	mov	r5, r0
 80125f4:	460e      	mov	r6, r1
 80125f6:	b90b      	cbnz	r3, 80125fc <_puts_r+0x10>
 80125f8:	f7ff ffb0 	bl	801255c <__sinit>
 80125fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80125fe:	07db      	lsls	r3, r3, #31
 8012600:	d405      	bmi.n	801260e <_puts_r+0x22>
 8012602:	89a3      	ldrh	r3, [r4, #12]
 8012604:	0598      	lsls	r0, r3, #22
 8012606:	d402      	bmi.n	801260e <_puts_r+0x22>
 8012608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801260a:	f7f0 fbc3 	bl	8002d94 <__retarget_lock_acquire_recursive>
 801260e:	89a3      	ldrh	r3, [r4, #12]
 8012610:	0719      	lsls	r1, r3, #28
 8012612:	d502      	bpl.n	801261a <_puts_r+0x2e>
 8012614:	6923      	ldr	r3, [r4, #16]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d135      	bne.n	8012686 <_puts_r+0x9a>
 801261a:	4621      	mov	r1, r4
 801261c:	4628      	mov	r0, r5
 801261e:	f000 f8cf 	bl	80127c0 <__swsetup_r>
 8012622:	b380      	cbz	r0, 8012686 <_puts_r+0x9a>
 8012624:	f04f 35ff 	mov.w	r5, #4294967295
 8012628:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801262a:	07da      	lsls	r2, r3, #31
 801262c:	d405      	bmi.n	801263a <_puts_r+0x4e>
 801262e:	89a3      	ldrh	r3, [r4, #12]
 8012630:	059b      	lsls	r3, r3, #22
 8012632:	d402      	bmi.n	801263a <_puts_r+0x4e>
 8012634:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012636:	f7f0 fbc2 	bl	8002dbe <__retarget_lock_release_recursive>
 801263a:	4628      	mov	r0, r5
 801263c:	bd70      	pop	{r4, r5, r6, pc}
 801263e:	2b00      	cmp	r3, #0
 8012640:	da04      	bge.n	801264c <_puts_r+0x60>
 8012642:	69a2      	ldr	r2, [r4, #24]
 8012644:	429a      	cmp	r2, r3
 8012646:	dc17      	bgt.n	8012678 <_puts_r+0x8c>
 8012648:	290a      	cmp	r1, #10
 801264a:	d015      	beq.n	8012678 <_puts_r+0x8c>
 801264c:	6823      	ldr	r3, [r4, #0]
 801264e:	1c5a      	adds	r2, r3, #1
 8012650:	6022      	str	r2, [r4, #0]
 8012652:	7019      	strb	r1, [r3, #0]
 8012654:	68a3      	ldr	r3, [r4, #8]
 8012656:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801265a:	3b01      	subs	r3, #1
 801265c:	60a3      	str	r3, [r4, #8]
 801265e:	2900      	cmp	r1, #0
 8012660:	d1ed      	bne.n	801263e <_puts_r+0x52>
 8012662:	2b00      	cmp	r3, #0
 8012664:	da11      	bge.n	801268a <_puts_r+0x9e>
 8012666:	4622      	mov	r2, r4
 8012668:	210a      	movs	r1, #10
 801266a:	4628      	mov	r0, r5
 801266c:	f000 f86a 	bl	8012744 <__swbuf_r>
 8012670:	3001      	adds	r0, #1
 8012672:	d0d7      	beq.n	8012624 <_puts_r+0x38>
 8012674:	250a      	movs	r5, #10
 8012676:	e7d7      	b.n	8012628 <_puts_r+0x3c>
 8012678:	4622      	mov	r2, r4
 801267a:	4628      	mov	r0, r5
 801267c:	f000 f862 	bl	8012744 <__swbuf_r>
 8012680:	3001      	adds	r0, #1
 8012682:	d1e7      	bne.n	8012654 <_puts_r+0x68>
 8012684:	e7ce      	b.n	8012624 <_puts_r+0x38>
 8012686:	3e01      	subs	r6, #1
 8012688:	e7e4      	b.n	8012654 <_puts_r+0x68>
 801268a:	6823      	ldr	r3, [r4, #0]
 801268c:	1c5a      	adds	r2, r3, #1
 801268e:	6022      	str	r2, [r4, #0]
 8012690:	220a      	movs	r2, #10
 8012692:	701a      	strb	r2, [r3, #0]
 8012694:	e7ee      	b.n	8012674 <_puts_r+0x88>
	...

08012698 <puts>:
 8012698:	4b02      	ldr	r3, [pc, #8]	@ (80126a4 <puts+0xc>)
 801269a:	4601      	mov	r1, r0
 801269c:	6818      	ldr	r0, [r3, #0]
 801269e:	f7ff bfa5 	b.w	80125ec <_puts_r>
 80126a2:	bf00      	nop
 80126a4:	20000130 	.word	0x20000130

080126a8 <__sread>:
 80126a8:	b510      	push	{r4, lr}
 80126aa:	460c      	mov	r4, r1
 80126ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126b0:	f000 f960 	bl	8012974 <_read_r>
 80126b4:	2800      	cmp	r0, #0
 80126b6:	bfab      	itete	ge
 80126b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80126ba:	89a3      	ldrhlt	r3, [r4, #12]
 80126bc:	181b      	addge	r3, r3, r0
 80126be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80126c2:	bfac      	ite	ge
 80126c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80126c6:	81a3      	strhlt	r3, [r4, #12]
 80126c8:	bd10      	pop	{r4, pc}

080126ca <__swrite>:
 80126ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126ce:	461f      	mov	r7, r3
 80126d0:	898b      	ldrh	r3, [r1, #12]
 80126d2:	05db      	lsls	r3, r3, #23
 80126d4:	4605      	mov	r5, r0
 80126d6:	460c      	mov	r4, r1
 80126d8:	4616      	mov	r6, r2
 80126da:	d505      	bpl.n	80126e8 <__swrite+0x1e>
 80126dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126e0:	2302      	movs	r3, #2
 80126e2:	2200      	movs	r2, #0
 80126e4:	f000 f934 	bl	8012950 <_lseek_r>
 80126e8:	89a3      	ldrh	r3, [r4, #12]
 80126ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80126f2:	81a3      	strh	r3, [r4, #12]
 80126f4:	4632      	mov	r2, r6
 80126f6:	463b      	mov	r3, r7
 80126f8:	4628      	mov	r0, r5
 80126fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126fe:	f000 b95b 	b.w	80129b8 <_write_r>

08012702 <__sseek>:
 8012702:	b510      	push	{r4, lr}
 8012704:	460c      	mov	r4, r1
 8012706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801270a:	f000 f921 	bl	8012950 <_lseek_r>
 801270e:	1c43      	adds	r3, r0, #1
 8012710:	89a3      	ldrh	r3, [r4, #12]
 8012712:	bf15      	itete	ne
 8012714:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012716:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801271a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801271e:	81a3      	strheq	r3, [r4, #12]
 8012720:	bf18      	it	ne
 8012722:	81a3      	strhne	r3, [r4, #12]
 8012724:	bd10      	pop	{r4, pc}

08012726 <__sclose>:
 8012726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801272a:	f000 b8ab 	b.w	8012884 <_close_r>
	...

08012730 <viprintf>:
 8012730:	460b      	mov	r3, r1
 8012732:	4903      	ldr	r1, [pc, #12]	@ (8012740 <viprintf+0x10>)
 8012734:	4602      	mov	r2, r0
 8012736:	6808      	ldr	r0, [r1, #0]
 8012738:	6881      	ldr	r1, [r0, #8]
 801273a:	f001 bbcb 	b.w	8013ed4 <_vfiprintf_r>
 801273e:	bf00      	nop
 8012740:	20000130 	.word	0x20000130

08012744 <__swbuf_r>:
 8012744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012746:	460e      	mov	r6, r1
 8012748:	4614      	mov	r4, r2
 801274a:	4605      	mov	r5, r0
 801274c:	b118      	cbz	r0, 8012756 <__swbuf_r+0x12>
 801274e:	6a03      	ldr	r3, [r0, #32]
 8012750:	b90b      	cbnz	r3, 8012756 <__swbuf_r+0x12>
 8012752:	f7ff ff03 	bl	801255c <__sinit>
 8012756:	69a3      	ldr	r3, [r4, #24]
 8012758:	60a3      	str	r3, [r4, #8]
 801275a:	89a3      	ldrh	r3, [r4, #12]
 801275c:	071a      	lsls	r2, r3, #28
 801275e:	d501      	bpl.n	8012764 <__swbuf_r+0x20>
 8012760:	6923      	ldr	r3, [r4, #16]
 8012762:	b943      	cbnz	r3, 8012776 <__swbuf_r+0x32>
 8012764:	4621      	mov	r1, r4
 8012766:	4628      	mov	r0, r5
 8012768:	f000 f82a 	bl	80127c0 <__swsetup_r>
 801276c:	b118      	cbz	r0, 8012776 <__swbuf_r+0x32>
 801276e:	f04f 37ff 	mov.w	r7, #4294967295
 8012772:	4638      	mov	r0, r7
 8012774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012776:	6823      	ldr	r3, [r4, #0]
 8012778:	6922      	ldr	r2, [r4, #16]
 801277a:	1a98      	subs	r0, r3, r2
 801277c:	6963      	ldr	r3, [r4, #20]
 801277e:	b2f6      	uxtb	r6, r6
 8012780:	4283      	cmp	r3, r0
 8012782:	4637      	mov	r7, r6
 8012784:	dc05      	bgt.n	8012792 <__swbuf_r+0x4e>
 8012786:	4621      	mov	r1, r4
 8012788:	4628      	mov	r0, r5
 801278a:	f001 fd3f 	bl	801420c <_fflush_r>
 801278e:	2800      	cmp	r0, #0
 8012790:	d1ed      	bne.n	801276e <__swbuf_r+0x2a>
 8012792:	68a3      	ldr	r3, [r4, #8]
 8012794:	3b01      	subs	r3, #1
 8012796:	60a3      	str	r3, [r4, #8]
 8012798:	6823      	ldr	r3, [r4, #0]
 801279a:	1c5a      	adds	r2, r3, #1
 801279c:	6022      	str	r2, [r4, #0]
 801279e:	701e      	strb	r6, [r3, #0]
 80127a0:	6962      	ldr	r2, [r4, #20]
 80127a2:	1c43      	adds	r3, r0, #1
 80127a4:	429a      	cmp	r2, r3
 80127a6:	d004      	beq.n	80127b2 <__swbuf_r+0x6e>
 80127a8:	89a3      	ldrh	r3, [r4, #12]
 80127aa:	07db      	lsls	r3, r3, #31
 80127ac:	d5e1      	bpl.n	8012772 <__swbuf_r+0x2e>
 80127ae:	2e0a      	cmp	r6, #10
 80127b0:	d1df      	bne.n	8012772 <__swbuf_r+0x2e>
 80127b2:	4621      	mov	r1, r4
 80127b4:	4628      	mov	r0, r5
 80127b6:	f001 fd29 	bl	801420c <_fflush_r>
 80127ba:	2800      	cmp	r0, #0
 80127bc:	d0d9      	beq.n	8012772 <__swbuf_r+0x2e>
 80127be:	e7d6      	b.n	801276e <__swbuf_r+0x2a>

080127c0 <__swsetup_r>:
 80127c0:	b538      	push	{r3, r4, r5, lr}
 80127c2:	4b29      	ldr	r3, [pc, #164]	@ (8012868 <__swsetup_r+0xa8>)
 80127c4:	4605      	mov	r5, r0
 80127c6:	6818      	ldr	r0, [r3, #0]
 80127c8:	460c      	mov	r4, r1
 80127ca:	b118      	cbz	r0, 80127d4 <__swsetup_r+0x14>
 80127cc:	6a03      	ldr	r3, [r0, #32]
 80127ce:	b90b      	cbnz	r3, 80127d4 <__swsetup_r+0x14>
 80127d0:	f7ff fec4 	bl	801255c <__sinit>
 80127d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127d8:	0719      	lsls	r1, r3, #28
 80127da:	d422      	bmi.n	8012822 <__swsetup_r+0x62>
 80127dc:	06da      	lsls	r2, r3, #27
 80127de:	d407      	bmi.n	80127f0 <__swsetup_r+0x30>
 80127e0:	2209      	movs	r2, #9
 80127e2:	602a      	str	r2, [r5, #0]
 80127e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80127e8:	81a3      	strh	r3, [r4, #12]
 80127ea:	f04f 30ff 	mov.w	r0, #4294967295
 80127ee:	e033      	b.n	8012858 <__swsetup_r+0x98>
 80127f0:	0758      	lsls	r0, r3, #29
 80127f2:	d512      	bpl.n	801281a <__swsetup_r+0x5a>
 80127f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80127f6:	b141      	cbz	r1, 801280a <__swsetup_r+0x4a>
 80127f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80127fc:	4299      	cmp	r1, r3
 80127fe:	d002      	beq.n	8012806 <__swsetup_r+0x46>
 8012800:	4628      	mov	r0, r5
 8012802:	f000 ff71 	bl	80136e8 <_free_r>
 8012806:	2300      	movs	r3, #0
 8012808:	6363      	str	r3, [r4, #52]	@ 0x34
 801280a:	89a3      	ldrh	r3, [r4, #12]
 801280c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012810:	81a3      	strh	r3, [r4, #12]
 8012812:	2300      	movs	r3, #0
 8012814:	6063      	str	r3, [r4, #4]
 8012816:	6923      	ldr	r3, [r4, #16]
 8012818:	6023      	str	r3, [r4, #0]
 801281a:	89a3      	ldrh	r3, [r4, #12]
 801281c:	f043 0308 	orr.w	r3, r3, #8
 8012820:	81a3      	strh	r3, [r4, #12]
 8012822:	6923      	ldr	r3, [r4, #16]
 8012824:	b94b      	cbnz	r3, 801283a <__swsetup_r+0x7a>
 8012826:	89a3      	ldrh	r3, [r4, #12]
 8012828:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801282c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012830:	d003      	beq.n	801283a <__swsetup_r+0x7a>
 8012832:	4621      	mov	r1, r4
 8012834:	4628      	mov	r0, r5
 8012836:	f001 fd37 	bl	80142a8 <__smakebuf_r>
 801283a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801283e:	f013 0201 	ands.w	r2, r3, #1
 8012842:	d00a      	beq.n	801285a <__swsetup_r+0x9a>
 8012844:	2200      	movs	r2, #0
 8012846:	60a2      	str	r2, [r4, #8]
 8012848:	6962      	ldr	r2, [r4, #20]
 801284a:	4252      	negs	r2, r2
 801284c:	61a2      	str	r2, [r4, #24]
 801284e:	6922      	ldr	r2, [r4, #16]
 8012850:	b942      	cbnz	r2, 8012864 <__swsetup_r+0xa4>
 8012852:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012856:	d1c5      	bne.n	80127e4 <__swsetup_r+0x24>
 8012858:	bd38      	pop	{r3, r4, r5, pc}
 801285a:	0799      	lsls	r1, r3, #30
 801285c:	bf58      	it	pl
 801285e:	6962      	ldrpl	r2, [r4, #20]
 8012860:	60a2      	str	r2, [r4, #8]
 8012862:	e7f4      	b.n	801284e <__swsetup_r+0x8e>
 8012864:	2000      	movs	r0, #0
 8012866:	e7f7      	b.n	8012858 <__swsetup_r+0x98>
 8012868:	20000130 	.word	0x20000130

0801286c <memset>:
 801286c:	4402      	add	r2, r0
 801286e:	4603      	mov	r3, r0
 8012870:	4293      	cmp	r3, r2
 8012872:	d100      	bne.n	8012876 <memset+0xa>
 8012874:	4770      	bx	lr
 8012876:	f803 1b01 	strb.w	r1, [r3], #1
 801287a:	e7f9      	b.n	8012870 <memset+0x4>

0801287c <_localeconv_r>:
 801287c:	4800      	ldr	r0, [pc, #0]	@ (8012880 <_localeconv_r+0x4>)
 801287e:	4770      	bx	lr
 8012880:	20000270 	.word	0x20000270

08012884 <_close_r>:
 8012884:	b538      	push	{r3, r4, r5, lr}
 8012886:	4d06      	ldr	r5, [pc, #24]	@ (80128a0 <_close_r+0x1c>)
 8012888:	2300      	movs	r3, #0
 801288a:	4604      	mov	r4, r0
 801288c:	4608      	mov	r0, r1
 801288e:	602b      	str	r3, [r5, #0]
 8012890:	f7ef f886 	bl	80019a0 <_close>
 8012894:	1c43      	adds	r3, r0, #1
 8012896:	d102      	bne.n	801289e <_close_r+0x1a>
 8012898:	682b      	ldr	r3, [r5, #0]
 801289a:	b103      	cbz	r3, 801289e <_close_r+0x1a>
 801289c:	6023      	str	r3, [r4, #0]
 801289e:	bd38      	pop	{r3, r4, r5, pc}
 80128a0:	20006d70 	.word	0x20006d70

080128a4 <_reclaim_reent>:
 80128a4:	4b29      	ldr	r3, [pc, #164]	@ (801294c <_reclaim_reent+0xa8>)
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	4283      	cmp	r3, r0
 80128aa:	b570      	push	{r4, r5, r6, lr}
 80128ac:	4604      	mov	r4, r0
 80128ae:	d04b      	beq.n	8012948 <_reclaim_reent+0xa4>
 80128b0:	69c3      	ldr	r3, [r0, #28]
 80128b2:	b1ab      	cbz	r3, 80128e0 <_reclaim_reent+0x3c>
 80128b4:	68db      	ldr	r3, [r3, #12]
 80128b6:	b16b      	cbz	r3, 80128d4 <_reclaim_reent+0x30>
 80128b8:	2500      	movs	r5, #0
 80128ba:	69e3      	ldr	r3, [r4, #28]
 80128bc:	68db      	ldr	r3, [r3, #12]
 80128be:	5959      	ldr	r1, [r3, r5]
 80128c0:	2900      	cmp	r1, #0
 80128c2:	d13b      	bne.n	801293c <_reclaim_reent+0x98>
 80128c4:	3504      	adds	r5, #4
 80128c6:	2d80      	cmp	r5, #128	@ 0x80
 80128c8:	d1f7      	bne.n	80128ba <_reclaim_reent+0x16>
 80128ca:	69e3      	ldr	r3, [r4, #28]
 80128cc:	4620      	mov	r0, r4
 80128ce:	68d9      	ldr	r1, [r3, #12]
 80128d0:	f000 ff0a 	bl	80136e8 <_free_r>
 80128d4:	69e3      	ldr	r3, [r4, #28]
 80128d6:	6819      	ldr	r1, [r3, #0]
 80128d8:	b111      	cbz	r1, 80128e0 <_reclaim_reent+0x3c>
 80128da:	4620      	mov	r0, r4
 80128dc:	f000 ff04 	bl	80136e8 <_free_r>
 80128e0:	6961      	ldr	r1, [r4, #20]
 80128e2:	b111      	cbz	r1, 80128ea <_reclaim_reent+0x46>
 80128e4:	4620      	mov	r0, r4
 80128e6:	f000 feff 	bl	80136e8 <_free_r>
 80128ea:	69e1      	ldr	r1, [r4, #28]
 80128ec:	b111      	cbz	r1, 80128f4 <_reclaim_reent+0x50>
 80128ee:	4620      	mov	r0, r4
 80128f0:	f000 fefa 	bl	80136e8 <_free_r>
 80128f4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80128f6:	b111      	cbz	r1, 80128fe <_reclaim_reent+0x5a>
 80128f8:	4620      	mov	r0, r4
 80128fa:	f000 fef5 	bl	80136e8 <_free_r>
 80128fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012900:	b111      	cbz	r1, 8012908 <_reclaim_reent+0x64>
 8012902:	4620      	mov	r0, r4
 8012904:	f000 fef0 	bl	80136e8 <_free_r>
 8012908:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801290a:	b111      	cbz	r1, 8012912 <_reclaim_reent+0x6e>
 801290c:	4620      	mov	r0, r4
 801290e:	f000 feeb 	bl	80136e8 <_free_r>
 8012912:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012914:	b111      	cbz	r1, 801291c <_reclaim_reent+0x78>
 8012916:	4620      	mov	r0, r4
 8012918:	f000 fee6 	bl	80136e8 <_free_r>
 801291c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801291e:	b111      	cbz	r1, 8012926 <_reclaim_reent+0x82>
 8012920:	4620      	mov	r0, r4
 8012922:	f000 fee1 	bl	80136e8 <_free_r>
 8012926:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012928:	b111      	cbz	r1, 8012930 <_reclaim_reent+0x8c>
 801292a:	4620      	mov	r0, r4
 801292c:	f000 fedc 	bl	80136e8 <_free_r>
 8012930:	6a23      	ldr	r3, [r4, #32]
 8012932:	b14b      	cbz	r3, 8012948 <_reclaim_reent+0xa4>
 8012934:	4620      	mov	r0, r4
 8012936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801293a:	4718      	bx	r3
 801293c:	680e      	ldr	r6, [r1, #0]
 801293e:	4620      	mov	r0, r4
 8012940:	f000 fed2 	bl	80136e8 <_free_r>
 8012944:	4631      	mov	r1, r6
 8012946:	e7bb      	b.n	80128c0 <_reclaim_reent+0x1c>
 8012948:	bd70      	pop	{r4, r5, r6, pc}
 801294a:	bf00      	nop
 801294c:	20000130 	.word	0x20000130

08012950 <_lseek_r>:
 8012950:	b538      	push	{r3, r4, r5, lr}
 8012952:	4d07      	ldr	r5, [pc, #28]	@ (8012970 <_lseek_r+0x20>)
 8012954:	4604      	mov	r4, r0
 8012956:	4608      	mov	r0, r1
 8012958:	4611      	mov	r1, r2
 801295a:	2200      	movs	r2, #0
 801295c:	602a      	str	r2, [r5, #0]
 801295e:	461a      	mov	r2, r3
 8012960:	f7ef f845 	bl	80019ee <_lseek>
 8012964:	1c43      	adds	r3, r0, #1
 8012966:	d102      	bne.n	801296e <_lseek_r+0x1e>
 8012968:	682b      	ldr	r3, [r5, #0]
 801296a:	b103      	cbz	r3, 801296e <_lseek_r+0x1e>
 801296c:	6023      	str	r3, [r4, #0]
 801296e:	bd38      	pop	{r3, r4, r5, pc}
 8012970:	20006d70 	.word	0x20006d70

08012974 <_read_r>:
 8012974:	b538      	push	{r3, r4, r5, lr}
 8012976:	4d07      	ldr	r5, [pc, #28]	@ (8012994 <_read_r+0x20>)
 8012978:	4604      	mov	r4, r0
 801297a:	4608      	mov	r0, r1
 801297c:	4611      	mov	r1, r2
 801297e:	2200      	movs	r2, #0
 8012980:	602a      	str	r2, [r5, #0]
 8012982:	461a      	mov	r2, r3
 8012984:	f7ee ffef 	bl	8001966 <_read>
 8012988:	1c43      	adds	r3, r0, #1
 801298a:	d102      	bne.n	8012992 <_read_r+0x1e>
 801298c:	682b      	ldr	r3, [r5, #0]
 801298e:	b103      	cbz	r3, 8012992 <_read_r+0x1e>
 8012990:	6023      	str	r3, [r4, #0]
 8012992:	bd38      	pop	{r3, r4, r5, pc}
 8012994:	20006d70 	.word	0x20006d70

08012998 <_sbrk_r>:
 8012998:	b538      	push	{r3, r4, r5, lr}
 801299a:	4d06      	ldr	r5, [pc, #24]	@ (80129b4 <_sbrk_r+0x1c>)
 801299c:	2300      	movs	r3, #0
 801299e:	4604      	mov	r4, r0
 80129a0:	4608      	mov	r0, r1
 80129a2:	602b      	str	r3, [r5, #0]
 80129a4:	f7ef f830 	bl	8001a08 <_sbrk>
 80129a8:	1c43      	adds	r3, r0, #1
 80129aa:	d102      	bne.n	80129b2 <_sbrk_r+0x1a>
 80129ac:	682b      	ldr	r3, [r5, #0]
 80129ae:	b103      	cbz	r3, 80129b2 <_sbrk_r+0x1a>
 80129b0:	6023      	str	r3, [r4, #0]
 80129b2:	bd38      	pop	{r3, r4, r5, pc}
 80129b4:	20006d70 	.word	0x20006d70

080129b8 <_write_r>:
 80129b8:	b538      	push	{r3, r4, r5, lr}
 80129ba:	4d07      	ldr	r5, [pc, #28]	@ (80129d8 <_write_r+0x20>)
 80129bc:	4604      	mov	r4, r0
 80129be:	4608      	mov	r0, r1
 80129c0:	4611      	mov	r1, r2
 80129c2:	2200      	movs	r2, #0
 80129c4:	602a      	str	r2, [r5, #0]
 80129c6:	461a      	mov	r2, r3
 80129c8:	f7ee faad 	bl	8000f26 <_write>
 80129cc:	1c43      	adds	r3, r0, #1
 80129ce:	d102      	bne.n	80129d6 <_write_r+0x1e>
 80129d0:	682b      	ldr	r3, [r5, #0]
 80129d2:	b103      	cbz	r3, 80129d6 <_write_r+0x1e>
 80129d4:	6023      	str	r3, [r4, #0]
 80129d6:	bd38      	pop	{r3, r4, r5, pc}
 80129d8:	20006d70 	.word	0x20006d70

080129dc <__errno>:
 80129dc:	4b01      	ldr	r3, [pc, #4]	@ (80129e4 <__errno+0x8>)
 80129de:	6818      	ldr	r0, [r3, #0]
 80129e0:	4770      	bx	lr
 80129e2:	bf00      	nop
 80129e4:	20000130 	.word	0x20000130

080129e8 <__libc_init_array>:
 80129e8:	b570      	push	{r4, r5, r6, lr}
 80129ea:	4d0d      	ldr	r5, [pc, #52]	@ (8012a20 <__libc_init_array+0x38>)
 80129ec:	4c0d      	ldr	r4, [pc, #52]	@ (8012a24 <__libc_init_array+0x3c>)
 80129ee:	1b64      	subs	r4, r4, r5
 80129f0:	10a4      	asrs	r4, r4, #2
 80129f2:	2600      	movs	r6, #0
 80129f4:	42a6      	cmp	r6, r4
 80129f6:	d109      	bne.n	8012a0c <__libc_init_array+0x24>
 80129f8:	4d0b      	ldr	r5, [pc, #44]	@ (8012a28 <__libc_init_array+0x40>)
 80129fa:	4c0c      	ldr	r4, [pc, #48]	@ (8012a2c <__libc_init_array+0x44>)
 80129fc:	f001 fd62 	bl	80144c4 <_init>
 8012a00:	1b64      	subs	r4, r4, r5
 8012a02:	10a4      	asrs	r4, r4, #2
 8012a04:	2600      	movs	r6, #0
 8012a06:	42a6      	cmp	r6, r4
 8012a08:	d105      	bne.n	8012a16 <__libc_init_array+0x2e>
 8012a0a:	bd70      	pop	{r4, r5, r6, pc}
 8012a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a10:	4798      	blx	r3
 8012a12:	3601      	adds	r6, #1
 8012a14:	e7ee      	b.n	80129f4 <__libc_init_array+0xc>
 8012a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a1a:	4798      	blx	r3
 8012a1c:	3601      	adds	r6, #1
 8012a1e:	e7f2      	b.n	8012a06 <__libc_init_array+0x1e>
 8012a20:	08014ca8 	.word	0x08014ca8
 8012a24:	08014ca8 	.word	0x08014ca8
 8012a28:	08014ca8 	.word	0x08014ca8
 8012a2c:	08014cac 	.word	0x08014cac

08012a30 <memcpy>:
 8012a30:	440a      	add	r2, r1
 8012a32:	4291      	cmp	r1, r2
 8012a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8012a38:	d100      	bne.n	8012a3c <memcpy+0xc>
 8012a3a:	4770      	bx	lr
 8012a3c:	b510      	push	{r4, lr}
 8012a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012a46:	4291      	cmp	r1, r2
 8012a48:	d1f9      	bne.n	8012a3e <memcpy+0xe>
 8012a4a:	bd10      	pop	{r4, pc}

08012a4c <quorem>:
 8012a4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a50:	6903      	ldr	r3, [r0, #16]
 8012a52:	690c      	ldr	r4, [r1, #16]
 8012a54:	42a3      	cmp	r3, r4
 8012a56:	4607      	mov	r7, r0
 8012a58:	db7e      	blt.n	8012b58 <quorem+0x10c>
 8012a5a:	3c01      	subs	r4, #1
 8012a5c:	f101 0814 	add.w	r8, r1, #20
 8012a60:	00a3      	lsls	r3, r4, #2
 8012a62:	f100 0514 	add.w	r5, r0, #20
 8012a66:	9300      	str	r3, [sp, #0]
 8012a68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012a6c:	9301      	str	r3, [sp, #4]
 8012a6e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012a72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012a76:	3301      	adds	r3, #1
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012a7e:	fbb2 f6f3 	udiv	r6, r2, r3
 8012a82:	d32e      	bcc.n	8012ae2 <quorem+0x96>
 8012a84:	f04f 0a00 	mov.w	sl, #0
 8012a88:	46c4      	mov	ip, r8
 8012a8a:	46ae      	mov	lr, r5
 8012a8c:	46d3      	mov	fp, sl
 8012a8e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012a92:	b298      	uxth	r0, r3
 8012a94:	fb06 a000 	mla	r0, r6, r0, sl
 8012a98:	0c02      	lsrs	r2, r0, #16
 8012a9a:	0c1b      	lsrs	r3, r3, #16
 8012a9c:	fb06 2303 	mla	r3, r6, r3, r2
 8012aa0:	f8de 2000 	ldr.w	r2, [lr]
 8012aa4:	b280      	uxth	r0, r0
 8012aa6:	b292      	uxth	r2, r2
 8012aa8:	1a12      	subs	r2, r2, r0
 8012aaa:	445a      	add	r2, fp
 8012aac:	f8de 0000 	ldr.w	r0, [lr]
 8012ab0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012ab4:	b29b      	uxth	r3, r3
 8012ab6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012aba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012abe:	b292      	uxth	r2, r2
 8012ac0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012ac4:	45e1      	cmp	r9, ip
 8012ac6:	f84e 2b04 	str.w	r2, [lr], #4
 8012aca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012ace:	d2de      	bcs.n	8012a8e <quorem+0x42>
 8012ad0:	9b00      	ldr	r3, [sp, #0]
 8012ad2:	58eb      	ldr	r3, [r5, r3]
 8012ad4:	b92b      	cbnz	r3, 8012ae2 <quorem+0x96>
 8012ad6:	9b01      	ldr	r3, [sp, #4]
 8012ad8:	3b04      	subs	r3, #4
 8012ada:	429d      	cmp	r5, r3
 8012adc:	461a      	mov	r2, r3
 8012ade:	d32f      	bcc.n	8012b40 <quorem+0xf4>
 8012ae0:	613c      	str	r4, [r7, #16]
 8012ae2:	4638      	mov	r0, r7
 8012ae4:	f001 f8c4 	bl	8013c70 <__mcmp>
 8012ae8:	2800      	cmp	r0, #0
 8012aea:	db25      	blt.n	8012b38 <quorem+0xec>
 8012aec:	4629      	mov	r1, r5
 8012aee:	2000      	movs	r0, #0
 8012af0:	f858 2b04 	ldr.w	r2, [r8], #4
 8012af4:	f8d1 c000 	ldr.w	ip, [r1]
 8012af8:	fa1f fe82 	uxth.w	lr, r2
 8012afc:	fa1f f38c 	uxth.w	r3, ip
 8012b00:	eba3 030e 	sub.w	r3, r3, lr
 8012b04:	4403      	add	r3, r0
 8012b06:	0c12      	lsrs	r2, r2, #16
 8012b08:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012b0c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012b10:	b29b      	uxth	r3, r3
 8012b12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012b16:	45c1      	cmp	r9, r8
 8012b18:	f841 3b04 	str.w	r3, [r1], #4
 8012b1c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012b20:	d2e6      	bcs.n	8012af0 <quorem+0xa4>
 8012b22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012b26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012b2a:	b922      	cbnz	r2, 8012b36 <quorem+0xea>
 8012b2c:	3b04      	subs	r3, #4
 8012b2e:	429d      	cmp	r5, r3
 8012b30:	461a      	mov	r2, r3
 8012b32:	d30b      	bcc.n	8012b4c <quorem+0x100>
 8012b34:	613c      	str	r4, [r7, #16]
 8012b36:	3601      	adds	r6, #1
 8012b38:	4630      	mov	r0, r6
 8012b3a:	b003      	add	sp, #12
 8012b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b40:	6812      	ldr	r2, [r2, #0]
 8012b42:	3b04      	subs	r3, #4
 8012b44:	2a00      	cmp	r2, #0
 8012b46:	d1cb      	bne.n	8012ae0 <quorem+0x94>
 8012b48:	3c01      	subs	r4, #1
 8012b4a:	e7c6      	b.n	8012ada <quorem+0x8e>
 8012b4c:	6812      	ldr	r2, [r2, #0]
 8012b4e:	3b04      	subs	r3, #4
 8012b50:	2a00      	cmp	r2, #0
 8012b52:	d1ef      	bne.n	8012b34 <quorem+0xe8>
 8012b54:	3c01      	subs	r4, #1
 8012b56:	e7ea      	b.n	8012b2e <quorem+0xe2>
 8012b58:	2000      	movs	r0, #0
 8012b5a:	e7ee      	b.n	8012b3a <quorem+0xee>
 8012b5c:	0000      	movs	r0, r0
	...

08012b60 <_dtoa_r>:
 8012b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b64:	69c7      	ldr	r7, [r0, #28]
 8012b66:	b099      	sub	sp, #100	@ 0x64
 8012b68:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012b6c:	ec55 4b10 	vmov	r4, r5, d0
 8012b70:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012b72:	9109      	str	r1, [sp, #36]	@ 0x24
 8012b74:	4683      	mov	fp, r0
 8012b76:	920e      	str	r2, [sp, #56]	@ 0x38
 8012b78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012b7a:	b97f      	cbnz	r7, 8012b9c <_dtoa_r+0x3c>
 8012b7c:	2010      	movs	r0, #16
 8012b7e:	f7fe ff53 	bl	8011a28 <malloc>
 8012b82:	4602      	mov	r2, r0
 8012b84:	f8cb 001c 	str.w	r0, [fp, #28]
 8012b88:	b920      	cbnz	r0, 8012b94 <_dtoa_r+0x34>
 8012b8a:	4ba7      	ldr	r3, [pc, #668]	@ (8012e28 <_dtoa_r+0x2c8>)
 8012b8c:	21ef      	movs	r1, #239	@ 0xef
 8012b8e:	48a7      	ldr	r0, [pc, #668]	@ (8012e2c <_dtoa_r+0x2cc>)
 8012b90:	f001 fbe8 	bl	8014364 <__assert_func>
 8012b94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012b98:	6007      	str	r7, [r0, #0]
 8012b9a:	60c7      	str	r7, [r0, #12]
 8012b9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012ba0:	6819      	ldr	r1, [r3, #0]
 8012ba2:	b159      	cbz	r1, 8012bbc <_dtoa_r+0x5c>
 8012ba4:	685a      	ldr	r2, [r3, #4]
 8012ba6:	604a      	str	r2, [r1, #4]
 8012ba8:	2301      	movs	r3, #1
 8012baa:	4093      	lsls	r3, r2
 8012bac:	608b      	str	r3, [r1, #8]
 8012bae:	4658      	mov	r0, fp
 8012bb0:	f000 fe24 	bl	80137fc <_Bfree>
 8012bb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012bb8:	2200      	movs	r2, #0
 8012bba:	601a      	str	r2, [r3, #0]
 8012bbc:	1e2b      	subs	r3, r5, #0
 8012bbe:	bfb9      	ittee	lt
 8012bc0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012bc4:	9303      	strlt	r3, [sp, #12]
 8012bc6:	2300      	movge	r3, #0
 8012bc8:	6033      	strge	r3, [r6, #0]
 8012bca:	9f03      	ldr	r7, [sp, #12]
 8012bcc:	4b98      	ldr	r3, [pc, #608]	@ (8012e30 <_dtoa_r+0x2d0>)
 8012bce:	bfbc      	itt	lt
 8012bd0:	2201      	movlt	r2, #1
 8012bd2:	6032      	strlt	r2, [r6, #0]
 8012bd4:	43bb      	bics	r3, r7
 8012bd6:	d112      	bne.n	8012bfe <_dtoa_r+0x9e>
 8012bd8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012bda:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012bde:	6013      	str	r3, [r2, #0]
 8012be0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012be4:	4323      	orrs	r3, r4
 8012be6:	f000 854d 	beq.w	8013684 <_dtoa_r+0xb24>
 8012bea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012bec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012e44 <_dtoa_r+0x2e4>
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	f000 854f 	beq.w	8013694 <_dtoa_r+0xb34>
 8012bf6:	f10a 0303 	add.w	r3, sl, #3
 8012bfa:	f000 bd49 	b.w	8013690 <_dtoa_r+0xb30>
 8012bfe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012c02:	2200      	movs	r2, #0
 8012c04:	ec51 0b17 	vmov	r0, r1, d7
 8012c08:	2300      	movs	r3, #0
 8012c0a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012c0e:	f7ed ff7b 	bl	8000b08 <__aeabi_dcmpeq>
 8012c12:	4680      	mov	r8, r0
 8012c14:	b158      	cbz	r0, 8012c2e <_dtoa_r+0xce>
 8012c16:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012c18:	2301      	movs	r3, #1
 8012c1a:	6013      	str	r3, [r2, #0]
 8012c1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012c1e:	b113      	cbz	r3, 8012c26 <_dtoa_r+0xc6>
 8012c20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012c22:	4b84      	ldr	r3, [pc, #528]	@ (8012e34 <_dtoa_r+0x2d4>)
 8012c24:	6013      	str	r3, [r2, #0]
 8012c26:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012e48 <_dtoa_r+0x2e8>
 8012c2a:	f000 bd33 	b.w	8013694 <_dtoa_r+0xb34>
 8012c2e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012c32:	aa16      	add	r2, sp, #88	@ 0x58
 8012c34:	a917      	add	r1, sp, #92	@ 0x5c
 8012c36:	4658      	mov	r0, fp
 8012c38:	f001 f8ca 	bl	8013dd0 <__d2b>
 8012c3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012c40:	4681      	mov	r9, r0
 8012c42:	2e00      	cmp	r6, #0
 8012c44:	d077      	beq.n	8012d36 <_dtoa_r+0x1d6>
 8012c46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012c48:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012c50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012c54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012c58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012c5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012c60:	4619      	mov	r1, r3
 8012c62:	2200      	movs	r2, #0
 8012c64:	4b74      	ldr	r3, [pc, #464]	@ (8012e38 <_dtoa_r+0x2d8>)
 8012c66:	f7ed fb2f 	bl	80002c8 <__aeabi_dsub>
 8012c6a:	a369      	add	r3, pc, #420	@ (adr r3, 8012e10 <_dtoa_r+0x2b0>)
 8012c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c70:	f7ed fce2 	bl	8000638 <__aeabi_dmul>
 8012c74:	a368      	add	r3, pc, #416	@ (adr r3, 8012e18 <_dtoa_r+0x2b8>)
 8012c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c7a:	f7ed fb27 	bl	80002cc <__adddf3>
 8012c7e:	4604      	mov	r4, r0
 8012c80:	4630      	mov	r0, r6
 8012c82:	460d      	mov	r5, r1
 8012c84:	f7ed fc6e 	bl	8000564 <__aeabi_i2d>
 8012c88:	a365      	add	r3, pc, #404	@ (adr r3, 8012e20 <_dtoa_r+0x2c0>)
 8012c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c8e:	f7ed fcd3 	bl	8000638 <__aeabi_dmul>
 8012c92:	4602      	mov	r2, r0
 8012c94:	460b      	mov	r3, r1
 8012c96:	4620      	mov	r0, r4
 8012c98:	4629      	mov	r1, r5
 8012c9a:	f7ed fb17 	bl	80002cc <__adddf3>
 8012c9e:	4604      	mov	r4, r0
 8012ca0:	460d      	mov	r5, r1
 8012ca2:	f7ed ff79 	bl	8000b98 <__aeabi_d2iz>
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	4607      	mov	r7, r0
 8012caa:	2300      	movs	r3, #0
 8012cac:	4620      	mov	r0, r4
 8012cae:	4629      	mov	r1, r5
 8012cb0:	f7ed ff34 	bl	8000b1c <__aeabi_dcmplt>
 8012cb4:	b140      	cbz	r0, 8012cc8 <_dtoa_r+0x168>
 8012cb6:	4638      	mov	r0, r7
 8012cb8:	f7ed fc54 	bl	8000564 <__aeabi_i2d>
 8012cbc:	4622      	mov	r2, r4
 8012cbe:	462b      	mov	r3, r5
 8012cc0:	f7ed ff22 	bl	8000b08 <__aeabi_dcmpeq>
 8012cc4:	b900      	cbnz	r0, 8012cc8 <_dtoa_r+0x168>
 8012cc6:	3f01      	subs	r7, #1
 8012cc8:	2f16      	cmp	r7, #22
 8012cca:	d851      	bhi.n	8012d70 <_dtoa_r+0x210>
 8012ccc:	4b5b      	ldr	r3, [pc, #364]	@ (8012e3c <_dtoa_r+0x2dc>)
 8012cce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012cda:	f7ed ff1f 	bl	8000b1c <__aeabi_dcmplt>
 8012cde:	2800      	cmp	r0, #0
 8012ce0:	d048      	beq.n	8012d74 <_dtoa_r+0x214>
 8012ce2:	3f01      	subs	r7, #1
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	9312      	str	r3, [sp, #72]	@ 0x48
 8012ce8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012cea:	1b9b      	subs	r3, r3, r6
 8012cec:	1e5a      	subs	r2, r3, #1
 8012cee:	bf44      	itt	mi
 8012cf0:	f1c3 0801 	rsbmi	r8, r3, #1
 8012cf4:	2300      	movmi	r3, #0
 8012cf6:	9208      	str	r2, [sp, #32]
 8012cf8:	bf54      	ite	pl
 8012cfa:	f04f 0800 	movpl.w	r8, #0
 8012cfe:	9308      	strmi	r3, [sp, #32]
 8012d00:	2f00      	cmp	r7, #0
 8012d02:	db39      	blt.n	8012d78 <_dtoa_r+0x218>
 8012d04:	9b08      	ldr	r3, [sp, #32]
 8012d06:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012d08:	443b      	add	r3, r7
 8012d0a:	9308      	str	r3, [sp, #32]
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012d10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d12:	2b09      	cmp	r3, #9
 8012d14:	d864      	bhi.n	8012de0 <_dtoa_r+0x280>
 8012d16:	2b05      	cmp	r3, #5
 8012d18:	bfc4      	itt	gt
 8012d1a:	3b04      	subgt	r3, #4
 8012d1c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d20:	f1a3 0302 	sub.w	r3, r3, #2
 8012d24:	bfcc      	ite	gt
 8012d26:	2400      	movgt	r4, #0
 8012d28:	2401      	movle	r4, #1
 8012d2a:	2b03      	cmp	r3, #3
 8012d2c:	d863      	bhi.n	8012df6 <_dtoa_r+0x296>
 8012d2e:	e8df f003 	tbb	[pc, r3]
 8012d32:	372a      	.short	0x372a
 8012d34:	5535      	.short	0x5535
 8012d36:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012d3a:	441e      	add	r6, r3
 8012d3c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012d40:	2b20      	cmp	r3, #32
 8012d42:	bfc1      	itttt	gt
 8012d44:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012d48:	409f      	lslgt	r7, r3
 8012d4a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012d4e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012d52:	bfd6      	itet	le
 8012d54:	f1c3 0320 	rsble	r3, r3, #32
 8012d58:	ea47 0003 	orrgt.w	r0, r7, r3
 8012d5c:	fa04 f003 	lslle.w	r0, r4, r3
 8012d60:	f7ed fbf0 	bl	8000544 <__aeabi_ui2d>
 8012d64:	2201      	movs	r2, #1
 8012d66:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012d6a:	3e01      	subs	r6, #1
 8012d6c:	9214      	str	r2, [sp, #80]	@ 0x50
 8012d6e:	e777      	b.n	8012c60 <_dtoa_r+0x100>
 8012d70:	2301      	movs	r3, #1
 8012d72:	e7b8      	b.n	8012ce6 <_dtoa_r+0x186>
 8012d74:	9012      	str	r0, [sp, #72]	@ 0x48
 8012d76:	e7b7      	b.n	8012ce8 <_dtoa_r+0x188>
 8012d78:	427b      	negs	r3, r7
 8012d7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	eba8 0807 	sub.w	r8, r8, r7
 8012d82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012d84:	e7c4      	b.n	8012d10 <_dtoa_r+0x1b0>
 8012d86:	2300      	movs	r3, #0
 8012d88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012d8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	dc35      	bgt.n	8012dfc <_dtoa_r+0x29c>
 8012d90:	2301      	movs	r3, #1
 8012d92:	9300      	str	r3, [sp, #0]
 8012d94:	9307      	str	r3, [sp, #28]
 8012d96:	461a      	mov	r2, r3
 8012d98:	920e      	str	r2, [sp, #56]	@ 0x38
 8012d9a:	e00b      	b.n	8012db4 <_dtoa_r+0x254>
 8012d9c:	2301      	movs	r3, #1
 8012d9e:	e7f3      	b.n	8012d88 <_dtoa_r+0x228>
 8012da0:	2300      	movs	r3, #0
 8012da2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012da4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012da6:	18fb      	adds	r3, r7, r3
 8012da8:	9300      	str	r3, [sp, #0]
 8012daa:	3301      	adds	r3, #1
 8012dac:	2b01      	cmp	r3, #1
 8012dae:	9307      	str	r3, [sp, #28]
 8012db0:	bfb8      	it	lt
 8012db2:	2301      	movlt	r3, #1
 8012db4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012db8:	2100      	movs	r1, #0
 8012dba:	2204      	movs	r2, #4
 8012dbc:	f102 0514 	add.w	r5, r2, #20
 8012dc0:	429d      	cmp	r5, r3
 8012dc2:	d91f      	bls.n	8012e04 <_dtoa_r+0x2a4>
 8012dc4:	6041      	str	r1, [r0, #4]
 8012dc6:	4658      	mov	r0, fp
 8012dc8:	f000 fcd8 	bl	801377c <_Balloc>
 8012dcc:	4682      	mov	sl, r0
 8012dce:	2800      	cmp	r0, #0
 8012dd0:	d13c      	bne.n	8012e4c <_dtoa_r+0x2ec>
 8012dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8012e40 <_dtoa_r+0x2e0>)
 8012dd4:	4602      	mov	r2, r0
 8012dd6:	f240 11af 	movw	r1, #431	@ 0x1af
 8012dda:	e6d8      	b.n	8012b8e <_dtoa_r+0x2e>
 8012ddc:	2301      	movs	r3, #1
 8012dde:	e7e0      	b.n	8012da2 <_dtoa_r+0x242>
 8012de0:	2401      	movs	r4, #1
 8012de2:	2300      	movs	r3, #0
 8012de4:	9309      	str	r3, [sp, #36]	@ 0x24
 8012de6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012de8:	f04f 33ff 	mov.w	r3, #4294967295
 8012dec:	9300      	str	r3, [sp, #0]
 8012dee:	9307      	str	r3, [sp, #28]
 8012df0:	2200      	movs	r2, #0
 8012df2:	2312      	movs	r3, #18
 8012df4:	e7d0      	b.n	8012d98 <_dtoa_r+0x238>
 8012df6:	2301      	movs	r3, #1
 8012df8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012dfa:	e7f5      	b.n	8012de8 <_dtoa_r+0x288>
 8012dfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012dfe:	9300      	str	r3, [sp, #0]
 8012e00:	9307      	str	r3, [sp, #28]
 8012e02:	e7d7      	b.n	8012db4 <_dtoa_r+0x254>
 8012e04:	3101      	adds	r1, #1
 8012e06:	0052      	lsls	r2, r2, #1
 8012e08:	e7d8      	b.n	8012dbc <_dtoa_r+0x25c>
 8012e0a:	bf00      	nop
 8012e0c:	f3af 8000 	nop.w
 8012e10:	636f4361 	.word	0x636f4361
 8012e14:	3fd287a7 	.word	0x3fd287a7
 8012e18:	8b60c8b3 	.word	0x8b60c8b3
 8012e1c:	3fc68a28 	.word	0x3fc68a28
 8012e20:	509f79fb 	.word	0x509f79fb
 8012e24:	3fd34413 	.word	0x3fd34413
 8012e28:	0801496d 	.word	0x0801496d
 8012e2c:	08014984 	.word	0x08014984
 8012e30:	7ff00000 	.word	0x7ff00000
 8012e34:	0801493d 	.word	0x0801493d
 8012e38:	3ff80000 	.word	0x3ff80000
 8012e3c:	08014a80 	.word	0x08014a80
 8012e40:	080149dc 	.word	0x080149dc
 8012e44:	08014969 	.word	0x08014969
 8012e48:	0801493c 	.word	0x0801493c
 8012e4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012e50:	6018      	str	r0, [r3, #0]
 8012e52:	9b07      	ldr	r3, [sp, #28]
 8012e54:	2b0e      	cmp	r3, #14
 8012e56:	f200 80a4 	bhi.w	8012fa2 <_dtoa_r+0x442>
 8012e5a:	2c00      	cmp	r4, #0
 8012e5c:	f000 80a1 	beq.w	8012fa2 <_dtoa_r+0x442>
 8012e60:	2f00      	cmp	r7, #0
 8012e62:	dd33      	ble.n	8012ecc <_dtoa_r+0x36c>
 8012e64:	4bad      	ldr	r3, [pc, #692]	@ (801311c <_dtoa_r+0x5bc>)
 8012e66:	f007 020f 	and.w	r2, r7, #15
 8012e6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012e6e:	ed93 7b00 	vldr	d7, [r3]
 8012e72:	05f8      	lsls	r0, r7, #23
 8012e74:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012e78:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012e7c:	d516      	bpl.n	8012eac <_dtoa_r+0x34c>
 8012e7e:	4ba8      	ldr	r3, [pc, #672]	@ (8013120 <_dtoa_r+0x5c0>)
 8012e80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012e84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012e88:	f7ed fd00 	bl	800088c <__aeabi_ddiv>
 8012e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012e90:	f004 040f 	and.w	r4, r4, #15
 8012e94:	2603      	movs	r6, #3
 8012e96:	4da2      	ldr	r5, [pc, #648]	@ (8013120 <_dtoa_r+0x5c0>)
 8012e98:	b954      	cbnz	r4, 8012eb0 <_dtoa_r+0x350>
 8012e9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ea2:	f7ed fcf3 	bl	800088c <__aeabi_ddiv>
 8012ea6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012eaa:	e028      	b.n	8012efe <_dtoa_r+0x39e>
 8012eac:	2602      	movs	r6, #2
 8012eae:	e7f2      	b.n	8012e96 <_dtoa_r+0x336>
 8012eb0:	07e1      	lsls	r1, r4, #31
 8012eb2:	d508      	bpl.n	8012ec6 <_dtoa_r+0x366>
 8012eb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012eb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012ebc:	f7ed fbbc 	bl	8000638 <__aeabi_dmul>
 8012ec0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012ec4:	3601      	adds	r6, #1
 8012ec6:	1064      	asrs	r4, r4, #1
 8012ec8:	3508      	adds	r5, #8
 8012eca:	e7e5      	b.n	8012e98 <_dtoa_r+0x338>
 8012ecc:	f000 80d2 	beq.w	8013074 <_dtoa_r+0x514>
 8012ed0:	427c      	negs	r4, r7
 8012ed2:	4b92      	ldr	r3, [pc, #584]	@ (801311c <_dtoa_r+0x5bc>)
 8012ed4:	4d92      	ldr	r5, [pc, #584]	@ (8013120 <_dtoa_r+0x5c0>)
 8012ed6:	f004 020f 	and.w	r2, r4, #15
 8012eda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012ee6:	f7ed fba7 	bl	8000638 <__aeabi_dmul>
 8012eea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012eee:	1124      	asrs	r4, r4, #4
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	2602      	movs	r6, #2
 8012ef4:	2c00      	cmp	r4, #0
 8012ef6:	f040 80b2 	bne.w	801305e <_dtoa_r+0x4fe>
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d1d3      	bne.n	8012ea6 <_dtoa_r+0x346>
 8012efe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012f00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	f000 80b7 	beq.w	8013078 <_dtoa_r+0x518>
 8012f0a:	4b86      	ldr	r3, [pc, #536]	@ (8013124 <_dtoa_r+0x5c4>)
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	4620      	mov	r0, r4
 8012f10:	4629      	mov	r1, r5
 8012f12:	f7ed fe03 	bl	8000b1c <__aeabi_dcmplt>
 8012f16:	2800      	cmp	r0, #0
 8012f18:	f000 80ae 	beq.w	8013078 <_dtoa_r+0x518>
 8012f1c:	9b07      	ldr	r3, [sp, #28]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	f000 80aa 	beq.w	8013078 <_dtoa_r+0x518>
 8012f24:	9b00      	ldr	r3, [sp, #0]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	dd37      	ble.n	8012f9a <_dtoa_r+0x43a>
 8012f2a:	1e7b      	subs	r3, r7, #1
 8012f2c:	9304      	str	r3, [sp, #16]
 8012f2e:	4620      	mov	r0, r4
 8012f30:	4b7d      	ldr	r3, [pc, #500]	@ (8013128 <_dtoa_r+0x5c8>)
 8012f32:	2200      	movs	r2, #0
 8012f34:	4629      	mov	r1, r5
 8012f36:	f7ed fb7f 	bl	8000638 <__aeabi_dmul>
 8012f3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f3e:	9c00      	ldr	r4, [sp, #0]
 8012f40:	3601      	adds	r6, #1
 8012f42:	4630      	mov	r0, r6
 8012f44:	f7ed fb0e 	bl	8000564 <__aeabi_i2d>
 8012f48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012f4c:	f7ed fb74 	bl	8000638 <__aeabi_dmul>
 8012f50:	4b76      	ldr	r3, [pc, #472]	@ (801312c <_dtoa_r+0x5cc>)
 8012f52:	2200      	movs	r2, #0
 8012f54:	f7ed f9ba 	bl	80002cc <__adddf3>
 8012f58:	4605      	mov	r5, r0
 8012f5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012f5e:	2c00      	cmp	r4, #0
 8012f60:	f040 808d 	bne.w	801307e <_dtoa_r+0x51e>
 8012f64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f68:	4b71      	ldr	r3, [pc, #452]	@ (8013130 <_dtoa_r+0x5d0>)
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	f7ed f9ac 	bl	80002c8 <__aeabi_dsub>
 8012f70:	4602      	mov	r2, r0
 8012f72:	460b      	mov	r3, r1
 8012f74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012f78:	462a      	mov	r2, r5
 8012f7a:	4633      	mov	r3, r6
 8012f7c:	f7ed fdec 	bl	8000b58 <__aeabi_dcmpgt>
 8012f80:	2800      	cmp	r0, #0
 8012f82:	f040 828b 	bne.w	801349c <_dtoa_r+0x93c>
 8012f86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f8a:	462a      	mov	r2, r5
 8012f8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012f90:	f7ed fdc4 	bl	8000b1c <__aeabi_dcmplt>
 8012f94:	2800      	cmp	r0, #0
 8012f96:	f040 8128 	bne.w	80131ea <_dtoa_r+0x68a>
 8012f9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8012f9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012fa2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	f2c0 815a 	blt.w	801325e <_dtoa_r+0x6fe>
 8012faa:	2f0e      	cmp	r7, #14
 8012fac:	f300 8157 	bgt.w	801325e <_dtoa_r+0x6fe>
 8012fb0:	4b5a      	ldr	r3, [pc, #360]	@ (801311c <_dtoa_r+0x5bc>)
 8012fb2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012fb6:	ed93 7b00 	vldr	d7, [r3]
 8012fba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	ed8d 7b00 	vstr	d7, [sp]
 8012fc2:	da03      	bge.n	8012fcc <_dtoa_r+0x46c>
 8012fc4:	9b07      	ldr	r3, [sp, #28]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	f340 8101 	ble.w	80131ce <_dtoa_r+0x66e>
 8012fcc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012fd0:	4656      	mov	r6, sl
 8012fd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012fd6:	4620      	mov	r0, r4
 8012fd8:	4629      	mov	r1, r5
 8012fda:	f7ed fc57 	bl	800088c <__aeabi_ddiv>
 8012fde:	f7ed fddb 	bl	8000b98 <__aeabi_d2iz>
 8012fe2:	4680      	mov	r8, r0
 8012fe4:	f7ed fabe 	bl	8000564 <__aeabi_i2d>
 8012fe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012fec:	f7ed fb24 	bl	8000638 <__aeabi_dmul>
 8012ff0:	4602      	mov	r2, r0
 8012ff2:	460b      	mov	r3, r1
 8012ff4:	4620      	mov	r0, r4
 8012ff6:	4629      	mov	r1, r5
 8012ff8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012ffc:	f7ed f964 	bl	80002c8 <__aeabi_dsub>
 8013000:	f806 4b01 	strb.w	r4, [r6], #1
 8013004:	9d07      	ldr	r5, [sp, #28]
 8013006:	eba6 040a 	sub.w	r4, r6, sl
 801300a:	42a5      	cmp	r5, r4
 801300c:	4602      	mov	r2, r0
 801300e:	460b      	mov	r3, r1
 8013010:	f040 8117 	bne.w	8013242 <_dtoa_r+0x6e2>
 8013014:	f7ed f95a 	bl	80002cc <__adddf3>
 8013018:	e9dd 2300 	ldrd	r2, r3, [sp]
 801301c:	4604      	mov	r4, r0
 801301e:	460d      	mov	r5, r1
 8013020:	f7ed fd9a 	bl	8000b58 <__aeabi_dcmpgt>
 8013024:	2800      	cmp	r0, #0
 8013026:	f040 80f9 	bne.w	801321c <_dtoa_r+0x6bc>
 801302a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801302e:	4620      	mov	r0, r4
 8013030:	4629      	mov	r1, r5
 8013032:	f7ed fd69 	bl	8000b08 <__aeabi_dcmpeq>
 8013036:	b118      	cbz	r0, 8013040 <_dtoa_r+0x4e0>
 8013038:	f018 0f01 	tst.w	r8, #1
 801303c:	f040 80ee 	bne.w	801321c <_dtoa_r+0x6bc>
 8013040:	4649      	mov	r1, r9
 8013042:	4658      	mov	r0, fp
 8013044:	f000 fbda 	bl	80137fc <_Bfree>
 8013048:	2300      	movs	r3, #0
 801304a:	7033      	strb	r3, [r6, #0]
 801304c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801304e:	3701      	adds	r7, #1
 8013050:	601f      	str	r7, [r3, #0]
 8013052:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013054:	2b00      	cmp	r3, #0
 8013056:	f000 831d 	beq.w	8013694 <_dtoa_r+0xb34>
 801305a:	601e      	str	r6, [r3, #0]
 801305c:	e31a      	b.n	8013694 <_dtoa_r+0xb34>
 801305e:	07e2      	lsls	r2, r4, #31
 8013060:	d505      	bpl.n	801306e <_dtoa_r+0x50e>
 8013062:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013066:	f7ed fae7 	bl	8000638 <__aeabi_dmul>
 801306a:	3601      	adds	r6, #1
 801306c:	2301      	movs	r3, #1
 801306e:	1064      	asrs	r4, r4, #1
 8013070:	3508      	adds	r5, #8
 8013072:	e73f      	b.n	8012ef4 <_dtoa_r+0x394>
 8013074:	2602      	movs	r6, #2
 8013076:	e742      	b.n	8012efe <_dtoa_r+0x39e>
 8013078:	9c07      	ldr	r4, [sp, #28]
 801307a:	9704      	str	r7, [sp, #16]
 801307c:	e761      	b.n	8012f42 <_dtoa_r+0x3e2>
 801307e:	4b27      	ldr	r3, [pc, #156]	@ (801311c <_dtoa_r+0x5bc>)
 8013080:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013082:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013086:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801308a:	4454      	add	r4, sl
 801308c:	2900      	cmp	r1, #0
 801308e:	d053      	beq.n	8013138 <_dtoa_r+0x5d8>
 8013090:	4928      	ldr	r1, [pc, #160]	@ (8013134 <_dtoa_r+0x5d4>)
 8013092:	2000      	movs	r0, #0
 8013094:	f7ed fbfa 	bl	800088c <__aeabi_ddiv>
 8013098:	4633      	mov	r3, r6
 801309a:	462a      	mov	r2, r5
 801309c:	f7ed f914 	bl	80002c8 <__aeabi_dsub>
 80130a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80130a4:	4656      	mov	r6, sl
 80130a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80130aa:	f7ed fd75 	bl	8000b98 <__aeabi_d2iz>
 80130ae:	4605      	mov	r5, r0
 80130b0:	f7ed fa58 	bl	8000564 <__aeabi_i2d>
 80130b4:	4602      	mov	r2, r0
 80130b6:	460b      	mov	r3, r1
 80130b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80130bc:	f7ed f904 	bl	80002c8 <__aeabi_dsub>
 80130c0:	3530      	adds	r5, #48	@ 0x30
 80130c2:	4602      	mov	r2, r0
 80130c4:	460b      	mov	r3, r1
 80130c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80130ca:	f806 5b01 	strb.w	r5, [r6], #1
 80130ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80130d2:	f7ed fd23 	bl	8000b1c <__aeabi_dcmplt>
 80130d6:	2800      	cmp	r0, #0
 80130d8:	d171      	bne.n	80131be <_dtoa_r+0x65e>
 80130da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80130de:	4911      	ldr	r1, [pc, #68]	@ (8013124 <_dtoa_r+0x5c4>)
 80130e0:	2000      	movs	r0, #0
 80130e2:	f7ed f8f1 	bl	80002c8 <__aeabi_dsub>
 80130e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80130ea:	f7ed fd17 	bl	8000b1c <__aeabi_dcmplt>
 80130ee:	2800      	cmp	r0, #0
 80130f0:	f040 8095 	bne.w	801321e <_dtoa_r+0x6be>
 80130f4:	42a6      	cmp	r6, r4
 80130f6:	f43f af50 	beq.w	8012f9a <_dtoa_r+0x43a>
 80130fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80130fe:	4b0a      	ldr	r3, [pc, #40]	@ (8013128 <_dtoa_r+0x5c8>)
 8013100:	2200      	movs	r2, #0
 8013102:	f7ed fa99 	bl	8000638 <__aeabi_dmul>
 8013106:	4b08      	ldr	r3, [pc, #32]	@ (8013128 <_dtoa_r+0x5c8>)
 8013108:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801310c:	2200      	movs	r2, #0
 801310e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013112:	f7ed fa91 	bl	8000638 <__aeabi_dmul>
 8013116:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801311a:	e7c4      	b.n	80130a6 <_dtoa_r+0x546>
 801311c:	08014a80 	.word	0x08014a80
 8013120:	08014a58 	.word	0x08014a58
 8013124:	3ff00000 	.word	0x3ff00000
 8013128:	40240000 	.word	0x40240000
 801312c:	401c0000 	.word	0x401c0000
 8013130:	40140000 	.word	0x40140000
 8013134:	3fe00000 	.word	0x3fe00000
 8013138:	4631      	mov	r1, r6
 801313a:	4628      	mov	r0, r5
 801313c:	f7ed fa7c 	bl	8000638 <__aeabi_dmul>
 8013140:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013144:	9415      	str	r4, [sp, #84]	@ 0x54
 8013146:	4656      	mov	r6, sl
 8013148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801314c:	f7ed fd24 	bl	8000b98 <__aeabi_d2iz>
 8013150:	4605      	mov	r5, r0
 8013152:	f7ed fa07 	bl	8000564 <__aeabi_i2d>
 8013156:	4602      	mov	r2, r0
 8013158:	460b      	mov	r3, r1
 801315a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801315e:	f7ed f8b3 	bl	80002c8 <__aeabi_dsub>
 8013162:	3530      	adds	r5, #48	@ 0x30
 8013164:	f806 5b01 	strb.w	r5, [r6], #1
 8013168:	4602      	mov	r2, r0
 801316a:	460b      	mov	r3, r1
 801316c:	42a6      	cmp	r6, r4
 801316e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013172:	f04f 0200 	mov.w	r2, #0
 8013176:	d124      	bne.n	80131c2 <_dtoa_r+0x662>
 8013178:	4bac      	ldr	r3, [pc, #688]	@ (801342c <_dtoa_r+0x8cc>)
 801317a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801317e:	f7ed f8a5 	bl	80002cc <__adddf3>
 8013182:	4602      	mov	r2, r0
 8013184:	460b      	mov	r3, r1
 8013186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801318a:	f7ed fce5 	bl	8000b58 <__aeabi_dcmpgt>
 801318e:	2800      	cmp	r0, #0
 8013190:	d145      	bne.n	801321e <_dtoa_r+0x6be>
 8013192:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013196:	49a5      	ldr	r1, [pc, #660]	@ (801342c <_dtoa_r+0x8cc>)
 8013198:	2000      	movs	r0, #0
 801319a:	f7ed f895 	bl	80002c8 <__aeabi_dsub>
 801319e:	4602      	mov	r2, r0
 80131a0:	460b      	mov	r3, r1
 80131a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80131a6:	f7ed fcb9 	bl	8000b1c <__aeabi_dcmplt>
 80131aa:	2800      	cmp	r0, #0
 80131ac:	f43f aef5 	beq.w	8012f9a <_dtoa_r+0x43a>
 80131b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80131b2:	1e73      	subs	r3, r6, #1
 80131b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80131b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80131ba:	2b30      	cmp	r3, #48	@ 0x30
 80131bc:	d0f8      	beq.n	80131b0 <_dtoa_r+0x650>
 80131be:	9f04      	ldr	r7, [sp, #16]
 80131c0:	e73e      	b.n	8013040 <_dtoa_r+0x4e0>
 80131c2:	4b9b      	ldr	r3, [pc, #620]	@ (8013430 <_dtoa_r+0x8d0>)
 80131c4:	f7ed fa38 	bl	8000638 <__aeabi_dmul>
 80131c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80131cc:	e7bc      	b.n	8013148 <_dtoa_r+0x5e8>
 80131ce:	d10c      	bne.n	80131ea <_dtoa_r+0x68a>
 80131d0:	4b98      	ldr	r3, [pc, #608]	@ (8013434 <_dtoa_r+0x8d4>)
 80131d2:	2200      	movs	r2, #0
 80131d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80131d8:	f7ed fa2e 	bl	8000638 <__aeabi_dmul>
 80131dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80131e0:	f7ed fcb0 	bl	8000b44 <__aeabi_dcmpge>
 80131e4:	2800      	cmp	r0, #0
 80131e6:	f000 8157 	beq.w	8013498 <_dtoa_r+0x938>
 80131ea:	2400      	movs	r4, #0
 80131ec:	4625      	mov	r5, r4
 80131ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80131f0:	43db      	mvns	r3, r3
 80131f2:	9304      	str	r3, [sp, #16]
 80131f4:	4656      	mov	r6, sl
 80131f6:	2700      	movs	r7, #0
 80131f8:	4621      	mov	r1, r4
 80131fa:	4658      	mov	r0, fp
 80131fc:	f000 fafe 	bl	80137fc <_Bfree>
 8013200:	2d00      	cmp	r5, #0
 8013202:	d0dc      	beq.n	80131be <_dtoa_r+0x65e>
 8013204:	b12f      	cbz	r7, 8013212 <_dtoa_r+0x6b2>
 8013206:	42af      	cmp	r7, r5
 8013208:	d003      	beq.n	8013212 <_dtoa_r+0x6b2>
 801320a:	4639      	mov	r1, r7
 801320c:	4658      	mov	r0, fp
 801320e:	f000 faf5 	bl	80137fc <_Bfree>
 8013212:	4629      	mov	r1, r5
 8013214:	4658      	mov	r0, fp
 8013216:	f000 faf1 	bl	80137fc <_Bfree>
 801321a:	e7d0      	b.n	80131be <_dtoa_r+0x65e>
 801321c:	9704      	str	r7, [sp, #16]
 801321e:	4633      	mov	r3, r6
 8013220:	461e      	mov	r6, r3
 8013222:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013226:	2a39      	cmp	r2, #57	@ 0x39
 8013228:	d107      	bne.n	801323a <_dtoa_r+0x6da>
 801322a:	459a      	cmp	sl, r3
 801322c:	d1f8      	bne.n	8013220 <_dtoa_r+0x6c0>
 801322e:	9a04      	ldr	r2, [sp, #16]
 8013230:	3201      	adds	r2, #1
 8013232:	9204      	str	r2, [sp, #16]
 8013234:	2230      	movs	r2, #48	@ 0x30
 8013236:	f88a 2000 	strb.w	r2, [sl]
 801323a:	781a      	ldrb	r2, [r3, #0]
 801323c:	3201      	adds	r2, #1
 801323e:	701a      	strb	r2, [r3, #0]
 8013240:	e7bd      	b.n	80131be <_dtoa_r+0x65e>
 8013242:	4b7b      	ldr	r3, [pc, #492]	@ (8013430 <_dtoa_r+0x8d0>)
 8013244:	2200      	movs	r2, #0
 8013246:	f7ed f9f7 	bl	8000638 <__aeabi_dmul>
 801324a:	2200      	movs	r2, #0
 801324c:	2300      	movs	r3, #0
 801324e:	4604      	mov	r4, r0
 8013250:	460d      	mov	r5, r1
 8013252:	f7ed fc59 	bl	8000b08 <__aeabi_dcmpeq>
 8013256:	2800      	cmp	r0, #0
 8013258:	f43f aebb 	beq.w	8012fd2 <_dtoa_r+0x472>
 801325c:	e6f0      	b.n	8013040 <_dtoa_r+0x4e0>
 801325e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013260:	2a00      	cmp	r2, #0
 8013262:	f000 80db 	beq.w	801341c <_dtoa_r+0x8bc>
 8013266:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013268:	2a01      	cmp	r2, #1
 801326a:	f300 80bf 	bgt.w	80133ec <_dtoa_r+0x88c>
 801326e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013270:	2a00      	cmp	r2, #0
 8013272:	f000 80b7 	beq.w	80133e4 <_dtoa_r+0x884>
 8013276:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801327a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801327c:	4646      	mov	r6, r8
 801327e:	9a08      	ldr	r2, [sp, #32]
 8013280:	2101      	movs	r1, #1
 8013282:	441a      	add	r2, r3
 8013284:	4658      	mov	r0, fp
 8013286:	4498      	add	r8, r3
 8013288:	9208      	str	r2, [sp, #32]
 801328a:	f000 fb6b 	bl	8013964 <__i2b>
 801328e:	4605      	mov	r5, r0
 8013290:	b15e      	cbz	r6, 80132aa <_dtoa_r+0x74a>
 8013292:	9b08      	ldr	r3, [sp, #32]
 8013294:	2b00      	cmp	r3, #0
 8013296:	dd08      	ble.n	80132aa <_dtoa_r+0x74a>
 8013298:	42b3      	cmp	r3, r6
 801329a:	9a08      	ldr	r2, [sp, #32]
 801329c:	bfa8      	it	ge
 801329e:	4633      	movge	r3, r6
 80132a0:	eba8 0803 	sub.w	r8, r8, r3
 80132a4:	1af6      	subs	r6, r6, r3
 80132a6:	1ad3      	subs	r3, r2, r3
 80132a8:	9308      	str	r3, [sp, #32]
 80132aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80132ac:	b1f3      	cbz	r3, 80132ec <_dtoa_r+0x78c>
 80132ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	f000 80b7 	beq.w	8013424 <_dtoa_r+0x8c4>
 80132b6:	b18c      	cbz	r4, 80132dc <_dtoa_r+0x77c>
 80132b8:	4629      	mov	r1, r5
 80132ba:	4622      	mov	r2, r4
 80132bc:	4658      	mov	r0, fp
 80132be:	f000 fc11 	bl	8013ae4 <__pow5mult>
 80132c2:	464a      	mov	r2, r9
 80132c4:	4601      	mov	r1, r0
 80132c6:	4605      	mov	r5, r0
 80132c8:	4658      	mov	r0, fp
 80132ca:	f000 fb61 	bl	8013990 <__multiply>
 80132ce:	4649      	mov	r1, r9
 80132d0:	9004      	str	r0, [sp, #16]
 80132d2:	4658      	mov	r0, fp
 80132d4:	f000 fa92 	bl	80137fc <_Bfree>
 80132d8:	9b04      	ldr	r3, [sp, #16]
 80132da:	4699      	mov	r9, r3
 80132dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80132de:	1b1a      	subs	r2, r3, r4
 80132e0:	d004      	beq.n	80132ec <_dtoa_r+0x78c>
 80132e2:	4649      	mov	r1, r9
 80132e4:	4658      	mov	r0, fp
 80132e6:	f000 fbfd 	bl	8013ae4 <__pow5mult>
 80132ea:	4681      	mov	r9, r0
 80132ec:	2101      	movs	r1, #1
 80132ee:	4658      	mov	r0, fp
 80132f0:	f000 fb38 	bl	8013964 <__i2b>
 80132f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80132f6:	4604      	mov	r4, r0
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	f000 81cf 	beq.w	801369c <_dtoa_r+0xb3c>
 80132fe:	461a      	mov	r2, r3
 8013300:	4601      	mov	r1, r0
 8013302:	4658      	mov	r0, fp
 8013304:	f000 fbee 	bl	8013ae4 <__pow5mult>
 8013308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801330a:	2b01      	cmp	r3, #1
 801330c:	4604      	mov	r4, r0
 801330e:	f300 8095 	bgt.w	801343c <_dtoa_r+0x8dc>
 8013312:	9b02      	ldr	r3, [sp, #8]
 8013314:	2b00      	cmp	r3, #0
 8013316:	f040 8087 	bne.w	8013428 <_dtoa_r+0x8c8>
 801331a:	9b03      	ldr	r3, [sp, #12]
 801331c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013320:	2b00      	cmp	r3, #0
 8013322:	f040 8089 	bne.w	8013438 <_dtoa_r+0x8d8>
 8013326:	9b03      	ldr	r3, [sp, #12]
 8013328:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801332c:	0d1b      	lsrs	r3, r3, #20
 801332e:	051b      	lsls	r3, r3, #20
 8013330:	b12b      	cbz	r3, 801333e <_dtoa_r+0x7de>
 8013332:	9b08      	ldr	r3, [sp, #32]
 8013334:	3301      	adds	r3, #1
 8013336:	9308      	str	r3, [sp, #32]
 8013338:	f108 0801 	add.w	r8, r8, #1
 801333c:	2301      	movs	r3, #1
 801333e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013340:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013342:	2b00      	cmp	r3, #0
 8013344:	f000 81b0 	beq.w	80136a8 <_dtoa_r+0xb48>
 8013348:	6923      	ldr	r3, [r4, #16]
 801334a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801334e:	6918      	ldr	r0, [r3, #16]
 8013350:	f000 fabc 	bl	80138cc <__hi0bits>
 8013354:	f1c0 0020 	rsb	r0, r0, #32
 8013358:	9b08      	ldr	r3, [sp, #32]
 801335a:	4418      	add	r0, r3
 801335c:	f010 001f 	ands.w	r0, r0, #31
 8013360:	d077      	beq.n	8013452 <_dtoa_r+0x8f2>
 8013362:	f1c0 0320 	rsb	r3, r0, #32
 8013366:	2b04      	cmp	r3, #4
 8013368:	dd6b      	ble.n	8013442 <_dtoa_r+0x8e2>
 801336a:	9b08      	ldr	r3, [sp, #32]
 801336c:	f1c0 001c 	rsb	r0, r0, #28
 8013370:	4403      	add	r3, r0
 8013372:	4480      	add	r8, r0
 8013374:	4406      	add	r6, r0
 8013376:	9308      	str	r3, [sp, #32]
 8013378:	f1b8 0f00 	cmp.w	r8, #0
 801337c:	dd05      	ble.n	801338a <_dtoa_r+0x82a>
 801337e:	4649      	mov	r1, r9
 8013380:	4642      	mov	r2, r8
 8013382:	4658      	mov	r0, fp
 8013384:	f000 fc08 	bl	8013b98 <__lshift>
 8013388:	4681      	mov	r9, r0
 801338a:	9b08      	ldr	r3, [sp, #32]
 801338c:	2b00      	cmp	r3, #0
 801338e:	dd05      	ble.n	801339c <_dtoa_r+0x83c>
 8013390:	4621      	mov	r1, r4
 8013392:	461a      	mov	r2, r3
 8013394:	4658      	mov	r0, fp
 8013396:	f000 fbff 	bl	8013b98 <__lshift>
 801339a:	4604      	mov	r4, r0
 801339c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d059      	beq.n	8013456 <_dtoa_r+0x8f6>
 80133a2:	4621      	mov	r1, r4
 80133a4:	4648      	mov	r0, r9
 80133a6:	f000 fc63 	bl	8013c70 <__mcmp>
 80133aa:	2800      	cmp	r0, #0
 80133ac:	da53      	bge.n	8013456 <_dtoa_r+0x8f6>
 80133ae:	1e7b      	subs	r3, r7, #1
 80133b0:	9304      	str	r3, [sp, #16]
 80133b2:	4649      	mov	r1, r9
 80133b4:	2300      	movs	r3, #0
 80133b6:	220a      	movs	r2, #10
 80133b8:	4658      	mov	r0, fp
 80133ba:	f000 fa41 	bl	8013840 <__multadd>
 80133be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80133c0:	4681      	mov	r9, r0
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	f000 8172 	beq.w	80136ac <_dtoa_r+0xb4c>
 80133c8:	2300      	movs	r3, #0
 80133ca:	4629      	mov	r1, r5
 80133cc:	220a      	movs	r2, #10
 80133ce:	4658      	mov	r0, fp
 80133d0:	f000 fa36 	bl	8013840 <__multadd>
 80133d4:	9b00      	ldr	r3, [sp, #0]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	4605      	mov	r5, r0
 80133da:	dc67      	bgt.n	80134ac <_dtoa_r+0x94c>
 80133dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133de:	2b02      	cmp	r3, #2
 80133e0:	dc41      	bgt.n	8013466 <_dtoa_r+0x906>
 80133e2:	e063      	b.n	80134ac <_dtoa_r+0x94c>
 80133e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80133e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80133ea:	e746      	b.n	801327a <_dtoa_r+0x71a>
 80133ec:	9b07      	ldr	r3, [sp, #28]
 80133ee:	1e5c      	subs	r4, r3, #1
 80133f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80133f2:	42a3      	cmp	r3, r4
 80133f4:	bfbf      	itttt	lt
 80133f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80133f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80133fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80133fc:	1ae3      	sublt	r3, r4, r3
 80133fe:	bfb4      	ite	lt
 8013400:	18d2      	addlt	r2, r2, r3
 8013402:	1b1c      	subge	r4, r3, r4
 8013404:	9b07      	ldr	r3, [sp, #28]
 8013406:	bfbc      	itt	lt
 8013408:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801340a:	2400      	movlt	r4, #0
 801340c:	2b00      	cmp	r3, #0
 801340e:	bfb5      	itete	lt
 8013410:	eba8 0603 	sublt.w	r6, r8, r3
 8013414:	9b07      	ldrge	r3, [sp, #28]
 8013416:	2300      	movlt	r3, #0
 8013418:	4646      	movge	r6, r8
 801341a:	e730      	b.n	801327e <_dtoa_r+0x71e>
 801341c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801341e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8013420:	4646      	mov	r6, r8
 8013422:	e735      	b.n	8013290 <_dtoa_r+0x730>
 8013424:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013426:	e75c      	b.n	80132e2 <_dtoa_r+0x782>
 8013428:	2300      	movs	r3, #0
 801342a:	e788      	b.n	801333e <_dtoa_r+0x7de>
 801342c:	3fe00000 	.word	0x3fe00000
 8013430:	40240000 	.word	0x40240000
 8013434:	40140000 	.word	0x40140000
 8013438:	9b02      	ldr	r3, [sp, #8]
 801343a:	e780      	b.n	801333e <_dtoa_r+0x7de>
 801343c:	2300      	movs	r3, #0
 801343e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013440:	e782      	b.n	8013348 <_dtoa_r+0x7e8>
 8013442:	d099      	beq.n	8013378 <_dtoa_r+0x818>
 8013444:	9a08      	ldr	r2, [sp, #32]
 8013446:	331c      	adds	r3, #28
 8013448:	441a      	add	r2, r3
 801344a:	4498      	add	r8, r3
 801344c:	441e      	add	r6, r3
 801344e:	9208      	str	r2, [sp, #32]
 8013450:	e792      	b.n	8013378 <_dtoa_r+0x818>
 8013452:	4603      	mov	r3, r0
 8013454:	e7f6      	b.n	8013444 <_dtoa_r+0x8e4>
 8013456:	9b07      	ldr	r3, [sp, #28]
 8013458:	9704      	str	r7, [sp, #16]
 801345a:	2b00      	cmp	r3, #0
 801345c:	dc20      	bgt.n	80134a0 <_dtoa_r+0x940>
 801345e:	9300      	str	r3, [sp, #0]
 8013460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013462:	2b02      	cmp	r3, #2
 8013464:	dd1e      	ble.n	80134a4 <_dtoa_r+0x944>
 8013466:	9b00      	ldr	r3, [sp, #0]
 8013468:	2b00      	cmp	r3, #0
 801346a:	f47f aec0 	bne.w	80131ee <_dtoa_r+0x68e>
 801346e:	4621      	mov	r1, r4
 8013470:	2205      	movs	r2, #5
 8013472:	4658      	mov	r0, fp
 8013474:	f000 f9e4 	bl	8013840 <__multadd>
 8013478:	4601      	mov	r1, r0
 801347a:	4604      	mov	r4, r0
 801347c:	4648      	mov	r0, r9
 801347e:	f000 fbf7 	bl	8013c70 <__mcmp>
 8013482:	2800      	cmp	r0, #0
 8013484:	f77f aeb3 	ble.w	80131ee <_dtoa_r+0x68e>
 8013488:	4656      	mov	r6, sl
 801348a:	2331      	movs	r3, #49	@ 0x31
 801348c:	f806 3b01 	strb.w	r3, [r6], #1
 8013490:	9b04      	ldr	r3, [sp, #16]
 8013492:	3301      	adds	r3, #1
 8013494:	9304      	str	r3, [sp, #16]
 8013496:	e6ae      	b.n	80131f6 <_dtoa_r+0x696>
 8013498:	9c07      	ldr	r4, [sp, #28]
 801349a:	9704      	str	r7, [sp, #16]
 801349c:	4625      	mov	r5, r4
 801349e:	e7f3      	b.n	8013488 <_dtoa_r+0x928>
 80134a0:	9b07      	ldr	r3, [sp, #28]
 80134a2:	9300      	str	r3, [sp, #0]
 80134a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	f000 8104 	beq.w	80136b4 <_dtoa_r+0xb54>
 80134ac:	2e00      	cmp	r6, #0
 80134ae:	dd05      	ble.n	80134bc <_dtoa_r+0x95c>
 80134b0:	4629      	mov	r1, r5
 80134b2:	4632      	mov	r2, r6
 80134b4:	4658      	mov	r0, fp
 80134b6:	f000 fb6f 	bl	8013b98 <__lshift>
 80134ba:	4605      	mov	r5, r0
 80134bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d05a      	beq.n	8013578 <_dtoa_r+0xa18>
 80134c2:	6869      	ldr	r1, [r5, #4]
 80134c4:	4658      	mov	r0, fp
 80134c6:	f000 f959 	bl	801377c <_Balloc>
 80134ca:	4606      	mov	r6, r0
 80134cc:	b928      	cbnz	r0, 80134da <_dtoa_r+0x97a>
 80134ce:	4b84      	ldr	r3, [pc, #528]	@ (80136e0 <_dtoa_r+0xb80>)
 80134d0:	4602      	mov	r2, r0
 80134d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80134d6:	f7ff bb5a 	b.w	8012b8e <_dtoa_r+0x2e>
 80134da:	692a      	ldr	r2, [r5, #16]
 80134dc:	3202      	adds	r2, #2
 80134de:	0092      	lsls	r2, r2, #2
 80134e0:	f105 010c 	add.w	r1, r5, #12
 80134e4:	300c      	adds	r0, #12
 80134e6:	f7ff faa3 	bl	8012a30 <memcpy>
 80134ea:	2201      	movs	r2, #1
 80134ec:	4631      	mov	r1, r6
 80134ee:	4658      	mov	r0, fp
 80134f0:	f000 fb52 	bl	8013b98 <__lshift>
 80134f4:	f10a 0301 	add.w	r3, sl, #1
 80134f8:	9307      	str	r3, [sp, #28]
 80134fa:	9b00      	ldr	r3, [sp, #0]
 80134fc:	4453      	add	r3, sl
 80134fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013500:	9b02      	ldr	r3, [sp, #8]
 8013502:	f003 0301 	and.w	r3, r3, #1
 8013506:	462f      	mov	r7, r5
 8013508:	930a      	str	r3, [sp, #40]	@ 0x28
 801350a:	4605      	mov	r5, r0
 801350c:	9b07      	ldr	r3, [sp, #28]
 801350e:	4621      	mov	r1, r4
 8013510:	3b01      	subs	r3, #1
 8013512:	4648      	mov	r0, r9
 8013514:	9300      	str	r3, [sp, #0]
 8013516:	f7ff fa99 	bl	8012a4c <quorem>
 801351a:	4639      	mov	r1, r7
 801351c:	9002      	str	r0, [sp, #8]
 801351e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8013522:	4648      	mov	r0, r9
 8013524:	f000 fba4 	bl	8013c70 <__mcmp>
 8013528:	462a      	mov	r2, r5
 801352a:	9008      	str	r0, [sp, #32]
 801352c:	4621      	mov	r1, r4
 801352e:	4658      	mov	r0, fp
 8013530:	f000 fbba 	bl	8013ca8 <__mdiff>
 8013534:	68c2      	ldr	r2, [r0, #12]
 8013536:	4606      	mov	r6, r0
 8013538:	bb02      	cbnz	r2, 801357c <_dtoa_r+0xa1c>
 801353a:	4601      	mov	r1, r0
 801353c:	4648      	mov	r0, r9
 801353e:	f000 fb97 	bl	8013c70 <__mcmp>
 8013542:	4602      	mov	r2, r0
 8013544:	4631      	mov	r1, r6
 8013546:	4658      	mov	r0, fp
 8013548:	920e      	str	r2, [sp, #56]	@ 0x38
 801354a:	f000 f957 	bl	80137fc <_Bfree>
 801354e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013550:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013552:	9e07      	ldr	r6, [sp, #28]
 8013554:	ea43 0102 	orr.w	r1, r3, r2
 8013558:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801355a:	4319      	orrs	r1, r3
 801355c:	d110      	bne.n	8013580 <_dtoa_r+0xa20>
 801355e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013562:	d029      	beq.n	80135b8 <_dtoa_r+0xa58>
 8013564:	9b08      	ldr	r3, [sp, #32]
 8013566:	2b00      	cmp	r3, #0
 8013568:	dd02      	ble.n	8013570 <_dtoa_r+0xa10>
 801356a:	9b02      	ldr	r3, [sp, #8]
 801356c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8013570:	9b00      	ldr	r3, [sp, #0]
 8013572:	f883 8000 	strb.w	r8, [r3]
 8013576:	e63f      	b.n	80131f8 <_dtoa_r+0x698>
 8013578:	4628      	mov	r0, r5
 801357a:	e7bb      	b.n	80134f4 <_dtoa_r+0x994>
 801357c:	2201      	movs	r2, #1
 801357e:	e7e1      	b.n	8013544 <_dtoa_r+0x9e4>
 8013580:	9b08      	ldr	r3, [sp, #32]
 8013582:	2b00      	cmp	r3, #0
 8013584:	db04      	blt.n	8013590 <_dtoa_r+0xa30>
 8013586:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013588:	430b      	orrs	r3, r1
 801358a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801358c:	430b      	orrs	r3, r1
 801358e:	d120      	bne.n	80135d2 <_dtoa_r+0xa72>
 8013590:	2a00      	cmp	r2, #0
 8013592:	dded      	ble.n	8013570 <_dtoa_r+0xa10>
 8013594:	4649      	mov	r1, r9
 8013596:	2201      	movs	r2, #1
 8013598:	4658      	mov	r0, fp
 801359a:	f000 fafd 	bl	8013b98 <__lshift>
 801359e:	4621      	mov	r1, r4
 80135a0:	4681      	mov	r9, r0
 80135a2:	f000 fb65 	bl	8013c70 <__mcmp>
 80135a6:	2800      	cmp	r0, #0
 80135a8:	dc03      	bgt.n	80135b2 <_dtoa_r+0xa52>
 80135aa:	d1e1      	bne.n	8013570 <_dtoa_r+0xa10>
 80135ac:	f018 0f01 	tst.w	r8, #1
 80135b0:	d0de      	beq.n	8013570 <_dtoa_r+0xa10>
 80135b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80135b6:	d1d8      	bne.n	801356a <_dtoa_r+0xa0a>
 80135b8:	9a00      	ldr	r2, [sp, #0]
 80135ba:	2339      	movs	r3, #57	@ 0x39
 80135bc:	7013      	strb	r3, [r2, #0]
 80135be:	4633      	mov	r3, r6
 80135c0:	461e      	mov	r6, r3
 80135c2:	3b01      	subs	r3, #1
 80135c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80135c8:	2a39      	cmp	r2, #57	@ 0x39
 80135ca:	d052      	beq.n	8013672 <_dtoa_r+0xb12>
 80135cc:	3201      	adds	r2, #1
 80135ce:	701a      	strb	r2, [r3, #0]
 80135d0:	e612      	b.n	80131f8 <_dtoa_r+0x698>
 80135d2:	2a00      	cmp	r2, #0
 80135d4:	dd07      	ble.n	80135e6 <_dtoa_r+0xa86>
 80135d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80135da:	d0ed      	beq.n	80135b8 <_dtoa_r+0xa58>
 80135dc:	9a00      	ldr	r2, [sp, #0]
 80135de:	f108 0301 	add.w	r3, r8, #1
 80135e2:	7013      	strb	r3, [r2, #0]
 80135e4:	e608      	b.n	80131f8 <_dtoa_r+0x698>
 80135e6:	9b07      	ldr	r3, [sp, #28]
 80135e8:	9a07      	ldr	r2, [sp, #28]
 80135ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 80135ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80135f0:	4293      	cmp	r3, r2
 80135f2:	d028      	beq.n	8013646 <_dtoa_r+0xae6>
 80135f4:	4649      	mov	r1, r9
 80135f6:	2300      	movs	r3, #0
 80135f8:	220a      	movs	r2, #10
 80135fa:	4658      	mov	r0, fp
 80135fc:	f000 f920 	bl	8013840 <__multadd>
 8013600:	42af      	cmp	r7, r5
 8013602:	4681      	mov	r9, r0
 8013604:	f04f 0300 	mov.w	r3, #0
 8013608:	f04f 020a 	mov.w	r2, #10
 801360c:	4639      	mov	r1, r7
 801360e:	4658      	mov	r0, fp
 8013610:	d107      	bne.n	8013622 <_dtoa_r+0xac2>
 8013612:	f000 f915 	bl	8013840 <__multadd>
 8013616:	4607      	mov	r7, r0
 8013618:	4605      	mov	r5, r0
 801361a:	9b07      	ldr	r3, [sp, #28]
 801361c:	3301      	adds	r3, #1
 801361e:	9307      	str	r3, [sp, #28]
 8013620:	e774      	b.n	801350c <_dtoa_r+0x9ac>
 8013622:	f000 f90d 	bl	8013840 <__multadd>
 8013626:	4629      	mov	r1, r5
 8013628:	4607      	mov	r7, r0
 801362a:	2300      	movs	r3, #0
 801362c:	220a      	movs	r2, #10
 801362e:	4658      	mov	r0, fp
 8013630:	f000 f906 	bl	8013840 <__multadd>
 8013634:	4605      	mov	r5, r0
 8013636:	e7f0      	b.n	801361a <_dtoa_r+0xaba>
 8013638:	9b00      	ldr	r3, [sp, #0]
 801363a:	2b00      	cmp	r3, #0
 801363c:	bfcc      	ite	gt
 801363e:	461e      	movgt	r6, r3
 8013640:	2601      	movle	r6, #1
 8013642:	4456      	add	r6, sl
 8013644:	2700      	movs	r7, #0
 8013646:	4649      	mov	r1, r9
 8013648:	2201      	movs	r2, #1
 801364a:	4658      	mov	r0, fp
 801364c:	f000 faa4 	bl	8013b98 <__lshift>
 8013650:	4621      	mov	r1, r4
 8013652:	4681      	mov	r9, r0
 8013654:	f000 fb0c 	bl	8013c70 <__mcmp>
 8013658:	2800      	cmp	r0, #0
 801365a:	dcb0      	bgt.n	80135be <_dtoa_r+0xa5e>
 801365c:	d102      	bne.n	8013664 <_dtoa_r+0xb04>
 801365e:	f018 0f01 	tst.w	r8, #1
 8013662:	d1ac      	bne.n	80135be <_dtoa_r+0xa5e>
 8013664:	4633      	mov	r3, r6
 8013666:	461e      	mov	r6, r3
 8013668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801366c:	2a30      	cmp	r2, #48	@ 0x30
 801366e:	d0fa      	beq.n	8013666 <_dtoa_r+0xb06>
 8013670:	e5c2      	b.n	80131f8 <_dtoa_r+0x698>
 8013672:	459a      	cmp	sl, r3
 8013674:	d1a4      	bne.n	80135c0 <_dtoa_r+0xa60>
 8013676:	9b04      	ldr	r3, [sp, #16]
 8013678:	3301      	adds	r3, #1
 801367a:	9304      	str	r3, [sp, #16]
 801367c:	2331      	movs	r3, #49	@ 0x31
 801367e:	f88a 3000 	strb.w	r3, [sl]
 8013682:	e5b9      	b.n	80131f8 <_dtoa_r+0x698>
 8013684:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013686:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80136e4 <_dtoa_r+0xb84>
 801368a:	b11b      	cbz	r3, 8013694 <_dtoa_r+0xb34>
 801368c:	f10a 0308 	add.w	r3, sl, #8
 8013690:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013692:	6013      	str	r3, [r2, #0]
 8013694:	4650      	mov	r0, sl
 8013696:	b019      	add	sp, #100	@ 0x64
 8013698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801369c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801369e:	2b01      	cmp	r3, #1
 80136a0:	f77f ae37 	ble.w	8013312 <_dtoa_r+0x7b2>
 80136a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80136a8:	2001      	movs	r0, #1
 80136aa:	e655      	b.n	8013358 <_dtoa_r+0x7f8>
 80136ac:	9b00      	ldr	r3, [sp, #0]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	f77f aed6 	ble.w	8013460 <_dtoa_r+0x900>
 80136b4:	4656      	mov	r6, sl
 80136b6:	4621      	mov	r1, r4
 80136b8:	4648      	mov	r0, r9
 80136ba:	f7ff f9c7 	bl	8012a4c <quorem>
 80136be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80136c2:	f806 8b01 	strb.w	r8, [r6], #1
 80136c6:	9b00      	ldr	r3, [sp, #0]
 80136c8:	eba6 020a 	sub.w	r2, r6, sl
 80136cc:	4293      	cmp	r3, r2
 80136ce:	ddb3      	ble.n	8013638 <_dtoa_r+0xad8>
 80136d0:	4649      	mov	r1, r9
 80136d2:	2300      	movs	r3, #0
 80136d4:	220a      	movs	r2, #10
 80136d6:	4658      	mov	r0, fp
 80136d8:	f000 f8b2 	bl	8013840 <__multadd>
 80136dc:	4681      	mov	r9, r0
 80136de:	e7ea      	b.n	80136b6 <_dtoa_r+0xb56>
 80136e0:	080149dc 	.word	0x080149dc
 80136e4:	08014960 	.word	0x08014960

080136e8 <_free_r>:
 80136e8:	b538      	push	{r3, r4, r5, lr}
 80136ea:	4605      	mov	r5, r0
 80136ec:	2900      	cmp	r1, #0
 80136ee:	d041      	beq.n	8013774 <_free_r+0x8c>
 80136f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80136f4:	1f0c      	subs	r4, r1, #4
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	bfb8      	it	lt
 80136fa:	18e4      	addlt	r4, r4, r3
 80136fc:	f7fe fa3e 	bl	8011b7c <__malloc_lock>
 8013700:	4a1d      	ldr	r2, [pc, #116]	@ (8013778 <_free_r+0x90>)
 8013702:	6813      	ldr	r3, [r2, #0]
 8013704:	b933      	cbnz	r3, 8013714 <_free_r+0x2c>
 8013706:	6063      	str	r3, [r4, #4]
 8013708:	6014      	str	r4, [r2, #0]
 801370a:	4628      	mov	r0, r5
 801370c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013710:	f7fe ba3a 	b.w	8011b88 <__malloc_unlock>
 8013714:	42a3      	cmp	r3, r4
 8013716:	d908      	bls.n	801372a <_free_r+0x42>
 8013718:	6820      	ldr	r0, [r4, #0]
 801371a:	1821      	adds	r1, r4, r0
 801371c:	428b      	cmp	r3, r1
 801371e:	bf01      	itttt	eq
 8013720:	6819      	ldreq	r1, [r3, #0]
 8013722:	685b      	ldreq	r3, [r3, #4]
 8013724:	1809      	addeq	r1, r1, r0
 8013726:	6021      	streq	r1, [r4, #0]
 8013728:	e7ed      	b.n	8013706 <_free_r+0x1e>
 801372a:	461a      	mov	r2, r3
 801372c:	685b      	ldr	r3, [r3, #4]
 801372e:	b10b      	cbz	r3, 8013734 <_free_r+0x4c>
 8013730:	42a3      	cmp	r3, r4
 8013732:	d9fa      	bls.n	801372a <_free_r+0x42>
 8013734:	6811      	ldr	r1, [r2, #0]
 8013736:	1850      	adds	r0, r2, r1
 8013738:	42a0      	cmp	r0, r4
 801373a:	d10b      	bne.n	8013754 <_free_r+0x6c>
 801373c:	6820      	ldr	r0, [r4, #0]
 801373e:	4401      	add	r1, r0
 8013740:	1850      	adds	r0, r2, r1
 8013742:	4283      	cmp	r3, r0
 8013744:	6011      	str	r1, [r2, #0]
 8013746:	d1e0      	bne.n	801370a <_free_r+0x22>
 8013748:	6818      	ldr	r0, [r3, #0]
 801374a:	685b      	ldr	r3, [r3, #4]
 801374c:	6053      	str	r3, [r2, #4]
 801374e:	4408      	add	r0, r1
 8013750:	6010      	str	r0, [r2, #0]
 8013752:	e7da      	b.n	801370a <_free_r+0x22>
 8013754:	d902      	bls.n	801375c <_free_r+0x74>
 8013756:	230c      	movs	r3, #12
 8013758:	602b      	str	r3, [r5, #0]
 801375a:	e7d6      	b.n	801370a <_free_r+0x22>
 801375c:	6820      	ldr	r0, [r4, #0]
 801375e:	1821      	adds	r1, r4, r0
 8013760:	428b      	cmp	r3, r1
 8013762:	bf04      	itt	eq
 8013764:	6819      	ldreq	r1, [r3, #0]
 8013766:	685b      	ldreq	r3, [r3, #4]
 8013768:	6063      	str	r3, [r4, #4]
 801376a:	bf04      	itt	eq
 801376c:	1809      	addeq	r1, r1, r0
 801376e:	6021      	streq	r1, [r4, #0]
 8013770:	6054      	str	r4, [r2, #4]
 8013772:	e7ca      	b.n	801370a <_free_r+0x22>
 8013774:	bd38      	pop	{r3, r4, r5, pc}
 8013776:	bf00      	nop
 8013778:	20006c30 	.word	0x20006c30

0801377c <_Balloc>:
 801377c:	b570      	push	{r4, r5, r6, lr}
 801377e:	69c6      	ldr	r6, [r0, #28]
 8013780:	4604      	mov	r4, r0
 8013782:	460d      	mov	r5, r1
 8013784:	b976      	cbnz	r6, 80137a4 <_Balloc+0x28>
 8013786:	2010      	movs	r0, #16
 8013788:	f7fe f94e 	bl	8011a28 <malloc>
 801378c:	4602      	mov	r2, r0
 801378e:	61e0      	str	r0, [r4, #28]
 8013790:	b920      	cbnz	r0, 801379c <_Balloc+0x20>
 8013792:	4b18      	ldr	r3, [pc, #96]	@ (80137f4 <_Balloc+0x78>)
 8013794:	4818      	ldr	r0, [pc, #96]	@ (80137f8 <_Balloc+0x7c>)
 8013796:	216b      	movs	r1, #107	@ 0x6b
 8013798:	f000 fde4 	bl	8014364 <__assert_func>
 801379c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80137a0:	6006      	str	r6, [r0, #0]
 80137a2:	60c6      	str	r6, [r0, #12]
 80137a4:	69e6      	ldr	r6, [r4, #28]
 80137a6:	68f3      	ldr	r3, [r6, #12]
 80137a8:	b183      	cbz	r3, 80137cc <_Balloc+0x50>
 80137aa:	69e3      	ldr	r3, [r4, #28]
 80137ac:	68db      	ldr	r3, [r3, #12]
 80137ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80137b2:	b9b8      	cbnz	r0, 80137e4 <_Balloc+0x68>
 80137b4:	2101      	movs	r1, #1
 80137b6:	fa01 f605 	lsl.w	r6, r1, r5
 80137ba:	1d72      	adds	r2, r6, #5
 80137bc:	0092      	lsls	r2, r2, #2
 80137be:	4620      	mov	r0, r4
 80137c0:	f000 fdee 	bl	80143a0 <_calloc_r>
 80137c4:	b160      	cbz	r0, 80137e0 <_Balloc+0x64>
 80137c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80137ca:	e00e      	b.n	80137ea <_Balloc+0x6e>
 80137cc:	2221      	movs	r2, #33	@ 0x21
 80137ce:	2104      	movs	r1, #4
 80137d0:	4620      	mov	r0, r4
 80137d2:	f000 fde5 	bl	80143a0 <_calloc_r>
 80137d6:	69e3      	ldr	r3, [r4, #28]
 80137d8:	60f0      	str	r0, [r6, #12]
 80137da:	68db      	ldr	r3, [r3, #12]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d1e4      	bne.n	80137aa <_Balloc+0x2e>
 80137e0:	2000      	movs	r0, #0
 80137e2:	bd70      	pop	{r4, r5, r6, pc}
 80137e4:	6802      	ldr	r2, [r0, #0]
 80137e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80137ea:	2300      	movs	r3, #0
 80137ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80137f0:	e7f7      	b.n	80137e2 <_Balloc+0x66>
 80137f2:	bf00      	nop
 80137f4:	0801496d 	.word	0x0801496d
 80137f8:	080149ed 	.word	0x080149ed

080137fc <_Bfree>:
 80137fc:	b570      	push	{r4, r5, r6, lr}
 80137fe:	69c6      	ldr	r6, [r0, #28]
 8013800:	4605      	mov	r5, r0
 8013802:	460c      	mov	r4, r1
 8013804:	b976      	cbnz	r6, 8013824 <_Bfree+0x28>
 8013806:	2010      	movs	r0, #16
 8013808:	f7fe f90e 	bl	8011a28 <malloc>
 801380c:	4602      	mov	r2, r0
 801380e:	61e8      	str	r0, [r5, #28]
 8013810:	b920      	cbnz	r0, 801381c <_Bfree+0x20>
 8013812:	4b09      	ldr	r3, [pc, #36]	@ (8013838 <_Bfree+0x3c>)
 8013814:	4809      	ldr	r0, [pc, #36]	@ (801383c <_Bfree+0x40>)
 8013816:	218f      	movs	r1, #143	@ 0x8f
 8013818:	f000 fda4 	bl	8014364 <__assert_func>
 801381c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013820:	6006      	str	r6, [r0, #0]
 8013822:	60c6      	str	r6, [r0, #12]
 8013824:	b13c      	cbz	r4, 8013836 <_Bfree+0x3a>
 8013826:	69eb      	ldr	r3, [r5, #28]
 8013828:	6862      	ldr	r2, [r4, #4]
 801382a:	68db      	ldr	r3, [r3, #12]
 801382c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013830:	6021      	str	r1, [r4, #0]
 8013832:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013836:	bd70      	pop	{r4, r5, r6, pc}
 8013838:	0801496d 	.word	0x0801496d
 801383c:	080149ed 	.word	0x080149ed

08013840 <__multadd>:
 8013840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013844:	690d      	ldr	r5, [r1, #16]
 8013846:	4607      	mov	r7, r0
 8013848:	460c      	mov	r4, r1
 801384a:	461e      	mov	r6, r3
 801384c:	f101 0c14 	add.w	ip, r1, #20
 8013850:	2000      	movs	r0, #0
 8013852:	f8dc 3000 	ldr.w	r3, [ip]
 8013856:	b299      	uxth	r1, r3
 8013858:	fb02 6101 	mla	r1, r2, r1, r6
 801385c:	0c1e      	lsrs	r6, r3, #16
 801385e:	0c0b      	lsrs	r3, r1, #16
 8013860:	fb02 3306 	mla	r3, r2, r6, r3
 8013864:	b289      	uxth	r1, r1
 8013866:	3001      	adds	r0, #1
 8013868:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801386c:	4285      	cmp	r5, r0
 801386e:	f84c 1b04 	str.w	r1, [ip], #4
 8013872:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013876:	dcec      	bgt.n	8013852 <__multadd+0x12>
 8013878:	b30e      	cbz	r6, 80138be <__multadd+0x7e>
 801387a:	68a3      	ldr	r3, [r4, #8]
 801387c:	42ab      	cmp	r3, r5
 801387e:	dc19      	bgt.n	80138b4 <__multadd+0x74>
 8013880:	6861      	ldr	r1, [r4, #4]
 8013882:	4638      	mov	r0, r7
 8013884:	3101      	adds	r1, #1
 8013886:	f7ff ff79 	bl	801377c <_Balloc>
 801388a:	4680      	mov	r8, r0
 801388c:	b928      	cbnz	r0, 801389a <__multadd+0x5a>
 801388e:	4602      	mov	r2, r0
 8013890:	4b0c      	ldr	r3, [pc, #48]	@ (80138c4 <__multadd+0x84>)
 8013892:	480d      	ldr	r0, [pc, #52]	@ (80138c8 <__multadd+0x88>)
 8013894:	21ba      	movs	r1, #186	@ 0xba
 8013896:	f000 fd65 	bl	8014364 <__assert_func>
 801389a:	6922      	ldr	r2, [r4, #16]
 801389c:	3202      	adds	r2, #2
 801389e:	f104 010c 	add.w	r1, r4, #12
 80138a2:	0092      	lsls	r2, r2, #2
 80138a4:	300c      	adds	r0, #12
 80138a6:	f7ff f8c3 	bl	8012a30 <memcpy>
 80138aa:	4621      	mov	r1, r4
 80138ac:	4638      	mov	r0, r7
 80138ae:	f7ff ffa5 	bl	80137fc <_Bfree>
 80138b2:	4644      	mov	r4, r8
 80138b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80138b8:	3501      	adds	r5, #1
 80138ba:	615e      	str	r6, [r3, #20]
 80138bc:	6125      	str	r5, [r4, #16]
 80138be:	4620      	mov	r0, r4
 80138c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138c4:	080149dc 	.word	0x080149dc
 80138c8:	080149ed 	.word	0x080149ed

080138cc <__hi0bits>:
 80138cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80138d0:	4603      	mov	r3, r0
 80138d2:	bf36      	itet	cc
 80138d4:	0403      	lslcc	r3, r0, #16
 80138d6:	2000      	movcs	r0, #0
 80138d8:	2010      	movcc	r0, #16
 80138da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80138de:	bf3c      	itt	cc
 80138e0:	021b      	lslcc	r3, r3, #8
 80138e2:	3008      	addcc	r0, #8
 80138e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80138e8:	bf3c      	itt	cc
 80138ea:	011b      	lslcc	r3, r3, #4
 80138ec:	3004      	addcc	r0, #4
 80138ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80138f2:	bf3c      	itt	cc
 80138f4:	009b      	lslcc	r3, r3, #2
 80138f6:	3002      	addcc	r0, #2
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	db05      	blt.n	8013908 <__hi0bits+0x3c>
 80138fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013900:	f100 0001 	add.w	r0, r0, #1
 8013904:	bf08      	it	eq
 8013906:	2020      	moveq	r0, #32
 8013908:	4770      	bx	lr

0801390a <__lo0bits>:
 801390a:	6803      	ldr	r3, [r0, #0]
 801390c:	4602      	mov	r2, r0
 801390e:	f013 0007 	ands.w	r0, r3, #7
 8013912:	d00b      	beq.n	801392c <__lo0bits+0x22>
 8013914:	07d9      	lsls	r1, r3, #31
 8013916:	d421      	bmi.n	801395c <__lo0bits+0x52>
 8013918:	0798      	lsls	r0, r3, #30
 801391a:	bf49      	itett	mi
 801391c:	085b      	lsrmi	r3, r3, #1
 801391e:	089b      	lsrpl	r3, r3, #2
 8013920:	2001      	movmi	r0, #1
 8013922:	6013      	strmi	r3, [r2, #0]
 8013924:	bf5c      	itt	pl
 8013926:	6013      	strpl	r3, [r2, #0]
 8013928:	2002      	movpl	r0, #2
 801392a:	4770      	bx	lr
 801392c:	b299      	uxth	r1, r3
 801392e:	b909      	cbnz	r1, 8013934 <__lo0bits+0x2a>
 8013930:	0c1b      	lsrs	r3, r3, #16
 8013932:	2010      	movs	r0, #16
 8013934:	b2d9      	uxtb	r1, r3
 8013936:	b909      	cbnz	r1, 801393c <__lo0bits+0x32>
 8013938:	3008      	adds	r0, #8
 801393a:	0a1b      	lsrs	r3, r3, #8
 801393c:	0719      	lsls	r1, r3, #28
 801393e:	bf04      	itt	eq
 8013940:	091b      	lsreq	r3, r3, #4
 8013942:	3004      	addeq	r0, #4
 8013944:	0799      	lsls	r1, r3, #30
 8013946:	bf04      	itt	eq
 8013948:	089b      	lsreq	r3, r3, #2
 801394a:	3002      	addeq	r0, #2
 801394c:	07d9      	lsls	r1, r3, #31
 801394e:	d403      	bmi.n	8013958 <__lo0bits+0x4e>
 8013950:	085b      	lsrs	r3, r3, #1
 8013952:	f100 0001 	add.w	r0, r0, #1
 8013956:	d003      	beq.n	8013960 <__lo0bits+0x56>
 8013958:	6013      	str	r3, [r2, #0]
 801395a:	4770      	bx	lr
 801395c:	2000      	movs	r0, #0
 801395e:	4770      	bx	lr
 8013960:	2020      	movs	r0, #32
 8013962:	4770      	bx	lr

08013964 <__i2b>:
 8013964:	b510      	push	{r4, lr}
 8013966:	460c      	mov	r4, r1
 8013968:	2101      	movs	r1, #1
 801396a:	f7ff ff07 	bl	801377c <_Balloc>
 801396e:	4602      	mov	r2, r0
 8013970:	b928      	cbnz	r0, 801397e <__i2b+0x1a>
 8013972:	4b05      	ldr	r3, [pc, #20]	@ (8013988 <__i2b+0x24>)
 8013974:	4805      	ldr	r0, [pc, #20]	@ (801398c <__i2b+0x28>)
 8013976:	f240 1145 	movw	r1, #325	@ 0x145
 801397a:	f000 fcf3 	bl	8014364 <__assert_func>
 801397e:	2301      	movs	r3, #1
 8013980:	6144      	str	r4, [r0, #20]
 8013982:	6103      	str	r3, [r0, #16]
 8013984:	bd10      	pop	{r4, pc}
 8013986:	bf00      	nop
 8013988:	080149dc 	.word	0x080149dc
 801398c:	080149ed 	.word	0x080149ed

08013990 <__multiply>:
 8013990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013994:	4614      	mov	r4, r2
 8013996:	690a      	ldr	r2, [r1, #16]
 8013998:	6923      	ldr	r3, [r4, #16]
 801399a:	429a      	cmp	r2, r3
 801399c:	bfa8      	it	ge
 801399e:	4623      	movge	r3, r4
 80139a0:	460f      	mov	r7, r1
 80139a2:	bfa4      	itt	ge
 80139a4:	460c      	movge	r4, r1
 80139a6:	461f      	movge	r7, r3
 80139a8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80139ac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80139b0:	68a3      	ldr	r3, [r4, #8]
 80139b2:	6861      	ldr	r1, [r4, #4]
 80139b4:	eb0a 0609 	add.w	r6, sl, r9
 80139b8:	42b3      	cmp	r3, r6
 80139ba:	b085      	sub	sp, #20
 80139bc:	bfb8      	it	lt
 80139be:	3101      	addlt	r1, #1
 80139c0:	f7ff fedc 	bl	801377c <_Balloc>
 80139c4:	b930      	cbnz	r0, 80139d4 <__multiply+0x44>
 80139c6:	4602      	mov	r2, r0
 80139c8:	4b44      	ldr	r3, [pc, #272]	@ (8013adc <__multiply+0x14c>)
 80139ca:	4845      	ldr	r0, [pc, #276]	@ (8013ae0 <__multiply+0x150>)
 80139cc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80139d0:	f000 fcc8 	bl	8014364 <__assert_func>
 80139d4:	f100 0514 	add.w	r5, r0, #20
 80139d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80139dc:	462b      	mov	r3, r5
 80139de:	2200      	movs	r2, #0
 80139e0:	4543      	cmp	r3, r8
 80139e2:	d321      	bcc.n	8013a28 <__multiply+0x98>
 80139e4:	f107 0114 	add.w	r1, r7, #20
 80139e8:	f104 0214 	add.w	r2, r4, #20
 80139ec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80139f0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80139f4:	9302      	str	r3, [sp, #8]
 80139f6:	1b13      	subs	r3, r2, r4
 80139f8:	3b15      	subs	r3, #21
 80139fa:	f023 0303 	bic.w	r3, r3, #3
 80139fe:	3304      	adds	r3, #4
 8013a00:	f104 0715 	add.w	r7, r4, #21
 8013a04:	42ba      	cmp	r2, r7
 8013a06:	bf38      	it	cc
 8013a08:	2304      	movcc	r3, #4
 8013a0a:	9301      	str	r3, [sp, #4]
 8013a0c:	9b02      	ldr	r3, [sp, #8]
 8013a0e:	9103      	str	r1, [sp, #12]
 8013a10:	428b      	cmp	r3, r1
 8013a12:	d80c      	bhi.n	8013a2e <__multiply+0x9e>
 8013a14:	2e00      	cmp	r6, #0
 8013a16:	dd03      	ble.n	8013a20 <__multiply+0x90>
 8013a18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d05b      	beq.n	8013ad8 <__multiply+0x148>
 8013a20:	6106      	str	r6, [r0, #16]
 8013a22:	b005      	add	sp, #20
 8013a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a28:	f843 2b04 	str.w	r2, [r3], #4
 8013a2c:	e7d8      	b.n	80139e0 <__multiply+0x50>
 8013a2e:	f8b1 a000 	ldrh.w	sl, [r1]
 8013a32:	f1ba 0f00 	cmp.w	sl, #0
 8013a36:	d024      	beq.n	8013a82 <__multiply+0xf2>
 8013a38:	f104 0e14 	add.w	lr, r4, #20
 8013a3c:	46a9      	mov	r9, r5
 8013a3e:	f04f 0c00 	mov.w	ip, #0
 8013a42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013a46:	f8d9 3000 	ldr.w	r3, [r9]
 8013a4a:	fa1f fb87 	uxth.w	fp, r7
 8013a4e:	b29b      	uxth	r3, r3
 8013a50:	fb0a 330b 	mla	r3, sl, fp, r3
 8013a54:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013a58:	f8d9 7000 	ldr.w	r7, [r9]
 8013a5c:	4463      	add	r3, ip
 8013a5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013a62:	fb0a c70b 	mla	r7, sl, fp, ip
 8013a66:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013a6a:	b29b      	uxth	r3, r3
 8013a6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013a70:	4572      	cmp	r2, lr
 8013a72:	f849 3b04 	str.w	r3, [r9], #4
 8013a76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013a7a:	d8e2      	bhi.n	8013a42 <__multiply+0xb2>
 8013a7c:	9b01      	ldr	r3, [sp, #4]
 8013a7e:	f845 c003 	str.w	ip, [r5, r3]
 8013a82:	9b03      	ldr	r3, [sp, #12]
 8013a84:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013a88:	3104      	adds	r1, #4
 8013a8a:	f1b9 0f00 	cmp.w	r9, #0
 8013a8e:	d021      	beq.n	8013ad4 <__multiply+0x144>
 8013a90:	682b      	ldr	r3, [r5, #0]
 8013a92:	f104 0c14 	add.w	ip, r4, #20
 8013a96:	46ae      	mov	lr, r5
 8013a98:	f04f 0a00 	mov.w	sl, #0
 8013a9c:	f8bc b000 	ldrh.w	fp, [ip]
 8013aa0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013aa4:	fb09 770b 	mla	r7, r9, fp, r7
 8013aa8:	4457      	add	r7, sl
 8013aaa:	b29b      	uxth	r3, r3
 8013aac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013ab0:	f84e 3b04 	str.w	r3, [lr], #4
 8013ab4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013ab8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013abc:	f8be 3000 	ldrh.w	r3, [lr]
 8013ac0:	fb09 330a 	mla	r3, r9, sl, r3
 8013ac4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013ac8:	4562      	cmp	r2, ip
 8013aca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013ace:	d8e5      	bhi.n	8013a9c <__multiply+0x10c>
 8013ad0:	9f01      	ldr	r7, [sp, #4]
 8013ad2:	51eb      	str	r3, [r5, r7]
 8013ad4:	3504      	adds	r5, #4
 8013ad6:	e799      	b.n	8013a0c <__multiply+0x7c>
 8013ad8:	3e01      	subs	r6, #1
 8013ada:	e79b      	b.n	8013a14 <__multiply+0x84>
 8013adc:	080149dc 	.word	0x080149dc
 8013ae0:	080149ed 	.word	0x080149ed

08013ae4 <__pow5mult>:
 8013ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ae8:	4615      	mov	r5, r2
 8013aea:	f012 0203 	ands.w	r2, r2, #3
 8013aee:	4607      	mov	r7, r0
 8013af0:	460e      	mov	r6, r1
 8013af2:	d007      	beq.n	8013b04 <__pow5mult+0x20>
 8013af4:	4c25      	ldr	r4, [pc, #148]	@ (8013b8c <__pow5mult+0xa8>)
 8013af6:	3a01      	subs	r2, #1
 8013af8:	2300      	movs	r3, #0
 8013afa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013afe:	f7ff fe9f 	bl	8013840 <__multadd>
 8013b02:	4606      	mov	r6, r0
 8013b04:	10ad      	asrs	r5, r5, #2
 8013b06:	d03d      	beq.n	8013b84 <__pow5mult+0xa0>
 8013b08:	69fc      	ldr	r4, [r7, #28]
 8013b0a:	b97c      	cbnz	r4, 8013b2c <__pow5mult+0x48>
 8013b0c:	2010      	movs	r0, #16
 8013b0e:	f7fd ff8b 	bl	8011a28 <malloc>
 8013b12:	4602      	mov	r2, r0
 8013b14:	61f8      	str	r0, [r7, #28]
 8013b16:	b928      	cbnz	r0, 8013b24 <__pow5mult+0x40>
 8013b18:	4b1d      	ldr	r3, [pc, #116]	@ (8013b90 <__pow5mult+0xac>)
 8013b1a:	481e      	ldr	r0, [pc, #120]	@ (8013b94 <__pow5mult+0xb0>)
 8013b1c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013b20:	f000 fc20 	bl	8014364 <__assert_func>
 8013b24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013b28:	6004      	str	r4, [r0, #0]
 8013b2a:	60c4      	str	r4, [r0, #12]
 8013b2c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013b30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013b34:	b94c      	cbnz	r4, 8013b4a <__pow5mult+0x66>
 8013b36:	f240 2171 	movw	r1, #625	@ 0x271
 8013b3a:	4638      	mov	r0, r7
 8013b3c:	f7ff ff12 	bl	8013964 <__i2b>
 8013b40:	2300      	movs	r3, #0
 8013b42:	f8c8 0008 	str.w	r0, [r8, #8]
 8013b46:	4604      	mov	r4, r0
 8013b48:	6003      	str	r3, [r0, #0]
 8013b4a:	f04f 0900 	mov.w	r9, #0
 8013b4e:	07eb      	lsls	r3, r5, #31
 8013b50:	d50a      	bpl.n	8013b68 <__pow5mult+0x84>
 8013b52:	4631      	mov	r1, r6
 8013b54:	4622      	mov	r2, r4
 8013b56:	4638      	mov	r0, r7
 8013b58:	f7ff ff1a 	bl	8013990 <__multiply>
 8013b5c:	4631      	mov	r1, r6
 8013b5e:	4680      	mov	r8, r0
 8013b60:	4638      	mov	r0, r7
 8013b62:	f7ff fe4b 	bl	80137fc <_Bfree>
 8013b66:	4646      	mov	r6, r8
 8013b68:	106d      	asrs	r5, r5, #1
 8013b6a:	d00b      	beq.n	8013b84 <__pow5mult+0xa0>
 8013b6c:	6820      	ldr	r0, [r4, #0]
 8013b6e:	b938      	cbnz	r0, 8013b80 <__pow5mult+0x9c>
 8013b70:	4622      	mov	r2, r4
 8013b72:	4621      	mov	r1, r4
 8013b74:	4638      	mov	r0, r7
 8013b76:	f7ff ff0b 	bl	8013990 <__multiply>
 8013b7a:	6020      	str	r0, [r4, #0]
 8013b7c:	f8c0 9000 	str.w	r9, [r0]
 8013b80:	4604      	mov	r4, r0
 8013b82:	e7e4      	b.n	8013b4e <__pow5mult+0x6a>
 8013b84:	4630      	mov	r0, r6
 8013b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b8a:	bf00      	nop
 8013b8c:	08014a48 	.word	0x08014a48
 8013b90:	0801496d 	.word	0x0801496d
 8013b94:	080149ed 	.word	0x080149ed

08013b98 <__lshift>:
 8013b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b9c:	460c      	mov	r4, r1
 8013b9e:	6849      	ldr	r1, [r1, #4]
 8013ba0:	6923      	ldr	r3, [r4, #16]
 8013ba2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013ba6:	68a3      	ldr	r3, [r4, #8]
 8013ba8:	4607      	mov	r7, r0
 8013baa:	4691      	mov	r9, r2
 8013bac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013bb0:	f108 0601 	add.w	r6, r8, #1
 8013bb4:	42b3      	cmp	r3, r6
 8013bb6:	db0b      	blt.n	8013bd0 <__lshift+0x38>
 8013bb8:	4638      	mov	r0, r7
 8013bba:	f7ff fddf 	bl	801377c <_Balloc>
 8013bbe:	4605      	mov	r5, r0
 8013bc0:	b948      	cbnz	r0, 8013bd6 <__lshift+0x3e>
 8013bc2:	4602      	mov	r2, r0
 8013bc4:	4b28      	ldr	r3, [pc, #160]	@ (8013c68 <__lshift+0xd0>)
 8013bc6:	4829      	ldr	r0, [pc, #164]	@ (8013c6c <__lshift+0xd4>)
 8013bc8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013bcc:	f000 fbca 	bl	8014364 <__assert_func>
 8013bd0:	3101      	adds	r1, #1
 8013bd2:	005b      	lsls	r3, r3, #1
 8013bd4:	e7ee      	b.n	8013bb4 <__lshift+0x1c>
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	f100 0114 	add.w	r1, r0, #20
 8013bdc:	f100 0210 	add.w	r2, r0, #16
 8013be0:	4618      	mov	r0, r3
 8013be2:	4553      	cmp	r3, sl
 8013be4:	db33      	blt.n	8013c4e <__lshift+0xb6>
 8013be6:	6920      	ldr	r0, [r4, #16]
 8013be8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013bec:	f104 0314 	add.w	r3, r4, #20
 8013bf0:	f019 091f 	ands.w	r9, r9, #31
 8013bf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013bf8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013bfc:	d02b      	beq.n	8013c56 <__lshift+0xbe>
 8013bfe:	f1c9 0e20 	rsb	lr, r9, #32
 8013c02:	468a      	mov	sl, r1
 8013c04:	2200      	movs	r2, #0
 8013c06:	6818      	ldr	r0, [r3, #0]
 8013c08:	fa00 f009 	lsl.w	r0, r0, r9
 8013c0c:	4310      	orrs	r0, r2
 8013c0e:	f84a 0b04 	str.w	r0, [sl], #4
 8013c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c16:	459c      	cmp	ip, r3
 8013c18:	fa22 f20e 	lsr.w	r2, r2, lr
 8013c1c:	d8f3      	bhi.n	8013c06 <__lshift+0x6e>
 8013c1e:	ebac 0304 	sub.w	r3, ip, r4
 8013c22:	3b15      	subs	r3, #21
 8013c24:	f023 0303 	bic.w	r3, r3, #3
 8013c28:	3304      	adds	r3, #4
 8013c2a:	f104 0015 	add.w	r0, r4, #21
 8013c2e:	4584      	cmp	ip, r0
 8013c30:	bf38      	it	cc
 8013c32:	2304      	movcc	r3, #4
 8013c34:	50ca      	str	r2, [r1, r3]
 8013c36:	b10a      	cbz	r2, 8013c3c <__lshift+0xa4>
 8013c38:	f108 0602 	add.w	r6, r8, #2
 8013c3c:	3e01      	subs	r6, #1
 8013c3e:	4638      	mov	r0, r7
 8013c40:	612e      	str	r6, [r5, #16]
 8013c42:	4621      	mov	r1, r4
 8013c44:	f7ff fdda 	bl	80137fc <_Bfree>
 8013c48:	4628      	mov	r0, r5
 8013c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013c52:	3301      	adds	r3, #1
 8013c54:	e7c5      	b.n	8013be2 <__lshift+0x4a>
 8013c56:	3904      	subs	r1, #4
 8013c58:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013c60:	459c      	cmp	ip, r3
 8013c62:	d8f9      	bhi.n	8013c58 <__lshift+0xc0>
 8013c64:	e7ea      	b.n	8013c3c <__lshift+0xa4>
 8013c66:	bf00      	nop
 8013c68:	080149dc 	.word	0x080149dc
 8013c6c:	080149ed 	.word	0x080149ed

08013c70 <__mcmp>:
 8013c70:	690a      	ldr	r2, [r1, #16]
 8013c72:	4603      	mov	r3, r0
 8013c74:	6900      	ldr	r0, [r0, #16]
 8013c76:	1a80      	subs	r0, r0, r2
 8013c78:	b530      	push	{r4, r5, lr}
 8013c7a:	d10e      	bne.n	8013c9a <__mcmp+0x2a>
 8013c7c:	3314      	adds	r3, #20
 8013c7e:	3114      	adds	r1, #20
 8013c80:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013c84:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013c88:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013c8c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013c90:	4295      	cmp	r5, r2
 8013c92:	d003      	beq.n	8013c9c <__mcmp+0x2c>
 8013c94:	d205      	bcs.n	8013ca2 <__mcmp+0x32>
 8013c96:	f04f 30ff 	mov.w	r0, #4294967295
 8013c9a:	bd30      	pop	{r4, r5, pc}
 8013c9c:	42a3      	cmp	r3, r4
 8013c9e:	d3f3      	bcc.n	8013c88 <__mcmp+0x18>
 8013ca0:	e7fb      	b.n	8013c9a <__mcmp+0x2a>
 8013ca2:	2001      	movs	r0, #1
 8013ca4:	e7f9      	b.n	8013c9a <__mcmp+0x2a>
	...

08013ca8 <__mdiff>:
 8013ca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cac:	4689      	mov	r9, r1
 8013cae:	4606      	mov	r6, r0
 8013cb0:	4611      	mov	r1, r2
 8013cb2:	4648      	mov	r0, r9
 8013cb4:	4614      	mov	r4, r2
 8013cb6:	f7ff ffdb 	bl	8013c70 <__mcmp>
 8013cba:	1e05      	subs	r5, r0, #0
 8013cbc:	d112      	bne.n	8013ce4 <__mdiff+0x3c>
 8013cbe:	4629      	mov	r1, r5
 8013cc0:	4630      	mov	r0, r6
 8013cc2:	f7ff fd5b 	bl	801377c <_Balloc>
 8013cc6:	4602      	mov	r2, r0
 8013cc8:	b928      	cbnz	r0, 8013cd6 <__mdiff+0x2e>
 8013cca:	4b3f      	ldr	r3, [pc, #252]	@ (8013dc8 <__mdiff+0x120>)
 8013ccc:	f240 2137 	movw	r1, #567	@ 0x237
 8013cd0:	483e      	ldr	r0, [pc, #248]	@ (8013dcc <__mdiff+0x124>)
 8013cd2:	f000 fb47 	bl	8014364 <__assert_func>
 8013cd6:	2301      	movs	r3, #1
 8013cd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013cdc:	4610      	mov	r0, r2
 8013cde:	b003      	add	sp, #12
 8013ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ce4:	bfbc      	itt	lt
 8013ce6:	464b      	movlt	r3, r9
 8013ce8:	46a1      	movlt	r9, r4
 8013cea:	4630      	mov	r0, r6
 8013cec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013cf0:	bfba      	itte	lt
 8013cf2:	461c      	movlt	r4, r3
 8013cf4:	2501      	movlt	r5, #1
 8013cf6:	2500      	movge	r5, #0
 8013cf8:	f7ff fd40 	bl	801377c <_Balloc>
 8013cfc:	4602      	mov	r2, r0
 8013cfe:	b918      	cbnz	r0, 8013d08 <__mdiff+0x60>
 8013d00:	4b31      	ldr	r3, [pc, #196]	@ (8013dc8 <__mdiff+0x120>)
 8013d02:	f240 2145 	movw	r1, #581	@ 0x245
 8013d06:	e7e3      	b.n	8013cd0 <__mdiff+0x28>
 8013d08:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013d0c:	6926      	ldr	r6, [r4, #16]
 8013d0e:	60c5      	str	r5, [r0, #12]
 8013d10:	f109 0310 	add.w	r3, r9, #16
 8013d14:	f109 0514 	add.w	r5, r9, #20
 8013d18:	f104 0e14 	add.w	lr, r4, #20
 8013d1c:	f100 0b14 	add.w	fp, r0, #20
 8013d20:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013d24:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013d28:	9301      	str	r3, [sp, #4]
 8013d2a:	46d9      	mov	r9, fp
 8013d2c:	f04f 0c00 	mov.w	ip, #0
 8013d30:	9b01      	ldr	r3, [sp, #4]
 8013d32:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013d36:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013d3a:	9301      	str	r3, [sp, #4]
 8013d3c:	fa1f f38a 	uxth.w	r3, sl
 8013d40:	4619      	mov	r1, r3
 8013d42:	b283      	uxth	r3, r0
 8013d44:	1acb      	subs	r3, r1, r3
 8013d46:	0c00      	lsrs	r0, r0, #16
 8013d48:	4463      	add	r3, ip
 8013d4a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013d4e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013d52:	b29b      	uxth	r3, r3
 8013d54:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013d58:	4576      	cmp	r6, lr
 8013d5a:	f849 3b04 	str.w	r3, [r9], #4
 8013d5e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013d62:	d8e5      	bhi.n	8013d30 <__mdiff+0x88>
 8013d64:	1b33      	subs	r3, r6, r4
 8013d66:	3b15      	subs	r3, #21
 8013d68:	f023 0303 	bic.w	r3, r3, #3
 8013d6c:	3415      	adds	r4, #21
 8013d6e:	3304      	adds	r3, #4
 8013d70:	42a6      	cmp	r6, r4
 8013d72:	bf38      	it	cc
 8013d74:	2304      	movcc	r3, #4
 8013d76:	441d      	add	r5, r3
 8013d78:	445b      	add	r3, fp
 8013d7a:	461e      	mov	r6, r3
 8013d7c:	462c      	mov	r4, r5
 8013d7e:	4544      	cmp	r4, r8
 8013d80:	d30e      	bcc.n	8013da0 <__mdiff+0xf8>
 8013d82:	f108 0103 	add.w	r1, r8, #3
 8013d86:	1b49      	subs	r1, r1, r5
 8013d88:	f021 0103 	bic.w	r1, r1, #3
 8013d8c:	3d03      	subs	r5, #3
 8013d8e:	45a8      	cmp	r8, r5
 8013d90:	bf38      	it	cc
 8013d92:	2100      	movcc	r1, #0
 8013d94:	440b      	add	r3, r1
 8013d96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013d9a:	b191      	cbz	r1, 8013dc2 <__mdiff+0x11a>
 8013d9c:	6117      	str	r7, [r2, #16]
 8013d9e:	e79d      	b.n	8013cdc <__mdiff+0x34>
 8013da0:	f854 1b04 	ldr.w	r1, [r4], #4
 8013da4:	46e6      	mov	lr, ip
 8013da6:	0c08      	lsrs	r0, r1, #16
 8013da8:	fa1c fc81 	uxtah	ip, ip, r1
 8013dac:	4471      	add	r1, lr
 8013dae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013db2:	b289      	uxth	r1, r1
 8013db4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013db8:	f846 1b04 	str.w	r1, [r6], #4
 8013dbc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013dc0:	e7dd      	b.n	8013d7e <__mdiff+0xd6>
 8013dc2:	3f01      	subs	r7, #1
 8013dc4:	e7e7      	b.n	8013d96 <__mdiff+0xee>
 8013dc6:	bf00      	nop
 8013dc8:	080149dc 	.word	0x080149dc
 8013dcc:	080149ed 	.word	0x080149ed

08013dd0 <__d2b>:
 8013dd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013dd4:	460f      	mov	r7, r1
 8013dd6:	2101      	movs	r1, #1
 8013dd8:	ec59 8b10 	vmov	r8, r9, d0
 8013ddc:	4616      	mov	r6, r2
 8013dde:	f7ff fccd 	bl	801377c <_Balloc>
 8013de2:	4604      	mov	r4, r0
 8013de4:	b930      	cbnz	r0, 8013df4 <__d2b+0x24>
 8013de6:	4602      	mov	r2, r0
 8013de8:	4b23      	ldr	r3, [pc, #140]	@ (8013e78 <__d2b+0xa8>)
 8013dea:	4824      	ldr	r0, [pc, #144]	@ (8013e7c <__d2b+0xac>)
 8013dec:	f240 310f 	movw	r1, #783	@ 0x30f
 8013df0:	f000 fab8 	bl	8014364 <__assert_func>
 8013df4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013df8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013dfc:	b10d      	cbz	r5, 8013e02 <__d2b+0x32>
 8013dfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013e02:	9301      	str	r3, [sp, #4]
 8013e04:	f1b8 0300 	subs.w	r3, r8, #0
 8013e08:	d023      	beq.n	8013e52 <__d2b+0x82>
 8013e0a:	4668      	mov	r0, sp
 8013e0c:	9300      	str	r3, [sp, #0]
 8013e0e:	f7ff fd7c 	bl	801390a <__lo0bits>
 8013e12:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013e16:	b1d0      	cbz	r0, 8013e4e <__d2b+0x7e>
 8013e18:	f1c0 0320 	rsb	r3, r0, #32
 8013e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8013e20:	430b      	orrs	r3, r1
 8013e22:	40c2      	lsrs	r2, r0
 8013e24:	6163      	str	r3, [r4, #20]
 8013e26:	9201      	str	r2, [sp, #4]
 8013e28:	9b01      	ldr	r3, [sp, #4]
 8013e2a:	61a3      	str	r3, [r4, #24]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	bf0c      	ite	eq
 8013e30:	2201      	moveq	r2, #1
 8013e32:	2202      	movne	r2, #2
 8013e34:	6122      	str	r2, [r4, #16]
 8013e36:	b1a5      	cbz	r5, 8013e62 <__d2b+0x92>
 8013e38:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013e3c:	4405      	add	r5, r0
 8013e3e:	603d      	str	r5, [r7, #0]
 8013e40:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013e44:	6030      	str	r0, [r6, #0]
 8013e46:	4620      	mov	r0, r4
 8013e48:	b003      	add	sp, #12
 8013e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e4e:	6161      	str	r1, [r4, #20]
 8013e50:	e7ea      	b.n	8013e28 <__d2b+0x58>
 8013e52:	a801      	add	r0, sp, #4
 8013e54:	f7ff fd59 	bl	801390a <__lo0bits>
 8013e58:	9b01      	ldr	r3, [sp, #4]
 8013e5a:	6163      	str	r3, [r4, #20]
 8013e5c:	3020      	adds	r0, #32
 8013e5e:	2201      	movs	r2, #1
 8013e60:	e7e8      	b.n	8013e34 <__d2b+0x64>
 8013e62:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013e66:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013e6a:	6038      	str	r0, [r7, #0]
 8013e6c:	6918      	ldr	r0, [r3, #16]
 8013e6e:	f7ff fd2d 	bl	80138cc <__hi0bits>
 8013e72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013e76:	e7e5      	b.n	8013e44 <__d2b+0x74>
 8013e78:	080149dc 	.word	0x080149dc
 8013e7c:	080149ed 	.word	0x080149ed

08013e80 <__sfputc_r>:
 8013e80:	6893      	ldr	r3, [r2, #8]
 8013e82:	3b01      	subs	r3, #1
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	b410      	push	{r4}
 8013e88:	6093      	str	r3, [r2, #8]
 8013e8a:	da08      	bge.n	8013e9e <__sfputc_r+0x1e>
 8013e8c:	6994      	ldr	r4, [r2, #24]
 8013e8e:	42a3      	cmp	r3, r4
 8013e90:	db01      	blt.n	8013e96 <__sfputc_r+0x16>
 8013e92:	290a      	cmp	r1, #10
 8013e94:	d103      	bne.n	8013e9e <__sfputc_r+0x1e>
 8013e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e9a:	f7fe bc53 	b.w	8012744 <__swbuf_r>
 8013e9e:	6813      	ldr	r3, [r2, #0]
 8013ea0:	1c58      	adds	r0, r3, #1
 8013ea2:	6010      	str	r0, [r2, #0]
 8013ea4:	7019      	strb	r1, [r3, #0]
 8013ea6:	4608      	mov	r0, r1
 8013ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013eac:	4770      	bx	lr

08013eae <__sfputs_r>:
 8013eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eb0:	4606      	mov	r6, r0
 8013eb2:	460f      	mov	r7, r1
 8013eb4:	4614      	mov	r4, r2
 8013eb6:	18d5      	adds	r5, r2, r3
 8013eb8:	42ac      	cmp	r4, r5
 8013eba:	d101      	bne.n	8013ec0 <__sfputs_r+0x12>
 8013ebc:	2000      	movs	r0, #0
 8013ebe:	e007      	b.n	8013ed0 <__sfputs_r+0x22>
 8013ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ec4:	463a      	mov	r2, r7
 8013ec6:	4630      	mov	r0, r6
 8013ec8:	f7ff ffda 	bl	8013e80 <__sfputc_r>
 8013ecc:	1c43      	adds	r3, r0, #1
 8013ece:	d1f3      	bne.n	8013eb8 <__sfputs_r+0xa>
 8013ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013ed4 <_vfiprintf_r>:
 8013ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ed8:	460d      	mov	r5, r1
 8013eda:	b09d      	sub	sp, #116	@ 0x74
 8013edc:	4614      	mov	r4, r2
 8013ede:	4698      	mov	r8, r3
 8013ee0:	4606      	mov	r6, r0
 8013ee2:	b118      	cbz	r0, 8013eec <_vfiprintf_r+0x18>
 8013ee4:	6a03      	ldr	r3, [r0, #32]
 8013ee6:	b90b      	cbnz	r3, 8013eec <_vfiprintf_r+0x18>
 8013ee8:	f7fe fb38 	bl	801255c <__sinit>
 8013eec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013eee:	07d9      	lsls	r1, r3, #31
 8013ef0:	d405      	bmi.n	8013efe <_vfiprintf_r+0x2a>
 8013ef2:	89ab      	ldrh	r3, [r5, #12]
 8013ef4:	059a      	lsls	r2, r3, #22
 8013ef6:	d402      	bmi.n	8013efe <_vfiprintf_r+0x2a>
 8013ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013efa:	f7ee ff4b 	bl	8002d94 <__retarget_lock_acquire_recursive>
 8013efe:	89ab      	ldrh	r3, [r5, #12]
 8013f00:	071b      	lsls	r3, r3, #28
 8013f02:	d501      	bpl.n	8013f08 <_vfiprintf_r+0x34>
 8013f04:	692b      	ldr	r3, [r5, #16]
 8013f06:	b99b      	cbnz	r3, 8013f30 <_vfiprintf_r+0x5c>
 8013f08:	4629      	mov	r1, r5
 8013f0a:	4630      	mov	r0, r6
 8013f0c:	f7fe fc58 	bl	80127c0 <__swsetup_r>
 8013f10:	b170      	cbz	r0, 8013f30 <_vfiprintf_r+0x5c>
 8013f12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013f14:	07dc      	lsls	r4, r3, #31
 8013f16:	d504      	bpl.n	8013f22 <_vfiprintf_r+0x4e>
 8013f18:	f04f 30ff 	mov.w	r0, #4294967295
 8013f1c:	b01d      	add	sp, #116	@ 0x74
 8013f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f22:	89ab      	ldrh	r3, [r5, #12]
 8013f24:	0598      	lsls	r0, r3, #22
 8013f26:	d4f7      	bmi.n	8013f18 <_vfiprintf_r+0x44>
 8013f28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013f2a:	f7ee ff48 	bl	8002dbe <__retarget_lock_release_recursive>
 8013f2e:	e7f3      	b.n	8013f18 <_vfiprintf_r+0x44>
 8013f30:	2300      	movs	r3, #0
 8013f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f34:	2320      	movs	r3, #32
 8013f36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013f3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8013f3e:	2330      	movs	r3, #48	@ 0x30
 8013f40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80140f0 <_vfiprintf_r+0x21c>
 8013f44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013f48:	f04f 0901 	mov.w	r9, #1
 8013f4c:	4623      	mov	r3, r4
 8013f4e:	469a      	mov	sl, r3
 8013f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f54:	b10a      	cbz	r2, 8013f5a <_vfiprintf_r+0x86>
 8013f56:	2a25      	cmp	r2, #37	@ 0x25
 8013f58:	d1f9      	bne.n	8013f4e <_vfiprintf_r+0x7a>
 8013f5a:	ebba 0b04 	subs.w	fp, sl, r4
 8013f5e:	d00b      	beq.n	8013f78 <_vfiprintf_r+0xa4>
 8013f60:	465b      	mov	r3, fp
 8013f62:	4622      	mov	r2, r4
 8013f64:	4629      	mov	r1, r5
 8013f66:	4630      	mov	r0, r6
 8013f68:	f7ff ffa1 	bl	8013eae <__sfputs_r>
 8013f6c:	3001      	adds	r0, #1
 8013f6e:	f000 80a7 	beq.w	80140c0 <_vfiprintf_r+0x1ec>
 8013f72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013f74:	445a      	add	r2, fp
 8013f76:	9209      	str	r2, [sp, #36]	@ 0x24
 8013f78:	f89a 3000 	ldrb.w	r3, [sl]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	f000 809f 	beq.w	80140c0 <_vfiprintf_r+0x1ec>
 8013f82:	2300      	movs	r3, #0
 8013f84:	f04f 32ff 	mov.w	r2, #4294967295
 8013f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013f8c:	f10a 0a01 	add.w	sl, sl, #1
 8013f90:	9304      	str	r3, [sp, #16]
 8013f92:	9307      	str	r3, [sp, #28]
 8013f94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013f98:	931a      	str	r3, [sp, #104]	@ 0x68
 8013f9a:	4654      	mov	r4, sl
 8013f9c:	2205      	movs	r2, #5
 8013f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fa2:	4853      	ldr	r0, [pc, #332]	@ (80140f0 <_vfiprintf_r+0x21c>)
 8013fa4:	f7ec f934 	bl	8000210 <memchr>
 8013fa8:	9a04      	ldr	r2, [sp, #16]
 8013faa:	b9d8      	cbnz	r0, 8013fe4 <_vfiprintf_r+0x110>
 8013fac:	06d1      	lsls	r1, r2, #27
 8013fae:	bf44      	itt	mi
 8013fb0:	2320      	movmi	r3, #32
 8013fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013fb6:	0713      	lsls	r3, r2, #28
 8013fb8:	bf44      	itt	mi
 8013fba:	232b      	movmi	r3, #43	@ 0x2b
 8013fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8013fc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8013fc6:	d015      	beq.n	8013ff4 <_vfiprintf_r+0x120>
 8013fc8:	9a07      	ldr	r2, [sp, #28]
 8013fca:	4654      	mov	r4, sl
 8013fcc:	2000      	movs	r0, #0
 8013fce:	f04f 0c0a 	mov.w	ip, #10
 8013fd2:	4621      	mov	r1, r4
 8013fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013fd8:	3b30      	subs	r3, #48	@ 0x30
 8013fda:	2b09      	cmp	r3, #9
 8013fdc:	d94b      	bls.n	8014076 <_vfiprintf_r+0x1a2>
 8013fde:	b1b0      	cbz	r0, 801400e <_vfiprintf_r+0x13a>
 8013fe0:	9207      	str	r2, [sp, #28]
 8013fe2:	e014      	b.n	801400e <_vfiprintf_r+0x13a>
 8013fe4:	eba0 0308 	sub.w	r3, r0, r8
 8013fe8:	fa09 f303 	lsl.w	r3, r9, r3
 8013fec:	4313      	orrs	r3, r2
 8013fee:	9304      	str	r3, [sp, #16]
 8013ff0:	46a2      	mov	sl, r4
 8013ff2:	e7d2      	b.n	8013f9a <_vfiprintf_r+0xc6>
 8013ff4:	9b03      	ldr	r3, [sp, #12]
 8013ff6:	1d19      	adds	r1, r3, #4
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	9103      	str	r1, [sp, #12]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	bfbb      	ittet	lt
 8014000:	425b      	neglt	r3, r3
 8014002:	f042 0202 	orrlt.w	r2, r2, #2
 8014006:	9307      	strge	r3, [sp, #28]
 8014008:	9307      	strlt	r3, [sp, #28]
 801400a:	bfb8      	it	lt
 801400c:	9204      	strlt	r2, [sp, #16]
 801400e:	7823      	ldrb	r3, [r4, #0]
 8014010:	2b2e      	cmp	r3, #46	@ 0x2e
 8014012:	d10a      	bne.n	801402a <_vfiprintf_r+0x156>
 8014014:	7863      	ldrb	r3, [r4, #1]
 8014016:	2b2a      	cmp	r3, #42	@ 0x2a
 8014018:	d132      	bne.n	8014080 <_vfiprintf_r+0x1ac>
 801401a:	9b03      	ldr	r3, [sp, #12]
 801401c:	1d1a      	adds	r2, r3, #4
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	9203      	str	r2, [sp, #12]
 8014022:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014026:	3402      	adds	r4, #2
 8014028:	9305      	str	r3, [sp, #20]
 801402a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014100 <_vfiprintf_r+0x22c>
 801402e:	7821      	ldrb	r1, [r4, #0]
 8014030:	2203      	movs	r2, #3
 8014032:	4650      	mov	r0, sl
 8014034:	f7ec f8ec 	bl	8000210 <memchr>
 8014038:	b138      	cbz	r0, 801404a <_vfiprintf_r+0x176>
 801403a:	9b04      	ldr	r3, [sp, #16]
 801403c:	eba0 000a 	sub.w	r0, r0, sl
 8014040:	2240      	movs	r2, #64	@ 0x40
 8014042:	4082      	lsls	r2, r0
 8014044:	4313      	orrs	r3, r2
 8014046:	3401      	adds	r4, #1
 8014048:	9304      	str	r3, [sp, #16]
 801404a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801404e:	4829      	ldr	r0, [pc, #164]	@ (80140f4 <_vfiprintf_r+0x220>)
 8014050:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014054:	2206      	movs	r2, #6
 8014056:	f7ec f8db 	bl	8000210 <memchr>
 801405a:	2800      	cmp	r0, #0
 801405c:	d03f      	beq.n	80140de <_vfiprintf_r+0x20a>
 801405e:	4b26      	ldr	r3, [pc, #152]	@ (80140f8 <_vfiprintf_r+0x224>)
 8014060:	bb1b      	cbnz	r3, 80140aa <_vfiprintf_r+0x1d6>
 8014062:	9b03      	ldr	r3, [sp, #12]
 8014064:	3307      	adds	r3, #7
 8014066:	f023 0307 	bic.w	r3, r3, #7
 801406a:	3308      	adds	r3, #8
 801406c:	9303      	str	r3, [sp, #12]
 801406e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014070:	443b      	add	r3, r7
 8014072:	9309      	str	r3, [sp, #36]	@ 0x24
 8014074:	e76a      	b.n	8013f4c <_vfiprintf_r+0x78>
 8014076:	fb0c 3202 	mla	r2, ip, r2, r3
 801407a:	460c      	mov	r4, r1
 801407c:	2001      	movs	r0, #1
 801407e:	e7a8      	b.n	8013fd2 <_vfiprintf_r+0xfe>
 8014080:	2300      	movs	r3, #0
 8014082:	3401      	adds	r4, #1
 8014084:	9305      	str	r3, [sp, #20]
 8014086:	4619      	mov	r1, r3
 8014088:	f04f 0c0a 	mov.w	ip, #10
 801408c:	4620      	mov	r0, r4
 801408e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014092:	3a30      	subs	r2, #48	@ 0x30
 8014094:	2a09      	cmp	r2, #9
 8014096:	d903      	bls.n	80140a0 <_vfiprintf_r+0x1cc>
 8014098:	2b00      	cmp	r3, #0
 801409a:	d0c6      	beq.n	801402a <_vfiprintf_r+0x156>
 801409c:	9105      	str	r1, [sp, #20]
 801409e:	e7c4      	b.n	801402a <_vfiprintf_r+0x156>
 80140a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80140a4:	4604      	mov	r4, r0
 80140a6:	2301      	movs	r3, #1
 80140a8:	e7f0      	b.n	801408c <_vfiprintf_r+0x1b8>
 80140aa:	ab03      	add	r3, sp, #12
 80140ac:	9300      	str	r3, [sp, #0]
 80140ae:	462a      	mov	r2, r5
 80140b0:	4b12      	ldr	r3, [pc, #72]	@ (80140fc <_vfiprintf_r+0x228>)
 80140b2:	a904      	add	r1, sp, #16
 80140b4:	4630      	mov	r0, r6
 80140b6:	f7fd fe0d 	bl	8011cd4 <_printf_float>
 80140ba:	4607      	mov	r7, r0
 80140bc:	1c78      	adds	r0, r7, #1
 80140be:	d1d6      	bne.n	801406e <_vfiprintf_r+0x19a>
 80140c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80140c2:	07d9      	lsls	r1, r3, #31
 80140c4:	d405      	bmi.n	80140d2 <_vfiprintf_r+0x1fe>
 80140c6:	89ab      	ldrh	r3, [r5, #12]
 80140c8:	059a      	lsls	r2, r3, #22
 80140ca:	d402      	bmi.n	80140d2 <_vfiprintf_r+0x1fe>
 80140cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80140ce:	f7ee fe76 	bl	8002dbe <__retarget_lock_release_recursive>
 80140d2:	89ab      	ldrh	r3, [r5, #12]
 80140d4:	065b      	lsls	r3, r3, #25
 80140d6:	f53f af1f 	bmi.w	8013f18 <_vfiprintf_r+0x44>
 80140da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80140dc:	e71e      	b.n	8013f1c <_vfiprintf_r+0x48>
 80140de:	ab03      	add	r3, sp, #12
 80140e0:	9300      	str	r3, [sp, #0]
 80140e2:	462a      	mov	r2, r5
 80140e4:	4b05      	ldr	r3, [pc, #20]	@ (80140fc <_vfiprintf_r+0x228>)
 80140e6:	a904      	add	r1, sp, #16
 80140e8:	4630      	mov	r0, r6
 80140ea:	f7fe f88b 	bl	8012204 <_printf_i>
 80140ee:	e7e4      	b.n	80140ba <_vfiprintf_r+0x1e6>
 80140f0:	08014b48 	.word	0x08014b48
 80140f4:	08014b52 	.word	0x08014b52
 80140f8:	08011cd5 	.word	0x08011cd5
 80140fc:	08013eaf 	.word	0x08013eaf
 8014100:	08014b4e 	.word	0x08014b4e

08014104 <__sflush_r>:
 8014104:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801410c:	0716      	lsls	r6, r2, #28
 801410e:	4605      	mov	r5, r0
 8014110:	460c      	mov	r4, r1
 8014112:	d454      	bmi.n	80141be <__sflush_r+0xba>
 8014114:	684b      	ldr	r3, [r1, #4]
 8014116:	2b00      	cmp	r3, #0
 8014118:	dc02      	bgt.n	8014120 <__sflush_r+0x1c>
 801411a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801411c:	2b00      	cmp	r3, #0
 801411e:	dd48      	ble.n	80141b2 <__sflush_r+0xae>
 8014120:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014122:	2e00      	cmp	r6, #0
 8014124:	d045      	beq.n	80141b2 <__sflush_r+0xae>
 8014126:	2300      	movs	r3, #0
 8014128:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801412c:	682f      	ldr	r7, [r5, #0]
 801412e:	6a21      	ldr	r1, [r4, #32]
 8014130:	602b      	str	r3, [r5, #0]
 8014132:	d030      	beq.n	8014196 <__sflush_r+0x92>
 8014134:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014136:	89a3      	ldrh	r3, [r4, #12]
 8014138:	0759      	lsls	r1, r3, #29
 801413a:	d505      	bpl.n	8014148 <__sflush_r+0x44>
 801413c:	6863      	ldr	r3, [r4, #4]
 801413e:	1ad2      	subs	r2, r2, r3
 8014140:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014142:	b10b      	cbz	r3, 8014148 <__sflush_r+0x44>
 8014144:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014146:	1ad2      	subs	r2, r2, r3
 8014148:	2300      	movs	r3, #0
 801414a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801414c:	6a21      	ldr	r1, [r4, #32]
 801414e:	4628      	mov	r0, r5
 8014150:	47b0      	blx	r6
 8014152:	1c43      	adds	r3, r0, #1
 8014154:	89a3      	ldrh	r3, [r4, #12]
 8014156:	d106      	bne.n	8014166 <__sflush_r+0x62>
 8014158:	6829      	ldr	r1, [r5, #0]
 801415a:	291d      	cmp	r1, #29
 801415c:	d82b      	bhi.n	80141b6 <__sflush_r+0xb2>
 801415e:	4a2a      	ldr	r2, [pc, #168]	@ (8014208 <__sflush_r+0x104>)
 8014160:	410a      	asrs	r2, r1
 8014162:	07d6      	lsls	r6, r2, #31
 8014164:	d427      	bmi.n	80141b6 <__sflush_r+0xb2>
 8014166:	2200      	movs	r2, #0
 8014168:	6062      	str	r2, [r4, #4]
 801416a:	04d9      	lsls	r1, r3, #19
 801416c:	6922      	ldr	r2, [r4, #16]
 801416e:	6022      	str	r2, [r4, #0]
 8014170:	d504      	bpl.n	801417c <__sflush_r+0x78>
 8014172:	1c42      	adds	r2, r0, #1
 8014174:	d101      	bne.n	801417a <__sflush_r+0x76>
 8014176:	682b      	ldr	r3, [r5, #0]
 8014178:	b903      	cbnz	r3, 801417c <__sflush_r+0x78>
 801417a:	6560      	str	r0, [r4, #84]	@ 0x54
 801417c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801417e:	602f      	str	r7, [r5, #0]
 8014180:	b1b9      	cbz	r1, 80141b2 <__sflush_r+0xae>
 8014182:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014186:	4299      	cmp	r1, r3
 8014188:	d002      	beq.n	8014190 <__sflush_r+0x8c>
 801418a:	4628      	mov	r0, r5
 801418c:	f7ff faac 	bl	80136e8 <_free_r>
 8014190:	2300      	movs	r3, #0
 8014192:	6363      	str	r3, [r4, #52]	@ 0x34
 8014194:	e00d      	b.n	80141b2 <__sflush_r+0xae>
 8014196:	2301      	movs	r3, #1
 8014198:	4628      	mov	r0, r5
 801419a:	47b0      	blx	r6
 801419c:	4602      	mov	r2, r0
 801419e:	1c50      	adds	r0, r2, #1
 80141a0:	d1c9      	bne.n	8014136 <__sflush_r+0x32>
 80141a2:	682b      	ldr	r3, [r5, #0]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d0c6      	beq.n	8014136 <__sflush_r+0x32>
 80141a8:	2b1d      	cmp	r3, #29
 80141aa:	d001      	beq.n	80141b0 <__sflush_r+0xac>
 80141ac:	2b16      	cmp	r3, #22
 80141ae:	d11e      	bne.n	80141ee <__sflush_r+0xea>
 80141b0:	602f      	str	r7, [r5, #0]
 80141b2:	2000      	movs	r0, #0
 80141b4:	e022      	b.n	80141fc <__sflush_r+0xf8>
 80141b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80141ba:	b21b      	sxth	r3, r3
 80141bc:	e01b      	b.n	80141f6 <__sflush_r+0xf2>
 80141be:	690f      	ldr	r7, [r1, #16]
 80141c0:	2f00      	cmp	r7, #0
 80141c2:	d0f6      	beq.n	80141b2 <__sflush_r+0xae>
 80141c4:	0793      	lsls	r3, r2, #30
 80141c6:	680e      	ldr	r6, [r1, #0]
 80141c8:	bf08      	it	eq
 80141ca:	694b      	ldreq	r3, [r1, #20]
 80141cc:	600f      	str	r7, [r1, #0]
 80141ce:	bf18      	it	ne
 80141d0:	2300      	movne	r3, #0
 80141d2:	eba6 0807 	sub.w	r8, r6, r7
 80141d6:	608b      	str	r3, [r1, #8]
 80141d8:	f1b8 0f00 	cmp.w	r8, #0
 80141dc:	dde9      	ble.n	80141b2 <__sflush_r+0xae>
 80141de:	6a21      	ldr	r1, [r4, #32]
 80141e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80141e2:	4643      	mov	r3, r8
 80141e4:	463a      	mov	r2, r7
 80141e6:	4628      	mov	r0, r5
 80141e8:	47b0      	blx	r6
 80141ea:	2800      	cmp	r0, #0
 80141ec:	dc08      	bgt.n	8014200 <__sflush_r+0xfc>
 80141ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80141f6:	81a3      	strh	r3, [r4, #12]
 80141f8:	f04f 30ff 	mov.w	r0, #4294967295
 80141fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014200:	4407      	add	r7, r0
 8014202:	eba8 0800 	sub.w	r8, r8, r0
 8014206:	e7e7      	b.n	80141d8 <__sflush_r+0xd4>
 8014208:	dfbffffe 	.word	0xdfbffffe

0801420c <_fflush_r>:
 801420c:	b538      	push	{r3, r4, r5, lr}
 801420e:	690b      	ldr	r3, [r1, #16]
 8014210:	4605      	mov	r5, r0
 8014212:	460c      	mov	r4, r1
 8014214:	b913      	cbnz	r3, 801421c <_fflush_r+0x10>
 8014216:	2500      	movs	r5, #0
 8014218:	4628      	mov	r0, r5
 801421a:	bd38      	pop	{r3, r4, r5, pc}
 801421c:	b118      	cbz	r0, 8014226 <_fflush_r+0x1a>
 801421e:	6a03      	ldr	r3, [r0, #32]
 8014220:	b90b      	cbnz	r3, 8014226 <_fflush_r+0x1a>
 8014222:	f7fe f99b 	bl	801255c <__sinit>
 8014226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d0f3      	beq.n	8014216 <_fflush_r+0xa>
 801422e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014230:	07d0      	lsls	r0, r2, #31
 8014232:	d404      	bmi.n	801423e <_fflush_r+0x32>
 8014234:	0599      	lsls	r1, r3, #22
 8014236:	d402      	bmi.n	801423e <_fflush_r+0x32>
 8014238:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801423a:	f7ee fdab 	bl	8002d94 <__retarget_lock_acquire_recursive>
 801423e:	4628      	mov	r0, r5
 8014240:	4621      	mov	r1, r4
 8014242:	f7ff ff5f 	bl	8014104 <__sflush_r>
 8014246:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014248:	07da      	lsls	r2, r3, #31
 801424a:	4605      	mov	r5, r0
 801424c:	d4e4      	bmi.n	8014218 <_fflush_r+0xc>
 801424e:	89a3      	ldrh	r3, [r4, #12]
 8014250:	059b      	lsls	r3, r3, #22
 8014252:	d4e1      	bmi.n	8014218 <_fflush_r+0xc>
 8014254:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014256:	f7ee fdb2 	bl	8002dbe <__retarget_lock_release_recursive>
 801425a:	e7dd      	b.n	8014218 <_fflush_r+0xc>

0801425c <__swhatbuf_r>:
 801425c:	b570      	push	{r4, r5, r6, lr}
 801425e:	460c      	mov	r4, r1
 8014260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014264:	2900      	cmp	r1, #0
 8014266:	b096      	sub	sp, #88	@ 0x58
 8014268:	4615      	mov	r5, r2
 801426a:	461e      	mov	r6, r3
 801426c:	da0d      	bge.n	801428a <__swhatbuf_r+0x2e>
 801426e:	89a3      	ldrh	r3, [r4, #12]
 8014270:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014274:	f04f 0100 	mov.w	r1, #0
 8014278:	bf14      	ite	ne
 801427a:	2340      	movne	r3, #64	@ 0x40
 801427c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014280:	2000      	movs	r0, #0
 8014282:	6031      	str	r1, [r6, #0]
 8014284:	602b      	str	r3, [r5, #0]
 8014286:	b016      	add	sp, #88	@ 0x58
 8014288:	bd70      	pop	{r4, r5, r6, pc}
 801428a:	466a      	mov	r2, sp
 801428c:	f000 f848 	bl	8014320 <_fstat_r>
 8014290:	2800      	cmp	r0, #0
 8014292:	dbec      	blt.n	801426e <__swhatbuf_r+0x12>
 8014294:	9901      	ldr	r1, [sp, #4]
 8014296:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801429a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801429e:	4259      	negs	r1, r3
 80142a0:	4159      	adcs	r1, r3
 80142a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80142a6:	e7eb      	b.n	8014280 <__swhatbuf_r+0x24>

080142a8 <__smakebuf_r>:
 80142a8:	898b      	ldrh	r3, [r1, #12]
 80142aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80142ac:	079d      	lsls	r5, r3, #30
 80142ae:	4606      	mov	r6, r0
 80142b0:	460c      	mov	r4, r1
 80142b2:	d507      	bpl.n	80142c4 <__smakebuf_r+0x1c>
 80142b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80142b8:	6023      	str	r3, [r4, #0]
 80142ba:	6123      	str	r3, [r4, #16]
 80142bc:	2301      	movs	r3, #1
 80142be:	6163      	str	r3, [r4, #20]
 80142c0:	b003      	add	sp, #12
 80142c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142c4:	ab01      	add	r3, sp, #4
 80142c6:	466a      	mov	r2, sp
 80142c8:	f7ff ffc8 	bl	801425c <__swhatbuf_r>
 80142cc:	9f00      	ldr	r7, [sp, #0]
 80142ce:	4605      	mov	r5, r0
 80142d0:	4639      	mov	r1, r7
 80142d2:	4630      	mov	r0, r6
 80142d4:	f7fd fbd2 	bl	8011a7c <_malloc_r>
 80142d8:	b948      	cbnz	r0, 80142ee <__smakebuf_r+0x46>
 80142da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142de:	059a      	lsls	r2, r3, #22
 80142e0:	d4ee      	bmi.n	80142c0 <__smakebuf_r+0x18>
 80142e2:	f023 0303 	bic.w	r3, r3, #3
 80142e6:	f043 0302 	orr.w	r3, r3, #2
 80142ea:	81a3      	strh	r3, [r4, #12]
 80142ec:	e7e2      	b.n	80142b4 <__smakebuf_r+0xc>
 80142ee:	89a3      	ldrh	r3, [r4, #12]
 80142f0:	6020      	str	r0, [r4, #0]
 80142f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80142f6:	81a3      	strh	r3, [r4, #12]
 80142f8:	9b01      	ldr	r3, [sp, #4]
 80142fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80142fe:	b15b      	cbz	r3, 8014318 <__smakebuf_r+0x70>
 8014300:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014304:	4630      	mov	r0, r6
 8014306:	f000 f81d 	bl	8014344 <_isatty_r>
 801430a:	b128      	cbz	r0, 8014318 <__smakebuf_r+0x70>
 801430c:	89a3      	ldrh	r3, [r4, #12]
 801430e:	f023 0303 	bic.w	r3, r3, #3
 8014312:	f043 0301 	orr.w	r3, r3, #1
 8014316:	81a3      	strh	r3, [r4, #12]
 8014318:	89a3      	ldrh	r3, [r4, #12]
 801431a:	431d      	orrs	r5, r3
 801431c:	81a5      	strh	r5, [r4, #12]
 801431e:	e7cf      	b.n	80142c0 <__smakebuf_r+0x18>

08014320 <_fstat_r>:
 8014320:	b538      	push	{r3, r4, r5, lr}
 8014322:	4d07      	ldr	r5, [pc, #28]	@ (8014340 <_fstat_r+0x20>)
 8014324:	2300      	movs	r3, #0
 8014326:	4604      	mov	r4, r0
 8014328:	4608      	mov	r0, r1
 801432a:	4611      	mov	r1, r2
 801432c:	602b      	str	r3, [r5, #0]
 801432e:	f7ed fb43 	bl	80019b8 <_fstat>
 8014332:	1c43      	adds	r3, r0, #1
 8014334:	d102      	bne.n	801433c <_fstat_r+0x1c>
 8014336:	682b      	ldr	r3, [r5, #0]
 8014338:	b103      	cbz	r3, 801433c <_fstat_r+0x1c>
 801433a:	6023      	str	r3, [r4, #0]
 801433c:	bd38      	pop	{r3, r4, r5, pc}
 801433e:	bf00      	nop
 8014340:	20006d70 	.word	0x20006d70

08014344 <_isatty_r>:
 8014344:	b538      	push	{r3, r4, r5, lr}
 8014346:	4d06      	ldr	r5, [pc, #24]	@ (8014360 <_isatty_r+0x1c>)
 8014348:	2300      	movs	r3, #0
 801434a:	4604      	mov	r4, r0
 801434c:	4608      	mov	r0, r1
 801434e:	602b      	str	r3, [r5, #0]
 8014350:	f7ed fb42 	bl	80019d8 <_isatty>
 8014354:	1c43      	adds	r3, r0, #1
 8014356:	d102      	bne.n	801435e <_isatty_r+0x1a>
 8014358:	682b      	ldr	r3, [r5, #0]
 801435a:	b103      	cbz	r3, 801435e <_isatty_r+0x1a>
 801435c:	6023      	str	r3, [r4, #0]
 801435e:	bd38      	pop	{r3, r4, r5, pc}
 8014360:	20006d70 	.word	0x20006d70

08014364 <__assert_func>:
 8014364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014366:	4614      	mov	r4, r2
 8014368:	461a      	mov	r2, r3
 801436a:	4b09      	ldr	r3, [pc, #36]	@ (8014390 <__assert_func+0x2c>)
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	4605      	mov	r5, r0
 8014370:	68d8      	ldr	r0, [r3, #12]
 8014372:	b954      	cbnz	r4, 801438a <__assert_func+0x26>
 8014374:	4b07      	ldr	r3, [pc, #28]	@ (8014394 <__assert_func+0x30>)
 8014376:	461c      	mov	r4, r3
 8014378:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801437c:	9100      	str	r1, [sp, #0]
 801437e:	462b      	mov	r3, r5
 8014380:	4905      	ldr	r1, [pc, #20]	@ (8014398 <__assert_func+0x34>)
 8014382:	f000 f841 	bl	8014408 <fiprintf>
 8014386:	f000 f851 	bl	801442c <abort>
 801438a:	4b04      	ldr	r3, [pc, #16]	@ (801439c <__assert_func+0x38>)
 801438c:	e7f4      	b.n	8014378 <__assert_func+0x14>
 801438e:	bf00      	nop
 8014390:	20000130 	.word	0x20000130
 8014394:	08014b9e 	.word	0x08014b9e
 8014398:	08014b70 	.word	0x08014b70
 801439c:	08014b63 	.word	0x08014b63

080143a0 <_calloc_r>:
 80143a0:	b570      	push	{r4, r5, r6, lr}
 80143a2:	fba1 5402 	umull	r5, r4, r1, r2
 80143a6:	b93c      	cbnz	r4, 80143b8 <_calloc_r+0x18>
 80143a8:	4629      	mov	r1, r5
 80143aa:	f7fd fb67 	bl	8011a7c <_malloc_r>
 80143ae:	4606      	mov	r6, r0
 80143b0:	b928      	cbnz	r0, 80143be <_calloc_r+0x1e>
 80143b2:	2600      	movs	r6, #0
 80143b4:	4630      	mov	r0, r6
 80143b6:	bd70      	pop	{r4, r5, r6, pc}
 80143b8:	220c      	movs	r2, #12
 80143ba:	6002      	str	r2, [r0, #0]
 80143bc:	e7f9      	b.n	80143b2 <_calloc_r+0x12>
 80143be:	462a      	mov	r2, r5
 80143c0:	4621      	mov	r1, r4
 80143c2:	f7fe fa53 	bl	801286c <memset>
 80143c6:	e7f5      	b.n	80143b4 <_calloc_r+0x14>

080143c8 <__ascii_mbtowc>:
 80143c8:	b082      	sub	sp, #8
 80143ca:	b901      	cbnz	r1, 80143ce <__ascii_mbtowc+0x6>
 80143cc:	a901      	add	r1, sp, #4
 80143ce:	b142      	cbz	r2, 80143e2 <__ascii_mbtowc+0x1a>
 80143d0:	b14b      	cbz	r3, 80143e6 <__ascii_mbtowc+0x1e>
 80143d2:	7813      	ldrb	r3, [r2, #0]
 80143d4:	600b      	str	r3, [r1, #0]
 80143d6:	7812      	ldrb	r2, [r2, #0]
 80143d8:	1e10      	subs	r0, r2, #0
 80143da:	bf18      	it	ne
 80143dc:	2001      	movne	r0, #1
 80143de:	b002      	add	sp, #8
 80143e0:	4770      	bx	lr
 80143e2:	4610      	mov	r0, r2
 80143e4:	e7fb      	b.n	80143de <__ascii_mbtowc+0x16>
 80143e6:	f06f 0001 	mvn.w	r0, #1
 80143ea:	e7f8      	b.n	80143de <__ascii_mbtowc+0x16>

080143ec <__ascii_wctomb>:
 80143ec:	4603      	mov	r3, r0
 80143ee:	4608      	mov	r0, r1
 80143f0:	b141      	cbz	r1, 8014404 <__ascii_wctomb+0x18>
 80143f2:	2aff      	cmp	r2, #255	@ 0xff
 80143f4:	d904      	bls.n	8014400 <__ascii_wctomb+0x14>
 80143f6:	228a      	movs	r2, #138	@ 0x8a
 80143f8:	601a      	str	r2, [r3, #0]
 80143fa:	f04f 30ff 	mov.w	r0, #4294967295
 80143fe:	4770      	bx	lr
 8014400:	700a      	strb	r2, [r1, #0]
 8014402:	2001      	movs	r0, #1
 8014404:	4770      	bx	lr
	...

08014408 <fiprintf>:
 8014408:	b40e      	push	{r1, r2, r3}
 801440a:	b503      	push	{r0, r1, lr}
 801440c:	4601      	mov	r1, r0
 801440e:	ab03      	add	r3, sp, #12
 8014410:	4805      	ldr	r0, [pc, #20]	@ (8014428 <fiprintf+0x20>)
 8014412:	f853 2b04 	ldr.w	r2, [r3], #4
 8014416:	6800      	ldr	r0, [r0, #0]
 8014418:	9301      	str	r3, [sp, #4]
 801441a:	f7ff fd5b 	bl	8013ed4 <_vfiprintf_r>
 801441e:	b002      	add	sp, #8
 8014420:	f85d eb04 	ldr.w	lr, [sp], #4
 8014424:	b003      	add	sp, #12
 8014426:	4770      	bx	lr
 8014428:	20000130 	.word	0x20000130

0801442c <abort>:
 801442c:	b508      	push	{r3, lr}
 801442e:	2006      	movs	r0, #6
 8014430:	f000 f82c 	bl	801448c <raise>
 8014434:	2001      	movs	r0, #1
 8014436:	f7ed fa8b 	bl	8001950 <_exit>

0801443a <_raise_r>:
 801443a:	291f      	cmp	r1, #31
 801443c:	b538      	push	{r3, r4, r5, lr}
 801443e:	4605      	mov	r5, r0
 8014440:	460c      	mov	r4, r1
 8014442:	d904      	bls.n	801444e <_raise_r+0x14>
 8014444:	2316      	movs	r3, #22
 8014446:	6003      	str	r3, [r0, #0]
 8014448:	f04f 30ff 	mov.w	r0, #4294967295
 801444c:	bd38      	pop	{r3, r4, r5, pc}
 801444e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014450:	b112      	cbz	r2, 8014458 <_raise_r+0x1e>
 8014452:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014456:	b94b      	cbnz	r3, 801446c <_raise_r+0x32>
 8014458:	4628      	mov	r0, r5
 801445a:	f000 f831 	bl	80144c0 <_getpid_r>
 801445e:	4622      	mov	r2, r4
 8014460:	4601      	mov	r1, r0
 8014462:	4628      	mov	r0, r5
 8014464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014468:	f000 b818 	b.w	801449c <_kill_r>
 801446c:	2b01      	cmp	r3, #1
 801446e:	d00a      	beq.n	8014486 <_raise_r+0x4c>
 8014470:	1c59      	adds	r1, r3, #1
 8014472:	d103      	bne.n	801447c <_raise_r+0x42>
 8014474:	2316      	movs	r3, #22
 8014476:	6003      	str	r3, [r0, #0]
 8014478:	2001      	movs	r0, #1
 801447a:	e7e7      	b.n	801444c <_raise_r+0x12>
 801447c:	2100      	movs	r1, #0
 801447e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014482:	4620      	mov	r0, r4
 8014484:	4798      	blx	r3
 8014486:	2000      	movs	r0, #0
 8014488:	e7e0      	b.n	801444c <_raise_r+0x12>
	...

0801448c <raise>:
 801448c:	4b02      	ldr	r3, [pc, #8]	@ (8014498 <raise+0xc>)
 801448e:	4601      	mov	r1, r0
 8014490:	6818      	ldr	r0, [r3, #0]
 8014492:	f7ff bfd2 	b.w	801443a <_raise_r>
 8014496:	bf00      	nop
 8014498:	20000130 	.word	0x20000130

0801449c <_kill_r>:
 801449c:	b538      	push	{r3, r4, r5, lr}
 801449e:	4d07      	ldr	r5, [pc, #28]	@ (80144bc <_kill_r+0x20>)
 80144a0:	2300      	movs	r3, #0
 80144a2:	4604      	mov	r4, r0
 80144a4:	4608      	mov	r0, r1
 80144a6:	4611      	mov	r1, r2
 80144a8:	602b      	str	r3, [r5, #0]
 80144aa:	f7ed fa41 	bl	8001930 <_kill>
 80144ae:	1c43      	adds	r3, r0, #1
 80144b0:	d102      	bne.n	80144b8 <_kill_r+0x1c>
 80144b2:	682b      	ldr	r3, [r5, #0]
 80144b4:	b103      	cbz	r3, 80144b8 <_kill_r+0x1c>
 80144b6:	6023      	str	r3, [r4, #0]
 80144b8:	bd38      	pop	{r3, r4, r5, pc}
 80144ba:	bf00      	nop
 80144bc:	20006d70 	.word	0x20006d70

080144c0 <_getpid_r>:
 80144c0:	f7ed ba2e 	b.w	8001920 <_getpid>

080144c4 <_init>:
 80144c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144c6:	bf00      	nop
 80144c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80144ca:	bc08      	pop	{r3}
 80144cc:	469e      	mov	lr, r3
 80144ce:	4770      	bx	lr

080144d0 <_fini>:
 80144d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144d2:	bf00      	nop
 80144d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80144d6:	bc08      	pop	{r3}
 80144d8:	469e      	mov	lr, r3
 80144da:	4770      	bx	lr
