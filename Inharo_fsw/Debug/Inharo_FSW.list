
Inharo_FSW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000192f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000944  080194c8  080194c8  000294c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019e0c  08019e0c  0003030c  2**0
                  CONTENTS
  4 .ARM          00000008  08019e0c  08019e0c  00029e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019e14  08019e14  0003030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019e14  08019e14  00029e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019e18  08019e18  00029e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000030c  20000000  08019e1c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006e00  20000310  0801a128  00030310  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007110  0801a128  00037110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003030c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b74d  00000000  00000000  0003033c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000085c0  00000000  00000000  0006ba89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e28  00000000  00000000  00074050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002aa8  00000000  00000000  00076e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003491a  00000000  00000000  00079920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000445d3  00000000  00000000  000ae23a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001003cf  00000000  00000000  000f280d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f2bdc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d378  00000000  00000000  001f2c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000310 	.word	0x20000310
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080194b0 	.word	0x080194b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000314 	.word	0x20000314
 800020c:	080194b0 	.word	0x080194b0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	; 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295
 8000f02:	f000 b9bf 	b.w	8001284 <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f84d 	bl	8000fb4 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f840 	bl	8000fb4 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f82f 	bl	8000fb4 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f821 	bl	8000fb4 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295
 8000f98:	f000 b974 	b.w	8001284 <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f806 	bl	8000fb4 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__udivmoddi4>:
 8000fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fb8:	9d08      	ldr	r5, [sp, #32]
 8000fba:	4604      	mov	r4, r0
 8000fbc:	468e      	mov	lr, r1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d14d      	bne.n	800105e <__udivmoddi4+0xaa>
 8000fc2:	428a      	cmp	r2, r1
 8000fc4:	4694      	mov	ip, r2
 8000fc6:	d969      	bls.n	800109c <__udivmoddi4+0xe8>
 8000fc8:	fab2 f282 	clz	r2, r2
 8000fcc:	b152      	cbz	r2, 8000fe4 <__udivmoddi4+0x30>
 8000fce:	fa01 f302 	lsl.w	r3, r1, r2
 8000fd2:	f1c2 0120 	rsb	r1, r2, #32
 8000fd6:	fa20 f101 	lsr.w	r1, r0, r1
 8000fda:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fde:	ea41 0e03 	orr.w	lr, r1, r3
 8000fe2:	4094      	lsls	r4, r2
 8000fe4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fe8:	0c21      	lsrs	r1, r4, #16
 8000fea:	fbbe f6f8 	udiv	r6, lr, r8
 8000fee:	fa1f f78c 	uxth.w	r7, ip
 8000ff2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ff6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ffa:	fb06 f107 	mul.w	r1, r6, r7
 8000ffe:	4299      	cmp	r1, r3
 8001000:	d90a      	bls.n	8001018 <__udivmoddi4+0x64>
 8001002:	eb1c 0303 	adds.w	r3, ip, r3
 8001006:	f106 30ff 	add.w	r0, r6, #4294967295
 800100a:	f080 811f 	bcs.w	800124c <__udivmoddi4+0x298>
 800100e:	4299      	cmp	r1, r3
 8001010:	f240 811c 	bls.w	800124c <__udivmoddi4+0x298>
 8001014:	3e02      	subs	r6, #2
 8001016:	4463      	add	r3, ip
 8001018:	1a5b      	subs	r3, r3, r1
 800101a:	b2a4      	uxth	r4, r4
 800101c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001020:	fb08 3310 	mls	r3, r8, r0, r3
 8001024:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001028:	fb00 f707 	mul.w	r7, r0, r7
 800102c:	42a7      	cmp	r7, r4
 800102e:	d90a      	bls.n	8001046 <__udivmoddi4+0x92>
 8001030:	eb1c 0404 	adds.w	r4, ip, r4
 8001034:	f100 33ff 	add.w	r3, r0, #4294967295
 8001038:	f080 810a 	bcs.w	8001250 <__udivmoddi4+0x29c>
 800103c:	42a7      	cmp	r7, r4
 800103e:	f240 8107 	bls.w	8001250 <__udivmoddi4+0x29c>
 8001042:	4464      	add	r4, ip
 8001044:	3802      	subs	r0, #2
 8001046:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800104a:	1be4      	subs	r4, r4, r7
 800104c:	2600      	movs	r6, #0
 800104e:	b11d      	cbz	r5, 8001058 <__udivmoddi4+0xa4>
 8001050:	40d4      	lsrs	r4, r2
 8001052:	2300      	movs	r3, #0
 8001054:	e9c5 4300 	strd	r4, r3, [r5]
 8001058:	4631      	mov	r1, r6
 800105a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105e:	428b      	cmp	r3, r1
 8001060:	d909      	bls.n	8001076 <__udivmoddi4+0xc2>
 8001062:	2d00      	cmp	r5, #0
 8001064:	f000 80ef 	beq.w	8001246 <__udivmoddi4+0x292>
 8001068:	2600      	movs	r6, #0
 800106a:	e9c5 0100 	strd	r0, r1, [r5]
 800106e:	4630      	mov	r0, r6
 8001070:	4631      	mov	r1, r6
 8001072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001076:	fab3 f683 	clz	r6, r3
 800107a:	2e00      	cmp	r6, #0
 800107c:	d14a      	bne.n	8001114 <__udivmoddi4+0x160>
 800107e:	428b      	cmp	r3, r1
 8001080:	d302      	bcc.n	8001088 <__udivmoddi4+0xd4>
 8001082:	4282      	cmp	r2, r0
 8001084:	f200 80f9 	bhi.w	800127a <__udivmoddi4+0x2c6>
 8001088:	1a84      	subs	r4, r0, r2
 800108a:	eb61 0303 	sbc.w	r3, r1, r3
 800108e:	2001      	movs	r0, #1
 8001090:	469e      	mov	lr, r3
 8001092:	2d00      	cmp	r5, #0
 8001094:	d0e0      	beq.n	8001058 <__udivmoddi4+0xa4>
 8001096:	e9c5 4e00 	strd	r4, lr, [r5]
 800109a:	e7dd      	b.n	8001058 <__udivmoddi4+0xa4>
 800109c:	b902      	cbnz	r2, 80010a0 <__udivmoddi4+0xec>
 800109e:	deff      	udf	#255	; 0xff
 80010a0:	fab2 f282 	clz	r2, r2
 80010a4:	2a00      	cmp	r2, #0
 80010a6:	f040 8092 	bne.w	80011ce <__udivmoddi4+0x21a>
 80010aa:	eba1 010c 	sub.w	r1, r1, ip
 80010ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010b2:	fa1f fe8c 	uxth.w	lr, ip
 80010b6:	2601      	movs	r6, #1
 80010b8:	0c20      	lsrs	r0, r4, #16
 80010ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80010be:	fb07 1113 	mls	r1, r7, r3, r1
 80010c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010c6:	fb0e f003 	mul.w	r0, lr, r3
 80010ca:	4288      	cmp	r0, r1
 80010cc:	d908      	bls.n	80010e0 <__udivmoddi4+0x12c>
 80010ce:	eb1c 0101 	adds.w	r1, ip, r1
 80010d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80010d6:	d202      	bcs.n	80010de <__udivmoddi4+0x12a>
 80010d8:	4288      	cmp	r0, r1
 80010da:	f200 80cb 	bhi.w	8001274 <__udivmoddi4+0x2c0>
 80010de:	4643      	mov	r3, r8
 80010e0:	1a09      	subs	r1, r1, r0
 80010e2:	b2a4      	uxth	r4, r4
 80010e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80010e8:	fb07 1110 	mls	r1, r7, r0, r1
 80010ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80010f0:	fb0e fe00 	mul.w	lr, lr, r0
 80010f4:	45a6      	cmp	lr, r4
 80010f6:	d908      	bls.n	800110a <__udivmoddi4+0x156>
 80010f8:	eb1c 0404 	adds.w	r4, ip, r4
 80010fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8001100:	d202      	bcs.n	8001108 <__udivmoddi4+0x154>
 8001102:	45a6      	cmp	lr, r4
 8001104:	f200 80bb 	bhi.w	800127e <__udivmoddi4+0x2ca>
 8001108:	4608      	mov	r0, r1
 800110a:	eba4 040e 	sub.w	r4, r4, lr
 800110e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001112:	e79c      	b.n	800104e <__udivmoddi4+0x9a>
 8001114:	f1c6 0720 	rsb	r7, r6, #32
 8001118:	40b3      	lsls	r3, r6
 800111a:	fa22 fc07 	lsr.w	ip, r2, r7
 800111e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001122:	fa20 f407 	lsr.w	r4, r0, r7
 8001126:	fa01 f306 	lsl.w	r3, r1, r6
 800112a:	431c      	orrs	r4, r3
 800112c:	40f9      	lsrs	r1, r7
 800112e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001132:	fa00 f306 	lsl.w	r3, r0, r6
 8001136:	fbb1 f8f9 	udiv	r8, r1, r9
 800113a:	0c20      	lsrs	r0, r4, #16
 800113c:	fa1f fe8c 	uxth.w	lr, ip
 8001140:	fb09 1118 	mls	r1, r9, r8, r1
 8001144:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001148:	fb08 f00e 	mul.w	r0, r8, lr
 800114c:	4288      	cmp	r0, r1
 800114e:	fa02 f206 	lsl.w	r2, r2, r6
 8001152:	d90b      	bls.n	800116c <__udivmoddi4+0x1b8>
 8001154:	eb1c 0101 	adds.w	r1, ip, r1
 8001158:	f108 3aff 	add.w	sl, r8, #4294967295
 800115c:	f080 8088 	bcs.w	8001270 <__udivmoddi4+0x2bc>
 8001160:	4288      	cmp	r0, r1
 8001162:	f240 8085 	bls.w	8001270 <__udivmoddi4+0x2bc>
 8001166:	f1a8 0802 	sub.w	r8, r8, #2
 800116a:	4461      	add	r1, ip
 800116c:	1a09      	subs	r1, r1, r0
 800116e:	b2a4      	uxth	r4, r4
 8001170:	fbb1 f0f9 	udiv	r0, r1, r9
 8001174:	fb09 1110 	mls	r1, r9, r0, r1
 8001178:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800117c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001180:	458e      	cmp	lr, r1
 8001182:	d908      	bls.n	8001196 <__udivmoddi4+0x1e2>
 8001184:	eb1c 0101 	adds.w	r1, ip, r1
 8001188:	f100 34ff 	add.w	r4, r0, #4294967295
 800118c:	d26c      	bcs.n	8001268 <__udivmoddi4+0x2b4>
 800118e:	458e      	cmp	lr, r1
 8001190:	d96a      	bls.n	8001268 <__udivmoddi4+0x2b4>
 8001192:	3802      	subs	r0, #2
 8001194:	4461      	add	r1, ip
 8001196:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800119a:	fba0 9402 	umull	r9, r4, r0, r2
 800119e:	eba1 010e 	sub.w	r1, r1, lr
 80011a2:	42a1      	cmp	r1, r4
 80011a4:	46c8      	mov	r8, r9
 80011a6:	46a6      	mov	lr, r4
 80011a8:	d356      	bcc.n	8001258 <__udivmoddi4+0x2a4>
 80011aa:	d053      	beq.n	8001254 <__udivmoddi4+0x2a0>
 80011ac:	b15d      	cbz	r5, 80011c6 <__udivmoddi4+0x212>
 80011ae:	ebb3 0208 	subs.w	r2, r3, r8
 80011b2:	eb61 010e 	sbc.w	r1, r1, lr
 80011b6:	fa01 f707 	lsl.w	r7, r1, r7
 80011ba:	fa22 f306 	lsr.w	r3, r2, r6
 80011be:	40f1      	lsrs	r1, r6
 80011c0:	431f      	orrs	r7, r3
 80011c2:	e9c5 7100 	strd	r7, r1, [r5]
 80011c6:	2600      	movs	r6, #0
 80011c8:	4631      	mov	r1, r6
 80011ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ce:	f1c2 0320 	rsb	r3, r2, #32
 80011d2:	40d8      	lsrs	r0, r3
 80011d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80011d8:	fa21 f303 	lsr.w	r3, r1, r3
 80011dc:	4091      	lsls	r1, r2
 80011de:	4301      	orrs	r1, r0
 80011e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011e4:	fa1f fe8c 	uxth.w	lr, ip
 80011e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80011ec:	fb07 3610 	mls	r6, r7, r0, r3
 80011f0:	0c0b      	lsrs	r3, r1, #16
 80011f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80011f6:	fb00 f60e 	mul.w	r6, r0, lr
 80011fa:	429e      	cmp	r6, r3
 80011fc:	fa04 f402 	lsl.w	r4, r4, r2
 8001200:	d908      	bls.n	8001214 <__udivmoddi4+0x260>
 8001202:	eb1c 0303 	adds.w	r3, ip, r3
 8001206:	f100 38ff 	add.w	r8, r0, #4294967295
 800120a:	d22f      	bcs.n	800126c <__udivmoddi4+0x2b8>
 800120c:	429e      	cmp	r6, r3
 800120e:	d92d      	bls.n	800126c <__udivmoddi4+0x2b8>
 8001210:	3802      	subs	r0, #2
 8001212:	4463      	add	r3, ip
 8001214:	1b9b      	subs	r3, r3, r6
 8001216:	b289      	uxth	r1, r1
 8001218:	fbb3 f6f7 	udiv	r6, r3, r7
 800121c:	fb07 3316 	mls	r3, r7, r6, r3
 8001220:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001224:	fb06 f30e 	mul.w	r3, r6, lr
 8001228:	428b      	cmp	r3, r1
 800122a:	d908      	bls.n	800123e <__udivmoddi4+0x28a>
 800122c:	eb1c 0101 	adds.w	r1, ip, r1
 8001230:	f106 38ff 	add.w	r8, r6, #4294967295
 8001234:	d216      	bcs.n	8001264 <__udivmoddi4+0x2b0>
 8001236:	428b      	cmp	r3, r1
 8001238:	d914      	bls.n	8001264 <__udivmoddi4+0x2b0>
 800123a:	3e02      	subs	r6, #2
 800123c:	4461      	add	r1, ip
 800123e:	1ac9      	subs	r1, r1, r3
 8001240:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001244:	e738      	b.n	80010b8 <__udivmoddi4+0x104>
 8001246:	462e      	mov	r6, r5
 8001248:	4628      	mov	r0, r5
 800124a:	e705      	b.n	8001058 <__udivmoddi4+0xa4>
 800124c:	4606      	mov	r6, r0
 800124e:	e6e3      	b.n	8001018 <__udivmoddi4+0x64>
 8001250:	4618      	mov	r0, r3
 8001252:	e6f8      	b.n	8001046 <__udivmoddi4+0x92>
 8001254:	454b      	cmp	r3, r9
 8001256:	d2a9      	bcs.n	80011ac <__udivmoddi4+0x1f8>
 8001258:	ebb9 0802 	subs.w	r8, r9, r2
 800125c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001260:	3801      	subs	r0, #1
 8001262:	e7a3      	b.n	80011ac <__udivmoddi4+0x1f8>
 8001264:	4646      	mov	r6, r8
 8001266:	e7ea      	b.n	800123e <__udivmoddi4+0x28a>
 8001268:	4620      	mov	r0, r4
 800126a:	e794      	b.n	8001196 <__udivmoddi4+0x1e2>
 800126c:	4640      	mov	r0, r8
 800126e:	e7d1      	b.n	8001214 <__udivmoddi4+0x260>
 8001270:	46d0      	mov	r8, sl
 8001272:	e77b      	b.n	800116c <__udivmoddi4+0x1b8>
 8001274:	3b02      	subs	r3, #2
 8001276:	4461      	add	r1, ip
 8001278:	e732      	b.n	80010e0 <__udivmoddi4+0x12c>
 800127a:	4630      	mov	r0, r6
 800127c:	e709      	b.n	8001092 <__udivmoddi4+0xde>
 800127e:	4464      	add	r4, ip
 8001280:	3802      	subs	r0, #2
 8001282:	e742      	b.n	800110a <__udivmoddi4+0x156>

08001284 <__aeabi_idiv0>:
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop

08001288 <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f001 fdc8 	bl	8002e2a <null_ptr_check>
 800129a:	4603      	mov	r3, r0
 800129c:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d131      	bne.n	800130a <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7a1b      	ldrb	r3, [r3, #8]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d003      	beq.n	80012b6 <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2201      	movs	r2, #1
 80012b2:	729a      	strb	r2, [r3, #10]
 80012b4:	e002      	b.n	80012bc <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	729a      	strb	r2, [r3, #10]
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 80012bc:	f107 010e 	add.w	r1, r7, #14
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	2000      	movs	r0, #0
 80012c6:	f000 f826 	bl	8001316 <bmp3_get_regs>
 80012ca:	4603      	mov	r3, r0
 80012cc:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 80012ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d119      	bne.n	800130a <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 80012d6:	7bbb      	ldrb	r3, [r7, #14]
 80012d8:	2b50      	cmp	r3, #80	; 0x50
 80012da:	d002      	beq.n	80012e2 <bmp3_init+0x5a>
 80012dc:	7bbb      	ldrb	r3, [r7, #14]
 80012de:	2b60      	cmp	r3, #96	; 0x60
 80012e0:	d111      	bne.n	8001306 <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 80012e2:	7bba      	ldrb	r2, [r7, #14]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 f9ae 	bl	800164a <bmp3_soft_reset>
 80012ee:	4603      	mov	r3, r0
 80012f0:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 80012f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d107      	bne.n	800130a <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 fb4e 	bl	800199c <get_calib_data>
 8001300:	4603      	mov	r3, r0
 8001302:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8001304:	e001      	b.n	800130a <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8001306:	23f9      	movs	r3, #249	; 0xf9
 8001308:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800130a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8001316:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800131a:	b08b      	sub	sp, #44	; 0x2c
 800131c:	af00      	add	r7, sp, #0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	4603      	mov	r3, r0
 8001326:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001328:	6838      	ldr	r0, [r7, #0]
 800132a:	f001 fd7e 	bl	8002e2a <null_ptr_check>
 800132e:	4603      	mov	r3, r0
 8001330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8001334:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8001338:	2b00      	cmp	r3, #0
 800133a:	d172      	bne.n	8001422 <bmp3_get_regs+0x10c>
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d06f      	beq.n	8001422 <bmp3_get_regs+0x10c>
    {
 8001342:	466b      	mov	r3, sp
 8001344:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	7a9b      	ldrb	r3, [r3, #10]
 800134a:	461a      	mov	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4413      	add	r3, r2
 8001350:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	7a9b      	ldrb	r3, [r3, #10]
 8001356:	461a      	mov	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	18d1      	adds	r1, r2, r3
 800135c:	460b      	mov	r3, r1
 800135e:	3b01      	subs	r3, #1
 8001360:	61bb      	str	r3, [r7, #24]
 8001362:	2300      	movs	r3, #0
 8001364:	4688      	mov	r8, r1
 8001366:	4699      	mov	r9, r3
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001374:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001378:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800137c:	2300      	movs	r3, #0
 800137e:	460c      	mov	r4, r1
 8001380:	461d      	mov	r5, r3
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	00eb      	lsls	r3, r5, #3
 800138c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001390:	00e2      	lsls	r2, r4, #3
 8001392:	1dcb      	adds	r3, r1, #7
 8001394:	08db      	lsrs	r3, r3, #3
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	ebad 0d03 	sub.w	sp, sp, r3
 800139c:	466b      	mov	r3, sp
 800139e:	3300      	adds	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	7a1b      	ldrb	r3, [r3, #8]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d025      	beq.n	80013f6 <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013b0:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	68dc      	ldr	r4, [r3, #12]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	7bf8      	ldrb	r0, [r7, #15]
 80013bc:	69fa      	ldr	r2, [r7, #28]
 80013be:	6979      	ldr	r1, [r7, #20]
 80013c0:	47a0      	blx	r4
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
 80013ce:	e00d      	b.n	80013ec <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	7a9b      	ldrb	r3, [r3, #10]
 80013d4:	461a      	mov	r2, r3
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	441a      	add	r2, r3
 80013da:	68b9      	ldr	r1, [r7, #8]
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	440b      	add	r3, r1
 80013e0:	6979      	ldr	r1, [r7, #20]
 80013e2:	5c8a      	ldrb	r2, [r1, r2]
 80013e4:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	3301      	adds	r3, #1
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
 80013ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d3ed      	bcc.n	80013d0 <bmp3_get_regs+0xba>
 80013f4:	e00b      	b.n	800140e <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	68dc      	ldr	r4, [r3, #12]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	7bf8      	ldrb	r0, [r7, #15]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	68b9      	ldr	r1, [r7, #8]
 8001404:	47a0      	blx	r4
 8001406:	4603      	mov	r3, r0
 8001408:	461a      	mov	r2, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d002      	beq.n	800141e <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 8001418:	23fe      	movs	r3, #254	; 0xfe
 800141a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800141e:	46b5      	mov	sp, r6
    {
 8001420:	e002      	b.n	8001428 <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001422:	23ff      	movs	r3, #255	; 0xff
 8001424:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }

    return rslt;
 8001428:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 800142c:	4618      	mov	r0, r3
 800142e:	372c      	adds	r7, #44	; 0x2c
 8001430:	46bd      	mov	sp, r7
 8001432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001436 <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8001436:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800143a:	b089      	sub	sp, #36	; 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	466b      	mov	r3, sp
 8001448:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	0059      	lsls	r1, r3, #1
 800144e:	460b      	mov	r3, r1
 8001450:	3b01      	subs	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	2300      	movs	r3, #0
 8001456:	4688      	mov	r8, r1
 8001458:	4699      	mov	r9, r3
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001466:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800146a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800146e:	2300      	movs	r3, #0
 8001470:	460c      	mov	r4, r1
 8001472:	461d      	mov	r5, r3
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	00eb      	lsls	r3, r5, #3
 800147e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001482:	00e2      	lsls	r2, r4, #3
 8001484:	1dcb      	adds	r3, r1, #7
 8001486:	08db      	lsrs	r3, r3, #3
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	ebad 0d03 	sub.w	sp, sp, r3
 800148e:	466b      	mov	r3, sp
 8001490:	3300      	adds	r3, #0
 8001492:	613b      	str	r3, [r7, #16]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001494:	6838      	ldr	r0, [r7, #0]
 8001496:	f001 fcc8 	bl	8002e2a <null_ptr_check>
 800149a:	4603      	mov	r3, r0
 800149c:	76fb      	strb	r3, [r7, #27]

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800149e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d14c      	bne.n	8001540 <bmp3_set_regs+0x10a>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d049      	beq.n	8001540 <bmp3_set_regs+0x10a>
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d046      	beq.n	8001540 <bmp3_set_regs+0x10a>
    {
        if (len != 0)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d040      	beq.n	800153a <bmp3_set_regs+0x104>
        {
            temp_buff[0] = reg_data[0];
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	781a      	ldrb	r2, [r3, #0]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	7a1b      	ldrb	r3, [r3, #8]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d114      	bne.n	80014f2 <bmp3_set_regs+0xbc>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80014c8:	2300      	movs	r3, #0
 80014ca:	76bb      	strb	r3, [r7, #26]
 80014cc:	e00d      	b.n	80014ea <bmp3_set_regs+0xb4>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80014ce:	7ebb      	ldrb	r3, [r7, #26]
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	4413      	add	r3, r2
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	7ebb      	ldrb	r3, [r7, #26]
 80014d8:	68f9      	ldr	r1, [r7, #12]
 80014da:	440b      	add	r3, r1
 80014dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80014e4:	7ebb      	ldrb	r3, [r7, #26]
 80014e6:	3301      	adds	r3, #1
 80014e8:	76bb      	strb	r3, [r7, #26]
 80014ea:	7ebb      	ldrb	r3, [r7, #26]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d8ed      	bhi.n	80014ce <bmp3_set_regs+0x98>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d909      	bls.n	800150c <bmp3_set_regs+0xd6>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	6939      	ldr	r1, [r7, #16]
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f000 fa71 	bl	80019e6 <interleave_reg_addr>
                temp_len = len * 2;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	61fb      	str	r3, [r7, #28]
 800150a:	e001      	b.n	8001510 <bmp3_set_regs+0xda>
            }
            else
            {
                temp_len = len;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	61fb      	str	r3, [r7, #28]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	691c      	ldr	r4, [r3, #16]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	7818      	ldrb	r0, [r3, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	6939      	ldr	r1, [r7, #16]
 8001520:	47a0      	blx	r4
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <bmp3_set_regs+0x110>
            {
                rslt = BMP3_E_COMM_FAIL;
 8001534:	23fe      	movs	r3, #254	; 0xfe
 8001536:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 8001538:	e005      	b.n	8001546 <bmp3_set_regs+0x110>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 800153a:	23fa      	movs	r3, #250	; 0xfa
 800153c:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 800153e:	e002      	b.n	8001546 <bmp3_set_regs+0x110>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001540:	23ff      	movs	r3, #255	; 0xff
 8001542:	76fb      	strb	r3, [r7, #27]
 8001544:	e000      	b.n	8001548 <bmp3_set_regs+0x112>
        if (len != 0)
 8001546:	bf00      	nop
    }

    return rslt;
 8001548:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800154c:	46b5      	mov	sp, r6
}
 800154e:	4618      	mov	r0, r3
 8001550:	3724      	adds	r7, #36	; 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001558 <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d03a      	beq.n	80015e4 <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 800156e:	68f9      	ldr	r1, [r7, #12]
 8001570:	2006      	movs	r0, #6
 8001572:	f001 fc42 	bl	8002dfa <are_settings_changed>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d006      	beq.n	800158a <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	68b9      	ldr	r1, [r7, #8]
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f000 fa96 	bl	8001ab2 <set_pwr_ctrl_settings>
 8001586:	4603      	mov	r3, r0
 8001588:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 800158a:	68f9      	ldr	r1, [r7, #12]
 800158c:	20f0      	movs	r0, #240	; 0xf0
 800158e:	f001 fc34 	bl	8002dfa <are_settings_changed>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d006      	beq.n	80015a6 <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	68b9      	ldr	r1, [r7, #8]
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f000 fad7 	bl	8001b50 <set_odr_filter_settings>
 80015a2:	4603      	mov	r3, r0
 80015a4:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 80015a6:	68f9      	ldr	r1, [r7, #12]
 80015a8:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80015ac:	f001 fc25 	bl	8002dfa <are_settings_changed>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d006      	beq.n	80015c4 <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f000 fb36 	bl	8001c2c <set_int_ctrl_settings>
 80015c0:	4603      	mov	r3, r0
 80015c2:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 80015c4:	68f9      	ldr	r1, [r7, #12]
 80015c6:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80015ca:	f001 fc16 	bl	8002dfa <are_settings_changed>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d009      	beq.n	80015e8 <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	68b9      	ldr	r1, [r7, #8]
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 fba1 	bl	8001d20 <set_advance_settings>
 80015de:	4603      	mov	r3, r0
 80015e0:	75fb      	strb	r3, [r7, #23]
 80015e2:	e001      	b.n	80015e8 <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80015e4:	23ff      	movs	r3, #255	; 0xff
 80015e6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80015e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <bmp3_get_status>:
 * @brief This API gets the command ready, data ready for pressure and
 * temperature and interrupt (fifo watermark, fifo full, data ready) and
 * error status from the sensor.
 */
int8_t bmp3_get_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (status != NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d01a      	beq.n	800163a <bmp3_get_status+0x46>
    {
        rslt = get_sensor_status(status, dev);
 8001604:	6839      	ldr	r1, [r7, #0]
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f001 fc33 	bl	8002e72 <get_sensor_status>
 800160c:	4603      	mov	r3, r0
 800160e:	73fb      	strb	r3, [r7, #15]

        /* Proceed further if the earlier operation is fine */
        if (rslt == BMP3_OK)
 8001610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d112      	bne.n	800163e <bmp3_get_status+0x4a>
        {
            rslt = get_int_status(status, dev);
 8001618:	6839      	ldr	r1, [r7, #0]
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f001 fc6c 	bl	8002ef8 <get_int_status>
 8001620:	4603      	mov	r3, r0
 8001622:	73fb      	strb	r3, [r7, #15]

            /* Proceed further if the earlier operation is fine */
            if (rslt == BMP3_OK)
 8001624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d108      	bne.n	800163e <bmp3_get_status+0x4a>
            {
                /* Get the error status */
                rslt = get_err_status(status, dev);
 800162c:	6839      	ldr	r1, [r7, #0]
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f001 fc90 	bl	8002f54 <get_err_status>
 8001634:	4603      	mov	r3, r0
 8001636:	73fb      	strb	r3, [r7, #15]
 8001638:	e001      	b.n	800163e <bmp3_get_status+0x4a>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800163a:	23ff      	movs	r3, #255	; 0xff
 800163c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800163e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 8001652:	237e      	movs	r3, #126	; 0x7e
 8001654:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 8001656:	23b6      	movs	r3, #182	; 0xb6
 8001658:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 800165a:	f107 010c 	add.w	r1, r7, #12
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	2003      	movs	r0, #3
 8001664:	f7ff fe57 	bl	8001316 <bmp3_get_regs>
 8001668:	4603      	mov	r3, r0
 800166a:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 800166c:	7b3b      	ldrb	r3, [r7, #12]
 800166e:	f003 0310 	and.w	r3, r3, #16
 8001672:	2b00      	cmp	r3, #0
 8001674:	d02d      	beq.n	80016d2 <bmp3_soft_reset+0x88>
 8001676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d129      	bne.n	80016d2 <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800167e:	f107 010d 	add.w	r1, r7, #13
 8001682:	f107 000e 	add.w	r0, r7, #14
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f7ff fed4 	bl	8001436 <bmp3_set_regs>
 800168e:	4603      	mov	r3, r0
 8001690:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8001692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d11b      	bne.n	80016d2 <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6852      	ldr	r2, [r2, #4]
 80016a2:	4611      	mov	r1, r2
 80016a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016a8:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 80016aa:	f107 010b 	add.w	r1, r7, #11
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	2002      	movs	r0, #2
 80016b4:	f7ff fe2f 	bl	8001316 <bmp3_get_regs>
 80016b8:	4603      	mov	r3, r0
 80016ba:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 80016bc:	7afb      	ldrb	r3, [r7, #11]
 80016be:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d103      	bne.n	80016ce <bmp3_soft_reset+0x84>
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 80016ce:	23fc      	movs	r3, #252	; 0xfc
 80016d0:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80016d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b084      	sub	sp, #16
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80016e8:	6838      	ldr	r0, [r7, #0]
 80016ea:	f001 fb9e 	bl	8002e2a <null_ptr_check>
 80016ee:	4603      	mov	r3, r0
 80016f0:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 80016f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d139      	bne.n	800176e <bmp3_set_op_mode+0x90>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d036      	beq.n	800176e <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 8001706:	f107 030d 	add.w	r3, r7, #13
 800170a:	6839      	ldr	r1, [r7, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f838 	bl	8001782 <bmp3_get_op_mode>
 8001712:	4603      	mov	r3, r0
 8001714:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 8001716:	7b7b      	ldrb	r3, [r7, #13]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d010      	beq.n	800173e <bmp3_set_op_mode+0x60>
 800171c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10c      	bne.n	800173e <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 8001724:	6838      	ldr	r0, [r7, #0]
 8001726:	f000 f8f7 	bl	8001918 <put_device_to_sleep>
 800172a:	4603      	mov	r3, r0
 800172c:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	6852      	ldr	r2, [r2, #4]
 8001736:	4611      	mov	r1, r2
 8001738:	f241 3088 	movw	r0, #5000	; 0x1388
 800173c:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 800173e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d116      	bne.n	8001774 <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 8001746:	7bbb      	ldrb	r3, [r7, #14]
 8001748:	2b03      	cmp	r3, #3
 800174a:	d106      	bne.n	800175a <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 800174c:	6839      	ldr	r1, [r7, #0]
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f879 	bl	8001846 <set_normal_mode>
 8001754:	4603      	mov	r3, r0
 8001756:	73fb      	strb	r3, [r7, #15]
    {
 8001758:	e00c      	b.n	8001774 <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 800175a:	7bbb      	ldrb	r3, [r7, #14]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d109      	bne.n	8001774 <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 8001760:	6839      	ldr	r1, [r7, #0]
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f8a2 	bl	80018ac <write_power_mode>
 8001768:	4603      	mov	r3, r0
 800176a:	73fb      	strb	r3, [r7, #15]
    {
 800176c:	e002      	b.n	8001774 <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800176e:	23ff      	movs	r3, #255	; 0xff
 8001770:	73fb      	strb	r3, [r7, #15]
 8001772:	e000      	b.n	8001776 <bmp3_set_op_mode+0x98>
    {
 8001774:	bf00      	nop
    }

    return rslt;
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d011      	beq.n	80017b6 <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	2201      	movs	r2, #1
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	201b      	movs	r0, #27
 800179a:	f7ff fdbc 	bl	8001316 <bmp3_get_regs>
 800179e:	4603      	mov	r3, r0
 80017a0:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	111b      	asrs	r3, r3, #4
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	e001      	b.n	80017ba <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80017b6:	23ff      	movs	r3, #255	; 0xff
 80017b8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80017ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b08a      	sub	sp, #40	; 0x28
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
 80017d8:	2300      	movs	r3, #0
 80017da:	84bb      	strh	r3, [r7, #36]	; 0x24
    struct bmp3_uncomp_data uncomp_data = { 0 };
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]

    if (comp_data != NULL)
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d021      	beq.n	8001834 <bmp3_get_sensor_data+0x6e>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 80017f0:	f107 0120 	add.w	r1, r7, #32
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2206      	movs	r2, #6
 80017f8:	2004      	movs	r0, #4
 80017fa:	f7ff fd8c 	bl	8001316 <bmp3_get_regs>
 80017fe:	4603      	mov	r3, r0
 8001800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BMP3_OK)
 8001804:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001808:	2b00      	cmp	r3, #0
 800180a:	d116      	bne.n	800183a <bmp3_get_sensor_data+0x74>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 800180c:	f107 0210 	add.w	r2, r7, #16
 8001810:	f107 0320 	add.w	r3, r7, #32
 8001814:	4611      	mov	r1, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f000 fc50 	bl	80020bc <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3318      	adds	r3, #24
 8001820:	f107 0110 	add.w	r1, r7, #16
 8001824:	7bf8      	ldrb	r0, [r7, #15]
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	f000 fc83 	bl	8002132 <compensate_data>
 800182c:	4603      	mov	r3, r0
 800182e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001832:	e002      	b.n	800183a <bmp3_get_sensor_data+0x74>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001834:	23ff      	movs	r3, #255	; 0xff
 8001836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800183a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800183e:	4618      	mov	r0, r3
 8001840:	3728      	adds	r7, #40	; 0x28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b084      	sub	sp, #16
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 8001850:	6839      	ldr	r1, [r7, #0]
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f888 	bl	8001968 <validate_normal_mode_settings>
 8001858:	4603      	mov	r3, r0
 800185a:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 800185c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d11d      	bne.n	80018a0 <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 8001864:	6839      	ldr	r1, [r7, #0]
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f820 	bl	80018ac <write_power_mode>
 800186c:	4603      	mov	r3, r0
 800186e:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8001870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d113      	bne.n	80018a0 <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 8001878:	f107 010e 	add.w	r1, r7, #14
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2201      	movs	r2, #1
 8001880:	2002      	movs	r0, #2
 8001882:	f7ff fd48 	bl	8001316 <bmp3_get_regs>
 8001886:	4603      	mov	r3, r0
 8001888:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 800188a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d106      	bne.n	80018a0 <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8001892:	7bbb      	ldrb	r3, [r7, #14]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 800189c:	23fb      	movs	r3, #251	; 0xfb
 800189e:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80018a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80018b6:	231b      	movs	r3, #27
 80018b8:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 80018c0:	7b78      	ldrb	r0, [r7, #13]
 80018c2:	f107 010c 	add.w	r1, r7, #12
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f7ff fd24 	bl	8001316 <bmp3_get_regs>
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 80018d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d118      	bne.n	800190c <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 80018da:	7b3b      	ldrb	r3, [r7, #12]
 80018dc:	b25b      	sxtb	r3, r3
 80018de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80018e2:	b25a      	sxtb	r2, r3
 80018e4:	7bbb      	ldrb	r3, [r7, #14]
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	b25b      	sxtb	r3, r3
 80018ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80018ee:	b25b      	sxtb	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b25b      	sxtb	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80018f8:	f107 010c 	add.w	r1, r7, #12
 80018fc:	f107 000d 	add.w	r0, r7, #13
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	2201      	movs	r2, #1
 8001904:	f7ff fd97 	bl	8001436 <bmp3_set_regs>
 8001908:	4603      	mov	r3, r0
 800190a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800190c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8001920:	231b      	movs	r3, #27
 8001922:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 8001924:	f107 010d 	add.w	r1, r7, #13
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	201b      	movs	r0, #27
 800192e:	f7ff fcf2 	bl	8001316 <bmp3_get_regs>
 8001932:	4603      	mov	r3, r0
 8001934:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8001936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10e      	bne.n	800195c <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 800193e:	7b7b      	ldrb	r3, [r7, #13]
 8001940:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001944:	b2db      	uxtb	r3, r3
 8001946:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 8001948:	f107 010d 	add.w	r1, r7, #13
 800194c:	f107 000e 	add.w	r0, r7, #14
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f7ff fd6f 	bl	8001436 <bmp3_set_regs>
 8001958:	4603      	mov	r3, r0
 800195a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800195c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 8001972:	6839      	ldr	r1, [r7, #0]
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 fa26 	bl	8001dc6 <get_odr_filter_settings>
 800197a:	4603      	mov	r3, r0
 800197c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d104      	bne.n	8001990 <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 fa3a 	bl	8001e00 <validate_osr_and_odr_settings>
 800198c:	4603      	mov	r3, r0
 800198e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001990:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 80019a4:	2331      	movs	r3, #49	; 0x31
 80019a6:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 80019bc:	f107 0108 	add.w	r1, r7, #8
 80019c0:	7ff8      	ldrb	r0, [r7, #31]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2215      	movs	r2, #21
 80019c6:	f7ff fca6 	bl	8001316 <bmp3_get_regs>
 80019ca:	4603      	mov	r3, r0
 80019cc:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 fc1e 	bl	8002216 <parse_calib_data>

    return rslt;
 80019da:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3720      	adds	r7, #32
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b087      	sub	sp, #28
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80019f4:	2301      	movs	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	e015      	b.n	8001a26 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	441a      	add	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	3b01      	subs	r3, #1
 8001a06:	68b9      	ldr	r1, [r7, #8]
 8001a08:	440b      	add	r3, r1
 8001a0a:	7812      	ldrb	r2, [r2, #0]
 8001a0c:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	441a      	add	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	440b      	add	r3, r1
 8001a1c:	7812      	ldrb	r2, [r2, #0]
 8001a1e:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	3301      	adds	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d3e5      	bcc.n	80019fa <interleave_reg_addr+0x14>
    }
}
 8001a2e:	bf00      	nop
 8001a30:	bf00      	nop
 8001a32:	371c      	adds	r7, #28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	4413      	add	r3, r2
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	10db      	asrs	r3, r3, #3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	3301      	adds	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	105b      	asrs	r3, r3, #1
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	709a      	strb	r2, [r3, #2]
}
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8001abe:	231b      	movs	r3, #27
 8001ac0:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001ac2:	7db8      	ldrb	r0, [r7, #22]
 8001ac4:	f107 0115 	add.w	r1, r7, #21
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f7ff fc23 	bl	8001316 <bmp3_get_regs>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001ad4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d132      	bne.n	8001b42 <set_pwr_ctrl_settings+0x90>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00e      	beq.n	8001b04 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 8001ae6:	7d7b      	ldrb	r3, [r7, #21]
 8001ae8:	b25b      	sxtb	r3, r3
 8001aea:	f023 0301 	bic.w	r3, r3, #1
 8001aee:	b25a      	sxtb	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	785b      	ldrb	r3, [r3, #1]
 8001af4:	b25b      	sxtb	r3, r3
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	b25b      	sxtb	r3, r3
 8001afc:	4313      	orrs	r3, r2
 8001afe:	b25b      	sxtb	r3, r3
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00f      	beq.n	8001b2e <set_pwr_ctrl_settings+0x7c>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 8001b0e:	7d7b      	ldrb	r3, [r7, #21]
 8001b10:	b25b      	sxtb	r3, r3
 8001b12:	f023 0302 	bic.w	r3, r3, #2
 8001b16:	b25a      	sxtb	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	789b      	ldrb	r3, [r3, #2]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	b25b      	sxtb	r3, r3
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	b25b      	sxtb	r3, r3
 8001b26:	4313      	orrs	r3, r2
 8001b28:	b25b      	sxtb	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001b2e:	f107 0115 	add.w	r1, r7, #21
 8001b32:	f107 0016 	add.w	r0, r7, #22
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f7ff fc7c 	bl	8001436 <bmp3_set_regs>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001b42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 8001b5c:	4b32      	ldr	r3, [pc, #200]	; (8001c28 <set_odr_filter_settings+0xd8>)
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	83bb      	strh	r3, [r7, #28]
 8001b62:	2300      	movs	r3, #0
 8001b64:	77bb      	strb	r3, [r7, #30]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8001b6a:	f107 0118 	add.w	r1, r7, #24
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2204      	movs	r2, #4
 8001b72:	201c      	movs	r0, #28
 8001b74:	f7ff fbcf 	bl	8001316 <bmp3_get_regs>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 8001b7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d14a      	bne.n	8001c1a <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8001b84:	68f9      	ldr	r1, [r7, #12]
 8001b86:	2030      	movs	r0, #48	; 0x30
 8001b88:	f001 f937 	bl	8002dfa <are_settings_changed>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00b      	beq.n	8001baa <set_odr_filter_settings+0x5a>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 8001b92:	f107 0017 	add.w	r0, r7, #23
 8001b96:	f107 0218 	add.w	r2, r7, #24
 8001b9a:	f107 011c 	add.w	r1, r7, #28
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 f9c1 	bl	8001f2c <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 8001baa:	68f9      	ldr	r1, [r7, #12]
 8001bac:	2080      	movs	r0, #128	; 0x80
 8001bae:	f001 f924 	bl	8002dfa <are_settings_changed>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <set_odr_filter_settings+0x7a>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 8001bb8:	f107 0217 	add.w	r2, r7, #23
 8001bbc:	f107 0118 	add.w	r1, r7, #24
 8001bc0:	f107 001c 	add.w	r0, r7, #28
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f000 fa09 	bl	8001fdc <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 8001bca:	68f9      	ldr	r1, [r7, #12]
 8001bcc:	2040      	movs	r0, #64	; 0x40
 8001bce:	f001 f914 	bl	8002dfa <are_settings_changed>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <set_odr_filter_settings+0x9a>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 8001bd8:	f107 0217 	add.w	r2, r7, #23
 8001bdc:	f107 0118 	add.w	r1, r7, #24
 8001be0:	f107 001c 	add.w	r0, r7, #28
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f000 fa33 	bl	8002050 <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d104      	bne.n	8001bfc <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 8001bf2:	68b8      	ldr	r0, [r7, #8]
 8001bf4:	f000 f904 	bl	8001e00 <validate_osr_and_odr_settings>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 8001bfc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10a      	bne.n	8001c1a <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 8001c04:	7dfb      	ldrb	r3, [r7, #23]
 8001c06:	461a      	mov	r2, r3
 8001c08:	f107 0118 	add.w	r1, r7, #24
 8001c0c:	f107 001c 	add.w	r0, r7, #28
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f7ff fc10 	bl	8001436 <bmp3_set_regs>
 8001c16:	4603      	mov	r3, r0
 8001c18:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8001c1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3720      	adds	r7, #32
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	080194c8 	.word	0x080194c8

08001c2c <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 8001c38:	2319      	movs	r3, #25
 8001c3a:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001c3c:	7d78      	ldrb	r0, [r7, #21]
 8001c3e:	f107 0116 	add.w	r1, r7, #22
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f7ff fb66 	bl	8001316 <bmp3_get_regs>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001c4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d15e      	bne.n	8001d14 <set_int_ctrl_settings+0xe8>
    {
        int_settings = settings->int_settings;
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f107 0310 	add.w	r3, r7, #16
 8001c5c:	3207      	adds	r2, #7
 8001c5e:	6810      	ldr	r0, [r2, #0]
 8001c60:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00d      	beq.n	8001c88 <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8001c6c:	7dbb      	ldrb	r3, [r7, #22]
 8001c6e:	b25b      	sxtb	r3, r3
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	b25a      	sxtb	r2, r3
 8001c76:	7c3b      	ldrb	r3, [r7, #16]
 8001c78:	b25b      	sxtb	r3, r3
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	b25b      	sxtb	r3, r3
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b25b      	sxtb	r3, r3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00e      	beq.n	8001cb0 <set_int_ctrl_settings+0x84>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 8001c92:	7dbb      	ldrb	r3, [r7, #22]
 8001c94:	b25b      	sxtb	r3, r3
 8001c96:	f023 0302 	bic.w	r3, r3, #2
 8001c9a:	b25a      	sxtb	r2, r3
 8001c9c:	7c7b      	ldrb	r3, [r7, #17]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	b25b      	sxtb	r3, r3
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	b25b      	sxtb	r3, r3
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	b25b      	sxtb	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00e      	beq.n	8001cd8 <set_int_ctrl_settings+0xac>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 8001cba:	7dbb      	ldrb	r3, [r7, #22]
 8001cbc:	b25b      	sxtb	r3, r3
 8001cbe:	f023 0304 	bic.w	r3, r3, #4
 8001cc2:	b25a      	sxtb	r2, r3
 8001cc4:	7cbb      	ldrb	r3, [r7, #18]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	b25b      	sxtb	r3, r3
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	b25b      	sxtb	r3, r3
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	b25b      	sxtb	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00e      	beq.n	8001d00 <set_int_ctrl_settings+0xd4>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 8001ce2:	7dbb      	ldrb	r3, [r7, #22]
 8001ce4:	b25b      	sxtb	r3, r3
 8001ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cea:	b25a      	sxtb	r2, r3
 8001cec:	7cfb      	ldrb	r3, [r7, #19]
 8001cee:	019b      	lsls	r3, r3, #6
 8001cf0:	b25b      	sxtb	r3, r3
 8001cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf6:	b25b      	sxtb	r3, r3
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	b25b      	sxtb	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001d00:	f107 0116 	add.w	r1, r7, #22
 8001d04:	f107 0015 	add.w	r0, r7, #21
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f7ff fb93 	bl	8001436 <bmp3_set_regs>
 8001d10:	4603      	mov	r3, r0
 8001d12:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001d14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	f107 0310 	add.w	r3, r7, #16
 8001d32:	320b      	adds	r2, #11
 8001d34:	8812      	ldrh	r2, [r2, #0]
 8001d36:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 8001d38:	231a      	movs	r3, #26
 8001d3a:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001d3c:	7db8      	ldrb	r0, [r7, #22]
 8001d3e:	f107 0115 	add.w	r1, r7, #21
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f7ff fae6 	bl	8001316 <bmp3_get_regs>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001d4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d131      	bne.n	8001dba <set_advance_settings+0x9a>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00e      	beq.n	8001d7e <set_advance_settings+0x5e>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8001d60:	7d7b      	ldrb	r3, [r7, #21]
 8001d62:	b25b      	sxtb	r3, r3
 8001d64:	f023 0302 	bic.w	r3, r3, #2
 8001d68:	b25a      	sxtb	r2, r3
 8001d6a:	7c3b      	ldrb	r3, [r7, #16]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	b25b      	sxtb	r3, r3
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	b25b      	sxtb	r3, r3
 8001d76:	4313      	orrs	r3, r2
 8001d78:	b25b      	sxtb	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00e      	beq.n	8001da6 <set_advance_settings+0x86>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8001d88:	7d7b      	ldrb	r3, [r7, #21]
 8001d8a:	b25b      	sxtb	r3, r3
 8001d8c:	f023 0304 	bic.w	r3, r3, #4
 8001d90:	b25a      	sxtb	r2, r3
 8001d92:	7c7b      	ldrb	r3, [r7, #17]
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	b25b      	sxtb	r3, r3
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	b25b      	sxtb	r3, r3
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	b25b      	sxtb	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001da6:	f107 0115 	add.w	r1, r7, #21
 8001daa:	f107 0016 	add.w	r0, r7, #22
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f7ff fb40 	bl	8001436 <bmp3_set_regs>
 8001db6:	4603      	mov	r3, r0
 8001db8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001dba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8001dd0:	f107 0108 	add.w	r1, r7, #8
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	201c      	movs	r0, #28
 8001dda:	f7ff fa9c 	bl	8001316 <bmp3_get_regs>
 8001dde:	4603      	mov	r3, r0
 8001de0:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	1cda      	adds	r2, r3, #3
 8001de6:	f107 0308 	add.w	r3, r7, #8
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fe25 	bl	8001a3c <parse_odr_filter_settings>

    return rslt;
 8001df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b098      	sub	sp, #96	; 0x60
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8001e08:	23ea      	movs	r3, #234	; 0xea
 8001e0a:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8001e10:	4a1a      	ldr	r2, [pc, #104]	; (8001e7c <validate_osr_and_odr_settings+0x7c>)
 8001e12:	f107 030c 	add.w	r3, r7, #12
 8001e16:	4611      	mov	r1, r2
 8001e18:	2248      	movs	r2, #72	; 0x48
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f014 f968 	bl	80160f0 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	785b      	ldrb	r3, [r3, #1]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f83f 	bl	8001eac <calculate_press_meas_time>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e32:	4413      	add	r3, r2
 8001e34:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (settings->temp_en)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	789b      	ldrb	r3, [r3, #2]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d006      	beq.n	8001e4c <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f854 	bl	8001eec <calculate_temp_meas_time>
 8001e44:	4602      	mov	r2, r0
 8001e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e48:	4413      	add	r3, r2
 8001e4a:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8001e4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e50:	4413      	add	r3, r2
 8001e52:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	799b      	ldrb	r3, [r3, #6]
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	3360      	adds	r3, #96	; 0x60
 8001e5c:	443b      	add	r3, r7
 8001e5e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001e62:	4619      	mov	r1, r3
 8001e64:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001e66:	f000 f80b 	bl	8001e80 <verify_meas_time_and_odr_duration>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 8001e70:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3760      	adds	r7, #96	; 0x60
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	080194cc 	.word	0x080194cc

08001e80 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d202      	bcs.n	8001e98 <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	73fb      	strb	r3, [r7, #15]
 8001e96:	e001      	b.n	8001e9c <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8001e98:	23fd      	movs	r3, #253	; 0xfd
 8001e9a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	f107 0308 	add.w	r3, r7, #8
 8001eba:	3203      	adds	r2, #3
 8001ebc:	6810      	ldr	r0, [r2, #0]
 8001ebe:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
    float partial_out;
#else
    uint8_t base = 2;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	75fb      	strb	r3, [r7, #23]
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8001ec4:	7a3a      	ldrb	r2, [r7, #8]
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 ff78 	bl	8002dc0 <pow_bmp3>
 8001ed0:	6138      	str	r0, [r7, #16]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ed8:	fb02 f303 	mul.w	r3, r2, r3
 8001edc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ee0:	60fb      	str	r3, [r7, #12]

    /* Output in microseconds */
    return press_meas_t;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	f107 0308 	add.w	r3, r7, #8
 8001efa:	3203      	adds	r2, #3
 8001efc:	6810      	ldr	r0, [r2, #0]
 8001efe:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
    float partial_out;
#else
    uint8_t base = 2;
 8001f00:	2302      	movs	r3, #2
 8001f02:	75fb      	strb	r3, [r7, #23]
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8001f04:	7a7a      	ldrb	r2, [r7, #9]
 8001f06:	7dfb      	ldrb	r3, [r7, #23]
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 ff58 	bl	8002dc0 <pow_bmp3>
 8001f10:	6138      	str	r0, [r7, #16]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001f18:	fb02 f303 	mul.w	r3, r2, r3
 8001f1c:	f203 1339 	addw	r3, r3, #313	; 0x139
 8001f20:	60fb      	str	r3, [r7, #12]

    /* Output in uint32_t */
    return temp_meas_t;
 8001f22:	68fb      	ldr	r3, [r7, #12]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001f3a:	6a3a      	ldr	r2, [r7, #32]
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	3203      	adds	r2, #3
 8001f42:	6810      	ldr	r0, [r2, #0]
 8001f44:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d03f      	beq.n	8001fd0 <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d013      	beq.n	8001f82 <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	b25b      	sxtb	r3, r3
 8001f60:	f023 0307 	bic.w	r3, r3, #7
 8001f64:	b25a      	sxtb	r2, r3
 8001f66:	7d3b      	ldrb	r3, [r7, #20]
 8001f68:	b25b      	sxtb	r3, r3
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	b25b      	sxtb	r3, r3
 8001f70:	4313      	orrs	r3, r2
 8001f72:	b25a      	sxtb	r2, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	440b      	add	r3, r1
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f003 0320 	and.w	r3, r3, #32
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d014      	beq.n	8001fb6 <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	b25b      	sxtb	r3, r3
 8001f92:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001f96:	b25a      	sxtb	r2, r3
 8001f98:	7d7b      	ldrb	r3, [r7, #21]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	b25b      	sxtb	r3, r3
 8001f9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fa2:	b25b      	sxtb	r3, r3
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	b25a      	sxtb	r2, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4619      	mov	r1, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	440b      	add	r3, r1
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	221c      	movs	r2, #28
 8001fc2:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	701a      	strb	r2, [r3, #0]
    }
}
 8001fd0:	bf00      	nop
 8001fd2:	371c      	adds	r7, #28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	3303      	adds	r3, #3
 8001fee:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	78db      	ldrb	r3, [r3, #3]
 8001ff4:	2b11      	cmp	r3, #17
 8001ff6:	d902      	bls.n	8001ffe <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	2211      	movs	r2, #17
 8001ffc:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	3301      	adds	r3, #1
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b25b      	sxtb	r3, r3
 8002006:	f023 031f 	bic.w	r3, r3, #31
 800200a:	b25a      	sxtb	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	78db      	ldrb	r3, [r3, #3]
 8002010:	b25b      	sxtb	r3, r3
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	b25b      	sxtb	r3, r3
 8002018:	4313      	orrs	r3, r2
 800201a:	b25a      	sxtb	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	4619      	mov	r1, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	440b      	add	r3, r1
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4413      	add	r3, r2
 8002034:	221d      	movs	r2, #29
 8002036:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	b2da      	uxtb	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	701a      	strb	r2, [r3, #0]
}
 8002044:	bf00      	nop
 8002046:	371c      	adds	r7, #28
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	3203      	adds	r2, #3
 8002066:	6810      	ldr	r0, [r2, #0]
 8002068:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	3303      	adds	r3, #3
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	b25b      	sxtb	r3, r3
 8002072:	f023 030e 	bic.w	r3, r3, #14
 8002076:	b25a      	sxtb	r2, r3
 8002078:	7dbb      	ldrb	r3, [r7, #22]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	b25b      	sxtb	r3, r3
 800207e:	f003 030e 	and.w	r3, r3, #14
 8002082:	b25b      	sxtb	r3, r3
 8002084:	4313      	orrs	r3, r2
 8002086:	b25a      	sxtb	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	4619      	mov	r1, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	440b      	add	r3, r1
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	221f      	movs	r2, #31
 80020a2:	701a      	strb	r2, [r3, #0]
    (*len)++;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	3301      	adds	r3, #1
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	701a      	strb	r2, [r3, #0]
}
 80020b0:	bf00      	nop
 80020b2:	371c      	adds	r7, #28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 80020bc:	b4b0      	push	{r4, r5, r7}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	7809      	ldrb	r1, [r1, #0]
 80020ca:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	3101      	adds	r1, #1
 80020d0:	7809      	ldrb	r1, [r1, #0]
 80020d2:	0209      	lsls	r1, r1, #8
 80020d4:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	3102      	adds	r1, #2
 80020da:	7809      	ldrb	r1, [r1, #0]
 80020dc:	0409      	lsls	r1, r1, #16
 80020de:	60f9      	str	r1, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	6939      	ldr	r1, [r7, #16]
 80020e4:	4308      	orrs	r0, r1
 80020e6:	6979      	ldr	r1, [r7, #20]
 80020e8:	4301      	orrs	r1, r0
 80020ea:	2000      	movs	r0, #0
 80020ec:	460c      	mov	r4, r1
 80020ee:	4605      	mov	r5, r0
 80020f0:	6839      	ldr	r1, [r7, #0]
 80020f2:	e9c1 4500 	strd	r4, r5, [r1]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	3103      	adds	r1, #3
 80020fa:	7809      	ldrb	r1, [r1, #0]
 80020fc:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	3104      	adds	r1, #4
 8002102:	7809      	ldrb	r1, [r1, #0]
 8002104:	0209      	lsls	r1, r1, #8
 8002106:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	3105      	adds	r1, #5
 800210c:	7809      	ldrb	r1, [r1, #0]
 800210e:	0409      	lsls	r1, r1, #16
 8002110:	60f9      	str	r1, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	6939      	ldr	r1, [r7, #16]
 8002116:	4308      	orrs	r0, r1
 8002118:	6979      	ldr	r1, [r7, #20]
 800211a:	4301      	orrs	r1, r0
 800211c:	2000      	movs	r0, #0
 800211e:	460a      	mov	r2, r1
 8002120:	4603      	mov	r3, r0
 8002122:	6839      	ldr	r1, [r7, #0]
 8002124:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8002128:	bf00      	nop
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	bcb0      	pop	{r4, r5, r7}
 8002130:	4770      	bx	lr

08002132 <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	4603      	mov	r3, r0
 8002140:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d05a      	beq.n	8002202 <compensate_data+0xd0>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d057      	beq.n	8002202 <compensate_data+0xd0>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d054      	beq.n	8002202 <compensate_data+0xd0>
    {
        /* If pressure and temperature component is selected */
        if (sensor_comp == BMP3_PRESS_TEMP)
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	2b03      	cmp	r3, #3
 800215c:	d115      	bne.n	800218a <compensate_data+0x58>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation
             */

            /* Compensate pressure and temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	4618      	mov	r0, r3
 8002166:	f000 f8ed 	bl	8002344 <compensate_temperature>
 800216a:	4603      	mov	r3, r0
 800216c:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP3_OK)
 800216e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d148      	bne.n	8002208 <compensate_data+0xd6>
            {
                rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3308      	adds	r3, #8
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	4618      	mov	r0, r3
 8002180:	f000 f9f6 	bl	8002570 <compensate_pressure>
 8002184:	4603      	mov	r3, r0
 8002186:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8002188:	e03e      	b.n	8002208 <compensate_data+0xd6>
            }
        }
        else if (sensor_comp == BMP3_PRESS)
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d116      	bne.n	80021be <compensate_data+0x8c>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation.
             * As only pressure is enabled in 'sensor_comp', after calculating
             * compensated temperature, assign it to zero.
             */
            (void)compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f8d4 	bl	8002344 <compensate_temperature>
            comp_data->temperature = 0;
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	e9c1 2300 	strd	r2, r3, [r1]

            /* Compensate the pressure data */
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3308      	adds	r3, #8
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f9dc 	bl	8002570 <compensate_pressure>
 80021b8:	4603      	mov	r3, r0
 80021ba:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 80021bc:	e024      	b.n	8002208 <compensate_data+0xd6>
        }
        else if (sensor_comp == BMP3_TEMP)
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d10f      	bne.n	80021e4 <compensate_data+0xb2>
        {
            /* Compensate the temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 f8ba 	bl	8002344 <compensate_temperature>
 80021d0:	4603      	mov	r3, r0
 80021d2:	75fb      	strb	r3, [r7, #23]

            /*
             * As only temperature is enabled in 'sensor_comp'
             * make compensated pressure as zero
             */
            comp_data->pressure = 0;
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp == BMP3_PRESS_TEMP)
 80021e2:	e011      	b.n	8002208 <compensate_data+0xd6>
        }
        else
        {
            comp_data->pressure = 0;
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
            comp_data->temperature = 0;
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	e9c1 2300 	strd	r2, r3, [r1]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8002200:	e002      	b.n	8002208 <compensate_data+0xd6>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8002202:	23ff      	movs	r3, #255	; 0xff
 8002204:	75fb      	strb	r3, [r7, #23]
 8002206:	e000      	b.n	800220a <compensate_data+0xd8>
        if (sensor_comp == BMP3_PRESS_TEMP)
 8002208:	bf00      	nop
    }

    return rslt;
 800220a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8002216:	b480      	push	{r7}
 8002218:	b085      	sub	sp, #20
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	3318      	adds	r3, #24
 8002224:	60fb      	str	r3, [r7, #12]

    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3301      	adds	r3, #1
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	b21a      	sxth	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b21b      	sxth	r3, r3
 8002236:	4313      	orrs	r3, r2
 8002238:	b21b      	sxth	r3, r3
 800223a:	b29a      	uxth	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	801a      	strh	r2, [r3, #0]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3303      	adds	r3, #3
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	b21a      	sxth	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3302      	adds	r3, #2
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	b21b      	sxth	r3, r3
 8002252:	4313      	orrs	r3, r2
 8002254:	b21b      	sxth	r3, r3
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	805a      	strh	r2, [r3, #2]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3304      	adds	r3, #4
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	b25a      	sxtb	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	711a      	strb	r2, [r3, #4]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3306      	adds	r3, #6
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	b21a      	sxth	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3305      	adds	r3, #5
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	b21b      	sxth	r3, r3
 800227a:	4313      	orrs	r3, r2
 800227c:	b21a      	sxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	80da      	strh	r2, [r3, #6]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3308      	adds	r3, #8
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	b21a      	sxth	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3307      	adds	r3, #7
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	b21b      	sxth	r3, r3
 8002294:	4313      	orrs	r3, r2
 8002296:	b21a      	sxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	811a      	strh	r2, [r3, #8]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3309      	adds	r3, #9
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	b25a      	sxtb	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	729a      	strb	r2, [r3, #10]
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	330a      	adds	r3, #10
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	b25a      	sxtb	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	72da      	strb	r2, [r3, #11]
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	330c      	adds	r3, #12
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	b21a      	sxth	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	330b      	adds	r3, #11
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	4313      	orrs	r3, r2
 80022c8:	b21b      	sxth	r3, r3
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	819a      	strh	r2, [r3, #12]
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	330e      	adds	r3, #14
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	b21a      	sxth	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	330d      	adds	r3, #13
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	4313      	orrs	r3, r2
 80022e4:	b21b      	sxth	r3, r3
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	81da      	strh	r2, [r3, #14]
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	330f      	adds	r3, #15
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b25a      	sxtb	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	741a      	strb	r2, [r3, #16]
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3310      	adds	r3, #16
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	b25a      	sxtb	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	745a      	strb	r2, [r3, #17]
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3312      	adds	r3, #18
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	b21a      	sxth	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3311      	adds	r3, #17
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	b21b      	sxth	r3, r3
 8002316:	4313      	orrs	r3, r2
 8002318:	b21a      	sxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	825a      	strh	r2, [r3, #18]
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3313      	adds	r3, #19
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	b25a      	sxtb	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	751a      	strb	r2, [r3, #20]
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3314      	adds	r3, #20
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	b25a      	sxtb	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	755a      	strb	r2, [r3, #21]
}
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <compensate_temperature>:
 * For eg : If returned temperature is 2426 then it is 2426/100 = 24 deg Celsius
 */
static int8_t compensate_temperature(int64_t *temperature,
                                     const struct bmp3_uncomp_data *uncomp_data,
                                     struct bmp3_calib_data *calib_data)
{
 8002344:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002348:	b0a9      	sub	sp, #164	; 0xa4
 800234a:	af00      	add	r7, sp, #0
 800234c:	65f8      	str	r0, [r7, #92]	; 0x5c
 800234e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002350:	657a      	str	r2, [r7, #84]	; 0x54
    int8_t rslt = BMP3_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    int64_t partial_data4;
    int64_t partial_data5;
    int64_t partial_data6;
    int64_t comp_temp;

    partial_data1 = (int64_t)(uncomp_data->temperature - ((int64_t)256 * calib_data->reg_calib_data.par_t1));
 8002358:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800235a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800235e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	b29b      	uxth	r3, r3
 8002364:	2200      	movs	r2, #0
 8002366:	461c      	mov	r4, r3
 8002368:	4615      	mov	r5, r2
 800236a:	f04f 0200 	mov.w	r2, #0
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	022b      	lsls	r3, r5, #8
 8002374:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002378:	0222      	lsls	r2, r4, #8
 800237a:	1a84      	subs	r4, r0, r2
 800237c:	623c      	str	r4, [r7, #32]
 800237e:	eb61 0303 	sbc.w	r3, r1, r3
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
 8002384:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002388:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
    partial_data2 = (int64_t)(calib_data->reg_calib_data.par_t2 * partial_data1);
 800238c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800238e:	885b      	ldrh	r3, [r3, #2]
 8002390:	b29b      	uxth	r3, r3
 8002392:	2200      	movs	r2, #0
 8002394:	63bb      	str	r3, [r7, #56]	; 0x38
 8002396:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002398:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800239c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80023a0:	4622      	mov	r2, r4
 80023a2:	fb02 f203 	mul.w	r2, r2, r3
 80023a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023aa:	4629      	mov	r1, r5
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	441a      	add	r2, r3
 80023b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023b6:	4621      	mov	r1, r4
 80023b8:	fba3 ab01 	umull	sl, fp, r3, r1
 80023bc:	eb02 030b 	add.w	r3, r2, fp
 80023c0:	469b      	mov	fp, r3
 80023c2:	e9c7 ab20 	strd	sl, fp, [r7, #128]	; 0x80
 80023c6:	e9c7 ab20 	strd	sl, fp, [r7, #128]	; 0x80
    partial_data3 = (int64_t)(partial_data1 * partial_data1);
 80023ca:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80023ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023d2:	fb03 f102 	mul.w	r1, r3, r2
 80023d6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80023da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023de:	fb02 f303 	mul.w	r3, r2, r3
 80023e2:	18ca      	adds	r2, r1, r3
 80023e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023e8:	fba3 1303 	umull	r1, r3, r3, r3
 80023ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023ee:	460b      	mov	r3, r1
 80023f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80023f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f4:	18d3      	adds	r3, r2, r3
 80023f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023f8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80023fc:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8002400:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    partial_data4 = (int64_t)partial_data3 * calib_data->reg_calib_data.par_t3;
 8002404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002406:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800240a:	b25b      	sxtb	r3, r3
 800240c:	17da      	asrs	r2, r3, #31
 800240e:	633b      	str	r3, [r7, #48]	; 0x30
 8002410:	637a      	str	r2, [r7, #52]	; 0x34
 8002412:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002414:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002418:	4622      	mov	r2, r4
 800241a:	fb02 f203 	mul.w	r2, r2, r3
 800241e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002420:	4629      	mov	r1, r5
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	441a      	add	r2, r3
 8002428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800242a:	4621      	mov	r1, r4
 800242c:	fba3 1301 	umull	r1, r3, r3, r1
 8002430:	647b      	str	r3, [r7, #68]	; 0x44
 8002432:	460b      	mov	r3, r1
 8002434:	643b      	str	r3, [r7, #64]	; 0x40
 8002436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002438:	18d3      	adds	r3, r2, r3
 800243a:	647b      	str	r3, [r7, #68]	; 0x44
 800243c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002440:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 8002444:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    partial_data5 = (int64_t)((int64_t)(partial_data2 * 262144) + partial_data4);
 8002448:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800244c:	f04f 0000 	mov.w	r0, #0
 8002450:	f04f 0100 	mov.w	r1, #0
 8002454:	0499      	lsls	r1, r3, #18
 8002456:	ea41 3192 	orr.w	r1, r1, r2, lsr #14
 800245a:	0490      	lsls	r0, r2, #18
 800245c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002460:	1814      	adds	r4, r2, r0
 8002462:	61bc      	str	r4, [r7, #24]
 8002464:	414b      	adcs	r3, r1
 8002466:	61fb      	str	r3, [r7, #28]
 8002468:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800246c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    partial_data6 = (int64_t)(partial_data5 / 4294967296);
 8002470:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002474:	2b00      	cmp	r3, #0
 8002476:	da06      	bge.n	8002486 <compensate_temperature+0x142>
 8002478:	1e51      	subs	r1, r2, #1
 800247a:	6139      	str	r1, [r7, #16]
 800247c:	f143 0300 	adc.w	r3, r3, #0
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002486:	f04f 0000 	mov.w	r0, #0
 800248a:	f04f 0100 	mov.w	r1, #0
 800248e:	0018      	movs	r0, r3
 8002490:	17d9      	asrs	r1, r3, #31
 8002492:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

    /* Store t_lin in dev. structure for pressure calculation */
    calib_data->reg_calib_data.t_lin = (int64_t)partial_data6;
 8002496:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002498:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800249c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    comp_temp = (int64_t)((partial_data6 * 25) / 16384);
 80024a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	1894      	adds	r4, r2, r2
 80024aa:	60bc      	str	r4, [r7, #8]
 80024ac:	415b      	adcs	r3, r3
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024b4:	eb12 0800 	adds.w	r8, r2, r0
 80024b8:	eb43 0901 	adc.w	r9, r3, r1
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024d0:	4690      	mov	r8, r2
 80024d2:	4699      	mov	r9, r3
 80024d4:	eb18 0300 	adds.w	r3, r8, r0
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024da:	eb49 0301 	adc.w	r3, r9, r1
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	da08      	bge.n	80024fa <compensate_temperature+0x1b6>
 80024e8:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80024ec:	1851      	adds	r1, r2, r1
 80024ee:	6039      	str	r1, [r7, #0]
 80024f0:	f143 0300 	adc.w	r3, r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024fa:	f04f 0000 	mov.w	r0, #0
 80024fe:	f04f 0100 	mov.w	r1, #0
 8002502:	0b90      	lsrs	r0, r2, #14
 8002504:	ea40 4083 	orr.w	r0, r0, r3, lsl #18
 8002508:	1399      	asrs	r1, r3, #14
 800250a:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90

    if (comp_temp < BMP3_MIN_TEMP_INT)
 800250e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002512:	f512 6f7a 	cmn.w	r2, #4000	; 0xfa0
 8002516:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 800251a:	da07      	bge.n	800252c <compensate_temperature+0x1e8>
    {
        comp_temp = BMP3_MIN_TEMP_INT;
 800251c:	4a12      	ldr	r2, [pc, #72]	; (8002568 <compensate_temperature+0x224>)
 800251e:	f04f 33ff 	mov.w	r3, #4294967295
 8002522:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
        rslt = BMP3_W_MIN_TEMP;
 8002526:	2303      	movs	r3, #3
 8002528:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    }

    if (comp_temp > BMP3_MAX_TEMP_INT)
 800252c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002530:	f242 1135 	movw	r1, #8501	; 0x2135
 8002534:	428a      	cmp	r2, r1
 8002536:	f173 0300 	sbcs.w	r3, r3, #0
 800253a:	db08      	blt.n	800254e <compensate_temperature+0x20a>
    {
        comp_temp = BMP3_MAX_TEMP_INT;
 800253c:	f242 1234 	movw	r2, #8500	; 0x2134
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
        rslt = BMP3_W_MAX_TEMP;
 8002548:	2304      	movs	r3, #4
 800254a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    }

    (*temperature) = comp_temp;
 800254e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002550:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002554:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8002558:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800255c:	4618      	mov	r0, r3
 800255e:	37a4      	adds	r7, #164	; 0xa4
 8002560:	46bd      	mov	sp, r7
 8002562:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002566:	4770      	bx	lr
 8002568:	fffff060 	.word	0xfffff060
 800256c:	00000000 	.word	0x00000000

08002570 <compensate_pressure>:
 * for eg return if pressure is 9528709 which is 9528709/100 = 95287.09 Pascal
 */
static int8_t compensate_pressure(uint64_t *pressure,
                                  const struct bmp3_uncomp_data *uncomp_data,
                                  const struct bmp3_calib_data *calib_data)
{
 8002570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002574:	b0f8      	sub	sp, #480	; 0x1e0
 8002576:	af00      	add	r7, sp, #0
 8002578:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800257c:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 8002580:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
    int8_t rslt = BMP3_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
    const struct bmp3_reg_calib_data *reg_calib_data = &calib_data->reg_calib_data;
 800258a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800258e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    int64_t partial_data6;
    int64_t offset;
    int64_t sensitivity;
    uint64_t comp_press;

    partial_data1 = (int64_t)(reg_calib_data->t_lin * reg_calib_data->t_lin);
 8002592:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002596:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800259a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800259e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80025a2:	fb02 f501 	mul.w	r5, r2, r1
 80025a6:	fb00 f403 	mul.w	r4, r0, r3
 80025aa:	442c      	add	r4, r5
 80025ac:	fba0 8902 	umull	r8, r9, r0, r2
 80025b0:	eb04 0309 	add.w	r3, r4, r9
 80025b4:	4699      	mov	r9, r3
 80025b6:	e9c7 8970 	strd	r8, r9, [r7, #448]	; 0x1c0
 80025ba:	e9c7 8970 	strd	r8, r9, [r7, #448]	; 0x1c0
    partial_data2 = (int64_t)(partial_data1 / 64);
 80025be:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	da07      	bge.n	80025d6 <compensate_pressure+0x66>
 80025c6:	f112 013f 	adds.w	r1, r2, #63	; 0x3f
 80025ca:	67b9      	str	r1, [r7, #120]	; 0x78
 80025cc:	f143 0300 	adc.w	r3, r3, #0
 80025d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025d2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80025d6:	f04f 0000 	mov.w	r0, #0
 80025da:	f04f 0100 	mov.w	r1, #0
 80025de:	0990      	lsrs	r0, r2, #6
 80025e0:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 80025e4:	1199      	asrs	r1, r3, #6
 80025e6:	e9c7 016e 	strd	r0, r1, [r7, #440]	; 0x1b8
    partial_data3 = (int64_t)((partial_data2 * reg_calib_data->t_lin) / 256);
 80025ea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80025ee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80025f2:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 80025f6:	fb03 f001 	mul.w	r0, r3, r1
 80025fa:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 80025fe:	fb02 f101 	mul.w	r1, r2, r1
 8002602:	4408      	add	r0, r1
 8002604:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8002608:	fba1 ab02 	umull	sl, fp, r1, r2
 800260c:	eb00 030b 	add.w	r3, r0, fp
 8002610:	469b      	mov	fp, r3
 8002612:	4652      	mov	r2, sl
 8002614:	465b      	mov	r3, fp
 8002616:	2b00      	cmp	r3, #0
 8002618:	da07      	bge.n	800262a <compensate_pressure+0xba>
 800261a:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 800261e:	6739      	str	r1, [r7, #112]	; 0x70
 8002620:	f143 0300 	adc.w	r3, r3, #0
 8002624:	677b      	str	r3, [r7, #116]	; 0x74
 8002626:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800262a:	f04f 0000 	mov.w	r0, #0
 800262e:	f04f 0100 	mov.w	r1, #0
 8002632:	0a10      	lsrs	r0, r2, #8
 8002634:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002638:	1219      	asrs	r1, r3, #8
 800263a:	e9c7 016c 	strd	r0, r1, [r7, #432]	; 0x1b0
    partial_data4 = (int64_t)((reg_calib_data->par_p8 * partial_data3) / 32);
 800263e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002642:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8002646:	b25b      	sxtb	r3, r3
 8002648:	17da      	asrs	r2, r3, #31
 800264a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800264e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002652:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002656:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800265a:	462a      	mov	r2, r5
 800265c:	fb02 f203 	mul.w	r2, r2, r3
 8002660:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002664:	4621      	mov	r1, r4
 8002666:	fb01 f303 	mul.w	r3, r1, r3
 800266a:	441a      	add	r2, r3
 800266c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002670:	4621      	mov	r1, r4
 8002672:	fba3 1301 	umull	r1, r3, r3, r1
 8002676:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800267a:	460b      	mov	r3, r1
 800267c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002680:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002684:	18d3      	adds	r3, r2, r3
 8002686:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800268a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800268e:	2b00      	cmp	r3, #0
 8002690:	da07      	bge.n	80026a2 <compensate_pressure+0x132>
 8002692:	f112 011f 	adds.w	r1, r2, #31
 8002696:	66b9      	str	r1, [r7, #104]	; 0x68
 8002698:	f143 0300 	adc.w	r3, r3, #0
 800269c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800269e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80026a2:	f04f 0000 	mov.w	r0, #0
 80026a6:	f04f 0100 	mov.w	r1, #0
 80026aa:	0950      	lsrs	r0, r2, #5
 80026ac:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 80026b0:	1159      	asrs	r1, r3, #5
 80026b2:	e9c7 016a 	strd	r0, r1, [r7, #424]	; 0x1a8
    partial_data5 = (int64_t)((reg_calib_data->par_p7 * partial_data1) * 16);
 80026b6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80026ba:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80026be:	b25b      	sxtb	r3, r3
 80026c0:	17da      	asrs	r2, r3, #31
 80026c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80026c6:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80026ca:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80026ce:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80026d2:	462a      	mov	r2, r5
 80026d4:	fb02 f203 	mul.w	r2, r2, r3
 80026d8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80026dc:	4621      	mov	r1, r4
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	441a      	add	r2, r3
 80026e4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80026e8:	4621      	mov	r1, r4
 80026ea:	fba3 1301 	umull	r1, r3, r3, r1
 80026ee:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80026f2:	460b      	mov	r3, r1
 80026f4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80026f8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80026fc:	18d3      	adds	r3, r2, r3
 80026fe:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 800270e:	4629      	mov	r1, r5
 8002710:	010b      	lsls	r3, r1, #4
 8002712:	4621      	mov	r1, r4
 8002714:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 8002718:	4621      	mov	r1, r4
 800271a:	010a      	lsls	r2, r1, #4
 800271c:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
    partial_data6 = (int64_t)((reg_calib_data->par_p6 * reg_calib_data->t_lin) * 4194304);
 8002720:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002724:	89db      	ldrh	r3, [r3, #14]
 8002726:	b29b      	uxth	r3, r3
 8002728:	2200      	movs	r2, #0
 800272a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800272e:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002732:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002736:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800273a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800273e:	4629      	mov	r1, r5
 8002740:	fb02 f001 	mul.w	r0, r2, r1
 8002744:	4621      	mov	r1, r4
 8002746:	fb01 f103 	mul.w	r1, r1, r3
 800274a:	4401      	add	r1, r0
 800274c:	4620      	mov	r0, r4
 800274e:	fba0 2302 	umull	r2, r3, r0, r2
 8002752:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8002756:	4613      	mov	r3, r2
 8002758:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800275c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002760:	18cb      	adds	r3, r1, r3
 8002762:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002772:	4629      	mov	r1, r5
 8002774:	058b      	lsls	r3, r1, #22
 8002776:	4621      	mov	r1, r4
 8002778:	ea43 2391 	orr.w	r3, r3, r1, lsr #10
 800277c:	4621      	mov	r1, r4
 800277e:	058a      	lsls	r2, r1, #22
 8002780:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
    offset = (int64_t)((reg_calib_data->par_p5 * 140737488355328) + partial_data4 + partial_data5 + partial_data6);
 8002784:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002788:	899b      	ldrh	r3, [r3, #12]
 800278a:	b29b      	uxth	r3, r3
 800278c:	2200      	movs	r2, #0
 800278e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002792:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002796:	f04f 0000 	mov.w	r0, #0
 800279a:	f04f 0100 	mov.w	r1, #0
 800279e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80027a2:	03d9      	lsls	r1, r3, #15
 80027a4:	2000      	movs	r0, #0
 80027a6:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 80027aa:	1884      	adds	r4, r0, r2
 80027ac:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 80027b0:	eb41 0303 	adc.w	r3, r1, r3
 80027b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80027b8:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 80027bc:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80027c0:	4621      	mov	r1, r4
 80027c2:	1889      	adds	r1, r1, r2
 80027c4:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 80027c8:	4629      	mov	r1, r5
 80027ca:	eb43 0101 	adc.w	r1, r3, r1
 80027ce:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80027d2:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 80027d6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80027da:	4621      	mov	r1, r4
 80027dc:	1851      	adds	r1, r2, r1
 80027de:	6639      	str	r1, [r7, #96]	; 0x60
 80027e0:	4629      	mov	r1, r5
 80027e2:	eb43 0101 	adc.w	r1, r3, r1
 80027e6:	6679      	str	r1, [r7, #100]	; 0x64
 80027e8:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80027ec:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
    partial_data2 = (int64_t)((reg_calib_data->par_p4 * partial_data3) / 32);
 80027f0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80027f4:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80027f8:	b25b      	sxtb	r3, r3
 80027fa:	17da      	asrs	r2, r3, #31
 80027fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002800:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002804:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002808:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800280c:	462a      	mov	r2, r5
 800280e:	fb02 f203 	mul.w	r2, r2, r3
 8002812:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002816:	4621      	mov	r1, r4
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	441a      	add	r2, r3
 800281e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002822:	4621      	mov	r1, r4
 8002824:	fba3 1301 	umull	r1, r3, r3, r1
 8002828:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800282c:	460b      	mov	r3, r1
 800282e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002832:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002836:	18d3      	adds	r3, r2, r3
 8002838:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800283c:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8002840:	2b00      	cmp	r3, #0
 8002842:	da07      	bge.n	8002854 <compensate_pressure+0x2e4>
 8002844:	f112 011f 	adds.w	r1, r2, #31
 8002848:	65b9      	str	r1, [r7, #88]	; 0x58
 800284a:	f143 0300 	adc.w	r3, r3, #0
 800284e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002850:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002854:	f04f 0000 	mov.w	r0, #0
 8002858:	f04f 0100 	mov.w	r1, #0
 800285c:	0950      	lsrs	r0, r2, #5
 800285e:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 8002862:	1159      	asrs	r1, r3, #5
 8002864:	e9c7 016e 	strd	r0, r1, [r7, #440]	; 0x1b8
    partial_data4 = (int64_t)((reg_calib_data->par_p3 * partial_data1) * 4);
 8002868:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800286c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002870:	b25b      	sxtb	r3, r3
 8002872:	17da      	asrs	r2, r3, #31
 8002874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002878:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800287c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002880:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002884:	462a      	mov	r2, r5
 8002886:	fb02 f203 	mul.w	r2, r2, r3
 800288a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800288e:	4621      	mov	r1, r4
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	441a      	add	r2, r3
 8002896:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800289a:	4621      	mov	r1, r4
 800289c:	fba3 1301 	umull	r1, r3, r3, r1
 80028a0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80028a4:	460b      	mov	r3, r1
 80028a6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80028aa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80028ae:	18d3      	adds	r3, r2, r3
 80028b0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 80028c0:	4629      	mov	r1, r5
 80028c2:	008b      	lsls	r3, r1, #2
 80028c4:	4621      	mov	r1, r4
 80028c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028ca:	4621      	mov	r1, r4
 80028cc:	008a      	lsls	r2, r1, #2
 80028ce:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
    partial_data5 = (int64_t)((reg_calib_data->par_p2 - (int32_t)16384) * reg_calib_data->t_lin * 2097152);
 80028d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80028d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80028da:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80028de:	17da      	asrs	r2, r3, #31
 80028e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028e4:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80028e8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80028ec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80028f0:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80028f4:	4629      	mov	r1, r5
 80028f6:	fb02 f001 	mul.w	r0, r2, r1
 80028fa:	4621      	mov	r1, r4
 80028fc:	fb01 f103 	mul.w	r1, r1, r3
 8002900:	4401      	add	r1, r0
 8002902:	4620      	mov	r0, r4
 8002904:	fba0 2302 	umull	r2, r3, r0, r2
 8002908:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800290c:	4613      	mov	r3, r2
 800290e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002912:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002916:	18cb      	adds	r3, r1, r3
 8002918:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 8002928:	4629      	mov	r1, r5
 800292a:	054b      	lsls	r3, r1, #21
 800292c:	4621      	mov	r1, r4
 800292e:	ea43 23d1 	orr.w	r3, r3, r1, lsr #11
 8002932:	4621      	mov	r1, r4
 8002934:	054a      	lsls	r2, r1, #21
 8002936:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
    sensitivity =
        (int64_t)(((reg_calib_data->par_p1 - (int32_t)16384) * 70368744177664) + partial_data2 + partial_data4 +
 800293a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800293e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002942:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8002946:	17da      	asrs	r2, r3, #31
 8002948:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800294c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002950:	f04f 0000 	mov.w	r0, #0
 8002954:	f04f 0100 	mov.w	r1, #0
 8002958:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800295c:	0399      	lsls	r1, r3, #14
 800295e:	2000      	movs	r0, #0
 8002960:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8002964:	1884      	adds	r4, r0, r2
 8002966:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800296a:	eb41 0303 	adc.w	r3, r1, r3
 800296e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002972:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8002976:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800297a:	4621      	mov	r1, r4
 800297c:	1889      	adds	r1, r1, r2
 800297e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8002982:	4629      	mov	r1, r5
 8002984:	eb43 0101 	adc.w	r1, r3, r1
 8002988:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    sensitivity =
 800298c:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8002990:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8002994:	4621      	mov	r1, r4
 8002996:	1851      	adds	r1, r2, r1
 8002998:	6539      	str	r1, [r7, #80]	; 0x50
 800299a:	4629      	mov	r1, r5
 800299c:	eb43 0101 	adc.w	r1, r3, r1
 80029a0:	6579      	str	r1, [r7, #84]	; 0x54
 80029a2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80029a6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
                  partial_data5);
    partial_data1 = (int64_t)((sensitivity / 16777216) * uncomp_data->pressure);
 80029aa:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	da08      	bge.n	80029c4 <compensate_pressure+0x454>
 80029b2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80029b6:	1851      	adds	r1, r2, r1
 80029b8:	64b9      	str	r1, [r7, #72]	; 0x48
 80029ba:	f143 0300 	adc.w	r3, r3, #0
 80029be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029c4:	f04f 0000 	mov.w	r0, #0
 80029c8:	f04f 0100 	mov.w	r1, #0
 80029cc:	0e10      	lsrs	r0, r2, #24
 80029ce:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80029d2:	1619      	asrs	r1, r3, #24
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
 80029dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	fb02 f501 	mul.w	r5, r2, r1
 80029e8:	fb00 f403 	mul.w	r4, r0, r3
 80029ec:	442c      	add	r4, r5
 80029ee:	fba0 2302 	umull	r2, r3, r0, r2
 80029f2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80029f6:	4613      	mov	r3, r2
 80029f8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80029fc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002a00:	18e3      	adds	r3, r4, r3
 8002a02:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002a06:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002a0a:	e9c7 3470 	strd	r3, r4, [r7, #448]	; 0x1c0
    partial_data2 = (int64_t)(reg_calib_data->par_p10 * reg_calib_data->t_lin);
 8002a0e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002a12:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002a16:	b25b      	sxtb	r3, r3
 8002a18:	17da      	asrs	r2, r3, #31
 8002a1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a1e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a22:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002a26:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002a2a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8002a2e:	4629      	mov	r1, r5
 8002a30:	fb02 f001 	mul.w	r0, r2, r1
 8002a34:	4621      	mov	r1, r4
 8002a36:	fb01 f103 	mul.w	r1, r1, r3
 8002a3a:	4401      	add	r1, r0
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	fba0 2302 	umull	r2, r3, r0, r2
 8002a42:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a46:	4613      	mov	r3, r2
 8002a48:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a50:	18cb      	adds	r3, r1, r3
 8002a52:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a56:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002a5a:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
 8002a5e:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
    partial_data3 = (int64_t)(partial_data2 + ((int32_t)65536 * reg_calib_data->par_p9));
 8002a62:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002a66:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002a6a:	041b      	lsls	r3, r3, #16
 8002a6c:	17da      	asrs	r2, r3, #31
 8002a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a76:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8002a7a:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8002a7e:	4621      	mov	r1, r4
 8002a80:	1851      	adds	r1, r2, r1
 8002a82:	6439      	str	r1, [r7, #64]	; 0x40
 8002a84:	4629      	mov	r1, r5
 8002a86:	eb43 0101 	adc.w	r1, r3, r1
 8002a8a:	6479      	str	r1, [r7, #68]	; 0x44
 8002a8c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002a90:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
    partial_data4 = (int64_t)((partial_data3 * uncomp_data->pressure) / (int32_t)8192);
 8002a94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a9c:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8002aa0:	fb02 f501 	mul.w	r5, r2, r1
 8002aa4:	fb00 f403 	mul.w	r4, r0, r3
 8002aa8:	442c      	add	r4, r5
 8002aaa:	fba0 2302 	umull	r2, r3, r0, r2
 8002aae:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002ab8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002abc:	18e3      	adds	r3, r4, r3
 8002abe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 8002ace:	4621      	mov	r1, r4
 8002ad0:	0b4a      	lsrs	r2, r1, #13
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8002ad8:	4629      	mov	r1, r5
 8002ada:	0b4b      	lsrs	r3, r1, #13
 8002adc:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8

    /* dividing by 10 followed by multiplying by 10
     * To avoid overflow caused by (uncomp_data->pressure * partial_data4)
     */
    partial_data5 = (int64_t)((uncomp_data->pressure * (partial_data4 / 10)) / (int32_t)512);
 8002ae0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ae4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002ae8:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8002aec:	f04f 020a 	mov.w	r2, #10
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	f7fe f9f6 	bl	8000ee4 <__aeabi_ldivmod>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	fb02 f005 	mul.w	r0, r2, r5
 8002b00:	fb04 f103 	mul.w	r1, r4, r3
 8002b04:	4401      	add	r1, r0
 8002b06:	fba4 2302 	umull	r2, r3, r4, r2
 8002b0a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002b0e:	4613      	mov	r3, r2
 8002b10:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002b14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002b18:	18cb      	adds	r3, r1, r3
 8002b1a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	0a4a      	lsrs	r2, r1, #9
 8002b2e:	4629      	mov	r1, r5
 8002b30:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8002b34:	4629      	mov	r1, r5
 8002b36:	0a4b      	lsrs	r3, r1, #9
 8002b38:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
    partial_data5 = (int64_t)(partial_data5 * 10);
 8002b3c:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 8002b40:	4622      	mov	r2, r4
 8002b42:	462b      	mov	r3, r5
 8002b44:	f04f 0000 	mov.w	r0, #0
 8002b48:	f04f 0100 	mov.w	r1, #0
 8002b4c:	0099      	lsls	r1, r3, #2
 8002b4e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002b52:	0090      	lsls	r0, r2, #2
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	1911      	adds	r1, r2, r4
 8002b5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b5c:	416b      	adcs	r3, r5
 8002b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b60:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002b64:	460b      	mov	r3, r1
 8002b66:	18db      	adds	r3, r3, r3
 8002b68:	633b      	str	r3, [r7, #48]	; 0x30
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	eb42 0303 	adc.w	r3, r2, r3
 8002b70:	637b      	str	r3, [r7, #52]	; 0x34
 8002b72:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002b76:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
    partial_data6 = (int64_t)(uncomp_data->pressure * uncomp_data->pressure);
 8002b7a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b82:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	fb02 f501 	mul.w	r5, r2, r1
 8002b8e:	fb00 f403 	mul.w	r4, r0, r3
 8002b92:	442c      	add	r4, r5
 8002b94:	fba0 2302 	umull	r2, r3, r0, r2
 8002b98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002ba6:	18e3      	adds	r3, r4, r3
 8002ba8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002bac:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8002bb0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
    partial_data2 = (int64_t)((reg_calib_data->par_p11 * partial_data6) / (int32_t)65536);
 8002bb4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002bb8:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8002bbc:	b25b      	sxtb	r3, r3
 8002bbe:	17da      	asrs	r2, r3, #31
 8002bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bc4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002bc8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002bcc:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8002bd0:	462a      	mov	r2, r5
 8002bd2:	fb02 f203 	mul.w	r2, r2, r3
 8002bd6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002bda:	4621      	mov	r1, r4
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	441a      	add	r2, r3
 8002be2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002be6:	4621      	mov	r1, r4
 8002be8:	fba3 1301 	umull	r1, r3, r3, r1
 8002bec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002bf6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002bfa:	18d3      	adds	r3, r2, r3
 8002bfc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002c00:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	da08      	bge.n	8002c1a <compensate_pressure+0x6aa>
 8002c08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c0c:	1851      	adds	r1, r2, r1
 8002c0e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c10:	f143 0300 	adc.w	r3, r3, #0
 8002c14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c1a:	f04f 0000 	mov.w	r0, #0
 8002c1e:	f04f 0100 	mov.w	r1, #0
 8002c22:	0c10      	lsrs	r0, r2, #16
 8002c24:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002c28:	1419      	asrs	r1, r3, #16
 8002c2a:	e9c7 016e 	strd	r0, r1, [r7, #440]	; 0x1b8
    partial_data3 = (int64_t)((int64_t)(partial_data2 * uncomp_data->pressure) / 128);
 8002c2e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c36:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8002c3a:	fb02 f501 	mul.w	r5, r2, r1
 8002c3e:	fb00 f403 	mul.w	r4, r0, r3
 8002c42:	442c      	add	r4, r5
 8002c44:	fba0 2302 	umull	r2, r3, r0, r2
 8002c48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002c52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c56:	18e3      	adds	r3, r4, r3
 8002c58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002c5c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	da07      	bge.n	8002c74 <compensate_pressure+0x704>
 8002c64:	f112 017f 	adds.w	r1, r2, #127	; 0x7f
 8002c68:	6239      	str	r1, [r7, #32]
 8002c6a:	f143 0300 	adc.w	r3, r3, #0
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c70:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c74:	f04f 0000 	mov.w	r0, #0
 8002c78:	f04f 0100 	mov.w	r1, #0
 8002c7c:	09d0      	lsrs	r0, r2, #7
 8002c7e:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8002c82:	11d9      	asrs	r1, r3, #7
 8002c84:	e9c7 016c 	strd	r0, r1, [r7, #432]	; 0x1b0
    partial_data4 = (int64_t)((offset / 4) + partial_data1 + partial_data5 + partial_data3);
 8002c88:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	da06      	bge.n	8002c9e <compensate_pressure+0x72e>
 8002c90:	1cd1      	adds	r1, r2, #3
 8002c92:	61b9      	str	r1, [r7, #24]
 8002c94:	f143 0300 	adc.w	r3, r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c9e:	f04f 0000 	mov.w	r0, #0
 8002ca2:	f04f 0100 	mov.w	r1, #0
 8002ca6:	0890      	lsrs	r0, r2, #2
 8002ca8:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8002cac:	1099      	asrs	r1, r3, #2
 8002cae:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8002cb2:	1884      	adds	r4, r0, r2
 8002cb4:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8002cb8:	eb41 0303 	adc.w	r3, r1, r3
 8002cbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002cc0:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8002cc4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cc8:	4621      	mov	r1, r4
 8002cca:	1889      	adds	r1, r1, r2
 8002ccc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	eb43 0101 	adc.w	r1, r3, r1
 8002cd6:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8002cda:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8002cde:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8002ce2:	4621      	mov	r1, r4
 8002ce4:	1851      	adds	r1, r2, r1
 8002ce6:	6139      	str	r1, [r7, #16]
 8002ce8:	4629      	mov	r1, r5
 8002cea:	eb43 0101 	adc.w	r1, r3, r1
 8002cee:	6179      	str	r1, [r7, #20]
 8002cf0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002cf4:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
    comp_press = (((uint64_t)partial_data4 * 25) / (uint64_t)1099511627776);
 8002cf8:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	1894      	adds	r4, r2, r2
 8002d02:	60bc      	str	r4, [r7, #8]
 8002d04:	415b      	adcs	r3, r3
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d0c:	1814      	adds	r4, r2, r0
 8002d0e:	603c      	str	r4, [r7, #0]
 8002d10:	414b      	adcs	r3, r1
 8002d12:	607b      	str	r3, [r7, #4]
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	e9d7 8900 	ldrd	r8, r9, [r7]
 8002d20:	464c      	mov	r4, r9
 8002d22:	00e3      	lsls	r3, r4, #3
 8002d24:	4644      	mov	r4, r8
 8002d26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d2a:	4644      	mov	r4, r8
 8002d2c:	00e2      	lsls	r2, r4, #3
 8002d2e:	4614      	mov	r4, r2
 8002d30:	461d      	mov	r5, r3
 8002d32:	4623      	mov	r3, r4
 8002d34:	181b      	adds	r3, r3, r0
 8002d36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d3a:	462b      	mov	r3, r5
 8002d3c:	eb41 0303 	adc.w	r3, r1, r3
 8002d40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8002d50:	0a0a      	lsrs	r2, r1, #8
 8002d52:	2300      	movs	r3, #0
 8002d54:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0

    if (comp_press < BMP3_MIN_PRES_INT)
 8002d58:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8002d5c:	4916      	ldr	r1, [pc, #88]	; (8002db8 <compensate_pressure+0x848>)
 8002d5e:	428a      	cmp	r2, r1
 8002d60:	f173 0300 	sbcs.w	r3, r3, #0
 8002d64:	d207      	bcs.n	8002d76 <compensate_pressure+0x806>
    {
        comp_press = BMP3_MIN_PRES_INT;
 8002d66:	4a14      	ldr	r2, [pc, #80]	; (8002db8 <compensate_pressure+0x848>)
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
        rslt = BMP3_W_MIN_PRES;
 8002d70:	2305      	movs	r3, #5
 8002d72:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
    }

    if (comp_press > BMP3_MAX_PRES_INT)
 8002d76:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8002d7a:	4910      	ldr	r1, [pc, #64]	; (8002dbc <compensate_pressure+0x84c>)
 8002d7c:	428a      	cmp	r2, r1
 8002d7e:	f173 0300 	sbcs.w	r3, r3, #0
 8002d82:	d307      	bcc.n	8002d94 <compensate_pressure+0x824>
    {
        comp_press = BMP3_MAX_PRES_INT;
 8002d84:	a30a      	add	r3, pc, #40	; (adr r3, 8002db0 <compensate_pressure+0x840>)
 8002d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8a:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
        rslt = BMP3_W_MAX_PRES;
 8002d8e:	2306      	movs	r3, #6
 8002d90:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
    }

    (*pressure) = comp_press;
 8002d94:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002d98:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8002d9c:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8002da0:	f997 31df 	ldrsb.w	r3, [r7, #479]	; 0x1df
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 8002daa:	46bd      	mov	sp, r7
 8002dac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002db0:	00bebc20 	.word	0x00bebc20
 8002db4:	00000000 	.word	0x00000000
 8002db8:	002dc6c0 	.word	0x002dc6c0
 8002dbc:	00bebc21 	.word	0x00bebc21

08002dc0 <pow_bmp3>:

/*!
 * @brief This internal API is used to calculate the power functionality.
 */
static uint32_t pow_bmp3(uint8_t base, uint8_t power)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	460a      	mov	r2, r1
 8002dca:	71fb      	strb	r3, [r7, #7]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	71bb      	strb	r3, [r7, #6]
    uint32_t pow_output = 1;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	60fb      	str	r3, [r7, #12]

    while (power != 0)
 8002dd4:	e007      	b.n	8002de6 <pow_bmp3+0x26>
    {
        pow_output = base * pow_output;
 8002dd6:	79fa      	ldrb	r2, [r7, #7]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	fb02 f303 	mul.w	r3, r2, r3
 8002dde:	60fb      	str	r3, [r7, #12]
        power--;
 8002de0:	79bb      	ldrb	r3, [r7, #6]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	71bb      	strb	r3, [r7, #6]
    while (power != 0)
 8002de6:	79bb      	ldrb	r3, [r7, #6]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1f4      	bne.n	8002dd6 <pow_bmp3+0x16>
    }

    return pow_output;
 8002dec:	68fb      	ldr	r3, [r7, #12]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b085      	sub	sp, #20
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
 8002e16:	e001      	b.n	8002e1c <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b085      	sub	sp, #20
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00f      	beq.n	8002e58 <null_ptr_check+0x2e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00b      	beq.n	8002e58 <null_ptr_check+0x2e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <null_ptr_check+0x2e>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d102      	bne.n	8002e5e <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 8002e58:	23ff      	movs	r3, #255	; 0xff
 8002e5a:	73fb      	strb	r3, [r7, #15]
 8002e5c:	e001      	b.n	8002e62 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <get_sensor_status>:
/*!
 * @brief This API gets the command ready, data ready for pressure and
 * temperature, power on reset status from the sensor.
 */
static int8_t get_sensor_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;

    reg_addr = BMP3_REG_SENS_STATUS;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8002e80:	f107 010d 	add.w	r1, r7, #13
 8002e84:	7bb8      	ldrb	r0, [r7, #14]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f7fe fa44 	bl	8001316 <bmp3_get_regs>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d128      	bne.n	8002eec <get_sensor_status+0x7a>
    {
        status->sensor.cmd_rdy = BMP3_GET_BITS(reg_data, BMP3_STATUS_CMD_RDY);
 8002e9a:	7b7b      	ldrb	r3, [r7, #13]
 8002e9c:	111b      	asrs	r3, r3, #4
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	70da      	strb	r2, [r3, #3]
        status->sensor.drdy_press = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_PRESS);
 8002eaa:	7b7b      	ldrb	r3, [r7, #13]
 8002eac:	115b      	asrs	r3, r3, #5
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	711a      	strb	r2, [r3, #4]
        status->sensor.drdy_temp = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_TEMP);
 8002eba:	7b7b      	ldrb	r3, [r7, #13]
 8002ebc:	119b      	asrs	r3, r3, #6
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	715a      	strb	r2, [r3, #5]
        reg_addr = BMP3_REG_EVENT;
 8002eca:	2310      	movs	r3, #16
 8002ecc:	73bb      	strb	r3, [r7, #14]
        rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8002ece:	f107 010d 	add.w	r1, r7, #13
 8002ed2:	7bb8      	ldrb	r0, [r7, #14]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f7fe fa1d 	bl	8001316 <bmp3_get_regs>
 8002edc:	4603      	mov	r3, r0
 8002ede:	73fb      	strb	r3, [r7, #15]
        status->pwr_on_rst = reg_data & 0x01;
 8002ee0:	7b7b      	ldrb	r3, [r7, #13]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	725a      	strb	r2, [r3, #9]
    }

    return rslt;
 8002eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <get_int_status>:
/*!
 * @brief This API gets the interrupt (fifo watermark, fifo full, data ready)
 * status from the sensor.
 */
static int8_t get_int_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_INT_STATUS, &reg_data, 1, dev);
 8002f02:	f107 010e 	add.w	r1, r7, #14
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	2011      	movs	r0, #17
 8002f0c:	f7fe fa03 	bl	8001316 <bmp3_get_regs>
 8002f10:	4603      	mov	r3, r0
 8002f12:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d115      	bne.n	8002f48 <get_int_status+0x50>
    {
        status->intr.fifo_wm = BMP3_GET_BITS_POS_0(reg_data, BMP3_INT_STATUS_FWTM);
 8002f1c:	7bbb      	ldrb	r3, [r7, #14]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	701a      	strb	r2, [r3, #0]
        status->intr.fifo_full = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_FFULL);
 8002f28:	7bbb      	ldrb	r3, [r7, #14]
 8002f2a:	105b      	asrs	r3, r3, #1
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	705a      	strb	r2, [r3, #1]
        status->intr.drdy = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_DRDY);
 8002f38:	7bbb      	ldrb	r3, [r7, #14]
 8002f3a:	10db      	asrs	r3, r3, #3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	709a      	strb	r2, [r3, #2]
    }

    return rslt;
 8002f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <get_err_status>:
/*!
 * @brief This API gets the fatal, command and configuration error
 * from the sensor.
 */
static int8_t get_err_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_ERR, &reg_data, 1, dev);
 8002f5e:	f107 010e 	add.w	r1, r7, #14
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2201      	movs	r2, #1
 8002f66:	2002      	movs	r0, #2
 8002f68:	f7fe f9d5 	bl	8001316 <bmp3_get_regs>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d115      	bne.n	8002fa4 <get_err_status+0x50>
    {
        status->err.fatal = BMP3_GET_BITS_POS_0(reg_data, BMP3_ERR_FATAL);
 8002f78:	7bbb      	ldrb	r3, [r7, #14]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	719a      	strb	r2, [r3, #6]
        status->err.cmd = BMP3_GET_BITS(reg_data, BMP3_ERR_CMD);
 8002f84:	7bbb      	ldrb	r3, [r7, #14]
 8002f86:	105b      	asrs	r3, r3, #1
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	71da      	strb	r2, [r3, #7]
        status->err.conf = BMP3_GET_BITS(reg_data, BMP3_ERR_CONF);
 8002f94:	7bbb      	ldrb	r3, [r7, #14]
 8002f96:	109b      	asrs	r3, r3, #2
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	721a      	strb	r2, [r3, #8]
    }

    return rslt;
 8002fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <BMP390_Read>:
static struct bmp3_data data = { 0 };
static struct bmp3_settings settings = { 0 };
static struct bmp3_status status = { { 0 } };
static I2C_HandleTypeDef *bmp390_phi2c;

BMP3_INTF_RET_TYPE BMP390_Read(uint8_t reg_addr, uint8_t *read_data, uint32_t len, void *intf_ptr){
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af04      	add	r7, sp, #16
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	607a      	str	r2, [r7, #4]
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	73fb      	strb	r3, [r7, #15]
	return HAL_I2C_Mem_Read(
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2164      	movs	r1, #100	; 0x64
 8002fca:	9102      	str	r1, [sp, #8]
 8002fcc:	9301      	str	r3, [sp, #4]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	21ee      	movs	r1, #238	; 0xee
 8002fd6:	6838      	ldr	r0, [r7, #0]
 8002fd8:	f004 f844 	bl	8007064 <HAL_I2C_Mem_Read>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	b25b      	sxtb	r3, r3
			reg_addr,
			I2C_MEMADD_SIZE_8BIT,
			read_data,
			len,
			BMP390_I2C_TIMEOUT);
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <BMP390_Write>:
BMP3_INTF_RET_TYPE BMP390_Write(uint8_t reg_addr, const uint8_t *read_data, uint32_t len, void *intf_ptr){
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af04      	add	r7, sp, #16
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	73fb      	strb	r3, [r7, #15]
	return HAL_I2C_Mem_Write(
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2164      	movs	r1, #100	; 0x64
 8003002:	9102      	str	r1, [sp, #8]
 8003004:	9301      	str	r3, [sp, #4]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	2301      	movs	r3, #1
 800300c:	21ee      	movs	r1, #238	; 0xee
 800300e:	6838      	ldr	r0, [r7, #0]
 8003010:	f003 ff2e 	bl	8006e70 <HAL_I2C_Mem_Write>
 8003014:	4603      	mov	r3, r0
 8003016:	b25b      	sxtb	r3, r3
			I2C_MEMADD_SIZE_8BIT,
			read_data,
			len,
			BMP390_I2C_TIMEOUT
	);
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <BMP390_DelayUs>:
void BMP390_DelayUs(uint32_t period, void *intf_ptr){
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
	/* bmp3.c only requires ms delay, so i'll just use millisecond delay function */
	uint32_t delay = period / 1000;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a05      	ldr	r2, [pc, #20]	; (8003044 <BMP390_DelayUs+0x24>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	099b      	lsrs	r3, r3, #6
 8003034:	60fb      	str	r3, [r7, #12]
	HAL_Delay(delay);
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f002 fb76 	bl	8005728 <HAL_Delay>
}
 800303c:	bf00      	nop
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	10624dd3 	.word	0x10624dd3

08003048 <BMP390_Init>:
void BMP390_Init(void){
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af04      	add	r7, sp, #16
	HAL_Delay(100);
 800304e:	2064      	movs	r0, #100	; 0x64
 8003050:	f002 fb6a 	bl	8005728 <HAL_Delay>
	bmp390dev.chip_id = BMP390_CHIP_ID;
 8003054:	4b24      	ldr	r3, [pc, #144]	; (80030e8 <BMP390_Init+0xa0>)
 8003056:	2260      	movs	r2, #96	; 0x60
 8003058:	701a      	strb	r2, [r3, #0]
	bmp390dev.intf_ptr = bmp390_phi2c;
 800305a:	4b24      	ldr	r3, [pc, #144]	; (80030ec <BMP390_Init+0xa4>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a22      	ldr	r2, [pc, #136]	; (80030e8 <BMP390_Init+0xa0>)
 8003060:	6053      	str	r3, [r2, #4]
	bmp390dev.intf = BMP3_I2C_INTF;
 8003062:	4b21      	ldr	r3, [pc, #132]	; (80030e8 <BMP390_Init+0xa0>)
 8003064:	2201      	movs	r2, #1
 8003066:	721a      	strb	r2, [r3, #8]
	bmp390dev.read = BMP390_Read;
 8003068:	4b1f      	ldr	r3, [pc, #124]	; (80030e8 <BMP390_Init+0xa0>)
 800306a:	4a21      	ldr	r2, [pc, #132]	; (80030f0 <BMP390_Init+0xa8>)
 800306c:	60da      	str	r2, [r3, #12]
	bmp390dev.write = BMP390_Write;
 800306e:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <BMP390_Init+0xa0>)
 8003070:	4a20      	ldr	r2, [pc, #128]	; (80030f4 <BMP390_Init+0xac>)
 8003072:	611a      	str	r2, [r3, #16]
	bmp390dev.delay_us = BMP390_DelayUs;
 8003074:	4b1c      	ldr	r3, [pc, #112]	; (80030e8 <BMP390_Init+0xa0>)
 8003076:	4a20      	ldr	r2, [pc, #128]	; (80030f8 <BMP390_Init+0xb0>)
 8003078:	615a      	str	r2, [r3, #20]

	// Force soft reset
	uint8_t buf = 0xB6;
 800307a:	23b6      	movs	r3, #182	; 0xb6
 800307c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(bmp390dev.intf_ptr, BMP3_ADDR_I2C_SEC << 1, 0x7E, I2C_MEMADD_SIZE_8BIT, &buf, 1, 100);
 800307e:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <BMP390_Init+0xa0>)
 8003080:	6858      	ldr	r0, [r3, #4]
 8003082:	2364      	movs	r3, #100	; 0x64
 8003084:	9302      	str	r3, [sp, #8]
 8003086:	2301      	movs	r3, #1
 8003088:	9301      	str	r3, [sp, #4]
 800308a:	1dfb      	adds	r3, r7, #7
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	2301      	movs	r3, #1
 8003090:	227e      	movs	r2, #126	; 0x7e
 8003092:	21ee      	movs	r1, #238	; 0xee
 8003094:	f003 feec 	bl	8006e70 <HAL_I2C_Mem_Write>
	bmp3_init(&bmp390dev);
 8003098:	4813      	ldr	r0, [pc, #76]	; (80030e8 <BMP390_Init+0xa0>)
 800309a:	f7fe f8f5 	bl	8001288 <bmp3_init>

	settings.press_en = BMP3_ENABLE;
 800309e:	4b17      	ldr	r3, [pc, #92]	; (80030fc <BMP390_Init+0xb4>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	705a      	strb	r2, [r3, #1]
	settings.temp_en = BMP3_ENABLE;
 80030a4:	4b15      	ldr	r3, [pc, #84]	; (80030fc <BMP390_Init+0xb4>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	709a      	strb	r2, [r3, #2]

	settings.odr_filter.press_os = BMP3_OVERSAMPLING_8X;
 80030aa:	4b14      	ldr	r3, [pc, #80]	; (80030fc <BMP390_Init+0xb4>)
 80030ac:	2203      	movs	r2, #3
 80030ae:	70da      	strb	r2, [r3, #3]
	settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 80030b0:	4b12      	ldr	r3, [pc, #72]	; (80030fc <BMP390_Init+0xb4>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	711a      	strb	r2, [r3, #4]
	settings.odr_filter.odr = BMP3_ODR_50_HZ;
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <BMP390_Init+0xb4>)
 80030b8:	2202      	movs	r2, #2
 80030ba:	719a      	strb	r2, [r3, #6]

	settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR;
 80030bc:	4b10      	ldr	r3, [pc, #64]	; (8003100 <BMP390_Init+0xb8>)
 80030be:	22b6      	movs	r2, #182	; 0xb6
 80030c0:	801a      	strh	r2, [r3, #0]
	bmp3_set_sensor_settings(settings_sel, &settings, &bmp390dev);
 80030c2:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <BMP390_Init+0xb8>)
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	4a08      	ldr	r2, [pc, #32]	; (80030e8 <BMP390_Init+0xa0>)
 80030c8:	490c      	ldr	r1, [pc, #48]	; (80030fc <BMP390_Init+0xb4>)
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe fa44 	bl	8001558 <bmp3_set_sensor_settings>

	settings.op_mode = BMP3_MODE_NORMAL;
 80030d0:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <BMP390_Init+0xb4>)
 80030d2:	2203      	movs	r2, #3
 80030d4:	701a      	strb	r2, [r3, #0]
	bmp3_set_op_mode(&settings, &bmp390dev);
 80030d6:	4904      	ldr	r1, [pc, #16]	; (80030e8 <BMP390_Init+0xa0>)
 80030d8:	4808      	ldr	r0, [pc, #32]	; (80030fc <BMP390_Init+0xb4>)
 80030da:	f7fe fb00 	bl	80016de <bmp3_set_op_mode>
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000330 	.word	0x20000330
 80030ec:	20000394 	.word	0x20000394
 80030f0:	08002fb1 	.word	0x08002fb1
 80030f4:	08002fe9 	.word	0x08002fe9
 80030f8:	08003021 	.word	0x08003021
 80030fc:	20000378 	.word	0x20000378
 8003100:	2000032c 	.word	0x2000032c

08003104 <BMP390_GetValue>:
HAL_StatusTypeDef BMP390_GetValue( int64_t *pTemperature, uint64_t *pPressure, uint32_t Timeout ){
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]

	uint32_t 	tickstart = HAL_GetTick();
 8003110:	f002 fafe 	bl	8005710 <HAL_GetTick>
 8003114:	6178      	str	r0, [r7, #20]

	while( bmp3_get_status(&status, &bmp390dev) != BMP3_OK ){
 8003116:	e009      	b.n	800312c <BMP390_GetValue+0x28>
		if ( ( HAL_GetTick() - tickstart ) > Timeout )
 8003118:	f002 fafa 	bl	8005710 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	d201      	bcs.n	800312c <BMP390_GetValue+0x28>
			return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e01d      	b.n	8003168 <BMP390_GetValue+0x64>
	while( bmp3_get_status(&status, &bmp390dev) != BMP3_OK ){
 800312c:	4910      	ldr	r1, [pc, #64]	; (8003170 <BMP390_GetValue+0x6c>)
 800312e:	4811      	ldr	r0, [pc, #68]	; (8003174 <BMP390_GetValue+0x70>)
 8003130:	f7fe fa60 	bl	80015f4 <bmp3_get_status>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1ee      	bne.n	8003118 <BMP390_GetValue+0x14>
	}

	/* BMP3_OK; sensor ready */
	if ( bmp3_get_sensor_data(BMP3_PRESS_TEMP, &data, &bmp390dev) ){
 800313a:	4a0d      	ldr	r2, [pc, #52]	; (8003170 <BMP390_GetValue+0x6c>)
 800313c:	490e      	ldr	r1, [pc, #56]	; (8003178 <BMP390_GetValue+0x74>)
 800313e:	2003      	movs	r0, #3
 8003140:	f7fe fb41 	bl	80017c6 <bmp3_get_sensor_data>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <BMP390_GetValue+0x4a>
		return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e00c      	b.n	8003168 <BMP390_GetValue+0x64>
	}
	*pTemperature 	= data.temperature;
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <BMP390_GetValue+0x74>)
 8003150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003154:	68f9      	ldr	r1, [r7, #12]
 8003156:	e9c1 2300 	strd	r2, r3, [r1]
	*pPressure		= data.pressure;
 800315a:	4b07      	ldr	r3, [pc, #28]	; (8003178 <BMP390_GetValue+0x74>)
 800315c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	e9c1 2300 	strd	r2, r3, [r1]

	return HAL_OK;
 8003166:	2300      	movs	r3, #0

}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000330 	.word	0x20000330
 8003174:	20000388 	.word	0x20000388
 8003178:	20000368 	.word	0x20000368

0800317c <BMP390_AssignI2C>:
void BMP390_AssignI2C(I2C_HandleTypeDef *phi2c){
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
	bmp390_phi2c = phi2c;
 8003184:	4a04      	ldr	r2, [pc, #16]	; (8003198 <BMP390_AssignI2C+0x1c>)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6013      	str	r3, [r2, #0]
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	20000394 	.word	0x20000394

0800319c <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	71fb      	strb	r3, [r7, #7]
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	4619      	mov	r1, r3
 80031aa:	2007      	movs	r0, #7
 80031ac:	f000 fa88 	bl	80036c0 <bno055_writeData>
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	4619      	mov	r1, r3
 80031c6:	203d      	movs	r0, #61	; 0x3d
 80031c8:	f000 fa7a 	bl	80036c0 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d103      	bne.n	80031da <bno055_setOperationMode+0x22>
    bno055_delay(19);
 80031d2:	2013      	movs	r0, #19
 80031d4:	f000 fa68 	bl	80036a8 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80031d8:	e002      	b.n	80031e0 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 80031da:	2007      	movs	r0, #7
 80031dc:	f000 fa64 	bl	80036a8 <bno055_delay>
}
 80031e0:	bf00      	nop
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80031ec:	2000      	movs	r0, #0
 80031ee:	f7ff ffe3 	bl	80031b8 <bno055_setOperationMode>
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80031f6:	b580      	push	{r7, lr}
 80031f8:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80031fa:	200c      	movs	r0, #12
 80031fc:	f7ff ffdc 	bl	80031b8 <bno055_setOperationMode>
}
 8003200:	bf00      	nop
 8003202:	bd80      	pop	{r7, pc}

08003204 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(1); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(0); }

void bno055_reset() {
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8003208:	2120      	movs	r1, #32
 800320a:	203f      	movs	r0, #63	; 0x3f
 800320c:	f000 fa58 	bl	80036c0 <bno055_writeData>
  bno055_delay(700);
 8003210:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003214:	f000 fa48 	bl	80036a8 <bno055_delay>
}
 8003218:	bf00      	nop
 800321a:	bd80      	pop	{r7, pc}

0800321c <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
  bno055_reset();
 8003222:	f7ff ffef 	bl	8003204 <bno055_reset>

  uint8_t id = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800322a:	1dfb      	adds	r3, r7, #7
 800322c:	2201      	movs	r2, #1
 800322e:	4619      	mov	r1, r3
 8003230:	2000      	movs	r0, #0
 8003232:	f000 fb31 	bl	8003898 <bno055_readData>
  if (id != BNO055_ID) {
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	2ba0      	cmp	r3, #160	; 0xa0
 800323a:	d004      	beq.n	8003246 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	4619      	mov	r1, r3
 8003240:	4809      	ldr	r0, [pc, #36]	; (8003268 <bno055_setup+0x4c>)
 8003242:	f013 fcb5 	bl	8016bb0 <iprintf>
  }
  bno055_setPage(0);
 8003246:	2000      	movs	r0, #0
 8003248:	f7ff ffa8 	bl	800319c <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 800324c:	2100      	movs	r1, #0
 800324e:	203f      	movs	r0, #63	; 0x3f
 8003250:	f000 fa36 	bl	80036c0 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8003254:	f7ff ffc8 	bl	80031e8 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8003258:	200a      	movs	r0, #10
 800325a:	f000 fa25 	bl	80036a8 <bno055_delay>
}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	08019514 	.word	0x08019514

0800326c <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 800326c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003270:	b09e      	sub	sp, #120	; 0x78
 8003272:	af00      	add	r7, sp, #0
 8003274:	4603      	mov	r3, r0
 8003276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 800327a:	2000      	movs	r0, #0
 800327c:	f7ff ff8e 	bl	800319c <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8003280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003284:	2b20      	cmp	r3, #32
 8003286:	d108      	bne.n	800329a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8003288:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800328c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003290:	2208      	movs	r2, #8
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fb00 	bl	8003898 <bno055_readData>
 8003298:	e007      	b.n	80032aa <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 800329a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800329e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032a2:	2206      	movs	r2, #6
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 faf7 	bl	8003898 <bno055_readData>

  double scale = 1;
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	4b8b      	ldr	r3, [pc, #556]	; (80034dc <bno055_getVector+0x270>)
 80032b0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 80032b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032b8:	2b0e      	cmp	r3, #14
 80032ba:	d109      	bne.n	80032d0 <bno055_getVector+0x64>
    scale = magScale;
 80032bc:	4b88      	ldr	r3, [pc, #544]	; (80034e0 <bno055_getVector+0x274>)
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fd f93f 	bl	8000544 <__aeabi_ui2d>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80032ce:	e03e      	b.n	800334e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 80032d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d007      	beq.n	80032e8 <bno055_getVector+0x7c>
 80032d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032dc:	2b28      	cmp	r3, #40	; 0x28
 80032de:	d003      	beq.n	80032e8 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80032e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032e4:	2b2e      	cmp	r3, #46	; 0x2e
 80032e6:	d109      	bne.n	80032fc <bno055_getVector+0x90>
    scale = accelScale;
 80032e8:	4b7e      	ldr	r3, [pc, #504]	; (80034e4 <bno055_getVector+0x278>)
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd f929 	bl	8000544 <__aeabi_ui2d>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80032fa:	e028      	b.n	800334e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80032fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003300:	2b14      	cmp	r3, #20
 8003302:	d109      	bne.n	8003318 <bno055_getVector+0xac>
    scale = angularRateScale;
 8003304:	4b78      	ldr	r3, [pc, #480]	; (80034e8 <bno055_getVector+0x27c>)
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd f91b 	bl	8000544 <__aeabi_ui2d>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8003316:	e01a      	b.n	800334e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8003318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800331c:	2b1a      	cmp	r3, #26
 800331e:	d109      	bne.n	8003334 <bno055_getVector+0xc8>
    scale = eulerScale;
 8003320:	4b72      	ldr	r3, [pc, #456]	; (80034ec <bno055_getVector+0x280>)
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7fd f90d 	bl	8000544 <__aeabi_ui2d>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8003332:	e00c      	b.n	800334e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8003334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003338:	2b20      	cmp	r3, #32
 800333a:	d108      	bne.n	800334e <bno055_getVector+0xe2>
    scale = quaScale;
 800333c:	4b6c      	ldr	r3, [pc, #432]	; (80034f0 <bno055_getVector+0x284>)
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7fd f8ff 	bl	8000544 <__aeabi_ui2d>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 800334e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003352:	2220      	movs	r2, #32
 8003354:	2100      	movs	r1, #0
 8003356:	4618      	mov	r0, r3
 8003358:	f012 fed8 	bl	801610c <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 800335c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003360:	2b20      	cmp	r3, #32
 8003362:	d150      	bne.n	8003406 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8003364:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	b21a      	sxth	r2, r3
 800336c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003370:	b21b      	sxth	r3, r3
 8003372:	4313      	orrs	r3, r2
 8003374:	b21b      	sxth	r3, r3
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd f8f4 	bl	8000564 <__aeabi_i2d>
 800337c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003380:	f7fd fa84 	bl	800088c <__aeabi_ddiv>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800338c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003390:	021b      	lsls	r3, r3, #8
 8003392:	b21a      	sxth	r2, r3
 8003394:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003398:	b21b      	sxth	r3, r3
 800339a:	4313      	orrs	r3, r2
 800339c:	b21b      	sxth	r3, r3
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd f8e0 	bl	8000564 <__aeabi_i2d>
 80033a4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80033a8:	f7fd fa70 	bl	800088c <__aeabi_ddiv>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80033b4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80033b8:	021b      	lsls	r3, r3, #8
 80033ba:	b21a      	sxth	r2, r3
 80033bc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80033c0:	b21b      	sxth	r3, r3
 80033c2:	4313      	orrs	r3, r2
 80033c4:	b21b      	sxth	r3, r3
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd f8cc 	bl	8000564 <__aeabi_i2d>
 80033cc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80033d0:	f7fd fa5c 	bl	800088c <__aeabi_ddiv>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80033dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	b21a      	sxth	r2, r3
 80033e4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80033e8:	b21b      	sxth	r3, r3
 80033ea:	4313      	orrs	r3, r2
 80033ec:	b21b      	sxth	r3, r3
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd f8b8 	bl	8000564 <__aeabi_i2d>
 80033f4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80033f8:	f7fd fa48 	bl	800088c <__aeabi_ddiv>
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8003404:	e03b      	b.n	800347e <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8003406:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800340a:	021b      	lsls	r3, r3, #8
 800340c:	b21a      	sxth	r2, r3
 800340e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003412:	b21b      	sxth	r3, r3
 8003414:	4313      	orrs	r3, r2
 8003416:	b21b      	sxth	r3, r3
 8003418:	4618      	mov	r0, r3
 800341a:	f7fd f8a3 	bl	8000564 <__aeabi_i2d>
 800341e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003422:	f7fd fa33 	bl	800088c <__aeabi_ddiv>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800342e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003432:	021b      	lsls	r3, r3, #8
 8003434:	b21a      	sxth	r2, r3
 8003436:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800343a:	b21b      	sxth	r3, r3
 800343c:	4313      	orrs	r3, r2
 800343e:	b21b      	sxth	r3, r3
 8003440:	4618      	mov	r0, r3
 8003442:	f7fd f88f 	bl	8000564 <__aeabi_i2d>
 8003446:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800344a:	f7fd fa1f 	bl	800088c <__aeabi_ddiv>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8003456:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	b21a      	sxth	r2, r3
 800345e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003462:	b21b      	sxth	r3, r3
 8003464:	4313      	orrs	r3, r2
 8003466:	b21b      	sxth	r3, r3
 8003468:	4618      	mov	r0, r3
 800346a:	f7fd f87b 	bl	8000564 <__aeabi_i2d>
 800346e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003472:	f7fd fa0b 	bl	800088c <__aeabi_ddiv>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 800347e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8003482:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8003486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800348a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800348e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003492:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003496:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800349a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800349e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80034a2:	ec49 8b14 	vmov	d4, r8, r9
 80034a6:	ec45 4b15 	vmov	d5, r4, r5
 80034aa:	ec41 0b16 	vmov	d6, r0, r1
 80034ae:	ec43 2b17 	vmov	d7, r2, r3
}
 80034b2:	eeb0 0a44 	vmov.f32	s0, s8
 80034b6:	eef0 0a64 	vmov.f32	s1, s9
 80034ba:	eeb0 1a45 	vmov.f32	s2, s10
 80034be:	eef0 1a65 	vmov.f32	s3, s11
 80034c2:	eeb0 2a46 	vmov.f32	s4, s12
 80034c6:	eef0 2a66 	vmov.f32	s5, s13
 80034ca:	eeb0 3a47 	vmov.f32	s6, s14
 80034ce:	eef0 3a67 	vmov.f32	s7, s15
 80034d2:	3778      	adds	r7, #120	; 0x78
 80034d4:	46bd      	mov	sp, r7
 80034d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034da:	bf00      	nop
 80034dc:	3ff00000 	.word	0x3ff00000
 80034e0:	20000006 	.word	0x20000006
 80034e4:	20000000 	.word	0x20000000
 80034e8:	20000002 	.word	0x20000002
 80034ec:	20000004 	.word	0x20000004
 80034f0:	20000008 	.word	0x20000008

080034f4 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 80034f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034f8:	b090      	sub	sp, #64	; 0x40
 80034fa:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 80034fc:	2008      	movs	r0, #8
 80034fe:	f7ff feb5 	bl	800326c <bno055_getVector>
 8003502:	eeb0 4a40 	vmov.f32	s8, s0
 8003506:	eef0 4a60 	vmov.f32	s9, s1
 800350a:	eeb0 5a41 	vmov.f32	s10, s2
 800350e:	eef0 5a61 	vmov.f32	s11, s3
 8003512:	eeb0 6a42 	vmov.f32	s12, s4
 8003516:	eef0 6a62 	vmov.f32	s13, s5
 800351a:	eeb0 7a43 	vmov.f32	s14, s6
 800351e:	eef0 7a63 	vmov.f32	s15, s7
 8003522:	ed87 4b08 	vstr	d4, [r7, #32]
 8003526:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 800352a:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800352e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8003532:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003536:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800353a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800353e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003542:	ec49 8b14 	vmov	d4, r8, r9
 8003546:	ec45 4b15 	vmov	d5, r4, r5
 800354a:	ec41 0b16 	vmov	d6, r0, r1
 800354e:	ec43 2b17 	vmov	d7, r2, r3
}
 8003552:	eeb0 0a44 	vmov.f32	s0, s8
 8003556:	eef0 0a64 	vmov.f32	s1, s9
 800355a:	eeb0 1a45 	vmov.f32	s2, s10
 800355e:	eef0 1a65 	vmov.f32	s3, s11
 8003562:	eeb0 2a46 	vmov.f32	s4, s12
 8003566:	eef0 2a66 	vmov.f32	s5, s13
 800356a:	eeb0 3a47 	vmov.f32	s6, s14
 800356e:	eef0 3a67 	vmov.f32	s7, s15
 8003572:	3740      	adds	r7, #64	; 0x40
 8003574:	46bd      	mov	sp, r7
 8003576:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800357a <bno055_getVectorMagnetometer>:
bno055_vector_t bno055_getVectorMagnetometer() {
 800357a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800357e:	b090      	sub	sp, #64	; 0x40
 8003580:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
 8003582:	200e      	movs	r0, #14
 8003584:	f7ff fe72 	bl	800326c <bno055_getVector>
 8003588:	eeb0 4a40 	vmov.f32	s8, s0
 800358c:	eef0 4a60 	vmov.f32	s9, s1
 8003590:	eeb0 5a41 	vmov.f32	s10, s2
 8003594:	eef0 5a61 	vmov.f32	s11, s3
 8003598:	eeb0 6a42 	vmov.f32	s12, s4
 800359c:	eef0 6a62 	vmov.f32	s13, s5
 80035a0:	eeb0 7a43 	vmov.f32	s14, s6
 80035a4:	eef0 7a63 	vmov.f32	s15, s7
 80035a8:	ed87 4b08 	vstr	d4, [r7, #32]
 80035ac:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80035b0:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80035b4:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80035b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035bc:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80035c0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80035c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035c8:	ec49 8b14 	vmov	d4, r8, r9
 80035cc:	ec45 4b15 	vmov	d5, r4, r5
 80035d0:	ec41 0b16 	vmov	d6, r0, r1
 80035d4:	ec43 2b17 	vmov	d7, r2, r3
}
 80035d8:	eeb0 0a44 	vmov.f32	s0, s8
 80035dc:	eef0 0a64 	vmov.f32	s1, s9
 80035e0:	eeb0 1a45 	vmov.f32	s2, s10
 80035e4:	eef0 1a65 	vmov.f32	s3, s11
 80035e8:	eeb0 2a46 	vmov.f32	s4, s12
 80035ec:	eef0 2a66 	vmov.f32	s5, s13
 80035f0:	eeb0 3a47 	vmov.f32	s6, s14
 80035f4:	eef0 3a67 	vmov.f32	s7, s15
 80035f8:	3740      	adds	r7, #64	; 0x40
 80035fa:	46bd      	mov	sp, r7
 80035fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003600 <bno055_getVectorGyroscope>:
bno055_vector_t bno055_getVectorGyroscope() {
 8003600:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003604:	b090      	sub	sp, #64	; 0x40
 8003606:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 8003608:	2014      	movs	r0, #20
 800360a:	f7ff fe2f 	bl	800326c <bno055_getVector>
 800360e:	eeb0 4a40 	vmov.f32	s8, s0
 8003612:	eef0 4a60 	vmov.f32	s9, s1
 8003616:	eeb0 5a41 	vmov.f32	s10, s2
 800361a:	eef0 5a61 	vmov.f32	s11, s3
 800361e:	eeb0 6a42 	vmov.f32	s12, s4
 8003622:	eef0 6a62 	vmov.f32	s13, s5
 8003626:	eeb0 7a43 	vmov.f32	s14, s6
 800362a:	eef0 7a63 	vmov.f32	s15, s7
 800362e:	ed87 4b08 	vstr	d4, [r7, #32]
 8003632:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8003636:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800363a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800363e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003642:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8003646:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800364a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800364e:	ec49 8b14 	vmov	d4, r8, r9
 8003652:	ec45 4b15 	vmov	d5, r4, r5
 8003656:	ec41 0b16 	vmov	d6, r0, r1
 800365a:	ec43 2b17 	vmov	d7, r2, r3
}
 800365e:	eeb0 0a44 	vmov.f32	s0, s8
 8003662:	eef0 0a64 	vmov.f32	s1, s9
 8003666:	eeb0 1a45 	vmov.f32	s2, s10
 800366a:	eef0 1a65 	vmov.f32	s3, s11
 800366e:	eeb0 2a46 	vmov.f32	s4, s12
 8003672:	eef0 2a66 	vmov.f32	s5, s13
 8003676:	eeb0 3a47 	vmov.f32	s6, s14
 800367a:	eef0 3a67 	vmov.f32	s7, s15
 800367e:	3740      	adds	r7, #64	; 0x40
 8003680:	46bd      	mov	sp, r7
 8003682:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08003688 <bno055_assignI2C>:

#include "module/bno055/bno055_stm32.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8003690:	4a04      	ldr	r2, [pc, #16]	; (80036a4 <bno055_assignI2C+0x1c>)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6013      	str	r3, [r2, #0]
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	20000398 	.word	0x20000398

080036a8 <bno055_delay>:

void bno055_delay(int time) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f002 f838 	bl	8005728 <HAL_Delay>
#endif
}
 80036b8:	bf00      	nop
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af02      	add	r7, sp, #8
 80036c6:	4603      	mov	r3, r0
 80036c8:	460a      	mov	r2, r1
 80036ca:	71fb      	strb	r3, [r7, #7]
 80036cc:	4613      	mov	r3, r2
 80036ce:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	733b      	strb	r3, [r7, #12]
 80036d4:	79bb      	ldrb	r3, [r7, #6]
 80036d6:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80036d8:	4b5a      	ldr	r3, [pc, #360]	; (8003844 <bno055_writeData+0x184>)
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	f107 020c 	add.w	r2, r7, #12
 80036e0:	230a      	movs	r3, #10
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	2302      	movs	r3, #2
 80036e6:	2150      	movs	r1, #80	; 0x50
 80036e8:	f003 f89e 	bl	8006828 <HAL_I2C_Master_Transmit>
 80036ec:	4603      	mov	r3, r0
 80036ee:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80036f0:	7dfb      	ldrb	r3, [r7, #23]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80a0 	beq.w	8003838 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80036f8:	7dfb      	ldrb	r3, [r7, #23]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d103      	bne.n	8003706 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80036fe:	4852      	ldr	r0, [pc, #328]	; (8003848 <bno055_writeData+0x188>)
 8003700:	f013 fadc 	bl	8016cbc <puts>
 8003704:	e012      	b.n	800372c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8003706:	7dfb      	ldrb	r3, [r7, #23]
 8003708:	2b03      	cmp	r3, #3
 800370a:	d103      	bne.n	8003714 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 800370c:	484f      	ldr	r0, [pc, #316]	; (800384c <bno055_writeData+0x18c>)
 800370e:	f013 fad5 	bl	8016cbc <puts>
 8003712:	e00b      	b.n	800372c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8003714:	7dfb      	ldrb	r3, [r7, #23]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d103      	bne.n	8003722 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800371a:	484d      	ldr	r0, [pc, #308]	; (8003850 <bno055_writeData+0x190>)
 800371c:	f013 face 	bl	8016cbc <puts>
 8003720:	e004      	b.n	800372c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8003722:	7dfb      	ldrb	r3, [r7, #23]
 8003724:	4619      	mov	r1, r3
 8003726:	484b      	ldr	r0, [pc, #300]	; (8003854 <bno055_writeData+0x194>)
 8003728:	f013 fa42 	bl	8016bb0 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 800372c:	4b45      	ldr	r3, [pc, #276]	; (8003844 <bno055_writeData+0x184>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f003 fecb 	bl	80074cc <HAL_I2C_GetError>
 8003736:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d07e      	beq.n	800383c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d103      	bne.n	800374c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8003744:	4844      	ldr	r0, [pc, #272]	; (8003858 <bno055_writeData+0x198>)
 8003746:	f013 fab9 	bl	8016cbc <puts>
 800374a:	e021      	b.n	8003790 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d103      	bne.n	800375a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8003752:	4842      	ldr	r0, [pc, #264]	; (800385c <bno055_writeData+0x19c>)
 8003754:	f013 fab2 	bl	8016cbc <puts>
 8003758:	e01a      	b.n	8003790 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2b04      	cmp	r3, #4
 800375e:	d103      	bne.n	8003768 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8003760:	483f      	ldr	r0, [pc, #252]	; (8003860 <bno055_writeData+0x1a0>)
 8003762:	f013 faab 	bl	8016cbc <puts>
 8003766:	e013      	b.n	8003790 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	2b08      	cmp	r3, #8
 800376c:	d103      	bne.n	8003776 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800376e:	483d      	ldr	r0, [pc, #244]	; (8003864 <bno055_writeData+0x1a4>)
 8003770:	f013 faa4 	bl	8016cbc <puts>
 8003774:	e00c      	b.n	8003790 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b10      	cmp	r3, #16
 800377a:	d103      	bne.n	8003784 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 800377c:	483a      	ldr	r0, [pc, #232]	; (8003868 <bno055_writeData+0x1a8>)
 800377e:	f013 fa9d 	bl	8016cbc <puts>
 8003782:	e005      	b.n	8003790 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2b20      	cmp	r3, #32
 8003788:	d102      	bne.n	8003790 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800378a:	4838      	ldr	r0, [pc, #224]	; (800386c <bno055_writeData+0x1ac>)
 800378c:	f013 fa96 	bl	8016cbc <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8003790:	4b2c      	ldr	r3, [pc, #176]	; (8003844 <bno055_writeData+0x184>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f003 fe8b 	bl	80074b0 <HAL_I2C_GetState>
 800379a:	4603      	mov	r3, r0
 800379c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d103      	bne.n	80037ac <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 80037a4:	4832      	ldr	r0, [pc, #200]	; (8003870 <bno055_writeData+0x1b0>)
 80037a6:	f013 fa89 	bl	8016cbc <puts>
 80037aa:	e048      	b.n	800383e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d103      	bne.n	80037ba <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80037b2:	482f      	ldr	r0, [pc, #188]	; (8003870 <bno055_writeData+0x1b0>)
 80037b4:	f013 fa82 	bl	8016cbc <puts>
 80037b8:	e041      	b.n	800383e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	2b24      	cmp	r3, #36	; 0x24
 80037be:	d103      	bne.n	80037c8 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80037c0:	482c      	ldr	r0, [pc, #176]	; (8003874 <bno055_writeData+0x1b4>)
 80037c2:	f013 fa7b 	bl	8016cbc <puts>
 80037c6:	e03a      	b.n	800383e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	2b21      	cmp	r3, #33	; 0x21
 80037cc:	d103      	bne.n	80037d6 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80037ce:	482a      	ldr	r0, [pc, #168]	; (8003878 <bno055_writeData+0x1b8>)
 80037d0:	f013 fa74 	bl	8016cbc <puts>
 80037d4:	e033      	b.n	800383e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	2b22      	cmp	r3, #34	; 0x22
 80037da:	d103      	bne.n	80037e4 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80037dc:	4827      	ldr	r0, [pc, #156]	; (800387c <bno055_writeData+0x1bc>)
 80037de:	f013 fa6d 	bl	8016cbc <puts>
 80037e2:	e02c      	b.n	800383e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	2b28      	cmp	r3, #40	; 0x28
 80037e8:	d103      	bne.n	80037f2 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80037ea:	4825      	ldr	r0, [pc, #148]	; (8003880 <bno055_writeData+0x1c0>)
 80037ec:	f013 fa66 	bl	8016cbc <puts>
 80037f0:	e025      	b.n	800383e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
 80037f4:	2b29      	cmp	r3, #41	; 0x29
 80037f6:	d103      	bne.n	8003800 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80037f8:	4822      	ldr	r0, [pc, #136]	; (8003884 <bno055_writeData+0x1c4>)
 80037fa:	f013 fa5f 	bl	8016cbc <puts>
 80037fe:	e01e      	b.n	800383e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	2b2a      	cmp	r3, #42	; 0x2a
 8003804:	d103      	bne.n	800380e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8003806:	4820      	ldr	r0, [pc, #128]	; (8003888 <bno055_writeData+0x1c8>)
 8003808:	f013 fa58 	bl	8016cbc <puts>
 800380c:	e017      	b.n	800383e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	2b60      	cmp	r3, #96	; 0x60
 8003812:	d103      	bne.n	800381c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8003814:	481d      	ldr	r0, [pc, #116]	; (800388c <bno055_writeData+0x1cc>)
 8003816:	f013 fa51 	bl	8016cbc <puts>
 800381a:	e010      	b.n	800383e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	2ba0      	cmp	r3, #160	; 0xa0
 8003820:	d103      	bne.n	800382a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8003822:	481b      	ldr	r0, [pc, #108]	; (8003890 <bno055_writeData+0x1d0>)
 8003824:	f013 fa4a 	bl	8016cbc <puts>
 8003828:	e009      	b.n	800383e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	2be0      	cmp	r3, #224	; 0xe0
 800382e:	d106      	bne.n	800383e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8003830:	4818      	ldr	r0, [pc, #96]	; (8003894 <bno055_writeData+0x1d4>)
 8003832:	f013 fa43 	bl	8016cbc <puts>
 8003836:	e002      	b.n	800383e <bno055_writeData+0x17e>
    return;
 8003838:	bf00      	nop
 800383a:	e000      	b.n	800383e <bno055_writeData+0x17e>
    return;
 800383c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000398 	.word	0x20000398
 8003848:	08019550 	.word	0x08019550
 800384c:	08019574 	.word	0x08019574
 8003850:	0801959c 	.word	0x0801959c
 8003854:	080195c0 	.word	0x080195c0
 8003858:	080195d8 	.word	0x080195d8
 800385c:	080195ec 	.word	0x080195ec
 8003860:	08019600 	.word	0x08019600
 8003864:	08019614 	.word	0x08019614
 8003868:	08019628 	.word	0x08019628
 800386c:	0801963c 	.word	0x0801963c
 8003870:	08019654 	.word	0x08019654
 8003874:	0801966c 	.word	0x0801966c
 8003878:	08019680 	.word	0x08019680
 800387c:	08019698 	.word	0x08019698
 8003880:	080196b0 	.word	0x080196b0
 8003884:	080196c8 	.word	0x080196c8
 8003888:	080196e8 	.word	0x080196e8
 800388c:	08019708 	.word	0x08019708
 8003890:	08019720 	.word	0x08019720
 8003894:	08019738 	.word	0x08019738

08003898 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af02      	add	r7, sp, #8
 800389e:	4603      	mov	r3, r0
 80038a0:	6039      	str	r1, [r7, #0]
 80038a2:	71fb      	strb	r3, [r7, #7]
 80038a4:	4613      	mov	r3, r2
 80038a6:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <bno055_readData+0x40>)
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	1dfa      	adds	r2, r7, #7
 80038ae:	2364      	movs	r3, #100	; 0x64
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	2301      	movs	r3, #1
 80038b4:	2150      	movs	r1, #80	; 0x50
 80038b6:	f002 ffb7 	bl	8006828 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80038ba:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <bno055_readData+0x40>)
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	79bb      	ldrb	r3, [r7, #6]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2264      	movs	r2, #100	; 0x64
 80038c4:	9200      	str	r2, [sp, #0]
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	2150      	movs	r1, #80	; 0x50
 80038ca:	f003 f8ab 	bl	8006a24 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000398 	.word	0x20000398

080038dc <SD_Assign>:
static volatile DSTATUS Stat = STA_NOINIT;              /* 디스크 상태 Flag*/
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* assign */
void SD_Assign(SPI_HandleTypeDef *phspi){
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	_sd_phspi = phspi;
 80038e4:	4a04      	ldr	r2, [pc, #16]	; (80038f8 <SD_Assign+0x1c>)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6013      	str	r3, [r2, #0]
	return;
 80038ea:	bf00      	nop
}
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	2000039c 	.word	0x2000039c
 80038fc:	00000000 	.word	0x00000000

08003900 <DP_calculateAirSpeedComp>:

#include "module/mpxv7002dp/mpxv7002dp.h"

static double DP_tare_voltage = 2.5;

uint16_t DP_calculateAirSpeedComp(uint16_t adc_value, double static_pressure, double static_temperature){
 8003900:	b5b0      	push	{r4, r5, r7, lr}
 8003902:	b090      	sub	sp, #64	; 0x40
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	ed87 0b02 	vstr	d0, [r7, #8]
 800390c:	ed87 1b00 	vstr	d1, [r7]
 8003910:	82fb      	strh	r3, [r7, #22]
	double stagnaion_pressure;
	double pressure_ratio;
	double velocity;
#ifdef DP_ADC_SCALE
//	adc_voltage = adc_value / 4015 * 3.3 * DP_ADC_SCALE;
	adc_voltage = adc_value * DP_ADC_PRODUCT_COEFFICIENT;
 8003912:	8afb      	ldrh	r3, [r7, #22]
 8003914:	4618      	mov	r0, r3
 8003916:	f7fc fe25 	bl	8000564 <__aeabi_i2d>
 800391a:	a352      	add	r3, pc, #328	; (adr r3, 8003a64 <DP_calculateAirSpeedComp+0x164>)
 800391c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003920:	f7fc fe8a 	bl	8000638 <__aeabi_dmul>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
#else
//	adc_voltage = adc_value / 4015 * 3.3;
	adc_voltage = adc_value * 8.219178082191780e-4;
#endif
	// calculate pressure
	differential_pressure = (adc_voltage - DP_tare_voltage > 0) ?\
 800392c:	4b48      	ldr	r3, [pc, #288]	; (8003a50 <DP_calculateAirSpeedComp+0x150>)
 800392e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003932:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003936:	f7fc fcc7 	bl	80002c8 <__aeabi_dsub>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	4610      	mov	r0, r2
 8003940:	4619      	mov	r1, r3
			(adc_voltage - DP_tare_voltage) * 1000 : 0;
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	f7fd f905 	bl	8000b58 <__aeabi_dcmpgt>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d012      	beq.n	800397a <DP_calculateAirSpeedComp+0x7a>
 8003954:	4b3e      	ldr	r3, [pc, #248]	; (8003a50 <DP_calculateAirSpeedComp+0x150>)
 8003956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800395e:	f7fc fcb3 	bl	80002c8 <__aeabi_dsub>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4610      	mov	r0, r2
 8003968:	4619      	mov	r1, r3
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	4b39      	ldr	r3, [pc, #228]	; (8003a54 <DP_calculateAirSpeedComp+0x154>)
 8003970:	f7fc fe62 	bl	8000638 <__aeabi_dmul>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	e003      	b.n	8003982 <DP_calculateAirSpeedComp+0x82>
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	f04f 0300 	mov.w	r3, #0
	differential_pressure = (adc_voltage - DP_tare_voltage > 0) ?\
 8003982:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	stagnaion_pressure = static_pressure + differential_pressure;
 8003986:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800398a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800398e:	f7fc fc9d 	bl	80002cc <__adddf3>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	pressure_ratio = stagnaion_pressure / static_pressure;
 800399a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800399e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039a2:	f7fc ff73 	bl	800088c <__aeabi_ddiv>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	e9c7 2308 	strd	r2, r3, [r7, #32]

	// calculate velocity
	velocity = sqrt( ( powf(pressure_ratio, DP_POWER_COEFFICIENT) - 1 ) * DP_PRODUCT_COEFFICIENT / ( DP_HEAT_CAPACITY_RATIO * DP_GAS_COEFFICIENT_AIR * static_temperature ) );
 80039ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80039b2:	f7fd f939 	bl	8000c28 <__aeabi_d2f>
 80039b6:	4603      	mov	r3, r0
 80039b8:	eddf 0a27 	vldr	s1, [pc, #156]	; 8003a58 <DP_calculateAirSpeedComp+0x158>
 80039bc:	ee00 3a10 	vmov	s0, r3
 80039c0:	f015 f8f2 	bl	8018ba8 <powf>
 80039c4:	eef0 7a40 	vmov.f32	s15, s0
 80039c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039d0:	ee17 0a90 	vmov	r0, s15
 80039d4:	f7fc fdd8 	bl	8000588 <__aeabi_f2d>
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	4b1f      	ldr	r3, [pc, #124]	; (8003a5c <DP_calculateAirSpeedComp+0x15c>)
 80039de:	f7fc fe2b 	bl	8000638 <__aeabi_dmul>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4614      	mov	r4, r2
 80039e8:	461d      	mov	r5, r3
 80039ea:	a317      	add	r3, pc, #92	; (adr r3, 8003a48 <DP_calculateAirSpeedComp+0x148>)
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039f4:	f7fc fe20 	bl	8000638 <__aeabi_dmul>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4620      	mov	r0, r4
 80039fe:	4629      	mov	r1, r5
 8003a00:	f7fc ff44 	bl	800088c <__aeabi_ddiv>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	ec43 2b17 	vmov	d7, r2, r3
 8003a0c:	eeb0 0a47 	vmov.f32	s0, s14
 8003a10:	eef0 0a67 	vmov.f32	s1, s15
 8003a14:	f015 f89c 	bl	8018b50 <sqrt>
 8003a18:	ed87 0b06 	vstr	d0, [r7, #24]

	return velocity * 100;
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	4b0f      	ldr	r3, [pc, #60]	; (8003a60 <DP_calculateAirSpeedComp+0x160>)
 8003a22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003a26:	f7fc fe07 	bl	8000638 <__aeabi_dmul>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4610      	mov	r0, r2
 8003a30:	4619      	mov	r1, r3
 8003a32:	f7fd f8d9 	bl	8000be8 <__aeabi_d2uiz>
 8003a36:	4603      	mov	r3, r0
 8003a38:	b29b      	uxth	r3, r3
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3740      	adds	r7, #64	; 0x40
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bdb0      	pop	{r4, r5, r7, pc}
 8003a42:	bf00      	nop
 8003a44:	f3af 8000 	nop.w
 8003a48:	002b9ee9 	.word	0x002b9ee9
 8003a4c:	40791dfc 	.word	0x40791dfc
 8003a50:	20000010 	.word	0x20000010
 8003a54:	408f4000 	.word	0x408f4000
 8003a58:	3e924925 	.word	0x3e924925
 8003a5c:	40140000 	.word	0x40140000
 8003a60:	40590000 	.word	0x40590000
 8003a64:	4a347a96 	.word	0x4a347a96
 8003a68:	3f54330f 	.word	0x3f54330f

08003a6c <Servo_Attach>:
 *      Author: SURFACE
 */

#include "module/servo/servo.h"

void Servo_Attach(Servo_HandleTypeDef *servo, TIM_HandleTypeDef *htim, uint32_t channel){
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
	servo->htim 	= htim;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	601a      	str	r2, [r3, #0]
	servo->channel 	= channel;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	605a      	str	r2, [r3, #4]
}
 8003a84:	bf00      	nop
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003a98:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003a9c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d013      	beq.n	8003ad0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003aa8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003aac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003ab0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00b      	beq.n	8003ad0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003ab8:	e000      	b.n	8003abc <ITM_SendChar+0x2c>
    {
      __NOP();
 8003aba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003abc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f9      	beq.n	8003aba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003ac6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003ad0:	687b      	ldr	r3, [r7, #4]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <_write>:
#include "stdarg.h"

uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b086      	sub	sp, #24
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	4619      	mov	r1, r3
 8003af0:	68b8      	ldr	r0, [r7, #8]
 8003af2:	f011 fd03 	bl	80154fc <CDC_Transmit_FS>
	for(int i = 0; i < len; i++)
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	e009      	b.n	8003b10 <_write+0x32>
	{
		ITM_SendChar(*ptr++);
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	60ba      	str	r2, [r7, #8]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff ffc3 	bl	8003a90 <ITM_SendChar>
	for(int i = 0; i < len; i++)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	dbf1      	blt.n	8003afc <_write+0x1e>

	}
	return len;
 8003b18:	687b      	ldr	r3, [r7, #4]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <log_format>:

static RTC_TimeTypeDef sTime;
static RTC_DateTypeDef sDate;
static uint32_t g_SubSeconds;

void log_format(const char* tag, const char* message, va_list args) {
 8003b24:	b590      	push	{r4, r7, lr}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
	g_SubSeconds = ((255-(uint32_t)(hrtc.Instance->SSR))*1000L)/(255+1); // ms
 8003b30:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <log_format+0x74>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b36:	4a19      	ldr	r2, [pc, #100]	; (8003b9c <log_format+0x78>)
 8003b38:	fb02 f303 	mul.w	r3, r2, r3
 8003b3c:	f503 3379 	add.w	r3, r3, #254976	; 0x3e400
 8003b40:	3318      	adds	r3, #24
 8003b42:	0a1b      	lsrs	r3, r3, #8
 8003b44:	4a16      	ldr	r2, [pc, #88]	; (8003ba0 <log_format+0x7c>)
 8003b46:	6013      	str	r3, [r2, #0]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003b48:	2200      	movs	r2, #0
 8003b4a:	4916      	ldr	r1, [pc, #88]	; (8003ba4 <log_format+0x80>)
 8003b4c:	4812      	ldr	r0, [pc, #72]	; (8003b98 <log_format+0x74>)
 8003b4e:	f006 fe0b 	bl	800a768 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003b52:	2200      	movs	r2, #0
 8003b54:	4914      	ldr	r1, [pc, #80]	; (8003ba8 <log_format+0x84>)
 8003b56:	4810      	ldr	r0, [pc, #64]	; (8003b98 <log_format+0x74>)
 8003b58:	f006 fee8 	bl	800a92c <HAL_RTC_GetDate>

	printf("%02d:%02d:%02d,%03lu[%s] ", sTime.Hours, sTime.Minutes, sTime.Seconds, g_SubSeconds, tag);
 8003b5c:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <log_format+0x80>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	4619      	mov	r1, r3
 8003b62:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <log_format+0x80>)
 8003b64:	785b      	ldrb	r3, [r3, #1]
 8003b66:	4618      	mov	r0, r3
 8003b68:	4b0e      	ldr	r3, [pc, #56]	; (8003ba4 <log_format+0x80>)
 8003b6a:	789b      	ldrb	r3, [r3, #2]
 8003b6c:	461c      	mov	r4, r3
 8003b6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <log_format+0x7c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	9201      	str	r2, [sp, #4]
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	4623      	mov	r3, r4
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	480b      	ldr	r0, [pc, #44]	; (8003bac <log_format+0x88>)
 8003b7e:	f013 f817 	bl	8016bb0 <iprintf>
	vprintf(message, args);
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	68b8      	ldr	r0, [r7, #8]
 8003b86:	f013 f95f 	bl	8016e48 <viprintf>
	printf("\r\n");
 8003b8a:	4809      	ldr	r0, [pc, #36]	; (8003bb0 <log_format+0x8c>)
 8003b8c:	f013 f896 	bl	8016cbc <puts>
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd90      	pop	{r4, r7, pc}
 8003b98:	200006b8 	.word	0x200006b8
 8003b9c:	fffffc18 	.word	0xfffffc18
 8003ba0:	200003b8 	.word	0x200003b8
 8003ba4:	200003a0 	.word	0x200003a0
 8003ba8:	200003b4 	.word	0x200003b4
 8003bac:	08019750 	.word	0x08019750
 8003bb0:	0801976c 	.word	0x0801976c

08003bb4 <logi>:

void logi(const char* message, ...) {
 8003bb4:	b40f      	push	{r0, r1, r2, r3}
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8003bbc:	f107 0314 	add.w	r3, r7, #20
 8003bc0:	607b      	str	r3, [r7, #4]
	log_format("INFO", message, args);
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6939      	ldr	r1, [r7, #16]
 8003bc6:	4805      	ldr	r0, [pc, #20]	; (8003bdc <logi+0x28>)
 8003bc8:	f7ff ffac 	bl	8003b24 <log_format>
	va_end(args);
}
 8003bcc:	bf00      	nop
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bd6:	b004      	add	sp, #16
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	08019770 	.word	0x08019770

08003be0 <logd>:

void logd(const char* message, ...) {
 8003be0:	b40f      	push	{r0, r1, r2, r3}
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8003be8:	f107 0314 	add.w	r3, r7, #20
 8003bec:	607b      	str	r3, [r7, #4]
	log_format("DEBUG", message, args);
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6939      	ldr	r1, [r7, #16]
 8003bf2:	4805      	ldr	r0, [pc, #20]	; (8003c08 <logd+0x28>)
 8003bf4:	f7ff ff96 	bl	8003b24 <log_format>
	va_end(args);
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c02:	b004      	add	sp, #16
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	08019778 	.word	0x08019778

08003c0c <loge>:

void loge(const char* message, ...) {
 8003c0c:	b40f      	push	{r0, r1, r2, r3}
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b082      	sub	sp, #8
 8003c12:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8003c14:	f107 0314 	add.w	r3, r7, #20
 8003c18:	607b      	str	r3, [r7, #4]
	log_format("ERROR", message, args);
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6939      	ldr	r1, [r7, #16]
 8003c1e:	4805      	ldr	r0, [pc, #20]	; (8003c34 <loge+0x28>)
 8003c20:	f7ff ff80 	bl	8003b24 <log_format>
	va_end(args);
}
 8003c24:	bf00      	nop
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c2e:	b004      	add	sp, #16
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	08019780 	.word	0x08019780

08003c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c3c:	f001 fd32 	bl	80056a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c40:	f001 f952 	bl	8004ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c44:	f001 f9be 	bl	8004fc4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003c48:	f001 f8ec 	bl	8004e24 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003c4c:	f001 fa62 	bl	8005114 <MX_I2C1_Init>
  MX_RTC_Init();
 8003c50:	f001 fa8e 	bl	8005170 <MX_RTC_Init>
  MX_SPI2_Init();
 8003c54:	f001 fae6 	bl	8005224 <MX_SPI2_Init>
  MX_TIM3_Init();
 8003c58:	f001 fb1a 	bl	8005290 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003c5c:	f001 fba4 	bl	80053a8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003c60:	f001 fbcc 	bl	80053fc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003c64:	f001 fbf4 	bl	8005450 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8003c68:	f00a fd3e 	bl	800e6e8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  logi("Initializing...");
 8003c6c:	483a      	ldr	r0, [pc, #232]	; (8003d58 <main+0x120>)
 8003c6e:	f7ff ffa1 	bl	8003bb4 <logi>

  _BMP390_Init();
 8003c72:	f000 f98f 	bl	8003f94 <_BMP390_Init>
  _BNO055_Init();
 8003c76:	f000 f999 	bl	8003fac <_BNO055_Init>
  _SD_Init();
 8003c7a:	f000 f9a5 	bl	8003fc8 <_SD_Init>
  _Servo_Init();
 8003c7e:	f000 f9c5 	bl	800400c <_Servo_Init>

  logi("Initialized");
 8003c82:	4836      	ldr	r0, [pc, #216]	; (8003d5c <main+0x124>)
 8003c84:	f7ff ff96 	bl	8003bb4 <logi>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003c88:	f00d fb44 	bl	8011314 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of TransmitSemaphore */
  ReceiveSemaphoreHandle = osSemaphoreNew(1, 1, &ReceiveSemaphore_attributes);
 8003c8c:	4a34      	ldr	r2, [pc, #208]	; (8003d60 <main+0x128>)
 8003c8e:	2101      	movs	r1, #1
 8003c90:	2001      	movs	r0, #1
 8003c92:	f00d fddf 	bl	8011854 <osSemaphoreNew>
 8003c96:	4603      	mov	r3, r0
 8003c98:	4a32      	ldr	r2, [pc, #200]	; (8003d64 <main+0x12c>)
 8003c9a:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of SensorReading */
  SensorReadingHandle = osTimerNew(vSensorReadingCallback, osTimerPeriodic, NULL, &SensorReading_attributes);
 8003c9c:	4b32      	ldr	r3, [pc, #200]	; (8003d68 <main+0x130>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	4832      	ldr	r0, [pc, #200]	; (8003d6c <main+0x134>)
 8003ca4:	f00d fc42 	bl	801152c <osTimerNew>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	4a31      	ldr	r2, [pc, #196]	; (8003d70 <main+0x138>)
 8003cac:	6013      	str	r3, [r2, #0]

  /* creation of Transmit */
  TransmitHandle = osTimerNew(vTransmitCallback, osTimerPeriodic, NULL, &Transmit_attributes);
 8003cae:	4b31      	ldr	r3, [pc, #196]	; (8003d74 <main+0x13c>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	4830      	ldr	r0, [pc, #192]	; (8003d78 <main+0x140>)
 8003cb6:	f00d fc39 	bl	801152c <osTimerNew>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4a2f      	ldr	r2, [pc, #188]	; (8003d7c <main+0x144>)
 8003cbe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(SensorReadingHandle, 5000);
 8003cc0:	4b2b      	ldr	r3, [pc, #172]	; (8003d70 <main+0x138>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f241 3188 	movw	r1, #5000	; 0x1388
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f00d fcab 	bl	8011624 <osTimerStart>
  osTimerStart(TransmitHandle, 5000);
 8003cce:	4b2b      	ldr	r3, [pc, #172]	; (8003d7c <main+0x144>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f241 3188 	movw	r1, #5000	; 0x1388
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f00d fca4 	bl	8011624 <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Main */
  MainHandle = osThreadNew(vMainTask, NULL, &Main_attributes);
 8003cdc:	4a28      	ldr	r2, [pc, #160]	; (8003d80 <main+0x148>)
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4828      	ldr	r0, [pc, #160]	; (8003d84 <main+0x14c>)
 8003ce2:	f00d fb61 	bl	80113a8 <osThreadNew>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4a27      	ldr	r2, [pc, #156]	; (8003d88 <main+0x150>)
 8003cea:	6013      	str	r3, [r2, #0]

  /* creation of GPS */
  GPSHandle = osThreadNew(vGPSTask, NULL, &GPS_attributes);
 8003cec:	4a27      	ldr	r2, [pc, #156]	; (8003d8c <main+0x154>)
 8003cee:	2100      	movs	r1, #0
 8003cf0:	4827      	ldr	r0, [pc, #156]	; (8003d90 <main+0x158>)
 8003cf2:	f00d fb59 	bl	80113a8 <osThreadNew>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	4a26      	ldr	r2, [pc, #152]	; (8003d94 <main+0x15c>)
 8003cfa:	6013      	str	r3, [r2, #0]

  /* creation of StateManaging */
  StateManagingHandle = osThreadNew(vStateManagingTask, NULL, &StateManaging_attributes);
 8003cfc:	4a26      	ldr	r2, [pc, #152]	; (8003d98 <main+0x160>)
 8003cfe:	2100      	movs	r1, #0
 8003d00:	4826      	ldr	r0, [pc, #152]	; (8003d9c <main+0x164>)
 8003d02:	f00d fb51 	bl	80113a8 <osThreadNew>
 8003d06:	4603      	mov	r3, r0
 8003d08:	4a25      	ldr	r2, [pc, #148]	; (8003da0 <main+0x168>)
 8003d0a:	6013      	str	r3, [r2, #0]

  /* creation of Receive */
  ReceiveHandle = osThreadNew(vReceiveTask, NULL, &Receive_attributes);
 8003d0c:	4a25      	ldr	r2, [pc, #148]	; (8003da4 <main+0x16c>)
 8003d0e:	2100      	movs	r1, #0
 8003d10:	4825      	ldr	r0, [pc, #148]	; (8003da8 <main+0x170>)
 8003d12:	f00d fb49 	bl	80113a8 <osThreadNew>
 8003d16:	4603      	mov	r3, r0
 8003d18:	4a24      	ldr	r2, [pc, #144]	; (8003dac <main+0x174>)
 8003d1a:	6013      	str	r3, [r2, #0]

  /* creation of Debug */
  DebugHandle = osThreadNew(vDebugTask, NULL, &Debug_attributes);
 8003d1c:	4a24      	ldr	r2, [pc, #144]	; (8003db0 <main+0x178>)
 8003d1e:	2100      	movs	r1, #0
 8003d20:	4824      	ldr	r0, [pc, #144]	; (8003db4 <main+0x17c>)
 8003d22:	f00d fb41 	bl	80113a8 <osThreadNew>
 8003d26:	4603      	mov	r3, r0
 8003d28:	4a23      	ldr	r2, [pc, #140]	; (8003db8 <main+0x180>)
 8003d2a:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of GPSEvent */
  EventGPSHandle = osEventFlagsNew(&EventGPS_attributes);
 8003d2c:	4823      	ldr	r0, [pc, #140]	; (8003dbc <main+0x184>)
 8003d2e:	f00d fca7 	bl	8011680 <osEventFlagsNew>
 8003d32:	4603      	mov	r3, r0
 8003d34:	4a22      	ldr	r2, [pc, #136]	; (8003dc0 <main+0x188>)
 8003d36:	6013      	str	r3, [r2, #0]

  /* creation of CommandEvent */
  EventCommandHandle = osEventFlagsNew(&EventCommand_attributes);
 8003d38:	4822      	ldr	r0, [pc, #136]	; (8003dc4 <main+0x18c>)
 8003d3a:	f00d fca1 	bl	8011680 <osEventFlagsNew>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	4a21      	ldr	r2, [pc, #132]	; (8003dc8 <main+0x190>)
 8003d42:	6013      	str	r3, [r2, #0]

  EventReceiveHandle = osEventFlagsNew(&EventReceive_attributes);
 8003d44:	4821      	ldr	r0, [pc, #132]	; (8003dcc <main+0x194>)
 8003d46:	f00d fc9b 	bl	8011680 <osEventFlagsNew>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4a20      	ldr	r2, [pc, #128]	; (8003dd0 <main+0x198>)
 8003d4e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003d50:	f00d fb04 	bl	801135c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003d54:	e7fe      	b.n	8003d54 <main+0x11c>
 8003d56:	bf00      	nop
 8003d58:	08019810 	.word	0x08019810
 8003d5c:	08019820 	.word	0x08019820
 8003d60:	080199bc 	.word	0x080199bc
 8003d64:	200003d8 	.word	0x200003d8
 8003d68:	0801999c 	.word	0x0801999c
 8003d6c:	08004201 	.word	0x08004201
 8003d70:	200003d0 	.word	0x200003d0
 8003d74:	080199ac 	.word	0x080199ac
 8003d78:	080044e5 	.word	0x080044e5
 8003d7c:	200003d4 	.word	0x200003d4
 8003d80:	080198e8 	.word	0x080198e8
 8003d84:	0800405d 	.word	0x0800405d
 8003d88:	200003bc 	.word	0x200003bc
 8003d8c:	0801990c 	.word	0x0801990c
 8003d90:	0800409d 	.word	0x0800409d
 8003d94:	200003c0 	.word	0x200003c0
 8003d98:	08019930 	.word	0x08019930
 8003d9c:	080040ad 	.word	0x080040ad
 8003da0:	200003c4 	.word	0x200003c4
 8003da4:	08019954 	.word	0x08019954
 8003da8:	080040bd 	.word	0x080040bd
 8003dac:	200003c8 	.word	0x200003c8
 8003db0:	08019978 	.word	0x08019978
 8003db4:	08004191 	.word	0x08004191
 8003db8:	200003cc 	.word	0x200003cc
 8003dbc:	080199cc 	.word	0x080199cc
 8003dc0:	200003dc 	.word	0x200003dc
 8003dc4:	080199dc 	.word	0x080199dc
 8003dc8:	200003e0 	.word	0x200003e0
 8003dcc:	080199ec 	.word	0x080199ec
 8003dd0:	200003e4 	.word	0x200003e4

08003dd4 <HAL_UART_RxCpltCallback>:
//uint8_t buffer[14] = {};



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART3)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a65      	ldr	r2, [pc, #404]	; (8003f78 <HAL_UART_RxCpltCallback+0x1a4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	f040 80c5 	bne.w	8003f72 <HAL_UART_RxCpltCallback+0x19e>
  {
  	//osSemaphoreRelease(ReceiveSemaphoreHandle);

  	if(HAL_GetTick() - receive_tick > 10) {
 8003de8:	f001 fc92 	bl	8005710 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	4b63      	ldr	r3, [pc, #396]	; (8003f7c <HAL_UART_RxCpltCallback+0x1a8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b0a      	cmp	r3, #10
 8003df6:	d907      	bls.n	8003e08 <HAL_UART_RxCpltCallback+0x34>
  		xbee_rx_buffer.isReceiving = FALSE;
 8003df8:	4b61      	ldr	r3, [pc, #388]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	701a      	strb	r2, [r3, #0]
  		receive_tick = HAL_GetTick();
 8003dfe:	f001 fc87 	bl	8005710 <HAL_GetTick>
 8003e02:	4603      	mov	r3, r0
 8003e04:	4a5d      	ldr	r2, [pc, #372]	; (8003f7c <HAL_UART_RxCpltCallback+0x1a8>)
 8003e06:	6013      	str	r3, [r2, #0]
  	}

  	if(xbee_rx_buffer.isReceiving == FALSE) {
 8003e08:	4b5d      	ldr	r3, [pc, #372]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d119      	bne.n	8003e44 <HAL_UART_RxCpltCallback+0x70>
  		if(uart_rx_buffer[0] == 0x7E){
 8003e10:	4b5c      	ldr	r3, [pc, #368]	; (8003f84 <HAL_UART_RxCpltCallback+0x1b0>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b7e      	cmp	r3, #126	; 0x7e
 8003e16:	d10f      	bne.n	8003e38 <HAL_UART_RxCpltCallback+0x64>
  			memset(&xbee_rx_buffer,0, sizeof(xbee_rx_buffer));
 8003e18:	2288      	movs	r2, #136	; 0x88
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	4858      	ldr	r0, [pc, #352]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003e1e:	f012 f975 	bl	801610c <memset>
  			xbee_rx_buffer.isReceiving = TRUE;
 8003e22:	4b57      	ldr	r3, [pc, #348]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003e24:	2201      	movs	r2, #1
 8003e26:	701a      	strb	r2, [r3, #0]
  	  	++xbee_rx_buffer.pos;
 8003e28:	4b55      	ldr	r3, [pc, #340]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003e2a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003e2e:	3301      	adds	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	4b53      	ldr	r3, [pc, #332]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003e34:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
  		}
    	HAL_UART_Receive_IT(&huart3, uart_rx_buffer, sizeof(uart_rx_buffer));
 8003e38:	2201      	movs	r2, #1
 8003e3a:	4952      	ldr	r1, [pc, #328]	; (8003f84 <HAL_UART_RxCpltCallback+0x1b0>)
 8003e3c:	4852      	ldr	r0, [pc, #328]	; (8003f88 <HAL_UART_RxCpltCallback+0x1b4>)
 8003e3e:	f008 f872 	bl	800bf26 <HAL_UART_Receive_IT>
  		return;
 8003e42:	e096      	b.n	8003f72 <HAL_UART_RxCpltCallback+0x19e>
  	}

  	if(xbee_rx_buffer.pos == 0) {
 8003e44:	4b4e      	ldr	r3, [pc, #312]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003e46:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d104      	bne.n	8003e58 <HAL_UART_RxCpltCallback+0x84>
  		xbee_rx_buffer.length = 0;
 8003e4e:	4b4c      	ldr	r3, [pc, #304]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8003e56:	e07f      	b.n	8003f58 <HAL_UART_RxCpltCallback+0x184>
  	} else if(xbee_rx_buffer.pos == 1) {
 8003e58:	4b49      	ldr	r3, [pc, #292]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003e5a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d10a      	bne.n	8003e78 <HAL_UART_RxCpltCallback+0xa4>
  		xbee_rx_buffer.length = uart_rx_buffer[0] * 0xFF;
 8003e62:	4b48      	ldr	r3, [pc, #288]	; (8003f84 <HAL_UART_RxCpltCallback+0x1b0>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	0212      	lsls	r2, r2, #8
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	4b43      	ldr	r3, [pc, #268]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003e72:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8003e76:	e06f      	b.n	8003f58 <HAL_UART_RxCpltCallback+0x184>
  	} else if(xbee_rx_buffer.pos == 2) {
 8003e78:	4b41      	ldr	r3, [pc, #260]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003e7a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d10b      	bne.n	8003e9a <HAL_UART_RxCpltCallback+0xc6>
  		xbee_rx_buffer.length += uart_rx_buffer[0];
 8003e82:	4b3f      	ldr	r3, [pc, #252]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003e84:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8003e88:	4b3e      	ldr	r3, [pc, #248]	; (8003f84 <HAL_UART_RxCpltCallback+0x1b0>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	4413      	add	r3, r2
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	4b3b      	ldr	r3, [pc, #236]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003e94:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8003e98:	e05e      	b.n	8003f58 <HAL_UART_RxCpltCallback+0x184>
  	} else if(xbee_rx_buffer.pos < xbee_rx_buffer.length + 3){
 8003e9a:	4b39      	ldr	r3, [pc, #228]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003e9c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	4a37      	ldr	r2, [pc, #220]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003ea4:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	db15      	blt.n	8003ed8 <HAL_UART_RxCpltCallback+0x104>
  		xbee_rx_buffer.buffer[xbee_rx_buffer.pos-3] = uart_rx_buffer[0];
 8003eac:	4b34      	ldr	r3, [pc, #208]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003eae:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003eb2:	3b03      	subs	r3, #3
 8003eb4:	4a33      	ldr	r2, [pc, #204]	; (8003f84 <HAL_UART_RxCpltCallback+0x1b0>)
 8003eb6:	7811      	ldrb	r1, [r2, #0]
 8003eb8:	4a31      	ldr	r2, [pc, #196]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003eba:	4413      	add	r3, r2
 8003ebc:	460a      	mov	r2, r1
 8003ebe:	709a      	strb	r2, [r3, #2]
  		xbee_rx_buffer.checksum += uart_rx_buffer[0];
 8003ec0:	4b2f      	ldr	r3, [pc, #188]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003ec2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8003ec6:	4b2f      	ldr	r3, [pc, #188]	; (8003f84 <HAL_UART_RxCpltCallback+0x1b0>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	4413      	add	r3, r2
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003ed2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8003ed6:	e03f      	b.n	8003f58 <HAL_UART_RxCpltCallback+0x184>
  	} else if(xbee_rx_buffer.pos >= xbee_rx_buffer.length + 3) {
 8003ed8:	4b29      	ldr	r3, [pc, #164]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003eda:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003ede:	3302      	adds	r3, #2
 8003ee0:	4a27      	ldr	r2, [pc, #156]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003ee2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	da36      	bge.n	8003f58 <HAL_UART_RxCpltCallback+0x184>
  		xbee_rx_buffer.checksum = (uint8_t) xbee_rx_buffer.checksum;
 8003eea:	4b25      	ldr	r3, [pc, #148]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003eec:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003ef6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
  		xbee_rx_buffer.checksum = 0xFF - xbee_rx_buffer.checksum;
 8003efa:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003efc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8003f00:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	4b1e      	ldr	r3, [pc, #120]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003f08:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
			if (osSemaphoreAcquire(ReceiveSemaphoreHandle, 0) == osOK) {
 8003f0c:	4b1f      	ldr	r3, [pc, #124]	; (8003f8c <HAL_UART_RxCpltCallback+0x1b8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2100      	movs	r1, #0
 8003f12:	4618      	mov	r0, r3
 8003f14:	f00d fd28 	bl	8011968 <osSemaphoreAcquire>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d119      	bne.n	8003f52 <HAL_UART_RxCpltCallback+0x17e>
				if (xbee_rx_buffer.checksum == uart_rx_buffer[0]) {
 8003f1e:	4b18      	ldr	r3, [pc, #96]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003f20:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8003f24:	4b17      	ldr	r3, [pc, #92]	; (8003f84 <HAL_UART_RxCpltCallback+0x1b0>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d106      	bne.n	8003f3c <HAL_UART_RxCpltCallback+0x168>
					osEventFlagsSet(EventReceiveHandle,
 8003f2e:	4b18      	ldr	r3, [pc, #96]	; (8003f90 <HAL_UART_RxCpltCallback+0x1bc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2109      	movs	r1, #9
 8003f34:	4618      	mov	r0, r3
 8003f36:	f00d fbe3 	bl	8011700 <osEventFlagsSet>
 8003f3a:	e005      	b.n	8003f48 <HAL_UART_RxCpltCallback+0x174>
							EVENT_RECEIVE_XBEE | EVENT_RECEIVE_SUCCESS);
				} else {
					osEventFlagsSet(EventReceiveHandle,
 8003f3c:	4b14      	ldr	r3, [pc, #80]	; (8003f90 <HAL_UART_RxCpltCallback+0x1bc>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	210a      	movs	r1, #10
 8003f42:	4618      	mov	r0, r3
 8003f44:	f00d fbdc 	bl	8011700 <osEventFlagsSet>
							EVENT_RECEIVE_XBEE | EVENT_RECEIVE_FAIL);
				}
				osSemaphoreRelease(ReceiveSemaphoreHandle);
 8003f48:	4b10      	ldr	r3, [pc, #64]	; (8003f8c <HAL_UART_RxCpltCallback+0x1b8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f00d fd5d 	bl	8011a0c <osSemaphoreRelease>
			}
  		xbee_rx_buffer.isReceiving = FALSE;
 8003f52:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	701a      	strb	r2, [r3, #0]
  	}

  	++xbee_rx_buffer.pos;
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003f5a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003f5e:	3301      	adds	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <HAL_UART_RxCpltCallback+0x1ac>)
 8003f64:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
  	HAL_UART_Receive_IT(&huart3, uart_rx_buffer, sizeof(uart_rx_buffer));
 8003f68:	2201      	movs	r2, #1
 8003f6a:	4906      	ldr	r1, [pc, #24]	; (8003f84 <HAL_UART_RxCpltCallback+0x1b0>)
 8003f6c:	4806      	ldr	r0, [pc, #24]	; (8003f88 <HAL_UART_RxCpltCallback+0x1b4>)
 8003f6e:	f007 ffda 	bl	800bf26 <HAL_UART_Receive_IT>
  }
}
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40004800 	.word	0x40004800
 8003f7c:	2000047c 	.word	0x2000047c
 8003f80:	20000480 	.word	0x20000480
 8003f84:	20000478 	.word	0x20000478
 8003f88:	20000800 	.word	0x20000800
 8003f8c:	200003d8 	.word	0x200003d8
 8003f90:	200003e4 	.word	0x200003e4

08003f94 <_BMP390_Init>:

static void _BMP390_Init(void){
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
	BMP390_AssignI2C(&hi2c1);
 8003f98:	4803      	ldr	r0, [pc, #12]	; (8003fa8 <_BMP390_Init+0x14>)
 8003f9a:	f7ff f8ef 	bl	800317c <BMP390_AssignI2C>
	BMP390_Init();
 8003f9e:	f7ff f853 	bl	8003048 <BMP390_Init>
}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000664 	.word	0x20000664

08003fac <_BNO055_Init>:
static void _BNO055_Init(void){
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
	bno055_assignI2C(&hi2c1);
 8003fb0:	4804      	ldr	r0, [pc, #16]	; (8003fc4 <_BNO055_Init+0x18>)
 8003fb2:	f7ff fb69 	bl	8003688 <bno055_assignI2C>
	bno055_setup();
 8003fb6:	f7ff f931 	bl	800321c <bno055_setup>
	bno055_setOperationModeNDOF();
 8003fba:	f7ff f91c 	bl	80031f6 <bno055_setOperationModeNDOF>
}
 8003fbe:	bf00      	nop
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000664 	.word	0x20000664

08003fc8 <_SD_Init>:
static void _SD_Init(void){
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
	SD_Assign(&hspi2);
 8003fcc:	480a      	ldr	r0, [pc, #40]	; (8003ff8 <_SD_Init+0x30>)
 8003fce:	f7ff fc85 	bl	80038dc <SD_Assign>
	retUSER = f_mount(&USERFatFS, USERPath, 1);
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	4909      	ldr	r1, [pc, #36]	; (8003ffc <_SD_Init+0x34>)
 8003fd6:	480a      	ldr	r0, [pc, #40]	; (8004000 <_SD_Init+0x38>)
 8003fd8:	f00d f852 	bl	8011080 <f_mount>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	461a      	mov	r2, r3
 8003fe0:	4b08      	ldr	r3, [pc, #32]	; (8004004 <_SD_Init+0x3c>)
 8003fe2:	701a      	strb	r2, [r3, #0]
	if ( retUSER != FR_OK ) {
 8003fe4:	4b07      	ldr	r3, [pc, #28]	; (8004004 <_SD_Init+0x3c>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <_SD_Init+0x2a>
		loge("SD Init Fail");
 8003fec:	4806      	ldr	r0, [pc, #24]	; (8004008 <_SD_Init+0x40>)
 8003fee:	f7ff fe0d 	bl	8003c0c <loge>
	}
}
 8003ff2:	bf00      	nop
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	200006d8 	.word	0x200006d8
 8003ffc:	20000870 	.word	0x20000870
 8004000:	20000874 	.word	0x20000874
 8004004:	2000086c 	.word	0x2000086c
 8004008:	0801982c 	.word	0x0801982c

0800400c <_Servo_Init>:
static void _Servo_Init(void){
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
	Servo_Attach(&hservo1, &htim3, TIM_CHANNEL_1);
 8004010:	2200      	movs	r2, #0
 8004012:	490e      	ldr	r1, [pc, #56]	; (800404c <_Servo_Init+0x40>)
 8004014:	480e      	ldr	r0, [pc, #56]	; (8004050 <_Servo_Init+0x44>)
 8004016:	f7ff fd29 	bl	8003a6c <Servo_Attach>
	Servo_Attach(&hservo2, &htim3, TIM_CHANNEL_2);
 800401a:	2204      	movs	r2, #4
 800401c:	490b      	ldr	r1, [pc, #44]	; (800404c <_Servo_Init+0x40>)
 800401e:	480d      	ldr	r0, [pc, #52]	; (8004054 <_Servo_Init+0x48>)
 8004020:	f7ff fd24 	bl	8003a6c <Servo_Attach>
	Servo_Attach(&hservo3, &htim3, TIM_CHANNEL_3);
 8004024:	2208      	movs	r2, #8
 8004026:	4909      	ldr	r1, [pc, #36]	; (800404c <_Servo_Init+0x40>)
 8004028:	480b      	ldr	r0, [pc, #44]	; (8004058 <_Servo_Init+0x4c>)
 800402a:	f7ff fd1f 	bl	8003a6c <Servo_Attach>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 800402e:	2100      	movs	r1, #0
 8004030:	4806      	ldr	r0, [pc, #24]	; (800404c <_Servo_Init+0x40>)
 8004032:	f006 ff29 	bl	800ae88 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8004036:	2104      	movs	r1, #4
 8004038:	4804      	ldr	r0, [pc, #16]	; (800404c <_Servo_Init+0x40>)
 800403a:	f006 ff25 	bl	800ae88 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 800403e:	2108      	movs	r1, #8
 8004040:	4802      	ldr	r0, [pc, #8]	; (800404c <_Servo_Init+0x40>)
 8004042:	f006 ff21 	bl	800ae88 <HAL_TIM_PWM_Start_IT>
}
 8004046:	bf00      	nop
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000730 	.word	0x20000730
 8004050:	200003e8 	.word	0x200003e8
 8004054:	200003f0 	.word	0x200003f0
 8004058:	200003f8 	.word	0x200003f8

0800405c <vMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vMainTask */
void vMainTask(void *argument)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8004064:	f011 f95a 	bl	801531c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8004068:	2200      	movs	r2, #0
 800406a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800406e:	480a      	ldr	r0, [pc, #40]	; (8004098 <vMainTask+0x3c>)
 8004070:	f002 fa62 	bl	8006538 <HAL_GPIO_WritePin>
  osDelay(100);
 8004074:	2064      	movs	r0, #100	; 0x64
 8004076:	f00d fa29 	bl	80114cc <osDelay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800407a:	2201      	movs	r2, #1
 800407c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004080:	4805      	ldr	r0, [pc, #20]	; (8004098 <vMainTask+0x3c>)
 8004082:	f002 fa59 	bl	8006538 <HAL_GPIO_WritePin>
  //HAL_UART_Receive_IT(&huart3, (uint8_t *) buffer, sizeof(buffer));
  //uint8_t data[]= {0x7E, 0x00, 0x0A, 0x01, 0x01, 0xCC, 0xCC, 0x00, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x71};

  for(;;)
  {
    osDelay(1000);
 8004086:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800408a:	f00d fa1f 	bl	80114cc <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800408e:	2120      	movs	r1, #32
 8004090:	4801      	ldr	r0, [pc, #4]	; (8004098 <vMainTask+0x3c>)
 8004092:	f002 fa6a 	bl	800656a <HAL_GPIO_TogglePin>
    osDelay(1000);
 8004096:	e7f6      	b.n	8004086 <vMainTask+0x2a>
 8004098:	40020000 	.word	0x40020000

0800409c <vGPSTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vGPSTask */
void vGPSTask(void *argument)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  		IH_UART1_headerPass = 0;
  		IH_UART1_pMessage = 0;
  	}
  	HAL_UART_Receive_IT(&huart1, &IH_UART1_byteBuf, sizeof(IH_UART1_byteBuf));
  	*/
  	osDelay(1);
 80040a4:	2001      	movs	r0, #1
 80040a6:	f00d fa11 	bl	80114cc <osDelay>
 80040aa:	e7fb      	b.n	80040a4 <vGPSTask+0x8>

080040ac <vStateManagingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStateManagingTask */
void vStateManagingTask(void *argument)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStateManagingTask */
  /* Infinite loop */
  for(;;)
  {
  	osDelay(100);
 80040b4:	2064      	movs	r0, #100	; 0x64
 80040b6:	f00d fa09 	bl	80114cc <osDelay>
 80040ba:	e7fb      	b.n	80040b4 <vStateManagingTask+0x8>

080040bc <vReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vReceiveTask */
void vReceiveTask(void *argument)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b0a4      	sub	sp, #144	; 0x90
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vReceiveTask */
  /* Infinite loop */
	uint32_t event_flag;
	uint8_t message[RECEIVE_BUFFER_SIZE];
	uint16_t messageSize = 0;
 80040c4:	2300      	movs	r3, #0
 80040c6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

	HAL_UART_Receive_IT(&huart3, uart_rx_buffer, sizeof(uart_rx_buffer));
 80040ca:	2201      	movs	r2, #1
 80040cc:	4929      	ldr	r1, [pc, #164]	; (8004174 <vReceiveTask+0xb8>)
 80040ce:	482a      	ldr	r0, [pc, #168]	; (8004178 <vReceiveTask+0xbc>)
 80040d0:	f007 ff29 	bl	800bf26 <HAL_UART_Receive_IT>
  for(;;)
  {
  	event_flag = osEventFlagsWait(EventReceiveHandle, EVENT_RECEIVE_XBEE, osFlagsWaitAny, osWaitForever);
 80040d4:	4b29      	ldr	r3, [pc, #164]	; (800417c <vReceiveTask+0xc0>)
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	f04f 33ff 	mov.w	r3, #4294967295
 80040dc:	2200      	movs	r2, #0
 80040de:	2108      	movs	r1, #8
 80040e0:	f00d fb52 	bl	8011788 <osEventFlagsWait>
 80040e4:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

  	if(!(event_flag & EVENT_RECEIVE_XBEE)) { return; }
 80040e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d038      	beq.n	8004166 <vReceiveTask+0xaa>
  	if((event_flag & EVENT_RECEIVE_SUCCESS)) {
 80040f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d02e      	beq.n	800415e <vReceiveTask+0xa2>
  		if(xbee_rx_buffer.length < 5) { return; }
 8004100:	4b1f      	ldr	r3, [pc, #124]	; (8004180 <vReceiveTask+0xc4>)
 8004102:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8004106:	2b04      	cmp	r3, #4
 8004108:	d92f      	bls.n	800416a <vReceiveTask+0xae>
  		osSemaphoreAcquire(ReceiveSemaphoreHandle, osWaitForever);
 800410a:	4b1e      	ldr	r3, [pc, #120]	; (8004184 <vReceiveTask+0xc8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f04f 31ff 	mov.w	r1, #4294967295
 8004112:	4618      	mov	r0, r3
 8004114:	f00d fc28 	bl	8011968 <osSemaphoreAcquire>
  		memset(message, 0, sizeof(message));
 8004118:	f107 0308 	add.w	r3, r7, #8
 800411c:	2280      	movs	r2, #128	; 0x80
 800411e:	2100      	movs	r1, #0
 8004120:	4618      	mov	r0, r3
 8004122:	f011 fff3 	bl	801610c <memset>
  		memcpy(message, xbee_rx_buffer.buffer+5, xbee_rx_buffer.length-5);
 8004126:	4918      	ldr	r1, [pc, #96]	; (8004188 <vReceiveTask+0xcc>)
 8004128:	4b15      	ldr	r3, [pc, #84]	; (8004180 <vReceiveTask+0xc4>)
 800412a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800412e:	3b05      	subs	r3, #5
 8004130:	461a      	mov	r2, r3
 8004132:	f107 0308 	add.w	r3, r7, #8
 8004136:	4618      	mov	r0, r3
 8004138:	f011 ffda 	bl	80160f0 <memcpy>
  		messageSize = xbee_rx_buffer.length-5;
 800413c:	4b10      	ldr	r3, [pc, #64]	; (8004180 <vReceiveTask+0xc4>)
 800413e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8004142:	3b05      	subs	r3, #5
 8004144:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  		osSemaphoreRelease(ReceiveSemaphoreHandle);
 8004148:	4b0e      	ldr	r3, [pc, #56]	; (8004184 <vReceiveTask+0xc8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f00d fc5d 	bl	8011a0c <osSemaphoreRelease>
  		logd("message:%s",message);
 8004152:	f107 0308 	add.w	r3, r7, #8
 8004156:	4619      	mov	r1, r3
 8004158:	480c      	ldr	r0, [pc, #48]	; (800418c <vReceiveTask+0xd0>)
 800415a:	f7ff fd41 	bl	8003be0 <logd>
  	} else {
  		// fail
  	}
  	osDelay(1);
 800415e:	2001      	movs	r0, #1
 8004160:	f00d f9b4 	bl	80114cc <osDelay>
  	event_flag = osEventFlagsWait(EventReceiveHandle, EVENT_RECEIVE_XBEE, osFlagsWaitAny, osWaitForever);
 8004164:	e7b6      	b.n	80040d4 <vReceiveTask+0x18>
  	if(!(event_flag & EVENT_RECEIVE_XBEE)) { return; }
 8004166:	bf00      	nop
 8004168:	e000      	b.n	800416c <vReceiveTask+0xb0>
  		if(xbee_rx_buffer.length < 5) { return; }
 800416a:	bf00      	nop
  }
  /* USER CODE END vReceiveTask */
}
 800416c:	3790      	adds	r7, #144	; 0x90
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000478 	.word	0x20000478
 8004178:	20000800 	.word	0x20000800
 800417c:	200003e4 	.word	0x200003e4
 8004180:	20000480 	.word	0x20000480
 8004184:	200003d8 	.word	0x200003d8
 8004188:	20000487 	.word	0x20000487
 800418c:	0801983c 	.word	0x0801983c

08004190 <vDebugTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vDebugTask */
void vDebugTask(void *argument)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vDebugTask */
  /* Infinite loop */
	uint32_t event_flag;
	uint32_t buffer;
	uint16_t cmd = 0;
 8004198:	2300      	movs	r3, #0
 800419a:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef status;
	for (;;) {
		event_flag = osEventFlagsWait(EventReceiveHandle, EVENT_RECEIVE_USB, osFlagsWaitAny, osWaitForever);
 800419c:	4b14      	ldr	r3, [pc, #80]	; (80041f0 <vDebugTask+0x60>)
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	f04f 33ff 	mov.w	r3, #4294967295
 80041a4:	2200      	movs	r2, #0
 80041a6:	2104      	movs	r1, #4
 80041a8:	f00d faee 	bl	8011788 <osEventFlagsWait>
 80041ac:	60f8      	str	r0, [r7, #12]
		if (event_flag & EVENT_RECEIVE_USB) {
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d018      	beq.n	80041ea <vDebugTask+0x5a>
			Buzzer_Once();
 80041b8:	f001 f974 	bl	80054a4 <Buzzer_Once>
 80041bc:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <vDebugTask+0x64>)
 80041be:	881b      	ldrh	r3, [r3, #0]
			memcpy(&cmd, usb_rx_buffer.buffer, DEBUG_CMD_SIZE);
 80041c0:	817b      	strh	r3, [r7, #10]
			switch (cmd) {
 80041c2:	897b      	ldrh	r3, [r7, #10]
 80041c4:	461a      	mov	r2, r3
 80041c6:	f647 2362 	movw	r3, #31330	; 0x7a62
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d1e6      	bne.n	800419c <vDebugTask+0xc>
			case DEBUG_CMD_BUZZER:
				logd("Buzzer");
 80041ce:	480a      	ldr	r0, [pc, #40]	; (80041f8 <vDebugTask+0x68>)
 80041d0:	f7ff fd06 	bl	8003be0 <logd>
				osDelay(100);
 80041d4:	2064      	movs	r0, #100	; 0x64
 80041d6:	f00d f979 	bl	80114cc <osDelay>
				Buzzer_Once();
 80041da:	f001 f963 	bl	80054a4 <Buzzer_Once>
				osDelay(100);
 80041de:	2064      	movs	r0, #100	; 0x64
 80041e0:	f00d f974 	bl	80114cc <osDelay>
				Buzzer_Once();
 80041e4:	f001 f95e 	bl	80054a4 <Buzzer_Once>
				break;
 80041e8:	e000      	b.n	80041ec <vDebugTask+0x5c>
						sensor_data.pressure);

				break;
				*/
			}
		}
 80041ea:	bf00      	nop
		event_flag = osEventFlagsWait(EventReceiveHandle, EVENT_RECEIVE_USB, osFlagsWaitAny, osWaitForever);
 80041ec:	e7d6      	b.n	800419c <vDebugTask+0xc>
 80041ee:	bf00      	nop
 80041f0:	200003e4 	.word	0x200003e4
 80041f4:	20000400 	.word	0x20000400
 80041f8:	08019848 	.word	0x08019848
 80041fc:	00000000 	.word	0x00000000

08004200 <vSensorReadingCallback>:
  /* USER CODE END vDebugTask */
}

/* vSensorReadingCallback function */
void vSensorReadingCallback(void *argument)
{
 8004200:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8004204:	b0a7      	sub	sp, #156	; 0x9c
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
	int32_t altitude;
	uint16_t battery_voltage;
	uint16_t air_speed;

	// read bmp390
	BMP390_GetValue(&temperature, &pressure, 50);
 800420a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800420e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004212:	2232      	movs	r2, #50	; 0x32
 8004214:	4618      	mov	r0, r3
 8004216:	f7fe ff75 	bl	8003104 <BMP390_GetValue>

	// read bno055
	bno055vector = bno055_getVectorAccelerometer();
 800421a:	f7ff f96b 	bl	80034f4 <bno055_getVectorAccelerometer>
 800421e:	eeb0 4a40 	vmov.f32	s8, s0
 8004222:	eef0 4a60 	vmov.f32	s9, s1
 8004226:	eeb0 5a41 	vmov.f32	s10, s2
 800422a:	eef0 5a61 	vmov.f32	s11, s3
 800422e:	eeb0 6a42 	vmov.f32	s12, s4
 8004232:	eef0 6a62 	vmov.f32	s13, s5
 8004236:	eeb0 7a43 	vmov.f32	s14, s6
 800423a:	eef0 7a63 	vmov.f32	s15, s7
 800423e:	ed87 4b02 	vstr	d4, [r7, #8]
 8004242:	ed87 5b04 	vstr	d5, [r7, #16]
 8004246:	ed87 6b06 	vstr	d6, [r7, #24]
 800424a:	ed87 7b08 	vstr	d7, [r7, #32]
	acc_x = bno055vector.x;
 800424e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004252:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	acc_y = bno055vector.y;
 8004256:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800425a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	acc_z = bno055vector.z;
 800425e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004262:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	bno055vector = bno055_getVectorGyroscope();
 8004266:	f7ff f9cb 	bl	8003600 <bno055_getVectorGyroscope>
 800426a:	eeb0 4a40 	vmov.f32	s8, s0
 800426e:	eef0 4a60 	vmov.f32	s9, s1
 8004272:	eeb0 5a41 	vmov.f32	s10, s2
 8004276:	eef0 5a61 	vmov.f32	s11, s3
 800427a:	eeb0 6a42 	vmov.f32	s12, s4
 800427e:	eef0 6a62 	vmov.f32	s13, s5
 8004282:	eeb0 7a43 	vmov.f32	s14, s6
 8004286:	eef0 7a63 	vmov.f32	s15, s7
 800428a:	ed87 4b02 	vstr	d4, [r7, #8]
 800428e:	ed87 5b04 	vstr	d5, [r7, #16]
 8004292:	ed87 6b06 	vstr	d6, [r7, #24]
 8004296:	ed87 7b08 	vstr	d7, [r7, #32]
	rot_x = bno055vector.x;
 800429a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800429e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	rot_y = bno055vector.y;
 80042a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042a6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	rot_z = bno055vector.z;
 80042aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042ae:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	bno055vector = bno055_getVectorMagnetometer();
 80042b2:	f7ff f962 	bl	800357a <bno055_getVectorMagnetometer>
 80042b6:	eeb0 4a40 	vmov.f32	s8, s0
 80042ba:	eef0 4a60 	vmov.f32	s9, s1
 80042be:	eeb0 5a41 	vmov.f32	s10, s2
 80042c2:	eef0 5a61 	vmov.f32	s11, s3
 80042c6:	eeb0 6a42 	vmov.f32	s12, s4
 80042ca:	eef0 6a62 	vmov.f32	s13, s5
 80042ce:	eeb0 7a43 	vmov.f32	s14, s6
 80042d2:	eef0 7a63 	vmov.f32	s15, s7
 80042d6:	ed87 4b02 	vstr	d4, [r7, #8]
 80042da:	ed87 5b04 	vstr	d5, [r7, #16]
 80042de:	ed87 6b06 	vstr	d6, [r7, #24]
 80042e2:	ed87 7b08 	vstr	d7, [r7, #32]
	mag_x = bno055vector.x;
 80042e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042ea:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	mag_y = bno055vector.y;
 80042ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042f2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	mag_z = bno055vector.z;
 80042f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042fa:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	// read ADC1 CH0
	HAL_ADC_Start(&hadc1);
 80042fe:	4874      	ldr	r0, [pc, #464]	; (80044d0 <vSensorReadingCallback+0x2d0>)
 8004300:	f001 fa7a 	bl	80057f8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 8004304:	2132      	movs	r1, #50	; 0x32
 8004306:	4872      	ldr	r0, [pc, #456]	; (80044d0 <vSensorReadingCallback+0x2d0>)
 8004308:	f001 fb48 	bl	800599c <HAL_ADC_PollForConversion>
	ADC1_CH0 = HAL_ADC_GetValue(&hadc1);
 800430c:	4870      	ldr	r0, [pc, #448]	; (80044d0 <vSensorReadingCallback+0x2d0>)
 800430e:	f001 fbd0 	bl	8005ab2 <HAL_ADC_GetValue>
 8004312:	4603      	mov	r3, r0
 8004314:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	// read ADC1 CH1
	HAL_ADC_Start(&hadc1);
 8004318:	486d      	ldr	r0, [pc, #436]	; (80044d0 <vSensorReadingCallback+0x2d0>)
 800431a:	f001 fa6d 	bl	80057f8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 800431e:	2132      	movs	r1, #50	; 0x32
 8004320:	486b      	ldr	r0, [pc, #428]	; (80044d0 <vSensorReadingCallback+0x2d0>)
 8004322:	f001 fb3b 	bl	800599c <HAL_ADC_PollForConversion>
	ADC1_CH1 = HAL_ADC_GetValue(&hadc1);
 8004326:	486a      	ldr	r0, [pc, #424]	; (80044d0 <vSensorReadingCallback+0x2d0>)
 8004328:	f001 fbc3 	bl	8005ab2 <HAL_ADC_GetValue>
 800432c:	4603      	mov	r3, r0
 800432e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  	 * T1: temperature, sea level
  	 */
  //ToDo: get sea level pressure (calibrated)from RTC backup register
//  double pressure_sea_level = 101325*100;
//  double pressure_ratio = pressure / pressure_sea_level;
  double pressure_ratio = pressure * 9.869232667160128e-4;
 8004332:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004336:	4610      	mov	r0, r2
 8004338:	4619      	mov	r1, r3
 800433a:	f7fc f947 	bl	80005cc <__aeabi_ul2d>
 800433e:	a35e      	add	r3, pc, #376	; (adr r3, 80044b8 <vSensorReadingCallback+0x2b8>)
 8004340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004344:	f7fc f978 	bl	8000638 <__aeabi_dmul>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  altitude = (powf(pressure_ratio, ALTITUDE_POWER_COEFFICIENT) - 1) * ALTITUDE_PRODUCT_COEFFICIENT * 100;
 8004350:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004354:	f7fc fc68 	bl	8000c28 <__aeabi_d2f>
 8004358:	4603      	mov	r3, r0
 800435a:	eddf 0a5e 	vldr	s1, [pc, #376]	; 80044d4 <vSensorReadingCallback+0x2d4>
 800435e:	ee00 3a10 	vmov	s0, r3
 8004362:	f014 fc21 	bl	8018ba8 <powf>
 8004366:	eef0 7a40 	vmov.f32	s15, s0
 800436a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800436e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004372:	ee17 0a90 	vmov	r0, s15
 8004376:	f7fc f907 	bl	8000588 <__aeabi_f2d>
 800437a:	a351      	add	r3, pc, #324	; (adr r3, 80044c0 <vSensorReadingCallback+0x2c0>)
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f7fc f95a 	bl	8000638 <__aeabi_dmul>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4610      	mov	r0, r2
 800438a:	4619      	mov	r1, r3
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	4b51      	ldr	r3, [pc, #324]	; (80044d8 <vSensorReadingCallback+0x2d8>)
 8004392:	f7fc f951 	bl	8000638 <__aeabi_dmul>
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4610      	mov	r0, r2
 800439c:	4619      	mov	r1, r3
 800439e:	f7fc fbfb 	bl	8000b98 <__aeabi_d2iz>
 80043a2:	4603      	mov	r3, r0
 80043a4:	63fb      	str	r3, [r7, #60]	; 0x3c

	// calculate battery voltage
  //battery_voltage = ADC1_CH0 / 4015 * 3.3 * 1.5 * 100;
  battery_voltage = ADC1_CH0 * 0.123287671232877;
 80043a6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fc f8da 	bl	8000564 <__aeabi_i2d>
 80043b0:	a345      	add	r3, pc, #276	; (adr r3, 80044c8 <vSensorReadingCallback+0x2c8>)
 80043b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b6:	f7fc f93f 	bl	8000638 <__aeabi_dmul>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	f7fc fc11 	bl	8000be8 <__aeabi_d2uiz>
 80043c6:	4603      	mov	r3, r0
 80043c8:	877b      	strh	r3, [r7, #58]	; 0x3a

	// calculate air speed
  air_speed = DP_calculateAirSpeedComp(ADC1_CH1, pressure / 100.f, temperature / 100.f);
 80043ca:	f8b7 404c 	ldrh.w	r4, [r7, #76]	; 0x4c
 80043ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043d2:	4610      	mov	r0, r2
 80043d4:	4619      	mov	r1, r3
 80043d6:	f7fc fd3f 	bl	8000e58 <__aeabi_ul2f>
 80043da:	ee06 0a90 	vmov	s13, r0
 80043de:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80044dc <vSensorReadingCallback+0x2dc>
 80043e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e6:	ee17 0a10 	vmov	r0, s14
 80043ea:	f7fc f8cd 	bl	8000588 <__aeabi_f2d>
 80043ee:	4680      	mov	r8, r0
 80043f0:	4689      	mov	r9, r1
 80043f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80043f6:	4610      	mov	r0, r2
 80043f8:	4619      	mov	r1, r3
 80043fa:	f7fc fd35 	bl	8000e68 <__aeabi_l2f>
 80043fe:	ee06 0a90 	vmov	s13, r0
 8004402:	eddf 7a36 	vldr	s15, [pc, #216]	; 80044dc <vSensorReadingCallback+0x2dc>
 8004406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800440a:	ee17 0a10 	vmov	r0, s14
 800440e:	f7fc f8bb 	bl	8000588 <__aeabi_f2d>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	ec43 2b11 	vmov	d1, r2, r3
 800441a:	ec49 8b10 	vmov	d0, r8, r9
 800441e:	4620      	mov	r0, r4
 8004420:	f7ff fa6e 	bl	8003900 <DP_calculateAirSpeedComp>
 8004424:	4603      	mov	r3, r0
 8004426:	873b      	strh	r3, [r7, #56]	; 0x38

	// move data to sensor data container
  // ToDo: block other task and move data
  sensor_data_container.pressure = pressure;
 8004428:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800442c:	492c      	ldr	r1, [pc, #176]	; (80044e0 <vSensorReadingCallback+0x2e0>)
 800442e:	e9c1 2304 	strd	r2, r3, [r1, #16]
  sensor_data_container.temperature = temperature;
 8004432:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004436:	492a      	ldr	r1, [pc, #168]	; (80044e0 <vSensorReadingCallback+0x2e0>)
 8004438:	e9c1 2302 	strd	r2, r3, [r1, #8]
  sensor_data_container.acc_x = acc_x;
 800443c:	4928      	ldr	r1, [pc, #160]	; (80044e0 <vSensorReadingCallback+0x2e0>)
 800443e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004442:	e9c1 2306 	strd	r2, r3, [r1, #24]
  sensor_data_container.acc_y = acc_y;
 8004446:	4926      	ldr	r1, [pc, #152]	; (80044e0 <vSensorReadingCallback+0x2e0>)
 8004448:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800444c:	e9c1 2308 	strd	r2, r3, [r1, #32]
  sensor_data_container.acc_z = acc_z;
 8004450:	4923      	ldr	r1, [pc, #140]	; (80044e0 <vSensorReadingCallback+0x2e0>)
 8004452:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004456:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  sensor_data_container.rot_x = rot_x;
 800445a:	4921      	ldr	r1, [pc, #132]	; (80044e0 <vSensorReadingCallback+0x2e0>)
 800445c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004460:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  sensor_data_container.rot_y = rot_y;
 8004464:	491e      	ldr	r1, [pc, #120]	; (80044e0 <vSensorReadingCallback+0x2e0>)
 8004466:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800446a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  sensor_data_container.rot_z = rot_z;
 800446e:	491c      	ldr	r1, [pc, #112]	; (80044e0 <vSensorReadingCallback+0x2e0>)
 8004470:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004474:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  sensor_data_container.mag_x = mag_x;
 8004478:	4919      	ldr	r1, [pc, #100]	; (80044e0 <vSensorReadingCallback+0x2e0>)
 800447a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800447e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  sensor_data_container.mag_y = mag_y;
 8004482:	4917      	ldr	r1, [pc, #92]	; (80044e0 <vSensorReadingCallback+0x2e0>)
 8004484:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004488:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
  sensor_data_container.mag_z = mag_z;
 800448c:	4914      	ldr	r1, [pc, #80]	; (80044e0 <vSensorReadingCallback+0x2e0>)
 800448e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004492:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
  sensor_data_container.altitude = altitude;
 8004496:	4a12      	ldr	r2, [pc, #72]	; (80044e0 <vSensorReadingCallback+0x2e0>)
 8004498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800449a:	6013      	str	r3, [r2, #0]
  sensor_data_container.battery_voltage = battery_voltage;
 800449c:	4a10      	ldr	r2, [pc, #64]	; (80044e0 <vSensorReadingCallback+0x2e0>)
 800449e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80044a0:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
  sensor_data_container.air_speed = air_speed;
 80044a4:	4a0e      	ldr	r2, [pc, #56]	; (80044e0 <vSensorReadingCallback+0x2e0>)
 80044a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80044a8:	f8a2 3062 	strh.w	r3, [r2, #98]	; 0x62

  /* USER CODE END vSensorReadingCallback */
}
 80044ac:	bf00      	nop
 80044ae:	379c      	adds	r7, #156	; 0x9c
 80044b0:	46bd      	mov	sp, r7
 80044b2:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 80044b6:	bf00      	nop
 80044b8:	c9de8608 	.word	0xc9de8608
 80044bc:	3f502b74 	.word	0x3f502b74
 80044c0:	9d89d89d 	.word	0x9d89d89d
 80044c4:	c0e5a558 	.word	0xc0e5a558
 80044c8:	e3f1f911 	.word	0xe3f1f911
 80044cc:	3fbf8fc7 	.word	0x3fbf8fc7
 80044d0:	2000061c 	.word	0x2000061c
 80044d4:	3e42d455 	.word	0x3e42d455
 80044d8:	40590000 	.word	0x40590000
 80044dc:	42c80000 	.word	0x42c80000
 80044e0:	20000410 	.word	0x20000410

080044e4 <vTransmitCallback>:

/* vTransmitCallback function */
void vTransmitCallback(void *argument)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTransmitCallback */
	//logi("transmit");

	telemetry.team_id = 1234;
 80044ec:	4b52      	ldr	r3, [pc, #328]	; (8004638 <vTransmitCallback+0x154>)
 80044ee:	f240 42d2 	movw	r2, #1234	; 0x4d2
 80044f2:	801a      	strh	r2, [r3, #0]
	telemetry.hours = 12;
 80044f4:	4b50      	ldr	r3, [pc, #320]	; (8004638 <vTransmitCallback+0x154>)
 80044f6:	220c      	movs	r2, #12
 80044f8:	709a      	strb	r2, [r3, #2]
	telemetry.minutes = 34;
 80044fa:	4b4f      	ldr	r3, [pc, #316]	; (8004638 <vTransmitCallback+0x154>)
 80044fc:	2222      	movs	r2, #34	; 0x22
 80044fe:	70da      	strb	r2, [r3, #3]
	telemetry.seconds = 56;
 8004500:	4b4d      	ldr	r3, [pc, #308]	; (8004638 <vTransmitCallback+0x154>)
 8004502:	2238      	movs	r2, #56	; 0x38
 8004504:	711a      	strb	r2, [r3, #4]
	telemetry.packet_count = 1;
 8004506:	4b4c      	ldr	r3, [pc, #304]	; (8004638 <vTransmitCallback+0x154>)
 8004508:	2200      	movs	r2, #0
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	715a      	strb	r2, [r3, #5]
 8004510:	2200      	movs	r2, #0
 8004512:	719a      	strb	r2, [r3, #6]
	telemetry.mode = 0;
 8004514:	4b48      	ldr	r3, [pc, #288]	; (8004638 <vTransmitCallback+0x154>)
 8004516:	2200      	movs	r2, #0
 8004518:	71da      	strb	r2, [r3, #7]
	telemetry.state = 1;
 800451a:	4b47      	ldr	r3, [pc, #284]	; (8004638 <vTransmitCallback+0x154>)
 800451c:	2201      	movs	r2, #1
 800451e:	811a      	strh	r2, [r3, #8]
	telemetry.altitude = 100.0f;
 8004520:	4b45      	ldr	r3, [pc, #276]	; (8004638 <vTransmitCallback+0x154>)
 8004522:	4a46      	ldr	r2, [pc, #280]	; (800463c <vTransmitCallback+0x158>)
 8004524:	f8c3 200a 	str.w	r2, [r3, #10]
	telemetry.air_speed = 4.2f;
 8004528:	4b43      	ldr	r3, [pc, #268]	; (8004638 <vTransmitCallback+0x154>)
 800452a:	4a45      	ldr	r2, [pc, #276]	; (8004640 <vTransmitCallback+0x15c>)
 800452c:	f8c3 200e 	str.w	r2, [r3, #14]
	telemetry.heat_shield = 0;
 8004530:	4b41      	ldr	r3, [pc, #260]	; (8004638 <vTransmitCallback+0x154>)
 8004532:	2200      	movs	r2, #0
 8004534:	749a      	strb	r2, [r3, #18]
	telemetry.parachute = 0;
 8004536:	4b40      	ldr	r3, [pc, #256]	; (8004638 <vTransmitCallback+0x154>)
 8004538:	2200      	movs	r2, #0
 800453a:	74da      	strb	r2, [r3, #19]
	telemetry.temperature = 23.5f;
 800453c:	4b3e      	ldr	r3, [pc, #248]	; (8004638 <vTransmitCallback+0x154>)
 800453e:	4a41      	ldr	r2, [pc, #260]	; (8004644 <vTransmitCallback+0x160>)
 8004540:	615a      	str	r2, [r3, #20]
	telemetry.voltage = 3.3f;
 8004542:	4b3d      	ldr	r3, [pc, #244]	; (8004638 <vTransmitCallback+0x154>)
 8004544:	4a40      	ldr	r2, [pc, #256]	; (8004648 <vTransmitCallback+0x164>)
 8004546:	619a      	str	r2, [r3, #24]
	telemetry.pressure = 100.1f;
 8004548:	4b3b      	ldr	r3, [pc, #236]	; (8004638 <vTransmitCallback+0x154>)
 800454a:	4a40      	ldr	r2, [pc, #256]	; (800464c <vTransmitCallback+0x168>)
 800454c:	61da      	str	r2, [r3, #28]
	telemetry.GPS_time = 113456.234f;
 800454e:	4b3a      	ldr	r3, [pc, #232]	; (8004638 <vTransmitCallback+0x154>)
 8004550:	4a3f      	ldr	r2, [pc, #252]	; (8004650 <vTransmitCallback+0x16c>)
 8004552:	621a      	str	r2, [r3, #32]
	telemetry.GPS_altitude = 100.3f;
 8004554:	4b38      	ldr	r3, [pc, #224]	; (8004638 <vTransmitCallback+0x154>)
 8004556:	4a3f      	ldr	r2, [pc, #252]	; (8004654 <vTransmitCallback+0x170>)
 8004558:	625a      	str	r2, [r3, #36]	; 0x24
	telemetry.GPS_latitude = 24.1f;
 800455a:	4b37      	ldr	r3, [pc, #220]	; (8004638 <vTransmitCallback+0x154>)
 800455c:	4a3e      	ldr	r2, [pc, #248]	; (8004658 <vTransmitCallback+0x174>)
 800455e:	629a      	str	r2, [r3, #40]	; 0x28
	telemetry.GPS_longitude = 26.2f;
 8004560:	4b35      	ldr	r3, [pc, #212]	; (8004638 <vTransmitCallback+0x154>)
 8004562:	4a3e      	ldr	r2, [pc, #248]	; (800465c <vTransmitCallback+0x178>)
 8004564:	62da      	str	r2, [r3, #44]	; 0x2c
	telemetry.GPS_sats = 7;
 8004566:	4b34      	ldr	r3, [pc, #208]	; (8004638 <vTransmitCallback+0x154>)
 8004568:	2207      	movs	r2, #7
 800456a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	telemetry.tilt_x = 32.0f;
 800456e:	4b32      	ldr	r3, [pc, #200]	; (8004638 <vTransmitCallback+0x154>)
 8004570:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8004574:	f8c3 2031 	str.w	r2, [r3, #49]	; 0x31
	telemetry.tilt_y = 12.2f;
 8004578:	4b2f      	ldr	r3, [pc, #188]	; (8004638 <vTransmitCallback+0x154>)
 800457a:	4a39      	ldr	r2, [pc, #228]	; (8004660 <vTransmitCallback+0x17c>)
 800457c:	f8c3 2035 	str.w	r2, [r3, #53]	; 0x35
	telemetry.rot_z = 1.8f;
 8004580:	4b2d      	ldr	r3, [pc, #180]	; (8004638 <vTransmitCallback+0x154>)
 8004582:	4a38      	ldr	r2, [pc, #224]	; (8004664 <vTransmitCallback+0x180>)
 8004584:	f8c3 2039 	str.w	r2, [r3, #57]	; 0x39
	strcpy(telemetry.cmd_echo, "Hello");
 8004588:	4b37      	ldr	r3, [pc, #220]	; (8004668 <vTransmitCallback+0x184>)
 800458a:	4a38      	ldr	r2, [pc, #224]	; (800466c <vTransmitCallback+0x188>)
 800458c:	6810      	ldr	r0, [r2, #0]
 800458e:	6018      	str	r0, [r3, #0]
 8004590:	8892      	ldrh	r2, [r2, #4]
 8004592:	809a      	strh	r2, [r3, #4]

	packet[0] = 0x7E;
 8004594:	4b36      	ldr	r3, [pc, #216]	; (8004670 <vTransmitCallback+0x18c>)
 8004596:	227e      	movs	r2, #126	; 0x7e
 8004598:	701a      	strb	r2, [r3, #0]

	uint16_t length = TELEMETRY_PACKET_SIZE-4;
 800459a:	234c      	movs	r3, #76	; 0x4c
 800459c:	817b      	strh	r3, [r7, #10]
	packet[1] = length >> 8;
 800459e:	897b      	ldrh	r3, [r7, #10]
 80045a0:	0a1b      	lsrs	r3, r3, #8
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	4b32      	ldr	r3, [pc, #200]	; (8004670 <vTransmitCallback+0x18c>)
 80045a8:	705a      	strb	r2, [r3, #1]
	packet[2] = (uint8_t) length;
 80045aa:	897b      	ldrh	r3, [r7, #10]
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	4b30      	ldr	r3, [pc, #192]	; (8004670 <vTransmitCallback+0x18c>)
 80045b0:	709a      	strb	r2, [r3, #2]
	packet[3] = FRAME_TX;
 80045b2:	4b2f      	ldr	r3, [pc, #188]	; (8004670 <vTransmitCallback+0x18c>)
 80045b4:	2201      	movs	r2, #1
 80045b6:	70da      	strb	r2, [r3, #3]
	packet[4] = 0x01;
 80045b8:	4b2d      	ldr	r3, [pc, #180]	; (8004670 <vTransmitCallback+0x18c>)
 80045ba:	2201      	movs	r2, #1
 80045bc:	711a      	strb	r2, [r3, #4]
	packet[5] = FRAME_ADDRESS_HIGH;
 80045be:	4b2c      	ldr	r3, [pc, #176]	; (8004670 <vTransmitCallback+0x18c>)
 80045c0:	22cc      	movs	r2, #204	; 0xcc
 80045c2:	715a      	strb	r2, [r3, #5]
	packet[6] = FRAME_ADDRESS_LOW;
 80045c4:	4b2a      	ldr	r3, [pc, #168]	; (8004670 <vTransmitCallback+0x18c>)
 80045c6:	22cc      	movs	r2, #204	; 0xcc
 80045c8:	719a      	strb	r2, [r3, #6]
	packet[7] = 0;
 80045ca:	4b29      	ldr	r3, [pc, #164]	; (8004670 <vTransmitCallback+0x18c>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	71da      	strb	r2, [r3, #7]
	memcpy(&packet[8], &telemetry, sizeof(telemetry));
 80045d0:	4b27      	ldr	r3, [pc, #156]	; (8004670 <vTransmitCallback+0x18c>)
 80045d2:	4a19      	ldr	r2, [pc, #100]	; (8004638 <vTransmitCallback+0x154>)
 80045d4:	3308      	adds	r3, #8
 80045d6:	4611      	mov	r1, r2
 80045d8:	2247      	movs	r2, #71	; 0x47
 80045da:	4618      	mov	r0, r3
 80045dc:	f011 fd88 	bl	80160f0 <memcpy>

	uint16_t checksum = 0;
 80045e0:	2300      	movs	r3, #0
 80045e2:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 3; i < TELEMETRY_PACKET_SIZE-1; i++) {
 80045e4:	2303      	movs	r3, #3
 80045e6:	737b      	strb	r3, [r7, #13]
 80045e8:	e009      	b.n	80045fe <vTransmitCallback+0x11a>
		checksum += packet[i];
 80045ea:	7b7b      	ldrb	r3, [r7, #13]
 80045ec:	4a20      	ldr	r2, [pc, #128]	; (8004670 <vTransmitCallback+0x18c>)
 80045ee:	5cd3      	ldrb	r3, [r2, r3]
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	89fb      	ldrh	r3, [r7, #14]
 80045f4:	4413      	add	r3, r2
 80045f6:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 3; i < TELEMETRY_PACKET_SIZE-1; i++) {
 80045f8:	7b7b      	ldrb	r3, [r7, #13]
 80045fa:	3301      	adds	r3, #1
 80045fc:	737b      	strb	r3, [r7, #13]
 80045fe:	7b7b      	ldrb	r3, [r7, #13]
 8004600:	2b4e      	cmp	r3, #78	; 0x4e
 8004602:	d9f2      	bls.n	80045ea <vTransmitCallback+0x106>
	}
	checksum = 0xFF - ((uint8_t) checksum);
 8004604:	89fb      	ldrh	r3, [r7, #14]
 8004606:	b2db      	uxtb	r3, r3
 8004608:	b29b      	uxth	r3, r3
 800460a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800460e:	81fb      	strh	r3, [r7, #14]
	packet[TELEMETRY_PACKET_SIZE-1] = checksum;
 8004610:	89fb      	ldrh	r3, [r7, #14]
 8004612:	b2da      	uxtb	r2, r3
 8004614:	4b16      	ldr	r3, [pc, #88]	; (8004670 <vTransmitCallback+0x18c>)
 8004616:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f

	HAL_UART_Transmit(&huart3, &packet, sizeof(packet), 10);
 800461a:	230a      	movs	r3, #10
 800461c:	2280      	movs	r2, #128	; 0x80
 800461e:	4914      	ldr	r1, [pc, #80]	; (8004670 <vTransmitCallback+0x18c>)
 8004620:	4814      	ldr	r0, [pc, #80]	; (8004674 <vTransmitCallback+0x190>)
 8004622:	f007 fbee 	bl	800be02 <HAL_UART_Transmit>
	logd("Telemetry size:%d",sizeof(telemetry));
 8004626:	2147      	movs	r1, #71	; 0x47
 8004628:	4813      	ldr	r0, [pc, #76]	; (8004678 <vTransmitCallback+0x194>)
 800462a:	f7ff fad9 	bl	8003be0 <logd>
  /* USER CODE END vTransmitCallback */
}
 800462e:	bf00      	nop
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	20000588 	.word	0x20000588
 800463c:	42c80000 	.word	0x42c80000
 8004640:	40866666 	.word	0x40866666
 8004644:	41bc0000 	.word	0x41bc0000
 8004648:	40533333 	.word	0x40533333
 800464c:	42c83333 	.word	0x42c83333
 8004650:	47dd981e 	.word	0x47dd981e
 8004654:	42c8999a 	.word	0x42c8999a
 8004658:	41c0cccd 	.word	0x41c0cccd
 800465c:	41d1999a 	.word	0x41d1999a
 8004660:	41433333 	.word	0x41433333
 8004664:	3fe66666 	.word	0x3fe66666
 8004668:	200005c5 	.word	0x200005c5
 800466c:	08019850 	.word	0x08019850
 8004670:	20000508 	.word	0x20000508
 8004674:	20000800 	.word	0x20000800
 8004678:	08019858 	.word	0x08019858

0800467c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a04      	ldr	r2, [pc, #16]	; (800469c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d101      	bne.n	8004692 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800468e:	f001 f82b 	bl	80056e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004692:	bf00      	nop
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40001000 	.word	0x40001000

080046a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  printf("Error_Handler\r\n");
 80046a4:	4803      	ldr	r0, [pc, #12]	; (80046b4 <Error_Handler+0x14>)
 80046a6:	f012 fb09 	bl	8016cbc <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046aa:	b672      	cpsid	i
}
 80046ac:	bf00      	nop
  __disable_irq();

  while (1)
  {
	  break;
 80046ae:	bf00      	nop
  }
  /* USER CODE END Error_Handler_Debug */
}
 80046b0:	bf00      	nop
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	0801986c 	.word	0x0801986c

080046b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046be:	2300      	movs	r3, #0
 80046c0:	607b      	str	r3, [r7, #4]
 80046c2:	4b12      	ldr	r3, [pc, #72]	; (800470c <HAL_MspInit+0x54>)
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	4a11      	ldr	r2, [pc, #68]	; (800470c <HAL_MspInit+0x54>)
 80046c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046cc:	6453      	str	r3, [r2, #68]	; 0x44
 80046ce:	4b0f      	ldr	r3, [pc, #60]	; (800470c <HAL_MspInit+0x54>)
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d6:	607b      	str	r3, [r7, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046da:	2300      	movs	r3, #0
 80046dc:	603b      	str	r3, [r7, #0]
 80046de:	4b0b      	ldr	r3, [pc, #44]	; (800470c <HAL_MspInit+0x54>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	4a0a      	ldr	r2, [pc, #40]	; (800470c <HAL_MspInit+0x54>)
 80046e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ea:	4b08      	ldr	r3, [pc, #32]	; (800470c <HAL_MspInit+0x54>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80046f6:	2200      	movs	r2, #0
 80046f8:	210f      	movs	r1, #15
 80046fa:	f06f 0001 	mvn.w	r0, #1
 80046fe:	f001 fccb 	bl	8006098 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004702:	bf00      	nop
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	40023800 	.word	0x40023800

08004710 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08a      	sub	sp, #40	; 0x28
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004718:	f107 0314 	add.w	r3, r7, #20
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	605a      	str	r2, [r3, #4]
 8004722:	609a      	str	r2, [r3, #8]
 8004724:	60da      	str	r2, [r3, #12]
 8004726:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a17      	ldr	r2, [pc, #92]	; (800478c <HAL_ADC_MspInit+0x7c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d127      	bne.n	8004782 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004732:	2300      	movs	r3, #0
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	4b16      	ldr	r3, [pc, #88]	; (8004790 <HAL_ADC_MspInit+0x80>)
 8004738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473a:	4a15      	ldr	r2, [pc, #84]	; (8004790 <HAL_ADC_MspInit+0x80>)
 800473c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004740:	6453      	str	r3, [r2, #68]	; 0x44
 8004742:	4b13      	ldr	r3, [pc, #76]	; (8004790 <HAL_ADC_MspInit+0x80>)
 8004744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	4b0f      	ldr	r3, [pc, #60]	; (8004790 <HAL_ADC_MspInit+0x80>)
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	4a0e      	ldr	r2, [pc, #56]	; (8004790 <HAL_ADC_MspInit+0x80>)
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	6313      	str	r3, [r2, #48]	; 0x30
 800475e:	4b0c      	ldr	r3, [pc, #48]	; (8004790 <HAL_ADC_MspInit+0x80>)
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800476a:	2303      	movs	r3, #3
 800476c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800476e:	2303      	movs	r3, #3
 8004770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004772:	2300      	movs	r3, #0
 8004774:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004776:	f107 0314 	add.w	r3, r7, #20
 800477a:	4619      	mov	r1, r3
 800477c:	4805      	ldr	r0, [pc, #20]	; (8004794 <HAL_ADC_MspInit+0x84>)
 800477e:	f001 fd47 	bl	8006210 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004782:	bf00      	nop
 8004784:	3728      	adds	r7, #40	; 0x28
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40012000 	.word	0x40012000
 8004790:	40023800 	.word	0x40023800
 8004794:	40020000 	.word	0x40020000

08004798 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08a      	sub	sp, #40	; 0x28
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a0:	f107 0314 	add.w	r3, r7, #20
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	605a      	str	r2, [r3, #4]
 80047aa:	609a      	str	r2, [r3, #8]
 80047ac:	60da      	str	r2, [r3, #12]
 80047ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a19      	ldr	r2, [pc, #100]	; (800481c <HAL_I2C_MspInit+0x84>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d12c      	bne.n	8004814 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	4b18      	ldr	r3, [pc, #96]	; (8004820 <HAL_I2C_MspInit+0x88>)
 80047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c2:	4a17      	ldr	r2, [pc, #92]	; (8004820 <HAL_I2C_MspInit+0x88>)
 80047c4:	f043 0302 	orr.w	r3, r3, #2
 80047c8:	6313      	str	r3, [r2, #48]	; 0x30
 80047ca:	4b15      	ldr	r3, [pc, #84]	; (8004820 <HAL_I2C_MspInit+0x88>)
 80047cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	613b      	str	r3, [r7, #16]
 80047d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80047d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80047da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047dc:	2312      	movs	r3, #18
 80047de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047e4:	2303      	movs	r3, #3
 80047e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80047e8:	2304      	movs	r3, #4
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ec:	f107 0314 	add.w	r3, r7, #20
 80047f0:	4619      	mov	r1, r3
 80047f2:	480c      	ldr	r0, [pc, #48]	; (8004824 <HAL_I2C_MspInit+0x8c>)
 80047f4:	f001 fd0c 	bl	8006210 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	4b08      	ldr	r3, [pc, #32]	; (8004820 <HAL_I2C_MspInit+0x88>)
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	4a07      	ldr	r2, [pc, #28]	; (8004820 <HAL_I2C_MspInit+0x88>)
 8004802:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004806:	6413      	str	r3, [r2, #64]	; 0x40
 8004808:	4b05      	ldr	r3, [pc, #20]	; (8004820 <HAL_I2C_MspInit+0x88>)
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004814:	bf00      	nop
 8004816:	3728      	adds	r7, #40	; 0x28
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40005400 	.word	0x40005400
 8004820:	40023800 	.word	0x40023800
 8004824:	40020400 	.word	0x40020400

08004828 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b09a      	sub	sp, #104	; 0x68
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004830:	f107 030c 	add.w	r3, r7, #12
 8004834:	225c      	movs	r2, #92	; 0x5c
 8004836:	2100      	movs	r1, #0
 8004838:	4618      	mov	r0, r3
 800483a:	f011 fc67 	bl	801610c <memset>
  if(hrtc->Instance==RTC)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a0c      	ldr	r2, [pc, #48]	; (8004874 <HAL_RTC_MspInit+0x4c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d111      	bne.n	800486c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004848:	2320      	movs	r3, #32
 800484a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800484c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004850:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004852:	f107 030c 	add.w	r3, r7, #12
 8004856:	4618      	mov	r0, r3
 8004858:	f004 ff04 	bl	8009664 <HAL_RCCEx_PeriphCLKConfig>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004862:	f7ff ff1d 	bl	80046a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004866:	4b04      	ldr	r3, [pc, #16]	; (8004878 <HAL_RTC_MspInit+0x50>)
 8004868:	2201      	movs	r2, #1
 800486a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800486c:	bf00      	nop
 800486e:	3768      	adds	r7, #104	; 0x68
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40002800 	.word	0x40002800
 8004878:	42470e3c 	.word	0x42470e3c

0800487c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08a      	sub	sp, #40	; 0x28
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004884:	f107 0314 	add.w	r3, r7, #20
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	605a      	str	r2, [r3, #4]
 800488e:	609a      	str	r2, [r3, #8]
 8004890:	60da      	str	r2, [r3, #12]
 8004892:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a19      	ldr	r2, [pc, #100]	; (8004900 <HAL_SPI_MspInit+0x84>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d12c      	bne.n	80048f8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800489e:	2300      	movs	r3, #0
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	4b18      	ldr	r3, [pc, #96]	; (8004904 <HAL_SPI_MspInit+0x88>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	4a17      	ldr	r2, [pc, #92]	; (8004904 <HAL_SPI_MspInit+0x88>)
 80048a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048ac:	6413      	str	r3, [r2, #64]	; 0x40
 80048ae:	4b15      	ldr	r3, [pc, #84]	; (8004904 <HAL_SPI_MspInit+0x88>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048b6:	613b      	str	r3, [r7, #16]
 80048b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	4b11      	ldr	r3, [pc, #68]	; (8004904 <HAL_SPI_MspInit+0x88>)
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	4a10      	ldr	r2, [pc, #64]	; (8004904 <HAL_SPI_MspInit+0x88>)
 80048c4:	f043 0302 	orr.w	r3, r3, #2
 80048c8:	6313      	str	r3, [r2, #48]	; 0x30
 80048ca:	4b0e      	ldr	r3, [pc, #56]	; (8004904 <HAL_SPI_MspInit+0x88>)
 80048cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80048d6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80048da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048dc:	2302      	movs	r3, #2
 80048de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048e4:	2303      	movs	r3, #3
 80048e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80048e8:	2305      	movs	r3, #5
 80048ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ec:	f107 0314 	add.w	r3, r7, #20
 80048f0:	4619      	mov	r1, r3
 80048f2:	4805      	ldr	r0, [pc, #20]	; (8004908 <HAL_SPI_MspInit+0x8c>)
 80048f4:	f001 fc8c 	bl	8006210 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80048f8:	bf00      	nop
 80048fa:	3728      	adds	r7, #40	; 0x28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40003800 	.word	0x40003800
 8004904:	40023800 	.word	0x40023800
 8004908:	40020400 	.word	0x40020400

0800490c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a0b      	ldr	r2, [pc, #44]	; (8004948 <HAL_TIM_Base_MspInit+0x3c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d10d      	bne.n	800493a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	4b0a      	ldr	r3, [pc, #40]	; (800494c <HAL_TIM_Base_MspInit+0x40>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	4a09      	ldr	r2, [pc, #36]	; (800494c <HAL_TIM_Base_MspInit+0x40>)
 8004928:	f043 0302 	orr.w	r3, r3, #2
 800492c:	6413      	str	r3, [r2, #64]	; 0x40
 800492e:	4b07      	ldr	r3, [pc, #28]	; (800494c <HAL_TIM_Base_MspInit+0x40>)
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800493a:	bf00      	nop
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40000400 	.word	0x40000400
 800494c:	40023800 	.word	0x40023800

08004950 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004958:	f107 030c 	add.w	r3, r7, #12
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	605a      	str	r2, [r3, #4]
 8004962:	609a      	str	r2, [r3, #8]
 8004964:	60da      	str	r2, [r3, #12]
 8004966:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a12      	ldr	r2, [pc, #72]	; (80049b8 <HAL_TIM_MspPostInit+0x68>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d11e      	bne.n	80049b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004972:	2300      	movs	r3, #0
 8004974:	60bb      	str	r3, [r7, #8]
 8004976:	4b11      	ldr	r3, [pc, #68]	; (80049bc <HAL_TIM_MspPostInit+0x6c>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	4a10      	ldr	r2, [pc, #64]	; (80049bc <HAL_TIM_MspPostInit+0x6c>)
 800497c:	f043 0304 	orr.w	r3, r3, #4
 8004980:	6313      	str	r3, [r2, #48]	; 0x30
 8004982:	4b0e      	ldr	r3, [pc, #56]	; (80049bc <HAL_TIM_MspPostInit+0x6c>)
 8004984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	60bb      	str	r3, [r7, #8]
 800498c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800498e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004992:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004994:	2302      	movs	r3, #2
 8004996:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800499c:	2300      	movs	r3, #0
 800499e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80049a0:	2302      	movs	r3, #2
 80049a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049a4:	f107 030c 	add.w	r3, r7, #12
 80049a8:	4619      	mov	r1, r3
 80049aa:	4805      	ldr	r0, [pc, #20]	; (80049c0 <HAL_TIM_MspPostInit+0x70>)
 80049ac:	f001 fc30 	bl	8006210 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80049b0:	bf00      	nop
 80049b2:	3720      	adds	r7, #32
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40000400 	.word	0x40000400
 80049bc:	40023800 	.word	0x40023800
 80049c0:	40020800 	.word	0x40020800

080049c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b08e      	sub	sp, #56	; 0x38
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	605a      	str	r2, [r3, #4]
 80049d6:	609a      	str	r2, [r3, #8]
 80049d8:	60da      	str	r2, [r3, #12]
 80049da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a4f      	ldr	r2, [pc, #316]	; (8004b20 <HAL_UART_MspInit+0x15c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d12c      	bne.n	8004a40 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80049e6:	2300      	movs	r3, #0
 80049e8:	623b      	str	r3, [r7, #32]
 80049ea:	4b4e      	ldr	r3, [pc, #312]	; (8004b24 <HAL_UART_MspInit+0x160>)
 80049ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ee:	4a4d      	ldr	r2, [pc, #308]	; (8004b24 <HAL_UART_MspInit+0x160>)
 80049f0:	f043 0310 	orr.w	r3, r3, #16
 80049f4:	6453      	str	r3, [r2, #68]	; 0x44
 80049f6:	4b4b      	ldr	r3, [pc, #300]	; (8004b24 <HAL_UART_MspInit+0x160>)
 80049f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fa:	f003 0310 	and.w	r3, r3, #16
 80049fe:	623b      	str	r3, [r7, #32]
 8004a00:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a02:	2300      	movs	r3, #0
 8004a04:	61fb      	str	r3, [r7, #28]
 8004a06:	4b47      	ldr	r3, [pc, #284]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	4a46      	ldr	r2, [pc, #280]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004a0c:	f043 0302 	orr.w	r3, r3, #2
 8004a10:	6313      	str	r3, [r2, #48]	; 0x30
 8004a12:	4b44      	ldr	r3, [pc, #272]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	61fb      	str	r3, [r7, #28]
 8004a1c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004a1e:	23c0      	movs	r3, #192	; 0xc0
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a22:	2302      	movs	r3, #2
 8004a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a2e:	2307      	movs	r3, #7
 8004a30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a36:	4619      	mov	r1, r3
 8004a38:	483b      	ldr	r0, [pc, #236]	; (8004b28 <HAL_UART_MspInit+0x164>)
 8004a3a:	f001 fbe9 	bl	8006210 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004a3e:	e06b      	b.n	8004b18 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART2)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a39      	ldr	r2, [pc, #228]	; (8004b2c <HAL_UART_MspInit+0x168>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d12c      	bne.n	8004aa4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61bb      	str	r3, [r7, #24]
 8004a4e:	4b35      	ldr	r3, [pc, #212]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	4a34      	ldr	r2, [pc, #208]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a58:	6413      	str	r3, [r2, #64]	; 0x40
 8004a5a:	4b32      	ldr	r3, [pc, #200]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a62:	61bb      	str	r3, [r7, #24]
 8004a64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a66:	2300      	movs	r3, #0
 8004a68:	617b      	str	r3, [r7, #20]
 8004a6a:	4b2e      	ldr	r3, [pc, #184]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	4a2d      	ldr	r2, [pc, #180]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004a70:	f043 0301 	orr.w	r3, r3, #1
 8004a74:	6313      	str	r3, [r2, #48]	; 0x30
 8004a76:	4b2b      	ldr	r3, [pc, #172]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004a82:	230c      	movs	r3, #12
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a86:	2302      	movs	r3, #2
 8004a88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a92:	2307      	movs	r3, #7
 8004a94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4824      	ldr	r0, [pc, #144]	; (8004b30 <HAL_UART_MspInit+0x16c>)
 8004a9e:	f001 fbb7 	bl	8006210 <HAL_GPIO_Init>
}
 8004aa2:	e039      	b.n	8004b18 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART3)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a22      	ldr	r2, [pc, #136]	; (8004b34 <HAL_UART_MspInit+0x170>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d134      	bne.n	8004b18 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004aae:	2300      	movs	r3, #0
 8004ab0:	613b      	str	r3, [r7, #16]
 8004ab2:	4b1c      	ldr	r3, [pc, #112]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	4a1b      	ldr	r2, [pc, #108]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004abc:	6413      	str	r3, [r2, #64]	; 0x40
 8004abe:	4b19      	ldr	r3, [pc, #100]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	4a14      	ldr	r2, [pc, #80]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004ad4:	f043 0304 	orr.w	r3, r3, #4
 8004ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8004ada:	4b12      	ldr	r3, [pc, #72]	; (8004b24 <HAL_UART_MspInit+0x160>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004ae6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aec:	2302      	movs	r3, #2
 8004aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004af4:	2303      	movs	r3, #3
 8004af6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004af8:	2307      	movs	r3, #7
 8004afa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b00:	4619      	mov	r1, r3
 8004b02:	480d      	ldr	r0, [pc, #52]	; (8004b38 <HAL_UART_MspInit+0x174>)
 8004b04:	f001 fb84 	bl	8006210 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2105      	movs	r1, #5
 8004b0c:	2027      	movs	r0, #39	; 0x27
 8004b0e:	f001 fac3 	bl	8006098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004b12:	2027      	movs	r0, #39	; 0x27
 8004b14:	f001 fadc 	bl	80060d0 <HAL_NVIC_EnableIRQ>
}
 8004b18:	bf00      	nop
 8004b1a:	3738      	adds	r7, #56	; 0x38
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40011000 	.word	0x40011000
 8004b24:	40023800 	.word	0x40023800
 8004b28:	40020400 	.word	0x40020400
 8004b2c:	40004400 	.word	0x40004400
 8004b30:	40020000 	.word	0x40020000
 8004b34:	40004800 	.word	0x40004800
 8004b38:	40020800 	.word	0x40020800

08004b3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08e      	sub	sp, #56	; 0x38
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	4b33      	ldr	r3, [pc, #204]	; (8004c20 <HAL_InitTick+0xe4>)
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	4a32      	ldr	r2, [pc, #200]	; (8004c20 <HAL_InitTick+0xe4>)
 8004b56:	f043 0310 	orr.w	r3, r3, #16
 8004b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8004b5c:	4b30      	ldr	r3, [pc, #192]	; (8004c20 <HAL_InitTick+0xe4>)
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004b68:	f107 0210 	add.w	r2, r7, #16
 8004b6c:	f107 0314 	add.w	r3, r7, #20
 8004b70:	4611      	mov	r1, r2
 8004b72:	4618      	mov	r0, r3
 8004b74:	f004 fd44 	bl	8009600 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d103      	bne.n	8004b8a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004b82:	f004 fd15 	bl	80095b0 <HAL_RCC_GetPCLK1Freq>
 8004b86:	6378      	str	r0, [r7, #52]	; 0x34
 8004b88:	e004      	b.n	8004b94 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004b8a:	f004 fd11 	bl	80095b0 <HAL_RCC_GetPCLK1Freq>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b96:	4a23      	ldr	r2, [pc, #140]	; (8004c24 <HAL_InitTick+0xe8>)
 8004b98:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9c:	0c9b      	lsrs	r3, r3, #18
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004ba2:	4b21      	ldr	r3, [pc, #132]	; (8004c28 <HAL_InitTick+0xec>)
 8004ba4:	4a21      	ldr	r2, [pc, #132]	; (8004c2c <HAL_InitTick+0xf0>)
 8004ba6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004ba8:	4b1f      	ldr	r3, [pc, #124]	; (8004c28 <HAL_InitTick+0xec>)
 8004baa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004bae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004bb0:	4a1d      	ldr	r2, [pc, #116]	; (8004c28 <HAL_InitTick+0xec>)
 8004bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004bb6:	4b1c      	ldr	r3, [pc, #112]	; (8004c28 <HAL_InitTick+0xec>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <HAL_InitTick+0xec>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bc2:	4b19      	ldr	r3, [pc, #100]	; (8004c28 <HAL_InitTick+0xec>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004bc8:	4817      	ldr	r0, [pc, #92]	; (8004c28 <HAL_InitTick+0xec>)
 8004bca:	f006 f844 	bl	800ac56 <HAL_TIM_Base_Init>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004bd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d11b      	bne.n	8004c14 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004bdc:	4812      	ldr	r0, [pc, #72]	; (8004c28 <HAL_InitTick+0xec>)
 8004bde:	f006 f889 	bl	800acf4 <HAL_TIM_Base_Start_IT>
 8004be2:	4603      	mov	r3, r0
 8004be4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004be8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d111      	bne.n	8004c14 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004bf0:	2036      	movs	r0, #54	; 0x36
 8004bf2:	f001 fa6d 	bl	80060d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b0f      	cmp	r3, #15
 8004bfa:	d808      	bhi.n	8004c0e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	2036      	movs	r0, #54	; 0x36
 8004c02:	f001 fa49 	bl	8006098 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004c06:	4a0a      	ldr	r2, [pc, #40]	; (8004c30 <HAL_InitTick+0xf4>)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	e002      	b.n	8004c14 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004c14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3738      	adds	r7, #56	; 0x38
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40023800 	.word	0x40023800
 8004c24:	431bde83 	.word	0x431bde83
 8004c28:	200005d0 	.word	0x200005d0
 8004c2c:	40001000 	.word	0x40001000
 8004c30:	2000001c 	.word	0x2000001c

08004c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004c38:	e7fe      	b.n	8004c38 <NMI_Handler+0x4>
	...

08004c3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  	loge("HardFault");
 8004c40:	4802      	ldr	r0, [pc, #8]	; (8004c4c <HardFault_Handler+0x10>)
 8004c42:	f7fe ffe3 	bl	8003c0c <loge>
  	break;
 8004c46:	bf00      	nop
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 8004c48:	bf00      	nop
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	0801987c 	.word	0x0801987c

08004c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c54:	e7fe      	b.n	8004c54 <MemManage_Handler+0x4>

08004c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c56:	b480      	push	{r7}
 8004c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c5a:	e7fe      	b.n	8004c5a <BusFault_Handler+0x4>

08004c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c60:	e7fe      	b.n	8004c60 <UsageFault_Handler+0x4>

08004c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c62:	b480      	push	{r7}
 8004c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c66:	bf00      	nop
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004c74:	4802      	ldr	r0, [pc, #8]	; (8004c80 <USART3_IRQHandler+0x10>)
 8004c76:	f007 f987 	bl	800bf88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004c7a:	bf00      	nop
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000800 	.word	0x20000800

08004c84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004c88:	4802      	ldr	r0, [pc, #8]	; (8004c94 <TIM6_DAC_IRQHandler+0x10>)
 8004c8a:	f006 fa13 	bl	800b0b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004c8e:	bf00      	nop
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	200005d0 	.word	0x200005d0

08004c98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004c9c:	4802      	ldr	r0, [pc, #8]	; (8004ca8 <OTG_FS_IRQHandler+0x10>)
 8004c9e:	f003 fa23 	bl	80080e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004ca2:	bf00      	nop
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	200069d8 	.word	0x200069d8

08004cac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  return 1;
 8004cb0:	2301      	movs	r3, #1
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <_kill>:

int _kill(int pid, int sig)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004cc6:	f011 f8eb 	bl	8015ea0 <__errno>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2216      	movs	r2, #22
 8004cce:	601a      	str	r2, [r3, #0]
  return -1;
 8004cd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <_exit>:

void _exit (int status)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff ffe7 	bl	8004cbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8004cee:	e7fe      	b.n	8004cee <_exit+0x12>

08004cf0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	e00a      	b.n	8004d18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004d02:	f3af 8000 	nop.w
 8004d06:	4601      	mov	r1, r0
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	60ba      	str	r2, [r7, #8]
 8004d0e:	b2ca      	uxtb	r2, r1
 8004d10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	3301      	adds	r3, #1
 8004d16:	617b      	str	r3, [r7, #20]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	dbf0      	blt.n	8004d02 <_read+0x12>
  }

  return len;
 8004d20:	687b      	ldr	r3, [r7, #4]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <_close>:
  }
  return len;
}

int _close(int file)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004d32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d52:	605a      	str	r2, [r3, #4]
  return 0;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <_isatty>:

int _isatty(int file)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004d6a:	2301      	movs	r3, #1
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
	...

08004d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d9c:	4a14      	ldr	r2, [pc, #80]	; (8004df0 <_sbrk+0x5c>)
 8004d9e:	4b15      	ldr	r3, [pc, #84]	; (8004df4 <_sbrk+0x60>)
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004da8:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <_sbrk+0x64>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d102      	bne.n	8004db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004db0:	4b11      	ldr	r3, [pc, #68]	; (8004df8 <_sbrk+0x64>)
 8004db2:	4a12      	ldr	r2, [pc, #72]	; (8004dfc <_sbrk+0x68>)
 8004db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004db6:	4b10      	ldr	r3, [pc, #64]	; (8004df8 <_sbrk+0x64>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d207      	bcs.n	8004dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004dc4:	f011 f86c 	bl	8015ea0 <__errno>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	220c      	movs	r2, #12
 8004dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004dce:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd2:	e009      	b.n	8004de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004dd4:	4b08      	ldr	r3, [pc, #32]	; (8004df8 <_sbrk+0x64>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004dda:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <_sbrk+0x64>)
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4413      	add	r3, r2
 8004de2:	4a05      	ldr	r2, [pc, #20]	; (8004df8 <_sbrk+0x64>)
 8004de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004de6:	68fb      	ldr	r3, [r7, #12]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20020000 	.word	0x20020000
 8004df4:	00000400 	.word	0x00000400
 8004df8:	20000618 	.word	0x20000618
 8004dfc:	20007110 	.word	0x20007110

08004e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e04:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <SystemInit+0x20>)
 8004e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0a:	4a05      	ldr	r2, [pc, #20]	; (8004e20 <SystemInit+0x20>)
 8004e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e14:	bf00      	nop
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	e000ed00 	.word	0xe000ed00

08004e24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004e2a:	463b      	mov	r3, r7
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	605a      	str	r2, [r3, #4]
 8004e32:	609a      	str	r2, [r3, #8]
 8004e34:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004e36:	4b29      	ldr	r3, [pc, #164]	; (8004edc <MX_ADC1_Init+0xb8>)
 8004e38:	4a29      	ldr	r2, [pc, #164]	; (8004ee0 <MX_ADC1_Init+0xbc>)
 8004e3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004e3c:	4b27      	ldr	r3, [pc, #156]	; (8004edc <MX_ADC1_Init+0xb8>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004e42:	4b26      	ldr	r3, [pc, #152]	; (8004edc <MX_ADC1_Init+0xb8>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004e48:	4b24      	ldr	r3, [pc, #144]	; (8004edc <MX_ADC1_Init+0xb8>)
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004e4e:	4b23      	ldr	r3, [pc, #140]	; (8004edc <MX_ADC1_Init+0xb8>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8004e54:	4b21      	ldr	r3, [pc, #132]	; (8004edc <MX_ADC1_Init+0xb8>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8004e5c:	4b1f      	ldr	r3, [pc, #124]	; (8004edc <MX_ADC1_Init+0xb8>)
 8004e5e:	2201      	movs	r2, #1
 8004e60:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004e62:	4b1e      	ldr	r3, [pc, #120]	; (8004edc <MX_ADC1_Init+0xb8>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004e68:	4b1c      	ldr	r3, [pc, #112]	; (8004edc <MX_ADC1_Init+0xb8>)
 8004e6a:	4a1e      	ldr	r2, [pc, #120]	; (8004ee4 <MX_ADC1_Init+0xc0>)
 8004e6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004e6e:	4b1b      	ldr	r3, [pc, #108]	; (8004edc <MX_ADC1_Init+0xb8>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8004e74:	4b19      	ldr	r3, [pc, #100]	; (8004edc <MX_ADC1_Init+0xb8>)
 8004e76:	2202      	movs	r2, #2
 8004e78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004e7a:	4b18      	ldr	r3, [pc, #96]	; (8004edc <MX_ADC1_Init+0xb8>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004e82:	4b16      	ldr	r3, [pc, #88]	; (8004edc <MX_ADC1_Init+0xb8>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004e88:	4814      	ldr	r0, [pc, #80]	; (8004edc <MX_ADC1_Init+0xb8>)
 8004e8a:	f000 fc71 	bl	8005770 <HAL_ADC_Init>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8004e94:	f7ff fc04 	bl	80046a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004ea4:	463b      	mov	r3, r7
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	480c      	ldr	r0, [pc, #48]	; (8004edc <MX_ADC1_Init+0xb8>)
 8004eaa:	f000 fe0f 	bl	8005acc <HAL_ADC_ConfigChannel>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8004eb4:	f7ff fbf4 	bl	80046a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004ec0:	463b      	mov	r3, r7
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4805      	ldr	r0, [pc, #20]	; (8004edc <MX_ADC1_Init+0xb8>)
 8004ec6:	f000 fe01 	bl	8005acc <HAL_ADC_ConfigChannel>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8004ed0:	f7ff fbe6 	bl	80046a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004ed4:	bf00      	nop
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	2000061c 	.word	0x2000061c
 8004ee0:	40012000 	.word	0x40012000
 8004ee4:	0f000001 	.word	0x0f000001

08004ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b094      	sub	sp, #80	; 0x50
 8004eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004eee:	f107 031c 	add.w	r3, r7, #28
 8004ef2:	2234      	movs	r2, #52	; 0x34
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f011 f908 	bl	801610c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004efc:	f107 0308 	add.w	r3, r7, #8
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	605a      	str	r2, [r3, #4]
 8004f06:	609a      	str	r2, [r3, #8]
 8004f08:	60da      	str	r2, [r3, #12]
 8004f0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	607b      	str	r3, [r7, #4]
 8004f10:	4b2a      	ldr	r3, [pc, #168]	; (8004fbc <SystemClock_Config+0xd4>)
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	4a29      	ldr	r2, [pc, #164]	; (8004fbc <SystemClock_Config+0xd4>)
 8004f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8004f1c:	4b27      	ldr	r3, [pc, #156]	; (8004fbc <SystemClock_Config+0xd4>)
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f24:	607b      	str	r3, [r7, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004f28:	2300      	movs	r3, #0
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	4b24      	ldr	r3, [pc, #144]	; (8004fc0 <SystemClock_Config+0xd8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004f34:	4a22      	ldr	r2, [pc, #136]	; (8004fc0 <SystemClock_Config+0xd8>)
 8004f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	4b20      	ldr	r3, [pc, #128]	; (8004fc0 <SystemClock_Config+0xd8>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f44:	603b      	str	r3, [r7, #0]
 8004f46:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8004f48:	2305      	movs	r3, #5
 8004f4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004f52:	2301      	movs	r3, #1
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f56:	2302      	movs	r3, #2
 8004f58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 8004f60:	2306      	movs	r3, #6
 8004f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8004f64:	2348      	movs	r3, #72	; 0x48
 8004f66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004f68:	2302      	movs	r3, #2
 8004f6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004f70:	2302      	movs	r3, #2
 8004f72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f74:	f107 031c 	add.w	r3, r7, #28
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f005 f847 	bl	800a00c <HAL_RCC_OscConfig>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8004f84:	f7ff fb8c 	bl	80046a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f88:	230f      	movs	r3, #15
 8004f8a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f90:	2300      	movs	r3, #0
 8004f92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004f9e:	f107 0308 	add.w	r3, r7, #8
 8004fa2:	2102      	movs	r1, #2
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f004 fa11 	bl	80093cc <HAL_RCC_ClockConfig>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8004fb0:	f7ff fb76 	bl	80046a0 <Error_Handler>
  }
}
 8004fb4:	bf00      	nop
 8004fb6:	3750      	adds	r7, #80	; 0x50
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	40007000 	.word	0x40007000

08004fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08a      	sub	sp, #40	; 0x28
 8004fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fca:	f107 0314 	add.w	r3, r7, #20
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	605a      	str	r2, [r3, #4]
 8004fd4:	609a      	str	r2, [r3, #8]
 8004fd6:	60da      	str	r2, [r3, #12]
 8004fd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fda:	2300      	movs	r3, #0
 8004fdc:	613b      	str	r3, [r7, #16]
 8004fde:	4b49      	ldr	r3, [pc, #292]	; (8005104 <MX_GPIO_Init+0x140>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	4a48      	ldr	r2, [pc, #288]	; (8005104 <MX_GPIO_Init+0x140>)
 8004fe4:	f043 0304 	orr.w	r3, r3, #4
 8004fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8004fea:	4b46      	ldr	r3, [pc, #280]	; (8005104 <MX_GPIO_Init+0x140>)
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	613b      	str	r3, [r7, #16]
 8004ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	4b42      	ldr	r3, [pc, #264]	; (8005104 <MX_GPIO_Init+0x140>)
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	4a41      	ldr	r2, [pc, #260]	; (8005104 <MX_GPIO_Init+0x140>)
 8005000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005004:	6313      	str	r3, [r2, #48]	; 0x30
 8005006:	4b3f      	ldr	r3, [pc, #252]	; (8005104 <MX_GPIO_Init+0x140>)
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005012:	2300      	movs	r3, #0
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	4b3b      	ldr	r3, [pc, #236]	; (8005104 <MX_GPIO_Init+0x140>)
 8005018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501a:	4a3a      	ldr	r2, [pc, #232]	; (8005104 <MX_GPIO_Init+0x140>)
 800501c:	f043 0301 	orr.w	r3, r3, #1
 8005020:	6313      	str	r3, [r2, #48]	; 0x30
 8005022:	4b38      	ldr	r3, [pc, #224]	; (8005104 <MX_GPIO_Init+0x140>)
 8005024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	60bb      	str	r3, [r7, #8]
 800502c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800502e:	2300      	movs	r3, #0
 8005030:	607b      	str	r3, [r7, #4]
 8005032:	4b34      	ldr	r3, [pc, #208]	; (8005104 <MX_GPIO_Init+0x140>)
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	4a33      	ldr	r2, [pc, #204]	; (8005104 <MX_GPIO_Init+0x140>)
 8005038:	f043 0302 	orr.w	r3, r3, #2
 800503c:	6313      	str	r3, [r2, #48]	; 0x30
 800503e:	4b31      	ldr	r3, [pc, #196]	; (8005104 <MX_GPIO_Init+0x140>)
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	607b      	str	r3, [r7, #4]
 8005048:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZ_Pin|CM1_Pin|CM2_Pin, GPIO_PIN_RESET);
 800504a:	2200      	movs	r2, #0
 800504c:	210e      	movs	r1, #14
 800504e:	482e      	ldr	r0, [pc, #184]	; (8005108 <MX_GPIO_Init+0x144>)
 8005050:	f001 fa72 	bl	8006538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|USB_IO_Pin, GPIO_PIN_RESET);
 8005054:	2200      	movs	r2, #0
 8005056:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800505a:	482c      	ldr	r0, [pc, #176]	; (800510c <MX_GPIO_Init+0x148>)
 800505c:	f001 fa6c 	bl	8006538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8005060:	2200      	movs	r2, #0
 8005062:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005066:	482a      	ldr	r0, [pc, #168]	; (8005110 <MX_GPIO_Init+0x14c>)
 8005068:	f001 fa66 	bl	8006538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800506c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005072:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005078:	2300      	movs	r3, #0
 800507a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800507c:	f107 0314 	add.w	r3, r7, #20
 8005080:	4619      	mov	r1, r3
 8005082:	4821      	ldr	r0, [pc, #132]	; (8005108 <MX_GPIO_Init+0x144>)
 8005084:	f001 f8c4 	bl	8006210 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZ_Pin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 8005088:	2302      	movs	r3, #2
 800508a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800508c:	2301      	movs	r3, #1
 800508e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005090:	2300      	movs	r3, #0
 8005092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005094:	2300      	movs	r3, #0
 8005096:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8005098:	f107 0314 	add.w	r3, r7, #20
 800509c:	4619      	mov	r1, r3
 800509e:	481a      	ldr	r0, [pc, #104]	; (8005108 <MX_GPIO_Init+0x144>)
 80050a0:	f001 f8b6 	bl	8006210 <HAL_GPIO_Init>

  /*Configure GPIO pins : CM1_Pin CM2_Pin */
  GPIO_InitStruct.Pin = CM1_Pin|CM2_Pin;
 80050a4:	230c      	movs	r3, #12
 80050a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050a8:	2301      	movs	r3, #1
 80050aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050b0:	2303      	movs	r3, #3
 80050b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050b4:	f107 0314 	add.w	r3, r7, #20
 80050b8:	4619      	mov	r1, r3
 80050ba:	4813      	ldr	r0, [pc, #76]	; (8005108 <MX_GPIO_Init+0x144>)
 80050bc:	f001 f8a8 	bl	8006210 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin USB_IO_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|USB_IO_Pin;
 80050c0:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80050c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050c6:	2301      	movs	r3, #1
 80050c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ce:	2300      	movs	r3, #0
 80050d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050d2:	f107 0314 	add.w	r3, r7, #20
 80050d6:	4619      	mov	r1, r3
 80050d8:	480c      	ldr	r0, [pc, #48]	; (800510c <MX_GPIO_Init+0x148>)
 80050da:	f001 f899 	bl	8006210 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80050de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050e4:	2301      	movs	r3, #1
 80050e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ec:	2303      	movs	r3, #3
 80050ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80050f0:	f107 0314 	add.w	r3, r7, #20
 80050f4:	4619      	mov	r1, r3
 80050f6:	4806      	ldr	r0, [pc, #24]	; (8005110 <MX_GPIO_Init+0x14c>)
 80050f8:	f001 f88a 	bl	8006210 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80050fc:	bf00      	nop
 80050fe:	3728      	adds	r7, #40	; 0x28
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	40023800 	.word	0x40023800
 8005108:	40020800 	.word	0x40020800
 800510c:	40020000 	.word	0x40020000
 8005110:	40020400 	.word	0x40020400

08005114 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005118:	4b12      	ldr	r3, [pc, #72]	; (8005164 <MX_I2C1_Init+0x50>)
 800511a:	4a13      	ldr	r2, [pc, #76]	; (8005168 <MX_I2C1_Init+0x54>)
 800511c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800511e:	4b11      	ldr	r3, [pc, #68]	; (8005164 <MX_I2C1_Init+0x50>)
 8005120:	4a12      	ldr	r2, [pc, #72]	; (800516c <MX_I2C1_Init+0x58>)
 8005122:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005124:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <MX_I2C1_Init+0x50>)
 8005126:	2200      	movs	r2, #0
 8005128:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800512a:	4b0e      	ldr	r3, [pc, #56]	; (8005164 <MX_I2C1_Init+0x50>)
 800512c:	2200      	movs	r2, #0
 800512e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005130:	4b0c      	ldr	r3, [pc, #48]	; (8005164 <MX_I2C1_Init+0x50>)
 8005132:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005136:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005138:	4b0a      	ldr	r3, [pc, #40]	; (8005164 <MX_I2C1_Init+0x50>)
 800513a:	2200      	movs	r2, #0
 800513c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800513e:	4b09      	ldr	r3, [pc, #36]	; (8005164 <MX_I2C1_Init+0x50>)
 8005140:	2200      	movs	r2, #0
 8005142:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005144:	4b07      	ldr	r3, [pc, #28]	; (8005164 <MX_I2C1_Init+0x50>)
 8005146:	2200      	movs	r2, #0
 8005148:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800514a:	4b06      	ldr	r3, [pc, #24]	; (8005164 <MX_I2C1_Init+0x50>)
 800514c:	2200      	movs	r2, #0
 800514e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005150:	4804      	ldr	r0, [pc, #16]	; (8005164 <MX_I2C1_Init+0x50>)
 8005152:	f001 fa25 	bl	80065a0 <HAL_I2C_Init>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800515c:	f7ff faa0 	bl	80046a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005160:	bf00      	nop
 8005162:	bd80      	pop	{r7, pc}
 8005164:	20000664 	.word	0x20000664
 8005168:	40005400 	.word	0x40005400
 800516c:	00061a80 	.word	0x00061a80

08005170 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8005176:	1d3b      	adds	r3, r7, #4
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	605a      	str	r2, [r3, #4]
 800517e:	609a      	str	r2, [r3, #8]
 8005180:	60da      	str	r2, [r3, #12]
 8005182:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8005184:	2300      	movs	r3, #0
 8005186:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005188:	4b24      	ldr	r3, [pc, #144]	; (800521c <MX_RTC_Init+0xac>)
 800518a:	4a25      	ldr	r2, [pc, #148]	; (8005220 <MX_RTC_Init+0xb0>)
 800518c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800518e:	4b23      	ldr	r3, [pc, #140]	; (800521c <MX_RTC_Init+0xac>)
 8005190:	2200      	movs	r2, #0
 8005192:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005194:	4b21      	ldr	r3, [pc, #132]	; (800521c <MX_RTC_Init+0xac>)
 8005196:	227f      	movs	r2, #127	; 0x7f
 8005198:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800519a:	4b20      	ldr	r3, [pc, #128]	; (800521c <MX_RTC_Init+0xac>)
 800519c:	22ff      	movs	r2, #255	; 0xff
 800519e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80051a0:	4b1e      	ldr	r3, [pc, #120]	; (800521c <MX_RTC_Init+0xac>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80051a6:	4b1d      	ldr	r3, [pc, #116]	; (800521c <MX_RTC_Init+0xac>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80051ac:	4b1b      	ldr	r3, [pc, #108]	; (800521c <MX_RTC_Init+0xac>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80051b2:	481a      	ldr	r0, [pc, #104]	; (800521c <MX_RTC_Init+0xac>)
 80051b4:	f005 f9c8 	bl	800a548 <HAL_RTC_Init>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80051be:	f7ff fa6f 	bl	80046a0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80051c2:	2300      	movs	r3, #0
 80051c4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80051c6:	2300      	movs	r3, #0
 80051c8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80051ca:	2300      	movs	r3, #0
 80051cc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80051d6:	1d3b      	adds	r3, r7, #4
 80051d8:	2201      	movs	r2, #1
 80051da:	4619      	mov	r1, r3
 80051dc:	480f      	ldr	r0, [pc, #60]	; (800521c <MX_RTC_Init+0xac>)
 80051de:	f005 fa29 	bl	800a634 <HAL_RTC_SetTime>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80051e8:	f7ff fa5a 	bl	80046a0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80051ec:	2301      	movs	r3, #1
 80051ee:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80051f0:	2301      	movs	r3, #1
 80051f2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80051f4:	2301      	movs	r3, #1
 80051f6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80051f8:	2300      	movs	r3, #0
 80051fa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80051fc:	463b      	mov	r3, r7
 80051fe:	2201      	movs	r2, #1
 8005200:	4619      	mov	r1, r3
 8005202:	4806      	ldr	r0, [pc, #24]	; (800521c <MX_RTC_Init+0xac>)
 8005204:	f005 fb0e 	bl	800a824 <HAL_RTC_SetDate>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800520e:	f7ff fa47 	bl	80046a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005212:	bf00      	nop
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	200006b8 	.word	0x200006b8
 8005220:	40002800 	.word	0x40002800

08005224 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI2_Init(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005228:	4b17      	ldr	r3, [pc, #92]	; (8005288 <MX_SPI2_Init+0x64>)
 800522a:	4a18      	ldr	r2, [pc, #96]	; (800528c <MX_SPI2_Init+0x68>)
 800522c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800522e:	4b16      	ldr	r3, [pc, #88]	; (8005288 <MX_SPI2_Init+0x64>)
 8005230:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005234:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005236:	4b14      	ldr	r3, [pc, #80]	; (8005288 <MX_SPI2_Init+0x64>)
 8005238:	2200      	movs	r2, #0
 800523a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800523c:	4b12      	ldr	r3, [pc, #72]	; (8005288 <MX_SPI2_Init+0x64>)
 800523e:	2200      	movs	r2, #0
 8005240:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005242:	4b11      	ldr	r3, [pc, #68]	; (8005288 <MX_SPI2_Init+0x64>)
 8005244:	2200      	movs	r2, #0
 8005246:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005248:	4b0f      	ldr	r3, [pc, #60]	; (8005288 <MX_SPI2_Init+0x64>)
 800524a:	2200      	movs	r2, #0
 800524c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800524e:	4b0e      	ldr	r3, [pc, #56]	; (8005288 <MX_SPI2_Init+0x64>)
 8005250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005254:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005256:	4b0c      	ldr	r3, [pc, #48]	; (8005288 <MX_SPI2_Init+0x64>)
 8005258:	2200      	movs	r2, #0
 800525a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800525c:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <MX_SPI2_Init+0x64>)
 800525e:	2200      	movs	r2, #0
 8005260:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005262:	4b09      	ldr	r3, [pc, #36]	; (8005288 <MX_SPI2_Init+0x64>)
 8005264:	2200      	movs	r2, #0
 8005266:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005268:	4b07      	ldr	r3, [pc, #28]	; (8005288 <MX_SPI2_Init+0x64>)
 800526a:	2200      	movs	r2, #0
 800526c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800526e:	4b06      	ldr	r3, [pc, #24]	; (8005288 <MX_SPI2_Init+0x64>)
 8005270:	220a      	movs	r2, #10
 8005272:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005274:	4804      	ldr	r0, [pc, #16]	; (8005288 <MX_SPI2_Init+0x64>)
 8005276:	f005 fc65 	bl	800ab44 <HAL_SPI_Init>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005280:	f7ff fa0e 	bl	80046a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005284:	bf00      	nop
 8005286:	bd80      	pop	{r7, pc}
 8005288:	200006d8 	.word	0x200006d8
 800528c:	40003800 	.word	0x40003800

08005290 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08e      	sub	sp, #56	; 0x38
 8005294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005296:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	605a      	str	r2, [r3, #4]
 80052a0:	609a      	str	r2, [r3, #8]
 80052a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052a4:	f107 0320 	add.w	r3, r7, #32
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80052ae:	1d3b      	adds	r3, r7, #4
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	605a      	str	r2, [r3, #4]
 80052b6:	609a      	str	r2, [r3, #8]
 80052b8:	60da      	str	r2, [r3, #12]
 80052ba:	611a      	str	r2, [r3, #16]
 80052bc:	615a      	str	r2, [r3, #20]
 80052be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80052c0:	4b37      	ldr	r3, [pc, #220]	; (80053a0 <MX_TIM3_Init+0x110>)
 80052c2:	4a38      	ldr	r2, [pc, #224]	; (80053a4 <MX_TIM3_Init+0x114>)
 80052c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80052c6:	4b36      	ldr	r3, [pc, #216]	; (80053a0 <MX_TIM3_Init+0x110>)
 80052c8:	2247      	movs	r2, #71	; 0x47
 80052ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052cc:	4b34      	ldr	r3, [pc, #208]	; (80053a0 <MX_TIM3_Init+0x110>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80052d2:	4b33      	ldr	r3, [pc, #204]	; (80053a0 <MX_TIM3_Init+0x110>)
 80052d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052da:	4b31      	ldr	r3, [pc, #196]	; (80053a0 <MX_TIM3_Init+0x110>)
 80052dc:	2200      	movs	r2, #0
 80052de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052e0:	4b2f      	ldr	r3, [pc, #188]	; (80053a0 <MX_TIM3_Init+0x110>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80052e6:	482e      	ldr	r0, [pc, #184]	; (80053a0 <MX_TIM3_Init+0x110>)
 80052e8:	f005 fcb5 	bl	800ac56 <HAL_TIM_Base_Init>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80052f2:	f7ff f9d5 	bl	80046a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80052fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005300:	4619      	mov	r1, r3
 8005302:	4827      	ldr	r0, [pc, #156]	; (80053a0 <MX_TIM3_Init+0x110>)
 8005304:	f006 f8a0 	bl	800b448 <HAL_TIM_ConfigClockSource>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800530e:	f7ff f9c7 	bl	80046a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005312:	4823      	ldr	r0, [pc, #140]	; (80053a0 <MX_TIM3_Init+0x110>)
 8005314:	f005 fd5e 	bl	800add4 <HAL_TIM_PWM_Init>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800531e:	f7ff f9bf 	bl	80046a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005322:	2300      	movs	r3, #0
 8005324:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005326:	2300      	movs	r3, #0
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800532a:	f107 0320 	add.w	r3, r7, #32
 800532e:	4619      	mov	r1, r3
 8005330:	481b      	ldr	r0, [pc, #108]	; (80053a0 <MX_TIM3_Init+0x110>)
 8005332:	f006 fc89 	bl	800bc48 <HAL_TIMEx_MasterConfigSynchronization>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800533c:	f7ff f9b0 	bl	80046a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005340:	2360      	movs	r3, #96	; 0x60
 8005342:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005344:	2300      	movs	r3, #0
 8005346:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005348:	2300      	movs	r3, #0
 800534a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800534c:	2300      	movs	r3, #0
 800534e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005350:	1d3b      	adds	r3, r7, #4
 8005352:	2200      	movs	r2, #0
 8005354:	4619      	mov	r1, r3
 8005356:	4812      	ldr	r0, [pc, #72]	; (80053a0 <MX_TIM3_Init+0x110>)
 8005358:	f005 ffb4 	bl	800b2c4 <HAL_TIM_PWM_ConfigChannel>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005362:	f7ff f99d 	bl	80046a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005366:	1d3b      	adds	r3, r7, #4
 8005368:	2204      	movs	r2, #4
 800536a:	4619      	mov	r1, r3
 800536c:	480c      	ldr	r0, [pc, #48]	; (80053a0 <MX_TIM3_Init+0x110>)
 800536e:	f005 ffa9 	bl	800b2c4 <HAL_TIM_PWM_ConfigChannel>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8005378:	f7ff f992 	bl	80046a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800537c:	1d3b      	adds	r3, r7, #4
 800537e:	2208      	movs	r2, #8
 8005380:	4619      	mov	r1, r3
 8005382:	4807      	ldr	r0, [pc, #28]	; (80053a0 <MX_TIM3_Init+0x110>)
 8005384:	f005 ff9e 	bl	800b2c4 <HAL_TIM_PWM_ConfigChannel>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800538e:	f7ff f987 	bl	80046a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005392:	4803      	ldr	r0, [pc, #12]	; (80053a0 <MX_TIM3_Init+0x110>)
 8005394:	f7ff fadc 	bl	8004950 <HAL_TIM_MspPostInit>

}
 8005398:	bf00      	nop
 800539a:	3738      	adds	r7, #56	; 0x38
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20000730 	.word	0x20000730
 80053a4:	40000400 	.word	0x40000400

080053a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80053ac:	4b11      	ldr	r3, [pc, #68]	; (80053f4 <MX_USART1_UART_Init+0x4c>)
 80053ae:	4a12      	ldr	r2, [pc, #72]	; (80053f8 <MX_USART1_UART_Init+0x50>)
 80053b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80053b2:	4b10      	ldr	r3, [pc, #64]	; (80053f4 <MX_USART1_UART_Init+0x4c>)
 80053b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80053b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80053ba:	4b0e      	ldr	r3, [pc, #56]	; (80053f4 <MX_USART1_UART_Init+0x4c>)
 80053bc:	2200      	movs	r2, #0
 80053be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80053c0:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <MX_USART1_UART_Init+0x4c>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80053c6:	4b0b      	ldr	r3, [pc, #44]	; (80053f4 <MX_USART1_UART_Init+0x4c>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80053cc:	4b09      	ldr	r3, [pc, #36]	; (80053f4 <MX_USART1_UART_Init+0x4c>)
 80053ce:	220c      	movs	r2, #12
 80053d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053d2:	4b08      	ldr	r3, [pc, #32]	; (80053f4 <MX_USART1_UART_Init+0x4c>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80053d8:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <MX_USART1_UART_Init+0x4c>)
 80053da:	2200      	movs	r2, #0
 80053dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80053de:	4805      	ldr	r0, [pc, #20]	; (80053f4 <MX_USART1_UART_Init+0x4c>)
 80053e0:	f006 fcc2 	bl	800bd68 <HAL_UART_Init>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80053ea:	f7ff f959 	bl	80046a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80053ee:	bf00      	nop
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	20000778 	.word	0x20000778
 80053f8:	40011000 	.word	0x40011000

080053fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005400:	4b11      	ldr	r3, [pc, #68]	; (8005448 <MX_USART2_UART_Init+0x4c>)
 8005402:	4a12      	ldr	r2, [pc, #72]	; (800544c <MX_USART2_UART_Init+0x50>)
 8005404:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005406:	4b10      	ldr	r3, [pc, #64]	; (8005448 <MX_USART2_UART_Init+0x4c>)
 8005408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800540c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800540e:	4b0e      	ldr	r3, [pc, #56]	; (8005448 <MX_USART2_UART_Init+0x4c>)
 8005410:	2200      	movs	r2, #0
 8005412:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005414:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <MX_USART2_UART_Init+0x4c>)
 8005416:	2200      	movs	r2, #0
 8005418:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800541a:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <MX_USART2_UART_Init+0x4c>)
 800541c:	2200      	movs	r2, #0
 800541e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005420:	4b09      	ldr	r3, [pc, #36]	; (8005448 <MX_USART2_UART_Init+0x4c>)
 8005422:	220c      	movs	r2, #12
 8005424:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005426:	4b08      	ldr	r3, [pc, #32]	; (8005448 <MX_USART2_UART_Init+0x4c>)
 8005428:	2200      	movs	r2, #0
 800542a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800542c:	4b06      	ldr	r3, [pc, #24]	; (8005448 <MX_USART2_UART_Init+0x4c>)
 800542e:	2200      	movs	r2, #0
 8005430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005432:	4805      	ldr	r0, [pc, #20]	; (8005448 <MX_USART2_UART_Init+0x4c>)
 8005434:	f006 fc98 	bl	800bd68 <HAL_UART_Init>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800543e:	f7ff f92f 	bl	80046a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005442:	bf00      	nop
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	200007bc 	.word	0x200007bc
 800544c:	40004400 	.word	0x40004400

08005450 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005454:	4b11      	ldr	r3, [pc, #68]	; (800549c <MX_USART3_UART_Init+0x4c>)
 8005456:	4a12      	ldr	r2, [pc, #72]	; (80054a0 <MX_USART3_UART_Init+0x50>)
 8005458:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800545a:	4b10      	ldr	r3, [pc, #64]	; (800549c <MX_USART3_UART_Init+0x4c>)
 800545c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005460:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005462:	4b0e      	ldr	r3, [pc, #56]	; (800549c <MX_USART3_UART_Init+0x4c>)
 8005464:	2200      	movs	r2, #0
 8005466:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005468:	4b0c      	ldr	r3, [pc, #48]	; (800549c <MX_USART3_UART_Init+0x4c>)
 800546a:	2200      	movs	r2, #0
 800546c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800546e:	4b0b      	ldr	r3, [pc, #44]	; (800549c <MX_USART3_UART_Init+0x4c>)
 8005470:	2200      	movs	r2, #0
 8005472:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005474:	4b09      	ldr	r3, [pc, #36]	; (800549c <MX_USART3_UART_Init+0x4c>)
 8005476:	220c      	movs	r2, #12
 8005478:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800547a:	4b08      	ldr	r3, [pc, #32]	; (800549c <MX_USART3_UART_Init+0x4c>)
 800547c:	2200      	movs	r2, #0
 800547e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005480:	4b06      	ldr	r3, [pc, #24]	; (800549c <MX_USART3_UART_Init+0x4c>)
 8005482:	2200      	movs	r2, #0
 8005484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005486:	4805      	ldr	r0, [pc, #20]	; (800549c <MX_USART3_UART_Init+0x4c>)
 8005488:	f006 fc6e 	bl	800bd68 <HAL_UART_Init>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005492:	f7ff f905 	bl	80046a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005496:	bf00      	nop
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	20000800 	.word	0x20000800
 80054a0:	40004800 	.word	0x40004800

080054a4 <Buzzer_Once>:
#ifndef SRC_MODULE_BUZZER_C_
#define SRC_MODULE_BUZZER_C_

#include "module/buzzer.h"

void Buzzer_Once() {
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
	osDelay(100);
 80054a8:	2064      	movs	r0, #100	; 0x64
 80054aa:	f00c f80f 	bl	80114cc <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80054ae:	2200      	movs	r2, #0
 80054b0:	2102      	movs	r1, #2
 80054b2:	4802      	ldr	r0, [pc, #8]	; (80054bc <Buzzer_Once+0x18>)
 80054b4:	f001 f840 	bl	8006538 <HAL_GPIO_WritePin>
}
 80054b8:	bf00      	nop
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40020800 	.word	0x40020800

080054c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80054c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80054f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80054c4:	480d      	ldr	r0, [pc, #52]	; (80054fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80054c6:	490e      	ldr	r1, [pc, #56]	; (8005500 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80054c8:	4a0e      	ldr	r2, [pc, #56]	; (8005504 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80054ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80054cc:	e002      	b.n	80054d4 <LoopCopyDataInit>

080054ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80054ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054d2:	3304      	adds	r3, #4

080054d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80054d8:	d3f9      	bcc.n	80054ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80054da:	4a0b      	ldr	r2, [pc, #44]	; (8005508 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80054dc:	4c0b      	ldr	r4, [pc, #44]	; (800550c <LoopFillZerobss+0x26>)
  movs r3, #0
 80054de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80054e0:	e001      	b.n	80054e6 <LoopFillZerobss>

080054e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80054e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80054e4:	3204      	adds	r2, #4

080054e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80054e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054e8:	d3fb      	bcc.n	80054e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80054ea:	f7ff fc89 	bl	8004e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80054ee:	f010 fdd3 	bl	8016098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80054f2:	f7fe fba1 	bl	8003c38 <main>
  bx  lr    
 80054f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80054f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80054fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005500:	2000030c 	.word	0x2000030c
  ldr r2, =_sidata
 8005504:	08019e1c 	.word	0x08019e1c
  ldr r2, =_sbss
 8005508:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 800550c:	20007110 	.word	0x20007110

08005510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005510:	e7fe      	b.n	8005510 <ADC_IRQHandler>

08005512 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d104      	bne.n	800552a <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005520:	b672      	cpsid	i
}
 8005522:	bf00      	nop
 8005524:	f7ff f8bc 	bl	80046a0 <Error_Handler>
 8005528:	e7fe      	b.n	8005528 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 800552a:	2300      	movs	r3, #0
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	e007      	b.n	8005540 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	2100      	movs	r1, #0
 8005536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3301      	adds	r3, #1
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d9f4      	bls.n	8005530 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	721a      	strb	r2, [r3, #8]
}
 800554c:	bf00      	nop
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d104      	bne.n	800556c <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005562:	b672      	cpsid	i
}
 8005564:	bf00      	nop
 8005566:	f7ff f89b 	bl	80046a0 <Error_Handler>
 800556a:	e7fe      	b.n	800556a <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	7a1b      	ldrb	r3, [r3, #8]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d904      	bls.n	800557e <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8005574:	b672      	cpsid	i
}
 8005576:	bf00      	nop
 8005578:	f7ff f892 	bl	80046a0 <Error_Handler>
 800557c:	e7fe      	b.n	800557c <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	7a1b      	ldrb	r3, [r3, #8]
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	b2d1      	uxtb	r1, r2
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	7211      	strb	r1, [r2, #8]
 800558a:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800558c:	f3ef 8211 	mrs	r2, BASEPRI
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	60fa      	str	r2, [r7, #12]
 80055a2:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80055ac:	bf00      	nop
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d104      	bne.n	80055cc <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80055c2:	b672      	cpsid	i
}
 80055c4:	bf00      	nop
 80055c6:	f7ff f86b 	bl	80046a0 <Error_Handler>
 80055ca:	e7fe      	b.n	80055ca <stm32_lock_release+0x16>
  lock->nesting_level--;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	7a1b      	ldrb	r3, [r3, #8]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	7a1b      	ldrb	r3, [r3, #8]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d904      	bls.n	80055ea <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 80055e0:	b672      	cpsid	i
}
 80055e2:	bf00      	nop
 80055e4:	f7ff f85c 	bl	80046a0 <Error_Handler>
 80055e8:	e7fe      	b.n	80055e8 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	7a1b      	ldrb	r3, [r3, #8]
 80055ee:	461a      	mov	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80055fe:	bf00      	nop
}
 8005600:	bf00      	nop
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d105      	bne.n	8005622 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8005616:	f010 fc43 	bl	8015ea0 <__errno>
 800561a:	4603      	mov	r3, r0
 800561c:	2216      	movs	r2, #22
 800561e:	601a      	str	r2, [r3, #0]
    return;
 8005620:	e015      	b.n	800564e <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8005622:	200c      	movs	r0, #12
 8005624:	f010 fd5c 	bl	80160e0 <malloc>
 8005628:	4603      	mov	r3, r0
 800562a:	461a      	mov	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff ff68 	bl	8005512 <stm32_lock_init>
    return;
 8005642:	e004      	b.n	800564e <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8005644:	b672      	cpsid	i
}
 8005646:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8005648:	f7ff f82a 	bl	80046a0 <Error_Handler>
 800564c:	e7fe      	b.n	800564c <__retarget_lock_init_recursive+0x44>
}
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d104      	bne.n	800566c <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005662:	b672      	cpsid	i
}
 8005664:	bf00      	nop
 8005666:	f7ff f81b 	bl	80046a0 <Error_Handler>
 800566a:	e7fe      	b.n	800566a <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4618      	mov	r0, r3
 8005670:	f7ff ff70 	bl	8005554 <stm32_lock_acquire>
}
 8005674:	bf00      	nop
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d104      	bne.n	8005694 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800568a:	b672      	cpsid	i
}
 800568c:	bf00      	nop
 800568e:	f7ff f807 	bl	80046a0 <Error_Handler>
 8005692:	e7fe      	b.n	8005692 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff ff8c 	bl	80055b4 <stm32_lock_release>
}
 800569c:	bf00      	nop
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80056a8:	4b0e      	ldr	r3, [pc, #56]	; (80056e4 <HAL_Init+0x40>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a0d      	ldr	r2, [pc, #52]	; (80056e4 <HAL_Init+0x40>)
 80056ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80056b4:	4b0b      	ldr	r3, [pc, #44]	; (80056e4 <HAL_Init+0x40>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a0a      	ldr	r2, [pc, #40]	; (80056e4 <HAL_Init+0x40>)
 80056ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80056c0:	4b08      	ldr	r3, [pc, #32]	; (80056e4 <HAL_Init+0x40>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a07      	ldr	r2, [pc, #28]	; (80056e4 <HAL_Init+0x40>)
 80056c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056cc:	2003      	movs	r0, #3
 80056ce:	f000 fcd8 	bl	8006082 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80056d2:	200f      	movs	r0, #15
 80056d4:	f7ff fa32 	bl	8004b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80056d8:	f7fe ffee 	bl	80046b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	40023c00 	.word	0x40023c00

080056e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056ec:	4b06      	ldr	r3, [pc, #24]	; (8005708 <HAL_IncTick+0x20>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	461a      	mov	r2, r3
 80056f2:	4b06      	ldr	r3, [pc, #24]	; (800570c <HAL_IncTick+0x24>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4413      	add	r3, r2
 80056f8:	4a04      	ldr	r2, [pc, #16]	; (800570c <HAL_IncTick+0x24>)
 80056fa:	6013      	str	r3, [r2, #0]
}
 80056fc:	bf00      	nop
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	20000020 	.word	0x20000020
 800570c:	20000868 	.word	0x20000868

08005710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
  return uwTick;
 8005714:	4b03      	ldr	r3, [pc, #12]	; (8005724 <HAL_GetTick+0x14>)
 8005716:	681b      	ldr	r3, [r3, #0]
}
 8005718:	4618      	mov	r0, r3
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	20000868 	.word	0x20000868

08005728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005730:	f7ff ffee 	bl	8005710 <HAL_GetTick>
 8005734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005740:	d005      	beq.n	800574e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005742:	4b0a      	ldr	r3, [pc, #40]	; (800576c <HAL_Delay+0x44>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800574e:	bf00      	nop
 8005750:	f7ff ffde 	bl	8005710 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	429a      	cmp	r2, r3
 800575e:	d8f7      	bhi.n	8005750 <HAL_Delay+0x28>
  {
  }
}
 8005760:	bf00      	nop
 8005762:	bf00      	nop
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	20000020 	.word	0x20000020

08005770 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005778:	2300      	movs	r3, #0
 800577a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e033      	b.n	80057ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	2b00      	cmp	r3, #0
 800578c:	d109      	bne.n	80057a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fe ffbe 	bl	8004710 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	f003 0310 	and.w	r3, r3, #16
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d118      	bne.n	80057e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80057b6:	f023 0302 	bic.w	r3, r3, #2
 80057ba:	f043 0202 	orr.w	r2, r3, #2
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fab4 	bl	8005d30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	f023 0303 	bic.w	r3, r3, #3
 80057d6:	f043 0201 	orr.w	r2, r3, #1
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	641a      	str	r2, [r3, #64]	; 0x40
 80057de:	e001      	b.n	80057e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800580a:	2b01      	cmp	r3, #1
 800580c:	d101      	bne.n	8005812 <HAL_ADC_Start+0x1a>
 800580e:	2302      	movs	r3, #2
 8005810:	e0b2      	b.n	8005978 <HAL_ADC_Start+0x180>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b01      	cmp	r3, #1
 8005826:	d018      	beq.n	800585a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0201 	orr.w	r2, r2, #1
 8005836:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005838:	4b52      	ldr	r3, [pc, #328]	; (8005984 <HAL_ADC_Start+0x18c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a52      	ldr	r2, [pc, #328]	; (8005988 <HAL_ADC_Start+0x190>)
 800583e:	fba2 2303 	umull	r2, r3, r2, r3
 8005842:	0c9a      	lsrs	r2, r3, #18
 8005844:	4613      	mov	r3, r2
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	4413      	add	r3, r2
 800584a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800584c:	e002      	b.n	8005854 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	3b01      	subs	r3, #1
 8005852:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1f9      	bne.n	800584e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b01      	cmp	r3, #1
 8005866:	d17a      	bne.n	800595e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005886:	2b00      	cmp	r3, #0
 8005888:	d007      	beq.n	800589a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005892:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a6:	d106      	bne.n	80058b6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ac:	f023 0206 	bic.w	r2, r3, #6
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	645a      	str	r2, [r3, #68]	; 0x44
 80058b4:	e002      	b.n	80058bc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80058c4:	4b31      	ldr	r3, [pc, #196]	; (800598c <HAL_ADC_Start+0x194>)
 80058c6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80058d0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f003 031f 	and.w	r3, r3, #31
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d12a      	bne.n	8005934 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a2b      	ldr	r2, [pc, #172]	; (8005990 <HAL_ADC_Start+0x198>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d015      	beq.n	8005914 <HAL_ADC_Start+0x11c>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a29      	ldr	r2, [pc, #164]	; (8005994 <HAL_ADC_Start+0x19c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d105      	bne.n	80058fe <HAL_ADC_Start+0x106>
 80058f2:	4b26      	ldr	r3, [pc, #152]	; (800598c <HAL_ADC_Start+0x194>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f003 031f 	and.w	r3, r3, #31
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a25      	ldr	r2, [pc, #148]	; (8005998 <HAL_ADC_Start+0x1a0>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d136      	bne.n	8005976 <HAL_ADC_Start+0x17e>
 8005908:	4b20      	ldr	r3, [pc, #128]	; (800598c <HAL_ADC_Start+0x194>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f003 0310 	and.w	r3, r3, #16
 8005910:	2b00      	cmp	r3, #0
 8005912:	d130      	bne.n	8005976 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d129      	bne.n	8005976 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005930:	609a      	str	r2, [r3, #8]
 8005932:	e020      	b.n	8005976 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a15      	ldr	r2, [pc, #84]	; (8005990 <HAL_ADC_Start+0x198>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d11b      	bne.n	8005976 <HAL_ADC_Start+0x17e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d114      	bne.n	8005976 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689a      	ldr	r2, [r3, #8]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800595a:	609a      	str	r2, [r3, #8]
 800595c:	e00b      	b.n	8005976 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	f043 0210 	orr.w	r2, r3, #16
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596e:	f043 0201 	orr.w	r2, r3, #1
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	20000018 	.word	0x20000018
 8005988:	431bde83 	.word	0x431bde83
 800598c:	40012300 	.word	0x40012300
 8005990:	40012000 	.word	0x40012000
 8005994:	40012100 	.word	0x40012100
 8005998:	40012200 	.word	0x40012200

0800599c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b8:	d113      	bne.n	80059e2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80059c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c8:	d10b      	bne.n	80059e2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	f043 0220 	orr.w	r2, r3, #32
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e063      	b.n	8005aaa <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80059e2:	f7ff fe95 	bl	8005710 <HAL_GetTick>
 80059e6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80059e8:	e021      	b.n	8005a2e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f0:	d01d      	beq.n	8005a2e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d007      	beq.n	8005a08 <HAL_ADC_PollForConversion+0x6c>
 80059f8:	f7ff fe8a 	bl	8005710 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d212      	bcs.n	8005a2e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d00b      	beq.n	8005a2e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	f043 0204 	orr.w	r2, r3, #4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e03d      	b.n	8005aaa <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d1d6      	bne.n	80059ea <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f06f 0212 	mvn.w	r2, #18
 8005a44:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d123      	bne.n	8005aa8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d11f      	bne.n	8005aa8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d006      	beq.n	8005a84 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d111      	bne.n	8005aa8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d105      	bne.n	8005aa8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa0:	f043 0201 	orr.w	r2, r3, #1
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_ADC_ConfigChannel+0x1c>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e113      	b.n	8005d10 <HAL_ADC_ConfigChannel+0x244>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b09      	cmp	r3, #9
 8005af6:	d925      	bls.n	8005b44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68d9      	ldr	r1, [r3, #12]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	4613      	mov	r3, r2
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3b1e      	subs	r3, #30
 8005b0e:	2207      	movs	r2, #7
 8005b10:	fa02 f303 	lsl.w	r3, r2, r3
 8005b14:	43da      	mvns	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	400a      	ands	r2, r1
 8005b1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68d9      	ldr	r1, [r3, #12]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	4618      	mov	r0, r3
 8005b30:	4603      	mov	r3, r0
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	4403      	add	r3, r0
 8005b36:	3b1e      	subs	r3, #30
 8005b38:	409a      	lsls	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	60da      	str	r2, [r3, #12]
 8005b42:	e022      	b.n	8005b8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6919      	ldr	r1, [r3, #16]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	4613      	mov	r3, r2
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	4413      	add	r3, r2
 8005b58:	2207      	movs	r2, #7
 8005b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5e:	43da      	mvns	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	400a      	ands	r2, r1
 8005b66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6919      	ldr	r1, [r3, #16]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	4618      	mov	r0, r3
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	4403      	add	r3, r0
 8005b80:	409a      	lsls	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2b06      	cmp	r3, #6
 8005b90:	d824      	bhi.n	8005bdc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	3b05      	subs	r3, #5
 8005ba4:	221f      	movs	r2, #31
 8005ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8005baa:	43da      	mvns	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	400a      	ands	r2, r1
 8005bb2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	3b05      	subs	r3, #5
 8005bce:	fa00 f203 	lsl.w	r2, r0, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	635a      	str	r2, [r3, #52]	; 0x34
 8005bda:	e04c      	b.n	8005c76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2b0c      	cmp	r3, #12
 8005be2:	d824      	bhi.n	8005c2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	3b23      	subs	r3, #35	; 0x23
 8005bf6:	221f      	movs	r2, #31
 8005bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfc:	43da      	mvns	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	400a      	ands	r2, r1
 8005c04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	4618      	mov	r0, r3
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	3b23      	subs	r3, #35	; 0x23
 8005c20:	fa00 f203 	lsl.w	r2, r0, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8005c2c:	e023      	b.n	8005c76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	3b41      	subs	r3, #65	; 0x41
 8005c40:	221f      	movs	r2, #31
 8005c42:	fa02 f303 	lsl.w	r3, r2, r3
 8005c46:	43da      	mvns	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	400a      	ands	r2, r1
 8005c4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	4613      	mov	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	3b41      	subs	r3, #65	; 0x41
 8005c6a:	fa00 f203 	lsl.w	r2, r0, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c76:	4b29      	ldr	r3, [pc, #164]	; (8005d1c <HAL_ADC_ConfigChannel+0x250>)
 8005c78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a28      	ldr	r2, [pc, #160]	; (8005d20 <HAL_ADC_ConfigChannel+0x254>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d10f      	bne.n	8005ca4 <HAL_ADC_ConfigChannel+0x1d8>
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b12      	cmp	r3, #18
 8005c8a:	d10b      	bne.n	8005ca4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a1d      	ldr	r2, [pc, #116]	; (8005d20 <HAL_ADC_ConfigChannel+0x254>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d12b      	bne.n	8005d06 <HAL_ADC_ConfigChannel+0x23a>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a1c      	ldr	r2, [pc, #112]	; (8005d24 <HAL_ADC_ConfigChannel+0x258>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d003      	beq.n	8005cc0 <HAL_ADC_ConfigChannel+0x1f4>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b11      	cmp	r3, #17
 8005cbe:	d122      	bne.n	8005d06 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a11      	ldr	r2, [pc, #68]	; (8005d24 <HAL_ADC_ConfigChannel+0x258>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d111      	bne.n	8005d06 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005ce2:	4b11      	ldr	r3, [pc, #68]	; (8005d28 <HAL_ADC_ConfigChannel+0x25c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a11      	ldr	r2, [pc, #68]	; (8005d2c <HAL_ADC_ConfigChannel+0x260>)
 8005ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cec:	0c9a      	lsrs	r2, r3, #18
 8005cee:	4613      	mov	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005cf8:	e002      	b.n	8005d00 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1f9      	bne.n	8005cfa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	40012300 	.word	0x40012300
 8005d20:	40012000 	.word	0x40012000
 8005d24:	10000012 	.word	0x10000012
 8005d28:	20000018 	.word	0x20000018
 8005d2c:	431bde83 	.word	0x431bde83

08005d30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d38:	4b79      	ldr	r3, [pc, #484]	; (8005f20 <ADC_Init+0x1f0>)
 8005d3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	431a      	orrs	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6859      	ldr	r1, [r3, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	021a      	lsls	r2, r3, #8
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005d88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6859      	ldr	r1, [r3, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005daa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6899      	ldr	r1, [r3, #8]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc2:	4a58      	ldr	r2, [pc, #352]	; (8005f24 <ADC_Init+0x1f4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d022      	beq.n	8005e0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005dd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6899      	ldr	r1, [r3, #8]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005df8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6899      	ldr	r1, [r3, #8]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	609a      	str	r2, [r3, #8]
 8005e0c:	e00f      	b.n	8005e2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689a      	ldr	r2, [r3, #8]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005e2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0202 	bic.w	r2, r2, #2
 8005e3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6899      	ldr	r1, [r3, #8]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	7e1b      	ldrb	r3, [r3, #24]
 8005e48:	005a      	lsls	r2, r3, #1
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d01b      	beq.n	8005e94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005e7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6859      	ldr	r1, [r3, #4]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	3b01      	subs	r3, #1
 8005e88:	035a      	lsls	r2, r3, #13
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	605a      	str	r2, [r3, #4]
 8005e92:	e007      	b.n	8005ea4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ea2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	051a      	lsls	r2, r3, #20
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005ed8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6899      	ldr	r1, [r3, #8]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ee6:	025a      	lsls	r2, r3, #9
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689a      	ldr	r2, [r3, #8]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005efe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6899      	ldr	r1, [r3, #8]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	029a      	lsls	r2, r3, #10
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	609a      	str	r2, [r3, #8]
}
 8005f14:	bf00      	nop
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	40012300 	.word	0x40012300
 8005f24:	0f000001 	.word	0x0f000001

08005f28 <__NVIC_SetPriorityGrouping>:
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f38:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <__NVIC_SetPriorityGrouping+0x44>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f44:	4013      	ands	r3, r2
 8005f46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f5a:	4a04      	ldr	r2, [pc, #16]	; (8005f6c <__NVIC_SetPriorityGrouping+0x44>)
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	60d3      	str	r3, [r2, #12]
}
 8005f60:	bf00      	nop
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	e000ed00 	.word	0xe000ed00

08005f70 <__NVIC_GetPriorityGrouping>:
{
 8005f70:	b480      	push	{r7}
 8005f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f74:	4b04      	ldr	r3, [pc, #16]	; (8005f88 <__NVIC_GetPriorityGrouping+0x18>)
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	0a1b      	lsrs	r3, r3, #8
 8005f7a:	f003 0307 	and.w	r3, r3, #7
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	e000ed00 	.word	0xe000ed00

08005f8c <__NVIC_EnableIRQ>:
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	4603      	mov	r3, r0
 8005f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	db0b      	blt.n	8005fb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f9e:	79fb      	ldrb	r3, [r7, #7]
 8005fa0:	f003 021f 	and.w	r2, r3, #31
 8005fa4:	4907      	ldr	r1, [pc, #28]	; (8005fc4 <__NVIC_EnableIRQ+0x38>)
 8005fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005faa:	095b      	lsrs	r3, r3, #5
 8005fac:	2001      	movs	r0, #1
 8005fae:	fa00 f202 	lsl.w	r2, r0, r2
 8005fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	e000e100 	.word	0xe000e100

08005fc8 <__NVIC_SetPriority>:
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	4603      	mov	r3, r0
 8005fd0:	6039      	str	r1, [r7, #0]
 8005fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	db0a      	blt.n	8005ff2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	490c      	ldr	r1, [pc, #48]	; (8006014 <__NVIC_SetPriority+0x4c>)
 8005fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fe6:	0112      	lsls	r2, r2, #4
 8005fe8:	b2d2      	uxtb	r2, r2
 8005fea:	440b      	add	r3, r1
 8005fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005ff0:	e00a      	b.n	8006008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	4908      	ldr	r1, [pc, #32]	; (8006018 <__NVIC_SetPriority+0x50>)
 8005ff8:	79fb      	ldrb	r3, [r7, #7]
 8005ffa:	f003 030f 	and.w	r3, r3, #15
 8005ffe:	3b04      	subs	r3, #4
 8006000:	0112      	lsls	r2, r2, #4
 8006002:	b2d2      	uxtb	r2, r2
 8006004:	440b      	add	r3, r1
 8006006:	761a      	strb	r2, [r3, #24]
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	e000e100 	.word	0xe000e100
 8006018:	e000ed00 	.word	0xe000ed00

0800601c <NVIC_EncodePriority>:
{
 800601c:	b480      	push	{r7}
 800601e:	b089      	sub	sp, #36	; 0x24
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f003 0307 	and.w	r3, r3, #7
 800602e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	f1c3 0307 	rsb	r3, r3, #7
 8006036:	2b04      	cmp	r3, #4
 8006038:	bf28      	it	cs
 800603a:	2304      	movcs	r3, #4
 800603c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	3304      	adds	r3, #4
 8006042:	2b06      	cmp	r3, #6
 8006044:	d902      	bls.n	800604c <NVIC_EncodePriority+0x30>
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	3b03      	subs	r3, #3
 800604a:	e000      	b.n	800604e <NVIC_EncodePriority+0x32>
 800604c:	2300      	movs	r3, #0
 800604e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006050:	f04f 32ff 	mov.w	r2, #4294967295
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	fa02 f303 	lsl.w	r3, r2, r3
 800605a:	43da      	mvns	r2, r3
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	401a      	ands	r2, r3
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006064:	f04f 31ff 	mov.w	r1, #4294967295
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	fa01 f303 	lsl.w	r3, r1, r3
 800606e:	43d9      	mvns	r1, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006074:	4313      	orrs	r3, r2
}
 8006076:	4618      	mov	r0, r3
 8006078:	3724      	adds	r7, #36	; 0x24
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b082      	sub	sp, #8
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7ff ff4c 	bl	8005f28 <__NVIC_SetPriorityGrouping>
}
 8006090:	bf00      	nop
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	4603      	mov	r3, r0
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
 80060a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060aa:	f7ff ff61 	bl	8005f70 <__NVIC_GetPriorityGrouping>
 80060ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	68b9      	ldr	r1, [r7, #8]
 80060b4:	6978      	ldr	r0, [r7, #20]
 80060b6:	f7ff ffb1 	bl	800601c <NVIC_EncodePriority>
 80060ba:	4602      	mov	r2, r0
 80060bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060c0:	4611      	mov	r1, r2
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7ff ff80 	bl	8005fc8 <__NVIC_SetPriority>
}
 80060c8:	bf00      	nop
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060de:	4618      	mov	r0, r3
 80060e0:	f7ff ff54 	bl	8005f8c <__NVIC_EnableIRQ>
}
 80060e4:	bf00      	nop
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80060fa:	f7ff fb09 	bl	8005710 <HAL_GetTick>
 80060fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b02      	cmp	r3, #2
 800610a:	d008      	beq.n	800611e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2280      	movs	r2, #128	; 0x80
 8006110:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e052      	b.n	80061c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 0216 	bic.w	r2, r2, #22
 800612c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695a      	ldr	r2, [r3, #20]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800613c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	2b00      	cmp	r3, #0
 8006144:	d103      	bne.n	800614e <HAL_DMA_Abort+0x62>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800614a:	2b00      	cmp	r3, #0
 800614c:	d007      	beq.n	800615e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0208 	bic.w	r2, r2, #8
 800615c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0201 	bic.w	r2, r2, #1
 800616c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800616e:	e013      	b.n	8006198 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006170:	f7ff face 	bl	8005710 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b05      	cmp	r3, #5
 800617c:	d90c      	bls.n	8006198 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2220      	movs	r2, #32
 8006182:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2203      	movs	r2, #3
 8006188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e015      	b.n	80061c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1e4      	bne.n	8006170 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061aa:	223f      	movs	r2, #63	; 0x3f
 80061ac:	409a      	lsls	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d004      	beq.n	80061ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2280      	movs	r2, #128	; 0x80
 80061e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e00c      	b.n	8006204 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2205      	movs	r2, #5
 80061ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0201 	bic.w	r2, r2, #1
 8006200:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006210:	b480      	push	{r7}
 8006212:	b089      	sub	sp, #36	; 0x24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800621a:	2300      	movs	r3, #0
 800621c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800621e:	2300      	movs	r3, #0
 8006220:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006222:	2300      	movs	r3, #0
 8006224:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006226:	2300      	movs	r3, #0
 8006228:	61fb      	str	r3, [r7, #28]
 800622a:	e165      	b.n	80064f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800622c:	2201      	movs	r2, #1
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	fa02 f303 	lsl.w	r3, r2, r3
 8006234:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	4013      	ands	r3, r2
 800623e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	429a      	cmp	r2, r3
 8006246:	f040 8154 	bne.w	80064f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	2b01      	cmp	r3, #1
 8006254:	d005      	beq.n	8006262 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800625e:	2b02      	cmp	r3, #2
 8006260:	d130      	bne.n	80062c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	2203      	movs	r2, #3
 800626e:	fa02 f303 	lsl.w	r3, r2, r3
 8006272:	43db      	mvns	r3, r3
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	4013      	ands	r3, r2
 8006278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	fa02 f303 	lsl.w	r3, r2, r3
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	4313      	orrs	r3, r2
 800628a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006298:	2201      	movs	r2, #1
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	fa02 f303 	lsl.w	r3, r2, r3
 80062a0:	43db      	mvns	r3, r3
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	4013      	ands	r3, r2
 80062a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	091b      	lsrs	r3, r3, #4
 80062ae:	f003 0201 	and.w	r2, r3, #1
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	fa02 f303 	lsl.w	r3, r2, r3
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f003 0303 	and.w	r3, r3, #3
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d017      	beq.n	8006300 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	2203      	movs	r2, #3
 80062dc:	fa02 f303 	lsl.w	r3, r2, r3
 80062e0:	43db      	mvns	r3, r3
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	4013      	ands	r3, r2
 80062e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	005b      	lsls	r3, r3, #1
 80062f0:	fa02 f303 	lsl.w	r3, r2, r3
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f003 0303 	and.w	r3, r3, #3
 8006308:	2b02      	cmp	r3, #2
 800630a:	d123      	bne.n	8006354 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	08da      	lsrs	r2, r3, #3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	3208      	adds	r2, #8
 8006314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006318:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	f003 0307 	and.w	r3, r3, #7
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	220f      	movs	r2, #15
 8006324:	fa02 f303 	lsl.w	r3, r2, r3
 8006328:	43db      	mvns	r3, r3
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	4013      	ands	r3, r2
 800632e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	691a      	ldr	r2, [r3, #16]
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	fa02 f303 	lsl.w	r3, r2, r3
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	4313      	orrs	r3, r2
 8006344:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	08da      	lsrs	r2, r3, #3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	3208      	adds	r2, #8
 800634e:	69b9      	ldr	r1, [r7, #24]
 8006350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	2203      	movs	r2, #3
 8006360:	fa02 f303 	lsl.w	r3, r2, r3
 8006364:	43db      	mvns	r3, r3
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	4013      	ands	r3, r2
 800636a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f003 0203 	and.w	r2, r3, #3
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	fa02 f303 	lsl.w	r3, r2, r3
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	4313      	orrs	r3, r2
 8006380:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 80ae 	beq.w	80064f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006396:	2300      	movs	r3, #0
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	4b5d      	ldr	r3, [pc, #372]	; (8006510 <HAL_GPIO_Init+0x300>)
 800639c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639e:	4a5c      	ldr	r2, [pc, #368]	; (8006510 <HAL_GPIO_Init+0x300>)
 80063a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063a4:	6453      	str	r3, [r2, #68]	; 0x44
 80063a6:	4b5a      	ldr	r3, [pc, #360]	; (8006510 <HAL_GPIO_Init+0x300>)
 80063a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063b2:	4a58      	ldr	r2, [pc, #352]	; (8006514 <HAL_GPIO_Init+0x304>)
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	089b      	lsrs	r3, r3, #2
 80063b8:	3302      	adds	r3, #2
 80063ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	f003 0303 	and.w	r3, r3, #3
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	220f      	movs	r2, #15
 80063ca:	fa02 f303 	lsl.w	r3, r2, r3
 80063ce:	43db      	mvns	r3, r3
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	4013      	ands	r3, r2
 80063d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a4f      	ldr	r2, [pc, #316]	; (8006518 <HAL_GPIO_Init+0x308>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d025      	beq.n	800642a <HAL_GPIO_Init+0x21a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a4e      	ldr	r2, [pc, #312]	; (800651c <HAL_GPIO_Init+0x30c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d01f      	beq.n	8006426 <HAL_GPIO_Init+0x216>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a4d      	ldr	r2, [pc, #308]	; (8006520 <HAL_GPIO_Init+0x310>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d019      	beq.n	8006422 <HAL_GPIO_Init+0x212>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a4c      	ldr	r2, [pc, #304]	; (8006524 <HAL_GPIO_Init+0x314>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d013      	beq.n	800641e <HAL_GPIO_Init+0x20e>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a4b      	ldr	r2, [pc, #300]	; (8006528 <HAL_GPIO_Init+0x318>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d00d      	beq.n	800641a <HAL_GPIO_Init+0x20a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a4a      	ldr	r2, [pc, #296]	; (800652c <HAL_GPIO_Init+0x31c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d007      	beq.n	8006416 <HAL_GPIO_Init+0x206>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a49      	ldr	r2, [pc, #292]	; (8006530 <HAL_GPIO_Init+0x320>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d101      	bne.n	8006412 <HAL_GPIO_Init+0x202>
 800640e:	2306      	movs	r3, #6
 8006410:	e00c      	b.n	800642c <HAL_GPIO_Init+0x21c>
 8006412:	2307      	movs	r3, #7
 8006414:	e00a      	b.n	800642c <HAL_GPIO_Init+0x21c>
 8006416:	2305      	movs	r3, #5
 8006418:	e008      	b.n	800642c <HAL_GPIO_Init+0x21c>
 800641a:	2304      	movs	r3, #4
 800641c:	e006      	b.n	800642c <HAL_GPIO_Init+0x21c>
 800641e:	2303      	movs	r3, #3
 8006420:	e004      	b.n	800642c <HAL_GPIO_Init+0x21c>
 8006422:	2302      	movs	r3, #2
 8006424:	e002      	b.n	800642c <HAL_GPIO_Init+0x21c>
 8006426:	2301      	movs	r3, #1
 8006428:	e000      	b.n	800642c <HAL_GPIO_Init+0x21c>
 800642a:	2300      	movs	r3, #0
 800642c:	69fa      	ldr	r2, [r7, #28]
 800642e:	f002 0203 	and.w	r2, r2, #3
 8006432:	0092      	lsls	r2, r2, #2
 8006434:	4093      	lsls	r3, r2
 8006436:	69ba      	ldr	r2, [r7, #24]
 8006438:	4313      	orrs	r3, r2
 800643a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800643c:	4935      	ldr	r1, [pc, #212]	; (8006514 <HAL_GPIO_Init+0x304>)
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	089b      	lsrs	r3, r3, #2
 8006442:	3302      	adds	r3, #2
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800644a:	4b3a      	ldr	r3, [pc, #232]	; (8006534 <HAL_GPIO_Init+0x324>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	43db      	mvns	r3, r3
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	4013      	ands	r3, r2
 8006458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006466:	69ba      	ldr	r2, [r7, #24]
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	4313      	orrs	r3, r2
 800646c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800646e:	4a31      	ldr	r2, [pc, #196]	; (8006534 <HAL_GPIO_Init+0x324>)
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006474:	4b2f      	ldr	r3, [pc, #188]	; (8006534 <HAL_GPIO_Init+0x324>)
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	43db      	mvns	r3, r3
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	4013      	ands	r3, r2
 8006482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	4313      	orrs	r3, r2
 8006496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006498:	4a26      	ldr	r2, [pc, #152]	; (8006534 <HAL_GPIO_Init+0x324>)
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800649e:	4b25      	ldr	r3, [pc, #148]	; (8006534 <HAL_GPIO_Init+0x324>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	43db      	mvns	r3, r3
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	4013      	ands	r3, r2
 80064ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	4313      	orrs	r3, r2
 80064c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80064c2:	4a1c      	ldr	r2, [pc, #112]	; (8006534 <HAL_GPIO_Init+0x324>)
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80064c8:	4b1a      	ldr	r3, [pc, #104]	; (8006534 <HAL_GPIO_Init+0x324>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	43db      	mvns	r3, r3
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	4013      	ands	r3, r2
 80064d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80064ec:	4a11      	ldr	r2, [pc, #68]	; (8006534 <HAL_GPIO_Init+0x324>)
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	3301      	adds	r3, #1
 80064f6:	61fb      	str	r3, [r7, #28]
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	2b0f      	cmp	r3, #15
 80064fc:	f67f ae96 	bls.w	800622c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006500:	bf00      	nop
 8006502:	bf00      	nop
 8006504:	3724      	adds	r7, #36	; 0x24
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	40023800 	.word	0x40023800
 8006514:	40013800 	.word	0x40013800
 8006518:	40020000 	.word	0x40020000
 800651c:	40020400 	.word	0x40020400
 8006520:	40020800 	.word	0x40020800
 8006524:	40020c00 	.word	0x40020c00
 8006528:	40021000 	.word	0x40021000
 800652c:	40021400 	.word	0x40021400
 8006530:	40021800 	.word	0x40021800
 8006534:	40013c00 	.word	0x40013c00

08006538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	807b      	strh	r3, [r7, #2]
 8006544:	4613      	mov	r3, r2
 8006546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006548:	787b      	ldrb	r3, [r7, #1]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800654e:	887a      	ldrh	r2, [r7, #2]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006554:	e003      	b.n	800655e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006556:	887b      	ldrh	r3, [r7, #2]
 8006558:	041a      	lsls	r2, r3, #16
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	619a      	str	r2, [r3, #24]
}
 800655e:	bf00      	nop
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800656a:	b480      	push	{r7}
 800656c:	b085      	sub	sp, #20
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	460b      	mov	r3, r1
 8006574:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800657c:	887a      	ldrh	r2, [r7, #2]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4013      	ands	r3, r2
 8006582:	041a      	lsls	r2, r3, #16
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	43d9      	mvns	r1, r3
 8006588:	887b      	ldrh	r3, [r7, #2]
 800658a:	400b      	ands	r3, r1
 800658c:	431a      	orrs	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	619a      	str	r2, [r3, #24]
}
 8006592:	bf00      	nop
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
	...

080065a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e12b      	b.n	800680a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d106      	bne.n	80065cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7fe f8e6 	bl	8004798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2224      	movs	r2, #36	; 0x24
 80065d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0201 	bic.w	r2, r2, #1
 80065e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006602:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006604:	f002 ffd4 	bl	80095b0 <HAL_RCC_GetPCLK1Freq>
 8006608:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	4a81      	ldr	r2, [pc, #516]	; (8006814 <HAL_I2C_Init+0x274>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d807      	bhi.n	8006624 <HAL_I2C_Init+0x84>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4a80      	ldr	r2, [pc, #512]	; (8006818 <HAL_I2C_Init+0x278>)
 8006618:	4293      	cmp	r3, r2
 800661a:	bf94      	ite	ls
 800661c:	2301      	movls	r3, #1
 800661e:	2300      	movhi	r3, #0
 8006620:	b2db      	uxtb	r3, r3
 8006622:	e006      	b.n	8006632 <HAL_I2C_Init+0x92>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4a7d      	ldr	r2, [pc, #500]	; (800681c <HAL_I2C_Init+0x27c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	bf94      	ite	ls
 800662c:	2301      	movls	r3, #1
 800662e:	2300      	movhi	r3, #0
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e0e7      	b.n	800680a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4a78      	ldr	r2, [pc, #480]	; (8006820 <HAL_I2C_Init+0x280>)
 800663e:	fba2 2303 	umull	r2, r3, r2, r3
 8006642:	0c9b      	lsrs	r3, r3, #18
 8006644:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	430a      	orrs	r2, r1
 8006658:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	4a6a      	ldr	r2, [pc, #424]	; (8006814 <HAL_I2C_Init+0x274>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d802      	bhi.n	8006674 <HAL_I2C_Init+0xd4>
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	3301      	adds	r3, #1
 8006672:	e009      	b.n	8006688 <HAL_I2C_Init+0xe8>
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800667a:	fb02 f303 	mul.w	r3, r2, r3
 800667e:	4a69      	ldr	r2, [pc, #420]	; (8006824 <HAL_I2C_Init+0x284>)
 8006680:	fba2 2303 	umull	r2, r3, r2, r3
 8006684:	099b      	lsrs	r3, r3, #6
 8006686:	3301      	adds	r3, #1
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6812      	ldr	r2, [r2, #0]
 800668c:	430b      	orrs	r3, r1
 800668e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800669a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	495c      	ldr	r1, [pc, #368]	; (8006814 <HAL_I2C_Init+0x274>)
 80066a4:	428b      	cmp	r3, r1
 80066a6:	d819      	bhi.n	80066dc <HAL_I2C_Init+0x13c>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	1e59      	subs	r1, r3, #1
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80066b6:	1c59      	adds	r1, r3, #1
 80066b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80066bc:	400b      	ands	r3, r1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00a      	beq.n	80066d8 <HAL_I2C_Init+0x138>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	1e59      	subs	r1, r3, #1
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80066d0:	3301      	adds	r3, #1
 80066d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066d6:	e051      	b.n	800677c <HAL_I2C_Init+0x1dc>
 80066d8:	2304      	movs	r3, #4
 80066da:	e04f      	b.n	800677c <HAL_I2C_Init+0x1dc>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d111      	bne.n	8006708 <HAL_I2C_Init+0x168>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	1e58      	subs	r0, r3, #1
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6859      	ldr	r1, [r3, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	440b      	add	r3, r1
 80066f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80066f6:	3301      	adds	r3, #1
 80066f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	bf0c      	ite	eq
 8006700:	2301      	moveq	r3, #1
 8006702:	2300      	movne	r3, #0
 8006704:	b2db      	uxtb	r3, r3
 8006706:	e012      	b.n	800672e <HAL_I2C_Init+0x18e>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	1e58      	subs	r0, r3, #1
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6859      	ldr	r1, [r3, #4]
 8006710:	460b      	mov	r3, r1
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	440b      	add	r3, r1
 8006716:	0099      	lsls	r1, r3, #2
 8006718:	440b      	add	r3, r1
 800671a:	fbb0 f3f3 	udiv	r3, r0, r3
 800671e:	3301      	adds	r3, #1
 8006720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006724:	2b00      	cmp	r3, #0
 8006726:	bf0c      	ite	eq
 8006728:	2301      	moveq	r3, #1
 800672a:	2300      	movne	r3, #0
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <HAL_I2C_Init+0x196>
 8006732:	2301      	movs	r3, #1
 8006734:	e022      	b.n	800677c <HAL_I2C_Init+0x1dc>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10e      	bne.n	800675c <HAL_I2C_Init+0x1bc>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	1e58      	subs	r0, r3, #1
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6859      	ldr	r1, [r3, #4]
 8006746:	460b      	mov	r3, r1
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	440b      	add	r3, r1
 800674c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006750:	3301      	adds	r3, #1
 8006752:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800675a:	e00f      	b.n	800677c <HAL_I2C_Init+0x1dc>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	1e58      	subs	r0, r3, #1
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6859      	ldr	r1, [r3, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	440b      	add	r3, r1
 800676a:	0099      	lsls	r1, r3, #2
 800676c:	440b      	add	r3, r1
 800676e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006772:	3301      	adds	r3, #1
 8006774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006778:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800677c:	6879      	ldr	r1, [r7, #4]
 800677e:	6809      	ldr	r1, [r1, #0]
 8006780:	4313      	orrs	r3, r2
 8006782:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	69da      	ldr	r2, [r3, #28]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	431a      	orrs	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80067aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	6911      	ldr	r1, [r2, #16]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	68d2      	ldr	r2, [r2, #12]
 80067b6:	4311      	orrs	r1, r2
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6812      	ldr	r2, [r2, #0]
 80067bc:	430b      	orrs	r3, r1
 80067be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	695a      	ldr	r2, [r3, #20]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	431a      	orrs	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f042 0201 	orr.w	r2, r2, #1
 80067ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2220      	movs	r2, #32
 80067f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	000186a0 	.word	0x000186a0
 8006818:	001e847f 	.word	0x001e847f
 800681c:	003d08ff 	.word	0x003d08ff
 8006820:	431bde83 	.word	0x431bde83
 8006824:	10624dd3 	.word	0x10624dd3

08006828 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b088      	sub	sp, #32
 800682c:	af02      	add	r7, sp, #8
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	607a      	str	r2, [r7, #4]
 8006832:	461a      	mov	r2, r3
 8006834:	460b      	mov	r3, r1
 8006836:	817b      	strh	r3, [r7, #10]
 8006838:	4613      	mov	r3, r2
 800683a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800683c:	f7fe ff68 	bl	8005710 <HAL_GetTick>
 8006840:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b20      	cmp	r3, #32
 800684c:	f040 80e0 	bne.w	8006a10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	2319      	movs	r3, #25
 8006856:	2201      	movs	r2, #1
 8006858:	4970      	ldr	r1, [pc, #448]	; (8006a1c <HAL_I2C_Master_Transmit+0x1f4>)
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f001 f910 	bl	8007a80 <I2C_WaitOnFlagUntilTimeout>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006866:	2302      	movs	r3, #2
 8006868:	e0d3      	b.n	8006a12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006870:	2b01      	cmp	r3, #1
 8006872:	d101      	bne.n	8006878 <HAL_I2C_Master_Transmit+0x50>
 8006874:	2302      	movs	r3, #2
 8006876:	e0cc      	b.n	8006a12 <HAL_I2C_Master_Transmit+0x1ea>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b01      	cmp	r3, #1
 800688c:	d007      	beq.n	800689e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f042 0201 	orr.w	r2, r2, #1
 800689c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2221      	movs	r2, #33	; 0x21
 80068b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2210      	movs	r2, #16
 80068ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	893a      	ldrh	r2, [r7, #8]
 80068ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4a50      	ldr	r2, [pc, #320]	; (8006a20 <HAL_I2C_Master_Transmit+0x1f8>)
 80068de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80068e0:	8979      	ldrh	r1, [r7, #10]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	6a3a      	ldr	r2, [r7, #32]
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 fdfc 	bl	80074e4 <I2C_MasterRequestWrite>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e08d      	b.n	8006a12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068f6:	2300      	movs	r3, #0
 80068f8:	613b      	str	r3, [r7, #16]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	613b      	str	r3, [r7, #16]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	613b      	str	r3, [r7, #16]
 800690a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800690c:	e066      	b.n	80069dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	6a39      	ldr	r1, [r7, #32]
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f001 f98a 	bl	8007c2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00d      	beq.n	800693a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	2b04      	cmp	r3, #4
 8006924:	d107      	bne.n	8006936 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006934:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e06b      	b.n	8006a12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	781a      	ldrb	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006954:	b29b      	uxth	r3, r3
 8006956:	3b01      	subs	r3, #1
 8006958:	b29a      	uxth	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006962:	3b01      	subs	r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	f003 0304 	and.w	r3, r3, #4
 8006974:	2b04      	cmp	r3, #4
 8006976:	d11b      	bne.n	80069b0 <HAL_I2C_Master_Transmit+0x188>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800697c:	2b00      	cmp	r3, #0
 800697e:	d017      	beq.n	80069b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	781a      	ldrb	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699a:	b29b      	uxth	r3, r3
 800699c:	3b01      	subs	r3, #1
 800699e:	b29a      	uxth	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a8:	3b01      	subs	r3, #1
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	6a39      	ldr	r1, [r7, #32]
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f001 f97a 	bl	8007cae <I2C_WaitOnBTFFlagUntilTimeout>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00d      	beq.n	80069dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c4:	2b04      	cmp	r3, #4
 80069c6:	d107      	bne.n	80069d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e01a      	b.n	8006a12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d194      	bne.n	800690e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	e000      	b.n	8006a12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006a10:	2302      	movs	r3, #2
  }
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	00100002 	.word	0x00100002
 8006a20:	ffff0000 	.word	0xffff0000

08006a24 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b08c      	sub	sp, #48	; 0x30
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	607a      	str	r2, [r7, #4]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	460b      	mov	r3, r1
 8006a32:	817b      	strh	r3, [r7, #10]
 8006a34:	4613      	mov	r3, r2
 8006a36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a38:	f7fe fe6a 	bl	8005710 <HAL_GetTick>
 8006a3c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b20      	cmp	r3, #32
 8006a48:	f040 820b 	bne.w	8006e62 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	2319      	movs	r3, #25
 8006a52:	2201      	movs	r2, #1
 8006a54:	497c      	ldr	r1, [pc, #496]	; (8006c48 <HAL_I2C_Master_Receive+0x224>)
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f001 f812 	bl	8007a80 <I2C_WaitOnFlagUntilTimeout>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d001      	beq.n	8006a66 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006a62:	2302      	movs	r3, #2
 8006a64:	e1fe      	b.n	8006e64 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d101      	bne.n	8006a74 <HAL_I2C_Master_Receive+0x50>
 8006a70:	2302      	movs	r3, #2
 8006a72:	e1f7      	b.n	8006e64 <HAL_I2C_Master_Receive+0x440>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d007      	beq.n	8006a9a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f042 0201 	orr.w	r2, r2, #1
 8006a98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006aa8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2222      	movs	r2, #34	; 0x22
 8006aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2210      	movs	r2, #16
 8006ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	893a      	ldrh	r2, [r7, #8]
 8006aca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	4a5c      	ldr	r2, [pc, #368]	; (8006c4c <HAL_I2C_Master_Receive+0x228>)
 8006ada:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006adc:	8979      	ldrh	r1, [r7, #10]
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f000 fd80 	bl	80075e8 <I2C_MasterRequestRead>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e1b8      	b.n	8006e64 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d113      	bne.n	8006b22 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006afa:	2300      	movs	r3, #0
 8006afc:	623b      	str	r3, [r7, #32]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	623b      	str	r3, [r7, #32]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	623b      	str	r3, [r7, #32]
 8006b0e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	e18c      	b.n	8006e3c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d11b      	bne.n	8006b62 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61fb      	str	r3, [r7, #28]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	61fb      	str	r3, [r7, #28]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	61fb      	str	r3, [r7, #28]
 8006b4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	e16c      	b.n	8006e3c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d11b      	bne.n	8006ba2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b78:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	61bb      	str	r3, [r7, #24]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	61bb      	str	r3, [r7, #24]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	61bb      	str	r3, [r7, #24]
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	e14c      	b.n	8006e3c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006bb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	617b      	str	r3, [r7, #20]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	617b      	str	r3, [r7, #20]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	617b      	str	r3, [r7, #20]
 8006bc6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006bc8:	e138      	b.n	8006e3c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	f200 80f1 	bhi.w	8006db6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d123      	bne.n	8006c24 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f001 f8a5 	bl	8007d30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e139      	b.n	8006e64 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691a      	ldr	r2, [r3, #16]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c22:	e10b      	b.n	8006e3c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d14e      	bne.n	8006cca <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c32:	2200      	movs	r2, #0
 8006c34:	4906      	ldr	r1, [pc, #24]	; (8006c50 <HAL_I2C_Master_Receive+0x22c>)
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f000 ff22 	bl	8007a80 <I2C_WaitOnFlagUntilTimeout>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d008      	beq.n	8006c54 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e10e      	b.n	8006e64 <HAL_I2C_Master_Receive+0x440>
 8006c46:	bf00      	nop
 8006c48:	00100002 	.word	0x00100002
 8006c4c:	ffff0000 	.word	0xffff0000
 8006c50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	691a      	ldr	r2, [r3, #16]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	b2d2      	uxtb	r2, r2
 8006c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c80:	3b01      	subs	r3, #1
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	691a      	ldr	r2, [r3, #16]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	b2d2      	uxtb	r2, r2
 8006ca2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cc8:	e0b8      	b.n	8006e3c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	4966      	ldr	r1, [pc, #408]	; (8006e6c <HAL_I2C_Master_Receive+0x448>)
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 fed3 	bl	8007a80 <I2C_WaitOnFlagUntilTimeout>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e0bf      	b.n	8006e64 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	691a      	ldr	r2, [r3, #16]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	b2d2      	uxtb	r2, r2
 8006d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d10:	3b01      	subs	r3, #1
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	494f      	ldr	r1, [pc, #316]	; (8006e6c <HAL_I2C_Master_Receive+0x448>)
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f000 fea5 	bl	8007a80 <I2C_WaitOnFlagUntilTimeout>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e091      	b.n	8006e64 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	691a      	ldr	r2, [r3, #16]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5a:	b2d2      	uxtb	r2, r2
 8006d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	691a      	ldr	r2, [r3, #16]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8c:	b2d2      	uxtb	r2, r2
 8006d8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	3b01      	subs	r3, #1
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006db4:	e042      	b.n	8006e3c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006db8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f000 ffb8 	bl	8007d30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e04c      	b.n	8006e64 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	691a      	ldr	r2, [r3, #16]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd4:	b2d2      	uxtb	r2, r2
 8006dd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	f003 0304 	and.w	r3, r3, #4
 8006e06:	2b04      	cmp	r3, #4
 8006e08:	d118      	bne.n	8006e3c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	691a      	ldr	r2, [r3, #16]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	b2d2      	uxtb	r2, r2
 8006e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	3b01      	subs	r3, #1
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f47f aec2 	bne.w	8006bca <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	e000      	b.n	8006e64 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006e62:	2302      	movs	r3, #2
  }
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3728      	adds	r7, #40	; 0x28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	00010004 	.word	0x00010004

08006e70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af02      	add	r7, sp, #8
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	4608      	mov	r0, r1
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	4603      	mov	r3, r0
 8006e80:	817b      	strh	r3, [r7, #10]
 8006e82:	460b      	mov	r3, r1
 8006e84:	813b      	strh	r3, [r7, #8]
 8006e86:	4613      	mov	r3, r2
 8006e88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006e8a:	f7fe fc41 	bl	8005710 <HAL_GetTick>
 8006e8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	f040 80d9 	bne.w	8007050 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	2319      	movs	r3, #25
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	496d      	ldr	r1, [pc, #436]	; (800705c <HAL_I2C_Mem_Write+0x1ec>)
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 fde9 	bl	8007a80 <I2C_WaitOnFlagUntilTimeout>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	e0cc      	b.n	8007052 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d101      	bne.n	8006ec6 <HAL_I2C_Mem_Write+0x56>
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	e0c5      	b.n	8007052 <HAL_I2C_Mem_Write+0x1e2>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d007      	beq.n	8006eec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0201 	orr.w	r2, r2, #1
 8006eea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006efa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2221      	movs	r2, #33	; 0x21
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2240      	movs	r2, #64	; 0x40
 8006f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a3a      	ldr	r2, [r7, #32]
 8006f16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4a4d      	ldr	r2, [pc, #308]	; (8007060 <HAL_I2C_Mem_Write+0x1f0>)
 8006f2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f2e:	88f8      	ldrh	r0, [r7, #6]
 8006f30:	893a      	ldrh	r2, [r7, #8]
 8006f32:	8979      	ldrh	r1, [r7, #10]
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	9301      	str	r3, [sp, #4]
 8006f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 fc20 	bl	8007784 <I2C_RequestMemoryWrite>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d052      	beq.n	8006ff0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e081      	b.n	8007052 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f000 fe6a 	bl	8007c2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00d      	beq.n	8006f7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	d107      	bne.n	8006f76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e06b      	b.n	8007052 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	781a      	ldrb	r2, [r3, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f94:	3b01      	subs	r3, #1
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	f003 0304 	and.w	r3, r3, #4
 8006fb4:	2b04      	cmp	r3, #4
 8006fb6:	d11b      	bne.n	8006ff0 <HAL_I2C_Mem_Write+0x180>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d017      	beq.n	8006ff0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc4:	781a      	ldrb	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1aa      	bne.n	8006f4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 fe56 	bl	8007cae <I2C_WaitOnBTFFlagUntilTimeout>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00d      	beq.n	8007024 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700c:	2b04      	cmp	r3, #4
 800700e:	d107      	bne.n	8007020 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800701e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e016      	b.n	8007052 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2220      	movs	r2, #32
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	e000      	b.n	8007052 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007050:	2302      	movs	r3, #2
  }
}
 8007052:	4618      	mov	r0, r3
 8007054:	3718      	adds	r7, #24
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	00100002 	.word	0x00100002
 8007060:	ffff0000 	.word	0xffff0000

08007064 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b08c      	sub	sp, #48	; 0x30
 8007068:	af02      	add	r7, sp, #8
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	4608      	mov	r0, r1
 800706e:	4611      	mov	r1, r2
 8007070:	461a      	mov	r2, r3
 8007072:	4603      	mov	r3, r0
 8007074:	817b      	strh	r3, [r7, #10]
 8007076:	460b      	mov	r3, r1
 8007078:	813b      	strh	r3, [r7, #8]
 800707a:	4613      	mov	r3, r2
 800707c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800707e:	f7fe fb47 	bl	8005710 <HAL_GetTick>
 8007082:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b20      	cmp	r3, #32
 800708e:	f040 8208 	bne.w	80074a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	2319      	movs	r3, #25
 8007098:	2201      	movs	r2, #1
 800709a:	497b      	ldr	r1, [pc, #492]	; (8007288 <HAL_I2C_Mem_Read+0x224>)
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 fcef 	bl	8007a80 <I2C_WaitOnFlagUntilTimeout>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80070a8:	2302      	movs	r3, #2
 80070aa:	e1fb      	b.n	80074a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d101      	bne.n	80070ba <HAL_I2C_Mem_Read+0x56>
 80070b6:	2302      	movs	r3, #2
 80070b8:	e1f4      	b.n	80074a4 <HAL_I2C_Mem_Read+0x440>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0301 	and.w	r3, r3, #1
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d007      	beq.n	80070e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f042 0201 	orr.w	r2, r2, #1
 80070de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2222      	movs	r2, #34	; 0x22
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2240      	movs	r2, #64	; 0x40
 80070fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800710a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007110:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007116:	b29a      	uxth	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4a5b      	ldr	r2, [pc, #364]	; (800728c <HAL_I2C_Mem_Read+0x228>)
 8007120:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007122:	88f8      	ldrh	r0, [r7, #6]
 8007124:	893a      	ldrh	r2, [r7, #8]
 8007126:	8979      	ldrh	r1, [r7, #10]
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	9301      	str	r3, [sp, #4]
 800712c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	4603      	mov	r3, r0
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f000 fbbc 	bl	80078b0 <I2C_RequestMemoryRead>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e1b0      	b.n	80074a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007146:	2b00      	cmp	r3, #0
 8007148:	d113      	bne.n	8007172 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800714a:	2300      	movs	r3, #0
 800714c:	623b      	str	r3, [r7, #32]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	623b      	str	r3, [r7, #32]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	623b      	str	r3, [r7, #32]
 800715e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	e184      	b.n	800747c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007176:	2b01      	cmp	r3, #1
 8007178:	d11b      	bne.n	80071b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007188:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800718a:	2300      	movs	r3, #0
 800718c:	61fb      	str	r3, [r7, #28]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	61fb      	str	r3, [r7, #28]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	61fb      	str	r3, [r7, #28]
 800719e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ae:	601a      	str	r2, [r3, #0]
 80071b0:	e164      	b.n	800747c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d11b      	bne.n	80071f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071da:	2300      	movs	r3, #0
 80071dc:	61bb      	str	r3, [r7, #24]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	61bb      	str	r3, [r7, #24]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	61bb      	str	r3, [r7, #24]
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	e144      	b.n	800747c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071f2:	2300      	movs	r3, #0
 80071f4:	617b      	str	r3, [r7, #20]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	617b      	str	r3, [r7, #20]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	617b      	str	r3, [r7, #20]
 8007206:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007208:	e138      	b.n	800747c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800720e:	2b03      	cmp	r3, #3
 8007210:	f200 80f1 	bhi.w	80073f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007218:	2b01      	cmp	r3, #1
 800721a:	d123      	bne.n	8007264 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800721c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800721e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 fd85 	bl	8007d30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e139      	b.n	80074a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	691a      	ldr	r2, [r3, #16]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723a:	b2d2      	uxtb	r2, r2
 800723c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007258:	b29b      	uxth	r3, r3
 800725a:	3b01      	subs	r3, #1
 800725c:	b29a      	uxth	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007262:	e10b      	b.n	800747c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007268:	2b02      	cmp	r3, #2
 800726a:	d14e      	bne.n	800730a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007272:	2200      	movs	r2, #0
 8007274:	4906      	ldr	r1, [pc, #24]	; (8007290 <HAL_I2C_Mem_Read+0x22c>)
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 fc02 	bl	8007a80 <I2C_WaitOnFlagUntilTimeout>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d008      	beq.n	8007294 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e10e      	b.n	80074a4 <HAL_I2C_Mem_Read+0x440>
 8007286:	bf00      	nop
 8007288:	00100002 	.word	0x00100002
 800728c:	ffff0000 	.word	0xffff0000
 8007290:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	691a      	ldr	r2, [r3, #16]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	b2d2      	uxtb	r2, r2
 80072b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c0:	3b01      	subs	r3, #1
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	691a      	ldr	r2, [r3, #16]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	b2d2      	uxtb	r2, r2
 80072e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	1c5a      	adds	r2, r3, #1
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072f2:	3b01      	subs	r3, #1
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072fe:	b29b      	uxth	r3, r3
 8007300:	3b01      	subs	r3, #1
 8007302:	b29a      	uxth	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007308:	e0b8      	b.n	800747c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007310:	2200      	movs	r2, #0
 8007312:	4966      	ldr	r1, [pc, #408]	; (80074ac <HAL_I2C_Mem_Read+0x448>)
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f000 fbb3 	bl	8007a80 <I2C_WaitOnFlagUntilTimeout>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e0bf      	b.n	80074a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007332:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	691a      	ldr	r2, [r3, #16]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	b2d2      	uxtb	r2, r2
 8007340:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007350:	3b01      	subs	r3, #1
 8007352:	b29a      	uxth	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800735c:	b29b      	uxth	r3, r3
 800735e:	3b01      	subs	r3, #1
 8007360:	b29a      	uxth	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736c:	2200      	movs	r2, #0
 800736e:	494f      	ldr	r1, [pc, #316]	; (80074ac <HAL_I2C_Mem_Read+0x448>)
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 fb85 	bl	8007a80 <I2C_WaitOnFlagUntilTimeout>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e091      	b.n	80074a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800738e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	691a      	ldr	r2, [r3, #16]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	b2d2      	uxtb	r2, r2
 800739c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a2:	1c5a      	adds	r2, r3, #1
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ac:	3b01      	subs	r3, #1
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	3b01      	subs	r3, #1
 80073bc:	b29a      	uxth	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	691a      	ldr	r2, [r3, #16]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	b2d2      	uxtb	r2, r2
 80073ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073de:	3b01      	subs	r3, #1
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	3b01      	subs	r3, #1
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073f4:	e042      	b.n	800747c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 fc98 	bl	8007d30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e04c      	b.n	80074a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	691a      	ldr	r2, [r3, #16]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007414:	b2d2      	uxtb	r2, r2
 8007416:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007426:	3b01      	subs	r3, #1
 8007428:	b29a      	uxth	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007432:	b29b      	uxth	r3, r3
 8007434:	3b01      	subs	r3, #1
 8007436:	b29a      	uxth	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	f003 0304 	and.w	r3, r3, #4
 8007446:	2b04      	cmp	r3, #4
 8007448:	d118      	bne.n	800747c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	691a      	ldr	r2, [r3, #16]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007454:	b2d2      	uxtb	r2, r2
 8007456:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745c:	1c5a      	adds	r2, r3, #1
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007466:	3b01      	subs	r3, #1
 8007468:	b29a      	uxth	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007472:	b29b      	uxth	r3, r3
 8007474:	3b01      	subs	r3, #1
 8007476:	b29a      	uxth	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007480:	2b00      	cmp	r3, #0
 8007482:	f47f aec2 	bne.w	800720a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2220      	movs	r2, #32
 800748a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800749e:	2300      	movs	r3, #0
 80074a0:	e000      	b.n	80074a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80074a2:	2302      	movs	r3, #2
  }
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3728      	adds	r7, #40	; 0x28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	00010004 	.word	0x00010004

080074b0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074be:	b2db      	uxtb	r3, r3
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80074d8:	4618      	mov	r0, r3
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b088      	sub	sp, #32
 80074e8:	af02      	add	r7, sp, #8
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	607a      	str	r2, [r7, #4]
 80074ee:	603b      	str	r3, [r7, #0]
 80074f0:	460b      	mov	r3, r1
 80074f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d006      	beq.n	800750e <I2C_MasterRequestWrite+0x2a>
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d003      	beq.n	800750e <I2C_MasterRequestWrite+0x2a>
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800750c:	d108      	bne.n	8007520 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	e00b      	b.n	8007538 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007524:	2b12      	cmp	r3, #18
 8007526:	d107      	bne.n	8007538 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007536:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 fa9b 	bl	8007a80 <I2C_WaitOnFlagUntilTimeout>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00d      	beq.n	800756c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800755a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800755e:	d103      	bne.n	8007568 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007566:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e035      	b.n	80075d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007574:	d108      	bne.n	8007588 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007576:	897b      	ldrh	r3, [r7, #10]
 8007578:	b2db      	uxtb	r3, r3
 800757a:	461a      	mov	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007584:	611a      	str	r2, [r3, #16]
 8007586:	e01b      	b.n	80075c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007588:	897b      	ldrh	r3, [r7, #10]
 800758a:	11db      	asrs	r3, r3, #7
 800758c:	b2db      	uxtb	r3, r3
 800758e:	f003 0306 	and.w	r3, r3, #6
 8007592:	b2db      	uxtb	r3, r3
 8007594:	f063 030f 	orn	r3, r3, #15
 8007598:	b2da      	uxtb	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	490e      	ldr	r1, [pc, #56]	; (80075e0 <I2C_MasterRequestWrite+0xfc>)
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 fac1 	bl	8007b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d001      	beq.n	80075b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e010      	b.n	80075d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80075b6:	897b      	ldrh	r3, [r7, #10]
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	4907      	ldr	r1, [pc, #28]	; (80075e4 <I2C_MasterRequestWrite+0x100>)
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 fab1 	bl	8007b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e000      	b.n	80075d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3718      	adds	r7, #24
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	00010008 	.word	0x00010008
 80075e4:	00010002 	.word	0x00010002

080075e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b088      	sub	sp, #32
 80075ec:	af02      	add	r7, sp, #8
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	607a      	str	r2, [r7, #4]
 80075f2:	603b      	str	r3, [r7, #0]
 80075f4:	460b      	mov	r3, r1
 80075f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800760c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	2b08      	cmp	r3, #8
 8007612:	d006      	beq.n	8007622 <I2C_MasterRequestRead+0x3a>
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d003      	beq.n	8007622 <I2C_MasterRequestRead+0x3a>
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007620:	d108      	bne.n	8007634 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	e00b      	b.n	800764c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007638:	2b11      	cmp	r3, #17
 800763a:	d107      	bne.n	800764c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800764a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 fa11 	bl	8007a80 <I2C_WaitOnFlagUntilTimeout>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00d      	beq.n	8007680 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800766e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007672:	d103      	bne.n	800767c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800767a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e079      	b.n	8007774 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007688:	d108      	bne.n	800769c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800768a:	897b      	ldrh	r3, [r7, #10]
 800768c:	b2db      	uxtb	r3, r3
 800768e:	f043 0301 	orr.w	r3, r3, #1
 8007692:	b2da      	uxtb	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	611a      	str	r2, [r3, #16]
 800769a:	e05f      	b.n	800775c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800769c:	897b      	ldrh	r3, [r7, #10]
 800769e:	11db      	asrs	r3, r3, #7
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	f003 0306 	and.w	r3, r3, #6
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	f063 030f 	orn	r3, r3, #15
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	4930      	ldr	r1, [pc, #192]	; (800777c <I2C_MasterRequestRead+0x194>)
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f000 fa37 	bl	8007b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d001      	beq.n	80076ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e054      	b.n	8007774 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80076ca:	897b      	ldrh	r3, [r7, #10]
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	4929      	ldr	r1, [pc, #164]	; (8007780 <I2C_MasterRequestRead+0x198>)
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 fa27 	bl	8007b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e044      	b.n	8007774 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076ea:	2300      	movs	r3, #0
 80076ec:	613b      	str	r3, [r7, #16]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	613b      	str	r3, [r7, #16]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	613b      	str	r3, [r7, #16]
 80076fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800770e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 f9af 	bl	8007a80 <I2C_WaitOnFlagUntilTimeout>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00d      	beq.n	8007744 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007736:	d103      	bne.n	8007740 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800773e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e017      	b.n	8007774 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007744:	897b      	ldrh	r3, [r7, #10]
 8007746:	11db      	asrs	r3, r3, #7
 8007748:	b2db      	uxtb	r3, r3
 800774a:	f003 0306 	and.w	r3, r3, #6
 800774e:	b2db      	uxtb	r3, r3
 8007750:	f063 030e 	orn	r3, r3, #14
 8007754:	b2da      	uxtb	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	4907      	ldr	r1, [pc, #28]	; (8007780 <I2C_MasterRequestRead+0x198>)
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f000 f9e3 	bl	8007b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e000      	b.n	8007774 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3718      	adds	r7, #24
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	00010008 	.word	0x00010008
 8007780:	00010002 	.word	0x00010002

08007784 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b088      	sub	sp, #32
 8007788:	af02      	add	r7, sp, #8
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	4608      	mov	r0, r1
 800778e:	4611      	mov	r1, r2
 8007790:	461a      	mov	r2, r3
 8007792:	4603      	mov	r3, r0
 8007794:	817b      	strh	r3, [r7, #10]
 8007796:	460b      	mov	r3, r1
 8007798:	813b      	strh	r3, [r7, #8]
 800779a:	4613      	mov	r3, r2
 800779c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	6a3b      	ldr	r3, [r7, #32]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f000 f960 	bl	8007a80 <I2C_WaitOnFlagUntilTimeout>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00d      	beq.n	80077e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077d4:	d103      	bne.n	80077de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e05f      	b.n	80078a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80077e2:	897b      	ldrh	r3, [r7, #10]
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	461a      	mov	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80077f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	6a3a      	ldr	r2, [r7, #32]
 80077f6:	492d      	ldr	r1, [pc, #180]	; (80078ac <I2C_RequestMemoryWrite+0x128>)
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 f998 	bl	8007b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e04c      	b.n	80078a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007808:	2300      	movs	r3, #0
 800780a:	617b      	str	r3, [r7, #20]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	617b      	str	r3, [r7, #20]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	617b      	str	r3, [r7, #20]
 800781c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800781e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007820:	6a39      	ldr	r1, [r7, #32]
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 fa02 	bl	8007c2c <I2C_WaitOnTXEFlagUntilTimeout>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00d      	beq.n	800784a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007832:	2b04      	cmp	r3, #4
 8007834:	d107      	bne.n	8007846 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007844:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e02b      	b.n	80078a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800784a:	88fb      	ldrh	r3, [r7, #6]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d105      	bne.n	800785c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007850:	893b      	ldrh	r3, [r7, #8]
 8007852:	b2da      	uxtb	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	611a      	str	r2, [r3, #16]
 800785a:	e021      	b.n	80078a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800785c:	893b      	ldrh	r3, [r7, #8]
 800785e:	0a1b      	lsrs	r3, r3, #8
 8007860:	b29b      	uxth	r3, r3
 8007862:	b2da      	uxtb	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800786a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800786c:	6a39      	ldr	r1, [r7, #32]
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 f9dc 	bl	8007c2c <I2C_WaitOnTXEFlagUntilTimeout>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00d      	beq.n	8007896 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787e:	2b04      	cmp	r3, #4
 8007880:	d107      	bne.n	8007892 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007890:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e005      	b.n	80078a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007896:	893b      	ldrh	r3, [r7, #8]
 8007898:	b2da      	uxtb	r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3718      	adds	r7, #24
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	00010002 	.word	0x00010002

080078b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af02      	add	r7, sp, #8
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	4608      	mov	r0, r1
 80078ba:	4611      	mov	r1, r2
 80078bc:	461a      	mov	r2, r3
 80078be:	4603      	mov	r3, r0
 80078c0:	817b      	strh	r3, [r7, #10]
 80078c2:	460b      	mov	r3, r1
 80078c4:	813b      	strh	r3, [r7, #8]
 80078c6:	4613      	mov	r3, r2
 80078c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f000 f8c2 	bl	8007a80 <I2C_WaitOnFlagUntilTimeout>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00d      	beq.n	800791e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800790c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007910:	d103      	bne.n	800791a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007918:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e0aa      	b.n	8007a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800791e:	897b      	ldrh	r3, [r7, #10]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	461a      	mov	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800792c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	6a3a      	ldr	r2, [r7, #32]
 8007932:	4952      	ldr	r1, [pc, #328]	; (8007a7c <I2C_RequestMemoryRead+0x1cc>)
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 f8fa 	bl	8007b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d001      	beq.n	8007944 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e097      	b.n	8007a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007944:	2300      	movs	r3, #0
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	617b      	str	r3, [r7, #20]
 8007958:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800795a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800795c:	6a39      	ldr	r1, [r7, #32]
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 f964 	bl	8007c2c <I2C_WaitOnTXEFlagUntilTimeout>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00d      	beq.n	8007986 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796e:	2b04      	cmp	r3, #4
 8007970:	d107      	bne.n	8007982 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007980:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e076      	b.n	8007a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007986:	88fb      	ldrh	r3, [r7, #6]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d105      	bne.n	8007998 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800798c:	893b      	ldrh	r3, [r7, #8]
 800798e:	b2da      	uxtb	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	611a      	str	r2, [r3, #16]
 8007996:	e021      	b.n	80079dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007998:	893b      	ldrh	r3, [r7, #8]
 800799a:	0a1b      	lsrs	r3, r3, #8
 800799c:	b29b      	uxth	r3, r3
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079a8:	6a39      	ldr	r1, [r7, #32]
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f000 f93e 	bl	8007c2c <I2C_WaitOnTXEFlagUntilTimeout>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00d      	beq.n	80079d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ba:	2b04      	cmp	r3, #4
 80079bc:	d107      	bne.n	80079ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e050      	b.n	8007a74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079d2:	893b      	ldrh	r3, [r7, #8]
 80079d4:	b2da      	uxtb	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079de:	6a39      	ldr	r1, [r7, #32]
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f000 f923 	bl	8007c2c <I2C_WaitOnTXEFlagUntilTimeout>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00d      	beq.n	8007a08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d107      	bne.n	8007a04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e035      	b.n	8007a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 f82b 	bl	8007a80 <I2C_WaitOnFlagUntilTimeout>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00d      	beq.n	8007a4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a3e:	d103      	bne.n	8007a48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e013      	b.n	8007a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007a4c:	897b      	ldrh	r3, [r7, #10]
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	f043 0301 	orr.w	r3, r3, #1
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5e:	6a3a      	ldr	r2, [r7, #32]
 8007a60:	4906      	ldr	r1, [pc, #24]	; (8007a7c <I2C_RequestMemoryRead+0x1cc>)
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f000 f863 	bl	8007b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e000      	b.n	8007a74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	00010002 	.word	0x00010002

08007a80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	603b      	str	r3, [r7, #0]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a90:	e025      	b.n	8007ade <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a98:	d021      	beq.n	8007ade <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a9a:	f7fd fe39 	bl	8005710 <HAL_GetTick>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d302      	bcc.n	8007ab0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d116      	bne.n	8007ade <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aca:	f043 0220 	orr.w	r2, r3, #32
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e023      	b.n	8007b26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	0c1b      	lsrs	r3, r3, #16
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d10d      	bne.n	8007b04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	43da      	mvns	r2, r3
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	4013      	ands	r3, r2
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	bf0c      	ite	eq
 8007afa:	2301      	moveq	r3, #1
 8007afc:	2300      	movne	r3, #0
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	461a      	mov	r2, r3
 8007b02:	e00c      	b.n	8007b1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	43da      	mvns	r2, r3
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	4013      	ands	r3, r2
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	bf0c      	ite	eq
 8007b16:	2301      	moveq	r3, #1
 8007b18:	2300      	movne	r3, #0
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	79fb      	ldrb	r3, [r7, #7]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d0b6      	beq.n	8007a92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b084      	sub	sp, #16
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	60f8      	str	r0, [r7, #12]
 8007b36:	60b9      	str	r1, [r7, #8]
 8007b38:	607a      	str	r2, [r7, #4]
 8007b3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b3c:	e051      	b.n	8007be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	695b      	ldr	r3, [r3, #20]
 8007b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b4c:	d123      	bne.n	8007b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b82:	f043 0204 	orr.w	r2, r3, #4
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e046      	b.n	8007c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9c:	d021      	beq.n	8007be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b9e:	f7fd fdb7 	bl	8005710 <HAL_GetTick>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d302      	bcc.n	8007bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d116      	bne.n	8007be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2220      	movs	r2, #32
 8007bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bce:	f043 0220 	orr.w	r2, r3, #32
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e020      	b.n	8007c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	0c1b      	lsrs	r3, r3, #16
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d10c      	bne.n	8007c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	43da      	mvns	r2, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	bf14      	ite	ne
 8007bfe:	2301      	movne	r3, #1
 8007c00:	2300      	moveq	r3, #0
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	e00b      	b.n	8007c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	43da      	mvns	r2, r3
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	4013      	ands	r3, r2
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	bf14      	ite	ne
 8007c18:	2301      	movne	r3, #1
 8007c1a:	2300      	moveq	r3, #0
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d18d      	bne.n	8007b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c38:	e02d      	b.n	8007c96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f000 f8ce 	bl	8007ddc <I2C_IsAcknowledgeFailed>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e02d      	b.n	8007ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c50:	d021      	beq.n	8007c96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c52:	f7fd fd5d 	bl	8005710 <HAL_GetTick>
 8007c56:	4602      	mov	r2, r0
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d302      	bcc.n	8007c68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d116      	bne.n	8007c96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2220      	movs	r2, #32
 8007c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c82:	f043 0220 	orr.w	r2, r3, #32
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e007      	b.n	8007ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	695b      	ldr	r3, [r3, #20]
 8007c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca0:	2b80      	cmp	r3, #128	; 0x80
 8007ca2:	d1ca      	bne.n	8007c3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b084      	sub	sp, #16
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	60f8      	str	r0, [r7, #12]
 8007cb6:	60b9      	str	r1, [r7, #8]
 8007cb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007cba:	e02d      	b.n	8007d18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 f88d 	bl	8007ddc <I2C_IsAcknowledgeFailed>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e02d      	b.n	8007d28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd2:	d021      	beq.n	8007d18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cd4:	f7fd fd1c 	bl	8005710 <HAL_GetTick>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d302      	bcc.n	8007cea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d116      	bne.n	8007d18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d04:	f043 0220 	orr.w	r2, r3, #32
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e007      	b.n	8007d28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	f003 0304 	and.w	r3, r3, #4
 8007d22:	2b04      	cmp	r3, #4
 8007d24:	d1ca      	bne.n	8007cbc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d3c:	e042      	b.n	8007dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	695b      	ldr	r3, [r3, #20]
 8007d44:	f003 0310 	and.w	r3, r3, #16
 8007d48:	2b10      	cmp	r3, #16
 8007d4a:	d119      	bne.n	8007d80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f06f 0210 	mvn.w	r2, #16
 8007d54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e029      	b.n	8007dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d80:	f7fd fcc6 	bl	8005710 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d302      	bcc.n	8007d96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d116      	bne.n	8007dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db0:	f043 0220 	orr.w	r2, r3, #32
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e007      	b.n	8007dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dce:	2b40      	cmp	r3, #64	; 0x40
 8007dd0:	d1b5      	bne.n	8007d3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	695b      	ldr	r3, [r3, #20]
 8007dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007df2:	d11b      	bne.n	8007e2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007dfc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2220      	movs	r2, #32
 8007e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e18:	f043 0204 	orr.w	r2, r3, #4
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e000      	b.n	8007e2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007e3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e3c:	b08f      	sub	sp, #60	; 0x3c
 8007e3e:	af0a      	add	r7, sp, #40	; 0x28
 8007e40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d101      	bne.n	8007e4c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e116      	b.n	800807a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d106      	bne.n	8007e6c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f00d fca2 	bl	80157b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2203      	movs	r2, #3
 8007e70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d102      	bne.n	8007e86 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f005 f8f9 	bl	800d082 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	603b      	str	r3, [r7, #0]
 8007e96:	687e      	ldr	r6, [r7, #4]
 8007e98:	466d      	mov	r5, sp
 8007e9a:	f106 0410 	add.w	r4, r6, #16
 8007e9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ea0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007ea2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ea4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007ea6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007eaa:	e885 0003 	stmia.w	r5, {r0, r1}
 8007eae:	1d33      	adds	r3, r6, #4
 8007eb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007eb2:	6838      	ldr	r0, [r7, #0]
 8007eb4:	f004 ffd0 	bl	800ce58 <USB_CoreInit>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d005      	beq.n	8007eca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e0d7      	b.n	800807a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2100      	movs	r1, #0
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f005 f8e7 	bl	800d0a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	73fb      	strb	r3, [r7, #15]
 8007eda:	e04a      	b.n	8007f72 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007edc:	7bfa      	ldrb	r2, [r7, #15]
 8007ede:	6879      	ldr	r1, [r7, #4]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	4413      	add	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	440b      	add	r3, r1
 8007eea:	333d      	adds	r3, #61	; 0x3d
 8007eec:	2201      	movs	r2, #1
 8007eee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007ef0:	7bfa      	ldrb	r2, [r7, #15]
 8007ef2:	6879      	ldr	r1, [r7, #4]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	00db      	lsls	r3, r3, #3
 8007ef8:	4413      	add	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	440b      	add	r3, r1
 8007efe:	333c      	adds	r3, #60	; 0x3c
 8007f00:	7bfa      	ldrb	r2, [r7, #15]
 8007f02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007f04:	7bfa      	ldrb	r2, [r7, #15]
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	b298      	uxth	r0, r3
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	4413      	add	r3, r2
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	440b      	add	r3, r1
 8007f16:	3344      	adds	r3, #68	; 0x44
 8007f18:	4602      	mov	r2, r0
 8007f1a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007f1c:	7bfa      	ldrb	r2, [r7, #15]
 8007f1e:	6879      	ldr	r1, [r7, #4]
 8007f20:	4613      	mov	r3, r2
 8007f22:	00db      	lsls	r3, r3, #3
 8007f24:	4413      	add	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	440b      	add	r3, r1
 8007f2a:	3340      	adds	r3, #64	; 0x40
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007f30:	7bfa      	ldrb	r2, [r7, #15]
 8007f32:	6879      	ldr	r1, [r7, #4]
 8007f34:	4613      	mov	r3, r2
 8007f36:	00db      	lsls	r3, r3, #3
 8007f38:	4413      	add	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	440b      	add	r3, r1
 8007f3e:	3348      	adds	r3, #72	; 0x48
 8007f40:	2200      	movs	r2, #0
 8007f42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007f44:	7bfa      	ldrb	r2, [r7, #15]
 8007f46:	6879      	ldr	r1, [r7, #4]
 8007f48:	4613      	mov	r3, r2
 8007f4a:	00db      	lsls	r3, r3, #3
 8007f4c:	4413      	add	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	440b      	add	r3, r1
 8007f52:	334c      	adds	r3, #76	; 0x4c
 8007f54:	2200      	movs	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007f58:	7bfa      	ldrb	r2, [r7, #15]
 8007f5a:	6879      	ldr	r1, [r7, #4]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	4413      	add	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	440b      	add	r3, r1
 8007f66:	3354      	adds	r3, #84	; 0x54
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	73fb      	strb	r3, [r7, #15]
 8007f72:	7bfa      	ldrb	r2, [r7, #15]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d3af      	bcc.n	8007edc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	73fb      	strb	r3, [r7, #15]
 8007f80:	e044      	b.n	800800c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007f82:	7bfa      	ldrb	r2, [r7, #15]
 8007f84:	6879      	ldr	r1, [r7, #4]
 8007f86:	4613      	mov	r3, r2
 8007f88:	00db      	lsls	r3, r3, #3
 8007f8a:	4413      	add	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	440b      	add	r3, r1
 8007f90:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007f94:	2200      	movs	r2, #0
 8007f96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007f98:	7bfa      	ldrb	r2, [r7, #15]
 8007f9a:	6879      	ldr	r1, [r7, #4]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	4413      	add	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	440b      	add	r3, r1
 8007fa6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007faa:	7bfa      	ldrb	r2, [r7, #15]
 8007fac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007fae:	7bfa      	ldrb	r2, [r7, #15]
 8007fb0:	6879      	ldr	r1, [r7, #4]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	00db      	lsls	r3, r3, #3
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	440b      	add	r3, r1
 8007fbc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007fc4:	7bfa      	ldrb	r2, [r7, #15]
 8007fc6:	6879      	ldr	r1, [r7, #4]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	00db      	lsls	r3, r3, #3
 8007fcc:	4413      	add	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	440b      	add	r3, r1
 8007fd2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007fda:	7bfa      	ldrb	r2, [r7, #15]
 8007fdc:	6879      	ldr	r1, [r7, #4]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	00db      	lsls	r3, r3, #3
 8007fe2:	4413      	add	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	440b      	add	r3, r1
 8007fe8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007fec:	2200      	movs	r2, #0
 8007fee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007ff0:	7bfa      	ldrb	r2, [r7, #15]
 8007ff2:	6879      	ldr	r1, [r7, #4]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	00db      	lsls	r3, r3, #3
 8007ff8:	4413      	add	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	440b      	add	r3, r1
 8007ffe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008002:	2200      	movs	r2, #0
 8008004:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008006:	7bfb      	ldrb	r3, [r7, #15]
 8008008:	3301      	adds	r3, #1
 800800a:	73fb      	strb	r3, [r7, #15]
 800800c:	7bfa      	ldrb	r2, [r7, #15]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	429a      	cmp	r2, r3
 8008014:	d3b5      	bcc.n	8007f82 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	603b      	str	r3, [r7, #0]
 800801c:	687e      	ldr	r6, [r7, #4]
 800801e:	466d      	mov	r5, sp
 8008020:	f106 0410 	add.w	r4, r6, #16
 8008024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800802a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800802c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008030:	e885 0003 	stmia.w	r5, {r0, r1}
 8008034:	1d33      	adds	r3, r6, #4
 8008036:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008038:	6838      	ldr	r0, [r7, #0]
 800803a:	f005 f87f 	bl	800d13c <USB_DevInit>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d005      	beq.n	8008050 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e014      	b.n	800807a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008064:	2b01      	cmp	r3, #1
 8008066:	d102      	bne.n	800806e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f001 f98b 	bl	8009384 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4618      	mov	r0, r3
 8008074:	f006 f9c1 	bl	800e3fa <USB_DevDisconnect>

  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3714      	adds	r7, #20
 800807e:	46bd      	mov	sp, r7
 8008080:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008082 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b084      	sub	sp, #16
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008096:	2b01      	cmp	r3, #1
 8008098:	d101      	bne.n	800809e <HAL_PCD_Start+0x1c>
 800809a:	2302      	movs	r3, #2
 800809c:	e020      	b.n	80080e0 <HAL_PCD_Start+0x5e>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d109      	bne.n	80080c2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d005      	beq.n	80080c2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f004 ffca 	bl	800d060 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f006 f971 	bl	800e3b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80080e8:	b590      	push	{r4, r7, lr}
 80080ea:	b08d      	sub	sp, #52	; 0x34
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4618      	mov	r0, r3
 8008100:	f006 fa2f 	bl	800e562 <USB_GetMode>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	f040 84b7 	bne.w	8008a7a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4618      	mov	r0, r3
 8008112:	f006 f993 	bl	800e43c <USB_ReadInterrupts>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 84ad 	beq.w	8008a78 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	0a1b      	lsrs	r3, r3, #8
 8008128:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4618      	mov	r0, r3
 8008138:	f006 f980 	bl	800e43c <USB_ReadInterrupts>
 800813c:	4603      	mov	r3, r0
 800813e:	f003 0302 	and.w	r3, r3, #2
 8008142:	2b02      	cmp	r3, #2
 8008144:	d107      	bne.n	8008156 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	695a      	ldr	r2, [r3, #20]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f002 0202 	and.w	r2, r2, #2
 8008154:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4618      	mov	r0, r3
 800815c:	f006 f96e 	bl	800e43c <USB_ReadInterrupts>
 8008160:	4603      	mov	r3, r0
 8008162:	f003 0310 	and.w	r3, r3, #16
 8008166:	2b10      	cmp	r3, #16
 8008168:	d161      	bne.n	800822e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	699a      	ldr	r2, [r3, #24]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f022 0210 	bic.w	r2, r2, #16
 8008178:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	f003 020f 	and.w	r2, r3, #15
 8008186:	4613      	mov	r3, r2
 8008188:	00db      	lsls	r3, r3, #3
 800818a:	4413      	add	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	4413      	add	r3, r2
 8008196:	3304      	adds	r3, #4
 8008198:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	0c5b      	lsrs	r3, r3, #17
 800819e:	f003 030f 	and.w	r3, r3, #15
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d124      	bne.n	80081f0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80081a6:	69ba      	ldr	r2, [r7, #24]
 80081a8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80081ac:	4013      	ands	r3, r2
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d035      	beq.n	800821e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	091b      	lsrs	r3, r3, #4
 80081ba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80081bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	461a      	mov	r2, r3
 80081c4:	6a38      	ldr	r0, [r7, #32]
 80081c6:	f005 ffa5 	bl	800e114 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	691a      	ldr	r2, [r3, #16]
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	091b      	lsrs	r3, r3, #4
 80081d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80081d6:	441a      	add	r2, r3
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	6a1a      	ldr	r2, [r3, #32]
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	091b      	lsrs	r3, r3, #4
 80081e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80081e8:	441a      	add	r2, r3
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	621a      	str	r2, [r3, #32]
 80081ee:	e016      	b.n	800821e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	0c5b      	lsrs	r3, r3, #17
 80081f4:	f003 030f 	and.w	r3, r3, #15
 80081f8:	2b06      	cmp	r3, #6
 80081fa:	d110      	bne.n	800821e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008202:	2208      	movs	r2, #8
 8008204:	4619      	mov	r1, r3
 8008206:	6a38      	ldr	r0, [r7, #32]
 8008208:	f005 ff84 	bl	800e114 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	6a1a      	ldr	r2, [r3, #32]
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	091b      	lsrs	r3, r3, #4
 8008214:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008218:	441a      	add	r2, r3
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	699a      	ldr	r2, [r3, #24]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f042 0210 	orr.w	r2, r2, #16
 800822c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4618      	mov	r0, r3
 8008234:	f006 f902 	bl	800e43c <USB_ReadInterrupts>
 8008238:	4603      	mov	r3, r0
 800823a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800823e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008242:	f040 80a7 	bne.w	8008394 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008246:	2300      	movs	r3, #0
 8008248:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4618      	mov	r0, r3
 8008250:	f006 f907 	bl	800e462 <USB_ReadDevAllOutEpInterrupt>
 8008254:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008256:	e099      	b.n	800838c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 808e 	beq.w	8008380 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800826a:	b2d2      	uxtb	r2, r2
 800826c:	4611      	mov	r1, r2
 800826e:	4618      	mov	r0, r3
 8008270:	f006 f92b 	bl	800e4ca <USB_ReadDevOutEPInterrupt>
 8008274:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	f003 0301 	and.w	r3, r3, #1
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00c      	beq.n	800829a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008282:	015a      	lsls	r2, r3, #5
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	4413      	add	r3, r2
 8008288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828c:	461a      	mov	r2, r3
 800828e:	2301      	movs	r3, #1
 8008290:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008292:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 feef 	bl	8009078 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f003 0308 	and.w	r3, r3, #8
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00c      	beq.n	80082be <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b0:	461a      	mov	r2, r3
 80082b2:	2308      	movs	r3, #8
 80082b4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80082b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 ffc5 	bl	8009248 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	f003 0310 	and.w	r3, r3, #16
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d008      	beq.n	80082da <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	015a      	lsls	r2, r3, #5
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	4413      	add	r3, r2
 80082d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d4:	461a      	mov	r2, r3
 80082d6:	2310      	movs	r3, #16
 80082d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	f003 0302 	and.w	r3, r3, #2
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d030      	beq.n	8008346 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ec:	2b80      	cmp	r3, #128	; 0x80
 80082ee:	d109      	bne.n	8008304 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	69fa      	ldr	r2, [r7, #28]
 80082fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008302:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008306:	4613      	mov	r3, r2
 8008308:	00db      	lsls	r3, r3, #3
 800830a:	4413      	add	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	4413      	add	r3, r2
 8008316:	3304      	adds	r3, #4
 8008318:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	78db      	ldrb	r3, [r3, #3]
 800831e:	2b01      	cmp	r3, #1
 8008320:	d108      	bne.n	8008334 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2200      	movs	r2, #0
 8008326:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	b2db      	uxtb	r3, r3
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f00d fb5a 	bl	80159e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	4413      	add	r3, r2
 800833c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008340:	461a      	mov	r2, r3
 8008342:	2302      	movs	r3, #2
 8008344:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	f003 0320 	and.w	r3, r3, #32
 800834c:	2b00      	cmp	r3, #0
 800834e:	d008      	beq.n	8008362 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	015a      	lsls	r2, r3, #5
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	4413      	add	r3, r2
 8008358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800835c:	461a      	mov	r2, r3
 800835e:	2320      	movs	r3, #32
 8008360:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d009      	beq.n	8008380 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008378:	461a      	mov	r2, r3
 800837a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800837e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	3301      	adds	r3, #1
 8008384:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008388:	085b      	lsrs	r3, r3, #1
 800838a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800838c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838e:	2b00      	cmp	r3, #0
 8008390:	f47f af62 	bne.w	8008258 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4618      	mov	r0, r3
 800839a:	f006 f84f 	bl	800e43c <USB_ReadInterrupts>
 800839e:	4603      	mov	r3, r0
 80083a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083a8:	f040 80db 	bne.w	8008562 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f006 f870 	bl	800e496 <USB_ReadDevAllInEpInterrupt>
 80083b6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80083b8:	2300      	movs	r3, #0
 80083ba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80083bc:	e0cd      	b.n	800855a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80083be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 80c2 	beq.w	800854e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083d0:	b2d2      	uxtb	r2, r2
 80083d2:	4611      	mov	r1, r2
 80083d4:	4618      	mov	r0, r3
 80083d6:	f006 f896 	bl	800e506 <USB_ReadDevInEPInterrupt>
 80083da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d057      	beq.n	8008496 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80083e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e8:	f003 030f 	and.w	r3, r3, #15
 80083ec:	2201      	movs	r2, #1
 80083ee:	fa02 f303 	lsl.w	r3, r2, r3
 80083f2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	43db      	mvns	r3, r3
 8008400:	69f9      	ldr	r1, [r7, #28]
 8008402:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008406:	4013      	ands	r3, r2
 8008408:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	015a      	lsls	r2, r3, #5
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	4413      	add	r3, r2
 8008412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008416:	461a      	mov	r2, r3
 8008418:	2301      	movs	r3, #1
 800841a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d132      	bne.n	800848a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008424:	6879      	ldr	r1, [r7, #4]
 8008426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008428:	4613      	mov	r3, r2
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	4413      	add	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	440b      	add	r3, r1
 8008432:	334c      	adds	r3, #76	; 0x4c
 8008434:	6819      	ldr	r1, [r3, #0]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800843a:	4613      	mov	r3, r2
 800843c:	00db      	lsls	r3, r3, #3
 800843e:	4413      	add	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4403      	add	r3, r0
 8008444:	3348      	adds	r3, #72	; 0x48
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4419      	add	r1, r3
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800844e:	4613      	mov	r3, r2
 8008450:	00db      	lsls	r3, r3, #3
 8008452:	4413      	add	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4403      	add	r3, r0
 8008458:	334c      	adds	r3, #76	; 0x4c
 800845a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	2b00      	cmp	r3, #0
 8008460:	d113      	bne.n	800848a <HAL_PCD_IRQHandler+0x3a2>
 8008462:	6879      	ldr	r1, [r7, #4]
 8008464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008466:	4613      	mov	r3, r2
 8008468:	00db      	lsls	r3, r3, #3
 800846a:	4413      	add	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	440b      	add	r3, r1
 8008470:	3354      	adds	r3, #84	; 0x54
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d108      	bne.n	800848a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6818      	ldr	r0, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008482:	461a      	mov	r2, r3
 8008484:	2101      	movs	r1, #1
 8008486:	f006 f89d 	bl	800e5c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	b2db      	uxtb	r3, r3
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f00d fa24 	bl	80158de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	f003 0308 	and.w	r3, r3, #8
 800849c:	2b00      	cmp	r3, #0
 800849e:	d008      	beq.n	80084b2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80084a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a2:	015a      	lsls	r2, r3, #5
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	4413      	add	r3, r2
 80084a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ac:	461a      	mov	r2, r3
 80084ae:	2308      	movs	r3, #8
 80084b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	f003 0310 	and.w	r3, r3, #16
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d008      	beq.n	80084ce <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	015a      	lsls	r2, r3, #5
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	4413      	add	r3, r2
 80084c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c8:	461a      	mov	r2, r3
 80084ca:	2310      	movs	r3, #16
 80084cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d008      	beq.n	80084ea <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e4:	461a      	mov	r2, r3
 80084e6:	2340      	movs	r3, #64	; 0x40
 80084e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	f003 0302 	and.w	r3, r3, #2
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d023      	beq.n	800853c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80084f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084f6:	6a38      	ldr	r0, [r7, #32]
 80084f8:	f004 ff7e 	bl	800d3f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80084fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084fe:	4613      	mov	r3, r2
 8008500:	00db      	lsls	r3, r3, #3
 8008502:	4413      	add	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	3338      	adds	r3, #56	; 0x38
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	4413      	add	r3, r2
 800850c:	3304      	adds	r3, #4
 800850e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	78db      	ldrb	r3, [r3, #3]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d108      	bne.n	800852a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	2200      	movs	r2, #0
 800851c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008520:	b2db      	uxtb	r3, r3
 8008522:	4619      	mov	r1, r3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f00d fa71 	bl	8015a0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	015a      	lsls	r2, r3, #5
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	4413      	add	r3, r2
 8008532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008536:	461a      	mov	r2, r3
 8008538:	2302      	movs	r3, #2
 800853a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008542:	2b00      	cmp	r3, #0
 8008544:	d003      	beq.n	800854e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008546:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fd08 	bl	8008f5e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	3301      	adds	r3, #1
 8008552:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008556:	085b      	lsrs	r3, r3, #1
 8008558:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800855a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855c:	2b00      	cmp	r3, #0
 800855e:	f47f af2e 	bne.w	80083be <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4618      	mov	r0, r3
 8008568:	f005 ff68 	bl	800e43c <USB_ReadInterrupts>
 800856c:	4603      	mov	r3, r0
 800856e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008572:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008576:	d122      	bne.n	80085be <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	69fa      	ldr	r2, [r7, #28]
 8008582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008586:	f023 0301 	bic.w	r3, r3, #1
 800858a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008592:	2b01      	cmp	r3, #1
 8008594:	d108      	bne.n	80085a8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800859e:	2100      	movs	r1, #0
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f00d fbeb 	bl	8015d7c <HAL_PCDEx_LPM_Callback>
 80085a6:	e002      	b.n	80085ae <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f00d fa0f 	bl	80159cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	695a      	ldr	r2, [r3, #20]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80085bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f005 ff3a 	bl	800e43c <USB_ReadInterrupts>
 80085c8:	4603      	mov	r3, r0
 80085ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085d2:	d112      	bne.n	80085fa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d102      	bne.n	80085ea <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f00d f9cb 	bl	8015980 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	695a      	ldr	r2, [r3, #20]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80085f8:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4618      	mov	r0, r3
 8008600:	f005 ff1c 	bl	800e43c <USB_ReadInterrupts>
 8008604:	4603      	mov	r3, r0
 8008606:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800860a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800860e:	d121      	bne.n	8008654 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	695a      	ldr	r2, [r3, #20]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800861e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008626:	2b00      	cmp	r3, #0
 8008628:	d111      	bne.n	800864e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008638:	089b      	lsrs	r3, r3, #2
 800863a:	f003 020f 	and.w	r2, r3, #15
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008644:	2101      	movs	r1, #1
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f00d fb98 	bl	8015d7c <HAL_PCDEx_LPM_Callback>
 800864c:	e002      	b.n	8008654 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f00d f996 	bl	8015980 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4618      	mov	r0, r3
 800865a:	f005 feef 	bl	800e43c <USB_ReadInterrupts>
 800865e:	4603      	mov	r3, r0
 8008660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008668:	f040 80b7 	bne.w	80087da <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	69fa      	ldr	r2, [r7, #28]
 8008676:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800867a:	f023 0301 	bic.w	r3, r3, #1
 800867e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2110      	movs	r1, #16
 8008686:	4618      	mov	r0, r3
 8008688:	f004 feb6 	bl	800d3f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800868c:	2300      	movs	r3, #0
 800868e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008690:	e046      	b.n	8008720 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008694:	015a      	lsls	r2, r3, #5
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	4413      	add	r3, r2
 800869a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800869e:	461a      	mov	r2, r3
 80086a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80086a4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80086a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a8:	015a      	lsls	r2, r3, #5
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	4413      	add	r3, r2
 80086ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086b6:	0151      	lsls	r1, r2, #5
 80086b8:	69fa      	ldr	r2, [r7, #28]
 80086ba:	440a      	add	r2, r1
 80086bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80086c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80086c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c8:	015a      	lsls	r2, r3, #5
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	4413      	add	r3, r2
 80086ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d2:	461a      	mov	r2, r3
 80086d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80086d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80086da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086dc:	015a      	lsls	r2, r3, #5
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	4413      	add	r3, r2
 80086e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086ea:	0151      	lsls	r1, r2, #5
 80086ec:	69fa      	ldr	r2, [r7, #28]
 80086ee:	440a      	add	r2, r1
 80086f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80086f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80086fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fc:	015a      	lsls	r2, r3, #5
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	4413      	add	r3, r2
 8008702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800870a:	0151      	lsls	r1, r2, #5
 800870c:	69fa      	ldr	r2, [r7, #28]
 800870e:	440a      	add	r2, r1
 8008710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008714:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008718:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800871a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871c:	3301      	adds	r3, #1
 800871e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008726:	429a      	cmp	r2, r3
 8008728:	d3b3      	bcc.n	8008692 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008730:	69db      	ldr	r3, [r3, #28]
 8008732:	69fa      	ldr	r2, [r7, #28]
 8008734:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008738:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800873c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008742:	2b00      	cmp	r3, #0
 8008744:	d016      	beq.n	8008774 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800874c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008750:	69fa      	ldr	r2, [r7, #28]
 8008752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008756:	f043 030b 	orr.w	r3, r3, #11
 800875a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008766:	69fa      	ldr	r2, [r7, #28]
 8008768:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800876c:	f043 030b 	orr.w	r3, r3, #11
 8008770:	6453      	str	r3, [r2, #68]	; 0x44
 8008772:	e015      	b.n	80087a0 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	69fa      	ldr	r2, [r7, #28]
 800877e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008782:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008786:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800878a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	69fa      	ldr	r2, [r7, #28]
 8008796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800879a:	f043 030b 	orr.w	r3, r3, #11
 800879e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	69fa      	ldr	r2, [r7, #28]
 80087aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80087b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6818      	ldr	r0, [r3, #0]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80087c4:	461a      	mov	r2, r3
 80087c6:	f005 fefd 	bl	800e5c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	695a      	ldr	r2, [r3, #20]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80087d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4618      	mov	r0, r3
 80087e0:	f005 fe2c 	bl	800e43c <USB_ReadInterrupts>
 80087e4:	4603      	mov	r3, r0
 80087e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087ee:	d124      	bne.n	800883a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f005 fec2 	bl	800e57e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4618      	mov	r0, r3
 8008800:	f004 fe77 	bl	800d4f2 <USB_GetDevSpeed>
 8008804:	4603      	mov	r3, r0
 8008806:	461a      	mov	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681c      	ldr	r4, [r3, #0]
 8008810:	f000 fec2 	bl	8009598 <HAL_RCC_GetHCLKFreq>
 8008814:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800881a:	b2db      	uxtb	r3, r3
 800881c:	461a      	mov	r2, r3
 800881e:	4620      	mov	r0, r4
 8008820:	f004 fb7c 	bl	800cf1c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f00d f882 	bl	801592e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	695a      	ldr	r2, [r3, #20]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008838:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4618      	mov	r0, r3
 8008840:	f005 fdfc 	bl	800e43c <USB_ReadInterrupts>
 8008844:	4603      	mov	r3, r0
 8008846:	f003 0308 	and.w	r3, r3, #8
 800884a:	2b08      	cmp	r3, #8
 800884c:	d10a      	bne.n	8008864 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f00d f85f 	bl	8015912 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	695a      	ldr	r2, [r3, #20]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f002 0208 	and.w	r2, r2, #8
 8008862:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4618      	mov	r0, r3
 800886a:	f005 fde7 	bl	800e43c <USB_ReadInterrupts>
 800886e:	4603      	mov	r3, r0
 8008870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008874:	2b80      	cmp	r3, #128	; 0x80
 8008876:	d122      	bne.n	80088be <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008878:	6a3b      	ldr	r3, [r7, #32]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008884:	2301      	movs	r3, #1
 8008886:	627b      	str	r3, [r7, #36]	; 0x24
 8008888:	e014      	b.n	80088b4 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800888a:	6879      	ldr	r1, [r7, #4]
 800888c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800888e:	4613      	mov	r3, r2
 8008890:	00db      	lsls	r3, r3, #3
 8008892:	4413      	add	r3, r2
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	440b      	add	r3, r1
 8008898:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d105      	bne.n	80088ae <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80088a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	4619      	mov	r1, r3
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fb27 	bl	8008efc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80088ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b0:	3301      	adds	r3, #1
 80088b2:	627b      	str	r3, [r7, #36]	; 0x24
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d3e5      	bcc.n	800888a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f005 fdba 	bl	800e43c <USB_ReadInterrupts>
 80088c8:	4603      	mov	r3, r0
 80088ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088d2:	d13b      	bne.n	800894c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80088d4:	2301      	movs	r3, #1
 80088d6:	627b      	str	r3, [r7, #36]	; 0x24
 80088d8:	e02b      	b.n	8008932 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	015a      	lsls	r2, r3, #5
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	4413      	add	r3, r2
 80088e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80088ea:	6879      	ldr	r1, [r7, #4]
 80088ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ee:	4613      	mov	r3, r2
 80088f0:	00db      	lsls	r3, r3, #3
 80088f2:	4413      	add	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	440b      	add	r3, r1
 80088f8:	3340      	adds	r3, #64	; 0x40
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d115      	bne.n	800892c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008900:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008902:	2b00      	cmp	r3, #0
 8008904:	da12      	bge.n	800892c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008906:	6879      	ldr	r1, [r7, #4]
 8008908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800890a:	4613      	mov	r3, r2
 800890c:	00db      	lsls	r3, r3, #3
 800890e:	4413      	add	r3, r2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	440b      	add	r3, r1
 8008914:	333f      	adds	r3, #63	; 0x3f
 8008916:	2201      	movs	r2, #1
 8008918:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800891a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891c:	b2db      	uxtb	r3, r3
 800891e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008922:	b2db      	uxtb	r3, r3
 8008924:	4619      	mov	r1, r3
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fae8 	bl	8008efc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800892c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892e:	3301      	adds	r3, #1
 8008930:	627b      	str	r3, [r7, #36]	; 0x24
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008938:	429a      	cmp	r2, r3
 800893a:	d3ce      	bcc.n	80088da <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	695a      	ldr	r2, [r3, #20]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800894a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4618      	mov	r0, r3
 8008952:	f005 fd73 	bl	800e43c <USB_ReadInterrupts>
 8008956:	4603      	mov	r3, r0
 8008958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800895c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008960:	d155      	bne.n	8008a0e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008962:	2301      	movs	r3, #1
 8008964:	627b      	str	r3, [r7, #36]	; 0x24
 8008966:	e045      	b.n	80089f4 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896a:	015a      	lsls	r2, r3, #5
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	4413      	add	r3, r2
 8008970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008978:	6879      	ldr	r1, [r7, #4]
 800897a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800897c:	4613      	mov	r3, r2
 800897e:	00db      	lsls	r3, r3, #3
 8008980:	4413      	add	r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	440b      	add	r3, r1
 8008986:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d12e      	bne.n	80089ee <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008990:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008992:	2b00      	cmp	r3, #0
 8008994:	da2b      	bge.n	80089ee <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80089a2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d121      	bne.n	80089ee <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80089aa:	6879      	ldr	r1, [r7, #4]
 80089ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ae:	4613      	mov	r3, r2
 80089b0:	00db      	lsls	r3, r3, #3
 80089b2:	4413      	add	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	440b      	add	r3, r1
 80089b8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80089bc:	2201      	movs	r2, #1
 80089be:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80089c0:	6a3b      	ldr	r3, [r7, #32]
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80089c8:	6a3b      	ldr	r3, [r7, #32]
 80089ca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	695b      	ldr	r3, [r3, #20]
 80089d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d10a      	bne.n	80089ee <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	69fa      	ldr	r2, [r7, #28]
 80089e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80089ea:	6053      	str	r3, [r2, #4]
            break;
 80089ec:	e007      	b.n	80089fe <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	3301      	adds	r3, #1
 80089f2:	627b      	str	r3, [r7, #36]	; 0x24
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d3b4      	bcc.n	8008968 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	695a      	ldr	r2, [r3, #20]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008a0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f005 fd12 	bl	800e43c <USB_ReadInterrupts>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a22:	d10a      	bne.n	8008a3a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f00d f803 	bl	8015a30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	695a      	ldr	r2, [r3, #20]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008a38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f005 fcfc 	bl	800e43c <USB_ReadInterrupts>
 8008a44:	4603      	mov	r3, r0
 8008a46:	f003 0304 	and.w	r3, r3, #4
 8008a4a:	2b04      	cmp	r3, #4
 8008a4c:	d115      	bne.n	8008a7a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	f003 0304 	and.w	r3, r3, #4
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f00c fff3 	bl	8015a4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6859      	ldr	r1, [r3, #4]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	69ba      	ldr	r2, [r7, #24]
 8008a72:	430a      	orrs	r2, r1
 8008a74:	605a      	str	r2, [r3, #4]
 8008a76:	e000      	b.n	8008a7a <HAL_PCD_IRQHandler+0x992>
      return;
 8008a78:	bf00      	nop
    }
  }
}
 8008a7a:	3734      	adds	r7, #52	; 0x34
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd90      	pop	{r4, r7, pc}

08008a80 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d101      	bne.n	8008a9a <HAL_PCD_SetAddress+0x1a>
 8008a96:	2302      	movs	r3, #2
 8008a98:	e013      	b.n	8008ac2 <HAL_PCD_SetAddress+0x42>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	78fa      	ldrb	r2, [r7, #3]
 8008aa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	78fa      	ldrb	r2, [r7, #3]
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f005 fc5a 	bl	800e36c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b084      	sub	sp, #16
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	4608      	mov	r0, r1
 8008ad4:	4611      	mov	r1, r2
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	4603      	mov	r3, r0
 8008ada:	70fb      	strb	r3, [r7, #3]
 8008adc:	460b      	mov	r3, r1
 8008ade:	803b      	strh	r3, [r7, #0]
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	da0f      	bge.n	8008b10 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008af0:	78fb      	ldrb	r3, [r7, #3]
 8008af2:	f003 020f 	and.w	r2, r3, #15
 8008af6:	4613      	mov	r3, r2
 8008af8:	00db      	lsls	r3, r3, #3
 8008afa:	4413      	add	r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	3338      	adds	r3, #56	; 0x38
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	4413      	add	r3, r2
 8008b04:	3304      	adds	r3, #4
 8008b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	705a      	strb	r2, [r3, #1]
 8008b0e:	e00f      	b.n	8008b30 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b10:	78fb      	ldrb	r3, [r7, #3]
 8008b12:	f003 020f 	and.w	r2, r3, #15
 8008b16:	4613      	mov	r3, r2
 8008b18:	00db      	lsls	r3, r3, #3
 8008b1a:	4413      	add	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	4413      	add	r3, r2
 8008b26:	3304      	adds	r3, #4
 8008b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008b30:	78fb      	ldrb	r3, [r7, #3]
 8008b32:	f003 030f 	and.w	r3, r3, #15
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008b3c:	883a      	ldrh	r2, [r7, #0]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	78ba      	ldrb	r2, [r7, #2]
 8008b46:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	785b      	ldrb	r3, [r3, #1]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d004      	beq.n	8008b5a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008b5a:	78bb      	ldrb	r3, [r7, #2]
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d102      	bne.n	8008b66 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d101      	bne.n	8008b74 <HAL_PCD_EP_Open+0xaa>
 8008b70:	2302      	movs	r3, #2
 8008b72:	e00e      	b.n	8008b92 <HAL_PCD_EP_Open+0xc8>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	68f9      	ldr	r1, [r7, #12]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f004 fcda 	bl	800d53c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008b90:	7afb      	ldrb	r3, [r7, #11]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b084      	sub	sp, #16
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008ba6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	da0f      	bge.n	8008bce <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bae:	78fb      	ldrb	r3, [r7, #3]
 8008bb0:	f003 020f 	and.w	r2, r3, #15
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	00db      	lsls	r3, r3, #3
 8008bb8:	4413      	add	r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	3338      	adds	r3, #56	; 0x38
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	705a      	strb	r2, [r3, #1]
 8008bcc:	e00f      	b.n	8008bee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008bce:	78fb      	ldrb	r3, [r7, #3]
 8008bd0:	f003 020f 	and.w	r2, r3, #15
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	00db      	lsls	r3, r3, #3
 8008bd8:	4413      	add	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	4413      	add	r3, r2
 8008be4:	3304      	adds	r3, #4
 8008be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008bee:	78fb      	ldrb	r3, [r7, #3]
 8008bf0:	f003 030f 	and.w	r3, r3, #15
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d101      	bne.n	8008c08 <HAL_PCD_EP_Close+0x6e>
 8008c04:	2302      	movs	r3, #2
 8008c06:	e00e      	b.n	8008c26 <HAL_PCD_EP_Close+0x8c>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68f9      	ldr	r1, [r7, #12]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f004 fd18 	bl	800d64c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b086      	sub	sp, #24
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	60f8      	str	r0, [r7, #12]
 8008c36:	607a      	str	r2, [r7, #4]
 8008c38:	603b      	str	r3, [r7, #0]
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c3e:	7afb      	ldrb	r3, [r7, #11]
 8008c40:	f003 020f 	and.w	r2, r3, #15
 8008c44:	4613      	mov	r3, r2
 8008c46:	00db      	lsls	r3, r3, #3
 8008c48:	4413      	add	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	4413      	add	r3, r2
 8008c54:	3304      	adds	r3, #4
 8008c56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	2200      	movs	r2, #0
 8008c68:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c70:	7afb      	ldrb	r3, [r7, #11]
 8008c72:	f003 030f 	and.w	r3, r3, #15
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d102      	bne.n	8008c8a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008c8a:	7afb      	ldrb	r3, [r7, #11]
 8008c8c:	f003 030f 	and.w	r3, r3, #15
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d109      	bne.n	8008ca8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6818      	ldr	r0, [r3, #0]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	6979      	ldr	r1, [r7, #20]
 8008ca2:	f004 fff7 	bl	800dc94 <USB_EP0StartXfer>
 8008ca6:	e008      	b.n	8008cba <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6818      	ldr	r0, [r3, #0]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	6979      	ldr	r1, [r7, #20]
 8008cb6:	f004 fda5 	bl	800d804 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3718      	adds	r7, #24
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008cd0:	78fb      	ldrb	r3, [r7, #3]
 8008cd2:	f003 020f 	and.w	r2, r3, #15
 8008cd6:	6879      	ldr	r1, [r7, #4]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	00db      	lsls	r3, r3, #3
 8008cdc:	4413      	add	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	440b      	add	r3, r1
 8008ce2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8008ce6:	681b      	ldr	r3, [r3, #0]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	607a      	str	r2, [r7, #4]
 8008cfe:	603b      	str	r3, [r7, #0]
 8008d00:	460b      	mov	r3, r1
 8008d02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d04:	7afb      	ldrb	r3, [r7, #11]
 8008d06:	f003 020f 	and.w	r2, r3, #15
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	00db      	lsls	r3, r3, #3
 8008d0e:	4413      	add	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	3338      	adds	r3, #56	; 0x38
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	4413      	add	r3, r2
 8008d18:	3304      	adds	r3, #4
 8008d1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	683a      	ldr	r2, [r7, #0]
 8008d26:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	2201      	movs	r2, #1
 8008d32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d34:	7afb      	ldrb	r3, [r7, #11]
 8008d36:	f003 030f 	and.w	r3, r3, #15
 8008d3a:	b2da      	uxtb	r2, r3
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d102      	bne.n	8008d4e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008d4e:	7afb      	ldrb	r3, [r7, #11]
 8008d50:	f003 030f 	and.w	r3, r3, #15
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d109      	bne.n	8008d6c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6818      	ldr	r0, [r3, #0]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	461a      	mov	r2, r3
 8008d64:	6979      	ldr	r1, [r7, #20]
 8008d66:	f004 ff95 	bl	800dc94 <USB_EP0StartXfer>
 8008d6a:	e008      	b.n	8008d7e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6818      	ldr	r0, [r3, #0]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	461a      	mov	r2, r3
 8008d78:	6979      	ldr	r1, [r7, #20]
 8008d7a:	f004 fd43 	bl	800d804 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3718      	adds	r7, #24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	460b      	mov	r3, r1
 8008d92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008d94:	78fb      	ldrb	r3, [r7, #3]
 8008d96:	f003 020f 	and.w	r2, r3, #15
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d901      	bls.n	8008da6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e050      	b.n	8008e48 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008da6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	da0f      	bge.n	8008dce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008dae:	78fb      	ldrb	r3, [r7, #3]
 8008db0:	f003 020f 	and.w	r2, r3, #15
 8008db4:	4613      	mov	r3, r2
 8008db6:	00db      	lsls	r3, r3, #3
 8008db8:	4413      	add	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	3338      	adds	r3, #56	; 0x38
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	3304      	adds	r3, #4
 8008dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	705a      	strb	r2, [r3, #1]
 8008dcc:	e00d      	b.n	8008dea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008dce:	78fa      	ldrb	r2, [r7, #3]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	00db      	lsls	r3, r3, #3
 8008dd4:	4413      	add	r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	4413      	add	r3, r2
 8008de0:	3304      	adds	r3, #4
 8008de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2201      	movs	r2, #1
 8008dee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008df0:	78fb      	ldrb	r3, [r7, #3]
 8008df2:	f003 030f 	and.w	r3, r3, #15
 8008df6:	b2da      	uxtb	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d101      	bne.n	8008e0a <HAL_PCD_EP_SetStall+0x82>
 8008e06:	2302      	movs	r3, #2
 8008e08:	e01e      	b.n	8008e48 <HAL_PCD_EP_SetStall+0xc0>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68f9      	ldr	r1, [r7, #12]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f005 f9d3 	bl	800e1c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008e1e:	78fb      	ldrb	r3, [r7, #3]
 8008e20:	f003 030f 	and.w	r3, r3, #15
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10a      	bne.n	8008e3e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6818      	ldr	r0, [r3, #0]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	b2d9      	uxtb	r1, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008e38:	461a      	mov	r2, r3
 8008e3a:	f005 fbc3 	bl	800e5c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	460b      	mov	r3, r1
 8008e5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008e5c:	78fb      	ldrb	r3, [r7, #3]
 8008e5e:	f003 020f 	and.w	r2, r3, #15
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d901      	bls.n	8008e6e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e042      	b.n	8008ef4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008e6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	da0f      	bge.n	8008e96 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e76:	78fb      	ldrb	r3, [r7, #3]
 8008e78:	f003 020f 	and.w	r2, r3, #15
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	00db      	lsls	r3, r3, #3
 8008e80:	4413      	add	r3, r2
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	3338      	adds	r3, #56	; 0x38
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	4413      	add	r3, r2
 8008e8a:	3304      	adds	r3, #4
 8008e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2201      	movs	r2, #1
 8008e92:	705a      	strb	r2, [r3, #1]
 8008e94:	e00f      	b.n	8008eb6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e96:	78fb      	ldrb	r3, [r7, #3]
 8008e98:	f003 020f 	and.w	r2, r3, #15
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	00db      	lsls	r3, r3, #3
 8008ea0:	4413      	add	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	4413      	add	r3, r2
 8008eac:	3304      	adds	r3, #4
 8008eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ebc:	78fb      	ldrb	r3, [r7, #3]
 8008ebe:	f003 030f 	and.w	r3, r3, #15
 8008ec2:	b2da      	uxtb	r2, r3
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d101      	bne.n	8008ed6 <HAL_PCD_EP_ClrStall+0x86>
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	e00e      	b.n	8008ef4 <HAL_PCD_EP_ClrStall+0xa4>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68f9      	ldr	r1, [r7, #12]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f005 f9db 	bl	800e2a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008f08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	da0c      	bge.n	8008f2a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f10:	78fb      	ldrb	r3, [r7, #3]
 8008f12:	f003 020f 	and.w	r2, r3, #15
 8008f16:	4613      	mov	r3, r2
 8008f18:	00db      	lsls	r3, r3, #3
 8008f1a:	4413      	add	r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	3338      	adds	r3, #56	; 0x38
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	4413      	add	r3, r2
 8008f24:	3304      	adds	r3, #4
 8008f26:	60fb      	str	r3, [r7, #12]
 8008f28:	e00c      	b.n	8008f44 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f2a:	78fb      	ldrb	r3, [r7, #3]
 8008f2c:	f003 020f 	and.w	r2, r3, #15
 8008f30:	4613      	mov	r3, r2
 8008f32:	00db      	lsls	r3, r3, #3
 8008f34:	4413      	add	r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	4413      	add	r3, r2
 8008f40:	3304      	adds	r3, #4
 8008f42:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68f9      	ldr	r1, [r7, #12]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f004 fffa 	bl	800df44 <USB_EPStopXfer>
 8008f50:	4603      	mov	r3, r0
 8008f52:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008f54:	7afb      	ldrb	r3, [r7, #11]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b08a      	sub	sp, #40	; 0x28
 8008f62:	af02      	add	r7, sp, #8
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	4613      	mov	r3, r2
 8008f76:	00db      	lsls	r3, r3, #3
 8008f78:	4413      	add	r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	3338      	adds	r3, #56	; 0x38
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	4413      	add	r3, r2
 8008f82:	3304      	adds	r3, #4
 8008f84:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6a1a      	ldr	r2, [r3, #32]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	699b      	ldr	r3, [r3, #24]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d901      	bls.n	8008f96 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e06c      	b.n	8009070 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	699a      	ldr	r2, [r3, #24]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6a1b      	ldr	r3, [r3, #32]
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	69fa      	ldr	r2, [r7, #28]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d902      	bls.n	8008fb2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	3303      	adds	r3, #3
 8008fb6:	089b      	lsrs	r3, r3, #2
 8008fb8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008fba:	e02b      	b.n	8009014 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	699a      	ldr	r2, [r3, #24]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6a1b      	ldr	r3, [r3, #32]
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	69fa      	ldr	r2, [r7, #28]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d902      	bls.n	8008fd8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	3303      	adds	r3, #3
 8008fdc:	089b      	lsrs	r3, r3, #2
 8008fde:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6919      	ldr	r1, [r3, #16]
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	b2da      	uxtb	r2, r3
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	6978      	ldr	r0, [r7, #20]
 8008ff8:	f005 f84e 	bl	800e098 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	691a      	ldr	r2, [r3, #16]
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	441a      	add	r2, r3
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6a1a      	ldr	r2, [r3, #32]
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	441a      	add	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	015a      	lsls	r2, r3, #5
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	4413      	add	r3, r2
 800901c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009020:	699b      	ldr	r3, [r3, #24]
 8009022:	b29b      	uxth	r3, r3
 8009024:	69ba      	ldr	r2, [r7, #24]
 8009026:	429a      	cmp	r2, r3
 8009028:	d809      	bhi.n	800903e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6a1a      	ldr	r2, [r3, #32]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009032:	429a      	cmp	r2, r3
 8009034:	d203      	bcs.n	800903e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1be      	bne.n	8008fbc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	699a      	ldr	r2, [r3, #24]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	429a      	cmp	r2, r3
 8009048:	d811      	bhi.n	800906e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	f003 030f 	and.w	r3, r3, #15
 8009050:	2201      	movs	r2, #1
 8009052:	fa02 f303 	lsl.w	r3, r2, r3
 8009056:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800905e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	43db      	mvns	r3, r3
 8009064:	6939      	ldr	r1, [r7, #16]
 8009066:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800906a:	4013      	ands	r3, r2
 800906c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3720      	adds	r7, #32
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b088      	sub	sp, #32
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	333c      	adds	r3, #60	; 0x3c
 8009090:	3304      	adds	r3, #4
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	015a      	lsls	r2, r3, #5
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	4413      	add	r3, r2
 800909e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	691b      	ldr	r3, [r3, #16]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d17b      	bne.n	80091a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	f003 0308 	and.w	r3, r3, #8
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d015      	beq.n	80090e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	4a61      	ldr	r2, [pc, #388]	; (8009240 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	f240 80b9 	bls.w	8009234 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 80b3 	beq.w	8009234 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090da:	461a      	mov	r2, r3
 80090dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090e0:	6093      	str	r3, [r2, #8]
 80090e2:	e0a7      	b.n	8009234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	f003 0320 	and.w	r3, r3, #32
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d009      	beq.n	8009102 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	015a      	lsls	r2, r3, #5
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	4413      	add	r3, r2
 80090f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090fa:	461a      	mov	r2, r3
 80090fc:	2320      	movs	r3, #32
 80090fe:	6093      	str	r3, [r2, #8]
 8009100:	e098      	b.n	8009234 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009108:	2b00      	cmp	r3, #0
 800910a:	f040 8093 	bne.w	8009234 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	4a4b      	ldr	r2, [pc, #300]	; (8009240 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d90f      	bls.n	8009136 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00a      	beq.n	8009136 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	015a      	lsls	r2, r3, #5
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	4413      	add	r3, r2
 8009128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800912c:	461a      	mov	r2, r3
 800912e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009132:	6093      	str	r3, [r2, #8]
 8009134:	e07e      	b.n	8009234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	4613      	mov	r3, r2
 800913a:	00db      	lsls	r3, r3, #3
 800913c:	4413      	add	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	4413      	add	r3, r2
 8009148:	3304      	adds	r3, #4
 800914a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	69da      	ldr	r2, [r3, #28]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	0159      	lsls	r1, r3, #5
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	440b      	add	r3, r1
 8009158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009162:	1ad2      	subs	r2, r2, r3
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d114      	bne.n	8009198 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d109      	bne.n	800918a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6818      	ldr	r0, [r3, #0]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009180:	461a      	mov	r2, r3
 8009182:	2101      	movs	r1, #1
 8009184:	f005 fa1e 	bl	800e5c4 <USB_EP0_OutStart>
 8009188:	e006      	b.n	8009198 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	691a      	ldr	r2, [r3, #16]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	441a      	add	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	b2db      	uxtb	r3, r3
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f00c fb82 	bl	80158a8 <HAL_PCD_DataOutStageCallback>
 80091a4:	e046      	b.n	8009234 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	4a26      	ldr	r2, [pc, #152]	; (8009244 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d124      	bne.n	80091f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00a      	beq.n	80091ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	015a      	lsls	r2, r3, #5
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	4413      	add	r3, r2
 80091c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c4:	461a      	mov	r2, r3
 80091c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091ca:	6093      	str	r3, [r2, #8]
 80091cc:	e032      	b.n	8009234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	f003 0320 	and.w	r3, r3, #32
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d008      	beq.n	80091ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	015a      	lsls	r2, r3, #5
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	4413      	add	r3, r2
 80091e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e4:	461a      	mov	r2, r3
 80091e6:	2320      	movs	r3, #32
 80091e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	4619      	mov	r1, r3
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f00c fb59 	bl	80158a8 <HAL_PCD_DataOutStageCallback>
 80091f6:	e01d      	b.n	8009234 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d114      	bne.n	8009228 <PCD_EP_OutXfrComplete_int+0x1b0>
 80091fe:	6879      	ldr	r1, [r7, #4]
 8009200:	683a      	ldr	r2, [r7, #0]
 8009202:	4613      	mov	r3, r2
 8009204:	00db      	lsls	r3, r3, #3
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	440b      	add	r3, r1
 800920c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d108      	bne.n	8009228 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6818      	ldr	r0, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009220:	461a      	mov	r2, r3
 8009222:	2100      	movs	r1, #0
 8009224:	f005 f9ce 	bl	800e5c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	b2db      	uxtb	r3, r3
 800922c:	4619      	mov	r1, r3
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f00c fb3a 	bl	80158a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3720      	adds	r7, #32
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	4f54300a 	.word	0x4f54300a
 8009244:	4f54310a 	.word	0x4f54310a

08009248 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	333c      	adds	r3, #60	; 0x3c
 8009260:	3304      	adds	r3, #4
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	4413      	add	r3, r2
 800926e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	4a15      	ldr	r2, [pc, #84]	; (80092d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d90e      	bls.n	800929c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009284:	2b00      	cmp	r3, #0
 8009286:	d009      	beq.n	800929c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	015a      	lsls	r2, r3, #5
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	4413      	add	r3, r2
 8009290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009294:	461a      	mov	r2, r3
 8009296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800929a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f00c faf1 	bl	8015884 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	4a0a      	ldr	r2, [pc, #40]	; (80092d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d90c      	bls.n	80092c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d108      	bne.n	80092c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6818      	ldr	r0, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80092bc:	461a      	mov	r2, r3
 80092be:	2101      	movs	r1, #1
 80092c0:	f005 f980 	bl	800e5c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	4f54300a 	.word	0x4f54300a

080092d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	70fb      	strb	r3, [r7, #3]
 80092e0:	4613      	mov	r3, r2
 80092e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80092ec:	78fb      	ldrb	r3, [r7, #3]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d107      	bne.n	8009302 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80092f2:	883b      	ldrh	r3, [r7, #0]
 80092f4:	0419      	lsls	r1, r3, #16
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68ba      	ldr	r2, [r7, #8]
 80092fc:	430a      	orrs	r2, r1
 80092fe:	629a      	str	r2, [r3, #40]	; 0x28
 8009300:	e028      	b.n	8009354 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009308:	0c1b      	lsrs	r3, r3, #16
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	4413      	add	r3, r2
 800930e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009310:	2300      	movs	r3, #0
 8009312:	73fb      	strb	r3, [r7, #15]
 8009314:	e00d      	b.n	8009332 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	7bfb      	ldrb	r3, [r7, #15]
 800931c:	3340      	adds	r3, #64	; 0x40
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4413      	add	r3, r2
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	0c1b      	lsrs	r3, r3, #16
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	4413      	add	r3, r2
 800932a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800932c:	7bfb      	ldrb	r3, [r7, #15]
 800932e:	3301      	adds	r3, #1
 8009330:	73fb      	strb	r3, [r7, #15]
 8009332:	7bfa      	ldrb	r2, [r7, #15]
 8009334:	78fb      	ldrb	r3, [r7, #3]
 8009336:	3b01      	subs	r3, #1
 8009338:	429a      	cmp	r2, r3
 800933a:	d3ec      	bcc.n	8009316 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800933c:	883b      	ldrh	r3, [r7, #0]
 800933e:	0418      	lsls	r0, r3, #16
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6819      	ldr	r1, [r3, #0]
 8009344:	78fb      	ldrb	r3, [r7, #3]
 8009346:	3b01      	subs	r3, #1
 8009348:	68ba      	ldr	r2, [r7, #8]
 800934a:	4302      	orrs	r2, r0
 800934c:	3340      	adds	r3, #64	; 0x40
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	440b      	add	r3, r1
 8009352:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009362:	b480      	push	{r7}
 8009364:	b083      	sub	sp, #12
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	460b      	mov	r3, r1
 800936c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	887a      	ldrh	r2, [r7, #2]
 8009374:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2201      	movs	r2, #1
 8009396:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093b6:	f043 0303 	orr.w	r3, r3, #3
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3714      	adds	r7, #20
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e0cc      	b.n	800957a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80093e0:	4b68      	ldr	r3, [pc, #416]	; (8009584 <HAL_RCC_ClockConfig+0x1b8>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 030f 	and.w	r3, r3, #15
 80093e8:	683a      	ldr	r2, [r7, #0]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d90c      	bls.n	8009408 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093ee:	4b65      	ldr	r3, [pc, #404]	; (8009584 <HAL_RCC_ClockConfig+0x1b8>)
 80093f0:	683a      	ldr	r2, [r7, #0]
 80093f2:	b2d2      	uxtb	r2, r2
 80093f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80093f6:	4b63      	ldr	r3, [pc, #396]	; (8009584 <HAL_RCC_ClockConfig+0x1b8>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 030f 	and.w	r3, r3, #15
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	429a      	cmp	r2, r3
 8009402:	d001      	beq.n	8009408 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e0b8      	b.n	800957a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0302 	and.w	r3, r3, #2
 8009410:	2b00      	cmp	r3, #0
 8009412:	d020      	beq.n	8009456 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f003 0304 	and.w	r3, r3, #4
 800941c:	2b00      	cmp	r3, #0
 800941e:	d005      	beq.n	800942c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009420:	4b59      	ldr	r3, [pc, #356]	; (8009588 <HAL_RCC_ClockConfig+0x1bc>)
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	4a58      	ldr	r2, [pc, #352]	; (8009588 <HAL_RCC_ClockConfig+0x1bc>)
 8009426:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800942a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 0308 	and.w	r3, r3, #8
 8009434:	2b00      	cmp	r3, #0
 8009436:	d005      	beq.n	8009444 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009438:	4b53      	ldr	r3, [pc, #332]	; (8009588 <HAL_RCC_ClockConfig+0x1bc>)
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	4a52      	ldr	r2, [pc, #328]	; (8009588 <HAL_RCC_ClockConfig+0x1bc>)
 800943e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009442:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009444:	4b50      	ldr	r3, [pc, #320]	; (8009588 <HAL_RCC_ClockConfig+0x1bc>)
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	494d      	ldr	r1, [pc, #308]	; (8009588 <HAL_RCC_ClockConfig+0x1bc>)
 8009452:	4313      	orrs	r3, r2
 8009454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 0301 	and.w	r3, r3, #1
 800945e:	2b00      	cmp	r3, #0
 8009460:	d044      	beq.n	80094ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d107      	bne.n	800947a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800946a:	4b47      	ldr	r3, [pc, #284]	; (8009588 <HAL_RCC_ClockConfig+0x1bc>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009472:	2b00      	cmp	r3, #0
 8009474:	d119      	bne.n	80094aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e07f      	b.n	800957a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	2b02      	cmp	r3, #2
 8009480:	d003      	beq.n	800948a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009486:	2b03      	cmp	r3, #3
 8009488:	d107      	bne.n	800949a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800948a:	4b3f      	ldr	r3, [pc, #252]	; (8009588 <HAL_RCC_ClockConfig+0x1bc>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009492:	2b00      	cmp	r3, #0
 8009494:	d109      	bne.n	80094aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	e06f      	b.n	800957a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800949a:	4b3b      	ldr	r3, [pc, #236]	; (8009588 <HAL_RCC_ClockConfig+0x1bc>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 0302 	and.w	r3, r3, #2
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d101      	bne.n	80094aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e067      	b.n	800957a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80094aa:	4b37      	ldr	r3, [pc, #220]	; (8009588 <HAL_RCC_ClockConfig+0x1bc>)
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	f023 0203 	bic.w	r2, r3, #3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	4934      	ldr	r1, [pc, #208]	; (8009588 <HAL_RCC_ClockConfig+0x1bc>)
 80094b8:	4313      	orrs	r3, r2
 80094ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80094bc:	f7fc f928 	bl	8005710 <HAL_GetTick>
 80094c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094c2:	e00a      	b.n	80094da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094c4:	f7fc f924 	bl	8005710 <HAL_GetTick>
 80094c8:	4602      	mov	r2, r0
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	1ad3      	subs	r3, r2, r3
 80094ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d901      	bls.n	80094da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80094d6:	2303      	movs	r3, #3
 80094d8:	e04f      	b.n	800957a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094da:	4b2b      	ldr	r3, [pc, #172]	; (8009588 <HAL_RCC_ClockConfig+0x1bc>)
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	f003 020c 	and.w	r2, r3, #12
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d1eb      	bne.n	80094c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80094ec:	4b25      	ldr	r3, [pc, #148]	; (8009584 <HAL_RCC_ClockConfig+0x1b8>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 030f 	and.w	r3, r3, #15
 80094f4:	683a      	ldr	r2, [r7, #0]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d20c      	bcs.n	8009514 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094fa:	4b22      	ldr	r3, [pc, #136]	; (8009584 <HAL_RCC_ClockConfig+0x1b8>)
 80094fc:	683a      	ldr	r2, [r7, #0]
 80094fe:	b2d2      	uxtb	r2, r2
 8009500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009502:	4b20      	ldr	r3, [pc, #128]	; (8009584 <HAL_RCC_ClockConfig+0x1b8>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 030f 	and.w	r3, r3, #15
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	429a      	cmp	r2, r3
 800950e:	d001      	beq.n	8009514 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	e032      	b.n	800957a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0304 	and.w	r3, r3, #4
 800951c:	2b00      	cmp	r3, #0
 800951e:	d008      	beq.n	8009532 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009520:	4b19      	ldr	r3, [pc, #100]	; (8009588 <HAL_RCC_ClockConfig+0x1bc>)
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	4916      	ldr	r1, [pc, #88]	; (8009588 <HAL_RCC_ClockConfig+0x1bc>)
 800952e:	4313      	orrs	r3, r2
 8009530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f003 0308 	and.w	r3, r3, #8
 800953a:	2b00      	cmp	r3, #0
 800953c:	d009      	beq.n	8009552 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800953e:	4b12      	ldr	r3, [pc, #72]	; (8009588 <HAL_RCC_ClockConfig+0x1bc>)
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	00db      	lsls	r3, r3, #3
 800954c:	490e      	ldr	r1, [pc, #56]	; (8009588 <HAL_RCC_ClockConfig+0x1bc>)
 800954e:	4313      	orrs	r3, r2
 8009550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009552:	f000 fbb1 	bl	8009cb8 <HAL_RCC_GetSysClockFreq>
 8009556:	4602      	mov	r2, r0
 8009558:	4b0b      	ldr	r3, [pc, #44]	; (8009588 <HAL_RCC_ClockConfig+0x1bc>)
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	091b      	lsrs	r3, r3, #4
 800955e:	f003 030f 	and.w	r3, r3, #15
 8009562:	490a      	ldr	r1, [pc, #40]	; (800958c <HAL_RCC_ClockConfig+0x1c0>)
 8009564:	5ccb      	ldrb	r3, [r1, r3]
 8009566:	fa22 f303 	lsr.w	r3, r2, r3
 800956a:	4a09      	ldr	r2, [pc, #36]	; (8009590 <HAL_RCC_ClockConfig+0x1c4>)
 800956c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800956e:	4b09      	ldr	r3, [pc, #36]	; (8009594 <HAL_RCC_ClockConfig+0x1c8>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4618      	mov	r0, r3
 8009574:	f7fb fae2 	bl	8004b3c <HAL_InitTick>

  return HAL_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	40023c00 	.word	0x40023c00
 8009588:	40023800 	.word	0x40023800
 800958c:	080199fc 	.word	0x080199fc
 8009590:	20000018 	.word	0x20000018
 8009594:	2000001c 	.word	0x2000001c

08009598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009598:	b480      	push	{r7}
 800959a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800959c:	4b03      	ldr	r3, [pc, #12]	; (80095ac <HAL_RCC_GetHCLKFreq+0x14>)
 800959e:	681b      	ldr	r3, [r3, #0]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	20000018 	.word	0x20000018

080095b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80095b4:	f7ff fff0 	bl	8009598 <HAL_RCC_GetHCLKFreq>
 80095b8:	4602      	mov	r2, r0
 80095ba:	4b05      	ldr	r3, [pc, #20]	; (80095d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	0a9b      	lsrs	r3, r3, #10
 80095c0:	f003 0307 	and.w	r3, r3, #7
 80095c4:	4903      	ldr	r1, [pc, #12]	; (80095d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80095c6:	5ccb      	ldrb	r3, [r1, r3]
 80095c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	40023800 	.word	0x40023800
 80095d4:	08019a0c 	.word	0x08019a0c

080095d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80095dc:	f7ff ffdc 	bl	8009598 <HAL_RCC_GetHCLKFreq>
 80095e0:	4602      	mov	r2, r0
 80095e2:	4b05      	ldr	r3, [pc, #20]	; (80095f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	0b5b      	lsrs	r3, r3, #13
 80095e8:	f003 0307 	and.w	r3, r3, #7
 80095ec:	4903      	ldr	r1, [pc, #12]	; (80095fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80095ee:	5ccb      	ldrb	r3, [r1, r3]
 80095f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	40023800 	.word	0x40023800
 80095fc:	08019a0c 	.word	0x08019a0c

08009600 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	220f      	movs	r2, #15
 800960e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009610:	4b12      	ldr	r3, [pc, #72]	; (800965c <HAL_RCC_GetClockConfig+0x5c>)
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	f003 0203 	and.w	r2, r3, #3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800961c:	4b0f      	ldr	r3, [pc, #60]	; (800965c <HAL_RCC_GetClockConfig+0x5c>)
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009628:	4b0c      	ldr	r3, [pc, #48]	; (800965c <HAL_RCC_GetClockConfig+0x5c>)
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009634:	4b09      	ldr	r3, [pc, #36]	; (800965c <HAL_RCC_GetClockConfig+0x5c>)
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	08db      	lsrs	r3, r3, #3
 800963a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009642:	4b07      	ldr	r3, [pc, #28]	; (8009660 <HAL_RCC_GetClockConfig+0x60>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 020f 	and.w	r2, r3, #15
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	601a      	str	r2, [r3, #0]
}
 800964e:	bf00      	nop
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	40023800 	.word	0x40023800
 8009660:	40023c00 	.word	0x40023c00

08009664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b08c      	sub	sp, #48	; 0x30
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800966c:	2300      	movs	r3, #0
 800966e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8009670:	2300      	movs	r3, #0
 8009672:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8009674:	2300      	movs	r3, #0
 8009676:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8009678:	2300      	movs	r3, #0
 800967a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800967c:	2300      	movs	r3, #0
 800967e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8009680:	2300      	movs	r3, #0
 8009682:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8009684:	2300      	movs	r3, #0
 8009686:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8009688:	2300      	movs	r3, #0
 800968a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800968c:	2300      	movs	r3, #0
 800968e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f003 0301 	and.w	r3, r3, #1
 8009698:	2b00      	cmp	r3, #0
 800969a:	d010      	beq.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800969c:	4b6f      	ldr	r3, [pc, #444]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800969e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096a2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096aa:	496c      	ldr	r1, [pc, #432]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80096ac:	4313      	orrs	r3, r2
 80096ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80096ba:	2301      	movs	r3, #1
 80096bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 0302 	and.w	r3, r3, #2
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d010      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80096ca:	4b64      	ldr	r3, [pc, #400]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80096cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096d0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d8:	4960      	ldr	r1, [pc, #384]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80096da:	4313      	orrs	r3, r2
 80096dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80096e8:	2301      	movs	r3, #1
 80096ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0304 	and.w	r3, r3, #4
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d017      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80096f8:	4b58      	ldr	r3, [pc, #352]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80096fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009706:	4955      	ldr	r1, [pc, #340]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009708:	4313      	orrs	r3, r2
 800970a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009716:	d101      	bne.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8009718:	2301      	movs	r3, #1
 800971a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009720:	2b00      	cmp	r3, #0
 8009722:	d101      	bne.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8009724:	2301      	movs	r3, #1
 8009726:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 0308 	and.w	r3, r3, #8
 8009730:	2b00      	cmp	r3, #0
 8009732:	d017      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009734:	4b49      	ldr	r3, [pc, #292]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800973a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009742:	4946      	ldr	r1, [pc, #280]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009744:	4313      	orrs	r3, r2
 8009746:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800974e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009752:	d101      	bne.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8009754:	2301      	movs	r3, #1
 8009756:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800975c:	2b00      	cmp	r3, #0
 800975e:	d101      	bne.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8009760:	2301      	movs	r3, #1
 8009762:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 0320 	and.w	r3, r3, #32
 800976c:	2b00      	cmp	r3, #0
 800976e:	f000 808a 	beq.w	8009886 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009772:	2300      	movs	r3, #0
 8009774:	60bb      	str	r3, [r7, #8]
 8009776:	4b39      	ldr	r3, [pc, #228]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977a:	4a38      	ldr	r2, [pc, #224]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800977c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009780:	6413      	str	r3, [r2, #64]	; 0x40
 8009782:	4b36      	ldr	r3, [pc, #216]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800978a:	60bb      	str	r3, [r7, #8]
 800978c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800978e:	4b34      	ldr	r3, [pc, #208]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a33      	ldr	r2, [pc, #204]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8009794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009798:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800979a:	f7fb ffb9 	bl	8005710 <HAL_GetTick>
 800979e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80097a0:	e008      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80097a2:	f7fb ffb5 	bl	8005710 <HAL_GetTick>
 80097a6:	4602      	mov	r2, r0
 80097a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097aa:	1ad3      	subs	r3, r2, r3
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d901      	bls.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80097b0:	2303      	movs	r3, #3
 80097b2:	e278      	b.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80097b4:	4b2a      	ldr	r3, [pc, #168]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d0f0      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80097c0:	4b26      	ldr	r3, [pc, #152]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80097c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097c8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80097ca:	6a3b      	ldr	r3, [r7, #32]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d02f      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097d8:	6a3a      	ldr	r2, [r7, #32]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d028      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80097de:	4b1f      	ldr	r3, [pc, #124]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80097e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097e6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80097e8:	4b1e      	ldr	r3, [pc, #120]	; (8009864 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80097ea:	2201      	movs	r2, #1
 80097ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80097ee:	4b1d      	ldr	r3, [pc, #116]	; (8009864 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80097f4:	4a19      	ldr	r2, [pc, #100]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80097f6:	6a3b      	ldr	r3, [r7, #32]
 80097f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80097fa:	4b18      	ldr	r3, [pc, #96]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80097fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097fe:	f003 0301 	and.w	r3, r3, #1
 8009802:	2b01      	cmp	r3, #1
 8009804:	d114      	bne.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009806:	f7fb ff83 	bl	8005710 <HAL_GetTick>
 800980a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800980c:	e00a      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800980e:	f7fb ff7f 	bl	8005710 <HAL_GetTick>
 8009812:	4602      	mov	r2, r0
 8009814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	f241 3288 	movw	r2, #5000	; 0x1388
 800981c:	4293      	cmp	r3, r2
 800981e:	d901      	bls.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8009820:	2303      	movs	r3, #3
 8009822:	e240      	b.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009824:	4b0d      	ldr	r3, [pc, #52]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009828:	f003 0302 	and.w	r3, r3, #2
 800982c:	2b00      	cmp	r3, #0
 800982e:	d0ee      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009838:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800983c:	d114      	bne.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800983e:	4b07      	ldr	r3, [pc, #28]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800984a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800984e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009852:	4902      	ldr	r1, [pc, #8]	; (800985c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009854:	4313      	orrs	r3, r2
 8009856:	608b      	str	r3, [r1, #8]
 8009858:	e00c      	b.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800985a:	bf00      	nop
 800985c:	40023800 	.word	0x40023800
 8009860:	40007000 	.word	0x40007000
 8009864:	42470e40 	.word	0x42470e40
 8009868:	4b4a      	ldr	r3, [pc, #296]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	4a49      	ldr	r2, [pc, #292]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800986e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009872:	6093      	str	r3, [r2, #8]
 8009874:	4b47      	ldr	r3, [pc, #284]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009876:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800987c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009880:	4944      	ldr	r1, [pc, #272]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009882:	4313      	orrs	r3, r2
 8009884:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f003 0310 	and.w	r3, r3, #16
 800988e:	2b00      	cmp	r3, #0
 8009890:	d004      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8009898:	4b3f      	ldr	r3, [pc, #252]	; (8009998 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800989a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00a      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80098a8:	4b3a      	ldr	r3, [pc, #232]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80098aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098b6:	4937      	ldr	r1, [pc, #220]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80098b8:	4313      	orrs	r3, r2
 80098ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00a      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80098ca:	4b32      	ldr	r3, [pc, #200]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80098cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098d0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098d8:	492e      	ldr	r1, [pc, #184]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80098da:	4313      	orrs	r3, r2
 80098dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d011      	beq.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80098ec:	4b29      	ldr	r3, [pc, #164]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80098ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098f2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098fa:	4926      	ldr	r1, [pc, #152]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80098fc:	4313      	orrs	r3, r2
 80098fe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009906:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800990a:	d101      	bne.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800990c:	2301      	movs	r3, #1
 800990e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00a      	beq.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800991c:	4b1d      	ldr	r3, [pc, #116]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800991e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009922:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800992a:	491a      	ldr	r1, [pc, #104]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800992c:	4313      	orrs	r3, r2
 800992e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800993a:	2b00      	cmp	r3, #0
 800993c:	d011      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800993e:	4b15      	ldr	r3, [pc, #84]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009944:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800994c:	4911      	ldr	r1, [pc, #68]	; (8009994 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800994e:	4313      	orrs	r3, r2
 8009950:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800995c:	d101      	bne.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800995e:	2301      	movs	r3, #1
 8009960:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009964:	2b01      	cmp	r3, #1
 8009966:	d005      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009970:	f040 80ff 	bne.w	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009974:	4b09      	ldr	r3, [pc, #36]	; (800999c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009976:	2200      	movs	r2, #0
 8009978:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800997a:	f7fb fec9 	bl	8005710 <HAL_GetTick>
 800997e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009980:	e00e      	b.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009982:	f7fb fec5 	bl	8005710 <HAL_GetTick>
 8009986:	4602      	mov	r2, r0
 8009988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998a:	1ad3      	subs	r3, r2, r3
 800998c:	2b02      	cmp	r3, #2
 800998e:	d907      	bls.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009990:	2303      	movs	r3, #3
 8009992:	e188      	b.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8009994:	40023800 	.word	0x40023800
 8009998:	424711e0 	.word	0x424711e0
 800999c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80099a0:	4b7e      	ldr	r3, [pc, #504]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1ea      	bne.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 0301 	and.w	r3, r3, #1
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d003      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d009      	beq.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d028      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d124      	bne.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80099d4:	4b71      	ldr	r3, [pc, #452]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80099d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099da:	0c1b      	lsrs	r3, r3, #16
 80099dc:	f003 0303 	and.w	r3, r3, #3
 80099e0:	3301      	adds	r3, #1
 80099e2:	005b      	lsls	r3, r3, #1
 80099e4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80099e6:	4b6d      	ldr	r3, [pc, #436]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80099e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099ec:	0e1b      	lsrs	r3, r3, #24
 80099ee:	f003 030f 	and.w	r3, r3, #15
 80099f2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685a      	ldr	r2, [r3, #4]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	019b      	lsls	r3, r3, #6
 80099fe:	431a      	orrs	r2, r3
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	085b      	lsrs	r3, r3, #1
 8009a04:	3b01      	subs	r3, #1
 8009a06:	041b      	lsls	r3, r3, #16
 8009a08:	431a      	orrs	r2, r3
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	061b      	lsls	r3, r3, #24
 8009a0e:	431a      	orrs	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	071b      	lsls	r3, r3, #28
 8009a16:	4961      	ldr	r1, [pc, #388]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 0304 	and.w	r3, r3, #4
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d004      	beq.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a32:	d00a      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d035      	beq.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a48:	d130      	bne.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8009a4a:	4b54      	ldr	r3, [pc, #336]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a50:	0c1b      	lsrs	r3, r3, #16
 8009a52:	f003 0303 	and.w	r3, r3, #3
 8009a56:	3301      	adds	r3, #1
 8009a58:	005b      	lsls	r3, r3, #1
 8009a5a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009a5c:	4b4f      	ldr	r3, [pc, #316]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a62:	0f1b      	lsrs	r3, r3, #28
 8009a64:	f003 0307 	and.w	r3, r3, #7
 8009a68:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	685a      	ldr	r2, [r3, #4]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	019b      	lsls	r3, r3, #6
 8009a74:	431a      	orrs	r2, r3
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	085b      	lsrs	r3, r3, #1
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	041b      	lsls	r3, r3, #16
 8009a7e:	431a      	orrs	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	691b      	ldr	r3, [r3, #16]
 8009a84:	061b      	lsls	r3, r3, #24
 8009a86:	431a      	orrs	r2, r3
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	071b      	lsls	r3, r3, #28
 8009a8c:	4943      	ldr	r1, [pc, #268]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009a94:	4b41      	ldr	r3, [pc, #260]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a9a:	f023 021f 	bic.w	r2, r3, #31
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	493d      	ldr	r1, [pc, #244]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d029      	beq.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ac0:	d124      	bne.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8009ac2:	4b36      	ldr	r3, [pc, #216]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ac8:	0c1b      	lsrs	r3, r3, #16
 8009aca:	f003 0303 	and.w	r3, r3, #3
 8009ace:	3301      	adds	r3, #1
 8009ad0:	005b      	lsls	r3, r3, #1
 8009ad2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009ad4:	4b31      	ldr	r3, [pc, #196]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ada:	0f1b      	lsrs	r3, r3, #28
 8009adc:	f003 0307 	and.w	r3, r3, #7
 8009ae0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	685a      	ldr	r2, [r3, #4]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	019b      	lsls	r3, r3, #6
 8009aec:	431a      	orrs	r2, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	085b      	lsrs	r3, r3, #1
 8009af4:	3b01      	subs	r3, #1
 8009af6:	041b      	lsls	r3, r3, #16
 8009af8:	431a      	orrs	r2, r3
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	061b      	lsls	r3, r3, #24
 8009afe:	431a      	orrs	r2, r3
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	071b      	lsls	r3, r3, #28
 8009b04:	4925      	ldr	r1, [pc, #148]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009b06:	4313      	orrs	r3, r2
 8009b08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d016      	beq.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	019b      	lsls	r3, r3, #6
 8009b22:	431a      	orrs	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	085b      	lsrs	r3, r3, #1
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	041b      	lsls	r3, r3, #16
 8009b2e:	431a      	orrs	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	061b      	lsls	r3, r3, #24
 8009b36:	431a      	orrs	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	695b      	ldr	r3, [r3, #20]
 8009b3c:	071b      	lsls	r3, r3, #28
 8009b3e:	4917      	ldr	r1, [pc, #92]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009b40:	4313      	orrs	r3, r2
 8009b42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009b46:	4b16      	ldr	r3, [pc, #88]	; (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8009b48:	2201      	movs	r2, #1
 8009b4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009b4c:	f7fb fde0 	bl	8005710 <HAL_GetTick>
 8009b50:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b52:	e008      	b.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009b54:	f7fb fddc 	bl	8005710 <HAL_GetTick>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5c:	1ad3      	subs	r3, r2, r3
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d901      	bls.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b62:	2303      	movs	r3, #3
 8009b64:	e09f      	b.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b66:	4b0d      	ldr	r3, [pc, #52]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d0f0      	beq.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8009b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	f040 8095 	bne.w	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009b7a:	4b0a      	ldr	r3, [pc, #40]	; (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009b80:	f7fb fdc6 	bl	8005710 <HAL_GetTick>
 8009b84:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009b86:	e00f      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009b88:	f7fb fdc2 	bl	8005710 <HAL_GetTick>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b90:	1ad3      	subs	r3, r2, r3
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	d908      	bls.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b96:	2303      	movs	r3, #3
 8009b98:	e085      	b.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8009b9a:	bf00      	nop
 8009b9c:	40023800 	.word	0x40023800
 8009ba0:	42470068 	.word	0x42470068
 8009ba4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009ba8:	4b41      	ldr	r3, [pc, #260]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bb4:	d0e8      	beq.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f003 0304 	and.w	r3, r3, #4
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d003      	beq.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x566>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d009      	beq.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d02b      	beq.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d127      	bne.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009bde:	4b34      	ldr	r3, [pc, #208]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009be4:	0c1b      	lsrs	r3, r3, #16
 8009be6:	f003 0303 	and.w	r3, r3, #3
 8009bea:	3301      	adds	r3, #1
 8009bec:	005b      	lsls	r3, r3, #1
 8009bee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	699a      	ldr	r2, [r3, #24]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	69db      	ldr	r3, [r3, #28]
 8009bf8:	019b      	lsls	r3, r3, #6
 8009bfa:	431a      	orrs	r2, r3
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	085b      	lsrs	r3, r3, #1
 8009c00:	3b01      	subs	r3, #1
 8009c02:	041b      	lsls	r3, r3, #16
 8009c04:	431a      	orrs	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0a:	061b      	lsls	r3, r3, #24
 8009c0c:	4928      	ldr	r1, [pc, #160]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009c14:	4b26      	ldr	r3, [pc, #152]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c1a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c22:	3b01      	subs	r3, #1
 8009c24:	021b      	lsls	r3, r3, #8
 8009c26:	4922      	ldr	r1, [pc, #136]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d01d      	beq.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c42:	d118      	bne.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009c44:	4b1a      	ldr	r3, [pc, #104]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c4a:	0e1b      	lsrs	r3, r3, #24
 8009c4c:	f003 030f 	and.w	r3, r3, #15
 8009c50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	699a      	ldr	r2, [r3, #24]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	69db      	ldr	r3, [r3, #28]
 8009c5a:	019b      	lsls	r3, r3, #6
 8009c5c:	431a      	orrs	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	085b      	lsrs	r3, r3, #1
 8009c64:	3b01      	subs	r3, #1
 8009c66:	041b      	lsls	r3, r3, #16
 8009c68:	431a      	orrs	r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	061b      	lsls	r3, r3, #24
 8009c6e:	4910      	ldr	r1, [pc, #64]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009c70:	4313      	orrs	r3, r2
 8009c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009c76:	4b0f      	ldr	r3, [pc, #60]	; (8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8009c78:	2201      	movs	r2, #1
 8009c7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009c7c:	f7fb fd48 	bl	8005710 <HAL_GetTick>
 8009c80:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009c82:	e008      	b.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009c84:	f7fb fd44 	bl	8005710 <HAL_GetTick>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	d901      	bls.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009c92:	2303      	movs	r3, #3
 8009c94:	e007      	b.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009c96:	4b06      	ldr	r3, [pc, #24]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ca2:	d1ef      	bne.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3730      	adds	r7, #48	; 0x30
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	40023800 	.word	0x40023800
 8009cb4:	42470070 	.word	0x42470070

08009cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cbc:	b0a6      	sub	sp, #152	; 0x98
 8009cbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009cde:	4bc8      	ldr	r3, [pc, #800]	; (800a000 <HAL_RCC_GetSysClockFreq+0x348>)
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	f003 030c 	and.w	r3, r3, #12
 8009ce6:	2b0c      	cmp	r3, #12
 8009ce8:	f200 817e 	bhi.w	8009fe8 <HAL_RCC_GetSysClockFreq+0x330>
 8009cec:	a201      	add	r2, pc, #4	; (adr r2, 8009cf4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8009cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf2:	bf00      	nop
 8009cf4:	08009d29 	.word	0x08009d29
 8009cf8:	08009fe9 	.word	0x08009fe9
 8009cfc:	08009fe9 	.word	0x08009fe9
 8009d00:	08009fe9 	.word	0x08009fe9
 8009d04:	08009d31 	.word	0x08009d31
 8009d08:	08009fe9 	.word	0x08009fe9
 8009d0c:	08009fe9 	.word	0x08009fe9
 8009d10:	08009fe9 	.word	0x08009fe9
 8009d14:	08009d39 	.word	0x08009d39
 8009d18:	08009fe9 	.word	0x08009fe9
 8009d1c:	08009fe9 	.word	0x08009fe9
 8009d20:	08009fe9 	.word	0x08009fe9
 8009d24:	08009ea3 	.word	0x08009ea3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009d28:	4bb6      	ldr	r3, [pc, #728]	; (800a004 <HAL_RCC_GetSysClockFreq+0x34c>)
 8009d2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8009d2e:	e15f      	b.n	8009ff0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009d30:	4bb5      	ldr	r3, [pc, #724]	; (800a008 <HAL_RCC_GetSysClockFreq+0x350>)
 8009d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8009d36:	e15b      	b.n	8009ff0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009d38:	4bb1      	ldr	r3, [pc, #708]	; (800a000 <HAL_RCC_GetSysClockFreq+0x348>)
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009d44:	4bae      	ldr	r3, [pc, #696]	; (800a000 <HAL_RCC_GetSysClockFreq+0x348>)
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d031      	beq.n	8009db4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d50:	4bab      	ldr	r3, [pc, #684]	; (800a000 <HAL_RCC_GetSysClockFreq+0x348>)
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	099b      	lsrs	r3, r3, #6
 8009d56:	2200      	movs	r2, #0
 8009d58:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d62:	663b      	str	r3, [r7, #96]	; 0x60
 8009d64:	2300      	movs	r3, #0
 8009d66:	667b      	str	r3, [r7, #100]	; 0x64
 8009d68:	4ba7      	ldr	r3, [pc, #668]	; (800a008 <HAL_RCC_GetSysClockFreq+0x350>)
 8009d6a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8009d6e:	462a      	mov	r2, r5
 8009d70:	fb03 f202 	mul.w	r2, r3, r2
 8009d74:	2300      	movs	r3, #0
 8009d76:	4621      	mov	r1, r4
 8009d78:	fb01 f303 	mul.w	r3, r1, r3
 8009d7c:	4413      	add	r3, r2
 8009d7e:	4aa2      	ldr	r2, [pc, #648]	; (800a008 <HAL_RCC_GetSysClockFreq+0x350>)
 8009d80:	4621      	mov	r1, r4
 8009d82:	fba1 1202 	umull	r1, r2, r1, r2
 8009d86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009d88:	460a      	mov	r2, r1
 8009d8a:	67ba      	str	r2, [r7, #120]	; 0x78
 8009d8c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009d8e:	4413      	add	r3, r2
 8009d90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d96:	2200      	movs	r2, #0
 8009d98:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d9a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009d9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009da0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009da4:	f7f7 f8ee 	bl	8000f84 <__aeabi_uldivmod>
 8009da8:	4602      	mov	r2, r0
 8009daa:	460b      	mov	r3, r1
 8009dac:	4613      	mov	r3, r2
 8009dae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009db2:	e064      	b.n	8009e7e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009db4:	4b92      	ldr	r3, [pc, #584]	; (800a000 <HAL_RCC_GetSysClockFreq+0x348>)
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	099b      	lsrs	r3, r3, #6
 8009dba:	2200      	movs	r2, #0
 8009dbc:	653b      	str	r3, [r7, #80]	; 0x50
 8009dbe:	657a      	str	r2, [r7, #84]	; 0x54
 8009dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009dc8:	2300      	movs	r3, #0
 8009dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009dcc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8009dd0:	4622      	mov	r2, r4
 8009dd2:	462b      	mov	r3, r5
 8009dd4:	f04f 0000 	mov.w	r0, #0
 8009dd8:	f04f 0100 	mov.w	r1, #0
 8009ddc:	0159      	lsls	r1, r3, #5
 8009dde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009de2:	0150      	lsls	r0, r2, #5
 8009de4:	4602      	mov	r2, r0
 8009de6:	460b      	mov	r3, r1
 8009de8:	4621      	mov	r1, r4
 8009dea:	1a51      	subs	r1, r2, r1
 8009dec:	6139      	str	r1, [r7, #16]
 8009dee:	4629      	mov	r1, r5
 8009df0:	eb63 0301 	sbc.w	r3, r3, r1
 8009df4:	617b      	str	r3, [r7, #20]
 8009df6:	f04f 0200 	mov.w	r2, #0
 8009dfa:	f04f 0300 	mov.w	r3, #0
 8009dfe:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009e02:	4659      	mov	r1, fp
 8009e04:	018b      	lsls	r3, r1, #6
 8009e06:	4651      	mov	r1, sl
 8009e08:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009e0c:	4651      	mov	r1, sl
 8009e0e:	018a      	lsls	r2, r1, #6
 8009e10:	4651      	mov	r1, sl
 8009e12:	ebb2 0801 	subs.w	r8, r2, r1
 8009e16:	4659      	mov	r1, fp
 8009e18:	eb63 0901 	sbc.w	r9, r3, r1
 8009e1c:	f04f 0200 	mov.w	r2, #0
 8009e20:	f04f 0300 	mov.w	r3, #0
 8009e24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e30:	4690      	mov	r8, r2
 8009e32:	4699      	mov	r9, r3
 8009e34:	4623      	mov	r3, r4
 8009e36:	eb18 0303 	adds.w	r3, r8, r3
 8009e3a:	60bb      	str	r3, [r7, #8]
 8009e3c:	462b      	mov	r3, r5
 8009e3e:	eb49 0303 	adc.w	r3, r9, r3
 8009e42:	60fb      	str	r3, [r7, #12]
 8009e44:	f04f 0200 	mov.w	r2, #0
 8009e48:	f04f 0300 	mov.w	r3, #0
 8009e4c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009e50:	4629      	mov	r1, r5
 8009e52:	028b      	lsls	r3, r1, #10
 8009e54:	4621      	mov	r1, r4
 8009e56:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009e5a:	4621      	mov	r1, r4
 8009e5c:	028a      	lsls	r2, r1, #10
 8009e5e:	4610      	mov	r0, r2
 8009e60:	4619      	mov	r1, r3
 8009e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e66:	2200      	movs	r2, #0
 8009e68:	643b      	str	r3, [r7, #64]	; 0x40
 8009e6a:	647a      	str	r2, [r7, #68]	; 0x44
 8009e6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009e70:	f7f7 f888 	bl	8000f84 <__aeabi_uldivmod>
 8009e74:	4602      	mov	r2, r0
 8009e76:	460b      	mov	r3, r1
 8009e78:	4613      	mov	r3, r2
 8009e7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009e7e:	4b60      	ldr	r3, [pc, #384]	; (800a000 <HAL_RCC_GetSysClockFreq+0x348>)
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	0c1b      	lsrs	r3, r3, #16
 8009e84:	f003 0303 	and.w	r3, r3, #3
 8009e88:	3301      	adds	r3, #1
 8009e8a:	005b      	lsls	r3, r3, #1
 8009e8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8009e90:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009e94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8009ea0:	e0a6      	b.n	8009ff0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009ea2:	4b57      	ldr	r3, [pc, #348]	; (800a000 <HAL_RCC_GetSysClockFreq+0x348>)
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009eaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009eae:	4b54      	ldr	r3, [pc, #336]	; (800a000 <HAL_RCC_GetSysClockFreq+0x348>)
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d02a      	beq.n	8009f10 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009eba:	4b51      	ldr	r3, [pc, #324]	; (800a000 <HAL_RCC_GetSysClockFreq+0x348>)
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	099b      	lsrs	r3, r3, #6
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ec4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009ecc:	2100      	movs	r1, #0
 8009ece:	4b4e      	ldr	r3, [pc, #312]	; (800a008 <HAL_RCC_GetSysClockFreq+0x350>)
 8009ed0:	fb03 f201 	mul.w	r2, r3, r1
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	fb00 f303 	mul.w	r3, r0, r3
 8009eda:	4413      	add	r3, r2
 8009edc:	4a4a      	ldr	r2, [pc, #296]	; (800a008 <HAL_RCC_GetSysClockFreq+0x350>)
 8009ede:	fba0 1202 	umull	r1, r2, r0, r2
 8009ee2:	677a      	str	r2, [r7, #116]	; 0x74
 8009ee4:	460a      	mov	r2, r1
 8009ee6:	673a      	str	r2, [r7, #112]	; 0x70
 8009ee8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009eea:	4413      	add	r3, r2
 8009eec:	677b      	str	r3, [r7, #116]	; 0x74
 8009eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	633b      	str	r3, [r7, #48]	; 0x30
 8009ef6:	637a      	str	r2, [r7, #52]	; 0x34
 8009ef8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009efc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8009f00:	f7f7 f840 	bl	8000f84 <__aeabi_uldivmod>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	4613      	mov	r3, r2
 8009f0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009f0e:	e05b      	b.n	8009fc8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f10:	4b3b      	ldr	r3, [pc, #236]	; (800a000 <HAL_RCC_GetSysClockFreq+0x348>)
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	099b      	lsrs	r3, r3, #6
 8009f16:	2200      	movs	r2, #0
 8009f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f22:	623b      	str	r3, [r7, #32]
 8009f24:	2300      	movs	r3, #0
 8009f26:	627b      	str	r3, [r7, #36]	; 0x24
 8009f28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009f2c:	4642      	mov	r2, r8
 8009f2e:	464b      	mov	r3, r9
 8009f30:	f04f 0000 	mov.w	r0, #0
 8009f34:	f04f 0100 	mov.w	r1, #0
 8009f38:	0159      	lsls	r1, r3, #5
 8009f3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009f3e:	0150      	lsls	r0, r2, #5
 8009f40:	4602      	mov	r2, r0
 8009f42:	460b      	mov	r3, r1
 8009f44:	4641      	mov	r1, r8
 8009f46:	ebb2 0a01 	subs.w	sl, r2, r1
 8009f4a:	4649      	mov	r1, r9
 8009f4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009f50:	f04f 0200 	mov.w	r2, #0
 8009f54:	f04f 0300 	mov.w	r3, #0
 8009f58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009f5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009f60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009f64:	ebb2 040a 	subs.w	r4, r2, sl
 8009f68:	eb63 050b 	sbc.w	r5, r3, fp
 8009f6c:	f04f 0200 	mov.w	r2, #0
 8009f70:	f04f 0300 	mov.w	r3, #0
 8009f74:	00eb      	lsls	r3, r5, #3
 8009f76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f7a:	00e2      	lsls	r2, r4, #3
 8009f7c:	4614      	mov	r4, r2
 8009f7e:	461d      	mov	r5, r3
 8009f80:	4643      	mov	r3, r8
 8009f82:	18e3      	adds	r3, r4, r3
 8009f84:	603b      	str	r3, [r7, #0]
 8009f86:	464b      	mov	r3, r9
 8009f88:	eb45 0303 	adc.w	r3, r5, r3
 8009f8c:	607b      	str	r3, [r7, #4]
 8009f8e:	f04f 0200 	mov.w	r2, #0
 8009f92:	f04f 0300 	mov.w	r3, #0
 8009f96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009f9a:	4629      	mov	r1, r5
 8009f9c:	028b      	lsls	r3, r1, #10
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009fa4:	4621      	mov	r1, r4
 8009fa6:	028a      	lsls	r2, r1, #10
 8009fa8:	4610      	mov	r0, r2
 8009faa:	4619      	mov	r1, r3
 8009fac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	61bb      	str	r3, [r7, #24]
 8009fb4:	61fa      	str	r2, [r7, #28]
 8009fb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009fba:	f7f6 ffe3 	bl	8000f84 <__aeabi_uldivmod>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009fc8:	4b0d      	ldr	r3, [pc, #52]	; (800a000 <HAL_RCC_GetSysClockFreq+0x348>)
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	0f1b      	lsrs	r3, r3, #28
 8009fce:	f003 0307 	and.w	r3, r3, #7
 8009fd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8009fd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009fda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8009fe6:	e003      	b.n	8009ff0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009fe8:	4b06      	ldr	r3, [pc, #24]	; (800a004 <HAL_RCC_GetSysClockFreq+0x34c>)
 8009fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8009fee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009ff0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3798      	adds	r7, #152	; 0x98
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ffe:	bf00      	nop
 800a000:	40023800 	.word	0x40023800
 800a004:	00f42400 	.word	0x00f42400
 800a008:	00b71b00 	.word	0x00b71b00

0800a00c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b086      	sub	sp, #24
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d101      	bne.n	800a01e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	e28d      	b.n	800a53a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f003 0301 	and.w	r3, r3, #1
 800a026:	2b00      	cmp	r3, #0
 800a028:	f000 8083 	beq.w	800a132 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a02c:	4b94      	ldr	r3, [pc, #592]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	f003 030c 	and.w	r3, r3, #12
 800a034:	2b04      	cmp	r3, #4
 800a036:	d019      	beq.n	800a06c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a038:	4b91      	ldr	r3, [pc, #580]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a040:	2b08      	cmp	r3, #8
 800a042:	d106      	bne.n	800a052 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a044:	4b8e      	ldr	r3, [pc, #568]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a04c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a050:	d00c      	beq.n	800a06c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a052:	4b8b      	ldr	r3, [pc, #556]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a05a:	2b0c      	cmp	r3, #12
 800a05c:	d112      	bne.n	800a084 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a05e:	4b88      	ldr	r3, [pc, #544]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a06a:	d10b      	bne.n	800a084 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a06c:	4b84      	ldr	r3, [pc, #528]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a074:	2b00      	cmp	r3, #0
 800a076:	d05b      	beq.n	800a130 <HAL_RCC_OscConfig+0x124>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d157      	bne.n	800a130 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	e25a      	b.n	800a53a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a08c:	d106      	bne.n	800a09c <HAL_RCC_OscConfig+0x90>
 800a08e:	4b7c      	ldr	r3, [pc, #496]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a7b      	ldr	r2, [pc, #492]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a098:	6013      	str	r3, [r2, #0]
 800a09a:	e01d      	b.n	800a0d8 <HAL_RCC_OscConfig+0xcc>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0a4:	d10c      	bne.n	800a0c0 <HAL_RCC_OscConfig+0xb4>
 800a0a6:	4b76      	ldr	r3, [pc, #472]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a75      	ldr	r2, [pc, #468]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a0ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a0b0:	6013      	str	r3, [r2, #0]
 800a0b2:	4b73      	ldr	r3, [pc, #460]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a72      	ldr	r2, [pc, #456]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a0b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0bc:	6013      	str	r3, [r2, #0]
 800a0be:	e00b      	b.n	800a0d8 <HAL_RCC_OscConfig+0xcc>
 800a0c0:	4b6f      	ldr	r3, [pc, #444]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a6e      	ldr	r2, [pc, #440]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a0c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0ca:	6013      	str	r3, [r2, #0]
 800a0cc:	4b6c      	ldr	r3, [pc, #432]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a6b      	ldr	r2, [pc, #428]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a0d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a0d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d013      	beq.n	800a108 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0e0:	f7fb fb16 	bl	8005710 <HAL_GetTick>
 800a0e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a0e6:	e008      	b.n	800a0fa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a0e8:	f7fb fb12 	bl	8005710 <HAL_GetTick>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	2b64      	cmp	r3, #100	; 0x64
 800a0f4:	d901      	bls.n	800a0fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	e21f      	b.n	800a53a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a0fa:	4b61      	ldr	r3, [pc, #388]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a102:	2b00      	cmp	r3, #0
 800a104:	d0f0      	beq.n	800a0e8 <HAL_RCC_OscConfig+0xdc>
 800a106:	e014      	b.n	800a132 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a108:	f7fb fb02 	bl	8005710 <HAL_GetTick>
 800a10c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a10e:	e008      	b.n	800a122 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a110:	f7fb fafe 	bl	8005710 <HAL_GetTick>
 800a114:	4602      	mov	r2, r0
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	2b64      	cmp	r3, #100	; 0x64
 800a11c:	d901      	bls.n	800a122 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800a11e:	2303      	movs	r3, #3
 800a120:	e20b      	b.n	800a53a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a122:	4b57      	ldr	r3, [pc, #348]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1f0      	bne.n	800a110 <HAL_RCC_OscConfig+0x104>
 800a12e:	e000      	b.n	800a132 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f003 0302 	and.w	r3, r3, #2
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d06f      	beq.n	800a21e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a13e:	4b50      	ldr	r3, [pc, #320]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	f003 030c 	and.w	r3, r3, #12
 800a146:	2b00      	cmp	r3, #0
 800a148:	d017      	beq.n	800a17a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a14a:	4b4d      	ldr	r3, [pc, #308]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a152:	2b08      	cmp	r3, #8
 800a154:	d105      	bne.n	800a162 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a156:	4b4a      	ldr	r3, [pc, #296]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00b      	beq.n	800a17a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a162:	4b47      	ldr	r3, [pc, #284]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a16a:	2b0c      	cmp	r3, #12
 800a16c:	d11c      	bne.n	800a1a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a16e:	4b44      	ldr	r3, [pc, #272]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a176:	2b00      	cmp	r3, #0
 800a178:	d116      	bne.n	800a1a8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a17a:	4b41      	ldr	r3, [pc, #260]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f003 0302 	and.w	r3, r3, #2
 800a182:	2b00      	cmp	r3, #0
 800a184:	d005      	beq.n	800a192 <HAL_RCC_OscConfig+0x186>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d001      	beq.n	800a192 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e1d3      	b.n	800a53a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a192:	4b3b      	ldr	r3, [pc, #236]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	00db      	lsls	r3, r3, #3
 800a1a0:	4937      	ldr	r1, [pc, #220]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a1a6:	e03a      	b.n	800a21e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d020      	beq.n	800a1f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a1b0:	4b34      	ldr	r3, [pc, #208]	; (800a284 <HAL_RCC_OscConfig+0x278>)
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1b6:	f7fb faab 	bl	8005710 <HAL_GetTick>
 800a1ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1bc:	e008      	b.n	800a1d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a1be:	f7fb faa7 	bl	8005710 <HAL_GetTick>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	1ad3      	subs	r3, r2, r3
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	d901      	bls.n	800a1d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800a1cc:	2303      	movs	r3, #3
 800a1ce:	e1b4      	b.n	800a53a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1d0:	4b2b      	ldr	r3, [pc, #172]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 0302 	and.w	r3, r3, #2
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d0f0      	beq.n	800a1be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1dc:	4b28      	ldr	r3, [pc, #160]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	691b      	ldr	r3, [r3, #16]
 800a1e8:	00db      	lsls	r3, r3, #3
 800a1ea:	4925      	ldr	r1, [pc, #148]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	600b      	str	r3, [r1, #0]
 800a1f0:	e015      	b.n	800a21e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a1f2:	4b24      	ldr	r3, [pc, #144]	; (800a284 <HAL_RCC_OscConfig+0x278>)
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1f8:	f7fb fa8a 	bl	8005710 <HAL_GetTick>
 800a1fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a1fe:	e008      	b.n	800a212 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a200:	f7fb fa86 	bl	8005710 <HAL_GetTick>
 800a204:	4602      	mov	r2, r0
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	1ad3      	subs	r3, r2, r3
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d901      	bls.n	800a212 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a20e:	2303      	movs	r3, #3
 800a210:	e193      	b.n	800a53a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a212:	4b1b      	ldr	r3, [pc, #108]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 0302 	and.w	r3, r3, #2
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1f0      	bne.n	800a200 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f003 0308 	and.w	r3, r3, #8
 800a226:	2b00      	cmp	r3, #0
 800a228:	d036      	beq.n	800a298 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d016      	beq.n	800a260 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a232:	4b15      	ldr	r3, [pc, #84]	; (800a288 <HAL_RCC_OscConfig+0x27c>)
 800a234:	2201      	movs	r2, #1
 800a236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a238:	f7fb fa6a 	bl	8005710 <HAL_GetTick>
 800a23c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a23e:	e008      	b.n	800a252 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a240:	f7fb fa66 	bl	8005710 <HAL_GetTick>
 800a244:	4602      	mov	r2, r0
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	1ad3      	subs	r3, r2, r3
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d901      	bls.n	800a252 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800a24e:	2303      	movs	r3, #3
 800a250:	e173      	b.n	800a53a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a252:	4b0b      	ldr	r3, [pc, #44]	; (800a280 <HAL_RCC_OscConfig+0x274>)
 800a254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a256:	f003 0302 	and.w	r3, r3, #2
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d0f0      	beq.n	800a240 <HAL_RCC_OscConfig+0x234>
 800a25e:	e01b      	b.n	800a298 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a260:	4b09      	ldr	r3, [pc, #36]	; (800a288 <HAL_RCC_OscConfig+0x27c>)
 800a262:	2200      	movs	r2, #0
 800a264:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a266:	f7fb fa53 	bl	8005710 <HAL_GetTick>
 800a26a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a26c:	e00e      	b.n	800a28c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a26e:	f7fb fa4f 	bl	8005710 <HAL_GetTick>
 800a272:	4602      	mov	r2, r0
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	1ad3      	subs	r3, r2, r3
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d907      	bls.n	800a28c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800a27c:	2303      	movs	r3, #3
 800a27e:	e15c      	b.n	800a53a <HAL_RCC_OscConfig+0x52e>
 800a280:	40023800 	.word	0x40023800
 800a284:	42470000 	.word	0x42470000
 800a288:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a28c:	4b8a      	ldr	r3, [pc, #552]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a28e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a290:	f003 0302 	and.w	r3, r3, #2
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1ea      	bne.n	800a26e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f003 0304 	and.w	r3, r3, #4
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f000 8097 	beq.w	800a3d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a2aa:	4b83      	ldr	r3, [pc, #524]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10f      	bne.n	800a2d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	60bb      	str	r3, [r7, #8]
 800a2ba:	4b7f      	ldr	r3, [pc, #508]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2be:	4a7e      	ldr	r2, [pc, #504]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a2c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2c4:	6413      	str	r3, [r2, #64]	; 0x40
 800a2c6:	4b7c      	ldr	r3, [pc, #496]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2ce:	60bb      	str	r3, [r7, #8]
 800a2d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2d6:	4b79      	ldr	r3, [pc, #484]	; (800a4bc <HAL_RCC_OscConfig+0x4b0>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d118      	bne.n	800a314 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a2e2:	4b76      	ldr	r3, [pc, #472]	; (800a4bc <HAL_RCC_OscConfig+0x4b0>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a75      	ldr	r2, [pc, #468]	; (800a4bc <HAL_RCC_OscConfig+0x4b0>)
 800a2e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a2ee:	f7fb fa0f 	bl	8005710 <HAL_GetTick>
 800a2f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2f4:	e008      	b.n	800a308 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a2f6:	f7fb fa0b 	bl	8005710 <HAL_GetTick>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	1ad3      	subs	r3, r2, r3
 800a300:	2b02      	cmp	r3, #2
 800a302:	d901      	bls.n	800a308 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800a304:	2303      	movs	r3, #3
 800a306:	e118      	b.n	800a53a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a308:	4b6c      	ldr	r3, [pc, #432]	; (800a4bc <HAL_RCC_OscConfig+0x4b0>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a310:	2b00      	cmp	r3, #0
 800a312:	d0f0      	beq.n	800a2f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d106      	bne.n	800a32a <HAL_RCC_OscConfig+0x31e>
 800a31c:	4b66      	ldr	r3, [pc, #408]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a31e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a320:	4a65      	ldr	r2, [pc, #404]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a322:	f043 0301 	orr.w	r3, r3, #1
 800a326:	6713      	str	r3, [r2, #112]	; 0x70
 800a328:	e01c      	b.n	800a364 <HAL_RCC_OscConfig+0x358>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	2b05      	cmp	r3, #5
 800a330:	d10c      	bne.n	800a34c <HAL_RCC_OscConfig+0x340>
 800a332:	4b61      	ldr	r3, [pc, #388]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a336:	4a60      	ldr	r2, [pc, #384]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a338:	f043 0304 	orr.w	r3, r3, #4
 800a33c:	6713      	str	r3, [r2, #112]	; 0x70
 800a33e:	4b5e      	ldr	r3, [pc, #376]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a342:	4a5d      	ldr	r2, [pc, #372]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a344:	f043 0301 	orr.w	r3, r3, #1
 800a348:	6713      	str	r3, [r2, #112]	; 0x70
 800a34a:	e00b      	b.n	800a364 <HAL_RCC_OscConfig+0x358>
 800a34c:	4b5a      	ldr	r3, [pc, #360]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a34e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a350:	4a59      	ldr	r2, [pc, #356]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a352:	f023 0301 	bic.w	r3, r3, #1
 800a356:	6713      	str	r3, [r2, #112]	; 0x70
 800a358:	4b57      	ldr	r3, [pc, #348]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a35a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a35c:	4a56      	ldr	r2, [pc, #344]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a35e:	f023 0304 	bic.w	r3, r3, #4
 800a362:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d015      	beq.n	800a398 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a36c:	f7fb f9d0 	bl	8005710 <HAL_GetTick>
 800a370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a372:	e00a      	b.n	800a38a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a374:	f7fb f9cc 	bl	8005710 <HAL_GetTick>
 800a378:	4602      	mov	r2, r0
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	1ad3      	subs	r3, r2, r3
 800a37e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a382:	4293      	cmp	r3, r2
 800a384:	d901      	bls.n	800a38a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800a386:	2303      	movs	r3, #3
 800a388:	e0d7      	b.n	800a53a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a38a:	4b4b      	ldr	r3, [pc, #300]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a38c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a38e:	f003 0302 	and.w	r3, r3, #2
 800a392:	2b00      	cmp	r3, #0
 800a394:	d0ee      	beq.n	800a374 <HAL_RCC_OscConfig+0x368>
 800a396:	e014      	b.n	800a3c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a398:	f7fb f9ba 	bl	8005710 <HAL_GetTick>
 800a39c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a39e:	e00a      	b.n	800a3b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a3a0:	f7fb f9b6 	bl	8005710 <HAL_GetTick>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d901      	bls.n	800a3b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e0c1      	b.n	800a53a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a3b6:	4b40      	ldr	r3, [pc, #256]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a3b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3ba:	f003 0302 	and.w	r3, r3, #2
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1ee      	bne.n	800a3a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a3c2:	7dfb      	ldrb	r3, [r7, #23]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d105      	bne.n	800a3d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a3c8:	4b3b      	ldr	r3, [pc, #236]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3cc:	4a3a      	ldr	r2, [pc, #232]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a3ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	699b      	ldr	r3, [r3, #24]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 80ad 	beq.w	800a538 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a3de:	4b36      	ldr	r3, [pc, #216]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	f003 030c 	and.w	r3, r3, #12
 800a3e6:	2b08      	cmp	r3, #8
 800a3e8:	d060      	beq.n	800a4ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	699b      	ldr	r3, [r3, #24]
 800a3ee:	2b02      	cmp	r3, #2
 800a3f0:	d145      	bne.n	800a47e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3f2:	4b33      	ldr	r3, [pc, #204]	; (800a4c0 <HAL_RCC_OscConfig+0x4b4>)
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3f8:	f7fb f98a 	bl	8005710 <HAL_GetTick>
 800a3fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3fe:	e008      	b.n	800a412 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a400:	f7fb f986 	bl	8005710 <HAL_GetTick>
 800a404:	4602      	mov	r2, r0
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d901      	bls.n	800a412 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800a40e:	2303      	movs	r3, #3
 800a410:	e093      	b.n	800a53a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a412:	4b29      	ldr	r3, [pc, #164]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d1f0      	bne.n	800a400 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	69da      	ldr	r2, [r3, #28]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a1b      	ldr	r3, [r3, #32]
 800a426:	431a      	orrs	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42c:	019b      	lsls	r3, r3, #6
 800a42e:	431a      	orrs	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a434:	085b      	lsrs	r3, r3, #1
 800a436:	3b01      	subs	r3, #1
 800a438:	041b      	lsls	r3, r3, #16
 800a43a:	431a      	orrs	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a440:	061b      	lsls	r3, r3, #24
 800a442:	431a      	orrs	r2, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a448:	071b      	lsls	r3, r3, #28
 800a44a:	491b      	ldr	r1, [pc, #108]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a44c:	4313      	orrs	r3, r2
 800a44e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a450:	4b1b      	ldr	r3, [pc, #108]	; (800a4c0 <HAL_RCC_OscConfig+0x4b4>)
 800a452:	2201      	movs	r2, #1
 800a454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a456:	f7fb f95b 	bl	8005710 <HAL_GetTick>
 800a45a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a45c:	e008      	b.n	800a470 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a45e:	f7fb f957 	bl	8005710 <HAL_GetTick>
 800a462:	4602      	mov	r2, r0
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	1ad3      	subs	r3, r2, r3
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d901      	bls.n	800a470 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800a46c:	2303      	movs	r3, #3
 800a46e:	e064      	b.n	800a53a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a470:	4b11      	ldr	r3, [pc, #68]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d0f0      	beq.n	800a45e <HAL_RCC_OscConfig+0x452>
 800a47c:	e05c      	b.n	800a538 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a47e:	4b10      	ldr	r3, [pc, #64]	; (800a4c0 <HAL_RCC_OscConfig+0x4b4>)
 800a480:	2200      	movs	r2, #0
 800a482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a484:	f7fb f944 	bl	8005710 <HAL_GetTick>
 800a488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a48a:	e008      	b.n	800a49e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a48c:	f7fb f940 	bl	8005710 <HAL_GetTick>
 800a490:	4602      	mov	r2, r0
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	1ad3      	subs	r3, r2, r3
 800a496:	2b02      	cmp	r3, #2
 800a498:	d901      	bls.n	800a49e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800a49a:	2303      	movs	r3, #3
 800a49c:	e04d      	b.n	800a53a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a49e:	4b06      	ldr	r3, [pc, #24]	; (800a4b8 <HAL_RCC_OscConfig+0x4ac>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1f0      	bne.n	800a48c <HAL_RCC_OscConfig+0x480>
 800a4aa:	e045      	b.n	800a538 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d107      	bne.n	800a4c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e040      	b.n	800a53a <HAL_RCC_OscConfig+0x52e>
 800a4b8:	40023800 	.word	0x40023800
 800a4bc:	40007000 	.word	0x40007000
 800a4c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a4c4:	4b1f      	ldr	r3, [pc, #124]	; (800a544 <HAL_RCC_OscConfig+0x538>)
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	699b      	ldr	r3, [r3, #24]
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d030      	beq.n	800a534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d129      	bne.n	800a534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d122      	bne.n	800a534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a4fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d119      	bne.n	800a534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a50a:	085b      	lsrs	r3, r3, #1
 800a50c:	3b01      	subs	r3, #1
 800a50e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a510:	429a      	cmp	r2, r3
 800a512:	d10f      	bne.n	800a534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a520:	429a      	cmp	r2, r3
 800a522:	d107      	bne.n	800a534 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a530:	429a      	cmp	r2, r3
 800a532:	d001      	beq.n	800a538 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e000      	b.n	800a53a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3718      	adds	r7, #24
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	40023800 	.word	0x40023800

0800a548 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d101      	bne.n	800a55e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	e066      	b.n	800a62c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	7f5b      	ldrb	r3, [r3, #29]
 800a562:	b2db      	uxtb	r3, r3
 800a564:	2b00      	cmp	r3, #0
 800a566:	d105      	bne.n	800a574 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f7fa f95a 	bl	8004828 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2202      	movs	r2, #2
 800a578:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	22ca      	movs	r2, #202	; 0xca
 800a580:	625a      	str	r2, [r3, #36]	; 0x24
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2253      	movs	r2, #83	; 0x53
 800a588:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fa45 	bl	800aa1a <RTC_EnterInitMode>
 800a590:	4603      	mov	r3, r0
 800a592:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a594:	7bfb      	ldrb	r3, [r7, #15]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d12c      	bne.n	800a5f4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	6812      	ldr	r2, [r2, #0]
 800a5a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a5a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5ac:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	6899      	ldr	r1, [r3, #8]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	685a      	ldr	r2, [r3, #4]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	691b      	ldr	r3, [r3, #16]
 800a5bc:	431a      	orrs	r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	695b      	ldr	r3, [r3, #20]
 800a5c2:	431a      	orrs	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	430a      	orrs	r2, r1
 800a5ca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	68d2      	ldr	r2, [r2, #12]
 800a5d4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	6919      	ldr	r1, [r3, #16]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	041a      	lsls	r2, r3, #16
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	430a      	orrs	r2, r1
 800a5e8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 fa4c 	bl	800aa88 <RTC_ExitInitMode>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800a5f4:	7bfb      	ldrb	r3, [r7, #15]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d113      	bne.n	800a622 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a608:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	699a      	ldr	r2, [r3, #24]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	430a      	orrs	r2, r1
 800a61a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	22ff      	movs	r2, #255	; 0xff
 800a628:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800a62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a634:	b590      	push	{r4, r7, lr}
 800a636:	b087      	sub	sp, #28
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a640:	2300      	movs	r3, #0
 800a642:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	7f1b      	ldrb	r3, [r3, #28]
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d101      	bne.n	800a650 <HAL_RTC_SetTime+0x1c>
 800a64c:	2302      	movs	r3, #2
 800a64e:	e087      	b.n	800a760 <HAL_RTC_SetTime+0x12c>
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2201      	movs	r2, #1
 800a654:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2202      	movs	r2, #2
 800a65a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d126      	bne.n	800a6b0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d102      	bne.n	800a676 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	2200      	movs	r2, #0
 800a674:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	4618      	mov	r0, r3
 800a67c:	f000 fa29 	bl	800aad2 <RTC_ByteToBcd2>
 800a680:	4603      	mov	r3, r0
 800a682:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	785b      	ldrb	r3, [r3, #1]
 800a688:	4618      	mov	r0, r3
 800a68a:	f000 fa22 	bl	800aad2 <RTC_ByteToBcd2>
 800a68e:	4603      	mov	r3, r0
 800a690:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a692:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	789b      	ldrb	r3, [r3, #2]
 800a698:	4618      	mov	r0, r3
 800a69a:	f000 fa1a 	bl	800aad2 <RTC_ByteToBcd2>
 800a69e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a6a0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	78db      	ldrb	r3, [r3, #3]
 800a6a8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	617b      	str	r3, [r7, #20]
 800a6ae:	e018      	b.n	800a6e2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d102      	bne.n	800a6c4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	785b      	ldrb	r3, [r3, #1]
 800a6ce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a6d0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800a6d2:	68ba      	ldr	r2, [r7, #8]
 800a6d4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a6d6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	78db      	ldrb	r3, [r3, #3]
 800a6dc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	22ca      	movs	r2, #202	; 0xca
 800a6e8:	625a      	str	r2, [r3, #36]	; 0x24
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2253      	movs	r2, #83	; 0x53
 800a6f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f000 f991 	bl	800aa1a <RTC_EnterInitMode>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a6fc:	7cfb      	ldrb	r3, [r7, #19]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d120      	bne.n	800a744 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a70c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a710:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	689a      	ldr	r2, [r3, #8]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a720:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	6899      	ldr	r1, [r3, #8]
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	68da      	ldr	r2, [r3, #12]
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	691b      	ldr	r3, [r3, #16]
 800a730:	431a      	orrs	r2, r3
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	430a      	orrs	r2, r1
 800a738:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	f000 f9a4 	bl	800aa88 <RTC_ExitInitMode>
 800a740:	4603      	mov	r3, r0
 800a742:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a744:	7cfb      	ldrb	r3, [r7, #19]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d102      	bne.n	800a750 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2201      	movs	r2, #1
 800a74e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	22ff      	movs	r2, #255	; 0xff
 800a756:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2200      	movs	r2, #0
 800a75c:	771a      	strb	r2, [r3, #28]

  return status;
 800a75e:	7cfb      	ldrb	r3, [r7, #19]
}
 800a760:	4618      	mov	r0, r3
 800a762:	371c      	adds	r7, #28
 800a764:	46bd      	mov	sp, r7
 800a766:	bd90      	pop	{r4, r7, pc}

0800a768 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b086      	sub	sp, #24
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a774:	2300      	movs	r3, #0
 800a776:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a79a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a79e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	0c1b      	lsrs	r3, r3, #16
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7aa:	b2da      	uxtb	r2, r3
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	0a1b      	lsrs	r3, r3, #8
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7ba:	b2da      	uxtb	r2, r3
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7c8:	b2da      	uxtb	r2, r3
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	0d9b      	lsrs	r3, r3, #22
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	f003 0301 	and.w	r3, r3, #1
 800a7d8:	b2da      	uxtb	r2, r3
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d11a      	bne.n	800a81a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f000 f98f 	bl	800ab0c <RTC_Bcd2ToByte>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	785b      	ldrb	r3, [r3, #1]
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f000 f986 	bl	800ab0c <RTC_Bcd2ToByte>
 800a800:	4603      	mov	r3, r0
 800a802:	461a      	mov	r2, r3
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	789b      	ldrb	r3, [r3, #2]
 800a80c:	4618      	mov	r0, r3
 800a80e:	f000 f97d 	bl	800ab0c <RTC_Bcd2ToByte>
 800a812:	4603      	mov	r3, r0
 800a814:	461a      	mov	r2, r3
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a81a:	2300      	movs	r3, #0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3718      	adds	r7, #24
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a824:	b590      	push	{r4, r7, lr}
 800a826:	b087      	sub	sp, #28
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a830:	2300      	movs	r3, #0
 800a832:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	7f1b      	ldrb	r3, [r3, #28]
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d101      	bne.n	800a840 <HAL_RTC_SetDate+0x1c>
 800a83c:	2302      	movs	r3, #2
 800a83e:	e071      	b.n	800a924 <HAL_RTC_SetDate+0x100>
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2201      	movs	r2, #1
 800a844:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2202      	movs	r2, #2
 800a84a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d10e      	bne.n	800a870 <HAL_RTC_SetDate+0x4c>
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	785b      	ldrb	r3, [r3, #1]
 800a856:	f003 0310 	and.w	r3, r3, #16
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d008      	beq.n	800a870 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	785b      	ldrb	r3, [r3, #1]
 800a862:	f023 0310 	bic.w	r3, r3, #16
 800a866:	b2db      	uxtb	r3, r3
 800a868:	330a      	adds	r3, #10
 800a86a:	b2da      	uxtb	r2, r3
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d11c      	bne.n	800a8b0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	78db      	ldrb	r3, [r3, #3]
 800a87a:	4618      	mov	r0, r3
 800a87c:	f000 f929 	bl	800aad2 <RTC_ByteToBcd2>
 800a880:	4603      	mov	r3, r0
 800a882:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	785b      	ldrb	r3, [r3, #1]
 800a888:	4618      	mov	r0, r3
 800a88a:	f000 f922 	bl	800aad2 <RTC_ByteToBcd2>
 800a88e:	4603      	mov	r3, r0
 800a890:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a892:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	789b      	ldrb	r3, [r3, #2]
 800a898:	4618      	mov	r0, r3
 800a89a:	f000 f91a 	bl	800aad2 <RTC_ByteToBcd2>
 800a89e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a8a0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	617b      	str	r3, [r7, #20]
 800a8ae:	e00e      	b.n	800a8ce <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	78db      	ldrb	r3, [r3, #3]
 800a8b4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	785b      	ldrb	r3, [r3, #1]
 800a8ba:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a8bc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a8c2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	22ca      	movs	r2, #202	; 0xca
 800a8d4:	625a      	str	r2, [r3, #36]	; 0x24
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	2253      	movs	r2, #83	; 0x53
 800a8dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	f000 f89b 	bl	800aa1a <RTC_EnterInitMode>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a8e8:	7cfb      	ldrb	r3, [r7, #19]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d10c      	bne.n	800a908 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a8f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a8fc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f000 f8c2 	bl	800aa88 <RTC_ExitInitMode>
 800a904:	4603      	mov	r3, r0
 800a906:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a908:	7cfb      	ldrb	r3, [r7, #19]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d102      	bne.n	800a914 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2201      	movs	r2, #1
 800a912:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	22ff      	movs	r2, #255	; 0xff
 800a91a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2200      	movs	r2, #0
 800a920:	771a      	strb	r2, [r3, #28]

  return status;
 800a922:	7cfb      	ldrb	r3, [r7, #19]
}
 800a924:	4618      	mov	r0, r3
 800a926:	371c      	adds	r7, #28
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd90      	pop	{r4, r7, pc}

0800a92c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b086      	sub	sp, #24
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a938:	2300      	movs	r3, #0
 800a93a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a946:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a94a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	0c1b      	lsrs	r3, r3, #16
 800a950:	b2da      	uxtb	r2, r3
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	0a1b      	lsrs	r3, r3, #8
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	f003 031f 	and.w	r3, r3, #31
 800a960:	b2da      	uxtb	r2, r3
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a96e:	b2da      	uxtb	r2, r3
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	0b5b      	lsrs	r3, r3, #13
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	f003 0307 	and.w	r3, r3, #7
 800a97e:	b2da      	uxtb	r2, r3
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d11a      	bne.n	800a9c0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	78db      	ldrb	r3, [r3, #3]
 800a98e:	4618      	mov	r0, r3
 800a990:	f000 f8bc 	bl	800ab0c <RTC_Bcd2ToByte>
 800a994:	4603      	mov	r3, r0
 800a996:	461a      	mov	r2, r3
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	785b      	ldrb	r3, [r3, #1]
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f000 f8b3 	bl	800ab0c <RTC_Bcd2ToByte>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	789b      	ldrb	r3, [r3, #2]
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f000 f8aa 	bl	800ab0c <RTC_Bcd2ToByte>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3718      	adds	r7, #24
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b084      	sub	sp, #16
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	68da      	ldr	r2, [r3, #12]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a9e4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a9e6:	f7fa fe93 	bl	8005710 <HAL_GetTick>
 800a9ea:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a9ec:	e009      	b.n	800aa02 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a9ee:	f7fa fe8f 	bl	8005710 <HAL_GetTick>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	1ad3      	subs	r3, r2, r3
 800a9f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a9fc:	d901      	bls.n	800aa02 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a9fe:	2303      	movs	r3, #3
 800aa00:	e007      	b.n	800aa12 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	f003 0320 	and.w	r3, r3, #32
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d0ee      	beq.n	800a9ee <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b084      	sub	sp, #16
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aa22:	2300      	movs	r3, #0
 800aa24:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800aa26:	2300      	movs	r3, #0
 800aa28:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d122      	bne.n	800aa7e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	68da      	ldr	r2, [r3, #12]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aa46:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aa48:	f7fa fe62 	bl	8005710 <HAL_GetTick>
 800aa4c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800aa4e:	e00c      	b.n	800aa6a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800aa50:	f7fa fe5e 	bl	8005710 <HAL_GetTick>
 800aa54:	4602      	mov	r2, r0
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa5e:	d904      	bls.n	800aa6a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2204      	movs	r2, #4
 800aa64:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d102      	bne.n	800aa7e <RTC_EnterInitMode+0x64>
 800aa78:	7bfb      	ldrb	r3, [r7, #15]
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d1e8      	bne.n	800aa50 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800aa7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa90:	2300      	movs	r3, #0
 800aa92:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	68da      	ldr	r2, [r3, #12]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aaa2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	f003 0320 	and.w	r3, r3, #32
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d10a      	bne.n	800aac8 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f7ff ff89 	bl	800a9ca <HAL_RTC_WaitForSynchro>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d004      	beq.n	800aac8 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2204      	movs	r2, #4
 800aac2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800aac4:	2301      	movs	r3, #1
 800aac6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800aac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3710      	adds	r7, #16
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800aad2:	b480      	push	{r7}
 800aad4:	b085      	sub	sp, #20
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	4603      	mov	r3, r0
 800aada:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800aadc:	2300      	movs	r3, #0
 800aade:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800aae0:	e005      	b.n	800aaee <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800aae2:	7bfb      	ldrb	r3, [r7, #15]
 800aae4:	3301      	adds	r3, #1
 800aae6:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800aae8:	79fb      	ldrb	r3, [r7, #7]
 800aaea:	3b0a      	subs	r3, #10
 800aaec:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800aaee:	79fb      	ldrb	r3, [r7, #7]
 800aaf0:	2b09      	cmp	r3, #9
 800aaf2:	d8f6      	bhi.n	800aae2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800aaf4:	7bfb      	ldrb	r3, [r7, #15]
 800aaf6:	011b      	lsls	r3, r3, #4
 800aaf8:	b2da      	uxtb	r2, r3
 800aafa:	79fb      	ldrb	r3, [r7, #7]
 800aafc:	4313      	orrs	r3, r2
 800aafe:	b2db      	uxtb	r3, r3
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3714      	adds	r7, #20
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	4603      	mov	r3, r0
 800ab14:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800ab16:	2300      	movs	r3, #0
 800ab18:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800ab1a:	79fb      	ldrb	r3, [r7, #7]
 800ab1c:	091b      	lsrs	r3, r3, #4
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	461a      	mov	r2, r3
 800ab22:	0092      	lsls	r2, r2, #2
 800ab24:	4413      	add	r3, r2
 800ab26:	005b      	lsls	r3, r3, #1
 800ab28:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800ab2a:	79fb      	ldrb	r3, [r7, #7]
 800ab2c:	f003 030f 	and.w	r3, r3, #15
 800ab30:	b2da      	uxtb	r2, r3
 800ab32:	7bfb      	ldrb	r3, [r7, #15]
 800ab34:	4413      	add	r3, r2
 800ab36:	b2db      	uxtb	r3, r3
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3714      	adds	r7, #20
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d101      	bne.n	800ab56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	e07b      	b.n	800ac4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d108      	bne.n	800ab70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab66:	d009      	beq.n	800ab7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	61da      	str	r2, [r3, #28]
 800ab6e:	e005      	b.n	800ab7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d106      	bne.n	800ab9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2200      	movs	r2, #0
 800ab92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f7f9 fe70 	bl	800487c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2202      	movs	r2, #2
 800aba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800abc4:	431a      	orrs	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abce:	431a      	orrs	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	f003 0302 	and.w	r3, r3, #2
 800abd8:	431a      	orrs	r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	695b      	ldr	r3, [r3, #20]
 800abde:	f003 0301 	and.w	r3, r3, #1
 800abe2:	431a      	orrs	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	699b      	ldr	r3, [r3, #24]
 800abe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800abec:	431a      	orrs	r2, r3
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	69db      	ldr	r3, [r3, #28]
 800abf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800abf6:	431a      	orrs	r2, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a1b      	ldr	r3, [r3, #32]
 800abfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac00:	ea42 0103 	orr.w	r1, r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	430a      	orrs	r2, r1
 800ac12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	699b      	ldr	r3, [r3, #24]
 800ac18:	0c1b      	lsrs	r3, r3, #16
 800ac1a:	f003 0104 	and.w	r1, r3, #4
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac22:	f003 0210 	and.w	r2, r3, #16
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	430a      	orrs	r2, r1
 800ac2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	69da      	ldr	r2, [r3, #28]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ac3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b082      	sub	sp, #8
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d101      	bne.n	800ac68 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	e041      	b.n	800acec <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d106      	bne.n	800ac82 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f7f9 fe45 	bl	800490c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2202      	movs	r2, #2
 800ac86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	3304      	adds	r3, #4
 800ac92:	4619      	mov	r1, r3
 800ac94:	4610      	mov	r0, r2
 800ac96:	f000 fcc7 	bl	800b628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2201      	movs	r2, #1
 800aca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2201      	movs	r2, #1
 800acae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2201      	movs	r2, #1
 800acb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2201      	movs	r2, #1
 800acbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2201      	movs	r2, #1
 800acc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2201      	movs	r2, #1
 800acce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2201      	movs	r2, #1
 800acd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2201      	movs	r2, #1
 800acde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2201      	movs	r2, #1
 800ace6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d001      	beq.n	800ad0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e04e      	b.n	800adaa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2202      	movs	r2, #2
 800ad10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	68da      	ldr	r2, [r3, #12]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f042 0201 	orr.w	r2, r2, #1
 800ad22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a23      	ldr	r2, [pc, #140]	; (800adb8 <HAL_TIM_Base_Start_IT+0xc4>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d022      	beq.n	800ad74 <HAL_TIM_Base_Start_IT+0x80>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad36:	d01d      	beq.n	800ad74 <HAL_TIM_Base_Start_IT+0x80>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a1f      	ldr	r2, [pc, #124]	; (800adbc <HAL_TIM_Base_Start_IT+0xc8>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d018      	beq.n	800ad74 <HAL_TIM_Base_Start_IT+0x80>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a1e      	ldr	r2, [pc, #120]	; (800adc0 <HAL_TIM_Base_Start_IT+0xcc>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d013      	beq.n	800ad74 <HAL_TIM_Base_Start_IT+0x80>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a1c      	ldr	r2, [pc, #112]	; (800adc4 <HAL_TIM_Base_Start_IT+0xd0>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d00e      	beq.n	800ad74 <HAL_TIM_Base_Start_IT+0x80>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a1b      	ldr	r2, [pc, #108]	; (800adc8 <HAL_TIM_Base_Start_IT+0xd4>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d009      	beq.n	800ad74 <HAL_TIM_Base_Start_IT+0x80>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a19      	ldr	r2, [pc, #100]	; (800adcc <HAL_TIM_Base_Start_IT+0xd8>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d004      	beq.n	800ad74 <HAL_TIM_Base_Start_IT+0x80>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a18      	ldr	r2, [pc, #96]	; (800add0 <HAL_TIM_Base_Start_IT+0xdc>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d111      	bne.n	800ad98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	f003 0307 	and.w	r3, r3, #7
 800ad7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2b06      	cmp	r3, #6
 800ad84:	d010      	beq.n	800ada8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f042 0201 	orr.w	r2, r2, #1
 800ad94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad96:	e007      	b.n	800ada8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f042 0201 	orr.w	r2, r2, #1
 800ada6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3714      	adds	r7, #20
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	40010000 	.word	0x40010000
 800adbc:	40000400 	.word	0x40000400
 800adc0:	40000800 	.word	0x40000800
 800adc4:	40000c00 	.word	0x40000c00
 800adc8:	40010400 	.word	0x40010400
 800adcc:	40014000 	.word	0x40014000
 800add0:	40001800 	.word	0x40001800

0800add4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d101      	bne.n	800ade6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ade2:	2301      	movs	r3, #1
 800ade4:	e041      	b.n	800ae6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adec:	b2db      	uxtb	r3, r3
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d106      	bne.n	800ae00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 f839 	bl	800ae72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2202      	movs	r2, #2
 800ae04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	3304      	adds	r3, #4
 800ae10:	4619      	mov	r1, r3
 800ae12:	4610      	mov	r0, r2
 800ae14:	f000 fc08 	bl	800b628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2201      	movs	r2, #1
 800ae24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2201      	movs	r2, #1
 800ae54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae68:	2300      	movs	r3, #0
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ae72:	b480      	push	{r7}
 800ae74:	b083      	sub	sp, #12
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ae7a:	bf00      	nop
 800ae7c:	370c      	adds	r7, #12
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr
	...

0800ae88 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae92:	2300      	movs	r3, #0
 800ae94:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d109      	bne.n	800aeb0 <HAL_TIM_PWM_Start_IT+0x28>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	bf14      	ite	ne
 800aea8:	2301      	movne	r3, #1
 800aeaa:	2300      	moveq	r3, #0
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	e022      	b.n	800aef6 <HAL_TIM_PWM_Start_IT+0x6e>
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	2b04      	cmp	r3, #4
 800aeb4:	d109      	bne.n	800aeca <HAL_TIM_PWM_Start_IT+0x42>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	bf14      	ite	ne
 800aec2:	2301      	movne	r3, #1
 800aec4:	2300      	moveq	r3, #0
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	e015      	b.n	800aef6 <HAL_TIM_PWM_Start_IT+0x6e>
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	2b08      	cmp	r3, #8
 800aece:	d109      	bne.n	800aee4 <HAL_TIM_PWM_Start_IT+0x5c>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	bf14      	ite	ne
 800aedc:	2301      	movne	r3, #1
 800aede:	2300      	moveq	r3, #0
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	e008      	b.n	800aef6 <HAL_TIM_PWM_Start_IT+0x6e>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	bf14      	ite	ne
 800aef0:	2301      	movne	r3, #1
 800aef2:	2300      	moveq	r3, #0
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d001      	beq.n	800aefe <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800aefa:	2301      	movs	r3, #1
 800aefc:	e0c7      	b.n	800b08e <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d104      	bne.n	800af0e <HAL_TIM_PWM_Start_IT+0x86>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2202      	movs	r2, #2
 800af08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af0c:	e013      	b.n	800af36 <HAL_TIM_PWM_Start_IT+0xae>
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	2b04      	cmp	r3, #4
 800af12:	d104      	bne.n	800af1e <HAL_TIM_PWM_Start_IT+0x96>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2202      	movs	r2, #2
 800af18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af1c:	e00b      	b.n	800af36 <HAL_TIM_PWM_Start_IT+0xae>
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	2b08      	cmp	r3, #8
 800af22:	d104      	bne.n	800af2e <HAL_TIM_PWM_Start_IT+0xa6>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2202      	movs	r2, #2
 800af28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af2c:	e003      	b.n	800af36 <HAL_TIM_PWM_Start_IT+0xae>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2202      	movs	r2, #2
 800af32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	2b0c      	cmp	r3, #12
 800af3a:	d841      	bhi.n	800afc0 <HAL_TIM_PWM_Start_IT+0x138>
 800af3c:	a201      	add	r2, pc, #4	; (adr r2, 800af44 <HAL_TIM_PWM_Start_IT+0xbc>)
 800af3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af42:	bf00      	nop
 800af44:	0800af79 	.word	0x0800af79
 800af48:	0800afc1 	.word	0x0800afc1
 800af4c:	0800afc1 	.word	0x0800afc1
 800af50:	0800afc1 	.word	0x0800afc1
 800af54:	0800af8b 	.word	0x0800af8b
 800af58:	0800afc1 	.word	0x0800afc1
 800af5c:	0800afc1 	.word	0x0800afc1
 800af60:	0800afc1 	.word	0x0800afc1
 800af64:	0800af9d 	.word	0x0800af9d
 800af68:	0800afc1 	.word	0x0800afc1
 800af6c:	0800afc1 	.word	0x0800afc1
 800af70:	0800afc1 	.word	0x0800afc1
 800af74:	0800afaf 	.word	0x0800afaf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	68da      	ldr	r2, [r3, #12]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f042 0202 	orr.w	r2, r2, #2
 800af86:	60da      	str	r2, [r3, #12]
      break;
 800af88:	e01d      	b.n	800afc6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	68da      	ldr	r2, [r3, #12]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f042 0204 	orr.w	r2, r2, #4
 800af98:	60da      	str	r2, [r3, #12]
      break;
 800af9a:	e014      	b.n	800afc6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68da      	ldr	r2, [r3, #12]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f042 0208 	orr.w	r2, r2, #8
 800afaa:	60da      	str	r2, [r3, #12]
      break;
 800afac:	e00b      	b.n	800afc6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	68da      	ldr	r2, [r3, #12]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f042 0210 	orr.w	r2, r2, #16
 800afbc:	60da      	str	r2, [r3, #12]
      break;
 800afbe:	e002      	b.n	800afc6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800afc0:	2301      	movs	r3, #1
 800afc2:	73fb      	strb	r3, [r7, #15]
      break;
 800afc4:	bf00      	nop
  }

  if (status == HAL_OK)
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d15f      	bne.n	800b08c <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2201      	movs	r2, #1
 800afd2:	6839      	ldr	r1, [r7, #0]
 800afd4:	4618      	mov	r0, r3
 800afd6:	f000 fe11 	bl	800bbfc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a2e      	ldr	r2, [pc, #184]	; (800b098 <HAL_TIM_PWM_Start_IT+0x210>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d004      	beq.n	800afee <HAL_TIM_PWM_Start_IT+0x166>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a2c      	ldr	r2, [pc, #176]	; (800b09c <HAL_TIM_PWM_Start_IT+0x214>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d101      	bne.n	800aff2 <HAL_TIM_PWM_Start_IT+0x16a>
 800afee:	2301      	movs	r3, #1
 800aff0:	e000      	b.n	800aff4 <HAL_TIM_PWM_Start_IT+0x16c>
 800aff2:	2300      	movs	r3, #0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d007      	beq.n	800b008 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b006:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a22      	ldr	r2, [pc, #136]	; (800b098 <HAL_TIM_PWM_Start_IT+0x210>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d022      	beq.n	800b058 <HAL_TIM_PWM_Start_IT+0x1d0>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b01a:	d01d      	beq.n	800b058 <HAL_TIM_PWM_Start_IT+0x1d0>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a1f      	ldr	r2, [pc, #124]	; (800b0a0 <HAL_TIM_PWM_Start_IT+0x218>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d018      	beq.n	800b058 <HAL_TIM_PWM_Start_IT+0x1d0>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a1e      	ldr	r2, [pc, #120]	; (800b0a4 <HAL_TIM_PWM_Start_IT+0x21c>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d013      	beq.n	800b058 <HAL_TIM_PWM_Start_IT+0x1d0>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a1c      	ldr	r2, [pc, #112]	; (800b0a8 <HAL_TIM_PWM_Start_IT+0x220>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d00e      	beq.n	800b058 <HAL_TIM_PWM_Start_IT+0x1d0>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a17      	ldr	r2, [pc, #92]	; (800b09c <HAL_TIM_PWM_Start_IT+0x214>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d009      	beq.n	800b058 <HAL_TIM_PWM_Start_IT+0x1d0>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a18      	ldr	r2, [pc, #96]	; (800b0ac <HAL_TIM_PWM_Start_IT+0x224>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d004      	beq.n	800b058 <HAL_TIM_PWM_Start_IT+0x1d0>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a17      	ldr	r2, [pc, #92]	; (800b0b0 <HAL_TIM_PWM_Start_IT+0x228>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d111      	bne.n	800b07c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	f003 0307 	and.w	r3, r3, #7
 800b062:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	2b06      	cmp	r3, #6
 800b068:	d010      	beq.n	800b08c <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f042 0201 	orr.w	r2, r2, #1
 800b078:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b07a:	e007      	b.n	800b08c <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f042 0201 	orr.w	r2, r2, #1
 800b08a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	40010000 	.word	0x40010000
 800b09c:	40010400 	.word	0x40010400
 800b0a0:	40000400 	.word	0x40000400
 800b0a4:	40000800 	.word	0x40000800
 800b0a8:	40000c00 	.word	0x40000c00
 800b0ac:	40014000 	.word	0x40014000
 800b0b0:	40001800 	.word	0x40001800

0800b0b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	f003 0302 	and.w	r3, r3, #2
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d122      	bne.n	800b110 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	f003 0302 	and.w	r3, r3, #2
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	d11b      	bne.n	800b110 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f06f 0202 	mvn.w	r2, #2
 800b0e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	699b      	ldr	r3, [r3, #24]
 800b0ee:	f003 0303 	and.w	r3, r3, #3
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d003      	beq.n	800b0fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fa77 	bl	800b5ea <HAL_TIM_IC_CaptureCallback>
 800b0fc:	e005      	b.n	800b10a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 fa69 	bl	800b5d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 fa7a 	bl	800b5fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	691b      	ldr	r3, [r3, #16]
 800b116:	f003 0304 	and.w	r3, r3, #4
 800b11a:	2b04      	cmp	r3, #4
 800b11c:	d122      	bne.n	800b164 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	f003 0304 	and.w	r3, r3, #4
 800b128:	2b04      	cmp	r3, #4
 800b12a:	d11b      	bne.n	800b164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f06f 0204 	mvn.w	r2, #4
 800b134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2202      	movs	r2, #2
 800b13a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	699b      	ldr	r3, [r3, #24]
 800b142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b146:	2b00      	cmp	r3, #0
 800b148:	d003      	beq.n	800b152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 fa4d 	bl	800b5ea <HAL_TIM_IC_CaptureCallback>
 800b150:	e005      	b.n	800b15e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fa3f 	bl	800b5d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 fa50 	bl	800b5fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	f003 0308 	and.w	r3, r3, #8
 800b16e:	2b08      	cmp	r3, #8
 800b170:	d122      	bne.n	800b1b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	f003 0308 	and.w	r3, r3, #8
 800b17c:	2b08      	cmp	r3, #8
 800b17e:	d11b      	bne.n	800b1b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f06f 0208 	mvn.w	r2, #8
 800b188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2204      	movs	r2, #4
 800b18e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	69db      	ldr	r3, [r3, #28]
 800b196:	f003 0303 	and.w	r3, r3, #3
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d003      	beq.n	800b1a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fa23 	bl	800b5ea <HAL_TIM_IC_CaptureCallback>
 800b1a4:	e005      	b.n	800b1b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 fa15 	bl	800b5d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 fa26 	bl	800b5fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	691b      	ldr	r3, [r3, #16]
 800b1be:	f003 0310 	and.w	r3, r3, #16
 800b1c2:	2b10      	cmp	r3, #16
 800b1c4:	d122      	bne.n	800b20c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	f003 0310 	and.w	r3, r3, #16
 800b1d0:	2b10      	cmp	r3, #16
 800b1d2:	d11b      	bne.n	800b20c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f06f 0210 	mvn.w	r2, #16
 800b1dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2208      	movs	r2, #8
 800b1e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	69db      	ldr	r3, [r3, #28]
 800b1ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d003      	beq.n	800b1fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f9f9 	bl	800b5ea <HAL_TIM_IC_CaptureCallback>
 800b1f8:	e005      	b.n	800b206 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 f9eb 	bl	800b5d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 f9fc 	bl	800b5fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	f003 0301 	and.w	r3, r3, #1
 800b216:	2b01      	cmp	r3, #1
 800b218:	d10e      	bne.n	800b238 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	f003 0301 	and.w	r3, r3, #1
 800b224:	2b01      	cmp	r3, #1
 800b226:	d107      	bne.n	800b238 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f06f 0201 	mvn.w	r2, #1
 800b230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f7f9 fa22 	bl	800467c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	691b      	ldr	r3, [r3, #16]
 800b23e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b242:	2b80      	cmp	r3, #128	; 0x80
 800b244:	d10e      	bne.n	800b264 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b250:	2b80      	cmp	r3, #128	; 0x80
 800b252:	d107      	bne.n	800b264 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b25c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 fd78 	bl	800bd54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b26e:	2b40      	cmp	r3, #64	; 0x40
 800b270:	d10e      	bne.n	800b290 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b27c:	2b40      	cmp	r3, #64	; 0x40
 800b27e:	d107      	bne.n	800b290 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f9c1 	bl	800b612 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	f003 0320 	and.w	r3, r3, #32
 800b29a:	2b20      	cmp	r3, #32
 800b29c:	d10e      	bne.n	800b2bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	f003 0320 	and.w	r3, r3, #32
 800b2a8:	2b20      	cmp	r3, #32
 800b2aa:	d107      	bne.n	800b2bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f06f 0220 	mvn.w	r2, #32
 800b2b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 fd42 	bl	800bd40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b2bc:	bf00      	nop
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b086      	sub	sp, #24
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d101      	bne.n	800b2e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b2de:	2302      	movs	r3, #2
 800b2e0:	e0ae      	b.n	800b440 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2b0c      	cmp	r3, #12
 800b2ee:	f200 809f 	bhi.w	800b430 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b2f2:	a201      	add	r2, pc, #4	; (adr r2, 800b2f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f8:	0800b32d 	.word	0x0800b32d
 800b2fc:	0800b431 	.word	0x0800b431
 800b300:	0800b431 	.word	0x0800b431
 800b304:	0800b431 	.word	0x0800b431
 800b308:	0800b36d 	.word	0x0800b36d
 800b30c:	0800b431 	.word	0x0800b431
 800b310:	0800b431 	.word	0x0800b431
 800b314:	0800b431 	.word	0x0800b431
 800b318:	0800b3af 	.word	0x0800b3af
 800b31c:	0800b431 	.word	0x0800b431
 800b320:	0800b431 	.word	0x0800b431
 800b324:	0800b431 	.word	0x0800b431
 800b328:	0800b3ef 	.word	0x0800b3ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	68b9      	ldr	r1, [r7, #8]
 800b332:	4618      	mov	r0, r3
 800b334:	f000 fa18 	bl	800b768 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	699a      	ldr	r2, [r3, #24]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f042 0208 	orr.w	r2, r2, #8
 800b346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	699a      	ldr	r2, [r3, #24]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f022 0204 	bic.w	r2, r2, #4
 800b356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	6999      	ldr	r1, [r3, #24]
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	691a      	ldr	r2, [r3, #16]
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	430a      	orrs	r2, r1
 800b368:	619a      	str	r2, [r3, #24]
      break;
 800b36a:	e064      	b.n	800b436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	68b9      	ldr	r1, [r7, #8]
 800b372:	4618      	mov	r0, r3
 800b374:	f000 fa68 	bl	800b848 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	699a      	ldr	r2, [r3, #24]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	699a      	ldr	r2, [r3, #24]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	6999      	ldr	r1, [r3, #24]
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	691b      	ldr	r3, [r3, #16]
 800b3a2:	021a      	lsls	r2, r3, #8
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	430a      	orrs	r2, r1
 800b3aa:	619a      	str	r2, [r3, #24]
      break;
 800b3ac:	e043      	b.n	800b436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	68b9      	ldr	r1, [r7, #8]
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f000 fabd 	bl	800b934 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	69da      	ldr	r2, [r3, #28]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f042 0208 	orr.w	r2, r2, #8
 800b3c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	69da      	ldr	r2, [r3, #28]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f022 0204 	bic.w	r2, r2, #4
 800b3d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	69d9      	ldr	r1, [r3, #28]
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	691a      	ldr	r2, [r3, #16]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	430a      	orrs	r2, r1
 800b3ea:	61da      	str	r2, [r3, #28]
      break;
 800b3ec:	e023      	b.n	800b436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	68b9      	ldr	r1, [r7, #8]
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f000 fb11 	bl	800ba1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	69da      	ldr	r2, [r3, #28]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	69da      	ldr	r2, [r3, #28]
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	69d9      	ldr	r1, [r3, #28]
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	021a      	lsls	r2, r3, #8
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	430a      	orrs	r2, r1
 800b42c:	61da      	str	r2, [r3, #28]
      break;
 800b42e:	e002      	b.n	800b436 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b430:	2301      	movs	r3, #1
 800b432:	75fb      	strb	r3, [r7, #23]
      break;
 800b434:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2200      	movs	r2, #0
 800b43a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b43e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3718      	adds	r7, #24
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b452:	2300      	movs	r3, #0
 800b454:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d101      	bne.n	800b464 <HAL_TIM_ConfigClockSource+0x1c>
 800b460:	2302      	movs	r3, #2
 800b462:	e0b4      	b.n	800b5ce <HAL_TIM_ConfigClockSource+0x186>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2201      	movs	r2, #1
 800b468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2202      	movs	r2, #2
 800b470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b48a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	68ba      	ldr	r2, [r7, #8]
 800b492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b49c:	d03e      	beq.n	800b51c <HAL_TIM_ConfigClockSource+0xd4>
 800b49e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4a2:	f200 8087 	bhi.w	800b5b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b4a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4aa:	f000 8086 	beq.w	800b5ba <HAL_TIM_ConfigClockSource+0x172>
 800b4ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4b2:	d87f      	bhi.n	800b5b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b4b4:	2b70      	cmp	r3, #112	; 0x70
 800b4b6:	d01a      	beq.n	800b4ee <HAL_TIM_ConfigClockSource+0xa6>
 800b4b8:	2b70      	cmp	r3, #112	; 0x70
 800b4ba:	d87b      	bhi.n	800b5b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b4bc:	2b60      	cmp	r3, #96	; 0x60
 800b4be:	d050      	beq.n	800b562 <HAL_TIM_ConfigClockSource+0x11a>
 800b4c0:	2b60      	cmp	r3, #96	; 0x60
 800b4c2:	d877      	bhi.n	800b5b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b4c4:	2b50      	cmp	r3, #80	; 0x50
 800b4c6:	d03c      	beq.n	800b542 <HAL_TIM_ConfigClockSource+0xfa>
 800b4c8:	2b50      	cmp	r3, #80	; 0x50
 800b4ca:	d873      	bhi.n	800b5b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b4cc:	2b40      	cmp	r3, #64	; 0x40
 800b4ce:	d058      	beq.n	800b582 <HAL_TIM_ConfigClockSource+0x13a>
 800b4d0:	2b40      	cmp	r3, #64	; 0x40
 800b4d2:	d86f      	bhi.n	800b5b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b4d4:	2b30      	cmp	r3, #48	; 0x30
 800b4d6:	d064      	beq.n	800b5a2 <HAL_TIM_ConfigClockSource+0x15a>
 800b4d8:	2b30      	cmp	r3, #48	; 0x30
 800b4da:	d86b      	bhi.n	800b5b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b4dc:	2b20      	cmp	r3, #32
 800b4de:	d060      	beq.n	800b5a2 <HAL_TIM_ConfigClockSource+0x15a>
 800b4e0:	2b20      	cmp	r3, #32
 800b4e2:	d867      	bhi.n	800b5b4 <HAL_TIM_ConfigClockSource+0x16c>
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d05c      	beq.n	800b5a2 <HAL_TIM_ConfigClockSource+0x15a>
 800b4e8:	2b10      	cmp	r3, #16
 800b4ea:	d05a      	beq.n	800b5a2 <HAL_TIM_ConfigClockSource+0x15a>
 800b4ec:	e062      	b.n	800b5b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6818      	ldr	r0, [r3, #0]
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	6899      	ldr	r1, [r3, #8]
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	685a      	ldr	r2, [r3, #4]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	68db      	ldr	r3, [r3, #12]
 800b4fe:	f000 fb5d 	bl	800bbbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b510:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	609a      	str	r2, [r3, #8]
      break;
 800b51a:	e04f      	b.n	800b5bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6818      	ldr	r0, [r3, #0]
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	6899      	ldr	r1, [r3, #8]
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	685a      	ldr	r2, [r3, #4]
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	f000 fb46 	bl	800bbbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	689a      	ldr	r2, [r3, #8]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b53e:	609a      	str	r2, [r3, #8]
      break;
 800b540:	e03c      	b.n	800b5bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6818      	ldr	r0, [r3, #0]
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	6859      	ldr	r1, [r3, #4]
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	68db      	ldr	r3, [r3, #12]
 800b54e:	461a      	mov	r2, r3
 800b550:	f000 faba 	bl	800bac8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2150      	movs	r1, #80	; 0x50
 800b55a:	4618      	mov	r0, r3
 800b55c:	f000 fb13 	bl	800bb86 <TIM_ITRx_SetConfig>
      break;
 800b560:	e02c      	b.n	800b5bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6818      	ldr	r0, [r3, #0]
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	6859      	ldr	r1, [r3, #4]
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	68db      	ldr	r3, [r3, #12]
 800b56e:	461a      	mov	r2, r3
 800b570:	f000 fad9 	bl	800bb26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2160      	movs	r1, #96	; 0x60
 800b57a:	4618      	mov	r0, r3
 800b57c:	f000 fb03 	bl	800bb86 <TIM_ITRx_SetConfig>
      break;
 800b580:	e01c      	b.n	800b5bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6818      	ldr	r0, [r3, #0]
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	6859      	ldr	r1, [r3, #4]
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	461a      	mov	r2, r3
 800b590:	f000 fa9a 	bl	800bac8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2140      	movs	r1, #64	; 0x40
 800b59a:	4618      	mov	r0, r3
 800b59c:	f000 faf3 	bl	800bb86 <TIM_ITRx_SetConfig>
      break;
 800b5a0:	e00c      	b.n	800b5bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681a      	ldr	r2, [r3, #0]
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	4610      	mov	r0, r2
 800b5ae:	f000 faea 	bl	800bb86 <TIM_ITRx_SetConfig>
      break;
 800b5b2:	e003      	b.n	800b5bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b5b8:	e000      	b.n	800b5bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b5ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5d6:	b480      	push	{r7}
 800b5d8:	b083      	sub	sp, #12
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b5de:	bf00      	nop
 800b5e0:	370c      	adds	r7, #12
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b5ea:	b480      	push	{r7}
 800b5ec:	b083      	sub	sp, #12
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b5f2:	bf00      	nop
 800b5f4:	370c      	adds	r7, #12
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr

0800b5fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b5fe:	b480      	push	{r7}
 800b600:	b083      	sub	sp, #12
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b606:	bf00      	nop
 800b608:	370c      	adds	r7, #12
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr

0800b612 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b612:	b480      	push	{r7}
 800b614:	b083      	sub	sp, #12
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b61a:	bf00      	nop
 800b61c:	370c      	adds	r7, #12
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr
	...

0800b628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b628:	b480      	push	{r7}
 800b62a:	b085      	sub	sp, #20
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	4a40      	ldr	r2, [pc, #256]	; (800b73c <TIM_Base_SetConfig+0x114>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d013      	beq.n	800b668 <TIM_Base_SetConfig+0x40>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b646:	d00f      	beq.n	800b668 <TIM_Base_SetConfig+0x40>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	4a3d      	ldr	r2, [pc, #244]	; (800b740 <TIM_Base_SetConfig+0x118>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d00b      	beq.n	800b668 <TIM_Base_SetConfig+0x40>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4a3c      	ldr	r2, [pc, #240]	; (800b744 <TIM_Base_SetConfig+0x11c>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d007      	beq.n	800b668 <TIM_Base_SetConfig+0x40>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	4a3b      	ldr	r2, [pc, #236]	; (800b748 <TIM_Base_SetConfig+0x120>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d003      	beq.n	800b668 <TIM_Base_SetConfig+0x40>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	4a3a      	ldr	r2, [pc, #232]	; (800b74c <TIM_Base_SetConfig+0x124>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d108      	bne.n	800b67a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b66e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	68fa      	ldr	r2, [r7, #12]
 800b676:	4313      	orrs	r3, r2
 800b678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4a2f      	ldr	r2, [pc, #188]	; (800b73c <TIM_Base_SetConfig+0x114>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d02b      	beq.n	800b6da <TIM_Base_SetConfig+0xb2>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b688:	d027      	beq.n	800b6da <TIM_Base_SetConfig+0xb2>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4a2c      	ldr	r2, [pc, #176]	; (800b740 <TIM_Base_SetConfig+0x118>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d023      	beq.n	800b6da <TIM_Base_SetConfig+0xb2>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	4a2b      	ldr	r2, [pc, #172]	; (800b744 <TIM_Base_SetConfig+0x11c>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d01f      	beq.n	800b6da <TIM_Base_SetConfig+0xb2>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4a2a      	ldr	r2, [pc, #168]	; (800b748 <TIM_Base_SetConfig+0x120>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d01b      	beq.n	800b6da <TIM_Base_SetConfig+0xb2>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4a29      	ldr	r2, [pc, #164]	; (800b74c <TIM_Base_SetConfig+0x124>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d017      	beq.n	800b6da <TIM_Base_SetConfig+0xb2>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4a28      	ldr	r2, [pc, #160]	; (800b750 <TIM_Base_SetConfig+0x128>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d013      	beq.n	800b6da <TIM_Base_SetConfig+0xb2>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	4a27      	ldr	r2, [pc, #156]	; (800b754 <TIM_Base_SetConfig+0x12c>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d00f      	beq.n	800b6da <TIM_Base_SetConfig+0xb2>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4a26      	ldr	r2, [pc, #152]	; (800b758 <TIM_Base_SetConfig+0x130>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d00b      	beq.n	800b6da <TIM_Base_SetConfig+0xb2>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4a25      	ldr	r2, [pc, #148]	; (800b75c <TIM_Base_SetConfig+0x134>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d007      	beq.n	800b6da <TIM_Base_SetConfig+0xb2>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	4a24      	ldr	r2, [pc, #144]	; (800b760 <TIM_Base_SetConfig+0x138>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d003      	beq.n	800b6da <TIM_Base_SetConfig+0xb2>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4a23      	ldr	r2, [pc, #140]	; (800b764 <TIM_Base_SetConfig+0x13c>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d108      	bne.n	800b6ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	68db      	ldr	r3, [r3, #12]
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	695b      	ldr	r3, [r3, #20]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	68fa      	ldr	r2, [r7, #12]
 800b6fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	689a      	ldr	r2, [r3, #8]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4a0a      	ldr	r2, [pc, #40]	; (800b73c <TIM_Base_SetConfig+0x114>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d003      	beq.n	800b720 <TIM_Base_SetConfig+0xf8>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4a0c      	ldr	r2, [pc, #48]	; (800b74c <TIM_Base_SetConfig+0x124>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d103      	bne.n	800b728 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	691a      	ldr	r2, [r3, #16]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2201      	movs	r2, #1
 800b72c:	615a      	str	r2, [r3, #20]
}
 800b72e:	bf00      	nop
 800b730:	3714      	adds	r7, #20
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	40010000 	.word	0x40010000
 800b740:	40000400 	.word	0x40000400
 800b744:	40000800 	.word	0x40000800
 800b748:	40000c00 	.word	0x40000c00
 800b74c:	40010400 	.word	0x40010400
 800b750:	40014000 	.word	0x40014000
 800b754:	40014400 	.word	0x40014400
 800b758:	40014800 	.word	0x40014800
 800b75c:	40001800 	.word	0x40001800
 800b760:	40001c00 	.word	0x40001c00
 800b764:	40002000 	.word	0x40002000

0800b768 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b768:	b480      	push	{r7}
 800b76a:	b087      	sub	sp, #28
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6a1b      	ldr	r3, [r3, #32]
 800b776:	f023 0201 	bic.w	r2, r3, #1
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6a1b      	ldr	r3, [r3, #32]
 800b782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	699b      	ldr	r3, [r3, #24]
 800b78e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f023 0303 	bic.w	r3, r3, #3
 800b79e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	f023 0302 	bic.w	r3, r3, #2
 800b7b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	697a      	ldr	r2, [r7, #20]
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	4a20      	ldr	r2, [pc, #128]	; (800b840 <TIM_OC1_SetConfig+0xd8>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d003      	beq.n	800b7cc <TIM_OC1_SetConfig+0x64>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	4a1f      	ldr	r2, [pc, #124]	; (800b844 <TIM_OC1_SetConfig+0xdc>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d10c      	bne.n	800b7e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	f023 0308 	bic.w	r3, r3, #8
 800b7d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	697a      	ldr	r2, [r7, #20]
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	f023 0304 	bic.w	r3, r3, #4
 800b7e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a15      	ldr	r2, [pc, #84]	; (800b840 <TIM_OC1_SetConfig+0xd8>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d003      	beq.n	800b7f6 <TIM_OC1_SetConfig+0x8e>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4a14      	ldr	r2, [pc, #80]	; (800b844 <TIM_OC1_SetConfig+0xdc>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d111      	bne.n	800b81a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	695b      	ldr	r3, [r3, #20]
 800b80a:	693a      	ldr	r2, [r7, #16]
 800b80c:	4313      	orrs	r3, r2
 800b80e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	699b      	ldr	r3, [r3, #24]
 800b814:	693a      	ldr	r2, [r7, #16]
 800b816:	4313      	orrs	r3, r2
 800b818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	693a      	ldr	r2, [r7, #16]
 800b81e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	685a      	ldr	r2, [r3, #4]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	697a      	ldr	r2, [r7, #20]
 800b832:	621a      	str	r2, [r3, #32]
}
 800b834:	bf00      	nop
 800b836:	371c      	adds	r7, #28
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr
 800b840:	40010000 	.word	0x40010000
 800b844:	40010400 	.word	0x40010400

0800b848 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b848:	b480      	push	{r7}
 800b84a:	b087      	sub	sp, #28
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a1b      	ldr	r3, [r3, #32]
 800b856:	f023 0210 	bic.w	r2, r3, #16
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a1b      	ldr	r3, [r3, #32]
 800b862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	699b      	ldr	r3, [r3, #24]
 800b86e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b87e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	021b      	lsls	r3, r3, #8
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	4313      	orrs	r3, r2
 800b88a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	f023 0320 	bic.w	r3, r3, #32
 800b892:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	011b      	lsls	r3, r3, #4
 800b89a:	697a      	ldr	r2, [r7, #20]
 800b89c:	4313      	orrs	r3, r2
 800b89e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	4a22      	ldr	r2, [pc, #136]	; (800b92c <TIM_OC2_SetConfig+0xe4>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d003      	beq.n	800b8b0 <TIM_OC2_SetConfig+0x68>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	4a21      	ldr	r2, [pc, #132]	; (800b930 <TIM_OC2_SetConfig+0xe8>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d10d      	bne.n	800b8cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	011b      	lsls	r3, r3, #4
 800b8be:	697a      	ldr	r2, [r7, #20]
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	4a17      	ldr	r2, [pc, #92]	; (800b92c <TIM_OC2_SetConfig+0xe4>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d003      	beq.n	800b8dc <TIM_OC2_SetConfig+0x94>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4a16      	ldr	r2, [pc, #88]	; (800b930 <TIM_OC2_SetConfig+0xe8>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d113      	bne.n	800b904 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b8e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b8ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	695b      	ldr	r3, [r3, #20]
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	693a      	ldr	r2, [r7, #16]
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	699b      	ldr	r3, [r3, #24]
 800b8fc:	009b      	lsls	r3, r3, #2
 800b8fe:	693a      	ldr	r2, [r7, #16]
 800b900:	4313      	orrs	r3, r2
 800b902:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	693a      	ldr	r2, [r7, #16]
 800b908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	68fa      	ldr	r2, [r7, #12]
 800b90e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	685a      	ldr	r2, [r3, #4]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	621a      	str	r2, [r3, #32]
}
 800b91e:	bf00      	nop
 800b920:	371c      	adds	r7, #28
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr
 800b92a:	bf00      	nop
 800b92c:	40010000 	.word	0x40010000
 800b930:	40010400 	.word	0x40010400

0800b934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b934:	b480      	push	{r7}
 800b936:	b087      	sub	sp, #28
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6a1b      	ldr	r3, [r3, #32]
 800b942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a1b      	ldr	r3, [r3, #32]
 800b94e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	69db      	ldr	r3, [r3, #28]
 800b95a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f023 0303 	bic.w	r3, r3, #3
 800b96a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	68fa      	ldr	r2, [r7, #12]
 800b972:	4313      	orrs	r3, r2
 800b974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b97c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	021b      	lsls	r3, r3, #8
 800b984:	697a      	ldr	r2, [r7, #20]
 800b986:	4313      	orrs	r3, r2
 800b988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	4a21      	ldr	r2, [pc, #132]	; (800ba14 <TIM_OC3_SetConfig+0xe0>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d003      	beq.n	800b99a <TIM_OC3_SetConfig+0x66>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	4a20      	ldr	r2, [pc, #128]	; (800ba18 <TIM_OC3_SetConfig+0xe4>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d10d      	bne.n	800b9b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b9a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	68db      	ldr	r3, [r3, #12]
 800b9a6:	021b      	lsls	r3, r3, #8
 800b9a8:	697a      	ldr	r2, [r7, #20]
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b9b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	4a16      	ldr	r2, [pc, #88]	; (800ba14 <TIM_OC3_SetConfig+0xe0>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d003      	beq.n	800b9c6 <TIM_OC3_SetConfig+0x92>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4a15      	ldr	r2, [pc, #84]	; (800ba18 <TIM_OC3_SetConfig+0xe4>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d113      	bne.n	800b9ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b9d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	695b      	ldr	r3, [r3, #20]
 800b9da:	011b      	lsls	r3, r3, #4
 800b9dc:	693a      	ldr	r2, [r7, #16]
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	699b      	ldr	r3, [r3, #24]
 800b9e6:	011b      	lsls	r3, r3, #4
 800b9e8:	693a      	ldr	r2, [r7, #16]
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	693a      	ldr	r2, [r7, #16]
 800b9f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	685a      	ldr	r2, [r3, #4]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	697a      	ldr	r2, [r7, #20]
 800ba06:	621a      	str	r2, [r3, #32]
}
 800ba08:	bf00      	nop
 800ba0a:	371c      	adds	r7, #28
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr
 800ba14:	40010000 	.word	0x40010000
 800ba18:	40010400 	.word	0x40010400

0800ba1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b087      	sub	sp, #28
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6a1b      	ldr	r3, [r3, #32]
 800ba2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6a1b      	ldr	r3, [r3, #32]
 800ba36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	69db      	ldr	r3, [r3, #28]
 800ba42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	021b      	lsls	r3, r3, #8
 800ba5a:	68fa      	ldr	r2, [r7, #12]
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	031b      	lsls	r3, r3, #12
 800ba6e:	693a      	ldr	r2, [r7, #16]
 800ba70:	4313      	orrs	r3, r2
 800ba72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	4a12      	ldr	r2, [pc, #72]	; (800bac0 <TIM_OC4_SetConfig+0xa4>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d003      	beq.n	800ba84 <TIM_OC4_SetConfig+0x68>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	4a11      	ldr	r2, [pc, #68]	; (800bac4 <TIM_OC4_SetConfig+0xa8>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d109      	bne.n	800ba98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	695b      	ldr	r3, [r3, #20]
 800ba90:	019b      	lsls	r3, r3, #6
 800ba92:	697a      	ldr	r2, [r7, #20]
 800ba94:	4313      	orrs	r3, r2
 800ba96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	697a      	ldr	r2, [r7, #20]
 800ba9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	68fa      	ldr	r2, [r7, #12]
 800baa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	685a      	ldr	r2, [r3, #4]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	693a      	ldr	r2, [r7, #16]
 800bab0:	621a      	str	r2, [r3, #32]
}
 800bab2:	bf00      	nop
 800bab4:	371c      	adds	r7, #28
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr
 800babe:	bf00      	nop
 800bac0:	40010000 	.word	0x40010000
 800bac4:	40010400 	.word	0x40010400

0800bac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bac8:	b480      	push	{r7}
 800baca:	b087      	sub	sp, #28
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6a1b      	ldr	r3, [r3, #32]
 800bad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6a1b      	ldr	r3, [r3, #32]
 800bade:	f023 0201 	bic.w	r2, r3, #1
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	699b      	ldr	r3, [r3, #24]
 800baea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800baf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	011b      	lsls	r3, r3, #4
 800baf8:	693a      	ldr	r2, [r7, #16]
 800bafa:	4313      	orrs	r3, r2
 800bafc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	f023 030a 	bic.w	r3, r3, #10
 800bb04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bb06:	697a      	ldr	r2, [r7, #20]
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	693a      	ldr	r2, [r7, #16]
 800bb12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	697a      	ldr	r2, [r7, #20]
 800bb18:	621a      	str	r2, [r3, #32]
}
 800bb1a:	bf00      	nop
 800bb1c:	371c      	adds	r7, #28
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr

0800bb26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb26:	b480      	push	{r7}
 800bb28:	b087      	sub	sp, #28
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	60f8      	str	r0, [r7, #12]
 800bb2e:	60b9      	str	r1, [r7, #8]
 800bb30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	6a1b      	ldr	r3, [r3, #32]
 800bb36:	f023 0210 	bic.w	r2, r3, #16
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	699b      	ldr	r3, [r3, #24]
 800bb42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6a1b      	ldr	r3, [r3, #32]
 800bb48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	031b      	lsls	r3, r3, #12
 800bb56:	697a      	ldr	r2, [r7, #20]
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	011b      	lsls	r3, r3, #4
 800bb68:	693a      	ldr	r2, [r7, #16]
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	697a      	ldr	r2, [r7, #20]
 800bb72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	693a      	ldr	r2, [r7, #16]
 800bb78:	621a      	str	r2, [r3, #32]
}
 800bb7a:	bf00      	nop
 800bb7c:	371c      	adds	r7, #28
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr

0800bb86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bb86:	b480      	push	{r7}
 800bb88:	b085      	sub	sp, #20
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
 800bb8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	4313      	orrs	r3, r2
 800bba4:	f043 0307 	orr.w	r3, r3, #7
 800bba8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	609a      	str	r2, [r3, #8]
}
 800bbb0:	bf00      	nop
 800bbb2:	3714      	adds	r7, #20
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b087      	sub	sp, #28
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	607a      	str	r2, [r7, #4]
 800bbc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bbd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	021a      	lsls	r2, r3, #8
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	431a      	orrs	r2, r3
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	697a      	ldr	r2, [r7, #20]
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	697a      	ldr	r2, [r7, #20]
 800bbee:	609a      	str	r2, [r3, #8]
}
 800bbf0:	bf00      	nop
 800bbf2:	371c      	adds	r7, #28
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b087      	sub	sp, #28
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	f003 031f 	and.w	r3, r3, #31
 800bc0e:	2201      	movs	r2, #1
 800bc10:	fa02 f303 	lsl.w	r3, r2, r3
 800bc14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	6a1a      	ldr	r2, [r3, #32]
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	43db      	mvns	r3, r3
 800bc1e:	401a      	ands	r2, r3
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6a1a      	ldr	r2, [r3, #32]
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	f003 031f 	and.w	r3, r3, #31
 800bc2e:	6879      	ldr	r1, [r7, #4]
 800bc30:	fa01 f303 	lsl.w	r3, r1, r3
 800bc34:	431a      	orrs	r2, r3
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	621a      	str	r2, [r3, #32]
}
 800bc3a:	bf00      	nop
 800bc3c:	371c      	adds	r7, #28
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr
	...

0800bc48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d101      	bne.n	800bc60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc5c:	2302      	movs	r3, #2
 800bc5e:	e05a      	b.n	800bd16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2201      	movs	r2, #1
 800bc64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2202      	movs	r2, #2
 800bc6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	68fa      	ldr	r2, [r7, #12]
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	68fa      	ldr	r2, [r7, #12]
 800bc98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4a21      	ldr	r2, [pc, #132]	; (800bd24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d022      	beq.n	800bcea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcac:	d01d      	beq.n	800bcea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a1d      	ldr	r2, [pc, #116]	; (800bd28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d018      	beq.n	800bcea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a1b      	ldr	r2, [pc, #108]	; (800bd2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d013      	beq.n	800bcea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a1a      	ldr	r2, [pc, #104]	; (800bd30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d00e      	beq.n	800bcea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a18      	ldr	r2, [pc, #96]	; (800bd34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d009      	beq.n	800bcea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a17      	ldr	r2, [pc, #92]	; (800bd38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d004      	beq.n	800bcea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a15      	ldr	r2, [pc, #84]	; (800bd3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d10c      	bne.n	800bd04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	68ba      	ldr	r2, [r7, #8]
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	68ba      	ldr	r2, [r7, #8]
 800bd02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2201      	movs	r2, #1
 800bd08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3714      	adds	r7, #20
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr
 800bd22:	bf00      	nop
 800bd24:	40010000 	.word	0x40010000
 800bd28:	40000400 	.word	0x40000400
 800bd2c:	40000800 	.word	0x40000800
 800bd30:	40000c00 	.word	0x40000c00
 800bd34:	40010400 	.word	0x40010400
 800bd38:	40014000 	.word	0x40014000
 800bd3c:	40001800 	.word	0x40001800

0800bd40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b083      	sub	sp, #12
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd48:	bf00      	nop
 800bd4a:	370c      	adds	r7, #12
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd5c:	bf00      	nop
 800bd5e:	370c      	adds	r7, #12
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d101      	bne.n	800bd7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd76:	2301      	movs	r3, #1
 800bd78:	e03f      	b.n	800bdfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd80:	b2db      	uxtb	r3, r3
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d106      	bne.n	800bd94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f7f8 fe18 	bl	80049c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2224      	movs	r2, #36	; 0x24
 800bd98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	68da      	ldr	r2, [r3, #12]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bdaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 fddf 	bl	800c970 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	691a      	ldr	r2, [r3, #16]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bdc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	695a      	ldr	r2, [r3, #20]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bdd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	68da      	ldr	r2, [r3, #12]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bde0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2220      	movs	r2, #32
 800bdec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2220      	movs	r2, #32
 800bdf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bdf8:	2300      	movs	r3, #0
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3708      	adds	r7, #8
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be02:	b580      	push	{r7, lr}
 800be04:	b08a      	sub	sp, #40	; 0x28
 800be06:	af02      	add	r7, sp, #8
 800be08:	60f8      	str	r0, [r7, #12]
 800be0a:	60b9      	str	r1, [r7, #8]
 800be0c:	603b      	str	r3, [r7, #0]
 800be0e:	4613      	mov	r3, r2
 800be10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800be12:	2300      	movs	r3, #0
 800be14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	2b20      	cmp	r3, #32
 800be20:	d17c      	bne.n	800bf1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d002      	beq.n	800be2e <HAL_UART_Transmit+0x2c>
 800be28:	88fb      	ldrh	r3, [r7, #6]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d101      	bne.n	800be32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800be2e:	2301      	movs	r3, #1
 800be30:	e075      	b.n	800bf1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d101      	bne.n	800be40 <HAL_UART_Transmit+0x3e>
 800be3c:	2302      	movs	r3, #2
 800be3e:	e06e      	b.n	800bf1e <HAL_UART_Transmit+0x11c>
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2201      	movs	r2, #1
 800be44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2200      	movs	r2, #0
 800be4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2221      	movs	r2, #33	; 0x21
 800be52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800be56:	f7f9 fc5b 	bl	8005710 <HAL_GetTick>
 800be5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	88fa      	ldrh	r2, [r7, #6]
 800be60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	88fa      	ldrh	r2, [r7, #6]
 800be66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	689b      	ldr	r3, [r3, #8]
 800be6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be70:	d108      	bne.n	800be84 <HAL_UART_Transmit+0x82>
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	691b      	ldr	r3, [r3, #16]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d104      	bne.n	800be84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800be7a:	2300      	movs	r3, #0
 800be7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	61bb      	str	r3, [r7, #24]
 800be82:	e003      	b.n	800be8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800be88:	2300      	movs	r3, #0
 800be8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2200      	movs	r2, #0
 800be90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800be94:	e02a      	b.n	800beec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	9300      	str	r3, [sp, #0]
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	2200      	movs	r2, #0
 800be9e:	2180      	movs	r1, #128	; 0x80
 800bea0:	68f8      	ldr	r0, [r7, #12]
 800bea2:	f000 fb1f 	bl	800c4e4 <UART_WaitOnFlagUntilTimeout>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d001      	beq.n	800beb0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800beac:	2303      	movs	r3, #3
 800beae:	e036      	b.n	800bf1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800beb0:	69fb      	ldr	r3, [r7, #28]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d10b      	bne.n	800bece <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	881b      	ldrh	r3, [r3, #0]
 800beba:	461a      	mov	r2, r3
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bec4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	3302      	adds	r3, #2
 800beca:	61bb      	str	r3, [r7, #24]
 800becc:	e007      	b.n	800bede <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bece:	69fb      	ldr	r3, [r7, #28]
 800bed0:	781a      	ldrb	r2, [r3, #0]
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	3301      	adds	r3, #1
 800bedc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	3b01      	subs	r3, #1
 800bee6:	b29a      	uxth	r2, r3
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d1cf      	bne.n	800be96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	9300      	str	r3, [sp, #0]
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	2200      	movs	r2, #0
 800befe:	2140      	movs	r1, #64	; 0x40
 800bf00:	68f8      	ldr	r0, [r7, #12]
 800bf02:	f000 faef 	bl	800c4e4 <UART_WaitOnFlagUntilTimeout>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d001      	beq.n	800bf10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bf0c:	2303      	movs	r3, #3
 800bf0e:	e006      	b.n	800bf1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2220      	movs	r2, #32
 800bf14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	e000      	b.n	800bf1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bf1c:	2302      	movs	r3, #2
  }
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3720      	adds	r7, #32
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b084      	sub	sp, #16
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	60f8      	str	r0, [r7, #12]
 800bf2e:	60b9      	str	r1, [r7, #8]
 800bf30:	4613      	mov	r3, r2
 800bf32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	2b20      	cmp	r3, #32
 800bf3e:	d11d      	bne.n	800bf7c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d002      	beq.n	800bf4c <HAL_UART_Receive_IT+0x26>
 800bf46:	88fb      	ldrh	r3, [r7, #6]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d101      	bne.n	800bf50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e016      	b.n	800bf7e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d101      	bne.n	800bf5e <HAL_UART_Receive_IT+0x38>
 800bf5a:	2302      	movs	r3, #2
 800bf5c:	e00f      	b.n	800bf7e <HAL_UART_Receive_IT+0x58>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2201      	movs	r2, #1
 800bf62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bf6c:	88fb      	ldrh	r3, [r7, #6]
 800bf6e:	461a      	mov	r2, r3
 800bf70:	68b9      	ldr	r1, [r7, #8]
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f000 fb24 	bl	800c5c0 <UART_Start_Receive_IT>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	e000      	b.n	800bf7e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bf7c:	2302      	movs	r3, #2
  }
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
	...

0800bf88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b0ba      	sub	sp, #232	; 0xe8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	695b      	ldr	r3, [r3, #20]
 800bfaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bfba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfbe:	f003 030f 	and.w	r3, r3, #15
 800bfc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bfc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d10f      	bne.n	800bfee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bfce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfd2:	f003 0320 	and.w	r3, r3, #32
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d009      	beq.n	800bfee <HAL_UART_IRQHandler+0x66>
 800bfda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfde:	f003 0320 	and.w	r3, r3, #32
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d003      	beq.n	800bfee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 fc07 	bl	800c7fa <UART_Receive_IT>
      return;
 800bfec:	e256      	b.n	800c49c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bfee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	f000 80de 	beq.w	800c1b4 <HAL_UART_IRQHandler+0x22c>
 800bff8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bffc:	f003 0301 	and.w	r3, r3, #1
 800c000:	2b00      	cmp	r3, #0
 800c002:	d106      	bne.n	800c012 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c008:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f000 80d1 	beq.w	800c1b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c016:	f003 0301 	and.w	r3, r3, #1
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00b      	beq.n	800c036 <HAL_UART_IRQHandler+0xae>
 800c01e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c026:	2b00      	cmp	r3, #0
 800c028:	d005      	beq.n	800c036 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c02e:	f043 0201 	orr.w	r2, r3, #1
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c03a:	f003 0304 	and.w	r3, r3, #4
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d00b      	beq.n	800c05a <HAL_UART_IRQHandler+0xd2>
 800c042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c046:	f003 0301 	and.w	r3, r3, #1
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d005      	beq.n	800c05a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c052:	f043 0202 	orr.w	r2, r3, #2
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c05a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c05e:	f003 0302 	and.w	r3, r3, #2
 800c062:	2b00      	cmp	r3, #0
 800c064:	d00b      	beq.n	800c07e <HAL_UART_IRQHandler+0xf6>
 800c066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c06a:	f003 0301 	and.w	r3, r3, #1
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d005      	beq.n	800c07e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c076:	f043 0204 	orr.w	r2, r3, #4
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c07e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c082:	f003 0308 	and.w	r3, r3, #8
 800c086:	2b00      	cmp	r3, #0
 800c088:	d011      	beq.n	800c0ae <HAL_UART_IRQHandler+0x126>
 800c08a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c08e:	f003 0320 	and.w	r3, r3, #32
 800c092:	2b00      	cmp	r3, #0
 800c094:	d105      	bne.n	800c0a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c09a:	f003 0301 	and.w	r3, r3, #1
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d005      	beq.n	800c0ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0a6:	f043 0208 	orr.w	r2, r3, #8
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	f000 81ed 	beq.w	800c492 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c0b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0bc:	f003 0320 	and.w	r3, r3, #32
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d008      	beq.n	800c0d6 <HAL_UART_IRQHandler+0x14e>
 800c0c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0c8:	f003 0320 	and.w	r3, r3, #32
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d002      	beq.n	800c0d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 fb92 	bl	800c7fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	695b      	ldr	r3, [r3, #20]
 800c0dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0e0:	2b40      	cmp	r3, #64	; 0x40
 800c0e2:	bf0c      	ite	eq
 800c0e4:	2301      	moveq	r3, #1
 800c0e6:	2300      	movne	r3, #0
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0f2:	f003 0308 	and.w	r3, r3, #8
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d103      	bne.n	800c102 <HAL_UART_IRQHandler+0x17a>
 800c0fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d04f      	beq.n	800c1a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 fa9a 	bl	800c63c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	695b      	ldr	r3, [r3, #20]
 800c10e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c112:	2b40      	cmp	r3, #64	; 0x40
 800c114:	d141      	bne.n	800c19a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	3314      	adds	r3, #20
 800c11c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c120:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c124:	e853 3f00 	ldrex	r3, [r3]
 800c128:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c12c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c134:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	3314      	adds	r3, #20
 800c13e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c142:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c146:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c14a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c14e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c152:	e841 2300 	strex	r3, r2, [r1]
 800c156:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c15a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d1d9      	bne.n	800c116 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c166:	2b00      	cmp	r3, #0
 800c168:	d013      	beq.n	800c192 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c16e:	4a7d      	ldr	r2, [pc, #500]	; (800c364 <HAL_UART_IRQHandler+0x3dc>)
 800c170:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c176:	4618      	mov	r0, r3
 800c178:	f7fa f828 	bl	80061cc <HAL_DMA_Abort_IT>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d016      	beq.n	800c1b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c18c:	4610      	mov	r0, r2
 800c18e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c190:	e00e      	b.n	800c1b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 f990 	bl	800c4b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c198:	e00a      	b.n	800c1b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 f98c 	bl	800c4b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1a0:	e006      	b.n	800c1b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 f988 	bl	800c4b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c1ae:	e170      	b.n	800c492 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1b0:	bf00      	nop
    return;
 800c1b2:	e16e      	b.n	800c492 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	f040 814a 	bne.w	800c452 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c1be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1c2:	f003 0310 	and.w	r3, r3, #16
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	f000 8143 	beq.w	800c452 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c1cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1d0:	f003 0310 	and.w	r3, r3, #16
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f000 813c 	beq.w	800c452 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c1da:	2300      	movs	r3, #0
 800c1dc:	60bb      	str	r3, [r7, #8]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	60bb      	str	r3, [r7, #8]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	60bb      	str	r3, [r7, #8]
 800c1ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	695b      	ldr	r3, [r3, #20]
 800c1f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1fa:	2b40      	cmp	r3, #64	; 0x40
 800c1fc:	f040 80b4 	bne.w	800c368 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c20c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c210:	2b00      	cmp	r3, #0
 800c212:	f000 8140 	beq.w	800c496 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c21a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c21e:	429a      	cmp	r2, r3
 800c220:	f080 8139 	bcs.w	800c496 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c22a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c230:	69db      	ldr	r3, [r3, #28]
 800c232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c236:	f000 8088 	beq.w	800c34a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	330c      	adds	r3, #12
 800c240:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c244:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c248:	e853 3f00 	ldrex	r3, [r3]
 800c24c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c250:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c258:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	330c      	adds	r3, #12
 800c262:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c266:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c26a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c26e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c272:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c276:	e841 2300 	strex	r3, r2, [r1]
 800c27a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c27e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c282:	2b00      	cmp	r3, #0
 800c284:	d1d9      	bne.n	800c23a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	3314      	adds	r3, #20
 800c28c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c28e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c290:	e853 3f00 	ldrex	r3, [r3]
 800c294:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c296:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c298:	f023 0301 	bic.w	r3, r3, #1
 800c29c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	3314      	adds	r3, #20
 800c2a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c2aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c2ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c2b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c2b6:	e841 2300 	strex	r3, r2, [r1]
 800c2ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c2bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d1e1      	bne.n	800c286 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	3314      	adds	r3, #20
 800c2c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2cc:	e853 3f00 	ldrex	r3, [r3]
 800c2d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c2d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	3314      	adds	r3, #20
 800c2e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c2e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c2e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c2ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c2ee:	e841 2300 	strex	r3, r2, [r1]
 800c2f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c2f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d1e3      	bne.n	800c2c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2220      	movs	r2, #32
 800c2fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2200      	movs	r2, #0
 800c306:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	330c      	adds	r3, #12
 800c30e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c312:	e853 3f00 	ldrex	r3, [r3]
 800c316:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c31a:	f023 0310 	bic.w	r3, r3, #16
 800c31e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	330c      	adds	r3, #12
 800c328:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c32c:	65ba      	str	r2, [r7, #88]	; 0x58
 800c32e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c330:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c332:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c334:	e841 2300 	strex	r3, r2, [r1]
 800c338:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c33a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d1e3      	bne.n	800c308 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c344:	4618      	mov	r0, r3
 800c346:	f7f9 fed1 	bl	80060ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c352:	b29b      	uxth	r3, r3
 800c354:	1ad3      	subs	r3, r2, r3
 800c356:	b29b      	uxth	r3, r3
 800c358:	4619      	mov	r1, r3
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f000 f8b6 	bl	800c4cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c360:	e099      	b.n	800c496 <HAL_UART_IRQHandler+0x50e>
 800c362:	bf00      	nop
 800c364:	0800c703 	.word	0x0800c703
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c370:	b29b      	uxth	r3, r3
 800c372:	1ad3      	subs	r3, r2, r3
 800c374:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f000 808b 	beq.w	800c49a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c384:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c388:	2b00      	cmp	r3, #0
 800c38a:	f000 8086 	beq.w	800c49a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	330c      	adds	r3, #12
 800c394:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c398:	e853 3f00 	ldrex	r3, [r3]
 800c39c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	330c      	adds	r3, #12
 800c3ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c3b2:	647a      	str	r2, [r7, #68]	; 0x44
 800c3b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c3b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3ba:	e841 2300 	strex	r3, r2, [r1]
 800c3be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d1e3      	bne.n	800c38e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	3314      	adds	r3, #20
 800c3cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d0:	e853 3f00 	ldrex	r3, [r3]
 800c3d4:	623b      	str	r3, [r7, #32]
   return(result);
 800c3d6:	6a3b      	ldr	r3, [r7, #32]
 800c3d8:	f023 0301 	bic.w	r3, r3, #1
 800c3dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	3314      	adds	r3, #20
 800c3e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c3ea:	633a      	str	r2, [r7, #48]	; 0x30
 800c3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3f2:	e841 2300 	strex	r3, r2, [r1]
 800c3f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d1e3      	bne.n	800c3c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2220      	movs	r2, #32
 800c402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2200      	movs	r2, #0
 800c40a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	330c      	adds	r3, #12
 800c412:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	e853 3f00 	ldrex	r3, [r3]
 800c41a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f023 0310 	bic.w	r3, r3, #16
 800c422:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	330c      	adds	r3, #12
 800c42c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c430:	61fa      	str	r2, [r7, #28]
 800c432:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c434:	69b9      	ldr	r1, [r7, #24]
 800c436:	69fa      	ldr	r2, [r7, #28]
 800c438:	e841 2300 	strex	r3, r2, [r1]
 800c43c:	617b      	str	r3, [r7, #20]
   return(result);
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d1e3      	bne.n	800c40c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c444:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c448:	4619      	mov	r1, r3
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 f83e 	bl	800c4cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c450:	e023      	b.n	800c49a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d009      	beq.n	800c472 <HAL_UART_IRQHandler+0x4ea>
 800c45e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c466:	2b00      	cmp	r3, #0
 800c468:	d003      	beq.n	800c472 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 f95d 	bl	800c72a <UART_Transmit_IT>
    return;
 800c470:	e014      	b.n	800c49c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00e      	beq.n	800c49c <HAL_UART_IRQHandler+0x514>
 800c47e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c486:	2b00      	cmp	r3, #0
 800c488:	d008      	beq.n	800c49c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f000 f99d 	bl	800c7ca <UART_EndTransmit_IT>
    return;
 800c490:	e004      	b.n	800c49c <HAL_UART_IRQHandler+0x514>
    return;
 800c492:	bf00      	nop
 800c494:	e002      	b.n	800c49c <HAL_UART_IRQHandler+0x514>
      return;
 800c496:	bf00      	nop
 800c498:	e000      	b.n	800c49c <HAL_UART_IRQHandler+0x514>
      return;
 800c49a:	bf00      	nop
  }
}
 800c49c:	37e8      	adds	r7, #232	; 0xe8
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop

0800c4a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b083      	sub	sp, #12
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c4ac:	bf00      	nop
 800c4ae:	370c      	adds	r7, #12
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr

0800c4b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b083      	sub	sp, #12
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c4c0:	bf00      	nop
 800c4c2:	370c      	adds	r7, #12
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	4770      	bx	lr

0800c4cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b083      	sub	sp, #12
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c4d8:	bf00      	nop
 800c4da:	370c      	adds	r7, #12
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b090      	sub	sp, #64	; 0x40
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	60b9      	str	r1, [r7, #8]
 800c4ee:	603b      	str	r3, [r7, #0]
 800c4f0:	4613      	mov	r3, r2
 800c4f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4f4:	e050      	b.n	800c598 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4fc:	d04c      	beq.n	800c598 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c4fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c500:	2b00      	cmp	r3, #0
 800c502:	d007      	beq.n	800c514 <UART_WaitOnFlagUntilTimeout+0x30>
 800c504:	f7f9 f904 	bl	8005710 <HAL_GetTick>
 800c508:	4602      	mov	r2, r0
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	1ad3      	subs	r3, r2, r3
 800c50e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c510:	429a      	cmp	r2, r3
 800c512:	d241      	bcs.n	800c598 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	330c      	adds	r3, #12
 800c51a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51e:	e853 3f00 	ldrex	r3, [r3]
 800c522:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c526:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c52a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	330c      	adds	r3, #12
 800c532:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c534:	637a      	str	r2, [r7, #52]	; 0x34
 800c536:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c538:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c53a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c53c:	e841 2300 	strex	r3, r2, [r1]
 800c540:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c544:	2b00      	cmp	r3, #0
 800c546:	d1e5      	bne.n	800c514 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	3314      	adds	r3, #20
 800c54e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	e853 3f00 	ldrex	r3, [r3]
 800c556:	613b      	str	r3, [r7, #16]
   return(result);
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	f023 0301 	bic.w	r3, r3, #1
 800c55e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	3314      	adds	r3, #20
 800c566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c568:	623a      	str	r2, [r7, #32]
 800c56a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c56c:	69f9      	ldr	r1, [r7, #28]
 800c56e:	6a3a      	ldr	r2, [r7, #32]
 800c570:	e841 2300 	strex	r3, r2, [r1]
 800c574:	61bb      	str	r3, [r7, #24]
   return(result);
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d1e5      	bne.n	800c548 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2220      	movs	r2, #32
 800c580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2220      	movs	r2, #32
 800c588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2200      	movs	r2, #0
 800c590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c594:	2303      	movs	r3, #3
 800c596:	e00f      	b.n	800c5b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	4013      	ands	r3, r2
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	bf0c      	ite	eq
 800c5a8:	2301      	moveq	r3, #1
 800c5aa:	2300      	movne	r3, #0
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	79fb      	ldrb	r3, [r7, #7]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d09f      	beq.n	800c4f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3740      	adds	r7, #64	; 0x40
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b085      	sub	sp, #20
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	4613      	mov	r3, r2
 800c5cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	68ba      	ldr	r2, [r7, #8]
 800c5d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	88fa      	ldrh	r2, [r7, #6]
 800c5d8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	88fa      	ldrh	r2, [r7, #6]
 800c5de:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2222      	movs	r2, #34	; 0x22
 800c5ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	691b      	ldr	r3, [r3, #16]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d007      	beq.n	800c60e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	68da      	ldr	r2, [r3, #12]
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c60c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	695a      	ldr	r2, [r3, #20]
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f042 0201 	orr.w	r2, r2, #1
 800c61c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	68da      	ldr	r2, [r3, #12]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f042 0220 	orr.w	r2, r2, #32
 800c62c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c62e:	2300      	movs	r3, #0
}
 800c630:	4618      	mov	r0, r3
 800c632:	3714      	adds	r7, #20
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr

0800c63c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b095      	sub	sp, #84	; 0x54
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	330c      	adds	r3, #12
 800c64a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c64e:	e853 3f00 	ldrex	r3, [r3]
 800c652:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c656:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c65a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	330c      	adds	r3, #12
 800c662:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c664:	643a      	str	r2, [r7, #64]	; 0x40
 800c666:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c668:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c66a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c66c:	e841 2300 	strex	r3, r2, [r1]
 800c670:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c674:	2b00      	cmp	r3, #0
 800c676:	d1e5      	bne.n	800c644 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	3314      	adds	r3, #20
 800c67e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c680:	6a3b      	ldr	r3, [r7, #32]
 800c682:	e853 3f00 	ldrex	r3, [r3]
 800c686:	61fb      	str	r3, [r7, #28]
   return(result);
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	f023 0301 	bic.w	r3, r3, #1
 800c68e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	3314      	adds	r3, #20
 800c696:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c698:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c69a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c69c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c69e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6a0:	e841 2300 	strex	r3, r2, [r1]
 800c6a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d1e5      	bne.n	800c678 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d119      	bne.n	800c6e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	330c      	adds	r3, #12
 800c6ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	e853 3f00 	ldrex	r3, [r3]
 800c6c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	f023 0310 	bic.w	r3, r3, #16
 800c6ca:	647b      	str	r3, [r7, #68]	; 0x44
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	330c      	adds	r3, #12
 800c6d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6d4:	61ba      	str	r2, [r7, #24]
 800c6d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d8:	6979      	ldr	r1, [r7, #20]
 800c6da:	69ba      	ldr	r2, [r7, #24]
 800c6dc:	e841 2300 	strex	r3, r2, [r1]
 800c6e0:	613b      	str	r3, [r7, #16]
   return(result);
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d1e5      	bne.n	800c6b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2220      	movs	r2, #32
 800c6ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c6f6:	bf00      	nop
 800c6f8:	3754      	adds	r7, #84	; 0x54
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr

0800c702 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c702:	b580      	push	{r7, lr}
 800c704:	b084      	sub	sp, #16
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c70e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2200      	movs	r2, #0
 800c714:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2200      	movs	r2, #0
 800c71a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c71c:	68f8      	ldr	r0, [r7, #12]
 800c71e:	f7ff fecb 	bl	800c4b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c722:	bf00      	nop
 800c724:	3710      	adds	r7, #16
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}

0800c72a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c72a:	b480      	push	{r7}
 800c72c:	b085      	sub	sp, #20
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c738:	b2db      	uxtb	r3, r3
 800c73a:	2b21      	cmp	r3, #33	; 0x21
 800c73c:	d13e      	bne.n	800c7bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	689b      	ldr	r3, [r3, #8]
 800c742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c746:	d114      	bne.n	800c772 <UART_Transmit_IT+0x48>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	691b      	ldr	r3, [r3, #16]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d110      	bne.n	800c772 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6a1b      	ldr	r3, [r3, #32]
 800c754:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	881b      	ldrh	r3, [r3, #0]
 800c75a:	461a      	mov	r2, r3
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c764:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6a1b      	ldr	r3, [r3, #32]
 800c76a:	1c9a      	adds	r2, r3, #2
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	621a      	str	r2, [r3, #32]
 800c770:	e008      	b.n	800c784 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6a1b      	ldr	r3, [r3, #32]
 800c776:	1c59      	adds	r1, r3, #1
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	6211      	str	r1, [r2, #32]
 800c77c:	781a      	ldrb	r2, [r3, #0]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c788:	b29b      	uxth	r3, r3
 800c78a:	3b01      	subs	r3, #1
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	4619      	mov	r1, r3
 800c792:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c794:	2b00      	cmp	r3, #0
 800c796:	d10f      	bne.n	800c7b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	68da      	ldr	r2, [r3, #12]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c7a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	68da      	ldr	r2, [r3, #12]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	e000      	b.n	800c7be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c7bc:	2302      	movs	r3, #2
  }
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3714      	adds	r7, #20
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr

0800c7ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c7ca:	b580      	push	{r7, lr}
 800c7cc:	b082      	sub	sp, #8
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	68da      	ldr	r2, [r3, #12]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2220      	movs	r2, #32
 800c7e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f7ff fe5a 	bl	800c4a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c7f0:	2300      	movs	r3, #0
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}

0800c7fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b08c      	sub	sp, #48	; 0x30
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c808:	b2db      	uxtb	r3, r3
 800c80a:	2b22      	cmp	r3, #34	; 0x22
 800c80c:	f040 80ab 	bne.w	800c966 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	689b      	ldr	r3, [r3, #8]
 800c814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c818:	d117      	bne.n	800c84a <UART_Receive_IT+0x50>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	691b      	ldr	r3, [r3, #16]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d113      	bne.n	800c84a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c822:	2300      	movs	r3, #0
 800c824:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c82a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	b29b      	uxth	r3, r3
 800c834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c838:	b29a      	uxth	r2, r3
 800c83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c842:	1c9a      	adds	r2, r3, #2
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	629a      	str	r2, [r3, #40]	; 0x28
 800c848:	e026      	b.n	800c898 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c84e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c850:	2300      	movs	r3, #0
 800c852:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c85c:	d007      	beq.n	800c86e <UART_Receive_IT+0x74>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d10a      	bne.n	800c87c <UART_Receive_IT+0x82>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	691b      	ldr	r3, [r3, #16]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d106      	bne.n	800c87c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	b2da      	uxtb	r2, r3
 800c876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c878:	701a      	strb	r2, [r3, #0]
 800c87a:	e008      	b.n	800c88e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	b2db      	uxtb	r3, r3
 800c884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c888:	b2da      	uxtb	r2, r3
 800c88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c892:	1c5a      	adds	r2, r3, #1
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	3b01      	subs	r3, #1
 800c8a0:	b29b      	uxth	r3, r3
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d15a      	bne.n	800c962 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	68da      	ldr	r2, [r3, #12]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f022 0220 	bic.w	r2, r2, #32
 800c8ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	68da      	ldr	r2, [r3, #12]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c8ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	695a      	ldr	r2, [r3, #20]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f022 0201 	bic.w	r2, r2, #1
 800c8da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2220      	movs	r2, #32
 800c8e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	d135      	bne.n	800c958 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	330c      	adds	r3, #12
 800c8f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	e853 3f00 	ldrex	r3, [r3]
 800c900:	613b      	str	r3, [r7, #16]
   return(result);
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	f023 0310 	bic.w	r3, r3, #16
 800c908:	627b      	str	r3, [r7, #36]	; 0x24
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	330c      	adds	r3, #12
 800c910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c912:	623a      	str	r2, [r7, #32]
 800c914:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c916:	69f9      	ldr	r1, [r7, #28]
 800c918:	6a3a      	ldr	r2, [r7, #32]
 800c91a:	e841 2300 	strex	r3, r2, [r1]
 800c91e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d1e5      	bne.n	800c8f2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f003 0310 	and.w	r3, r3, #16
 800c930:	2b10      	cmp	r3, #16
 800c932:	d10a      	bne.n	800c94a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c934:	2300      	movs	r3, #0
 800c936:	60fb      	str	r3, [r7, #12]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	60fb      	str	r3, [r7, #12]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	60fb      	str	r3, [r7, #12]
 800c948:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c94e:	4619      	mov	r1, r3
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f7ff fdbb 	bl	800c4cc <HAL_UARTEx_RxEventCallback>
 800c956:	e002      	b.n	800c95e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f7f7 fa3b 	bl	8003dd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c95e:	2300      	movs	r3, #0
 800c960:	e002      	b.n	800c968 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c962:	2300      	movs	r3, #0
 800c964:	e000      	b.n	800c968 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c966:	2302      	movs	r3, #2
  }
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3730      	adds	r7, #48	; 0x30
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c974:	b0c0      	sub	sp, #256	; 0x100
 800c976:	af00      	add	r7, sp, #0
 800c978:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c97c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	691b      	ldr	r3, [r3, #16]
 800c984:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c98c:	68d9      	ldr	r1, [r3, #12]
 800c98e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	ea40 0301 	orr.w	r3, r0, r1
 800c998:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c99a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c99e:	689a      	ldr	r2, [r3, #8]
 800c9a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9a4:	691b      	ldr	r3, [r3, #16]
 800c9a6:	431a      	orrs	r2, r3
 800c9a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9ac:	695b      	ldr	r3, [r3, #20]
 800c9ae:	431a      	orrs	r2, r3
 800c9b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9b4:	69db      	ldr	r3, [r3, #28]
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c9bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	68db      	ldr	r3, [r3, #12]
 800c9c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c9c8:	f021 010c 	bic.w	r1, r1, #12
 800c9cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c9d6:	430b      	orrs	r3, r1
 800c9d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c9da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	695b      	ldr	r3, [r3, #20]
 800c9e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c9e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9ea:	6999      	ldr	r1, [r3, #24]
 800c9ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9f0:	681a      	ldr	r2, [r3, #0]
 800c9f2:	ea40 0301 	orr.w	r3, r0, r1
 800c9f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c9f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9fc:	681a      	ldr	r2, [r3, #0]
 800c9fe:	4b8f      	ldr	r3, [pc, #572]	; (800cc3c <UART_SetConfig+0x2cc>)
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d005      	beq.n	800ca10 <UART_SetConfig+0xa0>
 800ca04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca08:	681a      	ldr	r2, [r3, #0]
 800ca0a:	4b8d      	ldr	r3, [pc, #564]	; (800cc40 <UART_SetConfig+0x2d0>)
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d104      	bne.n	800ca1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ca10:	f7fc fde2 	bl	80095d8 <HAL_RCC_GetPCLK2Freq>
 800ca14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ca18:	e003      	b.n	800ca22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ca1a:	f7fc fdc9 	bl	80095b0 <HAL_RCC_GetPCLK1Freq>
 800ca1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca26:	69db      	ldr	r3, [r3, #28]
 800ca28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca2c:	f040 810c 	bne.w	800cc48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ca30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca34:	2200      	movs	r2, #0
 800ca36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ca3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ca3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ca42:	4622      	mov	r2, r4
 800ca44:	462b      	mov	r3, r5
 800ca46:	1891      	adds	r1, r2, r2
 800ca48:	65b9      	str	r1, [r7, #88]	; 0x58
 800ca4a:	415b      	adcs	r3, r3
 800ca4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ca52:	4621      	mov	r1, r4
 800ca54:	eb12 0801 	adds.w	r8, r2, r1
 800ca58:	4629      	mov	r1, r5
 800ca5a:	eb43 0901 	adc.w	r9, r3, r1
 800ca5e:	f04f 0200 	mov.w	r2, #0
 800ca62:	f04f 0300 	mov.w	r3, #0
 800ca66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ca6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ca6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ca72:	4690      	mov	r8, r2
 800ca74:	4699      	mov	r9, r3
 800ca76:	4623      	mov	r3, r4
 800ca78:	eb18 0303 	adds.w	r3, r8, r3
 800ca7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ca80:	462b      	mov	r3, r5
 800ca82:	eb49 0303 	adc.w	r3, r9, r3
 800ca86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ca8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	2200      	movs	r2, #0
 800ca92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ca96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ca9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ca9e:	460b      	mov	r3, r1
 800caa0:	18db      	adds	r3, r3, r3
 800caa2:	653b      	str	r3, [r7, #80]	; 0x50
 800caa4:	4613      	mov	r3, r2
 800caa6:	eb42 0303 	adc.w	r3, r2, r3
 800caaa:	657b      	str	r3, [r7, #84]	; 0x54
 800caac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cab0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cab4:	f7f4 fa66 	bl	8000f84 <__aeabi_uldivmod>
 800cab8:	4602      	mov	r2, r0
 800caba:	460b      	mov	r3, r1
 800cabc:	4b61      	ldr	r3, [pc, #388]	; (800cc44 <UART_SetConfig+0x2d4>)
 800cabe:	fba3 2302 	umull	r2, r3, r3, r2
 800cac2:	095b      	lsrs	r3, r3, #5
 800cac4:	011c      	lsls	r4, r3, #4
 800cac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800caca:	2200      	movs	r2, #0
 800cacc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cad0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cad4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cad8:	4642      	mov	r2, r8
 800cada:	464b      	mov	r3, r9
 800cadc:	1891      	adds	r1, r2, r2
 800cade:	64b9      	str	r1, [r7, #72]	; 0x48
 800cae0:	415b      	adcs	r3, r3
 800cae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cae4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cae8:	4641      	mov	r1, r8
 800caea:	eb12 0a01 	adds.w	sl, r2, r1
 800caee:	4649      	mov	r1, r9
 800caf0:	eb43 0b01 	adc.w	fp, r3, r1
 800caf4:	f04f 0200 	mov.w	r2, #0
 800caf8:	f04f 0300 	mov.w	r3, #0
 800cafc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cb00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cb04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cb08:	4692      	mov	sl, r2
 800cb0a:	469b      	mov	fp, r3
 800cb0c:	4643      	mov	r3, r8
 800cb0e:	eb1a 0303 	adds.w	r3, sl, r3
 800cb12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cb16:	464b      	mov	r3, r9
 800cb18:	eb4b 0303 	adc.w	r3, fp, r3
 800cb1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cb20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	2200      	movs	r2, #0
 800cb28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cb2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cb30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cb34:	460b      	mov	r3, r1
 800cb36:	18db      	adds	r3, r3, r3
 800cb38:	643b      	str	r3, [r7, #64]	; 0x40
 800cb3a:	4613      	mov	r3, r2
 800cb3c:	eb42 0303 	adc.w	r3, r2, r3
 800cb40:	647b      	str	r3, [r7, #68]	; 0x44
 800cb42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cb46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cb4a:	f7f4 fa1b 	bl	8000f84 <__aeabi_uldivmod>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	460b      	mov	r3, r1
 800cb52:	4611      	mov	r1, r2
 800cb54:	4b3b      	ldr	r3, [pc, #236]	; (800cc44 <UART_SetConfig+0x2d4>)
 800cb56:	fba3 2301 	umull	r2, r3, r3, r1
 800cb5a:	095b      	lsrs	r3, r3, #5
 800cb5c:	2264      	movs	r2, #100	; 0x64
 800cb5e:	fb02 f303 	mul.w	r3, r2, r3
 800cb62:	1acb      	subs	r3, r1, r3
 800cb64:	00db      	lsls	r3, r3, #3
 800cb66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cb6a:	4b36      	ldr	r3, [pc, #216]	; (800cc44 <UART_SetConfig+0x2d4>)
 800cb6c:	fba3 2302 	umull	r2, r3, r3, r2
 800cb70:	095b      	lsrs	r3, r3, #5
 800cb72:	005b      	lsls	r3, r3, #1
 800cb74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cb78:	441c      	add	r4, r3
 800cb7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb7e:	2200      	movs	r2, #0
 800cb80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cb84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cb88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cb8c:	4642      	mov	r2, r8
 800cb8e:	464b      	mov	r3, r9
 800cb90:	1891      	adds	r1, r2, r2
 800cb92:	63b9      	str	r1, [r7, #56]	; 0x38
 800cb94:	415b      	adcs	r3, r3
 800cb96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cb9c:	4641      	mov	r1, r8
 800cb9e:	1851      	adds	r1, r2, r1
 800cba0:	6339      	str	r1, [r7, #48]	; 0x30
 800cba2:	4649      	mov	r1, r9
 800cba4:	414b      	adcs	r3, r1
 800cba6:	637b      	str	r3, [r7, #52]	; 0x34
 800cba8:	f04f 0200 	mov.w	r2, #0
 800cbac:	f04f 0300 	mov.w	r3, #0
 800cbb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cbb4:	4659      	mov	r1, fp
 800cbb6:	00cb      	lsls	r3, r1, #3
 800cbb8:	4651      	mov	r1, sl
 800cbba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cbbe:	4651      	mov	r1, sl
 800cbc0:	00ca      	lsls	r2, r1, #3
 800cbc2:	4610      	mov	r0, r2
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	4642      	mov	r2, r8
 800cbca:	189b      	adds	r3, r3, r2
 800cbcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cbd0:	464b      	mov	r3, r9
 800cbd2:	460a      	mov	r2, r1
 800cbd4:	eb42 0303 	adc.w	r3, r2, r3
 800cbd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cbdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cbe8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cbec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cbf0:	460b      	mov	r3, r1
 800cbf2:	18db      	adds	r3, r3, r3
 800cbf4:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbf6:	4613      	mov	r3, r2
 800cbf8:	eb42 0303 	adc.w	r3, r2, r3
 800cbfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cc02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cc06:	f7f4 f9bd 	bl	8000f84 <__aeabi_uldivmod>
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	4b0d      	ldr	r3, [pc, #52]	; (800cc44 <UART_SetConfig+0x2d4>)
 800cc10:	fba3 1302 	umull	r1, r3, r3, r2
 800cc14:	095b      	lsrs	r3, r3, #5
 800cc16:	2164      	movs	r1, #100	; 0x64
 800cc18:	fb01 f303 	mul.w	r3, r1, r3
 800cc1c:	1ad3      	subs	r3, r2, r3
 800cc1e:	00db      	lsls	r3, r3, #3
 800cc20:	3332      	adds	r3, #50	; 0x32
 800cc22:	4a08      	ldr	r2, [pc, #32]	; (800cc44 <UART_SetConfig+0x2d4>)
 800cc24:	fba2 2303 	umull	r2, r3, r2, r3
 800cc28:	095b      	lsrs	r3, r3, #5
 800cc2a:	f003 0207 	and.w	r2, r3, #7
 800cc2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4422      	add	r2, r4
 800cc36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cc38:	e105      	b.n	800ce46 <UART_SetConfig+0x4d6>
 800cc3a:	bf00      	nop
 800cc3c:	40011000 	.word	0x40011000
 800cc40:	40011400 	.word	0x40011400
 800cc44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cc48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cc52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800cc56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800cc5a:	4642      	mov	r2, r8
 800cc5c:	464b      	mov	r3, r9
 800cc5e:	1891      	adds	r1, r2, r2
 800cc60:	6239      	str	r1, [r7, #32]
 800cc62:	415b      	adcs	r3, r3
 800cc64:	627b      	str	r3, [r7, #36]	; 0x24
 800cc66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cc6a:	4641      	mov	r1, r8
 800cc6c:	1854      	adds	r4, r2, r1
 800cc6e:	4649      	mov	r1, r9
 800cc70:	eb43 0501 	adc.w	r5, r3, r1
 800cc74:	f04f 0200 	mov.w	r2, #0
 800cc78:	f04f 0300 	mov.w	r3, #0
 800cc7c:	00eb      	lsls	r3, r5, #3
 800cc7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cc82:	00e2      	lsls	r2, r4, #3
 800cc84:	4614      	mov	r4, r2
 800cc86:	461d      	mov	r5, r3
 800cc88:	4643      	mov	r3, r8
 800cc8a:	18e3      	adds	r3, r4, r3
 800cc8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cc90:	464b      	mov	r3, r9
 800cc92:	eb45 0303 	adc.w	r3, r5, r3
 800cc96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cc9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	2200      	movs	r2, #0
 800cca2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cca6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ccaa:	f04f 0200 	mov.w	r2, #0
 800ccae:	f04f 0300 	mov.w	r3, #0
 800ccb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ccb6:	4629      	mov	r1, r5
 800ccb8:	008b      	lsls	r3, r1, #2
 800ccba:	4621      	mov	r1, r4
 800ccbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ccc0:	4621      	mov	r1, r4
 800ccc2:	008a      	lsls	r2, r1, #2
 800ccc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ccc8:	f7f4 f95c 	bl	8000f84 <__aeabi_uldivmod>
 800cccc:	4602      	mov	r2, r0
 800ccce:	460b      	mov	r3, r1
 800ccd0:	4b60      	ldr	r3, [pc, #384]	; (800ce54 <UART_SetConfig+0x4e4>)
 800ccd2:	fba3 2302 	umull	r2, r3, r3, r2
 800ccd6:	095b      	lsrs	r3, r3, #5
 800ccd8:	011c      	lsls	r4, r3, #4
 800ccda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ccde:	2200      	movs	r2, #0
 800cce0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cce4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cce8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ccec:	4642      	mov	r2, r8
 800ccee:	464b      	mov	r3, r9
 800ccf0:	1891      	adds	r1, r2, r2
 800ccf2:	61b9      	str	r1, [r7, #24]
 800ccf4:	415b      	adcs	r3, r3
 800ccf6:	61fb      	str	r3, [r7, #28]
 800ccf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ccfc:	4641      	mov	r1, r8
 800ccfe:	1851      	adds	r1, r2, r1
 800cd00:	6139      	str	r1, [r7, #16]
 800cd02:	4649      	mov	r1, r9
 800cd04:	414b      	adcs	r3, r1
 800cd06:	617b      	str	r3, [r7, #20]
 800cd08:	f04f 0200 	mov.w	r2, #0
 800cd0c:	f04f 0300 	mov.w	r3, #0
 800cd10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cd14:	4659      	mov	r1, fp
 800cd16:	00cb      	lsls	r3, r1, #3
 800cd18:	4651      	mov	r1, sl
 800cd1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cd1e:	4651      	mov	r1, sl
 800cd20:	00ca      	lsls	r2, r1, #3
 800cd22:	4610      	mov	r0, r2
 800cd24:	4619      	mov	r1, r3
 800cd26:	4603      	mov	r3, r0
 800cd28:	4642      	mov	r2, r8
 800cd2a:	189b      	adds	r3, r3, r2
 800cd2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cd30:	464b      	mov	r3, r9
 800cd32:	460a      	mov	r2, r1
 800cd34:	eb42 0303 	adc.w	r3, r2, r3
 800cd38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cd3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	67bb      	str	r3, [r7, #120]	; 0x78
 800cd46:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cd48:	f04f 0200 	mov.w	r2, #0
 800cd4c:	f04f 0300 	mov.w	r3, #0
 800cd50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cd54:	4649      	mov	r1, r9
 800cd56:	008b      	lsls	r3, r1, #2
 800cd58:	4641      	mov	r1, r8
 800cd5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cd5e:	4641      	mov	r1, r8
 800cd60:	008a      	lsls	r2, r1, #2
 800cd62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cd66:	f7f4 f90d 	bl	8000f84 <__aeabi_uldivmod>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	4b39      	ldr	r3, [pc, #228]	; (800ce54 <UART_SetConfig+0x4e4>)
 800cd70:	fba3 1302 	umull	r1, r3, r3, r2
 800cd74:	095b      	lsrs	r3, r3, #5
 800cd76:	2164      	movs	r1, #100	; 0x64
 800cd78:	fb01 f303 	mul.w	r3, r1, r3
 800cd7c:	1ad3      	subs	r3, r2, r3
 800cd7e:	011b      	lsls	r3, r3, #4
 800cd80:	3332      	adds	r3, #50	; 0x32
 800cd82:	4a34      	ldr	r2, [pc, #208]	; (800ce54 <UART_SetConfig+0x4e4>)
 800cd84:	fba2 2303 	umull	r2, r3, r2, r3
 800cd88:	095b      	lsrs	r3, r3, #5
 800cd8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd8e:	441c      	add	r4, r3
 800cd90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd94:	2200      	movs	r2, #0
 800cd96:	673b      	str	r3, [r7, #112]	; 0x70
 800cd98:	677a      	str	r2, [r7, #116]	; 0x74
 800cd9a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cd9e:	4642      	mov	r2, r8
 800cda0:	464b      	mov	r3, r9
 800cda2:	1891      	adds	r1, r2, r2
 800cda4:	60b9      	str	r1, [r7, #8]
 800cda6:	415b      	adcs	r3, r3
 800cda8:	60fb      	str	r3, [r7, #12]
 800cdaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cdae:	4641      	mov	r1, r8
 800cdb0:	1851      	adds	r1, r2, r1
 800cdb2:	6039      	str	r1, [r7, #0]
 800cdb4:	4649      	mov	r1, r9
 800cdb6:	414b      	adcs	r3, r1
 800cdb8:	607b      	str	r3, [r7, #4]
 800cdba:	f04f 0200 	mov.w	r2, #0
 800cdbe:	f04f 0300 	mov.w	r3, #0
 800cdc2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cdc6:	4659      	mov	r1, fp
 800cdc8:	00cb      	lsls	r3, r1, #3
 800cdca:	4651      	mov	r1, sl
 800cdcc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cdd0:	4651      	mov	r1, sl
 800cdd2:	00ca      	lsls	r2, r1, #3
 800cdd4:	4610      	mov	r0, r2
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	4603      	mov	r3, r0
 800cdda:	4642      	mov	r2, r8
 800cddc:	189b      	adds	r3, r3, r2
 800cdde:	66bb      	str	r3, [r7, #104]	; 0x68
 800cde0:	464b      	mov	r3, r9
 800cde2:	460a      	mov	r2, r1
 800cde4:	eb42 0303 	adc.w	r3, r2, r3
 800cde8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cdea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	663b      	str	r3, [r7, #96]	; 0x60
 800cdf4:	667a      	str	r2, [r7, #100]	; 0x64
 800cdf6:	f04f 0200 	mov.w	r2, #0
 800cdfa:	f04f 0300 	mov.w	r3, #0
 800cdfe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ce02:	4649      	mov	r1, r9
 800ce04:	008b      	lsls	r3, r1, #2
 800ce06:	4641      	mov	r1, r8
 800ce08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ce0c:	4641      	mov	r1, r8
 800ce0e:	008a      	lsls	r2, r1, #2
 800ce10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ce14:	f7f4 f8b6 	bl	8000f84 <__aeabi_uldivmod>
 800ce18:	4602      	mov	r2, r0
 800ce1a:	460b      	mov	r3, r1
 800ce1c:	4b0d      	ldr	r3, [pc, #52]	; (800ce54 <UART_SetConfig+0x4e4>)
 800ce1e:	fba3 1302 	umull	r1, r3, r3, r2
 800ce22:	095b      	lsrs	r3, r3, #5
 800ce24:	2164      	movs	r1, #100	; 0x64
 800ce26:	fb01 f303 	mul.w	r3, r1, r3
 800ce2a:	1ad3      	subs	r3, r2, r3
 800ce2c:	011b      	lsls	r3, r3, #4
 800ce2e:	3332      	adds	r3, #50	; 0x32
 800ce30:	4a08      	ldr	r2, [pc, #32]	; (800ce54 <UART_SetConfig+0x4e4>)
 800ce32:	fba2 2303 	umull	r2, r3, r2, r3
 800ce36:	095b      	lsrs	r3, r3, #5
 800ce38:	f003 020f 	and.w	r2, r3, #15
 800ce3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4422      	add	r2, r4
 800ce44:	609a      	str	r2, [r3, #8]
}
 800ce46:	bf00      	nop
 800ce48:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce52:	bf00      	nop
 800ce54:	51eb851f 	.word	0x51eb851f

0800ce58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ce58:	b084      	sub	sp, #16
 800ce5a:	b580      	push	{r7, lr}
 800ce5c:	b084      	sub	sp, #16
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	6078      	str	r0, [r7, #4]
 800ce62:	f107 001c 	add.w	r0, r7, #28
 800ce66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ce6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d122      	bne.n	800ceb6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	68db      	ldr	r3, [r3, #12]
 800ce80:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ce84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce88:	687a      	ldr	r2, [r7, #4]
 800ce8a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ce98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce9a:	2b01      	cmp	r3, #1
 800ce9c:	d105      	bne.n	800ceaa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	68db      	ldr	r3, [r3, #12]
 800cea2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f001 fbe8 	bl	800e680 <USB_CoreReset>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	73fb      	strb	r3, [r7, #15]
 800ceb4:	e01a      	b.n	800ceec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f001 fbdc 	bl	800e680 <USB_CoreReset>
 800cec8:	4603      	mov	r3, r0
 800ceca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d106      	bne.n	800cee0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ced6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	639a      	str	r2, [r3, #56]	; 0x38
 800cede:	e005      	b.n	800ceec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cee4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ceec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	d10b      	bne.n	800cf0a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	689b      	ldr	r3, [r3, #8]
 800cef6:	f043 0206 	orr.w	r2, r3, #6
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	689b      	ldr	r3, [r3, #8]
 800cf02:	f043 0220 	orr.w	r2, r3, #32
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cf0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3710      	adds	r7, #16
 800cf10:	46bd      	mov	sp, r7
 800cf12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cf16:	b004      	add	sp, #16
 800cf18:	4770      	bx	lr
	...

0800cf1c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b087      	sub	sp, #28
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	4613      	mov	r3, r2
 800cf28:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cf2a:	79fb      	ldrb	r3, [r7, #7]
 800cf2c:	2b02      	cmp	r3, #2
 800cf2e:	d165      	bne.n	800cffc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	4a41      	ldr	r2, [pc, #260]	; (800d038 <USB_SetTurnaroundTime+0x11c>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d906      	bls.n	800cf46 <USB_SetTurnaroundTime+0x2a>
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	4a40      	ldr	r2, [pc, #256]	; (800d03c <USB_SetTurnaroundTime+0x120>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d202      	bcs.n	800cf46 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cf40:	230f      	movs	r3, #15
 800cf42:	617b      	str	r3, [r7, #20]
 800cf44:	e062      	b.n	800d00c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	4a3c      	ldr	r2, [pc, #240]	; (800d03c <USB_SetTurnaroundTime+0x120>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d306      	bcc.n	800cf5c <USB_SetTurnaroundTime+0x40>
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	4a3b      	ldr	r2, [pc, #236]	; (800d040 <USB_SetTurnaroundTime+0x124>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d202      	bcs.n	800cf5c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cf56:	230e      	movs	r3, #14
 800cf58:	617b      	str	r3, [r7, #20]
 800cf5a:	e057      	b.n	800d00c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	4a38      	ldr	r2, [pc, #224]	; (800d040 <USB_SetTurnaroundTime+0x124>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d306      	bcc.n	800cf72 <USB_SetTurnaroundTime+0x56>
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	4a37      	ldr	r2, [pc, #220]	; (800d044 <USB_SetTurnaroundTime+0x128>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d202      	bcs.n	800cf72 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cf6c:	230d      	movs	r3, #13
 800cf6e:	617b      	str	r3, [r7, #20]
 800cf70:	e04c      	b.n	800d00c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	4a33      	ldr	r2, [pc, #204]	; (800d044 <USB_SetTurnaroundTime+0x128>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d306      	bcc.n	800cf88 <USB_SetTurnaroundTime+0x6c>
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	4a32      	ldr	r2, [pc, #200]	; (800d048 <USB_SetTurnaroundTime+0x12c>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d802      	bhi.n	800cf88 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cf82:	230c      	movs	r3, #12
 800cf84:	617b      	str	r3, [r7, #20]
 800cf86:	e041      	b.n	800d00c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	4a2f      	ldr	r2, [pc, #188]	; (800d048 <USB_SetTurnaroundTime+0x12c>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d906      	bls.n	800cf9e <USB_SetTurnaroundTime+0x82>
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	4a2e      	ldr	r2, [pc, #184]	; (800d04c <USB_SetTurnaroundTime+0x130>)
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d802      	bhi.n	800cf9e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cf98:	230b      	movs	r3, #11
 800cf9a:	617b      	str	r3, [r7, #20]
 800cf9c:	e036      	b.n	800d00c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	4a2a      	ldr	r2, [pc, #168]	; (800d04c <USB_SetTurnaroundTime+0x130>)
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d906      	bls.n	800cfb4 <USB_SetTurnaroundTime+0x98>
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	4a29      	ldr	r2, [pc, #164]	; (800d050 <USB_SetTurnaroundTime+0x134>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d802      	bhi.n	800cfb4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cfae:	230a      	movs	r3, #10
 800cfb0:	617b      	str	r3, [r7, #20]
 800cfb2:	e02b      	b.n	800d00c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	4a26      	ldr	r2, [pc, #152]	; (800d050 <USB_SetTurnaroundTime+0x134>)
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d906      	bls.n	800cfca <USB_SetTurnaroundTime+0xae>
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	4a25      	ldr	r2, [pc, #148]	; (800d054 <USB_SetTurnaroundTime+0x138>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d202      	bcs.n	800cfca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cfc4:	2309      	movs	r3, #9
 800cfc6:	617b      	str	r3, [r7, #20]
 800cfc8:	e020      	b.n	800d00c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	4a21      	ldr	r2, [pc, #132]	; (800d054 <USB_SetTurnaroundTime+0x138>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d306      	bcc.n	800cfe0 <USB_SetTurnaroundTime+0xc4>
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	4a20      	ldr	r2, [pc, #128]	; (800d058 <USB_SetTurnaroundTime+0x13c>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d802      	bhi.n	800cfe0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cfda:	2308      	movs	r3, #8
 800cfdc:	617b      	str	r3, [r7, #20]
 800cfde:	e015      	b.n	800d00c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	4a1d      	ldr	r2, [pc, #116]	; (800d058 <USB_SetTurnaroundTime+0x13c>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d906      	bls.n	800cff6 <USB_SetTurnaroundTime+0xda>
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	4a1c      	ldr	r2, [pc, #112]	; (800d05c <USB_SetTurnaroundTime+0x140>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d202      	bcs.n	800cff6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cff0:	2307      	movs	r3, #7
 800cff2:	617b      	str	r3, [r7, #20]
 800cff4:	e00a      	b.n	800d00c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cff6:	2306      	movs	r3, #6
 800cff8:	617b      	str	r3, [r7, #20]
 800cffa:	e007      	b.n	800d00c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800cffc:	79fb      	ldrb	r3, [r7, #7]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d102      	bne.n	800d008 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d002:	2309      	movs	r3, #9
 800d004:	617b      	str	r3, [r7, #20]
 800d006:	e001      	b.n	800d00c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d008:	2309      	movs	r3, #9
 800d00a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	68da      	ldr	r2, [r3, #12]
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	029b      	lsls	r3, r3, #10
 800d020:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d024:	431a      	orrs	r2, r3
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d02a:	2300      	movs	r3, #0
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	371c      	adds	r7, #28
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr
 800d038:	00d8acbf 	.word	0x00d8acbf
 800d03c:	00e4e1c0 	.word	0x00e4e1c0
 800d040:	00f42400 	.word	0x00f42400
 800d044:	01067380 	.word	0x01067380
 800d048:	011a499f 	.word	0x011a499f
 800d04c:	01312cff 	.word	0x01312cff
 800d050:	014ca43f 	.word	0x014ca43f
 800d054:	016e3600 	.word	0x016e3600
 800d058:	01a6ab1f 	.word	0x01a6ab1f
 800d05c:	01e84800 	.word	0x01e84800

0800d060 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	689b      	ldr	r3, [r3, #8]
 800d06c:	f043 0201 	orr.w	r2, r3, #1
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d074:	2300      	movs	r3, #0
}
 800d076:	4618      	mov	r0, r3
 800d078:	370c      	adds	r7, #12
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr

0800d082 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d082:	b480      	push	{r7}
 800d084:	b083      	sub	sp, #12
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	689b      	ldr	r3, [r3, #8]
 800d08e:	f023 0201 	bic.w	r2, r3, #1
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d096:	2300      	movs	r3, #0
}
 800d098:	4618      	mov	r0, r3
 800d09a:	370c      	adds	r7, #12
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr

0800d0a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b084      	sub	sp, #16
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	460b      	mov	r3, r1
 800d0ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	68db      	ldr	r3, [r3, #12]
 800d0b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d0c0:	78fb      	ldrb	r3, [r7, #3]
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d115      	bne.n	800d0f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	68db      	ldr	r3, [r3, #12]
 800d0ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d0d2:	2001      	movs	r0, #1
 800d0d4:	f7f8 fb28 	bl	8005728 <HAL_Delay>
      ms++;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	3301      	adds	r3, #1
 800d0dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f001 fa3f 	bl	800e562 <USB_GetMode>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	d01e      	beq.n	800d128 <USB_SetCurrentMode+0x84>
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	2b31      	cmp	r3, #49	; 0x31
 800d0ee:	d9f0      	bls.n	800d0d2 <USB_SetCurrentMode+0x2e>
 800d0f0:	e01a      	b.n	800d128 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d0f2:	78fb      	ldrb	r3, [r7, #3]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d115      	bne.n	800d124 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	68db      	ldr	r3, [r3, #12]
 800d0fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d104:	2001      	movs	r0, #1
 800d106:	f7f8 fb0f 	bl	8005728 <HAL_Delay>
      ms++;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	3301      	adds	r3, #1
 800d10e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f001 fa26 	bl	800e562 <USB_GetMode>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d005      	beq.n	800d128 <USB_SetCurrentMode+0x84>
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2b31      	cmp	r3, #49	; 0x31
 800d120:	d9f0      	bls.n	800d104 <USB_SetCurrentMode+0x60>
 800d122:	e001      	b.n	800d128 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d124:	2301      	movs	r3, #1
 800d126:	e005      	b.n	800d134 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	2b32      	cmp	r3, #50	; 0x32
 800d12c:	d101      	bne.n	800d132 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d12e:	2301      	movs	r3, #1
 800d130:	e000      	b.n	800d134 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d132:	2300      	movs	r3, #0
}
 800d134:	4618      	mov	r0, r3
 800d136:	3710      	adds	r7, #16
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d13c:	b084      	sub	sp, #16
 800d13e:	b580      	push	{r7, lr}
 800d140:	b086      	sub	sp, #24
 800d142:	af00      	add	r7, sp, #0
 800d144:	6078      	str	r0, [r7, #4]
 800d146:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d14a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d14e:	2300      	movs	r3, #0
 800d150:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d156:	2300      	movs	r3, #0
 800d158:	613b      	str	r3, [r7, #16]
 800d15a:	e009      	b.n	800d170 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d15c:	687a      	ldr	r2, [r7, #4]
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	3340      	adds	r3, #64	; 0x40
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	4413      	add	r3, r2
 800d166:	2200      	movs	r2, #0
 800d168:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	3301      	adds	r3, #1
 800d16e:	613b      	str	r3, [r7, #16]
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	2b0e      	cmp	r3, #14
 800d174:	d9f2      	bls.n	800d15c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d11c      	bne.n	800d1b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	68fa      	ldr	r2, [r7, #12]
 800d186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d18a:	f043 0302 	orr.w	r3, r3, #2
 800d18e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d194:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	601a      	str	r2, [r3, #0]
 800d1b4:	e005      	b.n	800d1c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1dc:	461a      	mov	r2, r3
 800d1de:	680b      	ldr	r3, [r1, #0]
 800d1e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d10c      	bne.n	800d202 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d104      	bne.n	800d1f8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d1ee:	2100      	movs	r1, #0
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 f965 	bl	800d4c0 <USB_SetDevSpeed>
 800d1f6:	e008      	b.n	800d20a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d1f8:	2101      	movs	r1, #1
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 f960 	bl	800d4c0 <USB_SetDevSpeed>
 800d200:	e003      	b.n	800d20a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d202:	2103      	movs	r1, #3
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f000 f95b 	bl	800d4c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d20a:	2110      	movs	r1, #16
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f000 f8f3 	bl	800d3f8 <USB_FlushTxFifo>
 800d212:	4603      	mov	r3, r0
 800d214:	2b00      	cmp	r3, #0
 800d216:	d001      	beq.n	800d21c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d218:	2301      	movs	r3, #1
 800d21a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f000 f91f 	bl	800d460 <USB_FlushRxFifo>
 800d222:	4603      	mov	r3, r0
 800d224:	2b00      	cmp	r3, #0
 800d226:	d001      	beq.n	800d22c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d228:	2301      	movs	r3, #1
 800d22a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d232:	461a      	mov	r2, r3
 800d234:	2300      	movs	r3, #0
 800d236:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d23e:	461a      	mov	r2, r3
 800d240:	2300      	movs	r3, #0
 800d242:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d24a:	461a      	mov	r2, r3
 800d24c:	2300      	movs	r3, #0
 800d24e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d250:	2300      	movs	r3, #0
 800d252:	613b      	str	r3, [r7, #16]
 800d254:	e043      	b.n	800d2de <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	015a      	lsls	r2, r3, #5
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	4413      	add	r3, r2
 800d25e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d26c:	d118      	bne.n	800d2a0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d10a      	bne.n	800d28a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	015a      	lsls	r2, r3, #5
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	4413      	add	r3, r2
 800d27c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d280:	461a      	mov	r2, r3
 800d282:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d286:	6013      	str	r3, [r2, #0]
 800d288:	e013      	b.n	800d2b2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	015a      	lsls	r2, r3, #5
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	4413      	add	r3, r2
 800d292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d296:	461a      	mov	r2, r3
 800d298:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d29c:	6013      	str	r3, [r2, #0]
 800d29e:	e008      	b.n	800d2b2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	015a      	lsls	r2, r3, #5
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	4413      	add	r3, r2
 800d2a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	015a      	lsls	r2, r3, #5
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	4413      	add	r3, r2
 800d2ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2be:	461a      	mov	r2, r3
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	015a      	lsls	r2, r3, #5
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	4413      	add	r3, r2
 800d2cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d2d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	613b      	str	r3, [r7, #16]
 800d2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e0:	693a      	ldr	r2, [r7, #16]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d3b7      	bcc.n	800d256 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	613b      	str	r3, [r7, #16]
 800d2ea:	e043      	b.n	800d374 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	015a      	lsls	r2, r3, #5
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	4413      	add	r3, r2
 800d2f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d2fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d302:	d118      	bne.n	800d336 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d10a      	bne.n	800d320 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	015a      	lsls	r2, r3, #5
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	4413      	add	r3, r2
 800d312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d316:	461a      	mov	r2, r3
 800d318:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d31c:	6013      	str	r3, [r2, #0]
 800d31e:	e013      	b.n	800d348 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	015a      	lsls	r2, r3, #5
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	4413      	add	r3, r2
 800d328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d32c:	461a      	mov	r2, r3
 800d32e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d332:	6013      	str	r3, [r2, #0]
 800d334:	e008      	b.n	800d348 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	015a      	lsls	r2, r3, #5
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	4413      	add	r3, r2
 800d33e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d342:	461a      	mov	r2, r3
 800d344:	2300      	movs	r3, #0
 800d346:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	015a      	lsls	r2, r3, #5
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	4413      	add	r3, r2
 800d350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d354:	461a      	mov	r2, r3
 800d356:	2300      	movs	r3, #0
 800d358:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	015a      	lsls	r2, r3, #5
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	4413      	add	r3, r2
 800d362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d366:	461a      	mov	r2, r3
 800d368:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d36c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	3301      	adds	r3, #1
 800d372:	613b      	str	r3, [r7, #16]
 800d374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d376:	693a      	ldr	r2, [r7, #16]
 800d378:	429a      	cmp	r2, r3
 800d37a:	d3b7      	bcc.n	800d2ec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d382:	691b      	ldr	r3, [r3, #16]
 800d384:	68fa      	ldr	r2, [r7, #12]
 800d386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d38a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d38e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2200      	movs	r2, #0
 800d394:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d39c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d105      	bne.n	800d3b0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	699b      	ldr	r3, [r3, #24]
 800d3a8:	f043 0210 	orr.w	r2, r3, #16
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	699a      	ldr	r2, [r3, #24]
 800d3b4:	4b0f      	ldr	r3, [pc, #60]	; (800d3f4 <USB_DevInit+0x2b8>)
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	687a      	ldr	r2, [r7, #4]
 800d3ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d3bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d005      	beq.n	800d3ce <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	699b      	ldr	r3, [r3, #24]
 800d3c6:	f043 0208 	orr.w	r2, r3, #8
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d3ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3d0:	2b01      	cmp	r3, #1
 800d3d2:	d107      	bne.n	800d3e4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	699b      	ldr	r3, [r3, #24]
 800d3d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d3dc:	f043 0304 	orr.w	r3, r3, #4
 800d3e0:	687a      	ldr	r2, [r7, #4]
 800d3e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d3e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3718      	adds	r7, #24
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d3f0:	b004      	add	sp, #16
 800d3f2:	4770      	bx	lr
 800d3f4:	803c3800 	.word	0x803c3800

0800d3f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d402:	2300      	movs	r3, #0
 800d404:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	3301      	adds	r3, #1
 800d40a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	4a13      	ldr	r2, [pc, #76]	; (800d45c <USB_FlushTxFifo+0x64>)
 800d410:	4293      	cmp	r3, r2
 800d412:	d901      	bls.n	800d418 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d414:	2303      	movs	r3, #3
 800d416:	e01b      	b.n	800d450 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	691b      	ldr	r3, [r3, #16]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	daf2      	bge.n	800d406 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d420:	2300      	movs	r3, #0
 800d422:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	019b      	lsls	r3, r3, #6
 800d428:	f043 0220 	orr.w	r2, r3, #32
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	3301      	adds	r3, #1
 800d434:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	4a08      	ldr	r2, [pc, #32]	; (800d45c <USB_FlushTxFifo+0x64>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d901      	bls.n	800d442 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d43e:	2303      	movs	r3, #3
 800d440:	e006      	b.n	800d450 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	691b      	ldr	r3, [r3, #16]
 800d446:	f003 0320 	and.w	r3, r3, #32
 800d44a:	2b20      	cmp	r3, #32
 800d44c:	d0f0      	beq.n	800d430 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d44e:	2300      	movs	r3, #0
}
 800d450:	4618      	mov	r0, r3
 800d452:	3714      	adds	r7, #20
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr
 800d45c:	00030d40 	.word	0x00030d40

0800d460 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d460:	b480      	push	{r7}
 800d462:	b085      	sub	sp, #20
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d468:	2300      	movs	r3, #0
 800d46a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	3301      	adds	r3, #1
 800d470:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	4a11      	ldr	r2, [pc, #68]	; (800d4bc <USB_FlushRxFifo+0x5c>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d901      	bls.n	800d47e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d47a:	2303      	movs	r3, #3
 800d47c:	e018      	b.n	800d4b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	691b      	ldr	r3, [r3, #16]
 800d482:	2b00      	cmp	r3, #0
 800d484:	daf2      	bge.n	800d46c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d486:	2300      	movs	r3, #0
 800d488:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2210      	movs	r2, #16
 800d48e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	3301      	adds	r3, #1
 800d494:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	4a08      	ldr	r2, [pc, #32]	; (800d4bc <USB_FlushRxFifo+0x5c>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d901      	bls.n	800d4a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d49e:	2303      	movs	r3, #3
 800d4a0:	e006      	b.n	800d4b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	691b      	ldr	r3, [r3, #16]
 800d4a6:	f003 0310 	and.w	r3, r3, #16
 800d4aa:	2b10      	cmp	r3, #16
 800d4ac:	d0f0      	beq.n	800d490 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d4ae:	2300      	movs	r3, #0
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3714      	adds	r7, #20
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr
 800d4bc:	00030d40 	.word	0x00030d40

0800d4c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b085      	sub	sp, #20
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	78fb      	ldrb	r3, [r7, #3]
 800d4da:	68f9      	ldr	r1, [r7, #12]
 800d4dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4e0:	4313      	orrs	r3, r2
 800d4e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d4e4:	2300      	movs	r3, #0
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3714      	adds	r7, #20
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f0:	4770      	bx	lr

0800d4f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d4f2:	b480      	push	{r7}
 800d4f4:	b087      	sub	sp, #28
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d504:	689b      	ldr	r3, [r3, #8]
 800d506:	f003 0306 	and.w	r3, r3, #6
 800d50a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d102      	bne.n	800d518 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d512:	2300      	movs	r3, #0
 800d514:	75fb      	strb	r3, [r7, #23]
 800d516:	e00a      	b.n	800d52e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2b02      	cmp	r3, #2
 800d51c:	d002      	beq.n	800d524 <USB_GetDevSpeed+0x32>
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2b06      	cmp	r3, #6
 800d522:	d102      	bne.n	800d52a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d524:	2302      	movs	r3, #2
 800d526:	75fb      	strb	r3, [r7, #23]
 800d528:	e001      	b.n	800d52e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d52a:	230f      	movs	r3, #15
 800d52c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d52e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d530:	4618      	mov	r0, r3
 800d532:	371c      	adds	r7, #28
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d53c:	b480      	push	{r7}
 800d53e:	b085      	sub	sp, #20
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	781b      	ldrb	r3, [r3, #0]
 800d54e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	785b      	ldrb	r3, [r3, #1]
 800d554:	2b01      	cmp	r3, #1
 800d556:	d13a      	bne.n	800d5ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d55e:	69da      	ldr	r2, [r3, #28]
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	f003 030f 	and.w	r3, r3, #15
 800d568:	2101      	movs	r1, #1
 800d56a:	fa01 f303 	lsl.w	r3, r1, r3
 800d56e:	b29b      	uxth	r3, r3
 800d570:	68f9      	ldr	r1, [r7, #12]
 800d572:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d576:	4313      	orrs	r3, r2
 800d578:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	015a      	lsls	r2, r3, #5
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	4413      	add	r3, r2
 800d582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d155      	bne.n	800d63c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	015a      	lsls	r2, r3, #5
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	4413      	add	r3, r2
 800d598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d59c:	681a      	ldr	r2, [r3, #0]
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	791b      	ldrb	r3, [r3, #4]
 800d5aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d5ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	059b      	lsls	r3, r3, #22
 800d5b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d5b4:	4313      	orrs	r3, r2
 800d5b6:	68ba      	ldr	r2, [r7, #8]
 800d5b8:	0151      	lsls	r1, r2, #5
 800d5ba:	68fa      	ldr	r2, [r7, #12]
 800d5bc:	440a      	add	r2, r1
 800d5be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d5ca:	6013      	str	r3, [r2, #0]
 800d5cc:	e036      	b.n	800d63c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5d4:	69da      	ldr	r2, [r3, #28]
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	f003 030f 	and.w	r3, r3, #15
 800d5de:	2101      	movs	r1, #1
 800d5e0:	fa01 f303 	lsl.w	r3, r1, r3
 800d5e4:	041b      	lsls	r3, r3, #16
 800d5e6:	68f9      	ldr	r1, [r7, #12]
 800d5e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d5ec:	4313      	orrs	r3, r2
 800d5ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	015a      	lsls	r2, r3, #5
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	4413      	add	r3, r2
 800d5f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d602:	2b00      	cmp	r3, #0
 800d604:	d11a      	bne.n	800d63c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	015a      	lsls	r2, r3, #5
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	4413      	add	r3, r2
 800d60e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d612:	681a      	ldr	r2, [r3, #0]
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	68db      	ldr	r3, [r3, #12]
 800d618:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	791b      	ldrb	r3, [r3, #4]
 800d620:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d622:	430b      	orrs	r3, r1
 800d624:	4313      	orrs	r3, r2
 800d626:	68ba      	ldr	r2, [r7, #8]
 800d628:	0151      	lsls	r1, r2, #5
 800d62a:	68fa      	ldr	r2, [r7, #12]
 800d62c:	440a      	add	r2, r1
 800d62e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d63a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d63c:	2300      	movs	r3, #0
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3714      	adds	r7, #20
 800d642:	46bd      	mov	sp, r7
 800d644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d648:	4770      	bx	lr
	...

0800d64c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b085      	sub	sp, #20
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	785b      	ldrb	r3, [r3, #1]
 800d664:	2b01      	cmp	r3, #1
 800d666:	d161      	bne.n	800d72c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	015a      	lsls	r2, r3, #5
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	4413      	add	r3, r2
 800d670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d67a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d67e:	d11f      	bne.n	800d6c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	015a      	lsls	r2, r3, #5
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	4413      	add	r3, r2
 800d688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	68ba      	ldr	r2, [r7, #8]
 800d690:	0151      	lsls	r1, r2, #5
 800d692:	68fa      	ldr	r2, [r7, #12]
 800d694:	440a      	add	r2, r1
 800d696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d69a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d69e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	015a      	lsls	r2, r3, #5
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	4413      	add	r3, r2
 800d6a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	68ba      	ldr	r2, [r7, #8]
 800d6b0:	0151      	lsls	r1, r2, #5
 800d6b2:	68fa      	ldr	r2, [r7, #12]
 800d6b4:	440a      	add	r2, r1
 800d6b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d6be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	f003 030f 	and.w	r3, r3, #15
 800d6d0:	2101      	movs	r1, #1
 800d6d2:	fa01 f303 	lsl.w	r3, r1, r3
 800d6d6:	b29b      	uxth	r3, r3
 800d6d8:	43db      	mvns	r3, r3
 800d6da:	68f9      	ldr	r1, [r7, #12]
 800d6dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6e0:	4013      	ands	r3, r2
 800d6e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6ea:	69da      	ldr	r2, [r3, #28]
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	f003 030f 	and.w	r3, r3, #15
 800d6f4:	2101      	movs	r1, #1
 800d6f6:	fa01 f303 	lsl.w	r3, r1, r3
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	43db      	mvns	r3, r3
 800d6fe:	68f9      	ldr	r1, [r7, #12]
 800d700:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d704:	4013      	ands	r3, r2
 800d706:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	015a      	lsls	r2, r3, #5
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	4413      	add	r3, r2
 800d710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d714:	681a      	ldr	r2, [r3, #0]
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	0159      	lsls	r1, r3, #5
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	440b      	add	r3, r1
 800d71e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d722:	4619      	mov	r1, r3
 800d724:	4b35      	ldr	r3, [pc, #212]	; (800d7fc <USB_DeactivateEndpoint+0x1b0>)
 800d726:	4013      	ands	r3, r2
 800d728:	600b      	str	r3, [r1, #0]
 800d72a:	e060      	b.n	800d7ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	015a      	lsls	r2, r3, #5
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	4413      	add	r3, r2
 800d734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d73e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d742:	d11f      	bne.n	800d784 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	015a      	lsls	r2, r3, #5
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	4413      	add	r3, r2
 800d74c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	68ba      	ldr	r2, [r7, #8]
 800d754:	0151      	lsls	r1, r2, #5
 800d756:	68fa      	ldr	r2, [r7, #12]
 800d758:	440a      	add	r2, r1
 800d75a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d75e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d762:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	015a      	lsls	r2, r3, #5
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	4413      	add	r3, r2
 800d76c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	68ba      	ldr	r2, [r7, #8]
 800d774:	0151      	lsls	r1, r2, #5
 800d776:	68fa      	ldr	r2, [r7, #12]
 800d778:	440a      	add	r2, r1
 800d77a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d77e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d782:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d78a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	f003 030f 	and.w	r3, r3, #15
 800d794:	2101      	movs	r1, #1
 800d796:	fa01 f303 	lsl.w	r3, r1, r3
 800d79a:	041b      	lsls	r3, r3, #16
 800d79c:	43db      	mvns	r3, r3
 800d79e:	68f9      	ldr	r1, [r7, #12]
 800d7a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d7a4:	4013      	ands	r3, r2
 800d7a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7ae:	69da      	ldr	r2, [r3, #28]
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	781b      	ldrb	r3, [r3, #0]
 800d7b4:	f003 030f 	and.w	r3, r3, #15
 800d7b8:	2101      	movs	r1, #1
 800d7ba:	fa01 f303 	lsl.w	r3, r1, r3
 800d7be:	041b      	lsls	r3, r3, #16
 800d7c0:	43db      	mvns	r3, r3
 800d7c2:	68f9      	ldr	r1, [r7, #12]
 800d7c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d7c8:	4013      	ands	r3, r2
 800d7ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	015a      	lsls	r2, r3, #5
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	4413      	add	r3, r2
 800d7d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7d8:	681a      	ldr	r2, [r3, #0]
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	0159      	lsls	r1, r3, #5
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	440b      	add	r3, r1
 800d7e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	4b05      	ldr	r3, [pc, #20]	; (800d800 <USB_DeactivateEndpoint+0x1b4>)
 800d7ea:	4013      	ands	r3, r2
 800d7ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d7ee:	2300      	movs	r3, #0
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3714      	adds	r7, #20
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr
 800d7fc:	ec337800 	.word	0xec337800
 800d800:	eff37800 	.word	0xeff37800

0800d804 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b08a      	sub	sp, #40	; 0x28
 800d808:	af02      	add	r7, sp, #8
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	60b9      	str	r1, [r7, #8]
 800d80e:	4613      	mov	r3, r2
 800d810:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	785b      	ldrb	r3, [r3, #1]
 800d820:	2b01      	cmp	r3, #1
 800d822:	f040 815c 	bne.w	800dade <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	699b      	ldr	r3, [r3, #24]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d132      	bne.n	800d894 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	015a      	lsls	r2, r3, #5
 800d832:	69fb      	ldr	r3, [r7, #28]
 800d834:	4413      	add	r3, r2
 800d836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d83a:	691b      	ldr	r3, [r3, #16]
 800d83c:	69ba      	ldr	r2, [r7, #24]
 800d83e:	0151      	lsls	r1, r2, #5
 800d840:	69fa      	ldr	r2, [r7, #28]
 800d842:	440a      	add	r2, r1
 800d844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d848:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d84c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d850:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d852:	69bb      	ldr	r3, [r7, #24]
 800d854:	015a      	lsls	r2, r3, #5
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	4413      	add	r3, r2
 800d85a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d85e:	691b      	ldr	r3, [r3, #16]
 800d860:	69ba      	ldr	r2, [r7, #24]
 800d862:	0151      	lsls	r1, r2, #5
 800d864:	69fa      	ldr	r2, [r7, #28]
 800d866:	440a      	add	r2, r1
 800d868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d86c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d870:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	015a      	lsls	r2, r3, #5
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	4413      	add	r3, r2
 800d87a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d87e:	691b      	ldr	r3, [r3, #16]
 800d880:	69ba      	ldr	r2, [r7, #24]
 800d882:	0151      	lsls	r1, r2, #5
 800d884:	69fa      	ldr	r2, [r7, #28]
 800d886:	440a      	add	r2, r1
 800d888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d88c:	0cdb      	lsrs	r3, r3, #19
 800d88e:	04db      	lsls	r3, r3, #19
 800d890:	6113      	str	r3, [r2, #16]
 800d892:	e074      	b.n	800d97e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d894:	69bb      	ldr	r3, [r7, #24]
 800d896:	015a      	lsls	r2, r3, #5
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	4413      	add	r3, r2
 800d89c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8a0:	691b      	ldr	r3, [r3, #16]
 800d8a2:	69ba      	ldr	r2, [r7, #24]
 800d8a4:	0151      	lsls	r1, r2, #5
 800d8a6:	69fa      	ldr	r2, [r7, #28]
 800d8a8:	440a      	add	r2, r1
 800d8aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8ae:	0cdb      	lsrs	r3, r3, #19
 800d8b0:	04db      	lsls	r3, r3, #19
 800d8b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	015a      	lsls	r2, r3, #5
 800d8b8:	69fb      	ldr	r3, [r7, #28]
 800d8ba:	4413      	add	r3, r2
 800d8bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8c0:	691b      	ldr	r3, [r3, #16]
 800d8c2:	69ba      	ldr	r2, [r7, #24]
 800d8c4:	0151      	lsls	r1, r2, #5
 800d8c6:	69fa      	ldr	r2, [r7, #28]
 800d8c8:	440a      	add	r2, r1
 800d8ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d8d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d8d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d8d8:	69bb      	ldr	r3, [r7, #24]
 800d8da:	015a      	lsls	r2, r3, #5
 800d8dc:	69fb      	ldr	r3, [r7, #28]
 800d8de:	4413      	add	r3, r2
 800d8e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8e4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	6999      	ldr	r1, [r3, #24]
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	68db      	ldr	r3, [r3, #12]
 800d8ee:	440b      	add	r3, r1
 800d8f0:	1e59      	subs	r1, r3, #1
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	fbb1 f3f3 	udiv	r3, r1, r3
 800d8fa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d8fc:	4b9d      	ldr	r3, [pc, #628]	; (800db74 <USB_EPStartXfer+0x370>)
 800d8fe:	400b      	ands	r3, r1
 800d900:	69b9      	ldr	r1, [r7, #24]
 800d902:	0148      	lsls	r0, r1, #5
 800d904:	69f9      	ldr	r1, [r7, #28]
 800d906:	4401      	add	r1, r0
 800d908:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d90c:	4313      	orrs	r3, r2
 800d90e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d910:	69bb      	ldr	r3, [r7, #24]
 800d912:	015a      	lsls	r2, r3, #5
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	4413      	add	r3, r2
 800d918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d91c:	691a      	ldr	r2, [r3, #16]
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	699b      	ldr	r3, [r3, #24]
 800d922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d926:	69b9      	ldr	r1, [r7, #24]
 800d928:	0148      	lsls	r0, r1, #5
 800d92a:	69f9      	ldr	r1, [r7, #28]
 800d92c:	4401      	add	r1, r0
 800d92e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d932:	4313      	orrs	r3, r2
 800d934:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	791b      	ldrb	r3, [r3, #4]
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	d11f      	bne.n	800d97e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d93e:	69bb      	ldr	r3, [r7, #24]
 800d940:	015a      	lsls	r2, r3, #5
 800d942:	69fb      	ldr	r3, [r7, #28]
 800d944:	4413      	add	r3, r2
 800d946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d94a:	691b      	ldr	r3, [r3, #16]
 800d94c:	69ba      	ldr	r2, [r7, #24]
 800d94e:	0151      	lsls	r1, r2, #5
 800d950:	69fa      	ldr	r2, [r7, #28]
 800d952:	440a      	add	r2, r1
 800d954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d958:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d95c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d95e:	69bb      	ldr	r3, [r7, #24]
 800d960:	015a      	lsls	r2, r3, #5
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	4413      	add	r3, r2
 800d966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d96a:	691b      	ldr	r3, [r3, #16]
 800d96c:	69ba      	ldr	r2, [r7, #24]
 800d96e:	0151      	lsls	r1, r2, #5
 800d970:	69fa      	ldr	r2, [r7, #28]
 800d972:	440a      	add	r2, r1
 800d974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d978:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d97c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d97e:	79fb      	ldrb	r3, [r7, #7]
 800d980:	2b01      	cmp	r3, #1
 800d982:	d14b      	bne.n	800da1c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	695b      	ldr	r3, [r3, #20]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d009      	beq.n	800d9a0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d98c:	69bb      	ldr	r3, [r7, #24]
 800d98e:	015a      	lsls	r2, r3, #5
 800d990:	69fb      	ldr	r3, [r7, #28]
 800d992:	4413      	add	r3, r2
 800d994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d998:	461a      	mov	r2, r3
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	695b      	ldr	r3, [r3, #20]
 800d99e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	791b      	ldrb	r3, [r3, #4]
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d128      	bne.n	800d9fa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d9a8:	69fb      	ldr	r3, [r7, #28]
 800d9aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9ae:	689b      	ldr	r3, [r3, #8]
 800d9b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d110      	bne.n	800d9da <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d9b8:	69bb      	ldr	r3, [r7, #24]
 800d9ba:	015a      	lsls	r2, r3, #5
 800d9bc:	69fb      	ldr	r3, [r7, #28]
 800d9be:	4413      	add	r3, r2
 800d9c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	69ba      	ldr	r2, [r7, #24]
 800d9c8:	0151      	lsls	r1, r2, #5
 800d9ca:	69fa      	ldr	r2, [r7, #28]
 800d9cc:	440a      	add	r2, r1
 800d9ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d9d6:	6013      	str	r3, [r2, #0]
 800d9d8:	e00f      	b.n	800d9fa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d9da:	69bb      	ldr	r3, [r7, #24]
 800d9dc:	015a      	lsls	r2, r3, #5
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	4413      	add	r3, r2
 800d9e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	69ba      	ldr	r2, [r7, #24]
 800d9ea:	0151      	lsls	r1, r2, #5
 800d9ec:	69fa      	ldr	r2, [r7, #28]
 800d9ee:	440a      	add	r2, r1
 800d9f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	015a      	lsls	r2, r3, #5
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	4413      	add	r3, r2
 800da02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	69ba      	ldr	r2, [r7, #24]
 800da0a:	0151      	lsls	r1, r2, #5
 800da0c:	69fa      	ldr	r2, [r7, #28]
 800da0e:	440a      	add	r2, r1
 800da10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800da18:	6013      	str	r3, [r2, #0]
 800da1a:	e133      	b.n	800dc84 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800da1c:	69bb      	ldr	r3, [r7, #24]
 800da1e:	015a      	lsls	r2, r3, #5
 800da20:	69fb      	ldr	r3, [r7, #28]
 800da22:	4413      	add	r3, r2
 800da24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	69ba      	ldr	r2, [r7, #24]
 800da2c:	0151      	lsls	r1, r2, #5
 800da2e:	69fa      	ldr	r2, [r7, #28]
 800da30:	440a      	add	r2, r1
 800da32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800da3a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	791b      	ldrb	r3, [r3, #4]
 800da40:	2b01      	cmp	r3, #1
 800da42:	d015      	beq.n	800da70 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	699b      	ldr	r3, [r3, #24]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	f000 811b 	beq.w	800dc84 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800da4e:	69fb      	ldr	r3, [r7, #28]
 800da50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	f003 030f 	and.w	r3, r3, #15
 800da5e:	2101      	movs	r1, #1
 800da60:	fa01 f303 	lsl.w	r3, r1, r3
 800da64:	69f9      	ldr	r1, [r7, #28]
 800da66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800da6a:	4313      	orrs	r3, r2
 800da6c:	634b      	str	r3, [r1, #52]	; 0x34
 800da6e:	e109      	b.n	800dc84 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800da70:	69fb      	ldr	r3, [r7, #28]
 800da72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da76:	689b      	ldr	r3, [r3, #8]
 800da78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d110      	bne.n	800daa2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800da80:	69bb      	ldr	r3, [r7, #24]
 800da82:	015a      	lsls	r2, r3, #5
 800da84:	69fb      	ldr	r3, [r7, #28]
 800da86:	4413      	add	r3, r2
 800da88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	69ba      	ldr	r2, [r7, #24]
 800da90:	0151      	lsls	r1, r2, #5
 800da92:	69fa      	ldr	r2, [r7, #28]
 800da94:	440a      	add	r2, r1
 800da96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800da9e:	6013      	str	r3, [r2, #0]
 800daa0:	e00f      	b.n	800dac2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800daa2:	69bb      	ldr	r3, [r7, #24]
 800daa4:	015a      	lsls	r2, r3, #5
 800daa6:	69fb      	ldr	r3, [r7, #28]
 800daa8:	4413      	add	r3, r2
 800daaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	69ba      	ldr	r2, [r7, #24]
 800dab2:	0151      	lsls	r1, r2, #5
 800dab4:	69fa      	ldr	r2, [r7, #28]
 800dab6:	440a      	add	r2, r1
 800dab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dabc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dac0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	6919      	ldr	r1, [r3, #16]
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	781a      	ldrb	r2, [r3, #0]
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	699b      	ldr	r3, [r3, #24]
 800dace:	b298      	uxth	r0, r3
 800dad0:	79fb      	ldrb	r3, [r7, #7]
 800dad2:	9300      	str	r3, [sp, #0]
 800dad4:	4603      	mov	r3, r0
 800dad6:	68f8      	ldr	r0, [r7, #12]
 800dad8:	f000 fade 	bl	800e098 <USB_WritePacket>
 800dadc:	e0d2      	b.n	800dc84 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dade:	69bb      	ldr	r3, [r7, #24]
 800dae0:	015a      	lsls	r2, r3, #5
 800dae2:	69fb      	ldr	r3, [r7, #28]
 800dae4:	4413      	add	r3, r2
 800dae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daea:	691b      	ldr	r3, [r3, #16]
 800daec:	69ba      	ldr	r2, [r7, #24]
 800daee:	0151      	lsls	r1, r2, #5
 800daf0:	69fa      	ldr	r2, [r7, #28]
 800daf2:	440a      	add	r2, r1
 800daf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800daf8:	0cdb      	lsrs	r3, r3, #19
 800dafa:	04db      	lsls	r3, r3, #19
 800dafc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dafe:	69bb      	ldr	r3, [r7, #24]
 800db00:	015a      	lsls	r2, r3, #5
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	4413      	add	r3, r2
 800db06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db0a:	691b      	ldr	r3, [r3, #16]
 800db0c:	69ba      	ldr	r2, [r7, #24]
 800db0e:	0151      	lsls	r1, r2, #5
 800db10:	69fa      	ldr	r2, [r7, #28]
 800db12:	440a      	add	r2, r1
 800db14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800db1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800db20:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	699b      	ldr	r3, [r3, #24]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d126      	bne.n	800db78 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800db2a:	69bb      	ldr	r3, [r7, #24]
 800db2c:	015a      	lsls	r2, r3, #5
 800db2e:	69fb      	ldr	r3, [r7, #28]
 800db30:	4413      	add	r3, r2
 800db32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db36:	691a      	ldr	r2, [r3, #16]
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800db40:	69b9      	ldr	r1, [r7, #24]
 800db42:	0148      	lsls	r0, r1, #5
 800db44:	69f9      	ldr	r1, [r7, #28]
 800db46:	4401      	add	r1, r0
 800db48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800db4c:	4313      	orrs	r3, r2
 800db4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800db50:	69bb      	ldr	r3, [r7, #24]
 800db52:	015a      	lsls	r2, r3, #5
 800db54:	69fb      	ldr	r3, [r7, #28]
 800db56:	4413      	add	r3, r2
 800db58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db5c:	691b      	ldr	r3, [r3, #16]
 800db5e:	69ba      	ldr	r2, [r7, #24]
 800db60:	0151      	lsls	r1, r2, #5
 800db62:	69fa      	ldr	r2, [r7, #28]
 800db64:	440a      	add	r2, r1
 800db66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800db6e:	6113      	str	r3, [r2, #16]
 800db70:	e03a      	b.n	800dbe8 <USB_EPStartXfer+0x3e4>
 800db72:	bf00      	nop
 800db74:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	699a      	ldr	r2, [r3, #24]
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	68db      	ldr	r3, [r3, #12]
 800db80:	4413      	add	r3, r2
 800db82:	1e5a      	subs	r2, r3, #1
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	68db      	ldr	r3, [r3, #12]
 800db88:	fbb2 f3f3 	udiv	r3, r2, r3
 800db8c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	68db      	ldr	r3, [r3, #12]
 800db92:	8afa      	ldrh	r2, [r7, #22]
 800db94:	fb03 f202 	mul.w	r2, r3, r2
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800db9c:	69bb      	ldr	r3, [r7, #24]
 800db9e:	015a      	lsls	r2, r3, #5
 800dba0:	69fb      	ldr	r3, [r7, #28]
 800dba2:	4413      	add	r3, r2
 800dba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dba8:	691a      	ldr	r2, [r3, #16]
 800dbaa:	8afb      	ldrh	r3, [r7, #22]
 800dbac:	04d9      	lsls	r1, r3, #19
 800dbae:	4b38      	ldr	r3, [pc, #224]	; (800dc90 <USB_EPStartXfer+0x48c>)
 800dbb0:	400b      	ands	r3, r1
 800dbb2:	69b9      	ldr	r1, [r7, #24]
 800dbb4:	0148      	lsls	r0, r1, #5
 800dbb6:	69f9      	ldr	r1, [r7, #28]
 800dbb8:	4401      	add	r1, r0
 800dbba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dbbe:	4313      	orrs	r3, r2
 800dbc0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800dbc2:	69bb      	ldr	r3, [r7, #24]
 800dbc4:	015a      	lsls	r2, r3, #5
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	4413      	add	r3, r2
 800dbca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbce:	691a      	ldr	r2, [r3, #16]
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	69db      	ldr	r3, [r3, #28]
 800dbd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dbd8:	69b9      	ldr	r1, [r7, #24]
 800dbda:	0148      	lsls	r0, r1, #5
 800dbdc:	69f9      	ldr	r1, [r7, #28]
 800dbde:	4401      	add	r1, r0
 800dbe0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dbe4:	4313      	orrs	r3, r2
 800dbe6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800dbe8:	79fb      	ldrb	r3, [r7, #7]
 800dbea:	2b01      	cmp	r3, #1
 800dbec:	d10d      	bne.n	800dc0a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	691b      	ldr	r3, [r3, #16]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d009      	beq.n	800dc0a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	6919      	ldr	r1, [r3, #16]
 800dbfa:	69bb      	ldr	r3, [r7, #24]
 800dbfc:	015a      	lsls	r2, r3, #5
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	4413      	add	r3, r2
 800dc02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc06:	460a      	mov	r2, r1
 800dc08:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	791b      	ldrb	r3, [r3, #4]
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d128      	bne.n	800dc64 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dc12:	69fb      	ldr	r3, [r7, #28]
 800dc14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc18:	689b      	ldr	r3, [r3, #8]
 800dc1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d110      	bne.n	800dc44 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800dc22:	69bb      	ldr	r3, [r7, #24]
 800dc24:	015a      	lsls	r2, r3, #5
 800dc26:	69fb      	ldr	r3, [r7, #28]
 800dc28:	4413      	add	r3, r2
 800dc2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	69ba      	ldr	r2, [r7, #24]
 800dc32:	0151      	lsls	r1, r2, #5
 800dc34:	69fa      	ldr	r2, [r7, #28]
 800dc36:	440a      	add	r2, r1
 800dc38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc40:	6013      	str	r3, [r2, #0]
 800dc42:	e00f      	b.n	800dc64 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800dc44:	69bb      	ldr	r3, [r7, #24]
 800dc46:	015a      	lsls	r2, r3, #5
 800dc48:	69fb      	ldr	r3, [r7, #28]
 800dc4a:	4413      	add	r3, r2
 800dc4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	69ba      	ldr	r2, [r7, #24]
 800dc54:	0151      	lsls	r1, r2, #5
 800dc56:	69fa      	ldr	r2, [r7, #28]
 800dc58:	440a      	add	r2, r1
 800dc5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dc64:	69bb      	ldr	r3, [r7, #24]
 800dc66:	015a      	lsls	r2, r3, #5
 800dc68:	69fb      	ldr	r3, [r7, #28]
 800dc6a:	4413      	add	r3, r2
 800dc6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	69ba      	ldr	r2, [r7, #24]
 800dc74:	0151      	lsls	r1, r2, #5
 800dc76:	69fa      	ldr	r2, [r7, #28]
 800dc78:	440a      	add	r2, r1
 800dc7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dc82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dc84:	2300      	movs	r3, #0
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3720      	adds	r7, #32
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	1ff80000 	.word	0x1ff80000

0800dc94 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b087      	sub	sp, #28
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	4613      	mov	r3, r2
 800dca0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	785b      	ldrb	r3, [r3, #1]
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	f040 80ce 	bne.w	800de52 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	699b      	ldr	r3, [r3, #24]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d132      	bne.n	800dd24 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	015a      	lsls	r2, r3, #5
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	4413      	add	r3, r2
 800dcc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcca:	691b      	ldr	r3, [r3, #16]
 800dccc:	693a      	ldr	r2, [r7, #16]
 800dcce:	0151      	lsls	r1, r2, #5
 800dcd0:	697a      	ldr	r2, [r7, #20]
 800dcd2:	440a      	add	r2, r1
 800dcd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dcdc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dce0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	015a      	lsls	r2, r3, #5
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	4413      	add	r3, r2
 800dcea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcee:	691b      	ldr	r3, [r3, #16]
 800dcf0:	693a      	ldr	r2, [r7, #16]
 800dcf2:	0151      	lsls	r1, r2, #5
 800dcf4:	697a      	ldr	r2, [r7, #20]
 800dcf6:	440a      	add	r2, r1
 800dcf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	015a      	lsls	r2, r3, #5
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	4413      	add	r3, r2
 800dd0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd0e:	691b      	ldr	r3, [r3, #16]
 800dd10:	693a      	ldr	r2, [r7, #16]
 800dd12:	0151      	lsls	r1, r2, #5
 800dd14:	697a      	ldr	r2, [r7, #20]
 800dd16:	440a      	add	r2, r1
 800dd18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd1c:	0cdb      	lsrs	r3, r3, #19
 800dd1e:	04db      	lsls	r3, r3, #19
 800dd20:	6113      	str	r3, [r2, #16]
 800dd22:	e04e      	b.n	800ddc2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	015a      	lsls	r2, r3, #5
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	4413      	add	r3, r2
 800dd2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd30:	691b      	ldr	r3, [r3, #16]
 800dd32:	693a      	ldr	r2, [r7, #16]
 800dd34:	0151      	lsls	r1, r2, #5
 800dd36:	697a      	ldr	r2, [r7, #20]
 800dd38:	440a      	add	r2, r1
 800dd3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd3e:	0cdb      	lsrs	r3, r3, #19
 800dd40:	04db      	lsls	r3, r3, #19
 800dd42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	015a      	lsls	r2, r3, #5
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	4413      	add	r3, r2
 800dd4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd50:	691b      	ldr	r3, [r3, #16]
 800dd52:	693a      	ldr	r2, [r7, #16]
 800dd54:	0151      	lsls	r1, r2, #5
 800dd56:	697a      	ldr	r2, [r7, #20]
 800dd58:	440a      	add	r2, r1
 800dd5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dd62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dd66:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	699a      	ldr	r2, [r3, #24]
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	68db      	ldr	r3, [r3, #12]
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d903      	bls.n	800dd7c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	68da      	ldr	r2, [r3, #12]
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	015a      	lsls	r2, r3, #5
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	4413      	add	r3, r2
 800dd84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd88:	691b      	ldr	r3, [r3, #16]
 800dd8a:	693a      	ldr	r2, [r7, #16]
 800dd8c:	0151      	lsls	r1, r2, #5
 800dd8e:	697a      	ldr	r2, [r7, #20]
 800dd90:	440a      	add	r2, r1
 800dd92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	015a      	lsls	r2, r3, #5
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	4413      	add	r3, r2
 800dda4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dda8:	691a      	ldr	r2, [r3, #16]
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	699b      	ldr	r3, [r3, #24]
 800ddae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ddb2:	6939      	ldr	r1, [r7, #16]
 800ddb4:	0148      	lsls	r0, r1, #5
 800ddb6:	6979      	ldr	r1, [r7, #20]
 800ddb8:	4401      	add	r1, r0
 800ddba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ddbe:	4313      	orrs	r3, r2
 800ddc0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ddc2:	79fb      	ldrb	r3, [r7, #7]
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d11e      	bne.n	800de06 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	695b      	ldr	r3, [r3, #20]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d009      	beq.n	800dde4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	015a      	lsls	r2, r3, #5
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	4413      	add	r3, r2
 800ddd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dddc:	461a      	mov	r2, r3
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	695b      	ldr	r3, [r3, #20]
 800dde2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	015a      	lsls	r2, r3, #5
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	4413      	add	r3, r2
 800ddec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	693a      	ldr	r2, [r7, #16]
 800ddf4:	0151      	lsls	r1, r2, #5
 800ddf6:	697a      	ldr	r2, [r7, #20]
 800ddf8:	440a      	add	r2, r1
 800ddfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddfe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800de02:	6013      	str	r3, [r2, #0]
 800de04:	e097      	b.n	800df36 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	015a      	lsls	r2, r3, #5
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	4413      	add	r3, r2
 800de0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	693a      	ldr	r2, [r7, #16]
 800de16:	0151      	lsls	r1, r2, #5
 800de18:	697a      	ldr	r2, [r7, #20]
 800de1a:	440a      	add	r2, r1
 800de1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800de24:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	699b      	ldr	r3, [r3, #24]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	f000 8083 	beq.w	800df36 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	f003 030f 	and.w	r3, r3, #15
 800de40:	2101      	movs	r1, #1
 800de42:	fa01 f303 	lsl.w	r3, r1, r3
 800de46:	6979      	ldr	r1, [r7, #20]
 800de48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de4c:	4313      	orrs	r3, r2
 800de4e:	634b      	str	r3, [r1, #52]	; 0x34
 800de50:	e071      	b.n	800df36 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	015a      	lsls	r2, r3, #5
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	4413      	add	r3, r2
 800de5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de5e:	691b      	ldr	r3, [r3, #16]
 800de60:	693a      	ldr	r2, [r7, #16]
 800de62:	0151      	lsls	r1, r2, #5
 800de64:	697a      	ldr	r2, [r7, #20]
 800de66:	440a      	add	r2, r1
 800de68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de6c:	0cdb      	lsrs	r3, r3, #19
 800de6e:	04db      	lsls	r3, r3, #19
 800de70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	015a      	lsls	r2, r3, #5
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	4413      	add	r3, r2
 800de7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de7e:	691b      	ldr	r3, [r3, #16]
 800de80:	693a      	ldr	r2, [r7, #16]
 800de82:	0151      	lsls	r1, r2, #5
 800de84:	697a      	ldr	r2, [r7, #20]
 800de86:	440a      	add	r2, r1
 800de88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800de90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800de94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	699b      	ldr	r3, [r3, #24]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d003      	beq.n	800dea6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	68da      	ldr	r2, [r3, #12]
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	68da      	ldr	r2, [r3, #12]
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	015a      	lsls	r2, r3, #5
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	4413      	add	r3, r2
 800deb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deba:	691b      	ldr	r3, [r3, #16]
 800debc:	693a      	ldr	r2, [r7, #16]
 800debe:	0151      	lsls	r1, r2, #5
 800dec0:	697a      	ldr	r2, [r7, #20]
 800dec2:	440a      	add	r2, r1
 800dec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dec8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800decc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800dece:	693b      	ldr	r3, [r7, #16]
 800ded0:	015a      	lsls	r2, r3, #5
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	4413      	add	r3, r2
 800ded6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deda:	691a      	ldr	r2, [r3, #16]
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	69db      	ldr	r3, [r3, #28]
 800dee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dee4:	6939      	ldr	r1, [r7, #16]
 800dee6:	0148      	lsls	r0, r1, #5
 800dee8:	6979      	ldr	r1, [r7, #20]
 800deea:	4401      	add	r1, r0
 800deec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800def0:	4313      	orrs	r3, r2
 800def2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800def4:	79fb      	ldrb	r3, [r7, #7]
 800def6:	2b01      	cmp	r3, #1
 800def8:	d10d      	bne.n	800df16 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	691b      	ldr	r3, [r3, #16]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d009      	beq.n	800df16 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	6919      	ldr	r1, [r3, #16]
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	015a      	lsls	r2, r3, #5
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	4413      	add	r3, r2
 800df0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df12:	460a      	mov	r2, r1
 800df14:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	015a      	lsls	r2, r3, #5
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	4413      	add	r3, r2
 800df1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	693a      	ldr	r2, [r7, #16]
 800df26:	0151      	lsls	r1, r2, #5
 800df28:	697a      	ldr	r2, [r7, #20]
 800df2a:	440a      	add	r2, r1
 800df2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800df34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800df36:	2300      	movs	r3, #0
}
 800df38:	4618      	mov	r0, r3
 800df3a:	371c      	adds	r7, #28
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr

0800df44 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800df44:	b480      	push	{r7}
 800df46:	b087      	sub	sp, #28
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800df4e:	2300      	movs	r3, #0
 800df50:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800df52:	2300      	movs	r3, #0
 800df54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	785b      	ldrb	r3, [r3, #1]
 800df5e:	2b01      	cmp	r3, #1
 800df60:	d14a      	bne.n	800dff8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	781b      	ldrb	r3, [r3, #0]
 800df66:	015a      	lsls	r2, r3, #5
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	4413      	add	r3, r2
 800df6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df7a:	f040 8086 	bne.w	800e08a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	015a      	lsls	r2, r3, #5
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	4413      	add	r3, r2
 800df88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	683a      	ldr	r2, [r7, #0]
 800df90:	7812      	ldrb	r2, [r2, #0]
 800df92:	0151      	lsls	r1, r2, #5
 800df94:	693a      	ldr	r2, [r7, #16]
 800df96:	440a      	add	r2, r1
 800df98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dfa0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	015a      	lsls	r2, r3, #5
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	4413      	add	r3, r2
 800dfac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	683a      	ldr	r2, [r7, #0]
 800dfb4:	7812      	ldrb	r2, [r2, #0]
 800dfb6:	0151      	lsls	r1, r2, #5
 800dfb8:	693a      	ldr	r2, [r7, #16]
 800dfba:	440a      	add	r2, r1
 800dfbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dfc4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	3301      	adds	r3, #1
 800dfca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	f242 7210 	movw	r2, #10000	; 0x2710
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	d902      	bls.n	800dfdc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	75fb      	strb	r3, [r7, #23]
          break;
 800dfda:	e056      	b.n	800e08a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	015a      	lsls	r2, r3, #5
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	4413      	add	r3, r2
 800dfe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dff0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dff4:	d0e7      	beq.n	800dfc6 <USB_EPStopXfer+0x82>
 800dff6:	e048      	b.n	800e08a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	015a      	lsls	r2, r3, #5
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	4413      	add	r3, r2
 800e002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e00c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e010:	d13b      	bne.n	800e08a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	015a      	lsls	r2, r3, #5
 800e018:	693b      	ldr	r3, [r7, #16]
 800e01a:	4413      	add	r3, r2
 800e01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	683a      	ldr	r2, [r7, #0]
 800e024:	7812      	ldrb	r2, [r2, #0]
 800e026:	0151      	lsls	r1, r2, #5
 800e028:	693a      	ldr	r2, [r7, #16]
 800e02a:	440a      	add	r2, r1
 800e02c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e030:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e034:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	015a      	lsls	r2, r3, #5
 800e03c:	693b      	ldr	r3, [r7, #16]
 800e03e:	4413      	add	r3, r2
 800e040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	683a      	ldr	r2, [r7, #0]
 800e048:	7812      	ldrb	r2, [r2, #0]
 800e04a:	0151      	lsls	r1, r2, #5
 800e04c:	693a      	ldr	r2, [r7, #16]
 800e04e:	440a      	add	r2, r1
 800e050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e054:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e058:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	3301      	adds	r3, #1
 800e05e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f242 7210 	movw	r2, #10000	; 0x2710
 800e066:	4293      	cmp	r3, r2
 800e068:	d902      	bls.n	800e070 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e06a:	2301      	movs	r3, #1
 800e06c:	75fb      	strb	r3, [r7, #23]
          break;
 800e06e:	e00c      	b.n	800e08a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	015a      	lsls	r2, r3, #5
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	4413      	add	r3, r2
 800e07a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e084:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e088:	d0e7      	beq.n	800e05a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e08a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	371c      	adds	r7, #28
 800e090:	46bd      	mov	sp, r7
 800e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e096:	4770      	bx	lr

0800e098 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e098:	b480      	push	{r7}
 800e09a:	b089      	sub	sp, #36	; 0x24
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	60f8      	str	r0, [r7, #12]
 800e0a0:	60b9      	str	r1, [r7, #8]
 800e0a2:	4611      	mov	r1, r2
 800e0a4:	461a      	mov	r2, r3
 800e0a6:	460b      	mov	r3, r1
 800e0a8:	71fb      	strb	r3, [r7, #7]
 800e0aa:	4613      	mov	r3, r2
 800e0ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e0b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d123      	bne.n	800e106 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e0be:	88bb      	ldrh	r3, [r7, #4]
 800e0c0:	3303      	adds	r3, #3
 800e0c2:	089b      	lsrs	r3, r3, #2
 800e0c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	61bb      	str	r3, [r7, #24]
 800e0ca:	e018      	b.n	800e0fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e0cc:	79fb      	ldrb	r3, [r7, #7]
 800e0ce:	031a      	lsls	r2, r3, #12
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	4413      	add	r3, r2
 800e0d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0d8:	461a      	mov	r2, r3
 800e0da:	69fb      	ldr	r3, [r7, #28]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e0e6:	69fb      	ldr	r3, [r7, #28]
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e0f2:	69fb      	ldr	r3, [r7, #28]
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e0f8:	69bb      	ldr	r3, [r7, #24]
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	61bb      	str	r3, [r7, #24]
 800e0fe:	69ba      	ldr	r2, [r7, #24]
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	429a      	cmp	r2, r3
 800e104:	d3e2      	bcc.n	800e0cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e106:	2300      	movs	r3, #0
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3724      	adds	r7, #36	; 0x24
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr

0800e114 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e114:	b480      	push	{r7}
 800e116:	b08b      	sub	sp, #44	; 0x2c
 800e118:	af00      	add	r7, sp, #0
 800e11a:	60f8      	str	r0, [r7, #12]
 800e11c:	60b9      	str	r1, [r7, #8]
 800e11e:	4613      	mov	r3, r2
 800e120:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e12a:	88fb      	ldrh	r3, [r7, #6]
 800e12c:	089b      	lsrs	r3, r3, #2
 800e12e:	b29b      	uxth	r3, r3
 800e130:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e132:	88fb      	ldrh	r3, [r7, #6]
 800e134:	f003 0303 	and.w	r3, r3, #3
 800e138:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e13a:	2300      	movs	r3, #0
 800e13c:	623b      	str	r3, [r7, #32]
 800e13e:	e014      	b.n	800e16a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e140:	69bb      	ldr	r3, [r7, #24]
 800e142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14a:	601a      	str	r2, [r3, #0]
    pDest++;
 800e14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14e:	3301      	adds	r3, #1
 800e150:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e154:	3301      	adds	r3, #1
 800e156:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e15a:	3301      	adds	r3, #1
 800e15c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e160:	3301      	adds	r3, #1
 800e162:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e164:	6a3b      	ldr	r3, [r7, #32]
 800e166:	3301      	adds	r3, #1
 800e168:	623b      	str	r3, [r7, #32]
 800e16a:	6a3a      	ldr	r2, [r7, #32]
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	429a      	cmp	r2, r3
 800e170:	d3e6      	bcc.n	800e140 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e172:	8bfb      	ldrh	r3, [r7, #30]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d01e      	beq.n	800e1b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e178:	2300      	movs	r3, #0
 800e17a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e17c:	69bb      	ldr	r3, [r7, #24]
 800e17e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e182:	461a      	mov	r2, r3
 800e184:	f107 0310 	add.w	r3, r7, #16
 800e188:	6812      	ldr	r2, [r2, #0]
 800e18a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e18c:	693a      	ldr	r2, [r7, #16]
 800e18e:	6a3b      	ldr	r3, [r7, #32]
 800e190:	b2db      	uxtb	r3, r3
 800e192:	00db      	lsls	r3, r3, #3
 800e194:	fa22 f303 	lsr.w	r3, r2, r3
 800e198:	b2da      	uxtb	r2, r3
 800e19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19c:	701a      	strb	r2, [r3, #0]
      i++;
 800e19e:	6a3b      	ldr	r3, [r7, #32]
 800e1a0:	3301      	adds	r3, #1
 800e1a2:	623b      	str	r3, [r7, #32]
      pDest++;
 800e1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a6:	3301      	adds	r3, #1
 800e1a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e1aa:	8bfb      	ldrh	r3, [r7, #30]
 800e1ac:	3b01      	subs	r3, #1
 800e1ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e1b0:	8bfb      	ldrh	r3, [r7, #30]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d1ea      	bne.n	800e18c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	372c      	adds	r7, #44	; 0x2c
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c2:	4770      	bx	lr

0800e1c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b085      	sub	sp, #20
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	785b      	ldrb	r3, [r3, #1]
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d12c      	bne.n	800e23a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	015a      	lsls	r2, r3, #5
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	4413      	add	r3, r2
 800e1e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	db12      	blt.n	800e218 <USB_EPSetStall+0x54>
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d00f      	beq.n	800e218 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	015a      	lsls	r2, r3, #5
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	4413      	add	r3, r2
 800e200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	68ba      	ldr	r2, [r7, #8]
 800e208:	0151      	lsls	r1, r2, #5
 800e20a:	68fa      	ldr	r2, [r7, #12]
 800e20c:	440a      	add	r2, r1
 800e20e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e212:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e216:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	015a      	lsls	r2, r3, #5
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	4413      	add	r3, r2
 800e220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	68ba      	ldr	r2, [r7, #8]
 800e228:	0151      	lsls	r1, r2, #5
 800e22a:	68fa      	ldr	r2, [r7, #12]
 800e22c:	440a      	add	r2, r1
 800e22e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e232:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e236:	6013      	str	r3, [r2, #0]
 800e238:	e02b      	b.n	800e292 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	015a      	lsls	r2, r3, #5
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	4413      	add	r3, r2
 800e242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	db12      	blt.n	800e272 <USB_EPSetStall+0xae>
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00f      	beq.n	800e272 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	015a      	lsls	r2, r3, #5
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	4413      	add	r3, r2
 800e25a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	68ba      	ldr	r2, [r7, #8]
 800e262:	0151      	lsls	r1, r2, #5
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	440a      	add	r2, r1
 800e268:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e26c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e270:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	015a      	lsls	r2, r3, #5
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	4413      	add	r3, r2
 800e27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	68ba      	ldr	r2, [r7, #8]
 800e282:	0151      	lsls	r1, r2, #5
 800e284:	68fa      	ldr	r2, [r7, #12]
 800e286:	440a      	add	r2, r1
 800e288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e28c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e290:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e292:	2300      	movs	r3, #0
}
 800e294:	4618      	mov	r0, r3
 800e296:	3714      	adds	r7, #20
 800e298:	46bd      	mov	sp, r7
 800e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29e:	4770      	bx	lr

0800e2a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b085      	sub	sp, #20
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	785b      	ldrb	r3, [r3, #1]
 800e2b8:	2b01      	cmp	r3, #1
 800e2ba:	d128      	bne.n	800e30e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	015a      	lsls	r2, r3, #5
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	4413      	add	r3, r2
 800e2c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	68ba      	ldr	r2, [r7, #8]
 800e2cc:	0151      	lsls	r1, r2, #5
 800e2ce:	68fa      	ldr	r2, [r7, #12]
 800e2d0:	440a      	add	r2, r1
 800e2d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e2da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	791b      	ldrb	r3, [r3, #4]
 800e2e0:	2b03      	cmp	r3, #3
 800e2e2:	d003      	beq.n	800e2ec <USB_EPClearStall+0x4c>
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	791b      	ldrb	r3, [r3, #4]
 800e2e8:	2b02      	cmp	r3, #2
 800e2ea:	d138      	bne.n	800e35e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	015a      	lsls	r2, r3, #5
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	4413      	add	r3, r2
 800e2f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	68ba      	ldr	r2, [r7, #8]
 800e2fc:	0151      	lsls	r1, r2, #5
 800e2fe:	68fa      	ldr	r2, [r7, #12]
 800e300:	440a      	add	r2, r1
 800e302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e30a:	6013      	str	r3, [r2, #0]
 800e30c:	e027      	b.n	800e35e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	015a      	lsls	r2, r3, #5
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	4413      	add	r3, r2
 800e316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	68ba      	ldr	r2, [r7, #8]
 800e31e:	0151      	lsls	r1, r2, #5
 800e320:	68fa      	ldr	r2, [r7, #12]
 800e322:	440a      	add	r2, r1
 800e324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e328:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e32c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	791b      	ldrb	r3, [r3, #4]
 800e332:	2b03      	cmp	r3, #3
 800e334:	d003      	beq.n	800e33e <USB_EPClearStall+0x9e>
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	791b      	ldrb	r3, [r3, #4]
 800e33a:	2b02      	cmp	r3, #2
 800e33c:	d10f      	bne.n	800e35e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	015a      	lsls	r2, r3, #5
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	4413      	add	r3, r2
 800e346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	68ba      	ldr	r2, [r7, #8]
 800e34e:	0151      	lsls	r1, r2, #5
 800e350:	68fa      	ldr	r2, [r7, #12]
 800e352:	440a      	add	r2, r1
 800e354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e35c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e35e:	2300      	movs	r3, #0
}
 800e360:	4618      	mov	r0, r3
 800e362:	3714      	adds	r7, #20
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr

0800e36c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b085      	sub	sp, #20
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	460b      	mov	r3, r1
 800e376:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	68fa      	ldr	r2, [r7, #12]
 800e386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e38a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e38e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e396:	681a      	ldr	r2, [r3, #0]
 800e398:	78fb      	ldrb	r3, [r7, #3]
 800e39a:	011b      	lsls	r3, r3, #4
 800e39c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e3a0:	68f9      	ldr	r1, [r7, #12]
 800e3a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e3a6:	4313      	orrs	r3, r2
 800e3a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e3aa:	2300      	movs	r3, #0
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3714      	adds	r7, #20
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr

0800e3b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b085      	sub	sp, #20
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	68fa      	ldr	r2, [r7, #12]
 800e3ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e3d2:	f023 0303 	bic.w	r3, r3, #3
 800e3d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3de:	685b      	ldr	r3, [r3, #4]
 800e3e0:	68fa      	ldr	r2, [r7, #12]
 800e3e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e3e6:	f023 0302 	bic.w	r3, r3, #2
 800e3ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e3ec:	2300      	movs	r3, #0
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3714      	adds	r7, #20
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f8:	4770      	bx	lr

0800e3fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e3fa:	b480      	push	{r7}
 800e3fc:	b085      	sub	sp, #20
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	68fa      	ldr	r2, [r7, #12]
 800e410:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e414:	f023 0303 	bic.w	r3, r3, #3
 800e418:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e420:	685b      	ldr	r3, [r3, #4]
 800e422:	68fa      	ldr	r2, [r7, #12]
 800e424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e428:	f043 0302 	orr.w	r3, r3, #2
 800e42c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e42e:	2300      	movs	r3, #0
}
 800e430:	4618      	mov	r0, r3
 800e432:	3714      	adds	r7, #20
 800e434:	46bd      	mov	sp, r7
 800e436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43a:	4770      	bx	lr

0800e43c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e43c:	b480      	push	{r7}
 800e43e:	b085      	sub	sp, #20
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	695b      	ldr	r3, [r3, #20]
 800e448:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	699b      	ldr	r3, [r3, #24]
 800e44e:	68fa      	ldr	r2, [r7, #12]
 800e450:	4013      	ands	r3, r2
 800e452:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e454:	68fb      	ldr	r3, [r7, #12]
}
 800e456:	4618      	mov	r0, r3
 800e458:	3714      	adds	r7, #20
 800e45a:	46bd      	mov	sp, r7
 800e45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e460:	4770      	bx	lr

0800e462 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e462:	b480      	push	{r7}
 800e464:	b085      	sub	sp, #20
 800e466:	af00      	add	r7, sp, #0
 800e468:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e474:	699b      	ldr	r3, [r3, #24]
 800e476:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e47e:	69db      	ldr	r3, [r3, #28]
 800e480:	68ba      	ldr	r2, [r7, #8]
 800e482:	4013      	ands	r3, r2
 800e484:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	0c1b      	lsrs	r3, r3, #16
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3714      	adds	r7, #20
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr

0800e496 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e496:	b480      	push	{r7}
 800e498:	b085      	sub	sp, #20
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4a8:	699b      	ldr	r3, [r3, #24]
 800e4aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4b2:	69db      	ldr	r3, [r3, #28]
 800e4b4:	68ba      	ldr	r2, [r7, #8]
 800e4b6:	4013      	ands	r3, r2
 800e4b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	b29b      	uxth	r3, r3
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3714      	adds	r7, #20
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c8:	4770      	bx	lr

0800e4ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e4ca:	b480      	push	{r7}
 800e4cc:	b085      	sub	sp, #20
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	6078      	str	r0, [r7, #4]
 800e4d2:	460b      	mov	r3, r1
 800e4d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e4da:	78fb      	ldrb	r3, [r7, #3]
 800e4dc:	015a      	lsls	r2, r3, #5
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	4413      	add	r3, r2
 800e4e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4e6:	689b      	ldr	r3, [r3, #8]
 800e4e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4f0:	695b      	ldr	r3, [r3, #20]
 800e4f2:	68ba      	ldr	r2, [r7, #8]
 800e4f4:	4013      	ands	r3, r2
 800e4f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e4f8:	68bb      	ldr	r3, [r7, #8]
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3714      	adds	r7, #20
 800e4fe:	46bd      	mov	sp, r7
 800e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e504:	4770      	bx	lr

0800e506 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e506:	b480      	push	{r7}
 800e508:	b087      	sub	sp, #28
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	6078      	str	r0, [r7, #4]
 800e50e:	460b      	mov	r3, r1
 800e510:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e51c:	691b      	ldr	r3, [r3, #16]
 800e51e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e528:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e52a:	78fb      	ldrb	r3, [r7, #3]
 800e52c:	f003 030f 	and.w	r3, r3, #15
 800e530:	68fa      	ldr	r2, [r7, #12]
 800e532:	fa22 f303 	lsr.w	r3, r2, r3
 800e536:	01db      	lsls	r3, r3, #7
 800e538:	b2db      	uxtb	r3, r3
 800e53a:	693a      	ldr	r2, [r7, #16]
 800e53c:	4313      	orrs	r3, r2
 800e53e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e540:	78fb      	ldrb	r3, [r7, #3]
 800e542:	015a      	lsls	r2, r3, #5
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	4413      	add	r3, r2
 800e548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e54c:	689b      	ldr	r3, [r3, #8]
 800e54e:	693a      	ldr	r2, [r7, #16]
 800e550:	4013      	ands	r3, r2
 800e552:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e554:	68bb      	ldr	r3, [r7, #8]
}
 800e556:	4618      	mov	r0, r3
 800e558:	371c      	adds	r7, #28
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr

0800e562 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e562:	b480      	push	{r7}
 800e564:	b083      	sub	sp, #12
 800e566:	af00      	add	r7, sp, #0
 800e568:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	695b      	ldr	r3, [r3, #20]
 800e56e:	f003 0301 	and.w	r3, r3, #1
}
 800e572:	4618      	mov	r0, r3
 800e574:	370c      	adds	r7, #12
 800e576:	46bd      	mov	sp, r7
 800e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57c:	4770      	bx	lr

0800e57e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e57e:	b480      	push	{r7}
 800e580:	b085      	sub	sp, #20
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	68fa      	ldr	r2, [r7, #12]
 800e594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e598:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e59c:	f023 0307 	bic.w	r3, r3, #7
 800e5a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5a8:	685b      	ldr	r3, [r3, #4]
 800e5aa:	68fa      	ldr	r2, [r7, #12]
 800e5ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e5b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e5b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e5b6:	2300      	movs	r3, #0
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3714      	adds	r7, #20
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c2:	4770      	bx	lr

0800e5c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b087      	sub	sp, #28
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	60f8      	str	r0, [r7, #12]
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	607a      	str	r2, [r7, #4]
 800e5d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	333c      	adds	r3, #60	; 0x3c
 800e5da:	3304      	adds	r3, #4
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	4a26      	ldr	r2, [pc, #152]	; (800e67c <USB_EP0_OutStart+0xb8>)
 800e5e4:	4293      	cmp	r3, r2
 800e5e6:	d90a      	bls.n	800e5fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e5f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e5f8:	d101      	bne.n	800e5fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	e037      	b.n	800e66e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e604:	461a      	mov	r2, r3
 800e606:	2300      	movs	r3, #0
 800e608:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e610:	691b      	ldr	r3, [r3, #16]
 800e612:	697a      	ldr	r2, [r7, #20]
 800e614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e618:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e61c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e624:	691b      	ldr	r3, [r3, #16]
 800e626:	697a      	ldr	r2, [r7, #20]
 800e628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e62c:	f043 0318 	orr.w	r3, r3, #24
 800e630:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e638:	691b      	ldr	r3, [r3, #16]
 800e63a:	697a      	ldr	r2, [r7, #20]
 800e63c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e640:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e644:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e646:	7afb      	ldrb	r3, [r7, #11]
 800e648:	2b01      	cmp	r3, #1
 800e64a:	d10f      	bne.n	800e66c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e652:	461a      	mov	r2, r3
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	697a      	ldr	r2, [r7, #20]
 800e662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e666:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e66a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e66c:	2300      	movs	r3, #0
}
 800e66e:	4618      	mov	r0, r3
 800e670:	371c      	adds	r7, #28
 800e672:	46bd      	mov	sp, r7
 800e674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e678:	4770      	bx	lr
 800e67a:	bf00      	nop
 800e67c:	4f54300a 	.word	0x4f54300a

0800e680 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e680:	b480      	push	{r7}
 800e682:	b085      	sub	sp, #20
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e688:	2300      	movs	r3, #0
 800e68a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	3301      	adds	r3, #1
 800e690:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	4a13      	ldr	r2, [pc, #76]	; (800e6e4 <USB_CoreReset+0x64>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d901      	bls.n	800e69e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e69a:	2303      	movs	r3, #3
 800e69c:	e01b      	b.n	800e6d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	691b      	ldr	r3, [r3, #16]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	daf2      	bge.n	800e68c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	691b      	ldr	r3, [r3, #16]
 800e6ae:	f043 0201 	orr.w	r2, r3, #1
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	3301      	adds	r3, #1
 800e6ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	4a09      	ldr	r2, [pc, #36]	; (800e6e4 <USB_CoreReset+0x64>)
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	d901      	bls.n	800e6c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e6c4:	2303      	movs	r3, #3
 800e6c6:	e006      	b.n	800e6d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	691b      	ldr	r3, [r3, #16]
 800e6cc:	f003 0301 	and.w	r3, r3, #1
 800e6d0:	2b01      	cmp	r3, #1
 800e6d2:	d0f0      	beq.n	800e6b6 <USB_CoreReset+0x36>

  return HAL_OK;
 800e6d4:	2300      	movs	r3, #0
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3714      	adds	r7, #20
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e0:	4770      	bx	lr
 800e6e2:	bf00      	nop
 800e6e4:	00030d40 	.word	0x00030d40

0800e6e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800e6ec:	4904      	ldr	r1, [pc, #16]	; (800e700 <MX_FATFS_Init+0x18>)
 800e6ee:	4805      	ldr	r0, [pc, #20]	; (800e704 <MX_FATFS_Init+0x1c>)
 800e6f0:	f002 fd76 	bl	80111e0 <FATFS_LinkDriver>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	4b03      	ldr	r3, [pc, #12]	; (800e708 <MX_FATFS_Init+0x20>)
 800e6fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e6fc:	bf00      	nop
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	20000870 	.word	0x20000870
 800e704:	20000024 	.word	0x20000024
 800e708:	2000086c 	.word	0x2000086c

0800e70c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b083      	sub	sp, #12
 800e710:	af00      	add	r7, sp, #0
 800e712:	4603      	mov	r3, r0
 800e714:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800e716:	4b06      	ldr	r3, [pc, #24]	; (800e730 <USER_initialize+0x24>)
 800e718:	2201      	movs	r2, #1
 800e71a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800e71c:	4b04      	ldr	r3, [pc, #16]	; (800e730 <USER_initialize+0x24>)
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800e722:	4618      	mov	r0, r3
 800e724:	370c      	adds	r7, #12
 800e726:	46bd      	mov	sp, r7
 800e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72c:	4770      	bx	lr
 800e72e:	bf00      	nop
 800e730:	20000021 	.word	0x20000021

0800e734 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800e734:	b480      	push	{r7}
 800e736:	b083      	sub	sp, #12
 800e738:	af00      	add	r7, sp, #0
 800e73a:	4603      	mov	r3, r0
 800e73c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800e73e:	4b06      	ldr	r3, [pc, #24]	; (800e758 <USER_status+0x24>)
 800e740:	2201      	movs	r2, #1
 800e742:	701a      	strb	r2, [r3, #0]
    return Stat;
 800e744:	4b04      	ldr	r3, [pc, #16]	; (800e758 <USER_status+0x24>)
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	370c      	adds	r7, #12
 800e74e:	46bd      	mov	sp, r7
 800e750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e754:	4770      	bx	lr
 800e756:	bf00      	nop
 800e758:	20000021 	.word	0x20000021

0800e75c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b085      	sub	sp, #20
 800e760:	af00      	add	r7, sp, #0
 800e762:	60b9      	str	r1, [r7, #8]
 800e764:	607a      	str	r2, [r7, #4]
 800e766:	603b      	str	r3, [r7, #0]
 800e768:	4603      	mov	r3, r0
 800e76a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800e76c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3714      	adds	r7, #20
 800e772:	46bd      	mov	sp, r7
 800e774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e778:	4770      	bx	lr

0800e77a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800e77a:	b480      	push	{r7}
 800e77c:	b085      	sub	sp, #20
 800e77e:	af00      	add	r7, sp, #0
 800e780:	60b9      	str	r1, [r7, #8]
 800e782:	607a      	str	r2, [r7, #4]
 800e784:	603b      	str	r3, [r7, #0]
 800e786:	4603      	mov	r3, r0
 800e788:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800e78a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3714      	adds	r7, #20
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800e798:	b480      	push	{r7}
 800e79a:	b085      	sub	sp, #20
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	4603      	mov	r3, r0
 800e7a0:	603a      	str	r2, [r7, #0]
 800e7a2:	71fb      	strb	r3, [r7, #7]
 800e7a4:	460b      	mov	r3, r1
 800e7a6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	73fb      	strb	r3, [r7, #15]
    return res;
 800e7ac:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3714      	adds	r7, #20
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr
	...

0800e7bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b084      	sub	sp, #16
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
 800e7c4:	460b      	mov	r3, r1
 800e7c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e7c8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e7cc:	f007 fb24 	bl	8015e18 <USBD_static_malloc>
 800e7d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d109      	bne.n	800e7ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	32b0      	adds	r2, #176	; 0xb0
 800e7e2:	2100      	movs	r1, #0
 800e7e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e7e8:	2302      	movs	r3, #2
 800e7ea:	e0d4      	b.n	800e996 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e7ec:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800e7f0:	2100      	movs	r1, #0
 800e7f2:	68f8      	ldr	r0, [r7, #12]
 800e7f4:	f007 fc8a 	bl	801610c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	32b0      	adds	r2, #176	; 0xb0
 800e802:	68f9      	ldr	r1, [r7, #12]
 800e804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	32b0      	adds	r2, #176	; 0xb0
 800e812:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	7c1b      	ldrb	r3, [r3, #16]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d138      	bne.n	800e896 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e824:	4b5e      	ldr	r3, [pc, #376]	; (800e9a0 <USBD_CDC_Init+0x1e4>)
 800e826:	7819      	ldrb	r1, [r3, #0]
 800e828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e82c:	2202      	movs	r2, #2
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f007 f981 	bl	8015b36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e834:	4b5a      	ldr	r3, [pc, #360]	; (800e9a0 <USBD_CDC_Init+0x1e4>)
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	f003 020f 	and.w	r2, r3, #15
 800e83c:	6879      	ldr	r1, [r7, #4]
 800e83e:	4613      	mov	r3, r2
 800e840:	009b      	lsls	r3, r3, #2
 800e842:	4413      	add	r3, r2
 800e844:	009b      	lsls	r3, r3, #2
 800e846:	440b      	add	r3, r1
 800e848:	3324      	adds	r3, #36	; 0x24
 800e84a:	2201      	movs	r2, #1
 800e84c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e84e:	4b55      	ldr	r3, [pc, #340]	; (800e9a4 <USBD_CDC_Init+0x1e8>)
 800e850:	7819      	ldrb	r1, [r3, #0]
 800e852:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e856:	2202      	movs	r2, #2
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f007 f96c 	bl	8015b36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e85e:	4b51      	ldr	r3, [pc, #324]	; (800e9a4 <USBD_CDC_Init+0x1e8>)
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	f003 020f 	and.w	r2, r3, #15
 800e866:	6879      	ldr	r1, [r7, #4]
 800e868:	4613      	mov	r3, r2
 800e86a:	009b      	lsls	r3, r3, #2
 800e86c:	4413      	add	r3, r2
 800e86e:	009b      	lsls	r3, r3, #2
 800e870:	440b      	add	r3, r1
 800e872:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e876:	2201      	movs	r2, #1
 800e878:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e87a:	4b4b      	ldr	r3, [pc, #300]	; (800e9a8 <USBD_CDC_Init+0x1ec>)
 800e87c:	781b      	ldrb	r3, [r3, #0]
 800e87e:	f003 020f 	and.w	r2, r3, #15
 800e882:	6879      	ldr	r1, [r7, #4]
 800e884:	4613      	mov	r3, r2
 800e886:	009b      	lsls	r3, r3, #2
 800e888:	4413      	add	r3, r2
 800e88a:	009b      	lsls	r3, r3, #2
 800e88c:	440b      	add	r3, r1
 800e88e:	3326      	adds	r3, #38	; 0x26
 800e890:	2210      	movs	r2, #16
 800e892:	801a      	strh	r2, [r3, #0]
 800e894:	e035      	b.n	800e902 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e896:	4b42      	ldr	r3, [pc, #264]	; (800e9a0 <USBD_CDC_Init+0x1e4>)
 800e898:	7819      	ldrb	r1, [r3, #0]
 800e89a:	2340      	movs	r3, #64	; 0x40
 800e89c:	2202      	movs	r2, #2
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f007 f949 	bl	8015b36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e8a4:	4b3e      	ldr	r3, [pc, #248]	; (800e9a0 <USBD_CDC_Init+0x1e4>)
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	f003 020f 	and.w	r2, r3, #15
 800e8ac:	6879      	ldr	r1, [r7, #4]
 800e8ae:	4613      	mov	r3, r2
 800e8b0:	009b      	lsls	r3, r3, #2
 800e8b2:	4413      	add	r3, r2
 800e8b4:	009b      	lsls	r3, r3, #2
 800e8b6:	440b      	add	r3, r1
 800e8b8:	3324      	adds	r3, #36	; 0x24
 800e8ba:	2201      	movs	r2, #1
 800e8bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e8be:	4b39      	ldr	r3, [pc, #228]	; (800e9a4 <USBD_CDC_Init+0x1e8>)
 800e8c0:	7819      	ldrb	r1, [r3, #0]
 800e8c2:	2340      	movs	r3, #64	; 0x40
 800e8c4:	2202      	movs	r2, #2
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f007 f935 	bl	8015b36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e8cc:	4b35      	ldr	r3, [pc, #212]	; (800e9a4 <USBD_CDC_Init+0x1e8>)
 800e8ce:	781b      	ldrb	r3, [r3, #0]
 800e8d0:	f003 020f 	and.w	r2, r3, #15
 800e8d4:	6879      	ldr	r1, [r7, #4]
 800e8d6:	4613      	mov	r3, r2
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	4413      	add	r3, r2
 800e8dc:	009b      	lsls	r3, r3, #2
 800e8de:	440b      	add	r3, r1
 800e8e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e8e4:	2201      	movs	r2, #1
 800e8e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e8e8:	4b2f      	ldr	r3, [pc, #188]	; (800e9a8 <USBD_CDC_Init+0x1ec>)
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	f003 020f 	and.w	r2, r3, #15
 800e8f0:	6879      	ldr	r1, [r7, #4]
 800e8f2:	4613      	mov	r3, r2
 800e8f4:	009b      	lsls	r3, r3, #2
 800e8f6:	4413      	add	r3, r2
 800e8f8:	009b      	lsls	r3, r3, #2
 800e8fa:	440b      	add	r3, r1
 800e8fc:	3326      	adds	r3, #38	; 0x26
 800e8fe:	2210      	movs	r2, #16
 800e900:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e902:	4b29      	ldr	r3, [pc, #164]	; (800e9a8 <USBD_CDC_Init+0x1ec>)
 800e904:	7819      	ldrb	r1, [r3, #0]
 800e906:	2308      	movs	r3, #8
 800e908:	2203      	movs	r2, #3
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f007 f913 	bl	8015b36 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e910:	4b25      	ldr	r3, [pc, #148]	; (800e9a8 <USBD_CDC_Init+0x1ec>)
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	f003 020f 	and.w	r2, r3, #15
 800e918:	6879      	ldr	r1, [r7, #4]
 800e91a:	4613      	mov	r3, r2
 800e91c:	009b      	lsls	r3, r3, #2
 800e91e:	4413      	add	r3, r2
 800e920:	009b      	lsls	r3, r3, #2
 800e922:	440b      	add	r3, r1
 800e924:	3324      	adds	r3, #36	; 0x24
 800e926:	2201      	movs	r2, #1
 800e928:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2200      	movs	r2, #0
 800e92e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e938:	687a      	ldr	r2, [r7, #4]
 800e93a:	33b0      	adds	r3, #176	; 0xb0
 800e93c:	009b      	lsls	r3, r3, #2
 800e93e:	4413      	add	r3, r2
 800e940:	685b      	ldr	r3, [r3, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2200      	movs	r2, #0
 800e94a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2200      	movs	r2, #0
 800e952:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d101      	bne.n	800e964 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e960:	2302      	movs	r3, #2
 800e962:	e018      	b.n	800e996 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	7c1b      	ldrb	r3, [r3, #16]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d10a      	bne.n	800e982 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e96c:	4b0d      	ldr	r3, [pc, #52]	; (800e9a4 <USBD_CDC_Init+0x1e8>)
 800e96e:	7819      	ldrb	r1, [r3, #0]
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f007 f9ca 	bl	8015d14 <USBD_LL_PrepareReceive>
 800e980:	e008      	b.n	800e994 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e982:	4b08      	ldr	r3, [pc, #32]	; (800e9a4 <USBD_CDC_Init+0x1e8>)
 800e984:	7819      	ldrb	r1, [r3, #0]
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e98c:	2340      	movs	r3, #64	; 0x40
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f007 f9c0 	bl	8015d14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e994:	2300      	movs	r3, #0
}
 800e996:	4618      	mov	r0, r3
 800e998:	3710      	adds	r7, #16
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	200000bf 	.word	0x200000bf
 800e9a4:	200000c0 	.word	0x200000c0
 800e9a8:	200000c1 	.word	0x200000c1

0800e9ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
 800e9b4:	460b      	mov	r3, r1
 800e9b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e9b8:	4b3a      	ldr	r3, [pc, #232]	; (800eaa4 <USBD_CDC_DeInit+0xf8>)
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	4619      	mov	r1, r3
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f007 f8df 	bl	8015b82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e9c4:	4b37      	ldr	r3, [pc, #220]	; (800eaa4 <USBD_CDC_DeInit+0xf8>)
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	f003 020f 	and.w	r2, r3, #15
 800e9cc:	6879      	ldr	r1, [r7, #4]
 800e9ce:	4613      	mov	r3, r2
 800e9d0:	009b      	lsls	r3, r3, #2
 800e9d2:	4413      	add	r3, r2
 800e9d4:	009b      	lsls	r3, r3, #2
 800e9d6:	440b      	add	r3, r1
 800e9d8:	3324      	adds	r3, #36	; 0x24
 800e9da:	2200      	movs	r2, #0
 800e9dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e9de:	4b32      	ldr	r3, [pc, #200]	; (800eaa8 <USBD_CDC_DeInit+0xfc>)
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f007 f8cc 	bl	8015b82 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e9ea:	4b2f      	ldr	r3, [pc, #188]	; (800eaa8 <USBD_CDC_DeInit+0xfc>)
 800e9ec:	781b      	ldrb	r3, [r3, #0]
 800e9ee:	f003 020f 	and.w	r2, r3, #15
 800e9f2:	6879      	ldr	r1, [r7, #4]
 800e9f4:	4613      	mov	r3, r2
 800e9f6:	009b      	lsls	r3, r3, #2
 800e9f8:	4413      	add	r3, r2
 800e9fa:	009b      	lsls	r3, r3, #2
 800e9fc:	440b      	add	r3, r1
 800e9fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ea02:	2200      	movs	r2, #0
 800ea04:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ea06:	4b29      	ldr	r3, [pc, #164]	; (800eaac <USBD_CDC_DeInit+0x100>)
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f007 f8b8 	bl	8015b82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ea12:	4b26      	ldr	r3, [pc, #152]	; (800eaac <USBD_CDC_DeInit+0x100>)
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	f003 020f 	and.w	r2, r3, #15
 800ea1a:	6879      	ldr	r1, [r7, #4]
 800ea1c:	4613      	mov	r3, r2
 800ea1e:	009b      	lsls	r3, r3, #2
 800ea20:	4413      	add	r3, r2
 800ea22:	009b      	lsls	r3, r3, #2
 800ea24:	440b      	add	r3, r1
 800ea26:	3324      	adds	r3, #36	; 0x24
 800ea28:	2200      	movs	r2, #0
 800ea2a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ea2c:	4b1f      	ldr	r3, [pc, #124]	; (800eaac <USBD_CDC_DeInit+0x100>)
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	f003 020f 	and.w	r2, r3, #15
 800ea34:	6879      	ldr	r1, [r7, #4]
 800ea36:	4613      	mov	r3, r2
 800ea38:	009b      	lsls	r3, r3, #2
 800ea3a:	4413      	add	r3, r2
 800ea3c:	009b      	lsls	r3, r3, #2
 800ea3e:	440b      	add	r3, r1
 800ea40:	3326      	adds	r3, #38	; 0x26
 800ea42:	2200      	movs	r2, #0
 800ea44:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	32b0      	adds	r2, #176	; 0xb0
 800ea50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d01f      	beq.n	800ea98 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ea5e:	687a      	ldr	r2, [r7, #4]
 800ea60:	33b0      	adds	r3, #176	; 0xb0
 800ea62:	009b      	lsls	r3, r3, #2
 800ea64:	4413      	add	r3, r2
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	685b      	ldr	r3, [r3, #4]
 800ea6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	32b0      	adds	r2, #176	; 0xb0
 800ea76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f007 f9da 	bl	8015e34 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	32b0      	adds	r2, #176	; 0xb0
 800ea8a:	2100      	movs	r1, #0
 800ea8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2200      	movs	r2, #0
 800ea94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ea98:	2300      	movs	r3, #0
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3708      	adds	r7, #8
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	200000bf 	.word	0x200000bf
 800eaa8:	200000c0 	.word	0x200000c0
 800eaac:	200000c1 	.word	0x200000c1

0800eab0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b086      	sub	sp, #24
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	32b0      	adds	r2, #176	; 0xb0
 800eac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eac8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800eaca:	2300      	movs	r3, #0
 800eacc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800eace:	2300      	movs	r3, #0
 800ead0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ead2:	2300      	movs	r3, #0
 800ead4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d101      	bne.n	800eae0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800eadc:	2303      	movs	r3, #3
 800eade:	e0bf      	b.n	800ec60 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d050      	beq.n	800eb8e <USBD_CDC_Setup+0xde>
 800eaec:	2b20      	cmp	r3, #32
 800eaee:	f040 80af 	bne.w	800ec50 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	88db      	ldrh	r3, [r3, #6]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d03a      	beq.n	800eb70 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	781b      	ldrb	r3, [r3, #0]
 800eafe:	b25b      	sxtb	r3, r3
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	da1b      	bge.n	800eb3c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800eb0a:	687a      	ldr	r2, [r7, #4]
 800eb0c:	33b0      	adds	r3, #176	; 0xb0
 800eb0e:	009b      	lsls	r3, r3, #2
 800eb10:	4413      	add	r3, r2
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	689b      	ldr	r3, [r3, #8]
 800eb16:	683a      	ldr	r2, [r7, #0]
 800eb18:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800eb1a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800eb1c:	683a      	ldr	r2, [r7, #0]
 800eb1e:	88d2      	ldrh	r2, [r2, #6]
 800eb20:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	88db      	ldrh	r3, [r3, #6]
 800eb26:	2b07      	cmp	r3, #7
 800eb28:	bf28      	it	cs
 800eb2a:	2307      	movcs	r3, #7
 800eb2c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800eb2e:	693b      	ldr	r3, [r7, #16]
 800eb30:	89fa      	ldrh	r2, [r7, #14]
 800eb32:	4619      	mov	r1, r3
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f001 fdb3 	bl	80106a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800eb3a:	e090      	b.n	800ec5e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	785a      	ldrb	r2, [r3, #1]
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	88db      	ldrh	r3, [r3, #6]
 800eb4a:	2b3f      	cmp	r3, #63	; 0x3f
 800eb4c:	d803      	bhi.n	800eb56 <USBD_CDC_Setup+0xa6>
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	88db      	ldrh	r3, [r3, #6]
 800eb52:	b2da      	uxtb	r2, r3
 800eb54:	e000      	b.n	800eb58 <USBD_CDC_Setup+0xa8>
 800eb56:	2240      	movs	r2, #64	; 0x40
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800eb5e:	6939      	ldr	r1, [r7, #16]
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800eb66:	461a      	mov	r2, r3
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f001 fdc5 	bl	80106f8 <USBD_CtlPrepareRx>
      break;
 800eb6e:	e076      	b.n	800ec5e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800eb76:	687a      	ldr	r2, [r7, #4]
 800eb78:	33b0      	adds	r3, #176	; 0xb0
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	4413      	add	r3, r2
 800eb7e:	685b      	ldr	r3, [r3, #4]
 800eb80:	689b      	ldr	r3, [r3, #8]
 800eb82:	683a      	ldr	r2, [r7, #0]
 800eb84:	7850      	ldrb	r0, [r2, #1]
 800eb86:	2200      	movs	r2, #0
 800eb88:	6839      	ldr	r1, [r7, #0]
 800eb8a:	4798      	blx	r3
      break;
 800eb8c:	e067      	b.n	800ec5e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	785b      	ldrb	r3, [r3, #1]
 800eb92:	2b0b      	cmp	r3, #11
 800eb94:	d851      	bhi.n	800ec3a <USBD_CDC_Setup+0x18a>
 800eb96:	a201      	add	r2, pc, #4	; (adr r2, 800eb9c <USBD_CDC_Setup+0xec>)
 800eb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb9c:	0800ebcd 	.word	0x0800ebcd
 800eba0:	0800ec49 	.word	0x0800ec49
 800eba4:	0800ec3b 	.word	0x0800ec3b
 800eba8:	0800ec3b 	.word	0x0800ec3b
 800ebac:	0800ec3b 	.word	0x0800ec3b
 800ebb0:	0800ec3b 	.word	0x0800ec3b
 800ebb4:	0800ec3b 	.word	0x0800ec3b
 800ebb8:	0800ec3b 	.word	0x0800ec3b
 800ebbc:	0800ec3b 	.word	0x0800ec3b
 800ebc0:	0800ec3b 	.word	0x0800ec3b
 800ebc4:	0800ebf7 	.word	0x0800ebf7
 800ebc8:	0800ec21 	.word	0x0800ec21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebd2:	b2db      	uxtb	r3, r3
 800ebd4:	2b03      	cmp	r3, #3
 800ebd6:	d107      	bne.n	800ebe8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ebd8:	f107 030a 	add.w	r3, r7, #10
 800ebdc:	2202      	movs	r2, #2
 800ebde:	4619      	mov	r1, r3
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f001 fd5d 	bl	80106a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ebe6:	e032      	b.n	800ec4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ebe8:	6839      	ldr	r1, [r7, #0]
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f001 fce7 	bl	80105be <USBD_CtlError>
            ret = USBD_FAIL;
 800ebf0:	2303      	movs	r3, #3
 800ebf2:	75fb      	strb	r3, [r7, #23]
          break;
 800ebf4:	e02b      	b.n	800ec4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebfc:	b2db      	uxtb	r3, r3
 800ebfe:	2b03      	cmp	r3, #3
 800ec00:	d107      	bne.n	800ec12 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ec02:	f107 030d 	add.w	r3, r7, #13
 800ec06:	2201      	movs	r2, #1
 800ec08:	4619      	mov	r1, r3
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f001 fd48 	bl	80106a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ec10:	e01d      	b.n	800ec4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ec12:	6839      	ldr	r1, [r7, #0]
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f001 fcd2 	bl	80105be <USBD_CtlError>
            ret = USBD_FAIL;
 800ec1a:	2303      	movs	r3, #3
 800ec1c:	75fb      	strb	r3, [r7, #23]
          break;
 800ec1e:	e016      	b.n	800ec4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec26:	b2db      	uxtb	r3, r3
 800ec28:	2b03      	cmp	r3, #3
 800ec2a:	d00f      	beq.n	800ec4c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ec2c:	6839      	ldr	r1, [r7, #0]
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f001 fcc5 	bl	80105be <USBD_CtlError>
            ret = USBD_FAIL;
 800ec34:	2303      	movs	r3, #3
 800ec36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ec38:	e008      	b.n	800ec4c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ec3a:	6839      	ldr	r1, [r7, #0]
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f001 fcbe 	bl	80105be <USBD_CtlError>
          ret = USBD_FAIL;
 800ec42:	2303      	movs	r3, #3
 800ec44:	75fb      	strb	r3, [r7, #23]
          break;
 800ec46:	e002      	b.n	800ec4e <USBD_CDC_Setup+0x19e>
          break;
 800ec48:	bf00      	nop
 800ec4a:	e008      	b.n	800ec5e <USBD_CDC_Setup+0x1ae>
          break;
 800ec4c:	bf00      	nop
      }
      break;
 800ec4e:	e006      	b.n	800ec5e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ec50:	6839      	ldr	r1, [r7, #0]
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f001 fcb3 	bl	80105be <USBD_CtlError>
      ret = USBD_FAIL;
 800ec58:	2303      	movs	r3, #3
 800ec5a:	75fb      	strb	r3, [r7, #23]
      break;
 800ec5c:	bf00      	nop
  }

  return (uint8_t)ret;
 800ec5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3718      	adds	r7, #24
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b084      	sub	sp, #16
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	460b      	mov	r3, r1
 800ec72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	32b0      	adds	r2, #176	; 0xb0
 800ec86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d101      	bne.n	800ec92 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ec8e:	2303      	movs	r3, #3
 800ec90:	e065      	b.n	800ed5e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	32b0      	adds	r2, #176	; 0xb0
 800ec9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eca0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800eca2:	78fb      	ldrb	r3, [r7, #3]
 800eca4:	f003 020f 	and.w	r2, r3, #15
 800eca8:	6879      	ldr	r1, [r7, #4]
 800ecaa:	4613      	mov	r3, r2
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	4413      	add	r3, r2
 800ecb0:	009b      	lsls	r3, r3, #2
 800ecb2:	440b      	add	r3, r1
 800ecb4:	3318      	adds	r3, #24
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d02f      	beq.n	800ed1c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ecbc:	78fb      	ldrb	r3, [r7, #3]
 800ecbe:	f003 020f 	and.w	r2, r3, #15
 800ecc2:	6879      	ldr	r1, [r7, #4]
 800ecc4:	4613      	mov	r3, r2
 800ecc6:	009b      	lsls	r3, r3, #2
 800ecc8:	4413      	add	r3, r2
 800ecca:	009b      	lsls	r3, r3, #2
 800eccc:	440b      	add	r3, r1
 800ecce:	3318      	adds	r3, #24
 800ecd0:	681a      	ldr	r2, [r3, #0]
 800ecd2:	78fb      	ldrb	r3, [r7, #3]
 800ecd4:	f003 010f 	and.w	r1, r3, #15
 800ecd8:	68f8      	ldr	r0, [r7, #12]
 800ecda:	460b      	mov	r3, r1
 800ecdc:	00db      	lsls	r3, r3, #3
 800ecde:	440b      	add	r3, r1
 800ece0:	009b      	lsls	r3, r3, #2
 800ece2:	4403      	add	r3, r0
 800ece4:	3348      	adds	r3, #72	; 0x48
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	fbb2 f1f3 	udiv	r1, r2, r3
 800ecec:	fb01 f303 	mul.w	r3, r1, r3
 800ecf0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d112      	bne.n	800ed1c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ecf6:	78fb      	ldrb	r3, [r7, #3]
 800ecf8:	f003 020f 	and.w	r2, r3, #15
 800ecfc:	6879      	ldr	r1, [r7, #4]
 800ecfe:	4613      	mov	r3, r2
 800ed00:	009b      	lsls	r3, r3, #2
 800ed02:	4413      	add	r3, r2
 800ed04:	009b      	lsls	r3, r3, #2
 800ed06:	440b      	add	r3, r1
 800ed08:	3318      	adds	r3, #24
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ed0e:	78f9      	ldrb	r1, [r7, #3]
 800ed10:	2300      	movs	r3, #0
 800ed12:	2200      	movs	r2, #0
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f006 ffdc 	bl	8015cd2 <USBD_LL_Transmit>
 800ed1a:	e01f      	b.n	800ed5c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ed2a:	687a      	ldr	r2, [r7, #4]
 800ed2c:	33b0      	adds	r3, #176	; 0xb0
 800ed2e:	009b      	lsls	r3, r3, #2
 800ed30:	4413      	add	r3, r2
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	691b      	ldr	r3, [r3, #16]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d010      	beq.n	800ed5c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ed40:	687a      	ldr	r2, [r7, #4]
 800ed42:	33b0      	adds	r3, #176	; 0xb0
 800ed44:	009b      	lsls	r3, r3, #2
 800ed46:	4413      	add	r3, r2
 800ed48:	685b      	ldr	r3, [r3, #4]
 800ed4a:	691b      	ldr	r3, [r3, #16]
 800ed4c:	68ba      	ldr	r2, [r7, #8]
 800ed4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ed52:	68ba      	ldr	r2, [r7, #8]
 800ed54:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ed58:	78fa      	ldrb	r2, [r7, #3]
 800ed5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ed5c:	2300      	movs	r3, #0
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3710      	adds	r7, #16
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}

0800ed66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ed66:	b580      	push	{r7, lr}
 800ed68:	b084      	sub	sp, #16
 800ed6a:	af00      	add	r7, sp, #0
 800ed6c:	6078      	str	r0, [r7, #4]
 800ed6e:	460b      	mov	r3, r1
 800ed70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	32b0      	adds	r2, #176	; 0xb0
 800ed7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed80:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	32b0      	adds	r2, #176	; 0xb0
 800ed8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d101      	bne.n	800ed98 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ed94:	2303      	movs	r3, #3
 800ed96:	e01a      	b.n	800edce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ed98:	78fb      	ldrb	r3, [r7, #3]
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f006 ffda 	bl	8015d56 <USBD_LL_GetRxDataSize>
 800eda2:	4602      	mov	r2, r0
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800edb0:	687a      	ldr	r2, [r7, #4]
 800edb2:	33b0      	adds	r3, #176	; 0xb0
 800edb4:	009b      	lsls	r3, r3, #2
 800edb6:	4413      	add	r3, r2
 800edb8:	685b      	ldr	r3, [r3, #4]
 800edba:	68db      	ldr	r3, [r3, #12]
 800edbc:	68fa      	ldr	r2, [r7, #12]
 800edbe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800edc2:	68fa      	ldr	r2, [r7, #12]
 800edc4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800edc8:	4611      	mov	r1, r2
 800edca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800edcc:	2300      	movs	r3, #0
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3710      	adds	r7, #16
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}

0800edd6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800edd6:	b580      	push	{r7, lr}
 800edd8:	b084      	sub	sp, #16
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	32b0      	adds	r2, #176	; 0xb0
 800ede8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d101      	bne.n	800edf8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800edf4:	2303      	movs	r3, #3
 800edf6:	e025      	b.n	800ee44 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	33b0      	adds	r3, #176	; 0xb0
 800ee02:	009b      	lsls	r3, r3, #2
 800ee04:	4413      	add	r3, r2
 800ee06:	685b      	ldr	r3, [r3, #4]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d01a      	beq.n	800ee42 <USBD_CDC_EP0_RxReady+0x6c>
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ee12:	2bff      	cmp	r3, #255	; 0xff
 800ee14:	d015      	beq.n	800ee42 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ee1c:	687a      	ldr	r2, [r7, #4]
 800ee1e:	33b0      	adds	r3, #176	; 0xb0
 800ee20:	009b      	lsls	r3, r3, #2
 800ee22:	4413      	add	r3, r2
 800ee24:	685b      	ldr	r3, [r3, #4]
 800ee26:	689b      	ldr	r3, [r3, #8]
 800ee28:	68fa      	ldr	r2, [r7, #12]
 800ee2a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ee2e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ee30:	68fa      	ldr	r2, [r7, #12]
 800ee32:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ee36:	b292      	uxth	r2, r2
 800ee38:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	22ff      	movs	r2, #255	; 0xff
 800ee3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ee42:	2300      	movs	r3, #0
}
 800ee44:	4618      	mov	r0, r3
 800ee46:	3710      	adds	r7, #16
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}

0800ee4c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b086      	sub	sp, #24
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ee54:	2182      	movs	r1, #130	; 0x82
 800ee56:	4818      	ldr	r0, [pc, #96]	; (800eeb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ee58:	f000 fd4f 	bl	800f8fa <USBD_GetEpDesc>
 800ee5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ee5e:	2101      	movs	r1, #1
 800ee60:	4815      	ldr	r0, [pc, #84]	; (800eeb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ee62:	f000 fd4a 	bl	800f8fa <USBD_GetEpDesc>
 800ee66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ee68:	2181      	movs	r1, #129	; 0x81
 800ee6a:	4813      	ldr	r0, [pc, #76]	; (800eeb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ee6c:	f000 fd45 	bl	800f8fa <USBD_GetEpDesc>
 800ee70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d002      	beq.n	800ee7e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	2210      	movs	r2, #16
 800ee7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ee7e:	693b      	ldr	r3, [r7, #16]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d006      	beq.n	800ee92 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ee84:	693b      	ldr	r3, [r7, #16]
 800ee86:	2200      	movs	r2, #0
 800ee88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ee8c:	711a      	strb	r2, [r3, #4]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d006      	beq.n	800eea6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eea0:	711a      	strb	r2, [r3, #4]
 800eea2:	2200      	movs	r2, #0
 800eea4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2243      	movs	r2, #67	; 0x43
 800eeaa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800eeac:	4b02      	ldr	r3, [pc, #8]	; (800eeb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3718      	adds	r7, #24
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}
 800eeb6:	bf00      	nop
 800eeb8:	2000007c 	.word	0x2000007c

0800eebc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b086      	sub	sp, #24
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800eec4:	2182      	movs	r1, #130	; 0x82
 800eec6:	4818      	ldr	r0, [pc, #96]	; (800ef28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eec8:	f000 fd17 	bl	800f8fa <USBD_GetEpDesc>
 800eecc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800eece:	2101      	movs	r1, #1
 800eed0:	4815      	ldr	r0, [pc, #84]	; (800ef28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eed2:	f000 fd12 	bl	800f8fa <USBD_GetEpDesc>
 800eed6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800eed8:	2181      	movs	r1, #129	; 0x81
 800eeda:	4813      	ldr	r0, [pc, #76]	; (800ef28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eedc:	f000 fd0d 	bl	800f8fa <USBD_GetEpDesc>
 800eee0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d002      	beq.n	800eeee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	2210      	movs	r2, #16
 800eeec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d006      	beq.n	800ef02 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	2200      	movs	r2, #0
 800eef8:	711a      	strb	r2, [r3, #4]
 800eefa:	2200      	movs	r2, #0
 800eefc:	f042 0202 	orr.w	r2, r2, #2
 800ef00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d006      	beq.n	800ef16 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	711a      	strb	r2, [r3, #4]
 800ef0e:	2200      	movs	r2, #0
 800ef10:	f042 0202 	orr.w	r2, r2, #2
 800ef14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	2243      	movs	r2, #67	; 0x43
 800ef1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ef1c:	4b02      	ldr	r3, [pc, #8]	; (800ef28 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3718      	adds	r7, #24
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}
 800ef26:	bf00      	nop
 800ef28:	2000007c 	.word	0x2000007c

0800ef2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b086      	sub	sp, #24
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ef34:	2182      	movs	r1, #130	; 0x82
 800ef36:	4818      	ldr	r0, [pc, #96]	; (800ef98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ef38:	f000 fcdf 	bl	800f8fa <USBD_GetEpDesc>
 800ef3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ef3e:	2101      	movs	r1, #1
 800ef40:	4815      	ldr	r0, [pc, #84]	; (800ef98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ef42:	f000 fcda 	bl	800f8fa <USBD_GetEpDesc>
 800ef46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ef48:	2181      	movs	r1, #129	; 0x81
 800ef4a:	4813      	ldr	r0, [pc, #76]	; (800ef98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ef4c:	f000 fcd5 	bl	800f8fa <USBD_GetEpDesc>
 800ef50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d002      	beq.n	800ef5e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	2210      	movs	r2, #16
 800ef5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ef5e:	693b      	ldr	r3, [r7, #16]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d006      	beq.n	800ef72 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	2200      	movs	r2, #0
 800ef68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ef6c:	711a      	strb	r2, [r3, #4]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d006      	beq.n	800ef86 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ef80:	711a      	strb	r2, [r3, #4]
 800ef82:	2200      	movs	r2, #0
 800ef84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2243      	movs	r2, #67	; 0x43
 800ef8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ef8c:	4b02      	ldr	r3, [pc, #8]	; (800ef98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	3718      	adds	r7, #24
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}
 800ef96:	bf00      	nop
 800ef98:	2000007c 	.word	0x2000007c

0800ef9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b083      	sub	sp, #12
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	220a      	movs	r2, #10
 800efa8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800efaa:	4b03      	ldr	r3, [pc, #12]	; (800efb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800efac:	4618      	mov	r0, r3
 800efae:	370c      	adds	r7, #12
 800efb0:	46bd      	mov	sp, r7
 800efb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb6:	4770      	bx	lr
 800efb8:	20000038 	.word	0x20000038

0800efbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800efbc:	b480      	push	{r7}
 800efbe:	b083      	sub	sp, #12
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d101      	bne.n	800efd0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800efcc:	2303      	movs	r3, #3
 800efce:	e009      	b.n	800efe4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800efd6:	687a      	ldr	r2, [r7, #4]
 800efd8:	33b0      	adds	r3, #176	; 0xb0
 800efda:	009b      	lsls	r3, r3, #2
 800efdc:	4413      	add	r3, r2
 800efde:	683a      	ldr	r2, [r7, #0]
 800efe0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800efe2:	2300      	movs	r3, #0
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	370c      	adds	r7, #12
 800efe8:	46bd      	mov	sp, r7
 800efea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efee:	4770      	bx	lr

0800eff0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b087      	sub	sp, #28
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	60f8      	str	r0, [r7, #12]
 800eff8:	60b9      	str	r1, [r7, #8]
 800effa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	32b0      	adds	r2, #176	; 0xb0
 800f006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f00a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d101      	bne.n	800f016 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f012:	2303      	movs	r3, #3
 800f014:	e008      	b.n	800f028 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	68ba      	ldr	r2, [r7, #8]
 800f01a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	687a      	ldr	r2, [r7, #4]
 800f022:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f026:	2300      	movs	r3, #0
}
 800f028:	4618      	mov	r0, r3
 800f02a:	371c      	adds	r7, #28
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr

0800f034 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f034:	b480      	push	{r7}
 800f036:	b085      	sub	sp, #20
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	32b0      	adds	r2, #176	; 0xb0
 800f048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f04c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d101      	bne.n	800f058 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800f054:	2303      	movs	r3, #3
 800f056:	e004      	b.n	800f062 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	683a      	ldr	r2, [r7, #0]
 800f05c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f060:	2300      	movs	r3, #0
}
 800f062:	4618      	mov	r0, r3
 800f064:	3714      	adds	r7, #20
 800f066:	46bd      	mov	sp, r7
 800f068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06c:	4770      	bx	lr
	...

0800f070 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b084      	sub	sp, #16
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	32b0      	adds	r2, #176	; 0xb0
 800f082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f086:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f088:	2301      	movs	r3, #1
 800f08a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	32b0      	adds	r2, #176	; 0xb0
 800f096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d101      	bne.n	800f0a2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800f09e:	2303      	movs	r3, #3
 800f0a0:	e025      	b.n	800f0ee <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d11f      	bne.n	800f0ec <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800f0b4:	4b10      	ldr	r3, [pc, #64]	; (800f0f8 <USBD_CDC_TransmitPacket+0x88>)
 800f0b6:	781b      	ldrb	r3, [r3, #0]
 800f0b8:	f003 020f 	and.w	r2, r3, #15
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	4613      	mov	r3, r2
 800f0c6:	009b      	lsls	r3, r3, #2
 800f0c8:	4413      	add	r3, r2
 800f0ca:	009b      	lsls	r3, r3, #2
 800f0cc:	4403      	add	r3, r0
 800f0ce:	3318      	adds	r3, #24
 800f0d0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800f0d2:	4b09      	ldr	r3, [pc, #36]	; (800f0f8 <USBD_CDC_TransmitPacket+0x88>)
 800f0d4:	7819      	ldrb	r1, [r3, #0]
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f0e2:	6878      	ldr	r0, [r7, #4]
 800f0e4:	f006 fdf5 	bl	8015cd2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f0ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3710      	adds	r7, #16
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	200000bf 	.word	0x200000bf

0800f0fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b084      	sub	sp, #16
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	32b0      	adds	r2, #176	; 0xb0
 800f10e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f112:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	32b0      	adds	r2, #176	; 0xb0
 800f11e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d101      	bne.n	800f12a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800f126:	2303      	movs	r3, #3
 800f128:	e018      	b.n	800f15c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	7c1b      	ldrb	r3, [r3, #16]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d10a      	bne.n	800f148 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f132:	4b0c      	ldr	r3, [pc, #48]	; (800f164 <USBD_CDC_ReceivePacket+0x68>)
 800f134:	7819      	ldrb	r1, [r3, #0]
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f13c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f006 fde7 	bl	8015d14 <USBD_LL_PrepareReceive>
 800f146:	e008      	b.n	800f15a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f148:	4b06      	ldr	r3, [pc, #24]	; (800f164 <USBD_CDC_ReceivePacket+0x68>)
 800f14a:	7819      	ldrb	r1, [r3, #0]
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f152:	2340      	movs	r3, #64	; 0x40
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f006 fddd 	bl	8015d14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f15a:	2300      	movs	r3, #0
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3710      	adds	r7, #16
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}
 800f164:	200000c0 	.word	0x200000c0

0800f168 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b086      	sub	sp, #24
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	60f8      	str	r0, [r7, #12]
 800f170:	60b9      	str	r1, [r7, #8]
 800f172:	4613      	mov	r3, r2
 800f174:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d101      	bne.n	800f180 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f17c:	2303      	movs	r3, #3
 800f17e:	e01f      	b.n	800f1c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2200      	movs	r2, #0
 800f184:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	2200      	movs	r2, #0
 800f18c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	2200      	movs	r2, #0
 800f194:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d003      	beq.n	800f1a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	68ba      	ldr	r2, [r7, #8]
 800f1a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	2201      	movs	r2, #1
 800f1aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	79fa      	ldrb	r2, [r7, #7]
 800f1b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f1b4:	68f8      	ldr	r0, [r7, #12]
 800f1b6:	f006 fc57 	bl	8015a68 <USBD_LL_Init>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f1be:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3718      	adds	r7, #24
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b084      	sub	sp, #16
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d101      	bne.n	800f1e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f1dc:	2303      	movs	r3, #3
 800f1de:	e025      	b.n	800f22c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	683a      	ldr	r2, [r7, #0]
 800f1e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	32ae      	adds	r2, #174	; 0xae
 800f1f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d00f      	beq.n	800f21c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	32ae      	adds	r2, #174	; 0xae
 800f206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f20c:	f107 020e 	add.w	r2, r7, #14
 800f210:	4610      	mov	r0, r2
 800f212:	4798      	blx	r3
 800f214:	4602      	mov	r2, r0
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f222:	1c5a      	adds	r2, r3, #1
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800f22a:	2300      	movs	r3, #0
}
 800f22c:	4618      	mov	r0, r3
 800f22e:	3710      	adds	r7, #16
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}

0800f234 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b082      	sub	sp, #8
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f006 fc5f 	bl	8015b00 <USBD_LL_Start>
 800f242:	4603      	mov	r3, r0
}
 800f244:	4618      	mov	r0, r3
 800f246:	3708      	adds	r7, #8
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f24c:	b480      	push	{r7}
 800f24e:	b083      	sub	sp, #12
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f254:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f256:	4618      	mov	r0, r3
 800f258:	370c      	adds	r7, #12
 800f25a:	46bd      	mov	sp, r7
 800f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f260:	4770      	bx	lr

0800f262 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f262:	b580      	push	{r7, lr}
 800f264:	b084      	sub	sp, #16
 800f266:	af00      	add	r7, sp, #0
 800f268:	6078      	str	r0, [r7, #4]
 800f26a:	460b      	mov	r3, r1
 800f26c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f26e:	2300      	movs	r3, #0
 800f270:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d009      	beq.n	800f290 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	78fa      	ldrb	r2, [r7, #3]
 800f286:	4611      	mov	r1, r2
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	4798      	blx	r3
 800f28c:	4603      	mov	r3, r0
 800f28e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f290:	7bfb      	ldrb	r3, [r7, #15]
}
 800f292:	4618      	mov	r0, r3
 800f294:	3710      	adds	r7, #16
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}

0800f29a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f29a:	b580      	push	{r7, lr}
 800f29c:	b084      	sub	sp, #16
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	6078      	str	r0, [r7, #4]
 800f2a2:	460b      	mov	r3, r1
 800f2a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2b0:	685b      	ldr	r3, [r3, #4]
 800f2b2:	78fa      	ldrb	r2, [r7, #3]
 800f2b4:	4611      	mov	r1, r2
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	4798      	blx	r3
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d001      	beq.n	800f2c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f2c0:	2303      	movs	r3, #3
 800f2c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f2c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3710      	adds	r7, #16
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}

0800f2ce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f2ce:	b580      	push	{r7, lr}
 800f2d0:	b084      	sub	sp, #16
 800f2d2:	af00      	add	r7, sp, #0
 800f2d4:	6078      	str	r0, [r7, #4]
 800f2d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f2de:	6839      	ldr	r1, [r7, #0]
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f001 f932 	bl	801054a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f2f4:	461a      	mov	r2, r3
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f302:	f003 031f 	and.w	r3, r3, #31
 800f306:	2b02      	cmp	r3, #2
 800f308:	d01a      	beq.n	800f340 <USBD_LL_SetupStage+0x72>
 800f30a:	2b02      	cmp	r3, #2
 800f30c:	d822      	bhi.n	800f354 <USBD_LL_SetupStage+0x86>
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d002      	beq.n	800f318 <USBD_LL_SetupStage+0x4a>
 800f312:	2b01      	cmp	r3, #1
 800f314:	d00a      	beq.n	800f32c <USBD_LL_SetupStage+0x5e>
 800f316:	e01d      	b.n	800f354 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f31e:	4619      	mov	r1, r3
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f000 fb5f 	bl	800f9e4 <USBD_StdDevReq>
 800f326:	4603      	mov	r3, r0
 800f328:	73fb      	strb	r3, [r7, #15]
      break;
 800f32a:	e020      	b.n	800f36e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f332:	4619      	mov	r1, r3
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f000 fbc7 	bl	800fac8 <USBD_StdItfReq>
 800f33a:	4603      	mov	r3, r0
 800f33c:	73fb      	strb	r3, [r7, #15]
      break;
 800f33e:	e016      	b.n	800f36e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f346:	4619      	mov	r1, r3
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f000 fc29 	bl	800fba0 <USBD_StdEPReq>
 800f34e:	4603      	mov	r3, r0
 800f350:	73fb      	strb	r3, [r7, #15]
      break;
 800f352:	e00c      	b.n	800f36e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f35a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f35e:	b2db      	uxtb	r3, r3
 800f360:	4619      	mov	r1, r3
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f006 fc2c 	bl	8015bc0 <USBD_LL_StallEP>
 800f368:	4603      	mov	r3, r0
 800f36a:	73fb      	strb	r3, [r7, #15]
      break;
 800f36c:	bf00      	nop
  }

  return ret;
 800f36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f370:	4618      	mov	r0, r3
 800f372:	3710      	adds	r7, #16
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}

0800f378 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b086      	sub	sp, #24
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	60f8      	str	r0, [r7, #12]
 800f380:	460b      	mov	r3, r1
 800f382:	607a      	str	r2, [r7, #4]
 800f384:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f386:	2300      	movs	r3, #0
 800f388:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f38a:	7afb      	ldrb	r3, [r7, #11]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d16e      	bne.n	800f46e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f396:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f39e:	2b03      	cmp	r3, #3
 800f3a0:	f040 8098 	bne.w	800f4d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f3a4:	693b      	ldr	r3, [r7, #16]
 800f3a6:	689a      	ldr	r2, [r3, #8]
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	68db      	ldr	r3, [r3, #12]
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d913      	bls.n	800f3d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f3b0:	693b      	ldr	r3, [r7, #16]
 800f3b2:	689a      	ldr	r2, [r3, #8]
 800f3b4:	693b      	ldr	r3, [r7, #16]
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	1ad2      	subs	r2, r2, r3
 800f3ba:	693b      	ldr	r3, [r7, #16]
 800f3bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f3be:	693b      	ldr	r3, [r7, #16]
 800f3c0:	68da      	ldr	r2, [r3, #12]
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	689b      	ldr	r3, [r3, #8]
 800f3c6:	4293      	cmp	r3, r2
 800f3c8:	bf28      	it	cs
 800f3ca:	4613      	movcs	r3, r2
 800f3cc:	461a      	mov	r2, r3
 800f3ce:	6879      	ldr	r1, [r7, #4]
 800f3d0:	68f8      	ldr	r0, [r7, #12]
 800f3d2:	f001 f9ae 	bl	8010732 <USBD_CtlContinueRx>
 800f3d6:	e07d      	b.n	800f4d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f3de:	f003 031f 	and.w	r3, r3, #31
 800f3e2:	2b02      	cmp	r3, #2
 800f3e4:	d014      	beq.n	800f410 <USBD_LL_DataOutStage+0x98>
 800f3e6:	2b02      	cmp	r3, #2
 800f3e8:	d81d      	bhi.n	800f426 <USBD_LL_DataOutStage+0xae>
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d002      	beq.n	800f3f4 <USBD_LL_DataOutStage+0x7c>
 800f3ee:	2b01      	cmp	r3, #1
 800f3f0:	d003      	beq.n	800f3fa <USBD_LL_DataOutStage+0x82>
 800f3f2:	e018      	b.n	800f426 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	75bb      	strb	r3, [r7, #22]
            break;
 800f3f8:	e018      	b.n	800f42c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f400:	b2db      	uxtb	r3, r3
 800f402:	4619      	mov	r1, r3
 800f404:	68f8      	ldr	r0, [r7, #12]
 800f406:	f000 fa5e 	bl	800f8c6 <USBD_CoreFindIF>
 800f40a:	4603      	mov	r3, r0
 800f40c:	75bb      	strb	r3, [r7, #22]
            break;
 800f40e:	e00d      	b.n	800f42c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f416:	b2db      	uxtb	r3, r3
 800f418:	4619      	mov	r1, r3
 800f41a:	68f8      	ldr	r0, [r7, #12]
 800f41c:	f000 fa60 	bl	800f8e0 <USBD_CoreFindEP>
 800f420:	4603      	mov	r3, r0
 800f422:	75bb      	strb	r3, [r7, #22]
            break;
 800f424:	e002      	b.n	800f42c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f426:	2300      	movs	r3, #0
 800f428:	75bb      	strb	r3, [r7, #22]
            break;
 800f42a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f42c:	7dbb      	ldrb	r3, [r7, #22]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d119      	bne.n	800f466 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	2b03      	cmp	r3, #3
 800f43c:	d113      	bne.n	800f466 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f43e:	7dba      	ldrb	r2, [r7, #22]
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	32ae      	adds	r2, #174	; 0xae
 800f444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f448:	691b      	ldr	r3, [r3, #16]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d00b      	beq.n	800f466 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f44e:	7dba      	ldrb	r2, [r7, #22]
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f456:	7dba      	ldrb	r2, [r7, #22]
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	32ae      	adds	r2, #174	; 0xae
 800f45c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f460:	691b      	ldr	r3, [r3, #16]
 800f462:	68f8      	ldr	r0, [r7, #12]
 800f464:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f466:	68f8      	ldr	r0, [r7, #12]
 800f468:	f001 f974 	bl	8010754 <USBD_CtlSendStatus>
 800f46c:	e032      	b.n	800f4d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f46e:	7afb      	ldrb	r3, [r7, #11]
 800f470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f474:	b2db      	uxtb	r3, r3
 800f476:	4619      	mov	r1, r3
 800f478:	68f8      	ldr	r0, [r7, #12]
 800f47a:	f000 fa31 	bl	800f8e0 <USBD_CoreFindEP>
 800f47e:	4603      	mov	r3, r0
 800f480:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f482:	7dbb      	ldrb	r3, [r7, #22]
 800f484:	2bff      	cmp	r3, #255	; 0xff
 800f486:	d025      	beq.n	800f4d4 <USBD_LL_DataOutStage+0x15c>
 800f488:	7dbb      	ldrb	r3, [r7, #22]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d122      	bne.n	800f4d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f494:	b2db      	uxtb	r3, r3
 800f496:	2b03      	cmp	r3, #3
 800f498:	d117      	bne.n	800f4ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f49a:	7dba      	ldrb	r2, [r7, #22]
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	32ae      	adds	r2, #174	; 0xae
 800f4a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4a4:	699b      	ldr	r3, [r3, #24]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d00f      	beq.n	800f4ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f4aa:	7dba      	ldrb	r2, [r7, #22]
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f4b2:	7dba      	ldrb	r2, [r7, #22]
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	32ae      	adds	r2, #174	; 0xae
 800f4b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4bc:	699b      	ldr	r3, [r3, #24]
 800f4be:	7afa      	ldrb	r2, [r7, #11]
 800f4c0:	4611      	mov	r1, r2
 800f4c2:	68f8      	ldr	r0, [r7, #12]
 800f4c4:	4798      	blx	r3
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f4ca:	7dfb      	ldrb	r3, [r7, #23]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d001      	beq.n	800f4d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f4d0:	7dfb      	ldrb	r3, [r7, #23]
 800f4d2:	e000      	b.n	800f4d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f4d4:	2300      	movs	r3, #0
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3718      	adds	r7, #24
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}

0800f4de <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f4de:	b580      	push	{r7, lr}
 800f4e0:	b086      	sub	sp, #24
 800f4e2:	af00      	add	r7, sp, #0
 800f4e4:	60f8      	str	r0, [r7, #12]
 800f4e6:	460b      	mov	r3, r1
 800f4e8:	607a      	str	r2, [r7, #4]
 800f4ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f4ec:	7afb      	ldrb	r3, [r7, #11]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d16f      	bne.n	800f5d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	3314      	adds	r3, #20
 800f4f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f4fe:	2b02      	cmp	r3, #2
 800f500:	d15a      	bne.n	800f5b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f502:	693b      	ldr	r3, [r7, #16]
 800f504:	689a      	ldr	r2, [r3, #8]
 800f506:	693b      	ldr	r3, [r7, #16]
 800f508:	68db      	ldr	r3, [r3, #12]
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d914      	bls.n	800f538 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	689a      	ldr	r2, [r3, #8]
 800f512:	693b      	ldr	r3, [r7, #16]
 800f514:	68db      	ldr	r3, [r3, #12]
 800f516:	1ad2      	subs	r2, r2, r3
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f51c:	693b      	ldr	r3, [r7, #16]
 800f51e:	689b      	ldr	r3, [r3, #8]
 800f520:	461a      	mov	r2, r3
 800f522:	6879      	ldr	r1, [r7, #4]
 800f524:	68f8      	ldr	r0, [r7, #12]
 800f526:	f001 f8d6 	bl	80106d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f52a:	2300      	movs	r3, #0
 800f52c:	2200      	movs	r2, #0
 800f52e:	2100      	movs	r1, #0
 800f530:	68f8      	ldr	r0, [r7, #12]
 800f532:	f006 fbef 	bl	8015d14 <USBD_LL_PrepareReceive>
 800f536:	e03f      	b.n	800f5b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	68da      	ldr	r2, [r3, #12]
 800f53c:	693b      	ldr	r3, [r7, #16]
 800f53e:	689b      	ldr	r3, [r3, #8]
 800f540:	429a      	cmp	r2, r3
 800f542:	d11c      	bne.n	800f57e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	685a      	ldr	r2, [r3, #4]
 800f548:	693b      	ldr	r3, [r7, #16]
 800f54a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f54c:	429a      	cmp	r2, r3
 800f54e:	d316      	bcc.n	800f57e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f550:	693b      	ldr	r3, [r7, #16]
 800f552:	685a      	ldr	r2, [r3, #4]
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f55a:	429a      	cmp	r2, r3
 800f55c:	d20f      	bcs.n	800f57e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f55e:	2200      	movs	r2, #0
 800f560:	2100      	movs	r1, #0
 800f562:	68f8      	ldr	r0, [r7, #12]
 800f564:	f001 f8b7 	bl	80106d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	2200      	movs	r2, #0
 800f56c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f570:	2300      	movs	r3, #0
 800f572:	2200      	movs	r2, #0
 800f574:	2100      	movs	r1, #0
 800f576:	68f8      	ldr	r0, [r7, #12]
 800f578:	f006 fbcc 	bl	8015d14 <USBD_LL_PrepareReceive>
 800f57c:	e01c      	b.n	800f5b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f584:	b2db      	uxtb	r3, r3
 800f586:	2b03      	cmp	r3, #3
 800f588:	d10f      	bne.n	800f5aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f590:	68db      	ldr	r3, [r3, #12]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d009      	beq.n	800f5aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	2200      	movs	r2, #0
 800f59a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5a4:	68db      	ldr	r3, [r3, #12]
 800f5a6:	68f8      	ldr	r0, [r7, #12]
 800f5a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f5aa:	2180      	movs	r1, #128	; 0x80
 800f5ac:	68f8      	ldr	r0, [r7, #12]
 800f5ae:	f006 fb07 	bl	8015bc0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f5b2:	68f8      	ldr	r0, [r7, #12]
 800f5b4:	f001 f8e1 	bl	801077a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d03a      	beq.n	800f638 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f5c2:	68f8      	ldr	r0, [r7, #12]
 800f5c4:	f7ff fe42 	bl	800f24c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f5d0:	e032      	b.n	800f638 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f5d2:	7afb      	ldrb	r3, [r7, #11]
 800f5d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f5d8:	b2db      	uxtb	r3, r3
 800f5da:	4619      	mov	r1, r3
 800f5dc:	68f8      	ldr	r0, [r7, #12]
 800f5de:	f000 f97f 	bl	800f8e0 <USBD_CoreFindEP>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f5e6:	7dfb      	ldrb	r3, [r7, #23]
 800f5e8:	2bff      	cmp	r3, #255	; 0xff
 800f5ea:	d025      	beq.n	800f638 <USBD_LL_DataInStage+0x15a>
 800f5ec:	7dfb      	ldrb	r3, [r7, #23]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d122      	bne.n	800f638 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5f8:	b2db      	uxtb	r3, r3
 800f5fa:	2b03      	cmp	r3, #3
 800f5fc:	d11c      	bne.n	800f638 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f5fe:	7dfa      	ldrb	r2, [r7, #23]
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	32ae      	adds	r2, #174	; 0xae
 800f604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f608:	695b      	ldr	r3, [r3, #20]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d014      	beq.n	800f638 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f60e:	7dfa      	ldrb	r2, [r7, #23]
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f616:	7dfa      	ldrb	r2, [r7, #23]
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	32ae      	adds	r2, #174	; 0xae
 800f61c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f620:	695b      	ldr	r3, [r3, #20]
 800f622:	7afa      	ldrb	r2, [r7, #11]
 800f624:	4611      	mov	r1, r2
 800f626:	68f8      	ldr	r0, [r7, #12]
 800f628:	4798      	blx	r3
 800f62a:	4603      	mov	r3, r0
 800f62c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f62e:	7dbb      	ldrb	r3, [r7, #22]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d001      	beq.n	800f638 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f634:	7dbb      	ldrb	r3, [r7, #22]
 800f636:	e000      	b.n	800f63a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f638:	2300      	movs	r3, #0
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	3718      	adds	r7, #24
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}

0800f642 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f642:	b580      	push	{r7, lr}
 800f644:	b084      	sub	sp, #16
 800f646:	af00      	add	r7, sp, #0
 800f648:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f64a:	2300      	movs	r3, #0
 800f64c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2201      	movs	r2, #1
 800f652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2200      	movs	r2, #0
 800f65a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2200      	movs	r2, #0
 800f662:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2200      	movs	r2, #0
 800f668:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2200      	movs	r2, #0
 800f670:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d014      	beq.n	800f6a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f684:	685b      	ldr	r3, [r3, #4]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d00e      	beq.n	800f6a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f690:	685b      	ldr	r3, [r3, #4]
 800f692:	687a      	ldr	r2, [r7, #4]
 800f694:	6852      	ldr	r2, [r2, #4]
 800f696:	b2d2      	uxtb	r2, r2
 800f698:	4611      	mov	r1, r2
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	4798      	blx	r3
 800f69e:	4603      	mov	r3, r0
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d001      	beq.n	800f6a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f6a4:	2303      	movs	r3, #3
 800f6a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f6a8:	2340      	movs	r3, #64	; 0x40
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	2100      	movs	r1, #0
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f006 fa41 	bl	8015b36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2201      	movs	r2, #1
 800f6b8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2240      	movs	r2, #64	; 0x40
 800f6c0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f6c4:	2340      	movs	r3, #64	; 0x40
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	2180      	movs	r1, #128	; 0x80
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f006 fa33 	bl	8015b36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2201      	movs	r2, #1
 800f6d4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2240      	movs	r2, #64	; 0x40
 800f6da:	621a      	str	r2, [r3, #32]

  return ret;
 800f6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3710      	adds	r7, #16
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}

0800f6e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f6e6:	b480      	push	{r7}
 800f6e8:	b083      	sub	sp, #12
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
 800f6ee:	460b      	mov	r3, r1
 800f6f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	78fa      	ldrb	r2, [r7, #3]
 800f6f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f6f8:	2300      	movs	r3, #0
}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	370c      	adds	r7, #12
 800f6fe:	46bd      	mov	sp, r7
 800f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f704:	4770      	bx	lr

0800f706 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f706:	b480      	push	{r7}
 800f708:	b083      	sub	sp, #12
 800f70a:	af00      	add	r7, sp, #0
 800f70c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f714:	b2da      	uxtb	r2, r3
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2204      	movs	r2, #4
 800f720:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f724:	2300      	movs	r3, #0
}
 800f726:	4618      	mov	r0, r3
 800f728:	370c      	adds	r7, #12
 800f72a:	46bd      	mov	sp, r7
 800f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f730:	4770      	bx	lr

0800f732 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f732:	b480      	push	{r7}
 800f734:	b083      	sub	sp, #12
 800f736:	af00      	add	r7, sp, #0
 800f738:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f740:	b2db      	uxtb	r3, r3
 800f742:	2b04      	cmp	r3, #4
 800f744:	d106      	bne.n	800f754 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f74c:	b2da      	uxtb	r2, r3
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f754:	2300      	movs	r3, #0
}
 800f756:	4618      	mov	r0, r3
 800f758:	370c      	adds	r7, #12
 800f75a:	46bd      	mov	sp, r7
 800f75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f760:	4770      	bx	lr

0800f762 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f762:	b580      	push	{r7, lr}
 800f764:	b082      	sub	sp, #8
 800f766:	af00      	add	r7, sp, #0
 800f768:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f770:	b2db      	uxtb	r3, r3
 800f772:	2b03      	cmp	r3, #3
 800f774:	d110      	bne.n	800f798 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d00b      	beq.n	800f798 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f786:	69db      	ldr	r3, [r3, #28]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d005      	beq.n	800f798 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f792:	69db      	ldr	r3, [r3, #28]
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f798:	2300      	movs	r3, #0
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3708      	adds	r7, #8
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}

0800f7a2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f7a2:	b580      	push	{r7, lr}
 800f7a4:	b082      	sub	sp, #8
 800f7a6:	af00      	add	r7, sp, #0
 800f7a8:	6078      	str	r0, [r7, #4]
 800f7aa:	460b      	mov	r3, r1
 800f7ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	32ae      	adds	r2, #174	; 0xae
 800f7b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d101      	bne.n	800f7c4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f7c0:	2303      	movs	r3, #3
 800f7c2:	e01c      	b.n	800f7fe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7ca:	b2db      	uxtb	r3, r3
 800f7cc:	2b03      	cmp	r3, #3
 800f7ce:	d115      	bne.n	800f7fc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	32ae      	adds	r2, #174	; 0xae
 800f7da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7de:	6a1b      	ldr	r3, [r3, #32]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d00b      	beq.n	800f7fc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	32ae      	adds	r2, #174	; 0xae
 800f7ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7f2:	6a1b      	ldr	r3, [r3, #32]
 800f7f4:	78fa      	ldrb	r2, [r7, #3]
 800f7f6:	4611      	mov	r1, r2
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f7fc:	2300      	movs	r3, #0
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3708      	adds	r7, #8
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}

0800f806 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f806:	b580      	push	{r7, lr}
 800f808:	b082      	sub	sp, #8
 800f80a:	af00      	add	r7, sp, #0
 800f80c:	6078      	str	r0, [r7, #4]
 800f80e:	460b      	mov	r3, r1
 800f810:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	32ae      	adds	r2, #174	; 0xae
 800f81c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d101      	bne.n	800f828 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800f824:	2303      	movs	r3, #3
 800f826:	e01c      	b.n	800f862 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f82e:	b2db      	uxtb	r3, r3
 800f830:	2b03      	cmp	r3, #3
 800f832:	d115      	bne.n	800f860 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	32ae      	adds	r2, #174	; 0xae
 800f83e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f844:	2b00      	cmp	r3, #0
 800f846:	d00b      	beq.n	800f860 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	32ae      	adds	r2, #174	; 0xae
 800f852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f858:	78fa      	ldrb	r2, [r7, #3]
 800f85a:	4611      	mov	r1, r2
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f860:	2300      	movs	r3, #0
}
 800f862:	4618      	mov	r0, r3
 800f864:	3708      	adds	r7, #8
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}

0800f86a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f86a:	b480      	push	{r7}
 800f86c:	b083      	sub	sp, #12
 800f86e:	af00      	add	r7, sp, #0
 800f870:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f872:	2300      	movs	r3, #0
}
 800f874:	4618      	mov	r0, r3
 800f876:	370c      	adds	r7, #12
 800f878:	46bd      	mov	sp, r7
 800f87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87e:	4770      	bx	lr

0800f880 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b084      	sub	sp, #16
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f888:	2300      	movs	r3, #0
 800f88a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2201      	movs	r2, #1
 800f890:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d00e      	beq.n	800f8bc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8a4:	685b      	ldr	r3, [r3, #4]
 800f8a6:	687a      	ldr	r2, [r7, #4]
 800f8a8:	6852      	ldr	r2, [r2, #4]
 800f8aa:	b2d2      	uxtb	r2, r2
 800f8ac:	4611      	mov	r1, r2
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	4798      	blx	r3
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d001      	beq.n	800f8bc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f8b8:	2303      	movs	r3, #3
 800f8ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8be:	4618      	mov	r0, r3
 800f8c0:	3710      	adds	r7, #16
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}

0800f8c6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f8c6:	b480      	push	{r7}
 800f8c8:	b083      	sub	sp, #12
 800f8ca:	af00      	add	r7, sp, #0
 800f8cc:	6078      	str	r0, [r7, #4]
 800f8ce:	460b      	mov	r3, r1
 800f8d0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f8d2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	370c      	adds	r7, #12
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr

0800f8e0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f8e0:	b480      	push	{r7}
 800f8e2:	b083      	sub	sp, #12
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	460b      	mov	r3, r1
 800f8ea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f8ec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	370c      	adds	r7, #12
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f8:	4770      	bx	lr

0800f8fa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f8fa:	b580      	push	{r7, lr}
 800f8fc:	b086      	sub	sp, #24
 800f8fe:	af00      	add	r7, sp, #0
 800f900:	6078      	str	r0, [r7, #4]
 800f902:	460b      	mov	r3, r1
 800f904:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f90e:	2300      	movs	r3, #0
 800f910:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	885b      	ldrh	r3, [r3, #2]
 800f916:	b29a      	uxth	r2, r3
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	781b      	ldrb	r3, [r3, #0]
 800f91c:	b29b      	uxth	r3, r3
 800f91e:	429a      	cmp	r2, r3
 800f920:	d920      	bls.n	800f964 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	b29b      	uxth	r3, r3
 800f928:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f92a:	e013      	b.n	800f954 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f92c:	f107 030a 	add.w	r3, r7, #10
 800f930:	4619      	mov	r1, r3
 800f932:	6978      	ldr	r0, [r7, #20]
 800f934:	f000 f81b 	bl	800f96e <USBD_GetNextDesc>
 800f938:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	785b      	ldrb	r3, [r3, #1]
 800f93e:	2b05      	cmp	r3, #5
 800f940:	d108      	bne.n	800f954 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f942:	697b      	ldr	r3, [r7, #20]
 800f944:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f946:	693b      	ldr	r3, [r7, #16]
 800f948:	789b      	ldrb	r3, [r3, #2]
 800f94a:	78fa      	ldrb	r2, [r7, #3]
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d008      	beq.n	800f962 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f950:	2300      	movs	r3, #0
 800f952:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	885b      	ldrh	r3, [r3, #2]
 800f958:	b29a      	uxth	r2, r3
 800f95a:	897b      	ldrh	r3, [r7, #10]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d8e5      	bhi.n	800f92c <USBD_GetEpDesc+0x32>
 800f960:	e000      	b.n	800f964 <USBD_GetEpDesc+0x6a>
          break;
 800f962:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f964:	693b      	ldr	r3, [r7, #16]
}
 800f966:	4618      	mov	r0, r3
 800f968:	3718      	adds	r7, #24
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}

0800f96e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f96e:	b480      	push	{r7}
 800f970:	b085      	sub	sp, #20
 800f972:	af00      	add	r7, sp, #0
 800f974:	6078      	str	r0, [r7, #4]
 800f976:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	881a      	ldrh	r2, [r3, #0]
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	b29b      	uxth	r3, r3
 800f986:	4413      	add	r3, r2
 800f988:	b29a      	uxth	r2, r3
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	461a      	mov	r2, r3
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	4413      	add	r3, r2
 800f998:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f99a:	68fb      	ldr	r3, [r7, #12]
}
 800f99c:	4618      	mov	r0, r3
 800f99e:	3714      	adds	r7, #20
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a6:	4770      	bx	lr

0800f9a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f9a8:	b480      	push	{r7}
 800f9aa:	b087      	sub	sp, #28
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	781b      	ldrb	r3, [r3, #0]
 800f9b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	3301      	adds	r3, #1
 800f9be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f9c0:	697b      	ldr	r3, [r7, #20]
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f9c6:	8a3b      	ldrh	r3, [r7, #16]
 800f9c8:	021b      	lsls	r3, r3, #8
 800f9ca:	b21a      	sxth	r2, r3
 800f9cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f9d0:	4313      	orrs	r3, r2
 800f9d2:	b21b      	sxth	r3, r3
 800f9d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f9d6:	89fb      	ldrh	r3, [r7, #14]
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	371c      	adds	r7, #28
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr

0800f9e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b084      	sub	sp, #16
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	781b      	ldrb	r3, [r3, #0]
 800f9f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f9fa:	2b40      	cmp	r3, #64	; 0x40
 800f9fc:	d005      	beq.n	800fa0a <USBD_StdDevReq+0x26>
 800f9fe:	2b40      	cmp	r3, #64	; 0x40
 800fa00:	d857      	bhi.n	800fab2 <USBD_StdDevReq+0xce>
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d00f      	beq.n	800fa26 <USBD_StdDevReq+0x42>
 800fa06:	2b20      	cmp	r3, #32
 800fa08:	d153      	bne.n	800fab2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	32ae      	adds	r2, #174	; 0xae
 800fa14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa18:	689b      	ldr	r3, [r3, #8]
 800fa1a:	6839      	ldr	r1, [r7, #0]
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	4798      	blx	r3
 800fa20:	4603      	mov	r3, r0
 800fa22:	73fb      	strb	r3, [r7, #15]
      break;
 800fa24:	e04a      	b.n	800fabc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	785b      	ldrb	r3, [r3, #1]
 800fa2a:	2b09      	cmp	r3, #9
 800fa2c:	d83b      	bhi.n	800faa6 <USBD_StdDevReq+0xc2>
 800fa2e:	a201      	add	r2, pc, #4	; (adr r2, 800fa34 <USBD_StdDevReq+0x50>)
 800fa30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa34:	0800fa89 	.word	0x0800fa89
 800fa38:	0800fa9d 	.word	0x0800fa9d
 800fa3c:	0800faa7 	.word	0x0800faa7
 800fa40:	0800fa93 	.word	0x0800fa93
 800fa44:	0800faa7 	.word	0x0800faa7
 800fa48:	0800fa67 	.word	0x0800fa67
 800fa4c:	0800fa5d 	.word	0x0800fa5d
 800fa50:	0800faa7 	.word	0x0800faa7
 800fa54:	0800fa7f 	.word	0x0800fa7f
 800fa58:	0800fa71 	.word	0x0800fa71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fa5c:	6839      	ldr	r1, [r7, #0]
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f000 fa3c 	bl	800fedc <USBD_GetDescriptor>
          break;
 800fa64:	e024      	b.n	800fab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fa66:	6839      	ldr	r1, [r7, #0]
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f000 fbcb 	bl	8010204 <USBD_SetAddress>
          break;
 800fa6e:	e01f      	b.n	800fab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fa70:	6839      	ldr	r1, [r7, #0]
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f000 fc0a 	bl	801028c <USBD_SetConfig>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	73fb      	strb	r3, [r7, #15]
          break;
 800fa7c:	e018      	b.n	800fab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fa7e:	6839      	ldr	r1, [r7, #0]
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f000 fcad 	bl	80103e0 <USBD_GetConfig>
          break;
 800fa86:	e013      	b.n	800fab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fa88:	6839      	ldr	r1, [r7, #0]
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f000 fcde 	bl	801044c <USBD_GetStatus>
          break;
 800fa90:	e00e      	b.n	800fab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fa92:	6839      	ldr	r1, [r7, #0]
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f000 fd0d 	bl	80104b4 <USBD_SetFeature>
          break;
 800fa9a:	e009      	b.n	800fab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fa9c:	6839      	ldr	r1, [r7, #0]
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	f000 fd31 	bl	8010506 <USBD_ClrFeature>
          break;
 800faa4:	e004      	b.n	800fab0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800faa6:	6839      	ldr	r1, [r7, #0]
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f000 fd88 	bl	80105be <USBD_CtlError>
          break;
 800faae:	bf00      	nop
      }
      break;
 800fab0:	e004      	b.n	800fabc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800fab2:	6839      	ldr	r1, [r7, #0]
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	f000 fd82 	bl	80105be <USBD_CtlError>
      break;
 800faba:	bf00      	nop
  }

  return ret;
 800fabc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3710      	adds	r7, #16
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}
 800fac6:	bf00      	nop

0800fac8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b084      	sub	sp, #16
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
 800fad0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fad2:	2300      	movs	r3, #0
 800fad4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	781b      	ldrb	r3, [r3, #0]
 800fada:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fade:	2b40      	cmp	r3, #64	; 0x40
 800fae0:	d005      	beq.n	800faee <USBD_StdItfReq+0x26>
 800fae2:	2b40      	cmp	r3, #64	; 0x40
 800fae4:	d852      	bhi.n	800fb8c <USBD_StdItfReq+0xc4>
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d001      	beq.n	800faee <USBD_StdItfReq+0x26>
 800faea:	2b20      	cmp	r3, #32
 800faec:	d14e      	bne.n	800fb8c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800faf4:	b2db      	uxtb	r3, r3
 800faf6:	3b01      	subs	r3, #1
 800faf8:	2b02      	cmp	r3, #2
 800fafa:	d840      	bhi.n	800fb7e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	889b      	ldrh	r3, [r3, #4]
 800fb00:	b2db      	uxtb	r3, r3
 800fb02:	2b01      	cmp	r3, #1
 800fb04:	d836      	bhi.n	800fb74 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	889b      	ldrh	r3, [r3, #4]
 800fb0a:	b2db      	uxtb	r3, r3
 800fb0c:	4619      	mov	r1, r3
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f7ff fed9 	bl	800f8c6 <USBD_CoreFindIF>
 800fb14:	4603      	mov	r3, r0
 800fb16:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fb18:	7bbb      	ldrb	r3, [r7, #14]
 800fb1a:	2bff      	cmp	r3, #255	; 0xff
 800fb1c:	d01d      	beq.n	800fb5a <USBD_StdItfReq+0x92>
 800fb1e:	7bbb      	ldrb	r3, [r7, #14]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d11a      	bne.n	800fb5a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800fb24:	7bba      	ldrb	r2, [r7, #14]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	32ae      	adds	r2, #174	; 0xae
 800fb2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb2e:	689b      	ldr	r3, [r3, #8]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d00f      	beq.n	800fb54 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800fb34:	7bba      	ldrb	r2, [r7, #14]
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fb3c:	7bba      	ldrb	r2, [r7, #14]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	32ae      	adds	r2, #174	; 0xae
 800fb42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb46:	689b      	ldr	r3, [r3, #8]
 800fb48:	6839      	ldr	r1, [r7, #0]
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	4798      	blx	r3
 800fb4e:	4603      	mov	r3, r0
 800fb50:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800fb52:	e004      	b.n	800fb5e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800fb54:	2303      	movs	r3, #3
 800fb56:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800fb58:	e001      	b.n	800fb5e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800fb5a:	2303      	movs	r3, #3
 800fb5c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	88db      	ldrh	r3, [r3, #6]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d110      	bne.n	800fb88 <USBD_StdItfReq+0xc0>
 800fb66:	7bfb      	ldrb	r3, [r7, #15]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d10d      	bne.n	800fb88 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f000 fdf1 	bl	8010754 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fb72:	e009      	b.n	800fb88 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800fb74:	6839      	ldr	r1, [r7, #0]
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f000 fd21 	bl	80105be <USBD_CtlError>
          break;
 800fb7c:	e004      	b.n	800fb88 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800fb7e:	6839      	ldr	r1, [r7, #0]
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f000 fd1c 	bl	80105be <USBD_CtlError>
          break;
 800fb86:	e000      	b.n	800fb8a <USBD_StdItfReq+0xc2>
          break;
 800fb88:	bf00      	nop
      }
      break;
 800fb8a:	e004      	b.n	800fb96 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800fb8c:	6839      	ldr	r1, [r7, #0]
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f000 fd15 	bl	80105be <USBD_CtlError>
      break;
 800fb94:	bf00      	nop
  }

  return ret;
 800fb96:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3710      	adds	r7, #16
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b084      	sub	sp, #16
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
 800fba8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	889b      	ldrh	r3, [r3, #4]
 800fbb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	781b      	ldrb	r3, [r3, #0]
 800fbb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fbbc:	2b40      	cmp	r3, #64	; 0x40
 800fbbe:	d007      	beq.n	800fbd0 <USBD_StdEPReq+0x30>
 800fbc0:	2b40      	cmp	r3, #64	; 0x40
 800fbc2:	f200 817f 	bhi.w	800fec4 <USBD_StdEPReq+0x324>
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d02a      	beq.n	800fc20 <USBD_StdEPReq+0x80>
 800fbca:	2b20      	cmp	r3, #32
 800fbcc:	f040 817a 	bne.w	800fec4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800fbd0:	7bbb      	ldrb	r3, [r7, #14]
 800fbd2:	4619      	mov	r1, r3
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f7ff fe83 	bl	800f8e0 <USBD_CoreFindEP>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fbde:	7b7b      	ldrb	r3, [r7, #13]
 800fbe0:	2bff      	cmp	r3, #255	; 0xff
 800fbe2:	f000 8174 	beq.w	800fece <USBD_StdEPReq+0x32e>
 800fbe6:	7b7b      	ldrb	r3, [r7, #13]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	f040 8170 	bne.w	800fece <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800fbee:	7b7a      	ldrb	r2, [r7, #13]
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800fbf6:	7b7a      	ldrb	r2, [r7, #13]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	32ae      	adds	r2, #174	; 0xae
 800fbfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc00:	689b      	ldr	r3, [r3, #8]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	f000 8163 	beq.w	800fece <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800fc08:	7b7a      	ldrb	r2, [r7, #13]
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	32ae      	adds	r2, #174	; 0xae
 800fc0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc12:	689b      	ldr	r3, [r3, #8]
 800fc14:	6839      	ldr	r1, [r7, #0]
 800fc16:	6878      	ldr	r0, [r7, #4]
 800fc18:	4798      	blx	r3
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800fc1e:	e156      	b.n	800fece <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	785b      	ldrb	r3, [r3, #1]
 800fc24:	2b03      	cmp	r3, #3
 800fc26:	d008      	beq.n	800fc3a <USBD_StdEPReq+0x9a>
 800fc28:	2b03      	cmp	r3, #3
 800fc2a:	f300 8145 	bgt.w	800feb8 <USBD_StdEPReq+0x318>
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	f000 809b 	beq.w	800fd6a <USBD_StdEPReq+0x1ca>
 800fc34:	2b01      	cmp	r3, #1
 800fc36:	d03c      	beq.n	800fcb2 <USBD_StdEPReq+0x112>
 800fc38:	e13e      	b.n	800feb8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc40:	b2db      	uxtb	r3, r3
 800fc42:	2b02      	cmp	r3, #2
 800fc44:	d002      	beq.n	800fc4c <USBD_StdEPReq+0xac>
 800fc46:	2b03      	cmp	r3, #3
 800fc48:	d016      	beq.n	800fc78 <USBD_StdEPReq+0xd8>
 800fc4a:	e02c      	b.n	800fca6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fc4c:	7bbb      	ldrb	r3, [r7, #14]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d00d      	beq.n	800fc6e <USBD_StdEPReq+0xce>
 800fc52:	7bbb      	ldrb	r3, [r7, #14]
 800fc54:	2b80      	cmp	r3, #128	; 0x80
 800fc56:	d00a      	beq.n	800fc6e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc58:	7bbb      	ldrb	r3, [r7, #14]
 800fc5a:	4619      	mov	r1, r3
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f005 ffaf 	bl	8015bc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc62:	2180      	movs	r1, #128	; 0x80
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f005 ffab 	bl	8015bc0 <USBD_LL_StallEP>
 800fc6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fc6c:	e020      	b.n	800fcb0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800fc6e:	6839      	ldr	r1, [r7, #0]
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f000 fca4 	bl	80105be <USBD_CtlError>
              break;
 800fc76:	e01b      	b.n	800fcb0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	885b      	ldrh	r3, [r3, #2]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d10e      	bne.n	800fc9e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fc80:	7bbb      	ldrb	r3, [r7, #14]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d00b      	beq.n	800fc9e <USBD_StdEPReq+0xfe>
 800fc86:	7bbb      	ldrb	r3, [r7, #14]
 800fc88:	2b80      	cmp	r3, #128	; 0x80
 800fc8a:	d008      	beq.n	800fc9e <USBD_StdEPReq+0xfe>
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	88db      	ldrh	r3, [r3, #6]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d104      	bne.n	800fc9e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc94:	7bbb      	ldrb	r3, [r7, #14]
 800fc96:	4619      	mov	r1, r3
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	f005 ff91 	bl	8015bc0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f000 fd58 	bl	8010754 <USBD_CtlSendStatus>

              break;
 800fca4:	e004      	b.n	800fcb0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800fca6:	6839      	ldr	r1, [r7, #0]
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f000 fc88 	bl	80105be <USBD_CtlError>
              break;
 800fcae:	bf00      	nop
          }
          break;
 800fcb0:	e107      	b.n	800fec2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcb8:	b2db      	uxtb	r3, r3
 800fcba:	2b02      	cmp	r3, #2
 800fcbc:	d002      	beq.n	800fcc4 <USBD_StdEPReq+0x124>
 800fcbe:	2b03      	cmp	r3, #3
 800fcc0:	d016      	beq.n	800fcf0 <USBD_StdEPReq+0x150>
 800fcc2:	e04b      	b.n	800fd5c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fcc4:	7bbb      	ldrb	r3, [r7, #14]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d00d      	beq.n	800fce6 <USBD_StdEPReq+0x146>
 800fcca:	7bbb      	ldrb	r3, [r7, #14]
 800fccc:	2b80      	cmp	r3, #128	; 0x80
 800fcce:	d00a      	beq.n	800fce6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fcd0:	7bbb      	ldrb	r3, [r7, #14]
 800fcd2:	4619      	mov	r1, r3
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f005 ff73 	bl	8015bc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fcda:	2180      	movs	r1, #128	; 0x80
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f005 ff6f 	bl	8015bc0 <USBD_LL_StallEP>
 800fce2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fce4:	e040      	b.n	800fd68 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800fce6:	6839      	ldr	r1, [r7, #0]
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f000 fc68 	bl	80105be <USBD_CtlError>
              break;
 800fcee:	e03b      	b.n	800fd68 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	885b      	ldrh	r3, [r3, #2]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d136      	bne.n	800fd66 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fcf8:	7bbb      	ldrb	r3, [r7, #14]
 800fcfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d004      	beq.n	800fd0c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fd02:	7bbb      	ldrb	r3, [r7, #14]
 800fd04:	4619      	mov	r1, r3
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f005 ff79 	bl	8015bfe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f000 fd21 	bl	8010754 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800fd12:	7bbb      	ldrb	r3, [r7, #14]
 800fd14:	4619      	mov	r1, r3
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f7ff fde2 	bl	800f8e0 <USBD_CoreFindEP>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fd20:	7b7b      	ldrb	r3, [r7, #13]
 800fd22:	2bff      	cmp	r3, #255	; 0xff
 800fd24:	d01f      	beq.n	800fd66 <USBD_StdEPReq+0x1c6>
 800fd26:	7b7b      	ldrb	r3, [r7, #13]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d11c      	bne.n	800fd66 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800fd2c:	7b7a      	ldrb	r2, [r7, #13]
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800fd34:	7b7a      	ldrb	r2, [r7, #13]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	32ae      	adds	r2, #174	; 0xae
 800fd3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd3e:	689b      	ldr	r3, [r3, #8]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d010      	beq.n	800fd66 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fd44:	7b7a      	ldrb	r2, [r7, #13]
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	32ae      	adds	r2, #174	; 0xae
 800fd4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd4e:	689b      	ldr	r3, [r3, #8]
 800fd50:	6839      	ldr	r1, [r7, #0]
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	4798      	blx	r3
 800fd56:	4603      	mov	r3, r0
 800fd58:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800fd5a:	e004      	b.n	800fd66 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800fd5c:	6839      	ldr	r1, [r7, #0]
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f000 fc2d 	bl	80105be <USBD_CtlError>
              break;
 800fd64:	e000      	b.n	800fd68 <USBD_StdEPReq+0x1c8>
              break;
 800fd66:	bf00      	nop
          }
          break;
 800fd68:	e0ab      	b.n	800fec2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd70:	b2db      	uxtb	r3, r3
 800fd72:	2b02      	cmp	r3, #2
 800fd74:	d002      	beq.n	800fd7c <USBD_StdEPReq+0x1dc>
 800fd76:	2b03      	cmp	r3, #3
 800fd78:	d032      	beq.n	800fde0 <USBD_StdEPReq+0x240>
 800fd7a:	e097      	b.n	800feac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fd7c:	7bbb      	ldrb	r3, [r7, #14]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d007      	beq.n	800fd92 <USBD_StdEPReq+0x1f2>
 800fd82:	7bbb      	ldrb	r3, [r7, #14]
 800fd84:	2b80      	cmp	r3, #128	; 0x80
 800fd86:	d004      	beq.n	800fd92 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800fd88:	6839      	ldr	r1, [r7, #0]
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f000 fc17 	bl	80105be <USBD_CtlError>
                break;
 800fd90:	e091      	b.n	800feb6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	da0b      	bge.n	800fdb2 <USBD_StdEPReq+0x212>
 800fd9a:	7bbb      	ldrb	r3, [r7, #14]
 800fd9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fda0:	4613      	mov	r3, r2
 800fda2:	009b      	lsls	r3, r3, #2
 800fda4:	4413      	add	r3, r2
 800fda6:	009b      	lsls	r3, r3, #2
 800fda8:	3310      	adds	r3, #16
 800fdaa:	687a      	ldr	r2, [r7, #4]
 800fdac:	4413      	add	r3, r2
 800fdae:	3304      	adds	r3, #4
 800fdb0:	e00b      	b.n	800fdca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fdb2:	7bbb      	ldrb	r3, [r7, #14]
 800fdb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fdb8:	4613      	mov	r3, r2
 800fdba:	009b      	lsls	r3, r3, #2
 800fdbc:	4413      	add	r3, r2
 800fdbe:	009b      	lsls	r3, r3, #2
 800fdc0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fdc4:	687a      	ldr	r2, [r7, #4]
 800fdc6:	4413      	add	r3, r2
 800fdc8:	3304      	adds	r3, #4
 800fdca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fdd2:	68bb      	ldr	r3, [r7, #8]
 800fdd4:	2202      	movs	r2, #2
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f000 fc61 	bl	80106a0 <USBD_CtlSendData>
              break;
 800fdde:	e06a      	b.n	800feb6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fde0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	da11      	bge.n	800fe0c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fde8:	7bbb      	ldrb	r3, [r7, #14]
 800fdea:	f003 020f 	and.w	r2, r3, #15
 800fdee:	6879      	ldr	r1, [r7, #4]
 800fdf0:	4613      	mov	r3, r2
 800fdf2:	009b      	lsls	r3, r3, #2
 800fdf4:	4413      	add	r3, r2
 800fdf6:	009b      	lsls	r3, r3, #2
 800fdf8:	440b      	add	r3, r1
 800fdfa:	3324      	adds	r3, #36	; 0x24
 800fdfc:	881b      	ldrh	r3, [r3, #0]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d117      	bne.n	800fe32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fe02:	6839      	ldr	r1, [r7, #0]
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f000 fbda 	bl	80105be <USBD_CtlError>
                  break;
 800fe0a:	e054      	b.n	800feb6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fe0c:	7bbb      	ldrb	r3, [r7, #14]
 800fe0e:	f003 020f 	and.w	r2, r3, #15
 800fe12:	6879      	ldr	r1, [r7, #4]
 800fe14:	4613      	mov	r3, r2
 800fe16:	009b      	lsls	r3, r3, #2
 800fe18:	4413      	add	r3, r2
 800fe1a:	009b      	lsls	r3, r3, #2
 800fe1c:	440b      	add	r3, r1
 800fe1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fe22:	881b      	ldrh	r3, [r3, #0]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d104      	bne.n	800fe32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fe28:	6839      	ldr	r1, [r7, #0]
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	f000 fbc7 	bl	80105be <USBD_CtlError>
                  break;
 800fe30:	e041      	b.n	800feb6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fe32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	da0b      	bge.n	800fe52 <USBD_StdEPReq+0x2b2>
 800fe3a:	7bbb      	ldrb	r3, [r7, #14]
 800fe3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fe40:	4613      	mov	r3, r2
 800fe42:	009b      	lsls	r3, r3, #2
 800fe44:	4413      	add	r3, r2
 800fe46:	009b      	lsls	r3, r3, #2
 800fe48:	3310      	adds	r3, #16
 800fe4a:	687a      	ldr	r2, [r7, #4]
 800fe4c:	4413      	add	r3, r2
 800fe4e:	3304      	adds	r3, #4
 800fe50:	e00b      	b.n	800fe6a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fe52:	7bbb      	ldrb	r3, [r7, #14]
 800fe54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fe58:	4613      	mov	r3, r2
 800fe5a:	009b      	lsls	r3, r3, #2
 800fe5c:	4413      	add	r3, r2
 800fe5e:	009b      	lsls	r3, r3, #2
 800fe60:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	4413      	add	r3, r2
 800fe68:	3304      	adds	r3, #4
 800fe6a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fe6c:	7bbb      	ldrb	r3, [r7, #14]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d002      	beq.n	800fe78 <USBD_StdEPReq+0x2d8>
 800fe72:	7bbb      	ldrb	r3, [r7, #14]
 800fe74:	2b80      	cmp	r3, #128	; 0x80
 800fe76:	d103      	bne.n	800fe80 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	601a      	str	r2, [r3, #0]
 800fe7e:	e00e      	b.n	800fe9e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fe80:	7bbb      	ldrb	r3, [r7, #14]
 800fe82:	4619      	mov	r1, r3
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f005 fed9 	bl	8015c3c <USBD_LL_IsStallEP>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d003      	beq.n	800fe98 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	2201      	movs	r2, #1
 800fe94:	601a      	str	r2, [r3, #0]
 800fe96:	e002      	b.n	800fe9e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	2202      	movs	r2, #2
 800fea2:	4619      	mov	r1, r3
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f000 fbfb 	bl	80106a0 <USBD_CtlSendData>
              break;
 800feaa:	e004      	b.n	800feb6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800feac:	6839      	ldr	r1, [r7, #0]
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f000 fb85 	bl	80105be <USBD_CtlError>
              break;
 800feb4:	bf00      	nop
          }
          break;
 800feb6:	e004      	b.n	800fec2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800feb8:	6839      	ldr	r1, [r7, #0]
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f000 fb7f 	bl	80105be <USBD_CtlError>
          break;
 800fec0:	bf00      	nop
      }
      break;
 800fec2:	e005      	b.n	800fed0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800fec4:	6839      	ldr	r1, [r7, #0]
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f000 fb79 	bl	80105be <USBD_CtlError>
      break;
 800fecc:	e000      	b.n	800fed0 <USBD_StdEPReq+0x330>
      break;
 800fece:	bf00      	nop
  }

  return ret;
 800fed0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3710      	adds	r7, #16
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}
	...

0800fedc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b084      	sub	sp, #16
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
 800fee4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fee6:	2300      	movs	r3, #0
 800fee8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800feea:	2300      	movs	r3, #0
 800feec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800feee:	2300      	movs	r3, #0
 800fef0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	885b      	ldrh	r3, [r3, #2]
 800fef6:	0a1b      	lsrs	r3, r3, #8
 800fef8:	b29b      	uxth	r3, r3
 800fefa:	3b01      	subs	r3, #1
 800fefc:	2b0e      	cmp	r3, #14
 800fefe:	f200 8152 	bhi.w	80101a6 <USBD_GetDescriptor+0x2ca>
 800ff02:	a201      	add	r2, pc, #4	; (adr r2, 800ff08 <USBD_GetDescriptor+0x2c>)
 800ff04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff08:	0800ff79 	.word	0x0800ff79
 800ff0c:	0800ff91 	.word	0x0800ff91
 800ff10:	0800ffd1 	.word	0x0800ffd1
 800ff14:	080101a7 	.word	0x080101a7
 800ff18:	080101a7 	.word	0x080101a7
 800ff1c:	08010147 	.word	0x08010147
 800ff20:	08010173 	.word	0x08010173
 800ff24:	080101a7 	.word	0x080101a7
 800ff28:	080101a7 	.word	0x080101a7
 800ff2c:	080101a7 	.word	0x080101a7
 800ff30:	080101a7 	.word	0x080101a7
 800ff34:	080101a7 	.word	0x080101a7
 800ff38:	080101a7 	.word	0x080101a7
 800ff3c:	080101a7 	.word	0x080101a7
 800ff40:	0800ff45 	.word	0x0800ff45
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff4a:	69db      	ldr	r3, [r3, #28]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d00b      	beq.n	800ff68 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff56:	69db      	ldr	r3, [r3, #28]
 800ff58:	687a      	ldr	r2, [r7, #4]
 800ff5a:	7c12      	ldrb	r2, [r2, #16]
 800ff5c:	f107 0108 	add.w	r1, r7, #8
 800ff60:	4610      	mov	r0, r2
 800ff62:	4798      	blx	r3
 800ff64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff66:	e126      	b.n	80101b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ff68:	6839      	ldr	r1, [r7, #0]
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f000 fb27 	bl	80105be <USBD_CtlError>
        err++;
 800ff70:	7afb      	ldrb	r3, [r7, #11]
 800ff72:	3301      	adds	r3, #1
 800ff74:	72fb      	strb	r3, [r7, #11]
      break;
 800ff76:	e11e      	b.n	80101b6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	687a      	ldr	r2, [r7, #4]
 800ff82:	7c12      	ldrb	r2, [r2, #16]
 800ff84:	f107 0108 	add.w	r1, r7, #8
 800ff88:	4610      	mov	r0, r2
 800ff8a:	4798      	blx	r3
 800ff8c:	60f8      	str	r0, [r7, #12]
      break;
 800ff8e:	e112      	b.n	80101b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	7c1b      	ldrb	r3, [r3, #16]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d10d      	bne.n	800ffb4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffa0:	f107 0208 	add.w	r2, r7, #8
 800ffa4:	4610      	mov	r0, r2
 800ffa6:	4798      	blx	r3
 800ffa8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	3301      	adds	r3, #1
 800ffae:	2202      	movs	r2, #2
 800ffb0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ffb2:	e100      	b.n	80101b6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ffba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffbc:	f107 0208 	add.w	r2, r7, #8
 800ffc0:	4610      	mov	r0, r2
 800ffc2:	4798      	blx	r3
 800ffc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	3301      	adds	r3, #1
 800ffca:	2202      	movs	r2, #2
 800ffcc:	701a      	strb	r2, [r3, #0]
      break;
 800ffce:	e0f2      	b.n	80101b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	885b      	ldrh	r3, [r3, #2]
 800ffd4:	b2db      	uxtb	r3, r3
 800ffd6:	2b05      	cmp	r3, #5
 800ffd8:	f200 80ac 	bhi.w	8010134 <USBD_GetDescriptor+0x258>
 800ffdc:	a201      	add	r2, pc, #4	; (adr r2, 800ffe4 <USBD_GetDescriptor+0x108>)
 800ffde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffe2:	bf00      	nop
 800ffe4:	0800fffd 	.word	0x0800fffd
 800ffe8:	08010031 	.word	0x08010031
 800ffec:	08010065 	.word	0x08010065
 800fff0:	08010099 	.word	0x08010099
 800fff4:	080100cd 	.word	0x080100cd
 800fff8:	08010101 	.word	0x08010101
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010002:	685b      	ldr	r3, [r3, #4]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d00b      	beq.n	8010020 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	687a      	ldr	r2, [r7, #4]
 8010012:	7c12      	ldrb	r2, [r2, #16]
 8010014:	f107 0108 	add.w	r1, r7, #8
 8010018:	4610      	mov	r0, r2
 801001a:	4798      	blx	r3
 801001c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801001e:	e091      	b.n	8010144 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010020:	6839      	ldr	r1, [r7, #0]
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f000 facb 	bl	80105be <USBD_CtlError>
            err++;
 8010028:	7afb      	ldrb	r3, [r7, #11]
 801002a:	3301      	adds	r3, #1
 801002c:	72fb      	strb	r3, [r7, #11]
          break;
 801002e:	e089      	b.n	8010144 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010036:	689b      	ldr	r3, [r3, #8]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d00b      	beq.n	8010054 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010042:	689b      	ldr	r3, [r3, #8]
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	7c12      	ldrb	r2, [r2, #16]
 8010048:	f107 0108 	add.w	r1, r7, #8
 801004c:	4610      	mov	r0, r2
 801004e:	4798      	blx	r3
 8010050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010052:	e077      	b.n	8010144 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010054:	6839      	ldr	r1, [r7, #0]
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f000 fab1 	bl	80105be <USBD_CtlError>
            err++;
 801005c:	7afb      	ldrb	r3, [r7, #11]
 801005e:	3301      	adds	r3, #1
 8010060:	72fb      	strb	r3, [r7, #11]
          break;
 8010062:	e06f      	b.n	8010144 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801006a:	68db      	ldr	r3, [r3, #12]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d00b      	beq.n	8010088 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010076:	68db      	ldr	r3, [r3, #12]
 8010078:	687a      	ldr	r2, [r7, #4]
 801007a:	7c12      	ldrb	r2, [r2, #16]
 801007c:	f107 0108 	add.w	r1, r7, #8
 8010080:	4610      	mov	r0, r2
 8010082:	4798      	blx	r3
 8010084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010086:	e05d      	b.n	8010144 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010088:	6839      	ldr	r1, [r7, #0]
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	f000 fa97 	bl	80105be <USBD_CtlError>
            err++;
 8010090:	7afb      	ldrb	r3, [r7, #11]
 8010092:	3301      	adds	r3, #1
 8010094:	72fb      	strb	r3, [r7, #11]
          break;
 8010096:	e055      	b.n	8010144 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801009e:	691b      	ldr	r3, [r3, #16]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d00b      	beq.n	80100bc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80100aa:	691b      	ldr	r3, [r3, #16]
 80100ac:	687a      	ldr	r2, [r7, #4]
 80100ae:	7c12      	ldrb	r2, [r2, #16]
 80100b0:	f107 0108 	add.w	r1, r7, #8
 80100b4:	4610      	mov	r0, r2
 80100b6:	4798      	blx	r3
 80100b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80100ba:	e043      	b.n	8010144 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80100bc:	6839      	ldr	r1, [r7, #0]
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f000 fa7d 	bl	80105be <USBD_CtlError>
            err++;
 80100c4:	7afb      	ldrb	r3, [r7, #11]
 80100c6:	3301      	adds	r3, #1
 80100c8:	72fb      	strb	r3, [r7, #11]
          break;
 80100ca:	e03b      	b.n	8010144 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80100d2:	695b      	ldr	r3, [r3, #20]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d00b      	beq.n	80100f0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80100de:	695b      	ldr	r3, [r3, #20]
 80100e0:	687a      	ldr	r2, [r7, #4]
 80100e2:	7c12      	ldrb	r2, [r2, #16]
 80100e4:	f107 0108 	add.w	r1, r7, #8
 80100e8:	4610      	mov	r0, r2
 80100ea:	4798      	blx	r3
 80100ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80100ee:	e029      	b.n	8010144 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80100f0:	6839      	ldr	r1, [r7, #0]
 80100f2:	6878      	ldr	r0, [r7, #4]
 80100f4:	f000 fa63 	bl	80105be <USBD_CtlError>
            err++;
 80100f8:	7afb      	ldrb	r3, [r7, #11]
 80100fa:	3301      	adds	r3, #1
 80100fc:	72fb      	strb	r3, [r7, #11]
          break;
 80100fe:	e021      	b.n	8010144 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010106:	699b      	ldr	r3, [r3, #24]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d00b      	beq.n	8010124 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010112:	699b      	ldr	r3, [r3, #24]
 8010114:	687a      	ldr	r2, [r7, #4]
 8010116:	7c12      	ldrb	r2, [r2, #16]
 8010118:	f107 0108 	add.w	r1, r7, #8
 801011c:	4610      	mov	r0, r2
 801011e:	4798      	blx	r3
 8010120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010122:	e00f      	b.n	8010144 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010124:	6839      	ldr	r1, [r7, #0]
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f000 fa49 	bl	80105be <USBD_CtlError>
            err++;
 801012c:	7afb      	ldrb	r3, [r7, #11]
 801012e:	3301      	adds	r3, #1
 8010130:	72fb      	strb	r3, [r7, #11]
          break;
 8010132:	e007      	b.n	8010144 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010134:	6839      	ldr	r1, [r7, #0]
 8010136:	6878      	ldr	r0, [r7, #4]
 8010138:	f000 fa41 	bl	80105be <USBD_CtlError>
          err++;
 801013c:	7afb      	ldrb	r3, [r7, #11]
 801013e:	3301      	adds	r3, #1
 8010140:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010142:	bf00      	nop
      }
      break;
 8010144:	e037      	b.n	80101b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	7c1b      	ldrb	r3, [r3, #16]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d109      	bne.n	8010162 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010156:	f107 0208 	add.w	r2, r7, #8
 801015a:	4610      	mov	r0, r2
 801015c:	4798      	blx	r3
 801015e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010160:	e029      	b.n	80101b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010162:	6839      	ldr	r1, [r7, #0]
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f000 fa2a 	bl	80105be <USBD_CtlError>
        err++;
 801016a:	7afb      	ldrb	r3, [r7, #11]
 801016c:	3301      	adds	r3, #1
 801016e:	72fb      	strb	r3, [r7, #11]
      break;
 8010170:	e021      	b.n	80101b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	7c1b      	ldrb	r3, [r3, #16]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d10d      	bne.n	8010196 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010182:	f107 0208 	add.w	r2, r7, #8
 8010186:	4610      	mov	r0, r2
 8010188:	4798      	blx	r3
 801018a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	3301      	adds	r3, #1
 8010190:	2207      	movs	r2, #7
 8010192:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010194:	e00f      	b.n	80101b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010196:	6839      	ldr	r1, [r7, #0]
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f000 fa10 	bl	80105be <USBD_CtlError>
        err++;
 801019e:	7afb      	ldrb	r3, [r7, #11]
 80101a0:	3301      	adds	r3, #1
 80101a2:	72fb      	strb	r3, [r7, #11]
      break;
 80101a4:	e007      	b.n	80101b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80101a6:	6839      	ldr	r1, [r7, #0]
 80101a8:	6878      	ldr	r0, [r7, #4]
 80101aa:	f000 fa08 	bl	80105be <USBD_CtlError>
      err++;
 80101ae:	7afb      	ldrb	r3, [r7, #11]
 80101b0:	3301      	adds	r3, #1
 80101b2:	72fb      	strb	r3, [r7, #11]
      break;
 80101b4:	bf00      	nop
  }

  if (err != 0U)
 80101b6:	7afb      	ldrb	r3, [r7, #11]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d11e      	bne.n	80101fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	88db      	ldrh	r3, [r3, #6]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d016      	beq.n	80101f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80101c4:	893b      	ldrh	r3, [r7, #8]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d00e      	beq.n	80101e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	88da      	ldrh	r2, [r3, #6]
 80101ce:	893b      	ldrh	r3, [r7, #8]
 80101d0:	4293      	cmp	r3, r2
 80101d2:	bf28      	it	cs
 80101d4:	4613      	movcs	r3, r2
 80101d6:	b29b      	uxth	r3, r3
 80101d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80101da:	893b      	ldrh	r3, [r7, #8]
 80101dc:	461a      	mov	r2, r3
 80101de:	68f9      	ldr	r1, [r7, #12]
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f000 fa5d 	bl	80106a0 <USBD_CtlSendData>
 80101e6:	e009      	b.n	80101fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80101e8:	6839      	ldr	r1, [r7, #0]
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	f000 f9e7 	bl	80105be <USBD_CtlError>
 80101f0:	e004      	b.n	80101fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f000 faae 	bl	8010754 <USBD_CtlSendStatus>
 80101f8:	e000      	b.n	80101fc <USBD_GetDescriptor+0x320>
    return;
 80101fa:	bf00      	nop
  }
}
 80101fc:	3710      	adds	r7, #16
 80101fe:	46bd      	mov	sp, r7
 8010200:	bd80      	pop	{r7, pc}
 8010202:	bf00      	nop

08010204 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b084      	sub	sp, #16
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	889b      	ldrh	r3, [r3, #4]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d131      	bne.n	801027a <USBD_SetAddress+0x76>
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	88db      	ldrh	r3, [r3, #6]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d12d      	bne.n	801027a <USBD_SetAddress+0x76>
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	885b      	ldrh	r3, [r3, #2]
 8010222:	2b7f      	cmp	r3, #127	; 0x7f
 8010224:	d829      	bhi.n	801027a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	885b      	ldrh	r3, [r3, #2]
 801022a:	b2db      	uxtb	r3, r3
 801022c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010230:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010238:	b2db      	uxtb	r3, r3
 801023a:	2b03      	cmp	r3, #3
 801023c:	d104      	bne.n	8010248 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801023e:	6839      	ldr	r1, [r7, #0]
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	f000 f9bc 	bl	80105be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010246:	e01d      	b.n	8010284 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	7bfa      	ldrb	r2, [r7, #15]
 801024c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010250:	7bfb      	ldrb	r3, [r7, #15]
 8010252:	4619      	mov	r1, r3
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f005 fd1d 	bl	8015c94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f000 fa7a 	bl	8010754 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010260:	7bfb      	ldrb	r3, [r7, #15]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d004      	beq.n	8010270 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	2202      	movs	r2, #2
 801026a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801026e:	e009      	b.n	8010284 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	2201      	movs	r2, #1
 8010274:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010278:	e004      	b.n	8010284 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801027a:	6839      	ldr	r1, [r7, #0]
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f000 f99e 	bl	80105be <USBD_CtlError>
  }
}
 8010282:	bf00      	nop
 8010284:	bf00      	nop
 8010286:	3710      	adds	r7, #16
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}

0801028c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b084      	sub	sp, #16
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010296:	2300      	movs	r3, #0
 8010298:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	885b      	ldrh	r3, [r3, #2]
 801029e:	b2da      	uxtb	r2, r3
 80102a0:	4b4e      	ldr	r3, [pc, #312]	; (80103dc <USBD_SetConfig+0x150>)
 80102a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80102a4:	4b4d      	ldr	r3, [pc, #308]	; (80103dc <USBD_SetConfig+0x150>)
 80102a6:	781b      	ldrb	r3, [r3, #0]
 80102a8:	2b01      	cmp	r3, #1
 80102aa:	d905      	bls.n	80102b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80102ac:	6839      	ldr	r1, [r7, #0]
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f000 f985 	bl	80105be <USBD_CtlError>
    return USBD_FAIL;
 80102b4:	2303      	movs	r3, #3
 80102b6:	e08c      	b.n	80103d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80102be:	b2db      	uxtb	r3, r3
 80102c0:	2b02      	cmp	r3, #2
 80102c2:	d002      	beq.n	80102ca <USBD_SetConfig+0x3e>
 80102c4:	2b03      	cmp	r3, #3
 80102c6:	d029      	beq.n	801031c <USBD_SetConfig+0x90>
 80102c8:	e075      	b.n	80103b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80102ca:	4b44      	ldr	r3, [pc, #272]	; (80103dc <USBD_SetConfig+0x150>)
 80102cc:	781b      	ldrb	r3, [r3, #0]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d020      	beq.n	8010314 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80102d2:	4b42      	ldr	r3, [pc, #264]	; (80103dc <USBD_SetConfig+0x150>)
 80102d4:	781b      	ldrb	r3, [r3, #0]
 80102d6:	461a      	mov	r2, r3
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80102dc:	4b3f      	ldr	r3, [pc, #252]	; (80103dc <USBD_SetConfig+0x150>)
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	4619      	mov	r1, r3
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f7fe ffbd 	bl	800f262 <USBD_SetClassConfig>
 80102e8:	4603      	mov	r3, r0
 80102ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80102ec:	7bfb      	ldrb	r3, [r7, #15]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d008      	beq.n	8010304 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80102f2:	6839      	ldr	r1, [r7, #0]
 80102f4:	6878      	ldr	r0, [r7, #4]
 80102f6:	f000 f962 	bl	80105be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2202      	movs	r2, #2
 80102fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010302:	e065      	b.n	80103d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f000 fa25 	bl	8010754 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2203      	movs	r2, #3
 801030e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010312:	e05d      	b.n	80103d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f000 fa1d 	bl	8010754 <USBD_CtlSendStatus>
      break;
 801031a:	e059      	b.n	80103d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801031c:	4b2f      	ldr	r3, [pc, #188]	; (80103dc <USBD_SetConfig+0x150>)
 801031e:	781b      	ldrb	r3, [r3, #0]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d112      	bne.n	801034a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2202      	movs	r2, #2
 8010328:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801032c:	4b2b      	ldr	r3, [pc, #172]	; (80103dc <USBD_SetConfig+0x150>)
 801032e:	781b      	ldrb	r3, [r3, #0]
 8010330:	461a      	mov	r2, r3
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010336:	4b29      	ldr	r3, [pc, #164]	; (80103dc <USBD_SetConfig+0x150>)
 8010338:	781b      	ldrb	r3, [r3, #0]
 801033a:	4619      	mov	r1, r3
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	f7fe ffac 	bl	800f29a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f000 fa06 	bl	8010754 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010348:	e042      	b.n	80103d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801034a:	4b24      	ldr	r3, [pc, #144]	; (80103dc <USBD_SetConfig+0x150>)
 801034c:	781b      	ldrb	r3, [r3, #0]
 801034e:	461a      	mov	r2, r3
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	685b      	ldr	r3, [r3, #4]
 8010354:	429a      	cmp	r2, r3
 8010356:	d02a      	beq.n	80103ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	685b      	ldr	r3, [r3, #4]
 801035c:	b2db      	uxtb	r3, r3
 801035e:	4619      	mov	r1, r3
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f7fe ff9a 	bl	800f29a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010366:	4b1d      	ldr	r3, [pc, #116]	; (80103dc <USBD_SetConfig+0x150>)
 8010368:	781b      	ldrb	r3, [r3, #0]
 801036a:	461a      	mov	r2, r3
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010370:	4b1a      	ldr	r3, [pc, #104]	; (80103dc <USBD_SetConfig+0x150>)
 8010372:	781b      	ldrb	r3, [r3, #0]
 8010374:	4619      	mov	r1, r3
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f7fe ff73 	bl	800f262 <USBD_SetClassConfig>
 801037c:	4603      	mov	r3, r0
 801037e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010380:	7bfb      	ldrb	r3, [r7, #15]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d00f      	beq.n	80103a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010386:	6839      	ldr	r1, [r7, #0]
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f000 f918 	bl	80105be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	685b      	ldr	r3, [r3, #4]
 8010392:	b2db      	uxtb	r3, r3
 8010394:	4619      	mov	r1, r3
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f7fe ff7f 	bl	800f29a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	2202      	movs	r2, #2
 80103a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80103a4:	e014      	b.n	80103d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f000 f9d4 	bl	8010754 <USBD_CtlSendStatus>
      break;
 80103ac:	e010      	b.n	80103d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 f9d0 	bl	8010754 <USBD_CtlSendStatus>
      break;
 80103b4:	e00c      	b.n	80103d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80103b6:	6839      	ldr	r1, [r7, #0]
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f000 f900 	bl	80105be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80103be:	4b07      	ldr	r3, [pc, #28]	; (80103dc <USBD_SetConfig+0x150>)
 80103c0:	781b      	ldrb	r3, [r3, #0]
 80103c2:	4619      	mov	r1, r3
 80103c4:	6878      	ldr	r0, [r7, #4]
 80103c6:	f7fe ff68 	bl	800f29a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80103ca:	2303      	movs	r3, #3
 80103cc:	73fb      	strb	r3, [r7, #15]
      break;
 80103ce:	bf00      	nop
  }

  return ret;
 80103d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	3710      	adds	r7, #16
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}
 80103da:	bf00      	nop
 80103dc:	20000aa8 	.word	0x20000aa8

080103e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b082      	sub	sp, #8
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
 80103e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	88db      	ldrh	r3, [r3, #6]
 80103ee:	2b01      	cmp	r3, #1
 80103f0:	d004      	beq.n	80103fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80103f2:	6839      	ldr	r1, [r7, #0]
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	f000 f8e2 	bl	80105be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80103fa:	e023      	b.n	8010444 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010402:	b2db      	uxtb	r3, r3
 8010404:	2b02      	cmp	r3, #2
 8010406:	dc02      	bgt.n	801040e <USBD_GetConfig+0x2e>
 8010408:	2b00      	cmp	r3, #0
 801040a:	dc03      	bgt.n	8010414 <USBD_GetConfig+0x34>
 801040c:	e015      	b.n	801043a <USBD_GetConfig+0x5a>
 801040e:	2b03      	cmp	r3, #3
 8010410:	d00b      	beq.n	801042a <USBD_GetConfig+0x4a>
 8010412:	e012      	b.n	801043a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2200      	movs	r2, #0
 8010418:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	3308      	adds	r3, #8
 801041e:	2201      	movs	r2, #1
 8010420:	4619      	mov	r1, r3
 8010422:	6878      	ldr	r0, [r7, #4]
 8010424:	f000 f93c 	bl	80106a0 <USBD_CtlSendData>
        break;
 8010428:	e00c      	b.n	8010444 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	3304      	adds	r3, #4
 801042e:	2201      	movs	r2, #1
 8010430:	4619      	mov	r1, r3
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f000 f934 	bl	80106a0 <USBD_CtlSendData>
        break;
 8010438:	e004      	b.n	8010444 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801043a:	6839      	ldr	r1, [r7, #0]
 801043c:	6878      	ldr	r0, [r7, #4]
 801043e:	f000 f8be 	bl	80105be <USBD_CtlError>
        break;
 8010442:	bf00      	nop
}
 8010444:	bf00      	nop
 8010446:	3708      	adds	r7, #8
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}

0801044c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b082      	sub	sp, #8
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801045c:	b2db      	uxtb	r3, r3
 801045e:	3b01      	subs	r3, #1
 8010460:	2b02      	cmp	r3, #2
 8010462:	d81e      	bhi.n	80104a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	88db      	ldrh	r3, [r3, #6]
 8010468:	2b02      	cmp	r3, #2
 801046a:	d004      	beq.n	8010476 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801046c:	6839      	ldr	r1, [r7, #0]
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f000 f8a5 	bl	80105be <USBD_CtlError>
        break;
 8010474:	e01a      	b.n	80104ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2201      	movs	r2, #1
 801047a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010482:	2b00      	cmp	r3, #0
 8010484:	d005      	beq.n	8010492 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	68db      	ldr	r3, [r3, #12]
 801048a:	f043 0202 	orr.w	r2, r3, #2
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	330c      	adds	r3, #12
 8010496:	2202      	movs	r2, #2
 8010498:	4619      	mov	r1, r3
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f000 f900 	bl	80106a0 <USBD_CtlSendData>
      break;
 80104a0:	e004      	b.n	80104ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80104a2:	6839      	ldr	r1, [r7, #0]
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f000 f88a 	bl	80105be <USBD_CtlError>
      break;
 80104aa:	bf00      	nop
  }
}
 80104ac:	bf00      	nop
 80104ae:	3708      	adds	r7, #8
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}

080104b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b082      	sub	sp, #8
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
 80104bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	885b      	ldrh	r3, [r3, #2]
 80104c2:	2b01      	cmp	r3, #1
 80104c4:	d107      	bne.n	80104d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2201      	movs	r2, #1
 80104ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f000 f940 	bl	8010754 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80104d4:	e013      	b.n	80104fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	885b      	ldrh	r3, [r3, #2]
 80104da:	2b02      	cmp	r3, #2
 80104dc:	d10b      	bne.n	80104f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	889b      	ldrh	r3, [r3, #4]
 80104e2:	0a1b      	lsrs	r3, r3, #8
 80104e4:	b29b      	uxth	r3, r3
 80104e6:	b2da      	uxtb	r2, r3
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f000 f930 	bl	8010754 <USBD_CtlSendStatus>
}
 80104f4:	e003      	b.n	80104fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80104f6:	6839      	ldr	r1, [r7, #0]
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f000 f860 	bl	80105be <USBD_CtlError>
}
 80104fe:	bf00      	nop
 8010500:	3708      	adds	r7, #8
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}

08010506 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010506:	b580      	push	{r7, lr}
 8010508:	b082      	sub	sp, #8
 801050a:	af00      	add	r7, sp, #0
 801050c:	6078      	str	r0, [r7, #4]
 801050e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010516:	b2db      	uxtb	r3, r3
 8010518:	3b01      	subs	r3, #1
 801051a:	2b02      	cmp	r3, #2
 801051c:	d80b      	bhi.n	8010536 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	885b      	ldrh	r3, [r3, #2]
 8010522:	2b01      	cmp	r3, #1
 8010524:	d10c      	bne.n	8010540 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2200      	movs	r2, #0
 801052a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801052e:	6878      	ldr	r0, [r7, #4]
 8010530:	f000 f910 	bl	8010754 <USBD_CtlSendStatus>
      }
      break;
 8010534:	e004      	b.n	8010540 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010536:	6839      	ldr	r1, [r7, #0]
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f000 f840 	bl	80105be <USBD_CtlError>
      break;
 801053e:	e000      	b.n	8010542 <USBD_ClrFeature+0x3c>
      break;
 8010540:	bf00      	nop
  }
}
 8010542:	bf00      	nop
 8010544:	3708      	adds	r7, #8
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}

0801054a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801054a:	b580      	push	{r7, lr}
 801054c:	b084      	sub	sp, #16
 801054e:	af00      	add	r7, sp, #0
 8010550:	6078      	str	r0, [r7, #4]
 8010552:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	781a      	ldrb	r2, [r3, #0]
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	3301      	adds	r3, #1
 8010564:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	781a      	ldrb	r2, [r3, #0]
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	3301      	adds	r3, #1
 8010572:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010574:	68f8      	ldr	r0, [r7, #12]
 8010576:	f7ff fa17 	bl	800f9a8 <SWAPBYTE>
 801057a:	4603      	mov	r3, r0
 801057c:	461a      	mov	r2, r3
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	3301      	adds	r3, #1
 8010586:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	3301      	adds	r3, #1
 801058c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801058e:	68f8      	ldr	r0, [r7, #12]
 8010590:	f7ff fa0a 	bl	800f9a8 <SWAPBYTE>
 8010594:	4603      	mov	r3, r0
 8010596:	461a      	mov	r2, r3
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	3301      	adds	r3, #1
 80105a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	3301      	adds	r3, #1
 80105a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80105a8:	68f8      	ldr	r0, [r7, #12]
 80105aa:	f7ff f9fd 	bl	800f9a8 <SWAPBYTE>
 80105ae:	4603      	mov	r3, r0
 80105b0:	461a      	mov	r2, r3
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	80da      	strh	r2, [r3, #6]
}
 80105b6:	bf00      	nop
 80105b8:	3710      	adds	r7, #16
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}

080105be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105be:	b580      	push	{r7, lr}
 80105c0:	b082      	sub	sp, #8
 80105c2:	af00      	add	r7, sp, #0
 80105c4:	6078      	str	r0, [r7, #4]
 80105c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80105c8:	2180      	movs	r1, #128	; 0x80
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f005 faf8 	bl	8015bc0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80105d0:	2100      	movs	r1, #0
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f005 faf4 	bl	8015bc0 <USBD_LL_StallEP>
}
 80105d8:	bf00      	nop
 80105da:	3708      	adds	r7, #8
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}

080105e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b086      	sub	sp, #24
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	60f8      	str	r0, [r7, #12]
 80105e8:	60b9      	str	r1, [r7, #8]
 80105ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80105ec:	2300      	movs	r3, #0
 80105ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d036      	beq.n	8010664 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80105fa:	6938      	ldr	r0, [r7, #16]
 80105fc:	f000 f836 	bl	801066c <USBD_GetLen>
 8010600:	4603      	mov	r3, r0
 8010602:	3301      	adds	r3, #1
 8010604:	b29b      	uxth	r3, r3
 8010606:	005b      	lsls	r3, r3, #1
 8010608:	b29a      	uxth	r2, r3
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801060e:	7dfb      	ldrb	r3, [r7, #23]
 8010610:	68ba      	ldr	r2, [r7, #8]
 8010612:	4413      	add	r3, r2
 8010614:	687a      	ldr	r2, [r7, #4]
 8010616:	7812      	ldrb	r2, [r2, #0]
 8010618:	701a      	strb	r2, [r3, #0]
  idx++;
 801061a:	7dfb      	ldrb	r3, [r7, #23]
 801061c:	3301      	adds	r3, #1
 801061e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010620:	7dfb      	ldrb	r3, [r7, #23]
 8010622:	68ba      	ldr	r2, [r7, #8]
 8010624:	4413      	add	r3, r2
 8010626:	2203      	movs	r2, #3
 8010628:	701a      	strb	r2, [r3, #0]
  idx++;
 801062a:	7dfb      	ldrb	r3, [r7, #23]
 801062c:	3301      	adds	r3, #1
 801062e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010630:	e013      	b.n	801065a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010632:	7dfb      	ldrb	r3, [r7, #23]
 8010634:	68ba      	ldr	r2, [r7, #8]
 8010636:	4413      	add	r3, r2
 8010638:	693a      	ldr	r2, [r7, #16]
 801063a:	7812      	ldrb	r2, [r2, #0]
 801063c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801063e:	693b      	ldr	r3, [r7, #16]
 8010640:	3301      	adds	r3, #1
 8010642:	613b      	str	r3, [r7, #16]
    idx++;
 8010644:	7dfb      	ldrb	r3, [r7, #23]
 8010646:	3301      	adds	r3, #1
 8010648:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801064a:	7dfb      	ldrb	r3, [r7, #23]
 801064c:	68ba      	ldr	r2, [r7, #8]
 801064e:	4413      	add	r3, r2
 8010650:	2200      	movs	r2, #0
 8010652:	701a      	strb	r2, [r3, #0]
    idx++;
 8010654:	7dfb      	ldrb	r3, [r7, #23]
 8010656:	3301      	adds	r3, #1
 8010658:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	781b      	ldrb	r3, [r3, #0]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d1e7      	bne.n	8010632 <USBD_GetString+0x52>
 8010662:	e000      	b.n	8010666 <USBD_GetString+0x86>
    return;
 8010664:	bf00      	nop
  }
}
 8010666:	3718      	adds	r7, #24
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}

0801066c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801066c:	b480      	push	{r7}
 801066e:	b085      	sub	sp, #20
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010674:	2300      	movs	r3, #0
 8010676:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801067c:	e005      	b.n	801068a <USBD_GetLen+0x1e>
  {
    len++;
 801067e:	7bfb      	ldrb	r3, [r7, #15]
 8010680:	3301      	adds	r3, #1
 8010682:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	3301      	adds	r3, #1
 8010688:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d1f5      	bne.n	801067e <USBD_GetLen+0x12>
  }

  return len;
 8010692:	7bfb      	ldrb	r3, [r7, #15]
}
 8010694:	4618      	mov	r0, r3
 8010696:	3714      	adds	r7, #20
 8010698:	46bd      	mov	sp, r7
 801069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069e:	4770      	bx	lr

080106a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b084      	sub	sp, #16
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	60f8      	str	r0, [r7, #12]
 80106a8:	60b9      	str	r1, [r7, #8]
 80106aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	2202      	movs	r2, #2
 80106b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	687a      	ldr	r2, [r7, #4]
 80106b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	687a      	ldr	r2, [r7, #4]
 80106be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	68ba      	ldr	r2, [r7, #8]
 80106c4:	2100      	movs	r1, #0
 80106c6:	68f8      	ldr	r0, [r7, #12]
 80106c8:	f005 fb03 	bl	8015cd2 <USBD_LL_Transmit>

  return USBD_OK;
 80106cc:	2300      	movs	r3, #0
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3710      	adds	r7, #16
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}

080106d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80106d6:	b580      	push	{r7, lr}
 80106d8:	b084      	sub	sp, #16
 80106da:	af00      	add	r7, sp, #0
 80106dc:	60f8      	str	r0, [r7, #12]
 80106de:	60b9      	str	r1, [r7, #8]
 80106e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	68ba      	ldr	r2, [r7, #8]
 80106e6:	2100      	movs	r1, #0
 80106e8:	68f8      	ldr	r0, [r7, #12]
 80106ea:	f005 faf2 	bl	8015cd2 <USBD_LL_Transmit>

  return USBD_OK;
 80106ee:	2300      	movs	r3, #0
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	3710      	adds	r7, #16
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}

080106f8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b084      	sub	sp, #16
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	60f8      	str	r0, [r7, #12]
 8010700:	60b9      	str	r1, [r7, #8]
 8010702:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	2203      	movs	r2, #3
 8010708:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	687a      	ldr	r2, [r7, #4]
 8010710:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	687a      	ldr	r2, [r7, #4]
 8010718:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	68ba      	ldr	r2, [r7, #8]
 8010720:	2100      	movs	r1, #0
 8010722:	68f8      	ldr	r0, [r7, #12]
 8010724:	f005 faf6 	bl	8015d14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010728:	2300      	movs	r3, #0
}
 801072a:	4618      	mov	r0, r3
 801072c:	3710      	adds	r7, #16
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}

08010732 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010732:	b580      	push	{r7, lr}
 8010734:	b084      	sub	sp, #16
 8010736:	af00      	add	r7, sp, #0
 8010738:	60f8      	str	r0, [r7, #12]
 801073a:	60b9      	str	r1, [r7, #8]
 801073c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	68ba      	ldr	r2, [r7, #8]
 8010742:	2100      	movs	r1, #0
 8010744:	68f8      	ldr	r0, [r7, #12]
 8010746:	f005 fae5 	bl	8015d14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801074a:	2300      	movs	r3, #0
}
 801074c:	4618      	mov	r0, r3
 801074e:	3710      	adds	r7, #16
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}

08010754 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b082      	sub	sp, #8
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2204      	movs	r2, #4
 8010760:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010764:	2300      	movs	r3, #0
 8010766:	2200      	movs	r2, #0
 8010768:	2100      	movs	r1, #0
 801076a:	6878      	ldr	r0, [r7, #4]
 801076c:	f005 fab1 	bl	8015cd2 <USBD_LL_Transmit>

  return USBD_OK;
 8010770:	2300      	movs	r3, #0
}
 8010772:	4618      	mov	r0, r3
 8010774:	3708      	adds	r7, #8
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}

0801077a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801077a:	b580      	push	{r7, lr}
 801077c:	b082      	sub	sp, #8
 801077e:	af00      	add	r7, sp, #0
 8010780:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2205      	movs	r2, #5
 8010786:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801078a:	2300      	movs	r3, #0
 801078c:	2200      	movs	r2, #0
 801078e:	2100      	movs	r1, #0
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f005 fabf 	bl	8015d14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010796:	2300      	movs	r3, #0
}
 8010798:	4618      	mov	r0, r3
 801079a:	3708      	adds	r7, #8
 801079c:	46bd      	mov	sp, r7
 801079e:	bd80      	pop	{r7, pc}

080107a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b084      	sub	sp, #16
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	4603      	mov	r3, r0
 80107a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80107aa:	79fb      	ldrb	r3, [r7, #7]
 80107ac:	4a08      	ldr	r2, [pc, #32]	; (80107d0 <disk_status+0x30>)
 80107ae:	009b      	lsls	r3, r3, #2
 80107b0:	4413      	add	r3, r2
 80107b2:	685b      	ldr	r3, [r3, #4]
 80107b4:	685b      	ldr	r3, [r3, #4]
 80107b6:	79fa      	ldrb	r2, [r7, #7]
 80107b8:	4905      	ldr	r1, [pc, #20]	; (80107d0 <disk_status+0x30>)
 80107ba:	440a      	add	r2, r1
 80107bc:	7a12      	ldrb	r2, [r2, #8]
 80107be:	4610      	mov	r0, r2
 80107c0:	4798      	blx	r3
 80107c2:	4603      	mov	r3, r0
 80107c4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80107c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	3710      	adds	r7, #16
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}
 80107d0:	20000ad4 	.word	0x20000ad4

080107d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b084      	sub	sp, #16
 80107d8:	af00      	add	r7, sp, #0
 80107da:	4603      	mov	r3, r0
 80107dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80107de:	2300      	movs	r3, #0
 80107e0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80107e2:	79fb      	ldrb	r3, [r7, #7]
 80107e4:	4a0d      	ldr	r2, [pc, #52]	; (801081c <disk_initialize+0x48>)
 80107e6:	5cd3      	ldrb	r3, [r2, r3]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d111      	bne.n	8010810 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80107ec:	79fb      	ldrb	r3, [r7, #7]
 80107ee:	4a0b      	ldr	r2, [pc, #44]	; (801081c <disk_initialize+0x48>)
 80107f0:	2101      	movs	r1, #1
 80107f2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80107f4:	79fb      	ldrb	r3, [r7, #7]
 80107f6:	4a09      	ldr	r2, [pc, #36]	; (801081c <disk_initialize+0x48>)
 80107f8:	009b      	lsls	r3, r3, #2
 80107fa:	4413      	add	r3, r2
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	79fa      	ldrb	r2, [r7, #7]
 8010802:	4906      	ldr	r1, [pc, #24]	; (801081c <disk_initialize+0x48>)
 8010804:	440a      	add	r2, r1
 8010806:	7a12      	ldrb	r2, [r2, #8]
 8010808:	4610      	mov	r0, r2
 801080a:	4798      	blx	r3
 801080c:	4603      	mov	r3, r0
 801080e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010810:	7bfb      	ldrb	r3, [r7, #15]
}
 8010812:	4618      	mov	r0, r3
 8010814:	3710      	adds	r7, #16
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}
 801081a:	bf00      	nop
 801081c:	20000ad4 	.word	0x20000ad4

08010820 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010820:	b590      	push	{r4, r7, lr}
 8010822:	b087      	sub	sp, #28
 8010824:	af00      	add	r7, sp, #0
 8010826:	60b9      	str	r1, [r7, #8]
 8010828:	607a      	str	r2, [r7, #4]
 801082a:	603b      	str	r3, [r7, #0]
 801082c:	4603      	mov	r3, r0
 801082e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010830:	7bfb      	ldrb	r3, [r7, #15]
 8010832:	4a0a      	ldr	r2, [pc, #40]	; (801085c <disk_read+0x3c>)
 8010834:	009b      	lsls	r3, r3, #2
 8010836:	4413      	add	r3, r2
 8010838:	685b      	ldr	r3, [r3, #4]
 801083a:	689c      	ldr	r4, [r3, #8]
 801083c:	7bfb      	ldrb	r3, [r7, #15]
 801083e:	4a07      	ldr	r2, [pc, #28]	; (801085c <disk_read+0x3c>)
 8010840:	4413      	add	r3, r2
 8010842:	7a18      	ldrb	r0, [r3, #8]
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	687a      	ldr	r2, [r7, #4]
 8010848:	68b9      	ldr	r1, [r7, #8]
 801084a:	47a0      	blx	r4
 801084c:	4603      	mov	r3, r0
 801084e:	75fb      	strb	r3, [r7, #23]
  return res;
 8010850:	7dfb      	ldrb	r3, [r7, #23]
}
 8010852:	4618      	mov	r0, r3
 8010854:	371c      	adds	r7, #28
 8010856:	46bd      	mov	sp, r7
 8010858:	bd90      	pop	{r4, r7, pc}
 801085a:	bf00      	nop
 801085c:	20000ad4 	.word	0x20000ad4

08010860 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010860:	b590      	push	{r4, r7, lr}
 8010862:	b087      	sub	sp, #28
 8010864:	af00      	add	r7, sp, #0
 8010866:	60b9      	str	r1, [r7, #8]
 8010868:	607a      	str	r2, [r7, #4]
 801086a:	603b      	str	r3, [r7, #0]
 801086c:	4603      	mov	r3, r0
 801086e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010870:	7bfb      	ldrb	r3, [r7, #15]
 8010872:	4a0a      	ldr	r2, [pc, #40]	; (801089c <disk_write+0x3c>)
 8010874:	009b      	lsls	r3, r3, #2
 8010876:	4413      	add	r3, r2
 8010878:	685b      	ldr	r3, [r3, #4]
 801087a:	68dc      	ldr	r4, [r3, #12]
 801087c:	7bfb      	ldrb	r3, [r7, #15]
 801087e:	4a07      	ldr	r2, [pc, #28]	; (801089c <disk_write+0x3c>)
 8010880:	4413      	add	r3, r2
 8010882:	7a18      	ldrb	r0, [r3, #8]
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	687a      	ldr	r2, [r7, #4]
 8010888:	68b9      	ldr	r1, [r7, #8]
 801088a:	47a0      	blx	r4
 801088c:	4603      	mov	r3, r0
 801088e:	75fb      	strb	r3, [r7, #23]
  return res;
 8010890:	7dfb      	ldrb	r3, [r7, #23]
}
 8010892:	4618      	mov	r0, r3
 8010894:	371c      	adds	r7, #28
 8010896:	46bd      	mov	sp, r7
 8010898:	bd90      	pop	{r4, r7, pc}
 801089a:	bf00      	nop
 801089c:	20000ad4 	.word	0x20000ad4

080108a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80108a0:	b480      	push	{r7}
 80108a2:	b085      	sub	sp, #20
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	3301      	adds	r3, #1
 80108ac:	781b      	ldrb	r3, [r3, #0]
 80108ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80108b0:	89fb      	ldrh	r3, [r7, #14]
 80108b2:	021b      	lsls	r3, r3, #8
 80108b4:	b21a      	sxth	r2, r3
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	b21b      	sxth	r3, r3
 80108bc:	4313      	orrs	r3, r2
 80108be:	b21b      	sxth	r3, r3
 80108c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80108c2:	89fb      	ldrh	r3, [r7, #14]
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3714      	adds	r7, #20
 80108c8:	46bd      	mov	sp, r7
 80108ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ce:	4770      	bx	lr

080108d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80108d0:	b480      	push	{r7}
 80108d2:	b085      	sub	sp, #20
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	3303      	adds	r3, #3
 80108dc:	781b      	ldrb	r3, [r3, #0]
 80108de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	021b      	lsls	r3, r3, #8
 80108e4:	687a      	ldr	r2, [r7, #4]
 80108e6:	3202      	adds	r2, #2
 80108e8:	7812      	ldrb	r2, [r2, #0]
 80108ea:	4313      	orrs	r3, r2
 80108ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	021b      	lsls	r3, r3, #8
 80108f2:	687a      	ldr	r2, [r7, #4]
 80108f4:	3201      	adds	r2, #1
 80108f6:	7812      	ldrb	r2, [r2, #0]
 80108f8:	4313      	orrs	r3, r2
 80108fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	021b      	lsls	r3, r3, #8
 8010900:	687a      	ldr	r2, [r7, #4]
 8010902:	7812      	ldrb	r2, [r2, #0]
 8010904:	4313      	orrs	r3, r2
 8010906:	60fb      	str	r3, [r7, #12]
	return rv;
 8010908:	68fb      	ldr	r3, [r7, #12]
}
 801090a:	4618      	mov	r0, r3
 801090c:	3714      	adds	r7, #20
 801090e:	46bd      	mov	sp, r7
 8010910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010914:	4770      	bx	lr

08010916 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8010916:	b580      	push	{r7, lr}
 8010918:	b082      	sub	sp, #8
 801091a:	af00      	add	r7, sp, #0
 801091c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d009      	beq.n	8010938 <lock_fs+0x22>
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	68db      	ldr	r3, [r3, #12]
 8010928:	4618      	mov	r0, r3
 801092a:	f000 fc8f 	bl	801124c <ff_req_grant>
 801092e:	4603      	mov	r3, r0
 8010930:	2b00      	cmp	r3, #0
 8010932:	d001      	beq.n	8010938 <lock_fs+0x22>
 8010934:	2301      	movs	r3, #1
 8010936:	e000      	b.n	801093a <lock_fs+0x24>
 8010938:	2300      	movs	r3, #0
}
 801093a:	4618      	mov	r0, r3
 801093c:	3708      	adds	r7, #8
 801093e:	46bd      	mov	sp, r7
 8010940:	bd80      	pop	{r7, pc}

08010942 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8010942:	b580      	push	{r7, lr}
 8010944:	b082      	sub	sp, #8
 8010946:	af00      	add	r7, sp, #0
 8010948:	6078      	str	r0, [r7, #4]
 801094a:	460b      	mov	r3, r1
 801094c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d00d      	beq.n	8010970 <unlock_fs+0x2e>
 8010954:	78fb      	ldrb	r3, [r7, #3]
 8010956:	2b0c      	cmp	r3, #12
 8010958:	d00a      	beq.n	8010970 <unlock_fs+0x2e>
 801095a:	78fb      	ldrb	r3, [r7, #3]
 801095c:	2b0b      	cmp	r3, #11
 801095e:	d007      	beq.n	8010970 <unlock_fs+0x2e>
 8010960:	78fb      	ldrb	r3, [r7, #3]
 8010962:	2b0f      	cmp	r3, #15
 8010964:	d004      	beq.n	8010970 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	68db      	ldr	r3, [r3, #12]
 801096a:	4618      	mov	r0, r3
 801096c:	f000 fc83 	bl	8011276 <ff_rel_grant>
	}
}
 8010970:	bf00      	nop
 8010972:	3708      	adds	r7, #8
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}

08010978 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010978:	b480      	push	{r7}
 801097a:	b085      	sub	sp, #20
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010980:	2300      	movs	r3, #0
 8010982:	60fb      	str	r3, [r7, #12]
 8010984:	e010      	b.n	80109a8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010986:	4a0d      	ldr	r2, [pc, #52]	; (80109bc <clear_lock+0x44>)
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	011b      	lsls	r3, r3, #4
 801098c:	4413      	add	r3, r2
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	687a      	ldr	r2, [r7, #4]
 8010992:	429a      	cmp	r2, r3
 8010994:	d105      	bne.n	80109a2 <clear_lock+0x2a>
 8010996:	4a09      	ldr	r2, [pc, #36]	; (80109bc <clear_lock+0x44>)
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	011b      	lsls	r3, r3, #4
 801099c:	4413      	add	r3, r2
 801099e:	2200      	movs	r2, #0
 80109a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	3301      	adds	r3, #1
 80109a6:	60fb      	str	r3, [r7, #12]
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	2b01      	cmp	r3, #1
 80109ac:	d9eb      	bls.n	8010986 <clear_lock+0xe>
	}
}
 80109ae:	bf00      	nop
 80109b0:	bf00      	nop
 80109b2:	3714      	adds	r7, #20
 80109b4:	46bd      	mov	sp, r7
 80109b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ba:	4770      	bx	lr
 80109bc:	20000ab4 	.word	0x20000ab4

080109c0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b086      	sub	sp, #24
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80109c8:	2300      	movs	r3, #0
 80109ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	78db      	ldrb	r3, [r3, #3]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d034      	beq.n	8010a3e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109d8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	7858      	ldrb	r0, [r3, #1]
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80109e4:	2301      	movs	r3, #1
 80109e6:	697a      	ldr	r2, [r7, #20]
 80109e8:	f7ff ff3a 	bl	8010860 <disk_write>
 80109ec:	4603      	mov	r3, r0
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d002      	beq.n	80109f8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80109f2:	2301      	movs	r3, #1
 80109f4:	73fb      	strb	r3, [r7, #15]
 80109f6:	e022      	b.n	8010a3e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2200      	movs	r2, #0
 80109fc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a02:	697a      	ldr	r2, [r7, #20]
 8010a04:	1ad2      	subs	r2, r2, r3
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	69db      	ldr	r3, [r3, #28]
 8010a0a:	429a      	cmp	r2, r3
 8010a0c:	d217      	bcs.n	8010a3e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	789b      	ldrb	r3, [r3, #2]
 8010a12:	613b      	str	r3, [r7, #16]
 8010a14:	e010      	b.n	8010a38 <sync_window+0x78>
					wsect += fs->fsize;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	69db      	ldr	r3, [r3, #28]
 8010a1a:	697a      	ldr	r2, [r7, #20]
 8010a1c:	4413      	add	r3, r2
 8010a1e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	7858      	ldrb	r0, [r3, #1]
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	697a      	ldr	r2, [r7, #20]
 8010a2e:	f7ff ff17 	bl	8010860 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a32:	693b      	ldr	r3, [r7, #16]
 8010a34:	3b01      	subs	r3, #1
 8010a36:	613b      	str	r3, [r7, #16]
 8010a38:	693b      	ldr	r3, [r7, #16]
 8010a3a:	2b01      	cmp	r3, #1
 8010a3c:	d8eb      	bhi.n	8010a16 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	3718      	adds	r7, #24
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}

08010a48 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b084      	sub	sp, #16
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
 8010a50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010a52:	2300      	movs	r3, #0
 8010a54:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a5a:	683a      	ldr	r2, [r7, #0]
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	d01b      	beq.n	8010a98 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f7ff ffad 	bl	80109c0 <sync_window>
 8010a66:	4603      	mov	r3, r0
 8010a68:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010a6a:	7bfb      	ldrb	r3, [r7, #15]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d113      	bne.n	8010a98 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	7858      	ldrb	r0, [r3, #1]
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010a7a:	2301      	movs	r3, #1
 8010a7c:	683a      	ldr	r2, [r7, #0]
 8010a7e:	f7ff fecf 	bl	8010820 <disk_read>
 8010a82:	4603      	mov	r3, r0
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d004      	beq.n	8010a92 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010a88:	f04f 33ff 	mov.w	r3, #4294967295
 8010a8c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010a8e:	2301      	movs	r3, #1
 8010a90:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	683a      	ldr	r2, [r7, #0]
 8010a96:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8010a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	3710      	adds	r7, #16
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}

08010aa2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010aa2:	b480      	push	{r7}
 8010aa4:	b087      	sub	sp, #28
 8010aa6:	af00      	add	r7, sp, #0
 8010aa8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8010aae:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d031      	beq.n	8010b1c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	617b      	str	r3, [r7, #20]
 8010abe:	e002      	b.n	8010ac6 <get_ldnumber+0x24>
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	617b      	str	r3, [r7, #20]
 8010ac6:	697b      	ldr	r3, [r7, #20]
 8010ac8:	781b      	ldrb	r3, [r3, #0]
 8010aca:	2b20      	cmp	r3, #32
 8010acc:	d903      	bls.n	8010ad6 <get_ldnumber+0x34>
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	2b3a      	cmp	r3, #58	; 0x3a
 8010ad4:	d1f4      	bne.n	8010ac0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010ad6:	697b      	ldr	r3, [r7, #20]
 8010ad8:	781b      	ldrb	r3, [r3, #0]
 8010ada:	2b3a      	cmp	r3, #58	; 0x3a
 8010adc:	d11c      	bne.n	8010b18 <get_ldnumber+0x76>
			tp = *path;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	1c5a      	adds	r2, r3, #1
 8010ae8:	60fa      	str	r2, [r7, #12]
 8010aea:	781b      	ldrb	r3, [r3, #0]
 8010aec:	3b30      	subs	r3, #48	; 0x30
 8010aee:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010af0:	68bb      	ldr	r3, [r7, #8]
 8010af2:	2b09      	cmp	r3, #9
 8010af4:	d80e      	bhi.n	8010b14 <get_ldnumber+0x72>
 8010af6:	68fa      	ldr	r2, [r7, #12]
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	429a      	cmp	r2, r3
 8010afc:	d10a      	bne.n	8010b14 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010afe:	68bb      	ldr	r3, [r7, #8]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d107      	bne.n	8010b14 <get_ldnumber+0x72>
					vol = (int)i;
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	3301      	adds	r3, #1
 8010b0c:	617b      	str	r3, [r7, #20]
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	697a      	ldr	r2, [r7, #20]
 8010b12:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010b14:	693b      	ldr	r3, [r7, #16]
 8010b16:	e002      	b.n	8010b1e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010b18:	2300      	movs	r3, #0
 8010b1a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010b1c:	693b      	ldr	r3, [r7, #16]
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	371c      	adds	r7, #28
 8010b22:	46bd      	mov	sp, r7
 8010b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b28:	4770      	bx	lr
	...

08010b2c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b082      	sub	sp, #8
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
 8010b34:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2200      	movs	r2, #0
 8010b3a:	70da      	strb	r2, [r3, #3]
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8010b42:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010b44:	6839      	ldr	r1, [r7, #0]
 8010b46:	6878      	ldr	r0, [r7, #4]
 8010b48:	f7ff ff7e 	bl	8010a48 <move_window>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d001      	beq.n	8010b56 <check_fs+0x2a>
 8010b52:	2304      	movs	r3, #4
 8010b54:	e038      	b.n	8010bc8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	3334      	adds	r3, #52	; 0x34
 8010b5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7ff fe9e 	bl	80108a0 <ld_word>
 8010b64:	4603      	mov	r3, r0
 8010b66:	461a      	mov	r2, r3
 8010b68:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	d001      	beq.n	8010b74 <check_fs+0x48>
 8010b70:	2303      	movs	r3, #3
 8010b72:	e029      	b.n	8010bc8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010b7a:	2be9      	cmp	r3, #233	; 0xe9
 8010b7c:	d009      	beq.n	8010b92 <check_fs+0x66>
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010b84:	2beb      	cmp	r3, #235	; 0xeb
 8010b86:	d11e      	bne.n	8010bc6 <check_fs+0x9a>
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010b8e:	2b90      	cmp	r3, #144	; 0x90
 8010b90:	d119      	bne.n	8010bc6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	3334      	adds	r3, #52	; 0x34
 8010b96:	3336      	adds	r3, #54	; 0x36
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f7ff fe99 	bl	80108d0 <ld_dword>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010ba4:	4a0a      	ldr	r2, [pc, #40]	; (8010bd0 <check_fs+0xa4>)
 8010ba6:	4293      	cmp	r3, r2
 8010ba8:	d101      	bne.n	8010bae <check_fs+0x82>
 8010baa:	2300      	movs	r3, #0
 8010bac:	e00c      	b.n	8010bc8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	3334      	adds	r3, #52	; 0x34
 8010bb2:	3352      	adds	r3, #82	; 0x52
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f7ff fe8b 	bl	80108d0 <ld_dword>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	4a05      	ldr	r2, [pc, #20]	; (8010bd4 <check_fs+0xa8>)
 8010bbe:	4293      	cmp	r3, r2
 8010bc0:	d101      	bne.n	8010bc6 <check_fs+0x9a>
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	e000      	b.n	8010bc8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010bc6:	2302      	movs	r3, #2
}
 8010bc8:	4618      	mov	r0, r3
 8010bca:	3708      	adds	r7, #8
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	bd80      	pop	{r7, pc}
 8010bd0:	00544146 	.word	0x00544146
 8010bd4:	33544146 	.word	0x33544146

08010bd8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b096      	sub	sp, #88	; 0x58
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	60f8      	str	r0, [r7, #12]
 8010be0:	60b9      	str	r1, [r7, #8]
 8010be2:	4613      	mov	r3, r2
 8010be4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	2200      	movs	r2, #0
 8010bea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010bec:	68f8      	ldr	r0, [r7, #12]
 8010bee:	f7ff ff58 	bl	8010aa2 <get_ldnumber>
 8010bf2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	da01      	bge.n	8010bfe <find_volume+0x26>
 8010bfa:	230b      	movs	r3, #11
 8010bfc:	e235      	b.n	801106a <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010bfe:	4aa5      	ldr	r2, [pc, #660]	; (8010e94 <find_volume+0x2bc>)
 8010c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c06:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d101      	bne.n	8010c12 <find_volume+0x3a>
 8010c0e:	230c      	movs	r3, #12
 8010c10:	e22b      	b.n	801106a <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8010c12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010c14:	f7ff fe7f 	bl	8010916 <lock_fs>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d101      	bne.n	8010c22 <find_volume+0x4a>
 8010c1e:	230f      	movs	r3, #15
 8010c20:	e223      	b.n	801106a <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c26:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010c28:	79fb      	ldrb	r3, [r7, #7]
 8010c2a:	f023 0301 	bic.w	r3, r3, #1
 8010c2e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c32:	781b      	ldrb	r3, [r3, #0]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d01a      	beq.n	8010c6e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c3a:	785b      	ldrb	r3, [r3, #1]
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f7ff fdaf 	bl	80107a0 <disk_status>
 8010c42:	4603      	mov	r3, r0
 8010c44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010c48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c4c:	f003 0301 	and.w	r3, r3, #1
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d10c      	bne.n	8010c6e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010c54:	79fb      	ldrb	r3, [r7, #7]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d007      	beq.n	8010c6a <find_volume+0x92>
 8010c5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c5e:	f003 0304 	and.w	r3, r3, #4
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d001      	beq.n	8010c6a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8010c66:	230a      	movs	r3, #10
 8010c68:	e1ff      	b.n	801106a <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	e1fd      	b.n	801106a <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c70:	2200      	movs	r2, #0
 8010c72:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c76:	b2da      	uxtb	r2, r3
 8010c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c7a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c7e:	785b      	ldrb	r3, [r3, #1]
 8010c80:	4618      	mov	r0, r3
 8010c82:	f7ff fda7 	bl	80107d4 <disk_initialize>
 8010c86:	4603      	mov	r3, r0
 8010c88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010c8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c90:	f003 0301 	and.w	r3, r3, #1
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d001      	beq.n	8010c9c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010c98:	2303      	movs	r3, #3
 8010c9a:	e1e6      	b.n	801106a <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010c9c:	79fb      	ldrb	r3, [r7, #7]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d007      	beq.n	8010cb2 <find_volume+0xda>
 8010ca2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ca6:	f003 0304 	and.w	r3, r3, #4
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d001      	beq.n	8010cb2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8010cae:	230a      	movs	r3, #10
 8010cb0:	e1db      	b.n	801106a <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010cb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010cb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010cba:	f7ff ff37 	bl	8010b2c <check_fs>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010cc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010cc8:	2b02      	cmp	r3, #2
 8010cca:	d149      	bne.n	8010d60 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010ccc:	2300      	movs	r3, #0
 8010cce:	643b      	str	r3, [r7, #64]	; 0x40
 8010cd0:	e01e      	b.n	8010d10 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cd4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010cda:	011b      	lsls	r3, r3, #4
 8010cdc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010ce0:	4413      	add	r3, r2
 8010ce2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce6:	3304      	adds	r3, #4
 8010ce8:	781b      	ldrb	r3, [r3, #0]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d006      	beq.n	8010cfc <find_volume+0x124>
 8010cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf0:	3308      	adds	r3, #8
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7ff fdec 	bl	80108d0 <ld_dword>
 8010cf8:	4602      	mov	r2, r0
 8010cfa:	e000      	b.n	8010cfe <find_volume+0x126>
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d00:	009b      	lsls	r3, r3, #2
 8010d02:	3358      	adds	r3, #88	; 0x58
 8010d04:	443b      	add	r3, r7
 8010d06:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d0c:	3301      	adds	r3, #1
 8010d0e:	643b      	str	r3, [r7, #64]	; 0x40
 8010d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d12:	2b03      	cmp	r3, #3
 8010d14:	d9dd      	bls.n	8010cd2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010d16:	2300      	movs	r3, #0
 8010d18:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d002      	beq.n	8010d26 <find_volume+0x14e>
 8010d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d22:	3b01      	subs	r3, #1
 8010d24:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d28:	009b      	lsls	r3, r3, #2
 8010d2a:	3358      	adds	r3, #88	; 0x58
 8010d2c:	443b      	add	r3, r7
 8010d2e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010d32:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d005      	beq.n	8010d46 <find_volume+0x16e>
 8010d3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010d3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010d3e:	f7ff fef5 	bl	8010b2c <check_fs>
 8010d42:	4603      	mov	r3, r0
 8010d44:	e000      	b.n	8010d48 <find_volume+0x170>
 8010d46:	2303      	movs	r3, #3
 8010d48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010d4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d50:	2b01      	cmp	r3, #1
 8010d52:	d905      	bls.n	8010d60 <find_volume+0x188>
 8010d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d56:	3301      	adds	r3, #1
 8010d58:	643b      	str	r3, [r7, #64]	; 0x40
 8010d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d5c:	2b03      	cmp	r3, #3
 8010d5e:	d9e2      	bls.n	8010d26 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010d60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d64:	2b04      	cmp	r3, #4
 8010d66:	d101      	bne.n	8010d6c <find_volume+0x194>
 8010d68:	2301      	movs	r3, #1
 8010d6a:	e17e      	b.n	801106a <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010d6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d70:	2b01      	cmp	r3, #1
 8010d72:	d901      	bls.n	8010d78 <find_volume+0x1a0>
 8010d74:	230d      	movs	r3, #13
 8010d76:	e178      	b.n	801106a <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d7a:	3334      	adds	r3, #52	; 0x34
 8010d7c:	330b      	adds	r3, #11
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f7ff fd8e 	bl	80108a0 <ld_word>
 8010d84:	4603      	mov	r3, r0
 8010d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010d8a:	d001      	beq.n	8010d90 <find_volume+0x1b8>
 8010d8c:	230d      	movs	r3, #13
 8010d8e:	e16c      	b.n	801106a <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d92:	3334      	adds	r3, #52	; 0x34
 8010d94:	3316      	adds	r3, #22
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7ff fd82 	bl	80108a0 <ld_word>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d106      	bne.n	8010db4 <find_volume+0x1dc>
 8010da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010da8:	3334      	adds	r3, #52	; 0x34
 8010daa:	3324      	adds	r3, #36	; 0x24
 8010dac:	4618      	mov	r0, r3
 8010dae:	f7ff fd8f 	bl	80108d0 <ld_dword>
 8010db2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010db8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dbc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8010dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dc2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dc6:	789b      	ldrb	r3, [r3, #2]
 8010dc8:	2b01      	cmp	r3, #1
 8010dca:	d005      	beq.n	8010dd8 <find_volume+0x200>
 8010dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dce:	789b      	ldrb	r3, [r3, #2]
 8010dd0:	2b02      	cmp	r3, #2
 8010dd2:	d001      	beq.n	8010dd8 <find_volume+0x200>
 8010dd4:	230d      	movs	r3, #13
 8010dd6:	e148      	b.n	801106a <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dda:	789b      	ldrb	r3, [r3, #2]
 8010ddc:	461a      	mov	r2, r3
 8010dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010de0:	fb02 f303 	mul.w	r3, r2, r3
 8010de4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010dec:	b29a      	uxth	r2, r3
 8010dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df4:	895b      	ldrh	r3, [r3, #10]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d008      	beq.n	8010e0c <find_volume+0x234>
 8010dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dfc:	895b      	ldrh	r3, [r3, #10]
 8010dfe:	461a      	mov	r2, r3
 8010e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e02:	895b      	ldrh	r3, [r3, #10]
 8010e04:	3b01      	subs	r3, #1
 8010e06:	4013      	ands	r3, r2
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d001      	beq.n	8010e10 <find_volume+0x238>
 8010e0c:	230d      	movs	r3, #13
 8010e0e:	e12c      	b.n	801106a <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e12:	3334      	adds	r3, #52	; 0x34
 8010e14:	3311      	adds	r3, #17
 8010e16:	4618      	mov	r0, r3
 8010e18:	f7ff fd42 	bl	80108a0 <ld_word>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	461a      	mov	r2, r3
 8010e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e22:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e26:	891b      	ldrh	r3, [r3, #8]
 8010e28:	f003 030f 	and.w	r3, r3, #15
 8010e2c:	b29b      	uxth	r3, r3
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d001      	beq.n	8010e36 <find_volume+0x25e>
 8010e32:	230d      	movs	r3, #13
 8010e34:	e119      	b.n	801106a <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e38:	3334      	adds	r3, #52	; 0x34
 8010e3a:	3313      	adds	r3, #19
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f7ff fd2f 	bl	80108a0 <ld_word>
 8010e42:	4603      	mov	r3, r0
 8010e44:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d106      	bne.n	8010e5a <find_volume+0x282>
 8010e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e4e:	3334      	adds	r3, #52	; 0x34
 8010e50:	3320      	adds	r3, #32
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7ff fd3c 	bl	80108d0 <ld_dword>
 8010e58:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e5c:	3334      	adds	r3, #52	; 0x34
 8010e5e:	330e      	adds	r3, #14
 8010e60:	4618      	mov	r0, r3
 8010e62:	f7ff fd1d 	bl	80108a0 <ld_word>
 8010e66:	4603      	mov	r3, r0
 8010e68:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010e6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d101      	bne.n	8010e74 <find_volume+0x29c>
 8010e70:	230d      	movs	r3, #13
 8010e72:	e0fa      	b.n	801106a <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010e74:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e78:	4413      	add	r3, r2
 8010e7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010e7c:	8912      	ldrh	r2, [r2, #8]
 8010e7e:	0912      	lsrs	r2, r2, #4
 8010e80:	b292      	uxth	r2, r2
 8010e82:	4413      	add	r3, r2
 8010e84:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010e86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e8a:	429a      	cmp	r2, r3
 8010e8c:	d204      	bcs.n	8010e98 <find_volume+0x2c0>
 8010e8e:	230d      	movs	r3, #13
 8010e90:	e0eb      	b.n	801106a <find_volume+0x492>
 8010e92:	bf00      	nop
 8010e94:	20000aac 	.word	0x20000aac
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010e98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e9c:	1ad3      	subs	r3, r2, r3
 8010e9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010ea0:	8952      	ldrh	r2, [r2, #10]
 8010ea2:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ea6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d101      	bne.n	8010eb2 <find_volume+0x2da>
 8010eae:	230d      	movs	r3, #13
 8010eb0:	e0db      	b.n	801106a <find_volume+0x492>
		fmt = FS_FAT32;
 8010eb2:	2303      	movs	r3, #3
 8010eb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eba:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010ebe:	4293      	cmp	r3, r2
 8010ec0:	d802      	bhi.n	8010ec8 <find_volume+0x2f0>
 8010ec2:	2302      	movs	r3, #2
 8010ec4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eca:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010ece:	4293      	cmp	r3, r2
 8010ed0:	d802      	bhi.n	8010ed8 <find_volume+0x300>
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eda:	1c9a      	adds	r2, r3, #2
 8010edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ede:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010ee4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010ee6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010eea:	441a      	add	r2, r3
 8010eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eee:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010ef0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef4:	441a      	add	r2, r3
 8010ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ef8:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8010efa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010efe:	2b03      	cmp	r3, #3
 8010f00:	d11e      	bne.n	8010f40 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f04:	3334      	adds	r3, #52	; 0x34
 8010f06:	332a      	adds	r3, #42	; 0x2a
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f7ff fcc9 	bl	80108a0 <ld_word>
 8010f0e:	4603      	mov	r3, r0
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d001      	beq.n	8010f18 <find_volume+0x340>
 8010f14:	230d      	movs	r3, #13
 8010f16:	e0a8      	b.n	801106a <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f1a:	891b      	ldrh	r3, [r3, #8]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d001      	beq.n	8010f24 <find_volume+0x34c>
 8010f20:	230d      	movs	r3, #13
 8010f22:	e0a2      	b.n	801106a <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f26:	3334      	adds	r3, #52	; 0x34
 8010f28:	332c      	adds	r3, #44	; 0x2c
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f7ff fcd0 	bl	80108d0 <ld_dword>
 8010f30:	4602      	mov	r2, r0
 8010f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f34:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f38:	699b      	ldr	r3, [r3, #24]
 8010f3a:	009b      	lsls	r3, r3, #2
 8010f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8010f3e:	e01f      	b.n	8010f80 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f42:	891b      	ldrh	r3, [r3, #8]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d101      	bne.n	8010f4c <find_volume+0x374>
 8010f48:	230d      	movs	r3, #13
 8010f4a:	e08e      	b.n	801106a <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f52:	441a      	add	r2, r3
 8010f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f56:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010f58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010f5c:	2b02      	cmp	r3, #2
 8010f5e:	d103      	bne.n	8010f68 <find_volume+0x390>
 8010f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f62:	699b      	ldr	r3, [r3, #24]
 8010f64:	005b      	lsls	r3, r3, #1
 8010f66:	e00a      	b.n	8010f7e <find_volume+0x3a6>
 8010f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f6a:	699a      	ldr	r2, [r3, #24]
 8010f6c:	4613      	mov	r3, r2
 8010f6e:	005b      	lsls	r3, r3, #1
 8010f70:	4413      	add	r3, r2
 8010f72:	085a      	lsrs	r2, r3, #1
 8010f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f76:	699b      	ldr	r3, [r3, #24]
 8010f78:	f003 0301 	and.w	r3, r3, #1
 8010f7c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010f7e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f82:	69da      	ldr	r2, [r3, #28]
 8010f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f86:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8010f8a:	0a5b      	lsrs	r3, r3, #9
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	d201      	bcs.n	8010f94 <find_volume+0x3bc>
 8010f90:	230d      	movs	r3, #13
 8010f92:	e06a      	b.n	801106a <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f96:	f04f 32ff 	mov.w	r2, #4294967295
 8010f9a:	615a      	str	r2, [r3, #20]
 8010f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f9e:	695a      	ldr	r2, [r3, #20]
 8010fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fa2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fa6:	2280      	movs	r2, #128	; 0x80
 8010fa8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010faa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fae:	2b03      	cmp	r3, #3
 8010fb0:	d149      	bne.n	8011046 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fb4:	3334      	adds	r3, #52	; 0x34
 8010fb6:	3330      	adds	r3, #48	; 0x30
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f7ff fc71 	bl	80108a0 <ld_word>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	2b01      	cmp	r3, #1
 8010fc2:	d140      	bne.n	8011046 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fc6:	3301      	adds	r3, #1
 8010fc8:	4619      	mov	r1, r3
 8010fca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010fcc:	f7ff fd3c 	bl	8010a48 <move_window>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d137      	bne.n	8011046 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8010fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fd8:	2200      	movs	r2, #0
 8010fda:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fde:	3334      	adds	r3, #52	; 0x34
 8010fe0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f7ff fc5b 	bl	80108a0 <ld_word>
 8010fea:	4603      	mov	r3, r0
 8010fec:	461a      	mov	r2, r3
 8010fee:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	d127      	bne.n	8011046 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff8:	3334      	adds	r3, #52	; 0x34
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f7ff fc68 	bl	80108d0 <ld_dword>
 8011000:	4603      	mov	r3, r0
 8011002:	4a1c      	ldr	r2, [pc, #112]	; (8011074 <find_volume+0x49c>)
 8011004:	4293      	cmp	r3, r2
 8011006:	d11e      	bne.n	8011046 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801100a:	3334      	adds	r3, #52	; 0x34
 801100c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011010:	4618      	mov	r0, r3
 8011012:	f7ff fc5d 	bl	80108d0 <ld_dword>
 8011016:	4603      	mov	r3, r0
 8011018:	4a17      	ldr	r2, [pc, #92]	; (8011078 <find_volume+0x4a0>)
 801101a:	4293      	cmp	r3, r2
 801101c:	d113      	bne.n	8011046 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801101e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011020:	3334      	adds	r3, #52	; 0x34
 8011022:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011026:	4618      	mov	r0, r3
 8011028:	f7ff fc52 	bl	80108d0 <ld_dword>
 801102c:	4602      	mov	r2, r0
 801102e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011030:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011034:	3334      	adds	r3, #52	; 0x34
 8011036:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801103a:	4618      	mov	r0, r3
 801103c:	f7ff fc48 	bl	80108d0 <ld_dword>
 8011040:	4602      	mov	r2, r0
 8011042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011044:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011048:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801104c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801104e:	4b0b      	ldr	r3, [pc, #44]	; (801107c <find_volume+0x4a4>)
 8011050:	881b      	ldrh	r3, [r3, #0]
 8011052:	3301      	adds	r3, #1
 8011054:	b29a      	uxth	r2, r3
 8011056:	4b09      	ldr	r3, [pc, #36]	; (801107c <find_volume+0x4a4>)
 8011058:	801a      	strh	r2, [r3, #0]
 801105a:	4b08      	ldr	r3, [pc, #32]	; (801107c <find_volume+0x4a4>)
 801105c:	881a      	ldrh	r2, [r3, #0]
 801105e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011060:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011062:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011064:	f7ff fc88 	bl	8010978 <clear_lock>
#endif
	return FR_OK;
 8011068:	2300      	movs	r3, #0
}
 801106a:	4618      	mov	r0, r3
 801106c:	3758      	adds	r7, #88	; 0x58
 801106e:	46bd      	mov	sp, r7
 8011070:	bd80      	pop	{r7, pc}
 8011072:	bf00      	nop
 8011074:	41615252 	.word	0x41615252
 8011078:	61417272 	.word	0x61417272
 801107c:	20000ab0 	.word	0x20000ab0

08011080 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b088      	sub	sp, #32
 8011084:	af00      	add	r7, sp, #0
 8011086:	60f8      	str	r0, [r7, #12]
 8011088:	60b9      	str	r1, [r7, #8]
 801108a:	4613      	mov	r3, r2
 801108c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011092:	f107 0310 	add.w	r3, r7, #16
 8011096:	4618      	mov	r0, r3
 8011098:	f7ff fd03 	bl	8010aa2 <get_ldnumber>
 801109c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801109e:	69fb      	ldr	r3, [r7, #28]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	da01      	bge.n	80110a8 <f_mount+0x28>
 80110a4:	230b      	movs	r3, #11
 80110a6:	e048      	b.n	801113a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80110a8:	4a26      	ldr	r2, [pc, #152]	; (8011144 <f_mount+0xc4>)
 80110aa:	69fb      	ldr	r3, [r7, #28]
 80110ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80110b2:	69bb      	ldr	r3, [r7, #24]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d00f      	beq.n	80110d8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80110b8:	69b8      	ldr	r0, [r7, #24]
 80110ba:	f7ff fc5d 	bl	8010978 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80110be:	69bb      	ldr	r3, [r7, #24]
 80110c0:	68db      	ldr	r3, [r3, #12]
 80110c2:	4618      	mov	r0, r3
 80110c4:	f000 f8b6 	bl	8011234 <ff_del_syncobj>
 80110c8:	4603      	mov	r3, r0
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d101      	bne.n	80110d2 <f_mount+0x52>
 80110ce:	2302      	movs	r3, #2
 80110d0:	e033      	b.n	801113a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80110d2:	69bb      	ldr	r3, [r7, #24]
 80110d4:	2200      	movs	r2, #0
 80110d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d00f      	beq.n	80110fe <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	2200      	movs	r2, #0
 80110e2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80110e4:	69fb      	ldr	r3, [r7, #28]
 80110e6:	b2da      	uxtb	r2, r3
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	330c      	adds	r3, #12
 80110ec:	4619      	mov	r1, r3
 80110ee:	4610      	mov	r0, r2
 80110f0:	f000 f885 	bl	80111fe <ff_cre_syncobj>
 80110f4:	4603      	mov	r3, r0
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d101      	bne.n	80110fe <f_mount+0x7e>
 80110fa:	2302      	movs	r3, #2
 80110fc:	e01d      	b.n	801113a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80110fe:	68fa      	ldr	r2, [r7, #12]
 8011100:	4910      	ldr	r1, [pc, #64]	; (8011144 <f_mount+0xc4>)
 8011102:	69fb      	ldr	r3, [r7, #28]
 8011104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d002      	beq.n	8011114 <f_mount+0x94>
 801110e:	79fb      	ldrb	r3, [r7, #7]
 8011110:	2b01      	cmp	r3, #1
 8011112:	d001      	beq.n	8011118 <f_mount+0x98>
 8011114:	2300      	movs	r3, #0
 8011116:	e010      	b.n	801113a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011118:	f107 010c 	add.w	r1, r7, #12
 801111c:	f107 0308 	add.w	r3, r7, #8
 8011120:	2200      	movs	r2, #0
 8011122:	4618      	mov	r0, r3
 8011124:	f7ff fd58 	bl	8010bd8 <find_volume>
 8011128:	4603      	mov	r3, r0
 801112a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	7dfa      	ldrb	r2, [r7, #23]
 8011130:	4611      	mov	r1, r2
 8011132:	4618      	mov	r0, r3
 8011134:	f7ff fc05 	bl	8010942 <unlock_fs>
 8011138:	7dfb      	ldrb	r3, [r7, #23]
}
 801113a:	4618      	mov	r0, r3
 801113c:	3720      	adds	r7, #32
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}
 8011142:	bf00      	nop
 8011144:	20000aac 	.word	0x20000aac

08011148 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011148:	b480      	push	{r7}
 801114a:	b087      	sub	sp, #28
 801114c:	af00      	add	r7, sp, #0
 801114e:	60f8      	str	r0, [r7, #12]
 8011150:	60b9      	str	r1, [r7, #8]
 8011152:	4613      	mov	r3, r2
 8011154:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011156:	2301      	movs	r3, #1
 8011158:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801115a:	2300      	movs	r3, #0
 801115c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801115e:	4b1f      	ldr	r3, [pc, #124]	; (80111dc <FATFS_LinkDriverEx+0x94>)
 8011160:	7a5b      	ldrb	r3, [r3, #9]
 8011162:	b2db      	uxtb	r3, r3
 8011164:	2b00      	cmp	r3, #0
 8011166:	d131      	bne.n	80111cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011168:	4b1c      	ldr	r3, [pc, #112]	; (80111dc <FATFS_LinkDriverEx+0x94>)
 801116a:	7a5b      	ldrb	r3, [r3, #9]
 801116c:	b2db      	uxtb	r3, r3
 801116e:	461a      	mov	r2, r3
 8011170:	4b1a      	ldr	r3, [pc, #104]	; (80111dc <FATFS_LinkDriverEx+0x94>)
 8011172:	2100      	movs	r1, #0
 8011174:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011176:	4b19      	ldr	r3, [pc, #100]	; (80111dc <FATFS_LinkDriverEx+0x94>)
 8011178:	7a5b      	ldrb	r3, [r3, #9]
 801117a:	b2db      	uxtb	r3, r3
 801117c:	4a17      	ldr	r2, [pc, #92]	; (80111dc <FATFS_LinkDriverEx+0x94>)
 801117e:	009b      	lsls	r3, r3, #2
 8011180:	4413      	add	r3, r2
 8011182:	68fa      	ldr	r2, [r7, #12]
 8011184:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011186:	4b15      	ldr	r3, [pc, #84]	; (80111dc <FATFS_LinkDriverEx+0x94>)
 8011188:	7a5b      	ldrb	r3, [r3, #9]
 801118a:	b2db      	uxtb	r3, r3
 801118c:	461a      	mov	r2, r3
 801118e:	4b13      	ldr	r3, [pc, #76]	; (80111dc <FATFS_LinkDriverEx+0x94>)
 8011190:	4413      	add	r3, r2
 8011192:	79fa      	ldrb	r2, [r7, #7]
 8011194:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011196:	4b11      	ldr	r3, [pc, #68]	; (80111dc <FATFS_LinkDriverEx+0x94>)
 8011198:	7a5b      	ldrb	r3, [r3, #9]
 801119a:	b2db      	uxtb	r3, r3
 801119c:	1c5a      	adds	r2, r3, #1
 801119e:	b2d1      	uxtb	r1, r2
 80111a0:	4a0e      	ldr	r2, [pc, #56]	; (80111dc <FATFS_LinkDriverEx+0x94>)
 80111a2:	7251      	strb	r1, [r2, #9]
 80111a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80111a6:	7dbb      	ldrb	r3, [r7, #22]
 80111a8:	3330      	adds	r3, #48	; 0x30
 80111aa:	b2da      	uxtb	r2, r3
 80111ac:	68bb      	ldr	r3, [r7, #8]
 80111ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	3301      	adds	r3, #1
 80111b4:	223a      	movs	r2, #58	; 0x3a
 80111b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80111b8:	68bb      	ldr	r3, [r7, #8]
 80111ba:	3302      	adds	r3, #2
 80111bc:	222f      	movs	r2, #47	; 0x2f
 80111be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	3303      	adds	r3, #3
 80111c4:	2200      	movs	r2, #0
 80111c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80111c8:	2300      	movs	r3, #0
 80111ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80111cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	371c      	adds	r7, #28
 80111d2:	46bd      	mov	sp, r7
 80111d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d8:	4770      	bx	lr
 80111da:	bf00      	nop
 80111dc:	20000ad4 	.word	0x20000ad4

080111e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b082      	sub	sp, #8
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80111ea:	2200      	movs	r2, #0
 80111ec:	6839      	ldr	r1, [r7, #0]
 80111ee:	6878      	ldr	r0, [r7, #4]
 80111f0:	f7ff ffaa 	bl	8011148 <FATFS_LinkDriverEx>
 80111f4:	4603      	mov	r3, r0
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	3708      	adds	r7, #8
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}

080111fe <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80111fe:	b580      	push	{r7, lr}
 8011200:	b084      	sub	sp, #16
 8011202:	af00      	add	r7, sp, #0
 8011204:	4603      	mov	r3, r0
 8011206:	6039      	str	r1, [r7, #0]
 8011208:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801120a:	2200      	movs	r2, #0
 801120c:	2101      	movs	r1, #1
 801120e:	2001      	movs	r0, #1
 8011210:	f000 fb20 	bl	8011854 <osSemaphoreNew>
 8011214:	4602      	mov	r2, r0
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	2b00      	cmp	r3, #0
 8011220:	bf14      	ite	ne
 8011222:	2301      	movne	r3, #1
 8011224:	2300      	moveq	r3, #0
 8011226:	b2db      	uxtb	r3, r3
 8011228:	60fb      	str	r3, [r7, #12]

    return ret;
 801122a:	68fb      	ldr	r3, [r7, #12]
}
 801122c:	4618      	mov	r0, r3
 801122e:	3710      	adds	r7, #16
 8011230:	46bd      	mov	sp, r7
 8011232:	bd80      	pop	{r7, pc}

08011234 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b082      	sub	sp, #8
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801123c:	6878      	ldr	r0, [r7, #4]
 801123e:	f000 fc29 	bl	8011a94 <osSemaphoreDelete>
#endif
    return 1;
 8011242:	2301      	movs	r3, #1
}
 8011244:	4618      	mov	r0, r3
 8011246:	3708      	adds	r7, #8
 8011248:	46bd      	mov	sp, r7
 801124a:	bd80      	pop	{r7, pc}

0801124c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b084      	sub	sp, #16
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8011254:	2300      	movs	r3, #0
 8011256:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8011258:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f000 fb83 	bl	8011968 <osSemaphoreAcquire>
 8011262:	4603      	mov	r3, r0
 8011264:	2b00      	cmp	r3, #0
 8011266:	d101      	bne.n	801126c <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8011268:	2301      	movs	r3, #1
 801126a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801126c:	68fb      	ldr	r3, [r7, #12]
}
 801126e:	4618      	mov	r0, r3
 8011270:	3710      	adds	r7, #16
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}

08011276 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8011276:	b580      	push	{r7, lr}
 8011278:	b082      	sub	sp, #8
 801127a:	af00      	add	r7, sp, #0
 801127c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f000 fbc4 	bl	8011a0c <osSemaphoreRelease>
#endif
}
 8011284:	bf00      	nop
 8011286:	3708      	adds	r7, #8
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}

0801128c <__NVIC_SetPriority>:
{
 801128c:	b480      	push	{r7}
 801128e:	b083      	sub	sp, #12
 8011290:	af00      	add	r7, sp, #0
 8011292:	4603      	mov	r3, r0
 8011294:	6039      	str	r1, [r7, #0]
 8011296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801129c:	2b00      	cmp	r3, #0
 801129e:	db0a      	blt.n	80112b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	b2da      	uxtb	r2, r3
 80112a4:	490c      	ldr	r1, [pc, #48]	; (80112d8 <__NVIC_SetPriority+0x4c>)
 80112a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80112aa:	0112      	lsls	r2, r2, #4
 80112ac:	b2d2      	uxtb	r2, r2
 80112ae:	440b      	add	r3, r1
 80112b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80112b4:	e00a      	b.n	80112cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	b2da      	uxtb	r2, r3
 80112ba:	4908      	ldr	r1, [pc, #32]	; (80112dc <__NVIC_SetPriority+0x50>)
 80112bc:	79fb      	ldrb	r3, [r7, #7]
 80112be:	f003 030f 	and.w	r3, r3, #15
 80112c2:	3b04      	subs	r3, #4
 80112c4:	0112      	lsls	r2, r2, #4
 80112c6:	b2d2      	uxtb	r2, r2
 80112c8:	440b      	add	r3, r1
 80112ca:	761a      	strb	r2, [r3, #24]
}
 80112cc:	bf00      	nop
 80112ce:	370c      	adds	r7, #12
 80112d0:	46bd      	mov	sp, r7
 80112d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d6:	4770      	bx	lr
 80112d8:	e000e100 	.word	0xe000e100
 80112dc:	e000ed00 	.word	0xe000ed00

080112e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80112e0:	b580      	push	{r7, lr}
 80112e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80112e4:	4b05      	ldr	r3, [pc, #20]	; (80112fc <SysTick_Handler+0x1c>)
 80112e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80112e8:	f002 fdc2 	bl	8013e70 <xTaskGetSchedulerState>
 80112ec:	4603      	mov	r3, r0
 80112ee:	2b01      	cmp	r3, #1
 80112f0:	d001      	beq.n	80112f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80112f2:	f003 fd99 	bl	8014e28 <xPortSysTickHandler>
  }
}
 80112f6:	bf00      	nop
 80112f8:	bd80      	pop	{r7, pc}
 80112fa:	bf00      	nop
 80112fc:	e000e010 	.word	0xe000e010

08011300 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011300:	b580      	push	{r7, lr}
 8011302:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8011304:	2100      	movs	r1, #0
 8011306:	f06f 0004 	mvn.w	r0, #4
 801130a:	f7ff ffbf 	bl	801128c <__NVIC_SetPriority>
#endif
}
 801130e:	bf00      	nop
 8011310:	bd80      	pop	{r7, pc}
	...

08011314 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011314:	b480      	push	{r7}
 8011316:	b083      	sub	sp, #12
 8011318:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801131a:	f3ef 8305 	mrs	r3, IPSR
 801131e:	603b      	str	r3, [r7, #0]
  return(result);
 8011320:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011322:	2b00      	cmp	r3, #0
 8011324:	d003      	beq.n	801132e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8011326:	f06f 0305 	mvn.w	r3, #5
 801132a:	607b      	str	r3, [r7, #4]
 801132c:	e00c      	b.n	8011348 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801132e:	4b0a      	ldr	r3, [pc, #40]	; (8011358 <osKernelInitialize+0x44>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d105      	bne.n	8011342 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011336:	4b08      	ldr	r3, [pc, #32]	; (8011358 <osKernelInitialize+0x44>)
 8011338:	2201      	movs	r2, #1
 801133a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801133c:	2300      	movs	r3, #0
 801133e:	607b      	str	r3, [r7, #4]
 8011340:	e002      	b.n	8011348 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8011342:	f04f 33ff 	mov.w	r3, #4294967295
 8011346:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011348:	687b      	ldr	r3, [r7, #4]
}
 801134a:	4618      	mov	r0, r3
 801134c:	370c      	adds	r7, #12
 801134e:	46bd      	mov	sp, r7
 8011350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011354:	4770      	bx	lr
 8011356:	bf00      	nop
 8011358:	20000ae0 	.word	0x20000ae0

0801135c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801135c:	b580      	push	{r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011362:	f3ef 8305 	mrs	r3, IPSR
 8011366:	603b      	str	r3, [r7, #0]
  return(result);
 8011368:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801136a:	2b00      	cmp	r3, #0
 801136c:	d003      	beq.n	8011376 <osKernelStart+0x1a>
    stat = osErrorISR;
 801136e:	f06f 0305 	mvn.w	r3, #5
 8011372:	607b      	str	r3, [r7, #4]
 8011374:	e010      	b.n	8011398 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011376:	4b0b      	ldr	r3, [pc, #44]	; (80113a4 <osKernelStart+0x48>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	2b01      	cmp	r3, #1
 801137c:	d109      	bne.n	8011392 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801137e:	f7ff ffbf 	bl	8011300 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011382:	4b08      	ldr	r3, [pc, #32]	; (80113a4 <osKernelStart+0x48>)
 8011384:	2202      	movs	r2, #2
 8011386:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011388:	f002 f878 	bl	801347c <vTaskStartScheduler>
      stat = osOK;
 801138c:	2300      	movs	r3, #0
 801138e:	607b      	str	r3, [r7, #4]
 8011390:	e002      	b.n	8011398 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8011392:	f04f 33ff 	mov.w	r3, #4294967295
 8011396:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011398:	687b      	ldr	r3, [r7, #4]
}
 801139a:	4618      	mov	r0, r3
 801139c:	3708      	adds	r7, #8
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}
 80113a2:	bf00      	nop
 80113a4:	20000ae0 	.word	0x20000ae0

080113a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b08e      	sub	sp, #56	; 0x38
 80113ac:	af04      	add	r7, sp, #16
 80113ae:	60f8      	str	r0, [r7, #12]
 80113b0:	60b9      	str	r1, [r7, #8]
 80113b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80113b4:	2300      	movs	r3, #0
 80113b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80113b8:	f3ef 8305 	mrs	r3, IPSR
 80113bc:	617b      	str	r3, [r7, #20]
  return(result);
 80113be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d17e      	bne.n	80114c2 <osThreadNew+0x11a>
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d07b      	beq.n	80114c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80113ca:	2380      	movs	r3, #128	; 0x80
 80113cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80113ce:	2318      	movs	r3, #24
 80113d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80113d2:	2300      	movs	r3, #0
 80113d4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80113d6:	f04f 33ff 	mov.w	r3, #4294967295
 80113da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d045      	beq.n	801146e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d002      	beq.n	80113f0 <osThreadNew+0x48>
        name = attr->name;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	699b      	ldr	r3, [r3, #24]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d002      	beq.n	80113fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	699b      	ldr	r3, [r3, #24]
 80113fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80113fe:	69fb      	ldr	r3, [r7, #28]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d008      	beq.n	8011416 <osThreadNew+0x6e>
 8011404:	69fb      	ldr	r3, [r7, #28]
 8011406:	2b38      	cmp	r3, #56	; 0x38
 8011408:	d805      	bhi.n	8011416 <osThreadNew+0x6e>
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	685b      	ldr	r3, [r3, #4]
 801140e:	f003 0301 	and.w	r3, r3, #1
 8011412:	2b00      	cmp	r3, #0
 8011414:	d001      	beq.n	801141a <osThreadNew+0x72>
        return (NULL);
 8011416:	2300      	movs	r3, #0
 8011418:	e054      	b.n	80114c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	695b      	ldr	r3, [r3, #20]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d003      	beq.n	801142a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	695b      	ldr	r3, [r3, #20]
 8011426:	089b      	lsrs	r3, r3, #2
 8011428:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	689b      	ldr	r3, [r3, #8]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d00e      	beq.n	8011450 <osThreadNew+0xa8>
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	68db      	ldr	r3, [r3, #12]
 8011436:	2bbb      	cmp	r3, #187	; 0xbb
 8011438:	d90a      	bls.n	8011450 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801143e:	2b00      	cmp	r3, #0
 8011440:	d006      	beq.n	8011450 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	695b      	ldr	r3, [r3, #20]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d002      	beq.n	8011450 <osThreadNew+0xa8>
        mem = 1;
 801144a:	2301      	movs	r3, #1
 801144c:	61bb      	str	r3, [r7, #24]
 801144e:	e010      	b.n	8011472 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	689b      	ldr	r3, [r3, #8]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d10c      	bne.n	8011472 <osThreadNew+0xca>
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	68db      	ldr	r3, [r3, #12]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d108      	bne.n	8011472 <osThreadNew+0xca>
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	691b      	ldr	r3, [r3, #16]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d104      	bne.n	8011472 <osThreadNew+0xca>
          mem = 0;
 8011468:	2300      	movs	r3, #0
 801146a:	61bb      	str	r3, [r7, #24]
 801146c:	e001      	b.n	8011472 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801146e:	2300      	movs	r3, #0
 8011470:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011472:	69bb      	ldr	r3, [r7, #24]
 8011474:	2b01      	cmp	r3, #1
 8011476:	d110      	bne.n	801149a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801147c:	687a      	ldr	r2, [r7, #4]
 801147e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011480:	9202      	str	r2, [sp, #8]
 8011482:	9301      	str	r3, [sp, #4]
 8011484:	69fb      	ldr	r3, [r7, #28]
 8011486:	9300      	str	r3, [sp, #0]
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	6a3a      	ldr	r2, [r7, #32]
 801148c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801148e:	68f8      	ldr	r0, [r7, #12]
 8011490:	f001 fe08 	bl	80130a4 <xTaskCreateStatic>
 8011494:	4603      	mov	r3, r0
 8011496:	613b      	str	r3, [r7, #16]
 8011498:	e013      	b.n	80114c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801149a:	69bb      	ldr	r3, [r7, #24]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d110      	bne.n	80114c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80114a0:	6a3b      	ldr	r3, [r7, #32]
 80114a2:	b29a      	uxth	r2, r3
 80114a4:	f107 0310 	add.w	r3, r7, #16
 80114a8:	9301      	str	r3, [sp, #4]
 80114aa:	69fb      	ldr	r3, [r7, #28]
 80114ac:	9300      	str	r3, [sp, #0]
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80114b2:	68f8      	ldr	r0, [r7, #12]
 80114b4:	f001 fe53 	bl	801315e <xTaskCreate>
 80114b8:	4603      	mov	r3, r0
 80114ba:	2b01      	cmp	r3, #1
 80114bc:	d001      	beq.n	80114c2 <osThreadNew+0x11a>
            hTask = NULL;
 80114be:	2300      	movs	r3, #0
 80114c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80114c2:	693b      	ldr	r3, [r7, #16]
}
 80114c4:	4618      	mov	r0, r3
 80114c6:	3728      	adds	r7, #40	; 0x28
 80114c8:	46bd      	mov	sp, r7
 80114ca:	bd80      	pop	{r7, pc}

080114cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b084      	sub	sp, #16
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80114d4:	f3ef 8305 	mrs	r3, IPSR
 80114d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80114da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d003      	beq.n	80114e8 <osDelay+0x1c>
    stat = osErrorISR;
 80114e0:	f06f 0305 	mvn.w	r3, #5
 80114e4:	60fb      	str	r3, [r7, #12]
 80114e6:	e007      	b.n	80114f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80114e8:	2300      	movs	r3, #0
 80114ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d002      	beq.n	80114f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80114f2:	6878      	ldr	r0, [r7, #4]
 80114f4:	f001 ff8e 	bl	8013414 <vTaskDelay>
    }
  }

  return (stat);
 80114f8:	68fb      	ldr	r3, [r7, #12]
}
 80114fa:	4618      	mov	r0, r3
 80114fc:	3710      	adds	r7, #16
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}

08011502 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8011502:	b580      	push	{r7, lr}
 8011504:	b084      	sub	sp, #16
 8011506:	af00      	add	r7, sp, #0
 8011508:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 801150a:	6878      	ldr	r0, [r7, #4]
 801150c:	f003 fa8e 	bl	8014a2c <pvTimerGetTimerID>
 8011510:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d005      	beq.n	8011524 <TimerCallback+0x22>
    callb->func (callb->arg);
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	68fa      	ldr	r2, [r7, #12]
 801151e:	6852      	ldr	r2, [r2, #4]
 8011520:	4610      	mov	r0, r2
 8011522:	4798      	blx	r3
  }
}
 8011524:	bf00      	nop
 8011526:	3710      	adds	r7, #16
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}

0801152c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 801152c:	b580      	push	{r7, lr}
 801152e:	b08c      	sub	sp, #48	; 0x30
 8011530:	af02      	add	r7, sp, #8
 8011532:	60f8      	str	r0, [r7, #12]
 8011534:	607a      	str	r2, [r7, #4]
 8011536:	603b      	str	r3, [r7, #0]
 8011538:	460b      	mov	r3, r1
 801153a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 801153c:	2300      	movs	r3, #0
 801153e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011540:	f3ef 8305 	mrs	r3, IPSR
 8011544:	613b      	str	r3, [r7, #16]
  return(result);
 8011546:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8011548:	2b00      	cmp	r3, #0
 801154a:	d163      	bne.n	8011614 <osTimerNew+0xe8>
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d060      	beq.n	8011614 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8011552:	2008      	movs	r0, #8
 8011554:	f003 fcf8 	bl	8014f48 <pvPortMalloc>
 8011558:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 801155a:	697b      	ldr	r3, [r7, #20]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d059      	beq.n	8011614 <osTimerNew+0xe8>
      callb->func = func;
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	68fa      	ldr	r2, [r7, #12]
 8011564:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8011566:	697b      	ldr	r3, [r7, #20]
 8011568:	687a      	ldr	r2, [r7, #4]
 801156a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 801156c:	7afb      	ldrb	r3, [r7, #11]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d102      	bne.n	8011578 <osTimerNew+0x4c>
        reload = pdFALSE;
 8011572:	2300      	movs	r3, #0
 8011574:	61fb      	str	r3, [r7, #28]
 8011576:	e001      	b.n	801157c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8011578:	2301      	movs	r3, #1
 801157a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 801157c:	f04f 33ff 	mov.w	r3, #4294967295
 8011580:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8011582:	2300      	movs	r3, #0
 8011584:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d01c      	beq.n	80115c6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d002      	beq.n	801159a <osTimerNew+0x6e>
          name = attr->name;
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 801159a:	683b      	ldr	r3, [r7, #0]
 801159c:	689b      	ldr	r3, [r3, #8]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d006      	beq.n	80115b0 <osTimerNew+0x84>
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	68db      	ldr	r3, [r3, #12]
 80115a6:	2b2b      	cmp	r3, #43	; 0x2b
 80115a8:	d902      	bls.n	80115b0 <osTimerNew+0x84>
          mem = 1;
 80115aa:	2301      	movs	r3, #1
 80115ac:	61bb      	str	r3, [r7, #24]
 80115ae:	e00c      	b.n	80115ca <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	689b      	ldr	r3, [r3, #8]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d108      	bne.n	80115ca <osTimerNew+0x9e>
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	68db      	ldr	r3, [r3, #12]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d104      	bne.n	80115ca <osTimerNew+0x9e>
            mem = 0;
 80115c0:	2300      	movs	r3, #0
 80115c2:	61bb      	str	r3, [r7, #24]
 80115c4:	e001      	b.n	80115ca <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80115c6:	2300      	movs	r3, #0
 80115c8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80115ca:	69bb      	ldr	r3, [r7, #24]
 80115cc:	2b01      	cmp	r3, #1
 80115ce:	d10c      	bne.n	80115ea <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80115d0:	683b      	ldr	r3, [r7, #0]
 80115d2:	689b      	ldr	r3, [r3, #8]
 80115d4:	9301      	str	r3, [sp, #4]
 80115d6:	4b12      	ldr	r3, [pc, #72]	; (8011620 <osTimerNew+0xf4>)
 80115d8:	9300      	str	r3, [sp, #0]
 80115da:	697b      	ldr	r3, [r7, #20]
 80115dc:	69fa      	ldr	r2, [r7, #28]
 80115de:	2101      	movs	r1, #1
 80115e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80115e2:	f002 fea4 	bl	801432e <xTimerCreateStatic>
 80115e6:	6238      	str	r0, [r7, #32]
 80115e8:	e00b      	b.n	8011602 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80115ea:	69bb      	ldr	r3, [r7, #24]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d108      	bne.n	8011602 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80115f0:	4b0b      	ldr	r3, [pc, #44]	; (8011620 <osTimerNew+0xf4>)
 80115f2:	9300      	str	r3, [sp, #0]
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	69fa      	ldr	r2, [r7, #28]
 80115f8:	2101      	movs	r1, #1
 80115fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80115fc:	f002 fe76 	bl	80142ec <xTimerCreate>
 8011600:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8011602:	6a3b      	ldr	r3, [r7, #32]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d105      	bne.n	8011614 <osTimerNew+0xe8>
 8011608:	697b      	ldr	r3, [r7, #20]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d002      	beq.n	8011614 <osTimerNew+0xe8>
        vPortFree (callb);
 801160e:	6978      	ldr	r0, [r7, #20]
 8011610:	f003 fd66 	bl	80150e0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8011614:	6a3b      	ldr	r3, [r7, #32]
}
 8011616:	4618      	mov	r0, r3
 8011618:	3728      	adds	r7, #40	; 0x28
 801161a:	46bd      	mov	sp, r7
 801161c:	bd80      	pop	{r7, pc}
 801161e:	bf00      	nop
 8011620:	08011503 	.word	0x08011503

08011624 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8011624:	b580      	push	{r7, lr}
 8011626:	b088      	sub	sp, #32
 8011628:	af02      	add	r7, sp, #8
 801162a:	6078      	str	r0, [r7, #4]
 801162c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011632:	f3ef 8305 	mrs	r3, IPSR
 8011636:	60fb      	str	r3, [r7, #12]
  return(result);
 8011638:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 801163a:	2b00      	cmp	r3, #0
 801163c:	d003      	beq.n	8011646 <osTimerStart+0x22>
    stat = osErrorISR;
 801163e:	f06f 0305 	mvn.w	r3, #5
 8011642:	617b      	str	r3, [r7, #20]
 8011644:	e017      	b.n	8011676 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d103      	bne.n	8011654 <osTimerStart+0x30>
    stat = osErrorParameter;
 801164c:	f06f 0303 	mvn.w	r3, #3
 8011650:	617b      	str	r3, [r7, #20]
 8011652:	e010      	b.n	8011676 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8011654:	2300      	movs	r3, #0
 8011656:	9300      	str	r3, [sp, #0]
 8011658:	2300      	movs	r3, #0
 801165a:	683a      	ldr	r2, [r7, #0]
 801165c:	2104      	movs	r1, #4
 801165e:	6938      	ldr	r0, [r7, #16]
 8011660:	f002 fede 	bl	8014420 <xTimerGenericCommand>
 8011664:	4603      	mov	r3, r0
 8011666:	2b01      	cmp	r3, #1
 8011668:	d102      	bne.n	8011670 <osTimerStart+0x4c>
      stat = osOK;
 801166a:	2300      	movs	r3, #0
 801166c:	617b      	str	r3, [r7, #20]
 801166e:	e002      	b.n	8011676 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8011670:	f06f 0302 	mvn.w	r3, #2
 8011674:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8011676:	697b      	ldr	r3, [r7, #20]
}
 8011678:	4618      	mov	r0, r3
 801167a:	3718      	adds	r7, #24
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}

08011680 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8011680:	b580      	push	{r7, lr}
 8011682:	b086      	sub	sp, #24
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8011688:	2300      	movs	r3, #0
 801168a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801168c:	f3ef 8305 	mrs	r3, IPSR
 8011690:	60fb      	str	r3, [r7, #12]
  return(result);
 8011692:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8011694:	2b00      	cmp	r3, #0
 8011696:	d12d      	bne.n	80116f4 <osEventFlagsNew+0x74>
    mem = -1;
 8011698:	f04f 33ff 	mov.w	r3, #4294967295
 801169c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d015      	beq.n	80116d0 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	689b      	ldr	r3, [r3, #8]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d006      	beq.n	80116ba <osEventFlagsNew+0x3a>
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	68db      	ldr	r3, [r3, #12]
 80116b0:	2b1f      	cmp	r3, #31
 80116b2:	d902      	bls.n	80116ba <osEventFlagsNew+0x3a>
        mem = 1;
 80116b4:	2301      	movs	r3, #1
 80116b6:	613b      	str	r3, [r7, #16]
 80116b8:	e00c      	b.n	80116d4 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	689b      	ldr	r3, [r3, #8]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d108      	bne.n	80116d4 <osEventFlagsNew+0x54>
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	68db      	ldr	r3, [r3, #12]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d104      	bne.n	80116d4 <osEventFlagsNew+0x54>
          mem = 0;
 80116ca:	2300      	movs	r3, #0
 80116cc:	613b      	str	r3, [r7, #16]
 80116ce:	e001      	b.n	80116d4 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80116d0:	2300      	movs	r3, #0
 80116d2:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80116d4:	693b      	ldr	r3, [r7, #16]
 80116d6:	2b01      	cmp	r3, #1
 80116d8:	d106      	bne.n	80116e8 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	689b      	ldr	r3, [r3, #8]
 80116de:	4618      	mov	r0, r3
 80116e0:	f000 fa30 	bl	8011b44 <xEventGroupCreateStatic>
 80116e4:	6178      	str	r0, [r7, #20]
 80116e6:	e005      	b.n	80116f4 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80116e8:	693b      	ldr	r3, [r7, #16]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d102      	bne.n	80116f4 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80116ee:	f000 fa60 	bl	8011bb2 <xEventGroupCreate>
 80116f2:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80116f4:	697b      	ldr	r3, [r7, #20]
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3718      	adds	r7, #24
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}
	...

08011700 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8011700:	b580      	push	{r7, lr}
 8011702:	b086      	sub	sp, #24
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
 8011708:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801170e:	693b      	ldr	r3, [r7, #16]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d004      	beq.n	801171e <osEventFlagsSet+0x1e>
 8011714:	683b      	ldr	r3, [r7, #0]
 8011716:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801171a:	2b00      	cmp	r3, #0
 801171c:	d003      	beq.n	8011726 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 801171e:	f06f 0303 	mvn.w	r3, #3
 8011722:	617b      	str	r3, [r7, #20]
 8011724:	e028      	b.n	8011778 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011726:	f3ef 8305 	mrs	r3, IPSR
 801172a:	60fb      	str	r3, [r7, #12]
  return(result);
 801172c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801172e:	2b00      	cmp	r3, #0
 8011730:	d01d      	beq.n	801176e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8011732:	2300      	movs	r3, #0
 8011734:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8011736:	f107 0308 	add.w	r3, r7, #8
 801173a:	461a      	mov	r2, r3
 801173c:	6839      	ldr	r1, [r7, #0]
 801173e:	6938      	ldr	r0, [r7, #16]
 8011740:	f000 fbda 	bl	8011ef8 <xEventGroupSetBitsFromISR>
 8011744:	4603      	mov	r3, r0
 8011746:	2b00      	cmp	r3, #0
 8011748:	d103      	bne.n	8011752 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 801174a:	f06f 0302 	mvn.w	r3, #2
 801174e:	617b      	str	r3, [r7, #20]
 8011750:	e012      	b.n	8011778 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d00d      	beq.n	8011778 <osEventFlagsSet+0x78>
 801175c:	4b09      	ldr	r3, [pc, #36]	; (8011784 <osEventFlagsSet+0x84>)
 801175e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011762:	601a      	str	r2, [r3, #0]
 8011764:	f3bf 8f4f 	dsb	sy
 8011768:	f3bf 8f6f 	isb	sy
 801176c:	e004      	b.n	8011778 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 801176e:	6839      	ldr	r1, [r7, #0]
 8011770:	6938      	ldr	r0, [r7, #16]
 8011772:	f000 fb07 	bl	8011d84 <xEventGroupSetBits>
 8011776:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8011778:	697b      	ldr	r3, [r7, #20]
}
 801177a:	4618      	mov	r0, r3
 801177c:	3718      	adds	r7, #24
 801177e:	46bd      	mov	sp, r7
 8011780:	bd80      	pop	{r7, pc}
 8011782:	bf00      	nop
 8011784:	e000ed04 	.word	0xe000ed04

08011788 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8011788:	b580      	push	{r7, lr}
 801178a:	b08c      	sub	sp, #48	; 0x30
 801178c:	af02      	add	r7, sp, #8
 801178e:	60f8      	str	r0, [r7, #12]
 8011790:	60b9      	str	r1, [r7, #8]
 8011792:	607a      	str	r2, [r7, #4]
 8011794:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801179a:	69bb      	ldr	r3, [r7, #24]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d004      	beq.n	80117aa <osEventFlagsWait+0x22>
 80117a0:	68bb      	ldr	r3, [r7, #8]
 80117a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d003      	beq.n	80117b2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80117aa:	f06f 0303 	mvn.w	r3, #3
 80117ae:	61fb      	str	r3, [r7, #28]
 80117b0:	e04b      	b.n	801184a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80117b2:	f3ef 8305 	mrs	r3, IPSR
 80117b6:	617b      	str	r3, [r7, #20]
  return(result);
 80117b8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d003      	beq.n	80117c6 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80117be:	f06f 0305 	mvn.w	r3, #5
 80117c2:	61fb      	str	r3, [r7, #28]
 80117c4:	e041      	b.n	801184a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f003 0301 	and.w	r3, r3, #1
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d002      	beq.n	80117d6 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80117d0:	2301      	movs	r3, #1
 80117d2:	627b      	str	r3, [r7, #36]	; 0x24
 80117d4:	e001      	b.n	80117da <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80117d6:	2300      	movs	r3, #0
 80117d8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f003 0302 	and.w	r3, r3, #2
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d002      	beq.n	80117ea <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80117e4:	2300      	movs	r3, #0
 80117e6:	623b      	str	r3, [r7, #32]
 80117e8:	e001      	b.n	80117ee <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80117ea:	2301      	movs	r3, #1
 80117ec:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80117ee:	683b      	ldr	r3, [r7, #0]
 80117f0:	9300      	str	r3, [sp, #0]
 80117f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117f4:	6a3a      	ldr	r2, [r7, #32]
 80117f6:	68b9      	ldr	r1, [r7, #8]
 80117f8:	69b8      	ldr	r0, [r7, #24]
 80117fa:	f000 f9f5 	bl	8011be8 <xEventGroupWaitBits>
 80117fe:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f003 0301 	and.w	r3, r3, #1
 8011806:	2b00      	cmp	r3, #0
 8011808:	d010      	beq.n	801182c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 801180a:	68ba      	ldr	r2, [r7, #8]
 801180c:	69fb      	ldr	r3, [r7, #28]
 801180e:	4013      	ands	r3, r2
 8011810:	68ba      	ldr	r2, [r7, #8]
 8011812:	429a      	cmp	r2, r3
 8011814:	d019      	beq.n	801184a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8011816:	683b      	ldr	r3, [r7, #0]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d003      	beq.n	8011824 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 801181c:	f06f 0301 	mvn.w	r3, #1
 8011820:	61fb      	str	r3, [r7, #28]
 8011822:	e012      	b.n	801184a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8011824:	f06f 0302 	mvn.w	r3, #2
 8011828:	61fb      	str	r3, [r7, #28]
 801182a:	e00e      	b.n	801184a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 801182c:	68ba      	ldr	r2, [r7, #8]
 801182e:	69fb      	ldr	r3, [r7, #28]
 8011830:	4013      	ands	r3, r2
 8011832:	2b00      	cmp	r3, #0
 8011834:	d109      	bne.n	801184a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d003      	beq.n	8011844 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 801183c:	f06f 0301 	mvn.w	r3, #1
 8011840:	61fb      	str	r3, [r7, #28]
 8011842:	e002      	b.n	801184a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8011844:	f06f 0302 	mvn.w	r3, #2
 8011848:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 801184a:	69fb      	ldr	r3, [r7, #28]
}
 801184c:	4618      	mov	r0, r3
 801184e:	3728      	adds	r7, #40	; 0x28
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}

08011854 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011854:	b580      	push	{r7, lr}
 8011856:	b08a      	sub	sp, #40	; 0x28
 8011858:	af02      	add	r7, sp, #8
 801185a:	60f8      	str	r0, [r7, #12]
 801185c:	60b9      	str	r1, [r7, #8]
 801185e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011860:	2300      	movs	r3, #0
 8011862:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011864:	f3ef 8305 	mrs	r3, IPSR
 8011868:	613b      	str	r3, [r7, #16]
  return(result);
 801186a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801186c:	2b00      	cmp	r3, #0
 801186e:	d175      	bne.n	801195c <osSemaphoreNew+0x108>
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d072      	beq.n	801195c <osSemaphoreNew+0x108>
 8011876:	68ba      	ldr	r2, [r7, #8]
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	429a      	cmp	r2, r3
 801187c:	d86e      	bhi.n	801195c <osSemaphoreNew+0x108>
    mem = -1;
 801187e:	f04f 33ff 	mov.w	r3, #4294967295
 8011882:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d015      	beq.n	80118b6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	689b      	ldr	r3, [r3, #8]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d006      	beq.n	80118a0 <osSemaphoreNew+0x4c>
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	68db      	ldr	r3, [r3, #12]
 8011896:	2b4f      	cmp	r3, #79	; 0x4f
 8011898:	d902      	bls.n	80118a0 <osSemaphoreNew+0x4c>
        mem = 1;
 801189a:	2301      	movs	r3, #1
 801189c:	61bb      	str	r3, [r7, #24]
 801189e:	e00c      	b.n	80118ba <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	689b      	ldr	r3, [r3, #8]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d108      	bne.n	80118ba <osSemaphoreNew+0x66>
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	68db      	ldr	r3, [r3, #12]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d104      	bne.n	80118ba <osSemaphoreNew+0x66>
          mem = 0;
 80118b0:	2300      	movs	r3, #0
 80118b2:	61bb      	str	r3, [r7, #24]
 80118b4:	e001      	b.n	80118ba <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80118b6:	2300      	movs	r3, #0
 80118b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80118ba:	69bb      	ldr	r3, [r7, #24]
 80118bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118c0:	d04c      	beq.n	801195c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	2b01      	cmp	r3, #1
 80118c6:	d128      	bne.n	801191a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80118c8:	69bb      	ldr	r3, [r7, #24]
 80118ca:	2b01      	cmp	r3, #1
 80118cc:	d10a      	bne.n	80118e4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	689b      	ldr	r3, [r3, #8]
 80118d2:	2203      	movs	r2, #3
 80118d4:	9200      	str	r2, [sp, #0]
 80118d6:	2200      	movs	r2, #0
 80118d8:	2100      	movs	r1, #0
 80118da:	2001      	movs	r0, #1
 80118dc:	f000 fc3c 	bl	8012158 <xQueueGenericCreateStatic>
 80118e0:	61f8      	str	r0, [r7, #28]
 80118e2:	e005      	b.n	80118f0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80118e4:	2203      	movs	r2, #3
 80118e6:	2100      	movs	r1, #0
 80118e8:	2001      	movs	r0, #1
 80118ea:	f000 fcad 	bl	8012248 <xQueueGenericCreate>
 80118ee:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80118f0:	69fb      	ldr	r3, [r7, #28]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d022      	beq.n	801193c <osSemaphoreNew+0xe8>
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d01f      	beq.n	801193c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80118fc:	2300      	movs	r3, #0
 80118fe:	2200      	movs	r2, #0
 8011900:	2100      	movs	r1, #0
 8011902:	69f8      	ldr	r0, [r7, #28]
 8011904:	f000 fd68 	bl	80123d8 <xQueueGenericSend>
 8011908:	4603      	mov	r3, r0
 801190a:	2b01      	cmp	r3, #1
 801190c:	d016      	beq.n	801193c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 801190e:	69f8      	ldr	r0, [r7, #28]
 8011910:	f001 f9f4 	bl	8012cfc <vQueueDelete>
            hSemaphore = NULL;
 8011914:	2300      	movs	r3, #0
 8011916:	61fb      	str	r3, [r7, #28]
 8011918:	e010      	b.n	801193c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 801191a:	69bb      	ldr	r3, [r7, #24]
 801191c:	2b01      	cmp	r3, #1
 801191e:	d108      	bne.n	8011932 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	689b      	ldr	r3, [r3, #8]
 8011924:	461a      	mov	r2, r3
 8011926:	68b9      	ldr	r1, [r7, #8]
 8011928:	68f8      	ldr	r0, [r7, #12]
 801192a:	f000 fcea 	bl	8012302 <xQueueCreateCountingSemaphoreStatic>
 801192e:	61f8      	str	r0, [r7, #28]
 8011930:	e004      	b.n	801193c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011932:	68b9      	ldr	r1, [r7, #8]
 8011934:	68f8      	ldr	r0, [r7, #12]
 8011936:	f000 fd1b 	bl	8012370 <xQueueCreateCountingSemaphore>
 801193a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801193c:	69fb      	ldr	r3, [r7, #28]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d00c      	beq.n	801195c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d003      	beq.n	8011950 <osSemaphoreNew+0xfc>
          name = attr->name;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	617b      	str	r3, [r7, #20]
 801194e:	e001      	b.n	8011954 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8011950:	2300      	movs	r3, #0
 8011952:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8011954:	6979      	ldr	r1, [r7, #20]
 8011956:	69f8      	ldr	r0, [r7, #28]
 8011958:	f001 fb1c 	bl	8012f94 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801195c:	69fb      	ldr	r3, [r7, #28]
}
 801195e:	4618      	mov	r0, r3
 8011960:	3720      	adds	r7, #32
 8011962:	46bd      	mov	sp, r7
 8011964:	bd80      	pop	{r7, pc}
	...

08011968 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8011968:	b580      	push	{r7, lr}
 801196a:	b086      	sub	sp, #24
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
 8011970:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011976:	2300      	movs	r3, #0
 8011978:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801197a:	693b      	ldr	r3, [r7, #16]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d103      	bne.n	8011988 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011980:	f06f 0303 	mvn.w	r3, #3
 8011984:	617b      	str	r3, [r7, #20]
 8011986:	e039      	b.n	80119fc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011988:	f3ef 8305 	mrs	r3, IPSR
 801198c:	60fb      	str	r3, [r7, #12]
  return(result);
 801198e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011990:	2b00      	cmp	r3, #0
 8011992:	d022      	beq.n	80119da <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d003      	beq.n	80119a2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801199a:	f06f 0303 	mvn.w	r3, #3
 801199e:	617b      	str	r3, [r7, #20]
 80119a0:	e02c      	b.n	80119fc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80119a2:	2300      	movs	r3, #0
 80119a4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80119a6:	f107 0308 	add.w	r3, r7, #8
 80119aa:	461a      	mov	r2, r3
 80119ac:	2100      	movs	r1, #0
 80119ae:	6938      	ldr	r0, [r7, #16]
 80119b0:	f001 f924 	bl	8012bfc <xQueueReceiveFromISR>
 80119b4:	4603      	mov	r3, r0
 80119b6:	2b01      	cmp	r3, #1
 80119b8:	d003      	beq.n	80119c2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80119ba:	f06f 0302 	mvn.w	r3, #2
 80119be:	617b      	str	r3, [r7, #20]
 80119c0:	e01c      	b.n	80119fc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80119c2:	68bb      	ldr	r3, [r7, #8]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d019      	beq.n	80119fc <osSemaphoreAcquire+0x94>
 80119c8:	4b0f      	ldr	r3, [pc, #60]	; (8011a08 <osSemaphoreAcquire+0xa0>)
 80119ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119ce:	601a      	str	r2, [r3, #0]
 80119d0:	f3bf 8f4f 	dsb	sy
 80119d4:	f3bf 8f6f 	isb	sy
 80119d8:	e010      	b.n	80119fc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80119da:	6839      	ldr	r1, [r7, #0]
 80119dc:	6938      	ldr	r0, [r7, #16]
 80119de:	f001 f801 	bl	80129e4 <xQueueSemaphoreTake>
 80119e2:	4603      	mov	r3, r0
 80119e4:	2b01      	cmp	r3, #1
 80119e6:	d009      	beq.n	80119fc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d003      	beq.n	80119f6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80119ee:	f06f 0301 	mvn.w	r3, #1
 80119f2:	617b      	str	r3, [r7, #20]
 80119f4:	e002      	b.n	80119fc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80119f6:	f06f 0302 	mvn.w	r3, #2
 80119fa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80119fc:	697b      	ldr	r3, [r7, #20]
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	3718      	adds	r7, #24
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd80      	pop	{r7, pc}
 8011a06:	bf00      	nop
 8011a08:	e000ed04 	.word	0xe000ed04

08011a0c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b086      	sub	sp, #24
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011a18:	2300      	movs	r3, #0
 8011a1a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8011a1c:	693b      	ldr	r3, [r7, #16]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d103      	bne.n	8011a2a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8011a22:	f06f 0303 	mvn.w	r3, #3
 8011a26:	617b      	str	r3, [r7, #20]
 8011a28:	e02c      	b.n	8011a84 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a2a:	f3ef 8305 	mrs	r3, IPSR
 8011a2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8011a30:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d01a      	beq.n	8011a6c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8011a36:	2300      	movs	r3, #0
 8011a38:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011a3a:	f107 0308 	add.w	r3, r7, #8
 8011a3e:	4619      	mov	r1, r3
 8011a40:	6938      	ldr	r0, [r7, #16]
 8011a42:	f000 fe62 	bl	801270a <xQueueGiveFromISR>
 8011a46:	4603      	mov	r3, r0
 8011a48:	2b01      	cmp	r3, #1
 8011a4a:	d003      	beq.n	8011a54 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8011a4c:	f06f 0302 	mvn.w	r3, #2
 8011a50:	617b      	str	r3, [r7, #20]
 8011a52:	e017      	b.n	8011a84 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d014      	beq.n	8011a84 <osSemaphoreRelease+0x78>
 8011a5a:	4b0d      	ldr	r3, [pc, #52]	; (8011a90 <osSemaphoreRelease+0x84>)
 8011a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a60:	601a      	str	r2, [r3, #0]
 8011a62:	f3bf 8f4f 	dsb	sy
 8011a66:	f3bf 8f6f 	isb	sy
 8011a6a:	e00b      	b.n	8011a84 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	2200      	movs	r2, #0
 8011a70:	2100      	movs	r1, #0
 8011a72:	6938      	ldr	r0, [r7, #16]
 8011a74:	f000 fcb0 	bl	80123d8 <xQueueGenericSend>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	2b01      	cmp	r3, #1
 8011a7c:	d002      	beq.n	8011a84 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8011a7e:	f06f 0302 	mvn.w	r3, #2
 8011a82:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8011a84:	697b      	ldr	r3, [r7, #20]
}
 8011a86:	4618      	mov	r0, r3
 8011a88:	3718      	adds	r7, #24
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	bd80      	pop	{r7, pc}
 8011a8e:	bf00      	nop
 8011a90:	e000ed04 	.word	0xe000ed04

08011a94 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b086      	sub	sp, #24
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011aa0:	f3ef 8305 	mrs	r3, IPSR
 8011aa4:	60fb      	str	r3, [r7, #12]
  return(result);
 8011aa6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d003      	beq.n	8011ab4 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8011aac:	f06f 0305 	mvn.w	r3, #5
 8011ab0:	617b      	str	r3, [r7, #20]
 8011ab2:	e00e      	b.n	8011ad2 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8011ab4:	693b      	ldr	r3, [r7, #16]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d103      	bne.n	8011ac2 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8011aba:	f06f 0303 	mvn.w	r3, #3
 8011abe:	617b      	str	r3, [r7, #20]
 8011ac0:	e007      	b.n	8011ad2 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8011ac2:	6938      	ldr	r0, [r7, #16]
 8011ac4:	f001 fa90 	bl	8012fe8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8011acc:	6938      	ldr	r0, [r7, #16]
 8011ace:	f001 f915 	bl	8012cfc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8011ad2:	697b      	ldr	r3, [r7, #20]
}
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	3718      	adds	r7, #24
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}

08011adc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011adc:	b480      	push	{r7}
 8011ade:	b085      	sub	sp, #20
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	60f8      	str	r0, [r7, #12]
 8011ae4:	60b9      	str	r1, [r7, #8]
 8011ae6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	4a07      	ldr	r2, [pc, #28]	; (8011b08 <vApplicationGetIdleTaskMemory+0x2c>)
 8011aec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011aee:	68bb      	ldr	r3, [r7, #8]
 8011af0:	4a06      	ldr	r2, [pc, #24]	; (8011b0c <vApplicationGetIdleTaskMemory+0x30>)
 8011af2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	2280      	movs	r2, #128	; 0x80
 8011af8:	601a      	str	r2, [r3, #0]
}
 8011afa:	bf00      	nop
 8011afc:	3714      	adds	r7, #20
 8011afe:	46bd      	mov	sp, r7
 8011b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b04:	4770      	bx	lr
 8011b06:	bf00      	nop
 8011b08:	20000ae4 	.word	0x20000ae4
 8011b0c:	20000ba0 	.word	0x20000ba0

08011b10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011b10:	b480      	push	{r7}
 8011b12:	b085      	sub	sp, #20
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	60f8      	str	r0, [r7, #12]
 8011b18:	60b9      	str	r1, [r7, #8]
 8011b1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	4a07      	ldr	r2, [pc, #28]	; (8011b3c <vApplicationGetTimerTaskMemory+0x2c>)
 8011b20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011b22:	68bb      	ldr	r3, [r7, #8]
 8011b24:	4a06      	ldr	r2, [pc, #24]	; (8011b40 <vApplicationGetTimerTaskMemory+0x30>)
 8011b26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011b2e:	601a      	str	r2, [r3, #0]
}
 8011b30:	bf00      	nop
 8011b32:	3714      	adds	r7, #20
 8011b34:	46bd      	mov	sp, r7
 8011b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3a:	4770      	bx	lr
 8011b3c:	20000da0 	.word	0x20000da0
 8011b40:	20000e5c 	.word	0x20000e5c

08011b44 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b086      	sub	sp, #24
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d10a      	bne.n	8011b68 <xEventGroupCreateStatic+0x24>
	__asm volatile
 8011b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b56:	f383 8811 	msr	BASEPRI, r3
 8011b5a:	f3bf 8f6f 	isb	sy
 8011b5e:	f3bf 8f4f 	dsb	sy
 8011b62:	613b      	str	r3, [r7, #16]
}
 8011b64:	bf00      	nop
 8011b66:	e7fe      	b.n	8011b66 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8011b68:	2320      	movs	r3, #32
 8011b6a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8011b6c:	68bb      	ldr	r3, [r7, #8]
 8011b6e:	2b20      	cmp	r3, #32
 8011b70:	d00a      	beq.n	8011b88 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8011b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b76:	f383 8811 	msr	BASEPRI, r3
 8011b7a:	f3bf 8f6f 	isb	sy
 8011b7e:	f3bf 8f4f 	dsb	sy
 8011b82:	60fb      	str	r3, [r7, #12]
}
 8011b84:	bf00      	nop
 8011b86:	e7fe      	b.n	8011b86 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8011b8c:	697b      	ldr	r3, [r7, #20]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d00a      	beq.n	8011ba8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8011b92:	697b      	ldr	r3, [r7, #20]
 8011b94:	2200      	movs	r2, #0
 8011b96:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8011b98:	697b      	ldr	r3, [r7, #20]
 8011b9a:	3304      	adds	r3, #4
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f000 f9bf 	bl	8011f20 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8011ba2:	697b      	ldr	r3, [r7, #20]
 8011ba4:	2201      	movs	r2, #1
 8011ba6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8011ba8:	697b      	ldr	r3, [r7, #20]
	}
 8011baa:	4618      	mov	r0, r3
 8011bac:	3718      	adds	r7, #24
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	bd80      	pop	{r7, pc}

08011bb2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8011bb2:	b580      	push	{r7, lr}
 8011bb4:	b082      	sub	sp, #8
 8011bb6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8011bb8:	2020      	movs	r0, #32
 8011bba:	f003 f9c5 	bl	8014f48 <pvPortMalloc>
 8011bbe:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d00a      	beq.n	8011bdc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2200      	movs	r2, #0
 8011bca:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	3304      	adds	r3, #4
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	f000 f9a5 	bl	8011f20 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	2200      	movs	r2, #0
 8011bda:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8011bdc:	687b      	ldr	r3, [r7, #4]
	}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3708      	adds	r7, #8
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
	...

08011be8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b090      	sub	sp, #64	; 0x40
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	60f8      	str	r0, [r7, #12]
 8011bf0:	60b9      	str	r1, [r7, #8]
 8011bf2:	607a      	str	r2, [r7, #4]
 8011bf4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8011bfe:	2300      	movs	r3, #0
 8011c00:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d10a      	bne.n	8011c1e <xEventGroupWaitBits+0x36>
	__asm volatile
 8011c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c0c:	f383 8811 	msr	BASEPRI, r3
 8011c10:	f3bf 8f6f 	isb	sy
 8011c14:	f3bf 8f4f 	dsb	sy
 8011c18:	623b      	str	r3, [r7, #32]
}
 8011c1a:	bf00      	nop
 8011c1c:	e7fe      	b.n	8011c1c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d00a      	beq.n	8011c3e <xEventGroupWaitBits+0x56>
	__asm volatile
 8011c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c2c:	f383 8811 	msr	BASEPRI, r3
 8011c30:	f3bf 8f6f 	isb	sy
 8011c34:	f3bf 8f4f 	dsb	sy
 8011c38:	61fb      	str	r3, [r7, #28]
}
 8011c3a:	bf00      	nop
 8011c3c:	e7fe      	b.n	8011c3c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8011c3e:	68bb      	ldr	r3, [r7, #8]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d10a      	bne.n	8011c5a <xEventGroupWaitBits+0x72>
	__asm volatile
 8011c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c48:	f383 8811 	msr	BASEPRI, r3
 8011c4c:	f3bf 8f6f 	isb	sy
 8011c50:	f3bf 8f4f 	dsb	sy
 8011c54:	61bb      	str	r3, [r7, #24]
}
 8011c56:	bf00      	nop
 8011c58:	e7fe      	b.n	8011c58 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011c5a:	f002 f909 	bl	8013e70 <xTaskGetSchedulerState>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d102      	bne.n	8011c6a <xEventGroupWaitBits+0x82>
 8011c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d101      	bne.n	8011c6e <xEventGroupWaitBits+0x86>
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	e000      	b.n	8011c70 <xEventGroupWaitBits+0x88>
 8011c6e:	2300      	movs	r3, #0
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d10a      	bne.n	8011c8a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8011c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c78:	f383 8811 	msr	BASEPRI, r3
 8011c7c:	f3bf 8f6f 	isb	sy
 8011c80:	f3bf 8f4f 	dsb	sy
 8011c84:	617b      	str	r3, [r7, #20]
}
 8011c86:	bf00      	nop
 8011c88:	e7fe      	b.n	8011c88 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8011c8a:	f001 fc67 	bl	801355c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8011c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8011c94:	683a      	ldr	r2, [r7, #0]
 8011c96:	68b9      	ldr	r1, [r7, #8]
 8011c98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c9a:	f000 f90b 	bl	8011eb4 <prvTestWaitCondition>
 8011c9e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8011ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d00e      	beq.n	8011cc4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8011ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8011caa:	2300      	movs	r3, #0
 8011cac:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d028      	beq.n	8011d06 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cb6:	681a      	ldr	r2, [r3, #0]
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	43db      	mvns	r3, r3
 8011cbc:	401a      	ands	r2, r3
 8011cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cc0:	601a      	str	r2, [r3, #0]
 8011cc2:	e020      	b.n	8011d06 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8011cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d104      	bne.n	8011cd4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8011cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8011cce:	2301      	movs	r3, #1
 8011cd0:	633b      	str	r3, [r7, #48]	; 0x30
 8011cd2:	e018      	b.n	8011d06 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d003      	beq.n	8011ce2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8011cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011ce0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d003      	beq.n	8011cf0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8011ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011cee:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8011cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cf2:	1d18      	adds	r0, r3, #4
 8011cf4:	68ba      	ldr	r2, [r7, #8]
 8011cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf8:	4313      	orrs	r3, r2
 8011cfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cfc:	4619      	mov	r1, r3
 8011cfe:	f001 fe2b 	bl	8013958 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8011d02:	2300      	movs	r3, #0
 8011d04:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8011d06:	f001 fc37 	bl	8013578 <xTaskResumeAll>
 8011d0a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8011d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d031      	beq.n	8011d76 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8011d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d107      	bne.n	8011d28 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8011d18:	4b19      	ldr	r3, [pc, #100]	; (8011d80 <xEventGroupWaitBits+0x198>)
 8011d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d1e:	601a      	str	r2, [r3, #0]
 8011d20:	f3bf 8f4f 	dsb	sy
 8011d24:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8011d28:	f002 fa18 	bl	801415c <uxTaskResetEventItemValue>
 8011d2c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8011d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d11a      	bne.n	8011d6e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8011d38:	f002 ffe4 	bl	8014d04 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8011d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8011d42:	683a      	ldr	r2, [r7, #0]
 8011d44:	68b9      	ldr	r1, [r7, #8]
 8011d46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011d48:	f000 f8b4 	bl	8011eb4 <prvTestWaitCondition>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d009      	beq.n	8011d66 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d006      	beq.n	8011d66 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d5a:	681a      	ldr	r2, [r3, #0]
 8011d5c:	68bb      	ldr	r3, [r7, #8]
 8011d5e:	43db      	mvns	r3, r3
 8011d60:	401a      	ands	r2, r3
 8011d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d64:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8011d66:	2301      	movs	r3, #1
 8011d68:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8011d6a:	f002 fffb 	bl	8014d64 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011d74:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8011d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011d78:	4618      	mov	r0, r3
 8011d7a:	3740      	adds	r7, #64	; 0x40
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}
 8011d80:	e000ed04 	.word	0xe000ed04

08011d84 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b08e      	sub	sp, #56	; 0x38
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
 8011d8c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8011d8e:	2300      	movs	r3, #0
 8011d90:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8011d96:	2300      	movs	r3, #0
 8011d98:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d10a      	bne.n	8011db6 <xEventGroupSetBits+0x32>
	__asm volatile
 8011da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011da4:	f383 8811 	msr	BASEPRI, r3
 8011da8:	f3bf 8f6f 	isb	sy
 8011dac:	f3bf 8f4f 	dsb	sy
 8011db0:	613b      	str	r3, [r7, #16]
}
 8011db2:	bf00      	nop
 8011db4:	e7fe      	b.n	8011db4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011db6:	683b      	ldr	r3, [r7, #0]
 8011db8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d00a      	beq.n	8011dd6 <xEventGroupSetBits+0x52>
	__asm volatile
 8011dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dc4:	f383 8811 	msr	BASEPRI, r3
 8011dc8:	f3bf 8f6f 	isb	sy
 8011dcc:	f3bf 8f4f 	dsb	sy
 8011dd0:	60fb      	str	r3, [r7, #12]
}
 8011dd2:	bf00      	nop
 8011dd4:	e7fe      	b.n	8011dd4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8011dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dd8:	3304      	adds	r3, #4
 8011dda:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dde:	3308      	adds	r3, #8
 8011de0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8011de2:	f001 fbbb 	bl	801355c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8011de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de8:	68db      	ldr	r3, [r3, #12]
 8011dea:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8011dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dee:	681a      	ldr	r2, [r3, #0]
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	431a      	orrs	r2, r3
 8011df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011df6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8011df8:	e03c      	b.n	8011e74 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8011dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dfc:	685b      	ldr	r3, [r3, #4]
 8011dfe:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8011e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8011e06:	2300      	movs	r3, #0
 8011e08:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8011e0a:	69bb      	ldr	r3, [r7, #24]
 8011e0c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011e10:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011e12:	69bb      	ldr	r3, [r7, #24]
 8011e14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011e18:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8011e1a:	697b      	ldr	r3, [r7, #20]
 8011e1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d108      	bne.n	8011e36 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8011e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e26:	681a      	ldr	r2, [r3, #0]
 8011e28:	69bb      	ldr	r3, [r7, #24]
 8011e2a:	4013      	ands	r3, r2
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d00b      	beq.n	8011e48 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8011e30:	2301      	movs	r3, #1
 8011e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011e34:	e008      	b.n	8011e48 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8011e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e38:	681a      	ldr	r2, [r3, #0]
 8011e3a:	69bb      	ldr	r3, [r7, #24]
 8011e3c:	4013      	ands	r3, r2
 8011e3e:	69ba      	ldr	r2, [r7, #24]
 8011e40:	429a      	cmp	r2, r3
 8011e42:	d101      	bne.n	8011e48 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8011e44:	2301      	movs	r3, #1
 8011e46:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8011e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d010      	beq.n	8011e70 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8011e4e:	697b      	ldr	r3, [r7, #20]
 8011e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d003      	beq.n	8011e60 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8011e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e5a:	69bb      	ldr	r3, [r7, #24]
 8011e5c:	4313      	orrs	r3, r2
 8011e5e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8011e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011e68:	4619      	mov	r1, r3
 8011e6a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011e6c:	f001 fe40 	bl	8013af0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8011e70:	69fb      	ldr	r3, [r7, #28]
 8011e72:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8011e74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e76:	6a3b      	ldr	r3, [r7, #32]
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	d1be      	bne.n	8011dfa <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8011e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e7e:	681a      	ldr	r2, [r3, #0]
 8011e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e82:	43db      	mvns	r3, r3
 8011e84:	401a      	ands	r2, r3
 8011e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e88:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8011e8a:	f001 fb75 	bl	8013578 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8011e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e90:	681b      	ldr	r3, [r3, #0]
}
 8011e92:	4618      	mov	r0, r3
 8011e94:	3738      	adds	r7, #56	; 0x38
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bd80      	pop	{r7, pc}

08011e9a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8011e9a:	b580      	push	{r7, lr}
 8011e9c:	b082      	sub	sp, #8
 8011e9e:	af00      	add	r7, sp, #0
 8011ea0:	6078      	str	r0, [r7, #4]
 8011ea2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8011ea4:	6839      	ldr	r1, [r7, #0]
 8011ea6:	6878      	ldr	r0, [r7, #4]
 8011ea8:	f7ff ff6c 	bl	8011d84 <xEventGroupSetBits>
}
 8011eac:	bf00      	nop
 8011eae:	3708      	adds	r7, #8
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}

08011eb4 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8011eb4:	b480      	push	{r7}
 8011eb6:	b087      	sub	sp, #28
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	60f8      	str	r0, [r7, #12]
 8011ebc:	60b9      	str	r1, [r7, #8]
 8011ebe:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d107      	bne.n	8011eda <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8011eca:	68fa      	ldr	r2, [r7, #12]
 8011ecc:	68bb      	ldr	r3, [r7, #8]
 8011ece:	4013      	ands	r3, r2
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d00a      	beq.n	8011eea <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011ed4:	2301      	movs	r3, #1
 8011ed6:	617b      	str	r3, [r7, #20]
 8011ed8:	e007      	b.n	8011eea <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8011eda:	68fa      	ldr	r2, [r7, #12]
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	4013      	ands	r3, r2
 8011ee0:	68ba      	ldr	r2, [r7, #8]
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	d101      	bne.n	8011eea <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8011eea:	697b      	ldr	r3, [r7, #20]
}
 8011eec:	4618      	mov	r0, r3
 8011eee:	371c      	adds	r7, #28
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef6:	4770      	bx	lr

08011ef8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b086      	sub	sp, #24
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	60f8      	str	r0, [r7, #12]
 8011f00:	60b9      	str	r1, [r7, #8]
 8011f02:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	68ba      	ldr	r2, [r7, #8]
 8011f08:	68f9      	ldr	r1, [r7, #12]
 8011f0a:	4804      	ldr	r0, [pc, #16]	; (8011f1c <xEventGroupSetBitsFromISR+0x24>)
 8011f0c:	f002 fdae 	bl	8014a6c <xTimerPendFunctionCallFromISR>
 8011f10:	6178      	str	r0, [r7, #20]

		return xReturn;
 8011f12:	697b      	ldr	r3, [r7, #20]
	}
 8011f14:	4618      	mov	r0, r3
 8011f16:	3718      	adds	r7, #24
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd80      	pop	{r7, pc}
 8011f1c:	08011e9b 	.word	0x08011e9b

08011f20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011f20:	b480      	push	{r7}
 8011f22:	b083      	sub	sp, #12
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	f103 0208 	add.w	r2, r3, #8
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	f04f 32ff 	mov.w	r2, #4294967295
 8011f38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	f103 0208 	add.w	r2, r3, #8
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	f103 0208 	add.w	r2, r3, #8
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	2200      	movs	r2, #0
 8011f52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011f54:	bf00      	nop
 8011f56:	370c      	adds	r7, #12
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5e:	4770      	bx	lr

08011f60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011f60:	b480      	push	{r7}
 8011f62:	b083      	sub	sp, #12
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011f6e:	bf00      	nop
 8011f70:	370c      	adds	r7, #12
 8011f72:	46bd      	mov	sp, r7
 8011f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f78:	4770      	bx	lr

08011f7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011f7a:	b480      	push	{r7}
 8011f7c:	b085      	sub	sp, #20
 8011f7e:	af00      	add	r7, sp, #0
 8011f80:	6078      	str	r0, [r7, #4]
 8011f82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	685b      	ldr	r3, [r3, #4]
 8011f88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	68fa      	ldr	r2, [r7, #12]
 8011f8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	689a      	ldr	r2, [r3, #8]
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	689b      	ldr	r3, [r3, #8]
 8011f9c:	683a      	ldr	r2, [r7, #0]
 8011f9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	683a      	ldr	r2, [r7, #0]
 8011fa4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011fa6:	683b      	ldr	r3, [r7, #0]
 8011fa8:	687a      	ldr	r2, [r7, #4]
 8011faa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	1c5a      	adds	r2, r3, #1
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	601a      	str	r2, [r3, #0]
}
 8011fb6:	bf00      	nop
 8011fb8:	3714      	adds	r7, #20
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc0:	4770      	bx	lr

08011fc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011fc2:	b480      	push	{r7}
 8011fc4:	b085      	sub	sp, #20
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	6078      	str	r0, [r7, #4]
 8011fca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011fcc:	683b      	ldr	r3, [r7, #0]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fd8:	d103      	bne.n	8011fe2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	691b      	ldr	r3, [r3, #16]
 8011fde:	60fb      	str	r3, [r7, #12]
 8011fe0:	e00c      	b.n	8011ffc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	3308      	adds	r3, #8
 8011fe6:	60fb      	str	r3, [r7, #12]
 8011fe8:	e002      	b.n	8011ff0 <vListInsert+0x2e>
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	685b      	ldr	r3, [r3, #4]
 8011fee:	60fb      	str	r3, [r7, #12]
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	685b      	ldr	r3, [r3, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	68ba      	ldr	r2, [r7, #8]
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d2f6      	bcs.n	8011fea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	685a      	ldr	r2, [r3, #4]
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	685b      	ldr	r3, [r3, #4]
 8012008:	683a      	ldr	r2, [r7, #0]
 801200a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	68fa      	ldr	r2, [r7, #12]
 8012010:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	683a      	ldr	r2, [r7, #0]
 8012016:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	687a      	ldr	r2, [r7, #4]
 801201c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	1c5a      	adds	r2, r3, #1
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	601a      	str	r2, [r3, #0]
}
 8012028:	bf00      	nop
 801202a:	3714      	adds	r7, #20
 801202c:	46bd      	mov	sp, r7
 801202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012032:	4770      	bx	lr

08012034 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012034:	b480      	push	{r7}
 8012036:	b085      	sub	sp, #20
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	691b      	ldr	r3, [r3, #16]
 8012040:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	685b      	ldr	r3, [r3, #4]
 8012046:	687a      	ldr	r2, [r7, #4]
 8012048:	6892      	ldr	r2, [r2, #8]
 801204a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	689b      	ldr	r3, [r3, #8]
 8012050:	687a      	ldr	r2, [r7, #4]
 8012052:	6852      	ldr	r2, [r2, #4]
 8012054:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	685b      	ldr	r3, [r3, #4]
 801205a:	687a      	ldr	r2, [r7, #4]
 801205c:	429a      	cmp	r2, r3
 801205e:	d103      	bne.n	8012068 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	689a      	ldr	r2, [r3, #8]
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	2200      	movs	r2, #0
 801206c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	1e5a      	subs	r2, r3, #1
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	681b      	ldr	r3, [r3, #0]
}
 801207c:	4618      	mov	r0, r3
 801207e:	3714      	adds	r7, #20
 8012080:	46bd      	mov	sp, r7
 8012082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012086:	4770      	bx	lr

08012088 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b084      	sub	sp, #16
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
 8012090:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d10a      	bne.n	80120b2 <xQueueGenericReset+0x2a>
	__asm volatile
 801209c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a0:	f383 8811 	msr	BASEPRI, r3
 80120a4:	f3bf 8f6f 	isb	sy
 80120a8:	f3bf 8f4f 	dsb	sy
 80120ac:	60bb      	str	r3, [r7, #8]
}
 80120ae:	bf00      	nop
 80120b0:	e7fe      	b.n	80120b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80120b2:	f002 fe27 	bl	8014d04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	681a      	ldr	r2, [r3, #0]
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120be:	68f9      	ldr	r1, [r7, #12]
 80120c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80120c2:	fb01 f303 	mul.w	r3, r1, r3
 80120c6:	441a      	add	r2, r3
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	2200      	movs	r2, #0
 80120d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	681a      	ldr	r2, [r3, #0]
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	681a      	ldr	r2, [r3, #0]
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120e2:	3b01      	subs	r3, #1
 80120e4:	68f9      	ldr	r1, [r7, #12]
 80120e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80120e8:	fb01 f303 	mul.w	r3, r1, r3
 80120ec:	441a      	add	r2, r3
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	22ff      	movs	r2, #255	; 0xff
 80120f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	22ff      	movs	r2, #255	; 0xff
 80120fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d114      	bne.n	8012132 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	691b      	ldr	r3, [r3, #16]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d01a      	beq.n	8012146 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	3310      	adds	r3, #16
 8012114:	4618      	mov	r0, r3
 8012116:	f001 fc87 	bl	8013a28 <xTaskRemoveFromEventList>
 801211a:	4603      	mov	r3, r0
 801211c:	2b00      	cmp	r3, #0
 801211e:	d012      	beq.n	8012146 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012120:	4b0c      	ldr	r3, [pc, #48]	; (8012154 <xQueueGenericReset+0xcc>)
 8012122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012126:	601a      	str	r2, [r3, #0]
 8012128:	f3bf 8f4f 	dsb	sy
 801212c:	f3bf 8f6f 	isb	sy
 8012130:	e009      	b.n	8012146 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	3310      	adds	r3, #16
 8012136:	4618      	mov	r0, r3
 8012138:	f7ff fef2 	bl	8011f20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	3324      	adds	r3, #36	; 0x24
 8012140:	4618      	mov	r0, r3
 8012142:	f7ff feed 	bl	8011f20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012146:	f002 fe0d 	bl	8014d64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801214a:	2301      	movs	r3, #1
}
 801214c:	4618      	mov	r0, r3
 801214e:	3710      	adds	r7, #16
 8012150:	46bd      	mov	sp, r7
 8012152:	bd80      	pop	{r7, pc}
 8012154:	e000ed04 	.word	0xe000ed04

08012158 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012158:	b580      	push	{r7, lr}
 801215a:	b08e      	sub	sp, #56	; 0x38
 801215c:	af02      	add	r7, sp, #8
 801215e:	60f8      	str	r0, [r7, #12]
 8012160:	60b9      	str	r1, [r7, #8]
 8012162:	607a      	str	r2, [r7, #4]
 8012164:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d10a      	bne.n	8012182 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801216c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012170:	f383 8811 	msr	BASEPRI, r3
 8012174:	f3bf 8f6f 	isb	sy
 8012178:	f3bf 8f4f 	dsb	sy
 801217c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801217e:	bf00      	nop
 8012180:	e7fe      	b.n	8012180 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012182:	683b      	ldr	r3, [r7, #0]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d10a      	bne.n	801219e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012188:	f04f 0350 	mov.w	r3, #80	; 0x50
 801218c:	f383 8811 	msr	BASEPRI, r3
 8012190:	f3bf 8f6f 	isb	sy
 8012194:	f3bf 8f4f 	dsb	sy
 8012198:	627b      	str	r3, [r7, #36]	; 0x24
}
 801219a:	bf00      	nop
 801219c:	e7fe      	b.n	801219c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d002      	beq.n	80121aa <xQueueGenericCreateStatic+0x52>
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d001      	beq.n	80121ae <xQueueGenericCreateStatic+0x56>
 80121aa:	2301      	movs	r3, #1
 80121ac:	e000      	b.n	80121b0 <xQueueGenericCreateStatic+0x58>
 80121ae:	2300      	movs	r3, #0
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d10a      	bne.n	80121ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80121b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121b8:	f383 8811 	msr	BASEPRI, r3
 80121bc:	f3bf 8f6f 	isb	sy
 80121c0:	f3bf 8f4f 	dsb	sy
 80121c4:	623b      	str	r3, [r7, #32]
}
 80121c6:	bf00      	nop
 80121c8:	e7fe      	b.n	80121c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d102      	bne.n	80121d6 <xQueueGenericCreateStatic+0x7e>
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d101      	bne.n	80121da <xQueueGenericCreateStatic+0x82>
 80121d6:	2301      	movs	r3, #1
 80121d8:	e000      	b.n	80121dc <xQueueGenericCreateStatic+0x84>
 80121da:	2300      	movs	r3, #0
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d10a      	bne.n	80121f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80121e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121e4:	f383 8811 	msr	BASEPRI, r3
 80121e8:	f3bf 8f6f 	isb	sy
 80121ec:	f3bf 8f4f 	dsb	sy
 80121f0:	61fb      	str	r3, [r7, #28]
}
 80121f2:	bf00      	nop
 80121f4:	e7fe      	b.n	80121f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80121f6:	2350      	movs	r3, #80	; 0x50
 80121f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80121fa:	697b      	ldr	r3, [r7, #20]
 80121fc:	2b50      	cmp	r3, #80	; 0x50
 80121fe:	d00a      	beq.n	8012216 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012204:	f383 8811 	msr	BASEPRI, r3
 8012208:	f3bf 8f6f 	isb	sy
 801220c:	f3bf 8f4f 	dsb	sy
 8012210:	61bb      	str	r3, [r7, #24]
}
 8012212:	bf00      	nop
 8012214:	e7fe      	b.n	8012214 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012216:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801221c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801221e:	2b00      	cmp	r3, #0
 8012220:	d00d      	beq.n	801223e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012224:	2201      	movs	r2, #1
 8012226:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801222a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801222e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012230:	9300      	str	r3, [sp, #0]
 8012232:	4613      	mov	r3, r2
 8012234:	687a      	ldr	r2, [r7, #4]
 8012236:	68b9      	ldr	r1, [r7, #8]
 8012238:	68f8      	ldr	r0, [r7, #12]
 801223a:	f000 f83f 	bl	80122bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801223e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012240:	4618      	mov	r0, r3
 8012242:	3730      	adds	r7, #48	; 0x30
 8012244:	46bd      	mov	sp, r7
 8012246:	bd80      	pop	{r7, pc}

08012248 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012248:	b580      	push	{r7, lr}
 801224a:	b08a      	sub	sp, #40	; 0x28
 801224c:	af02      	add	r7, sp, #8
 801224e:	60f8      	str	r0, [r7, #12]
 8012250:	60b9      	str	r1, [r7, #8]
 8012252:	4613      	mov	r3, r2
 8012254:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d10a      	bne.n	8012272 <xQueueGenericCreate+0x2a>
	__asm volatile
 801225c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012260:	f383 8811 	msr	BASEPRI, r3
 8012264:	f3bf 8f6f 	isb	sy
 8012268:	f3bf 8f4f 	dsb	sy
 801226c:	613b      	str	r3, [r7, #16]
}
 801226e:	bf00      	nop
 8012270:	e7fe      	b.n	8012270 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	68ba      	ldr	r2, [r7, #8]
 8012276:	fb02 f303 	mul.w	r3, r2, r3
 801227a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801227c:	69fb      	ldr	r3, [r7, #28]
 801227e:	3350      	adds	r3, #80	; 0x50
 8012280:	4618      	mov	r0, r3
 8012282:	f002 fe61 	bl	8014f48 <pvPortMalloc>
 8012286:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012288:	69bb      	ldr	r3, [r7, #24]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d011      	beq.n	80122b2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801228e:	69bb      	ldr	r3, [r7, #24]
 8012290:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012292:	697b      	ldr	r3, [r7, #20]
 8012294:	3350      	adds	r3, #80	; 0x50
 8012296:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012298:	69bb      	ldr	r3, [r7, #24]
 801229a:	2200      	movs	r2, #0
 801229c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80122a0:	79fa      	ldrb	r2, [r7, #7]
 80122a2:	69bb      	ldr	r3, [r7, #24]
 80122a4:	9300      	str	r3, [sp, #0]
 80122a6:	4613      	mov	r3, r2
 80122a8:	697a      	ldr	r2, [r7, #20]
 80122aa:	68b9      	ldr	r1, [r7, #8]
 80122ac:	68f8      	ldr	r0, [r7, #12]
 80122ae:	f000 f805 	bl	80122bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80122b2:	69bb      	ldr	r3, [r7, #24]
	}
 80122b4:	4618      	mov	r0, r3
 80122b6:	3720      	adds	r7, #32
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}

080122bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b084      	sub	sp, #16
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	60f8      	str	r0, [r7, #12]
 80122c4:	60b9      	str	r1, [r7, #8]
 80122c6:	607a      	str	r2, [r7, #4]
 80122c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80122ca:	68bb      	ldr	r3, [r7, #8]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d103      	bne.n	80122d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80122d0:	69bb      	ldr	r3, [r7, #24]
 80122d2:	69ba      	ldr	r2, [r7, #24]
 80122d4:	601a      	str	r2, [r3, #0]
 80122d6:	e002      	b.n	80122de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80122d8:	69bb      	ldr	r3, [r7, #24]
 80122da:	687a      	ldr	r2, [r7, #4]
 80122dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80122de:	69bb      	ldr	r3, [r7, #24]
 80122e0:	68fa      	ldr	r2, [r7, #12]
 80122e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80122e4:	69bb      	ldr	r3, [r7, #24]
 80122e6:	68ba      	ldr	r2, [r7, #8]
 80122e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80122ea:	2101      	movs	r1, #1
 80122ec:	69b8      	ldr	r0, [r7, #24]
 80122ee:	f7ff fecb 	bl	8012088 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80122f2:	69bb      	ldr	r3, [r7, #24]
 80122f4:	78fa      	ldrb	r2, [r7, #3]
 80122f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80122fa:	bf00      	nop
 80122fc:	3710      	adds	r7, #16
 80122fe:	46bd      	mov	sp, r7
 8012300:	bd80      	pop	{r7, pc}

08012302 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8012302:	b580      	push	{r7, lr}
 8012304:	b08a      	sub	sp, #40	; 0x28
 8012306:	af02      	add	r7, sp, #8
 8012308:	60f8      	str	r0, [r7, #12]
 801230a:	60b9      	str	r1, [r7, #8]
 801230c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d10a      	bne.n	801232a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8012314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012318:	f383 8811 	msr	BASEPRI, r3
 801231c:	f3bf 8f6f 	isb	sy
 8012320:	f3bf 8f4f 	dsb	sy
 8012324:	61bb      	str	r3, [r7, #24]
}
 8012326:	bf00      	nop
 8012328:	e7fe      	b.n	8012328 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801232a:	68ba      	ldr	r2, [r7, #8]
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	429a      	cmp	r2, r3
 8012330:	d90a      	bls.n	8012348 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8012332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012336:	f383 8811 	msr	BASEPRI, r3
 801233a:	f3bf 8f6f 	isb	sy
 801233e:	f3bf 8f4f 	dsb	sy
 8012342:	617b      	str	r3, [r7, #20]
}
 8012344:	bf00      	nop
 8012346:	e7fe      	b.n	8012346 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012348:	2302      	movs	r3, #2
 801234a:	9300      	str	r3, [sp, #0]
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2200      	movs	r2, #0
 8012350:	2100      	movs	r1, #0
 8012352:	68f8      	ldr	r0, [r7, #12]
 8012354:	f7ff ff00 	bl	8012158 <xQueueGenericCreateStatic>
 8012358:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801235a:	69fb      	ldr	r3, [r7, #28]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d002      	beq.n	8012366 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012360:	69fb      	ldr	r3, [r7, #28]
 8012362:	68ba      	ldr	r2, [r7, #8]
 8012364:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012366:	69fb      	ldr	r3, [r7, #28]
	}
 8012368:	4618      	mov	r0, r3
 801236a:	3720      	adds	r7, #32
 801236c:	46bd      	mov	sp, r7
 801236e:	bd80      	pop	{r7, pc}

08012370 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8012370:	b580      	push	{r7, lr}
 8012372:	b086      	sub	sp, #24
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
 8012378:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d10a      	bne.n	8012396 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8012380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012384:	f383 8811 	msr	BASEPRI, r3
 8012388:	f3bf 8f6f 	isb	sy
 801238c:	f3bf 8f4f 	dsb	sy
 8012390:	613b      	str	r3, [r7, #16]
}
 8012392:	bf00      	nop
 8012394:	e7fe      	b.n	8012394 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012396:	683a      	ldr	r2, [r7, #0]
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	429a      	cmp	r2, r3
 801239c:	d90a      	bls.n	80123b4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 801239e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123a2:	f383 8811 	msr	BASEPRI, r3
 80123a6:	f3bf 8f6f 	isb	sy
 80123aa:	f3bf 8f4f 	dsb	sy
 80123ae:	60fb      	str	r3, [r7, #12]
}
 80123b0:	bf00      	nop
 80123b2:	e7fe      	b.n	80123b2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80123b4:	2202      	movs	r2, #2
 80123b6:	2100      	movs	r1, #0
 80123b8:	6878      	ldr	r0, [r7, #4]
 80123ba:	f7ff ff45 	bl	8012248 <xQueueGenericCreate>
 80123be:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80123c0:	697b      	ldr	r3, [r7, #20]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d002      	beq.n	80123cc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80123c6:	697b      	ldr	r3, [r7, #20]
 80123c8:	683a      	ldr	r2, [r7, #0]
 80123ca:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80123cc:	697b      	ldr	r3, [r7, #20]
	}
 80123ce:	4618      	mov	r0, r3
 80123d0:	3718      	adds	r7, #24
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}
	...

080123d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b08e      	sub	sp, #56	; 0x38
 80123dc:	af00      	add	r7, sp, #0
 80123de:	60f8      	str	r0, [r7, #12]
 80123e0:	60b9      	str	r1, [r7, #8]
 80123e2:	607a      	str	r2, [r7, #4]
 80123e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80123e6:	2300      	movs	r3, #0
 80123e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80123ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d10a      	bne.n	801240a <xQueueGenericSend+0x32>
	__asm volatile
 80123f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123f8:	f383 8811 	msr	BASEPRI, r3
 80123fc:	f3bf 8f6f 	isb	sy
 8012400:	f3bf 8f4f 	dsb	sy
 8012404:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012406:	bf00      	nop
 8012408:	e7fe      	b.n	8012408 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801240a:	68bb      	ldr	r3, [r7, #8]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d103      	bne.n	8012418 <xQueueGenericSend+0x40>
 8012410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012414:	2b00      	cmp	r3, #0
 8012416:	d101      	bne.n	801241c <xQueueGenericSend+0x44>
 8012418:	2301      	movs	r3, #1
 801241a:	e000      	b.n	801241e <xQueueGenericSend+0x46>
 801241c:	2300      	movs	r3, #0
 801241e:	2b00      	cmp	r3, #0
 8012420:	d10a      	bne.n	8012438 <xQueueGenericSend+0x60>
	__asm volatile
 8012422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012426:	f383 8811 	msr	BASEPRI, r3
 801242a:	f3bf 8f6f 	isb	sy
 801242e:	f3bf 8f4f 	dsb	sy
 8012432:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012434:	bf00      	nop
 8012436:	e7fe      	b.n	8012436 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	2b02      	cmp	r3, #2
 801243c:	d103      	bne.n	8012446 <xQueueGenericSend+0x6e>
 801243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012442:	2b01      	cmp	r3, #1
 8012444:	d101      	bne.n	801244a <xQueueGenericSend+0x72>
 8012446:	2301      	movs	r3, #1
 8012448:	e000      	b.n	801244c <xQueueGenericSend+0x74>
 801244a:	2300      	movs	r3, #0
 801244c:	2b00      	cmp	r3, #0
 801244e:	d10a      	bne.n	8012466 <xQueueGenericSend+0x8e>
	__asm volatile
 8012450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012454:	f383 8811 	msr	BASEPRI, r3
 8012458:	f3bf 8f6f 	isb	sy
 801245c:	f3bf 8f4f 	dsb	sy
 8012460:	623b      	str	r3, [r7, #32]
}
 8012462:	bf00      	nop
 8012464:	e7fe      	b.n	8012464 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012466:	f001 fd03 	bl	8013e70 <xTaskGetSchedulerState>
 801246a:	4603      	mov	r3, r0
 801246c:	2b00      	cmp	r3, #0
 801246e:	d102      	bne.n	8012476 <xQueueGenericSend+0x9e>
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d101      	bne.n	801247a <xQueueGenericSend+0xa2>
 8012476:	2301      	movs	r3, #1
 8012478:	e000      	b.n	801247c <xQueueGenericSend+0xa4>
 801247a:	2300      	movs	r3, #0
 801247c:	2b00      	cmp	r3, #0
 801247e:	d10a      	bne.n	8012496 <xQueueGenericSend+0xbe>
	__asm volatile
 8012480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012484:	f383 8811 	msr	BASEPRI, r3
 8012488:	f3bf 8f6f 	isb	sy
 801248c:	f3bf 8f4f 	dsb	sy
 8012490:	61fb      	str	r3, [r7, #28]
}
 8012492:	bf00      	nop
 8012494:	e7fe      	b.n	8012494 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012496:	f002 fc35 	bl	8014d04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801249c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124a2:	429a      	cmp	r2, r3
 80124a4:	d302      	bcc.n	80124ac <xQueueGenericSend+0xd4>
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	2b02      	cmp	r3, #2
 80124aa:	d129      	bne.n	8012500 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80124ac:	683a      	ldr	r2, [r7, #0]
 80124ae:	68b9      	ldr	r1, [r7, #8]
 80124b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124b2:	f000 fc5e 	bl	8012d72 <prvCopyDataToQueue>
 80124b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80124b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d010      	beq.n	80124e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80124c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124c2:	3324      	adds	r3, #36	; 0x24
 80124c4:	4618      	mov	r0, r3
 80124c6:	f001 faaf 	bl	8013a28 <xTaskRemoveFromEventList>
 80124ca:	4603      	mov	r3, r0
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d013      	beq.n	80124f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80124d0:	4b3f      	ldr	r3, [pc, #252]	; (80125d0 <xQueueGenericSend+0x1f8>)
 80124d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124d6:	601a      	str	r2, [r3, #0]
 80124d8:	f3bf 8f4f 	dsb	sy
 80124dc:	f3bf 8f6f 	isb	sy
 80124e0:	e00a      	b.n	80124f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80124e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d007      	beq.n	80124f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80124e8:	4b39      	ldr	r3, [pc, #228]	; (80125d0 <xQueueGenericSend+0x1f8>)
 80124ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124ee:	601a      	str	r2, [r3, #0]
 80124f0:	f3bf 8f4f 	dsb	sy
 80124f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80124f8:	f002 fc34 	bl	8014d64 <vPortExitCritical>
				return pdPASS;
 80124fc:	2301      	movs	r3, #1
 80124fe:	e063      	b.n	80125c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d103      	bne.n	801250e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012506:	f002 fc2d 	bl	8014d64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801250a:	2300      	movs	r3, #0
 801250c:	e05c      	b.n	80125c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801250e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012510:	2b00      	cmp	r3, #0
 8012512:	d106      	bne.n	8012522 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012514:	f107 0314 	add.w	r3, r7, #20
 8012518:	4618      	mov	r0, r3
 801251a:	f001 fb4b 	bl	8013bb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801251e:	2301      	movs	r3, #1
 8012520:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012522:	f002 fc1f 	bl	8014d64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012526:	f001 f819 	bl	801355c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801252a:	f002 fbeb 	bl	8014d04 <vPortEnterCritical>
 801252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012534:	b25b      	sxtb	r3, r3
 8012536:	f1b3 3fff 	cmp.w	r3, #4294967295
 801253a:	d103      	bne.n	8012544 <xQueueGenericSend+0x16c>
 801253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801253e:	2200      	movs	r2, #0
 8012540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801254a:	b25b      	sxtb	r3, r3
 801254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012550:	d103      	bne.n	801255a <xQueueGenericSend+0x182>
 8012552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012554:	2200      	movs	r2, #0
 8012556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801255a:	f002 fc03 	bl	8014d64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801255e:	1d3a      	adds	r2, r7, #4
 8012560:	f107 0314 	add.w	r3, r7, #20
 8012564:	4611      	mov	r1, r2
 8012566:	4618      	mov	r0, r3
 8012568:	f001 fb3a 	bl	8013be0 <xTaskCheckForTimeOut>
 801256c:	4603      	mov	r3, r0
 801256e:	2b00      	cmp	r3, #0
 8012570:	d124      	bne.n	80125bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012572:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012574:	f000 fcf5 	bl	8012f62 <prvIsQueueFull>
 8012578:	4603      	mov	r3, r0
 801257a:	2b00      	cmp	r3, #0
 801257c:	d018      	beq.n	80125b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012580:	3310      	adds	r3, #16
 8012582:	687a      	ldr	r2, [r7, #4]
 8012584:	4611      	mov	r1, r2
 8012586:	4618      	mov	r0, r3
 8012588:	f001 f9c2 	bl	8013910 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801258c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801258e:	f000 fc80 	bl	8012e92 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012592:	f000 fff1 	bl	8013578 <xTaskResumeAll>
 8012596:	4603      	mov	r3, r0
 8012598:	2b00      	cmp	r3, #0
 801259a:	f47f af7c 	bne.w	8012496 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801259e:	4b0c      	ldr	r3, [pc, #48]	; (80125d0 <xQueueGenericSend+0x1f8>)
 80125a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125a4:	601a      	str	r2, [r3, #0]
 80125a6:	f3bf 8f4f 	dsb	sy
 80125aa:	f3bf 8f6f 	isb	sy
 80125ae:	e772      	b.n	8012496 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80125b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125b2:	f000 fc6e 	bl	8012e92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80125b6:	f000 ffdf 	bl	8013578 <xTaskResumeAll>
 80125ba:	e76c      	b.n	8012496 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80125bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125be:	f000 fc68 	bl	8012e92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80125c2:	f000 ffd9 	bl	8013578 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80125c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80125c8:	4618      	mov	r0, r3
 80125ca:	3738      	adds	r7, #56	; 0x38
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bd80      	pop	{r7, pc}
 80125d0:	e000ed04 	.word	0xe000ed04

080125d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b090      	sub	sp, #64	; 0x40
 80125d8:	af00      	add	r7, sp, #0
 80125da:	60f8      	str	r0, [r7, #12]
 80125dc:	60b9      	str	r1, [r7, #8]
 80125de:	607a      	str	r2, [r7, #4]
 80125e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80125e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d10a      	bne.n	8012602 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80125ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125f0:	f383 8811 	msr	BASEPRI, r3
 80125f4:	f3bf 8f6f 	isb	sy
 80125f8:	f3bf 8f4f 	dsb	sy
 80125fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80125fe:	bf00      	nop
 8012600:	e7fe      	b.n	8012600 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012602:	68bb      	ldr	r3, [r7, #8]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d103      	bne.n	8012610 <xQueueGenericSendFromISR+0x3c>
 8012608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801260c:	2b00      	cmp	r3, #0
 801260e:	d101      	bne.n	8012614 <xQueueGenericSendFromISR+0x40>
 8012610:	2301      	movs	r3, #1
 8012612:	e000      	b.n	8012616 <xQueueGenericSendFromISR+0x42>
 8012614:	2300      	movs	r3, #0
 8012616:	2b00      	cmp	r3, #0
 8012618:	d10a      	bne.n	8012630 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801261a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801261e:	f383 8811 	msr	BASEPRI, r3
 8012622:	f3bf 8f6f 	isb	sy
 8012626:	f3bf 8f4f 	dsb	sy
 801262a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801262c:	bf00      	nop
 801262e:	e7fe      	b.n	801262e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	2b02      	cmp	r3, #2
 8012634:	d103      	bne.n	801263e <xQueueGenericSendFromISR+0x6a>
 8012636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801263a:	2b01      	cmp	r3, #1
 801263c:	d101      	bne.n	8012642 <xQueueGenericSendFromISR+0x6e>
 801263e:	2301      	movs	r3, #1
 8012640:	e000      	b.n	8012644 <xQueueGenericSendFromISR+0x70>
 8012642:	2300      	movs	r3, #0
 8012644:	2b00      	cmp	r3, #0
 8012646:	d10a      	bne.n	801265e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8012648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801264c:	f383 8811 	msr	BASEPRI, r3
 8012650:	f3bf 8f6f 	isb	sy
 8012654:	f3bf 8f4f 	dsb	sy
 8012658:	623b      	str	r3, [r7, #32]
}
 801265a:	bf00      	nop
 801265c:	e7fe      	b.n	801265c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801265e:	f002 fc33 	bl	8014ec8 <vPortValidateInterruptPriority>
	__asm volatile
 8012662:	f3ef 8211 	mrs	r2, BASEPRI
 8012666:	f04f 0350 	mov.w	r3, #80	; 0x50
 801266a:	f383 8811 	msr	BASEPRI, r3
 801266e:	f3bf 8f6f 	isb	sy
 8012672:	f3bf 8f4f 	dsb	sy
 8012676:	61fa      	str	r2, [r7, #28]
 8012678:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801267a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801267c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801267e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012686:	429a      	cmp	r2, r3
 8012688:	d302      	bcc.n	8012690 <xQueueGenericSendFromISR+0xbc>
 801268a:	683b      	ldr	r3, [r7, #0]
 801268c:	2b02      	cmp	r3, #2
 801268e:	d12f      	bne.n	80126f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012692:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801269c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801269e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80126a0:	683a      	ldr	r2, [r7, #0]
 80126a2:	68b9      	ldr	r1, [r7, #8]
 80126a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80126a6:	f000 fb64 	bl	8012d72 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80126aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80126ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126b2:	d112      	bne.n	80126da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80126b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d016      	beq.n	80126ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80126bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126be:	3324      	adds	r3, #36	; 0x24
 80126c0:	4618      	mov	r0, r3
 80126c2:	f001 f9b1 	bl	8013a28 <xTaskRemoveFromEventList>
 80126c6:	4603      	mov	r3, r0
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d00e      	beq.n	80126ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d00b      	beq.n	80126ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	2201      	movs	r2, #1
 80126d6:	601a      	str	r2, [r3, #0]
 80126d8:	e007      	b.n	80126ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80126da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80126de:	3301      	adds	r3, #1
 80126e0:	b2db      	uxtb	r3, r3
 80126e2:	b25a      	sxtb	r2, r3
 80126e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80126ea:	2301      	movs	r3, #1
 80126ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80126ee:	e001      	b.n	80126f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80126f0:	2300      	movs	r3, #0
 80126f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80126f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126f6:	617b      	str	r3, [r7, #20]
	__asm volatile
 80126f8:	697b      	ldr	r3, [r7, #20]
 80126fa:	f383 8811 	msr	BASEPRI, r3
}
 80126fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012702:	4618      	mov	r0, r3
 8012704:	3740      	adds	r7, #64	; 0x40
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}

0801270a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801270a:	b580      	push	{r7, lr}
 801270c:	b08e      	sub	sp, #56	; 0x38
 801270e:	af00      	add	r7, sp, #0
 8012710:	6078      	str	r0, [r7, #4]
 8012712:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801271a:	2b00      	cmp	r3, #0
 801271c:	d10a      	bne.n	8012734 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012722:	f383 8811 	msr	BASEPRI, r3
 8012726:	f3bf 8f6f 	isb	sy
 801272a:	f3bf 8f4f 	dsb	sy
 801272e:	623b      	str	r3, [r7, #32]
}
 8012730:	bf00      	nop
 8012732:	e7fe      	b.n	8012732 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012738:	2b00      	cmp	r3, #0
 801273a:	d00a      	beq.n	8012752 <xQueueGiveFromISR+0x48>
	__asm volatile
 801273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012740:	f383 8811 	msr	BASEPRI, r3
 8012744:	f3bf 8f6f 	isb	sy
 8012748:	f3bf 8f4f 	dsb	sy
 801274c:	61fb      	str	r3, [r7, #28]
}
 801274e:	bf00      	nop
 8012750:	e7fe      	b.n	8012750 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d103      	bne.n	8012762 <xQueueGiveFromISR+0x58>
 801275a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801275c:	689b      	ldr	r3, [r3, #8]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d101      	bne.n	8012766 <xQueueGiveFromISR+0x5c>
 8012762:	2301      	movs	r3, #1
 8012764:	e000      	b.n	8012768 <xQueueGiveFromISR+0x5e>
 8012766:	2300      	movs	r3, #0
 8012768:	2b00      	cmp	r3, #0
 801276a:	d10a      	bne.n	8012782 <xQueueGiveFromISR+0x78>
	__asm volatile
 801276c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012770:	f383 8811 	msr	BASEPRI, r3
 8012774:	f3bf 8f6f 	isb	sy
 8012778:	f3bf 8f4f 	dsb	sy
 801277c:	61bb      	str	r3, [r7, #24]
}
 801277e:	bf00      	nop
 8012780:	e7fe      	b.n	8012780 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012782:	f002 fba1 	bl	8014ec8 <vPortValidateInterruptPriority>
	__asm volatile
 8012786:	f3ef 8211 	mrs	r2, BASEPRI
 801278a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801278e:	f383 8811 	msr	BASEPRI, r3
 8012792:	f3bf 8f6f 	isb	sy
 8012796:	f3bf 8f4f 	dsb	sy
 801279a:	617a      	str	r2, [r7, #20]
 801279c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801279e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80127a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80127a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80127a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80127ae:	429a      	cmp	r2, r3
 80127b0:	d22b      	bcs.n	801280a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80127b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80127b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80127bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127be:	1c5a      	adds	r2, r3, #1
 80127c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80127c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80127c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127cc:	d112      	bne.n	80127f4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80127ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d016      	beq.n	8012804 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80127d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d8:	3324      	adds	r3, #36	; 0x24
 80127da:	4618      	mov	r0, r3
 80127dc:	f001 f924 	bl	8013a28 <xTaskRemoveFromEventList>
 80127e0:	4603      	mov	r3, r0
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d00e      	beq.n	8012804 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80127e6:	683b      	ldr	r3, [r7, #0]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d00b      	beq.n	8012804 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80127ec:	683b      	ldr	r3, [r7, #0]
 80127ee:	2201      	movs	r2, #1
 80127f0:	601a      	str	r2, [r3, #0]
 80127f2:	e007      	b.n	8012804 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80127f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80127f8:	3301      	adds	r3, #1
 80127fa:	b2db      	uxtb	r3, r3
 80127fc:	b25a      	sxtb	r2, r3
 80127fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012804:	2301      	movs	r3, #1
 8012806:	637b      	str	r3, [r7, #52]	; 0x34
 8012808:	e001      	b.n	801280e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801280a:	2300      	movs	r3, #0
 801280c:	637b      	str	r3, [r7, #52]	; 0x34
 801280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012810:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	f383 8811 	msr	BASEPRI, r3
}
 8012818:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801281a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801281c:	4618      	mov	r0, r3
 801281e:	3738      	adds	r7, #56	; 0x38
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}

08012824 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b08c      	sub	sp, #48	; 0x30
 8012828:	af00      	add	r7, sp, #0
 801282a:	60f8      	str	r0, [r7, #12]
 801282c:	60b9      	str	r1, [r7, #8]
 801282e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012830:	2300      	movs	r3, #0
 8012832:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801283a:	2b00      	cmp	r3, #0
 801283c:	d10a      	bne.n	8012854 <xQueueReceive+0x30>
	__asm volatile
 801283e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012842:	f383 8811 	msr	BASEPRI, r3
 8012846:	f3bf 8f6f 	isb	sy
 801284a:	f3bf 8f4f 	dsb	sy
 801284e:	623b      	str	r3, [r7, #32]
}
 8012850:	bf00      	nop
 8012852:	e7fe      	b.n	8012852 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d103      	bne.n	8012862 <xQueueReceive+0x3e>
 801285a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801285e:	2b00      	cmp	r3, #0
 8012860:	d101      	bne.n	8012866 <xQueueReceive+0x42>
 8012862:	2301      	movs	r3, #1
 8012864:	e000      	b.n	8012868 <xQueueReceive+0x44>
 8012866:	2300      	movs	r3, #0
 8012868:	2b00      	cmp	r3, #0
 801286a:	d10a      	bne.n	8012882 <xQueueReceive+0x5e>
	__asm volatile
 801286c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012870:	f383 8811 	msr	BASEPRI, r3
 8012874:	f3bf 8f6f 	isb	sy
 8012878:	f3bf 8f4f 	dsb	sy
 801287c:	61fb      	str	r3, [r7, #28]
}
 801287e:	bf00      	nop
 8012880:	e7fe      	b.n	8012880 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012882:	f001 faf5 	bl	8013e70 <xTaskGetSchedulerState>
 8012886:	4603      	mov	r3, r0
 8012888:	2b00      	cmp	r3, #0
 801288a:	d102      	bne.n	8012892 <xQueueReceive+0x6e>
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d101      	bne.n	8012896 <xQueueReceive+0x72>
 8012892:	2301      	movs	r3, #1
 8012894:	e000      	b.n	8012898 <xQueueReceive+0x74>
 8012896:	2300      	movs	r3, #0
 8012898:	2b00      	cmp	r3, #0
 801289a:	d10a      	bne.n	80128b2 <xQueueReceive+0x8e>
	__asm volatile
 801289c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128a0:	f383 8811 	msr	BASEPRI, r3
 80128a4:	f3bf 8f6f 	isb	sy
 80128a8:	f3bf 8f4f 	dsb	sy
 80128ac:	61bb      	str	r3, [r7, #24]
}
 80128ae:	bf00      	nop
 80128b0:	e7fe      	b.n	80128b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80128b2:	f002 fa27 	bl	8014d04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80128b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80128bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d01f      	beq.n	8012902 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80128c2:	68b9      	ldr	r1, [r7, #8]
 80128c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128c6:	f000 fabe 	bl	8012e46 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80128ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128cc:	1e5a      	subs	r2, r3, #1
 80128ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80128d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128d4:	691b      	ldr	r3, [r3, #16]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d00f      	beq.n	80128fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80128da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128dc:	3310      	adds	r3, #16
 80128de:	4618      	mov	r0, r3
 80128e0:	f001 f8a2 	bl	8013a28 <xTaskRemoveFromEventList>
 80128e4:	4603      	mov	r3, r0
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d007      	beq.n	80128fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80128ea:	4b3d      	ldr	r3, [pc, #244]	; (80129e0 <xQueueReceive+0x1bc>)
 80128ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128f0:	601a      	str	r2, [r3, #0]
 80128f2:	f3bf 8f4f 	dsb	sy
 80128f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80128fa:	f002 fa33 	bl	8014d64 <vPortExitCritical>
				return pdPASS;
 80128fe:	2301      	movs	r3, #1
 8012900:	e069      	b.n	80129d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d103      	bne.n	8012910 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012908:	f002 fa2c 	bl	8014d64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801290c:	2300      	movs	r3, #0
 801290e:	e062      	b.n	80129d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012912:	2b00      	cmp	r3, #0
 8012914:	d106      	bne.n	8012924 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012916:	f107 0310 	add.w	r3, r7, #16
 801291a:	4618      	mov	r0, r3
 801291c:	f001 f94a 	bl	8013bb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012920:	2301      	movs	r3, #1
 8012922:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012924:	f002 fa1e 	bl	8014d64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012928:	f000 fe18 	bl	801355c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801292c:	f002 f9ea 	bl	8014d04 <vPortEnterCritical>
 8012930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012932:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012936:	b25b      	sxtb	r3, r3
 8012938:	f1b3 3fff 	cmp.w	r3, #4294967295
 801293c:	d103      	bne.n	8012946 <xQueueReceive+0x122>
 801293e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012940:	2200      	movs	r2, #0
 8012942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801294c:	b25b      	sxtb	r3, r3
 801294e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012952:	d103      	bne.n	801295c <xQueueReceive+0x138>
 8012954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012956:	2200      	movs	r2, #0
 8012958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801295c:	f002 fa02 	bl	8014d64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012960:	1d3a      	adds	r2, r7, #4
 8012962:	f107 0310 	add.w	r3, r7, #16
 8012966:	4611      	mov	r1, r2
 8012968:	4618      	mov	r0, r3
 801296a:	f001 f939 	bl	8013be0 <xTaskCheckForTimeOut>
 801296e:	4603      	mov	r3, r0
 8012970:	2b00      	cmp	r3, #0
 8012972:	d123      	bne.n	80129bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012976:	f000 fade 	bl	8012f36 <prvIsQueueEmpty>
 801297a:	4603      	mov	r3, r0
 801297c:	2b00      	cmp	r3, #0
 801297e:	d017      	beq.n	80129b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012982:	3324      	adds	r3, #36	; 0x24
 8012984:	687a      	ldr	r2, [r7, #4]
 8012986:	4611      	mov	r1, r2
 8012988:	4618      	mov	r0, r3
 801298a:	f000 ffc1 	bl	8013910 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801298e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012990:	f000 fa7f 	bl	8012e92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012994:	f000 fdf0 	bl	8013578 <xTaskResumeAll>
 8012998:	4603      	mov	r3, r0
 801299a:	2b00      	cmp	r3, #0
 801299c:	d189      	bne.n	80128b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801299e:	4b10      	ldr	r3, [pc, #64]	; (80129e0 <xQueueReceive+0x1bc>)
 80129a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129a4:	601a      	str	r2, [r3, #0]
 80129a6:	f3bf 8f4f 	dsb	sy
 80129aa:	f3bf 8f6f 	isb	sy
 80129ae:	e780      	b.n	80128b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80129b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129b2:	f000 fa6e 	bl	8012e92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80129b6:	f000 fddf 	bl	8013578 <xTaskResumeAll>
 80129ba:	e77a      	b.n	80128b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80129bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129be:	f000 fa68 	bl	8012e92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80129c2:	f000 fdd9 	bl	8013578 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80129c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129c8:	f000 fab5 	bl	8012f36 <prvIsQueueEmpty>
 80129cc:	4603      	mov	r3, r0
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	f43f af6f 	beq.w	80128b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80129d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80129d6:	4618      	mov	r0, r3
 80129d8:	3730      	adds	r7, #48	; 0x30
 80129da:	46bd      	mov	sp, r7
 80129dc:	bd80      	pop	{r7, pc}
 80129de:	bf00      	nop
 80129e0:	e000ed04 	.word	0xe000ed04

080129e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80129e4:	b580      	push	{r7, lr}
 80129e6:	b08e      	sub	sp, #56	; 0x38
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
 80129ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80129ee:	2300      	movs	r3, #0
 80129f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80129f6:	2300      	movs	r3, #0
 80129f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80129fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d10a      	bne.n	8012a16 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8012a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a04:	f383 8811 	msr	BASEPRI, r3
 8012a08:	f3bf 8f6f 	isb	sy
 8012a0c:	f3bf 8f4f 	dsb	sy
 8012a10:	623b      	str	r3, [r7, #32]
}
 8012a12:	bf00      	nop
 8012a14:	e7fe      	b.n	8012a14 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d00a      	beq.n	8012a34 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8012a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a22:	f383 8811 	msr	BASEPRI, r3
 8012a26:	f3bf 8f6f 	isb	sy
 8012a2a:	f3bf 8f4f 	dsb	sy
 8012a2e:	61fb      	str	r3, [r7, #28]
}
 8012a30:	bf00      	nop
 8012a32:	e7fe      	b.n	8012a32 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012a34:	f001 fa1c 	bl	8013e70 <xTaskGetSchedulerState>
 8012a38:	4603      	mov	r3, r0
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d102      	bne.n	8012a44 <xQueueSemaphoreTake+0x60>
 8012a3e:	683b      	ldr	r3, [r7, #0]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d101      	bne.n	8012a48 <xQueueSemaphoreTake+0x64>
 8012a44:	2301      	movs	r3, #1
 8012a46:	e000      	b.n	8012a4a <xQueueSemaphoreTake+0x66>
 8012a48:	2300      	movs	r3, #0
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d10a      	bne.n	8012a64 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8012a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a52:	f383 8811 	msr	BASEPRI, r3
 8012a56:	f3bf 8f6f 	isb	sy
 8012a5a:	f3bf 8f4f 	dsb	sy
 8012a5e:	61bb      	str	r3, [r7, #24]
}
 8012a60:	bf00      	nop
 8012a62:	e7fe      	b.n	8012a62 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012a64:	f002 f94e 	bl	8014d04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a6c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d024      	beq.n	8012abe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a76:	1e5a      	subs	r2, r3, #1
 8012a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a7a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d104      	bne.n	8012a8e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012a84:	f001 fb82 	bl	801418c <pvTaskIncrementMutexHeldCount>
 8012a88:	4602      	mov	r2, r0
 8012a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a8c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a90:	691b      	ldr	r3, [r3, #16]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d00f      	beq.n	8012ab6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a98:	3310      	adds	r3, #16
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f000 ffc4 	bl	8013a28 <xTaskRemoveFromEventList>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d007      	beq.n	8012ab6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012aa6:	4b54      	ldr	r3, [pc, #336]	; (8012bf8 <xQueueSemaphoreTake+0x214>)
 8012aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012aac:	601a      	str	r2, [r3, #0]
 8012aae:	f3bf 8f4f 	dsb	sy
 8012ab2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012ab6:	f002 f955 	bl	8014d64 <vPortExitCritical>
				return pdPASS;
 8012aba:	2301      	movs	r3, #1
 8012abc:	e097      	b.n	8012bee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d111      	bne.n	8012ae8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d00a      	beq.n	8012ae0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8012aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ace:	f383 8811 	msr	BASEPRI, r3
 8012ad2:	f3bf 8f6f 	isb	sy
 8012ad6:	f3bf 8f4f 	dsb	sy
 8012ada:	617b      	str	r3, [r7, #20]
}
 8012adc:	bf00      	nop
 8012ade:	e7fe      	b.n	8012ade <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012ae0:	f002 f940 	bl	8014d64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	e082      	b.n	8012bee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d106      	bne.n	8012afc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012aee:	f107 030c 	add.w	r3, r7, #12
 8012af2:	4618      	mov	r0, r3
 8012af4:	f001 f85e 	bl	8013bb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012af8:	2301      	movs	r3, #1
 8012afa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012afc:	f002 f932 	bl	8014d64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012b00:	f000 fd2c 	bl	801355c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012b04:	f002 f8fe 	bl	8014d04 <vPortEnterCritical>
 8012b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012b0e:	b25b      	sxtb	r3, r3
 8012b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b14:	d103      	bne.n	8012b1e <xQueueSemaphoreTake+0x13a>
 8012b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b18:	2200      	movs	r2, #0
 8012b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b24:	b25b      	sxtb	r3, r3
 8012b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b2a:	d103      	bne.n	8012b34 <xQueueSemaphoreTake+0x150>
 8012b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b2e:	2200      	movs	r2, #0
 8012b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012b34:	f002 f916 	bl	8014d64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012b38:	463a      	mov	r2, r7
 8012b3a:	f107 030c 	add.w	r3, r7, #12
 8012b3e:	4611      	mov	r1, r2
 8012b40:	4618      	mov	r0, r3
 8012b42:	f001 f84d 	bl	8013be0 <xTaskCheckForTimeOut>
 8012b46:	4603      	mov	r3, r0
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d132      	bne.n	8012bb2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012b4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b4e:	f000 f9f2 	bl	8012f36 <prvIsQueueEmpty>
 8012b52:	4603      	mov	r3, r0
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d026      	beq.n	8012ba6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d109      	bne.n	8012b74 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8012b60:	f002 f8d0 	bl	8014d04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b66:	689b      	ldr	r3, [r3, #8]
 8012b68:	4618      	mov	r0, r3
 8012b6a:	f001 f99f 	bl	8013eac <xTaskPriorityInherit>
 8012b6e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012b70:	f002 f8f8 	bl	8014d64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b76:	3324      	adds	r3, #36	; 0x24
 8012b78:	683a      	ldr	r2, [r7, #0]
 8012b7a:	4611      	mov	r1, r2
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f000 fec7 	bl	8013910 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012b82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b84:	f000 f985 	bl	8012e92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012b88:	f000 fcf6 	bl	8013578 <xTaskResumeAll>
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	f47f af68 	bne.w	8012a64 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8012b94:	4b18      	ldr	r3, [pc, #96]	; (8012bf8 <xQueueSemaphoreTake+0x214>)
 8012b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b9a:	601a      	str	r2, [r3, #0]
 8012b9c:	f3bf 8f4f 	dsb	sy
 8012ba0:	f3bf 8f6f 	isb	sy
 8012ba4:	e75e      	b.n	8012a64 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012ba6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ba8:	f000 f973 	bl	8012e92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012bac:	f000 fce4 	bl	8013578 <xTaskResumeAll>
 8012bb0:	e758      	b.n	8012a64 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012bb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012bb4:	f000 f96d 	bl	8012e92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012bb8:	f000 fcde 	bl	8013578 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012bbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012bbe:	f000 f9ba 	bl	8012f36 <prvIsQueueEmpty>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	f43f af4d 	beq.w	8012a64 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d00d      	beq.n	8012bec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8012bd0:	f002 f898 	bl	8014d04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012bd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012bd6:	f000 f8b4 	bl	8012d42 <prvGetDisinheritPriorityAfterTimeout>
 8012bda:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bde:	689b      	ldr	r3, [r3, #8]
 8012be0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012be2:	4618      	mov	r0, r3
 8012be4:	f001 fa38 	bl	8014058 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012be8:	f002 f8bc 	bl	8014d64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012bec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012bee:	4618      	mov	r0, r3
 8012bf0:	3738      	adds	r7, #56	; 0x38
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	bd80      	pop	{r7, pc}
 8012bf6:	bf00      	nop
 8012bf8:	e000ed04 	.word	0xe000ed04

08012bfc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b08e      	sub	sp, #56	; 0x38
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	60f8      	str	r0, [r7, #12]
 8012c04:	60b9      	str	r1, [r7, #8]
 8012c06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d10a      	bne.n	8012c28 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c16:	f383 8811 	msr	BASEPRI, r3
 8012c1a:	f3bf 8f6f 	isb	sy
 8012c1e:	f3bf 8f4f 	dsb	sy
 8012c22:	623b      	str	r3, [r7, #32]
}
 8012c24:	bf00      	nop
 8012c26:	e7fe      	b.n	8012c26 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012c28:	68bb      	ldr	r3, [r7, #8]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d103      	bne.n	8012c36 <xQueueReceiveFromISR+0x3a>
 8012c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d101      	bne.n	8012c3a <xQueueReceiveFromISR+0x3e>
 8012c36:	2301      	movs	r3, #1
 8012c38:	e000      	b.n	8012c3c <xQueueReceiveFromISR+0x40>
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d10a      	bne.n	8012c56 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c44:	f383 8811 	msr	BASEPRI, r3
 8012c48:	f3bf 8f6f 	isb	sy
 8012c4c:	f3bf 8f4f 	dsb	sy
 8012c50:	61fb      	str	r3, [r7, #28]
}
 8012c52:	bf00      	nop
 8012c54:	e7fe      	b.n	8012c54 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012c56:	f002 f937 	bl	8014ec8 <vPortValidateInterruptPriority>
	__asm volatile
 8012c5a:	f3ef 8211 	mrs	r2, BASEPRI
 8012c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c62:	f383 8811 	msr	BASEPRI, r3
 8012c66:	f3bf 8f6f 	isb	sy
 8012c6a:	f3bf 8f4f 	dsb	sy
 8012c6e:	61ba      	str	r2, [r7, #24]
 8012c70:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012c72:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012c74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d02f      	beq.n	8012ce2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012c8c:	68b9      	ldr	r1, [r7, #8]
 8012c8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c90:	f000 f8d9 	bl	8012e46 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c96:	1e5a      	subs	r2, r3, #1
 8012c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c9a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012c9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ca4:	d112      	bne.n	8012ccc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca8:	691b      	ldr	r3, [r3, #16]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d016      	beq.n	8012cdc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cb0:	3310      	adds	r3, #16
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f000 feb8 	bl	8013a28 <xTaskRemoveFromEventList>
 8012cb8:	4603      	mov	r3, r0
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d00e      	beq.n	8012cdc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d00b      	beq.n	8012cdc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	2201      	movs	r2, #1
 8012cc8:	601a      	str	r2, [r3, #0]
 8012cca:	e007      	b.n	8012cdc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012cd0:	3301      	adds	r3, #1
 8012cd2:	b2db      	uxtb	r3, r3
 8012cd4:	b25a      	sxtb	r2, r3
 8012cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012cdc:	2301      	movs	r3, #1
 8012cde:	637b      	str	r3, [r7, #52]	; 0x34
 8012ce0:	e001      	b.n	8012ce6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8012ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ce8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012cea:	693b      	ldr	r3, [r7, #16]
 8012cec:	f383 8811 	msr	BASEPRI, r3
}
 8012cf0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3738      	adds	r7, #56	; 0x38
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}

08012cfc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b084      	sub	sp, #16
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d10a      	bne.n	8012d24 <vQueueDelete+0x28>
	__asm volatile
 8012d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d12:	f383 8811 	msr	BASEPRI, r3
 8012d16:	f3bf 8f6f 	isb	sy
 8012d1a:	f3bf 8f4f 	dsb	sy
 8012d1e:	60bb      	str	r3, [r7, #8]
}
 8012d20:	bf00      	nop
 8012d22:	e7fe      	b.n	8012d22 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012d24:	68f8      	ldr	r0, [r7, #12]
 8012d26:	f000 f95f 	bl	8012fe8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d102      	bne.n	8012d3a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8012d34:	68f8      	ldr	r0, [r7, #12]
 8012d36:	f002 f9d3 	bl	80150e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012d3a:	bf00      	nop
 8012d3c:	3710      	adds	r7, #16
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	bd80      	pop	{r7, pc}

08012d42 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012d42:	b480      	push	{r7}
 8012d44:	b085      	sub	sp, #20
 8012d46:	af00      	add	r7, sp, #0
 8012d48:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d006      	beq.n	8012d60 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012d5c:	60fb      	str	r3, [r7, #12]
 8012d5e:	e001      	b.n	8012d64 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012d60:	2300      	movs	r3, #0
 8012d62:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012d64:	68fb      	ldr	r3, [r7, #12]
	}
 8012d66:	4618      	mov	r0, r3
 8012d68:	3714      	adds	r7, #20
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d70:	4770      	bx	lr

08012d72 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012d72:	b580      	push	{r7, lr}
 8012d74:	b086      	sub	sp, #24
 8012d76:	af00      	add	r7, sp, #0
 8012d78:	60f8      	str	r0, [r7, #12]
 8012d7a:	60b9      	str	r1, [r7, #8]
 8012d7c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012d7e:	2300      	movs	r3, #0
 8012d80:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d86:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d10d      	bne.n	8012dac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d14d      	bne.n	8012e34 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	689b      	ldr	r3, [r3, #8]
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f001 f8ed 	bl	8013f7c <xTaskPriorityDisinherit>
 8012da2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	2200      	movs	r2, #0
 8012da8:	609a      	str	r2, [r3, #8]
 8012daa:	e043      	b.n	8012e34 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d119      	bne.n	8012de6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	6858      	ldr	r0, [r3, #4]
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dba:	461a      	mov	r2, r3
 8012dbc:	68b9      	ldr	r1, [r7, #8]
 8012dbe:	f003 f997 	bl	80160f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	685a      	ldr	r2, [r3, #4]
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dca:	441a      	add	r2, r3
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	685a      	ldr	r2, [r3, #4]
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	689b      	ldr	r3, [r3, #8]
 8012dd8:	429a      	cmp	r2, r3
 8012dda:	d32b      	bcc.n	8012e34 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	681a      	ldr	r2, [r3, #0]
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	605a      	str	r2, [r3, #4]
 8012de4:	e026      	b.n	8012e34 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	68d8      	ldr	r0, [r3, #12]
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dee:	461a      	mov	r2, r3
 8012df0:	68b9      	ldr	r1, [r7, #8]
 8012df2:	f003 f97d 	bl	80160f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	68da      	ldr	r2, [r3, #12]
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dfe:	425b      	negs	r3, r3
 8012e00:	441a      	add	r2, r3
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	68da      	ldr	r2, [r3, #12]
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	429a      	cmp	r2, r3
 8012e10:	d207      	bcs.n	8012e22 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	689a      	ldr	r2, [r3, #8]
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e1a:	425b      	negs	r3, r3
 8012e1c:	441a      	add	r2, r3
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	2b02      	cmp	r3, #2
 8012e26:	d105      	bne.n	8012e34 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012e28:	693b      	ldr	r3, [r7, #16]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d002      	beq.n	8012e34 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012e2e:	693b      	ldr	r3, [r7, #16]
 8012e30:	3b01      	subs	r3, #1
 8012e32:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012e34:	693b      	ldr	r3, [r7, #16]
 8012e36:	1c5a      	adds	r2, r3, #1
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012e3c:	697b      	ldr	r3, [r7, #20]
}
 8012e3e:	4618      	mov	r0, r3
 8012e40:	3718      	adds	r7, #24
 8012e42:	46bd      	mov	sp, r7
 8012e44:	bd80      	pop	{r7, pc}

08012e46 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012e46:	b580      	push	{r7, lr}
 8012e48:	b082      	sub	sp, #8
 8012e4a:	af00      	add	r7, sp, #0
 8012e4c:	6078      	str	r0, [r7, #4]
 8012e4e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d018      	beq.n	8012e8a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	68da      	ldr	r2, [r3, #12]
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e60:	441a      	add	r2, r3
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	68da      	ldr	r2, [r3, #12]
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	689b      	ldr	r3, [r3, #8]
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d303      	bcc.n	8012e7a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	681a      	ldr	r2, [r3, #0]
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	68d9      	ldr	r1, [r3, #12]
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e82:	461a      	mov	r2, r3
 8012e84:	6838      	ldr	r0, [r7, #0]
 8012e86:	f003 f933 	bl	80160f0 <memcpy>
	}
}
 8012e8a:	bf00      	nop
 8012e8c:	3708      	adds	r7, #8
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	bd80      	pop	{r7, pc}

08012e92 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012e92:	b580      	push	{r7, lr}
 8012e94:	b084      	sub	sp, #16
 8012e96:	af00      	add	r7, sp, #0
 8012e98:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012e9a:	f001 ff33 	bl	8014d04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ea4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012ea6:	e011      	b.n	8012ecc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d012      	beq.n	8012ed6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	3324      	adds	r3, #36	; 0x24
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	f000 fdb7 	bl	8013a28 <xTaskRemoveFromEventList>
 8012eba:	4603      	mov	r3, r0
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d001      	beq.n	8012ec4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012ec0:	f000 fef0 	bl	8013ca4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012ec4:	7bfb      	ldrb	r3, [r7, #15]
 8012ec6:	3b01      	subs	r3, #1
 8012ec8:	b2db      	uxtb	r3, r3
 8012eca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	dce9      	bgt.n	8012ea8 <prvUnlockQueue+0x16>
 8012ed4:	e000      	b.n	8012ed8 <prvUnlockQueue+0x46>
					break;
 8012ed6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	22ff      	movs	r2, #255	; 0xff
 8012edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012ee0:	f001 ff40 	bl	8014d64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012ee4:	f001 ff0e 	bl	8014d04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012eee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012ef0:	e011      	b.n	8012f16 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	691b      	ldr	r3, [r3, #16]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d012      	beq.n	8012f20 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	3310      	adds	r3, #16
 8012efe:	4618      	mov	r0, r3
 8012f00:	f000 fd92 	bl	8013a28 <xTaskRemoveFromEventList>
 8012f04:	4603      	mov	r3, r0
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d001      	beq.n	8012f0e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012f0a:	f000 fecb 	bl	8013ca4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012f0e:	7bbb      	ldrb	r3, [r7, #14]
 8012f10:	3b01      	subs	r3, #1
 8012f12:	b2db      	uxtb	r3, r3
 8012f14:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012f16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	dce9      	bgt.n	8012ef2 <prvUnlockQueue+0x60>
 8012f1e:	e000      	b.n	8012f22 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012f20:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	22ff      	movs	r2, #255	; 0xff
 8012f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012f2a:	f001 ff1b 	bl	8014d64 <vPortExitCritical>
}
 8012f2e:	bf00      	nop
 8012f30:	3710      	adds	r7, #16
 8012f32:	46bd      	mov	sp, r7
 8012f34:	bd80      	pop	{r7, pc}

08012f36 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012f36:	b580      	push	{r7, lr}
 8012f38:	b084      	sub	sp, #16
 8012f3a:	af00      	add	r7, sp, #0
 8012f3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012f3e:	f001 fee1 	bl	8014d04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d102      	bne.n	8012f50 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012f4a:	2301      	movs	r3, #1
 8012f4c:	60fb      	str	r3, [r7, #12]
 8012f4e:	e001      	b.n	8012f54 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012f50:	2300      	movs	r3, #0
 8012f52:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012f54:	f001 ff06 	bl	8014d64 <vPortExitCritical>

	return xReturn;
 8012f58:	68fb      	ldr	r3, [r7, #12]
}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	3710      	adds	r7, #16
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	bd80      	pop	{r7, pc}

08012f62 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012f62:	b580      	push	{r7, lr}
 8012f64:	b084      	sub	sp, #16
 8012f66:	af00      	add	r7, sp, #0
 8012f68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012f6a:	f001 fecb 	bl	8014d04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f76:	429a      	cmp	r2, r3
 8012f78:	d102      	bne.n	8012f80 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012f7a:	2301      	movs	r3, #1
 8012f7c:	60fb      	str	r3, [r7, #12]
 8012f7e:	e001      	b.n	8012f84 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012f80:	2300      	movs	r3, #0
 8012f82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012f84:	f001 feee 	bl	8014d64 <vPortExitCritical>

	return xReturn;
 8012f88:	68fb      	ldr	r3, [r7, #12]
}
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	3710      	adds	r7, #16
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}
	...

08012f94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012f94:	b480      	push	{r7}
 8012f96:	b085      	sub	sp, #20
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
 8012f9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	60fb      	str	r3, [r7, #12]
 8012fa2:	e014      	b.n	8012fce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012fa4:	4a0f      	ldr	r2, [pc, #60]	; (8012fe4 <vQueueAddToRegistry+0x50>)
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d10b      	bne.n	8012fc8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012fb0:	490c      	ldr	r1, [pc, #48]	; (8012fe4 <vQueueAddToRegistry+0x50>)
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	683a      	ldr	r2, [r7, #0]
 8012fb6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012fba:	4a0a      	ldr	r2, [pc, #40]	; (8012fe4 <vQueueAddToRegistry+0x50>)
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	00db      	lsls	r3, r3, #3
 8012fc0:	4413      	add	r3, r2
 8012fc2:	687a      	ldr	r2, [r7, #4]
 8012fc4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012fc6:	e006      	b.n	8012fd6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	3301      	adds	r3, #1
 8012fcc:	60fb      	str	r3, [r7, #12]
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	2b07      	cmp	r3, #7
 8012fd2:	d9e7      	bls.n	8012fa4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012fd4:	bf00      	nop
 8012fd6:	bf00      	nop
 8012fd8:	3714      	adds	r7, #20
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe0:	4770      	bx	lr
 8012fe2:	bf00      	nop
 8012fe4:	2000125c 	.word	0x2000125c

08012fe8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012fe8:	b480      	push	{r7}
 8012fea:	b085      	sub	sp, #20
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	60fb      	str	r3, [r7, #12]
 8012ff4:	e016      	b.n	8013024 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012ff6:	4a10      	ldr	r2, [pc, #64]	; (8013038 <vQueueUnregisterQueue+0x50>)
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	00db      	lsls	r3, r3, #3
 8012ffc:	4413      	add	r3, r2
 8012ffe:	685b      	ldr	r3, [r3, #4]
 8013000:	687a      	ldr	r2, [r7, #4]
 8013002:	429a      	cmp	r2, r3
 8013004:	d10b      	bne.n	801301e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013006:	4a0c      	ldr	r2, [pc, #48]	; (8013038 <vQueueUnregisterQueue+0x50>)
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	2100      	movs	r1, #0
 801300c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013010:	4a09      	ldr	r2, [pc, #36]	; (8013038 <vQueueUnregisterQueue+0x50>)
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	00db      	lsls	r3, r3, #3
 8013016:	4413      	add	r3, r2
 8013018:	2200      	movs	r2, #0
 801301a:	605a      	str	r2, [r3, #4]
				break;
 801301c:	e006      	b.n	801302c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	3301      	adds	r3, #1
 8013022:	60fb      	str	r3, [r7, #12]
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	2b07      	cmp	r3, #7
 8013028:	d9e5      	bls.n	8012ff6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801302a:	bf00      	nop
 801302c:	bf00      	nop
 801302e:	3714      	adds	r7, #20
 8013030:	46bd      	mov	sp, r7
 8013032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013036:	4770      	bx	lr
 8013038:	2000125c 	.word	0x2000125c

0801303c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801303c:	b580      	push	{r7, lr}
 801303e:	b086      	sub	sp, #24
 8013040:	af00      	add	r7, sp, #0
 8013042:	60f8      	str	r0, [r7, #12]
 8013044:	60b9      	str	r1, [r7, #8]
 8013046:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801304c:	f001 fe5a 	bl	8014d04 <vPortEnterCritical>
 8013050:	697b      	ldr	r3, [r7, #20]
 8013052:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013056:	b25b      	sxtb	r3, r3
 8013058:	f1b3 3fff 	cmp.w	r3, #4294967295
 801305c:	d103      	bne.n	8013066 <vQueueWaitForMessageRestricted+0x2a>
 801305e:	697b      	ldr	r3, [r7, #20]
 8013060:	2200      	movs	r2, #0
 8013062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013066:	697b      	ldr	r3, [r7, #20]
 8013068:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801306c:	b25b      	sxtb	r3, r3
 801306e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013072:	d103      	bne.n	801307c <vQueueWaitForMessageRestricted+0x40>
 8013074:	697b      	ldr	r3, [r7, #20]
 8013076:	2200      	movs	r2, #0
 8013078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801307c:	f001 fe72 	bl	8014d64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013080:	697b      	ldr	r3, [r7, #20]
 8013082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013084:	2b00      	cmp	r3, #0
 8013086:	d106      	bne.n	8013096 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013088:	697b      	ldr	r3, [r7, #20]
 801308a:	3324      	adds	r3, #36	; 0x24
 801308c:	687a      	ldr	r2, [r7, #4]
 801308e:	68b9      	ldr	r1, [r7, #8]
 8013090:	4618      	mov	r0, r3
 8013092:	f000 fc9d 	bl	80139d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013096:	6978      	ldr	r0, [r7, #20]
 8013098:	f7ff fefb 	bl	8012e92 <prvUnlockQueue>
	}
 801309c:	bf00      	nop
 801309e:	3718      	adds	r7, #24
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bd80      	pop	{r7, pc}

080130a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b08e      	sub	sp, #56	; 0x38
 80130a8:	af04      	add	r7, sp, #16
 80130aa:	60f8      	str	r0, [r7, #12]
 80130ac:	60b9      	str	r1, [r7, #8]
 80130ae:	607a      	str	r2, [r7, #4]
 80130b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80130b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d10a      	bne.n	80130ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80130b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130bc:	f383 8811 	msr	BASEPRI, r3
 80130c0:	f3bf 8f6f 	isb	sy
 80130c4:	f3bf 8f4f 	dsb	sy
 80130c8:	623b      	str	r3, [r7, #32]
}
 80130ca:	bf00      	nop
 80130cc:	e7fe      	b.n	80130cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80130ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d10a      	bne.n	80130ea <xTaskCreateStatic+0x46>
	__asm volatile
 80130d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130d8:	f383 8811 	msr	BASEPRI, r3
 80130dc:	f3bf 8f6f 	isb	sy
 80130e0:	f3bf 8f4f 	dsb	sy
 80130e4:	61fb      	str	r3, [r7, #28]
}
 80130e6:	bf00      	nop
 80130e8:	e7fe      	b.n	80130e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80130ea:	23bc      	movs	r3, #188	; 0xbc
 80130ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80130ee:	693b      	ldr	r3, [r7, #16]
 80130f0:	2bbc      	cmp	r3, #188	; 0xbc
 80130f2:	d00a      	beq.n	801310a <xTaskCreateStatic+0x66>
	__asm volatile
 80130f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130f8:	f383 8811 	msr	BASEPRI, r3
 80130fc:	f3bf 8f6f 	isb	sy
 8013100:	f3bf 8f4f 	dsb	sy
 8013104:	61bb      	str	r3, [r7, #24]
}
 8013106:	bf00      	nop
 8013108:	e7fe      	b.n	8013108 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801310a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801310c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801310e:	2b00      	cmp	r3, #0
 8013110:	d01e      	beq.n	8013150 <xTaskCreateStatic+0xac>
 8013112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013114:	2b00      	cmp	r3, #0
 8013116:	d01b      	beq.n	8013150 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801311a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801311e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013120:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013124:	2202      	movs	r2, #2
 8013126:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801312a:	2300      	movs	r3, #0
 801312c:	9303      	str	r3, [sp, #12]
 801312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013130:	9302      	str	r3, [sp, #8]
 8013132:	f107 0314 	add.w	r3, r7, #20
 8013136:	9301      	str	r3, [sp, #4]
 8013138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801313a:	9300      	str	r3, [sp, #0]
 801313c:	683b      	ldr	r3, [r7, #0]
 801313e:	687a      	ldr	r2, [r7, #4]
 8013140:	68b9      	ldr	r1, [r7, #8]
 8013142:	68f8      	ldr	r0, [r7, #12]
 8013144:	f000 f850 	bl	80131e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801314a:	f000 f8f3 	bl	8013334 <prvAddNewTaskToReadyList>
 801314e:	e001      	b.n	8013154 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013150:	2300      	movs	r3, #0
 8013152:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013154:	697b      	ldr	r3, [r7, #20]
	}
 8013156:	4618      	mov	r0, r3
 8013158:	3728      	adds	r7, #40	; 0x28
 801315a:	46bd      	mov	sp, r7
 801315c:	bd80      	pop	{r7, pc}

0801315e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801315e:	b580      	push	{r7, lr}
 8013160:	b08c      	sub	sp, #48	; 0x30
 8013162:	af04      	add	r7, sp, #16
 8013164:	60f8      	str	r0, [r7, #12]
 8013166:	60b9      	str	r1, [r7, #8]
 8013168:	603b      	str	r3, [r7, #0]
 801316a:	4613      	mov	r3, r2
 801316c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801316e:	88fb      	ldrh	r3, [r7, #6]
 8013170:	009b      	lsls	r3, r3, #2
 8013172:	4618      	mov	r0, r3
 8013174:	f001 fee8 	bl	8014f48 <pvPortMalloc>
 8013178:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801317a:	697b      	ldr	r3, [r7, #20]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d00e      	beq.n	801319e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013180:	20bc      	movs	r0, #188	; 0xbc
 8013182:	f001 fee1 	bl	8014f48 <pvPortMalloc>
 8013186:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013188:	69fb      	ldr	r3, [r7, #28]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d003      	beq.n	8013196 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801318e:	69fb      	ldr	r3, [r7, #28]
 8013190:	697a      	ldr	r2, [r7, #20]
 8013192:	631a      	str	r2, [r3, #48]	; 0x30
 8013194:	e005      	b.n	80131a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013196:	6978      	ldr	r0, [r7, #20]
 8013198:	f001 ffa2 	bl	80150e0 <vPortFree>
 801319c:	e001      	b.n	80131a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801319e:	2300      	movs	r3, #0
 80131a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80131a2:	69fb      	ldr	r3, [r7, #28]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d017      	beq.n	80131d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80131a8:	69fb      	ldr	r3, [r7, #28]
 80131aa:	2200      	movs	r2, #0
 80131ac:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80131b0:	88fa      	ldrh	r2, [r7, #6]
 80131b2:	2300      	movs	r3, #0
 80131b4:	9303      	str	r3, [sp, #12]
 80131b6:	69fb      	ldr	r3, [r7, #28]
 80131b8:	9302      	str	r3, [sp, #8]
 80131ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131bc:	9301      	str	r3, [sp, #4]
 80131be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131c0:	9300      	str	r3, [sp, #0]
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	68b9      	ldr	r1, [r7, #8]
 80131c6:	68f8      	ldr	r0, [r7, #12]
 80131c8:	f000 f80e 	bl	80131e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80131cc:	69f8      	ldr	r0, [r7, #28]
 80131ce:	f000 f8b1 	bl	8013334 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80131d2:	2301      	movs	r3, #1
 80131d4:	61bb      	str	r3, [r7, #24]
 80131d6:	e002      	b.n	80131de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80131d8:	f04f 33ff 	mov.w	r3, #4294967295
 80131dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80131de:	69bb      	ldr	r3, [r7, #24]
	}
 80131e0:	4618      	mov	r0, r3
 80131e2:	3720      	adds	r7, #32
 80131e4:	46bd      	mov	sp, r7
 80131e6:	bd80      	pop	{r7, pc}

080131e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b088      	sub	sp, #32
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	60f8      	str	r0, [r7, #12]
 80131f0:	60b9      	str	r1, [r7, #8]
 80131f2:	607a      	str	r2, [r7, #4]
 80131f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80131f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	009b      	lsls	r3, r3, #2
 80131fe:	461a      	mov	r2, r3
 8013200:	21a5      	movs	r1, #165	; 0xa5
 8013202:	f002 ff83 	bl	801610c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013210:	3b01      	subs	r3, #1
 8013212:	009b      	lsls	r3, r3, #2
 8013214:	4413      	add	r3, r2
 8013216:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013218:	69bb      	ldr	r3, [r7, #24]
 801321a:	f023 0307 	bic.w	r3, r3, #7
 801321e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013220:	69bb      	ldr	r3, [r7, #24]
 8013222:	f003 0307 	and.w	r3, r3, #7
 8013226:	2b00      	cmp	r3, #0
 8013228:	d00a      	beq.n	8013240 <prvInitialiseNewTask+0x58>
	__asm volatile
 801322a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801322e:	f383 8811 	msr	BASEPRI, r3
 8013232:	f3bf 8f6f 	isb	sy
 8013236:	f3bf 8f4f 	dsb	sy
 801323a:	617b      	str	r3, [r7, #20]
}
 801323c:	bf00      	nop
 801323e:	e7fe      	b.n	801323e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013240:	68bb      	ldr	r3, [r7, #8]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d01f      	beq.n	8013286 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013246:	2300      	movs	r3, #0
 8013248:	61fb      	str	r3, [r7, #28]
 801324a:	e012      	b.n	8013272 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801324c:	68ba      	ldr	r2, [r7, #8]
 801324e:	69fb      	ldr	r3, [r7, #28]
 8013250:	4413      	add	r3, r2
 8013252:	7819      	ldrb	r1, [r3, #0]
 8013254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013256:	69fb      	ldr	r3, [r7, #28]
 8013258:	4413      	add	r3, r2
 801325a:	3334      	adds	r3, #52	; 0x34
 801325c:	460a      	mov	r2, r1
 801325e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013260:	68ba      	ldr	r2, [r7, #8]
 8013262:	69fb      	ldr	r3, [r7, #28]
 8013264:	4413      	add	r3, r2
 8013266:	781b      	ldrb	r3, [r3, #0]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d006      	beq.n	801327a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801326c:	69fb      	ldr	r3, [r7, #28]
 801326e:	3301      	adds	r3, #1
 8013270:	61fb      	str	r3, [r7, #28]
 8013272:	69fb      	ldr	r3, [r7, #28]
 8013274:	2b0f      	cmp	r3, #15
 8013276:	d9e9      	bls.n	801324c <prvInitialiseNewTask+0x64>
 8013278:	e000      	b.n	801327c <prvInitialiseNewTask+0x94>
			{
				break;
 801327a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801327c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801327e:	2200      	movs	r2, #0
 8013280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013284:	e003      	b.n	801328e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013288:	2200      	movs	r2, #0
 801328a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801328e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013290:	2b37      	cmp	r3, #55	; 0x37
 8013292:	d901      	bls.n	8013298 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013294:	2337      	movs	r3, #55	; 0x37
 8013296:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801329a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801329c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80132a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80132a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132a6:	2200      	movs	r2, #0
 80132a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80132aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ac:	3304      	adds	r3, #4
 80132ae:	4618      	mov	r0, r3
 80132b0:	f7fe fe56 	bl	8011f60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80132b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132b6:	3318      	adds	r3, #24
 80132b8:	4618      	mov	r0, r3
 80132ba:	f7fe fe51 	bl	8011f60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80132be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80132c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80132ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80132ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80132d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132d6:	2200      	movs	r2, #0
 80132d8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80132dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132de:	2200      	movs	r2, #0
 80132e0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80132e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e6:	3354      	adds	r3, #84	; 0x54
 80132e8:	2260      	movs	r2, #96	; 0x60
 80132ea:	2100      	movs	r1, #0
 80132ec:	4618      	mov	r0, r3
 80132ee:	f002 ff0d 	bl	801610c <memset>
 80132f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132f4:	4a0c      	ldr	r2, [pc, #48]	; (8013328 <prvInitialiseNewTask+0x140>)
 80132f6:	659a      	str	r2, [r3, #88]	; 0x58
 80132f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132fa:	4a0c      	ldr	r2, [pc, #48]	; (801332c <prvInitialiseNewTask+0x144>)
 80132fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80132fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013300:	4a0b      	ldr	r2, [pc, #44]	; (8013330 <prvInitialiseNewTask+0x148>)
 8013302:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013304:	683a      	ldr	r2, [r7, #0]
 8013306:	68f9      	ldr	r1, [r7, #12]
 8013308:	69b8      	ldr	r0, [r7, #24]
 801330a:	f001 fbcf 	bl	8014aac <pxPortInitialiseStack>
 801330e:	4602      	mov	r2, r0
 8013310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013312:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013316:	2b00      	cmp	r3, #0
 8013318:	d002      	beq.n	8013320 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801331a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801331c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801331e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013320:	bf00      	nop
 8013322:	3720      	adds	r7, #32
 8013324:	46bd      	mov	sp, r7
 8013326:	bd80      	pop	{r7, pc}
 8013328:	08019a34 	.word	0x08019a34
 801332c:	08019a54 	.word	0x08019a54
 8013330:	08019a14 	.word	0x08019a14

08013334 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b082      	sub	sp, #8
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801333c:	f001 fce2 	bl	8014d04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013340:	4b2d      	ldr	r3, [pc, #180]	; (80133f8 <prvAddNewTaskToReadyList+0xc4>)
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	3301      	adds	r3, #1
 8013346:	4a2c      	ldr	r2, [pc, #176]	; (80133f8 <prvAddNewTaskToReadyList+0xc4>)
 8013348:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801334a:	4b2c      	ldr	r3, [pc, #176]	; (80133fc <prvAddNewTaskToReadyList+0xc8>)
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d109      	bne.n	8013366 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013352:	4a2a      	ldr	r2, [pc, #168]	; (80133fc <prvAddNewTaskToReadyList+0xc8>)
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013358:	4b27      	ldr	r3, [pc, #156]	; (80133f8 <prvAddNewTaskToReadyList+0xc4>)
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	2b01      	cmp	r3, #1
 801335e:	d110      	bne.n	8013382 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013360:	f000 fcc4 	bl	8013cec <prvInitialiseTaskLists>
 8013364:	e00d      	b.n	8013382 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013366:	4b26      	ldr	r3, [pc, #152]	; (8013400 <prvAddNewTaskToReadyList+0xcc>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d109      	bne.n	8013382 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801336e:	4b23      	ldr	r3, [pc, #140]	; (80133fc <prvAddNewTaskToReadyList+0xc8>)
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013378:	429a      	cmp	r2, r3
 801337a:	d802      	bhi.n	8013382 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801337c:	4a1f      	ldr	r2, [pc, #124]	; (80133fc <prvAddNewTaskToReadyList+0xc8>)
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013382:	4b20      	ldr	r3, [pc, #128]	; (8013404 <prvAddNewTaskToReadyList+0xd0>)
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	3301      	adds	r3, #1
 8013388:	4a1e      	ldr	r2, [pc, #120]	; (8013404 <prvAddNewTaskToReadyList+0xd0>)
 801338a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801338c:	4b1d      	ldr	r3, [pc, #116]	; (8013404 <prvAddNewTaskToReadyList+0xd0>)
 801338e:	681a      	ldr	r2, [r3, #0]
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013398:	4b1b      	ldr	r3, [pc, #108]	; (8013408 <prvAddNewTaskToReadyList+0xd4>)
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	429a      	cmp	r2, r3
 801339e:	d903      	bls.n	80133a8 <prvAddNewTaskToReadyList+0x74>
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133a4:	4a18      	ldr	r2, [pc, #96]	; (8013408 <prvAddNewTaskToReadyList+0xd4>)
 80133a6:	6013      	str	r3, [r2, #0]
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133ac:	4613      	mov	r3, r2
 80133ae:	009b      	lsls	r3, r3, #2
 80133b0:	4413      	add	r3, r2
 80133b2:	009b      	lsls	r3, r3, #2
 80133b4:	4a15      	ldr	r2, [pc, #84]	; (801340c <prvAddNewTaskToReadyList+0xd8>)
 80133b6:	441a      	add	r2, r3
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	3304      	adds	r3, #4
 80133bc:	4619      	mov	r1, r3
 80133be:	4610      	mov	r0, r2
 80133c0:	f7fe fddb 	bl	8011f7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80133c4:	f001 fcce 	bl	8014d64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80133c8:	4b0d      	ldr	r3, [pc, #52]	; (8013400 <prvAddNewTaskToReadyList+0xcc>)
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d00e      	beq.n	80133ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80133d0:	4b0a      	ldr	r3, [pc, #40]	; (80133fc <prvAddNewTaskToReadyList+0xc8>)
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133da:	429a      	cmp	r2, r3
 80133dc:	d207      	bcs.n	80133ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80133de:	4b0c      	ldr	r3, [pc, #48]	; (8013410 <prvAddNewTaskToReadyList+0xdc>)
 80133e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133e4:	601a      	str	r2, [r3, #0]
 80133e6:	f3bf 8f4f 	dsb	sy
 80133ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80133ee:	bf00      	nop
 80133f0:	3708      	adds	r7, #8
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd80      	pop	{r7, pc}
 80133f6:	bf00      	nop
 80133f8:	20001770 	.word	0x20001770
 80133fc:	2000129c 	.word	0x2000129c
 8013400:	2000177c 	.word	0x2000177c
 8013404:	2000178c 	.word	0x2000178c
 8013408:	20001778 	.word	0x20001778
 801340c:	200012a0 	.word	0x200012a0
 8013410:	e000ed04 	.word	0xe000ed04

08013414 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013414:	b580      	push	{r7, lr}
 8013416:	b084      	sub	sp, #16
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801341c:	2300      	movs	r3, #0
 801341e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d017      	beq.n	8013456 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013426:	4b13      	ldr	r3, [pc, #76]	; (8013474 <vTaskDelay+0x60>)
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d00a      	beq.n	8013444 <vTaskDelay+0x30>
	__asm volatile
 801342e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013432:	f383 8811 	msr	BASEPRI, r3
 8013436:	f3bf 8f6f 	isb	sy
 801343a:	f3bf 8f4f 	dsb	sy
 801343e:	60bb      	str	r3, [r7, #8]
}
 8013440:	bf00      	nop
 8013442:	e7fe      	b.n	8013442 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013444:	f000 f88a 	bl	801355c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013448:	2100      	movs	r1, #0
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f000 feb2 	bl	80141b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013450:	f000 f892 	bl	8013578 <xTaskResumeAll>
 8013454:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d107      	bne.n	801346c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801345c:	4b06      	ldr	r3, [pc, #24]	; (8013478 <vTaskDelay+0x64>)
 801345e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013462:	601a      	str	r2, [r3, #0]
 8013464:	f3bf 8f4f 	dsb	sy
 8013468:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801346c:	bf00      	nop
 801346e:	3710      	adds	r7, #16
 8013470:	46bd      	mov	sp, r7
 8013472:	bd80      	pop	{r7, pc}
 8013474:	20001798 	.word	0x20001798
 8013478:	e000ed04 	.word	0xe000ed04

0801347c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801347c:	b580      	push	{r7, lr}
 801347e:	b08a      	sub	sp, #40	; 0x28
 8013480:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013482:	2300      	movs	r3, #0
 8013484:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013486:	2300      	movs	r3, #0
 8013488:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801348a:	463a      	mov	r2, r7
 801348c:	1d39      	adds	r1, r7, #4
 801348e:	f107 0308 	add.w	r3, r7, #8
 8013492:	4618      	mov	r0, r3
 8013494:	f7fe fb22 	bl	8011adc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013498:	6839      	ldr	r1, [r7, #0]
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	68ba      	ldr	r2, [r7, #8]
 801349e:	9202      	str	r2, [sp, #8]
 80134a0:	9301      	str	r3, [sp, #4]
 80134a2:	2300      	movs	r3, #0
 80134a4:	9300      	str	r3, [sp, #0]
 80134a6:	2300      	movs	r3, #0
 80134a8:	460a      	mov	r2, r1
 80134aa:	4924      	ldr	r1, [pc, #144]	; (801353c <vTaskStartScheduler+0xc0>)
 80134ac:	4824      	ldr	r0, [pc, #144]	; (8013540 <vTaskStartScheduler+0xc4>)
 80134ae:	f7ff fdf9 	bl	80130a4 <xTaskCreateStatic>
 80134b2:	4603      	mov	r3, r0
 80134b4:	4a23      	ldr	r2, [pc, #140]	; (8013544 <vTaskStartScheduler+0xc8>)
 80134b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80134b8:	4b22      	ldr	r3, [pc, #136]	; (8013544 <vTaskStartScheduler+0xc8>)
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d002      	beq.n	80134c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80134c0:	2301      	movs	r3, #1
 80134c2:	617b      	str	r3, [r7, #20]
 80134c4:	e001      	b.n	80134ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80134c6:	2300      	movs	r3, #0
 80134c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80134ca:	697b      	ldr	r3, [r7, #20]
 80134cc:	2b01      	cmp	r3, #1
 80134ce:	d102      	bne.n	80134d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80134d0:	f000 fec4 	bl	801425c <xTimerCreateTimerTask>
 80134d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80134d6:	697b      	ldr	r3, [r7, #20]
 80134d8:	2b01      	cmp	r3, #1
 80134da:	d11b      	bne.n	8013514 <vTaskStartScheduler+0x98>
	__asm volatile
 80134dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134e0:	f383 8811 	msr	BASEPRI, r3
 80134e4:	f3bf 8f6f 	isb	sy
 80134e8:	f3bf 8f4f 	dsb	sy
 80134ec:	613b      	str	r3, [r7, #16]
}
 80134ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80134f0:	4b15      	ldr	r3, [pc, #84]	; (8013548 <vTaskStartScheduler+0xcc>)
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	3354      	adds	r3, #84	; 0x54
 80134f6:	4a15      	ldr	r2, [pc, #84]	; (801354c <vTaskStartScheduler+0xd0>)
 80134f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80134fa:	4b15      	ldr	r3, [pc, #84]	; (8013550 <vTaskStartScheduler+0xd4>)
 80134fc:	f04f 32ff 	mov.w	r2, #4294967295
 8013500:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013502:	4b14      	ldr	r3, [pc, #80]	; (8013554 <vTaskStartScheduler+0xd8>)
 8013504:	2201      	movs	r2, #1
 8013506:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013508:	4b13      	ldr	r3, [pc, #76]	; (8013558 <vTaskStartScheduler+0xdc>)
 801350a:	2200      	movs	r2, #0
 801350c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801350e:	f001 fb57 	bl	8014bc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013512:	e00e      	b.n	8013532 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013514:	697b      	ldr	r3, [r7, #20]
 8013516:	f1b3 3fff 	cmp.w	r3, #4294967295
 801351a:	d10a      	bne.n	8013532 <vTaskStartScheduler+0xb6>
	__asm volatile
 801351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013520:	f383 8811 	msr	BASEPRI, r3
 8013524:	f3bf 8f6f 	isb	sy
 8013528:	f3bf 8f4f 	dsb	sy
 801352c:	60fb      	str	r3, [r7, #12]
}
 801352e:	bf00      	nop
 8013530:	e7fe      	b.n	8013530 <vTaskStartScheduler+0xb4>
}
 8013532:	bf00      	nop
 8013534:	3718      	adds	r7, #24
 8013536:	46bd      	mov	sp, r7
 8013538:	bd80      	pop	{r7, pc}
 801353a:	bf00      	nop
 801353c:	08019888 	.word	0x08019888
 8013540:	08013cbd 	.word	0x08013cbd
 8013544:	20001794 	.word	0x20001794
 8013548:	2000129c 	.word	0x2000129c
 801354c:	2000013c 	.word	0x2000013c
 8013550:	20001790 	.word	0x20001790
 8013554:	2000177c 	.word	0x2000177c
 8013558:	20001774 	.word	0x20001774

0801355c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801355c:	b480      	push	{r7}
 801355e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013560:	4b04      	ldr	r3, [pc, #16]	; (8013574 <vTaskSuspendAll+0x18>)
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	3301      	adds	r3, #1
 8013566:	4a03      	ldr	r2, [pc, #12]	; (8013574 <vTaskSuspendAll+0x18>)
 8013568:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801356a:	bf00      	nop
 801356c:	46bd      	mov	sp, r7
 801356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013572:	4770      	bx	lr
 8013574:	20001798 	.word	0x20001798

08013578 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b084      	sub	sp, #16
 801357c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801357e:	2300      	movs	r3, #0
 8013580:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013582:	2300      	movs	r3, #0
 8013584:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013586:	4b42      	ldr	r3, [pc, #264]	; (8013690 <xTaskResumeAll+0x118>)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d10a      	bne.n	80135a4 <xTaskResumeAll+0x2c>
	__asm volatile
 801358e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013592:	f383 8811 	msr	BASEPRI, r3
 8013596:	f3bf 8f6f 	isb	sy
 801359a:	f3bf 8f4f 	dsb	sy
 801359e:	603b      	str	r3, [r7, #0]
}
 80135a0:	bf00      	nop
 80135a2:	e7fe      	b.n	80135a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80135a4:	f001 fbae 	bl	8014d04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80135a8:	4b39      	ldr	r3, [pc, #228]	; (8013690 <xTaskResumeAll+0x118>)
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	3b01      	subs	r3, #1
 80135ae:	4a38      	ldr	r2, [pc, #224]	; (8013690 <xTaskResumeAll+0x118>)
 80135b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80135b2:	4b37      	ldr	r3, [pc, #220]	; (8013690 <xTaskResumeAll+0x118>)
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d162      	bne.n	8013680 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80135ba:	4b36      	ldr	r3, [pc, #216]	; (8013694 <xTaskResumeAll+0x11c>)
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d05e      	beq.n	8013680 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80135c2:	e02f      	b.n	8013624 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80135c4:	4b34      	ldr	r3, [pc, #208]	; (8013698 <xTaskResumeAll+0x120>)
 80135c6:	68db      	ldr	r3, [r3, #12]
 80135c8:	68db      	ldr	r3, [r3, #12]
 80135ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	3318      	adds	r3, #24
 80135d0:	4618      	mov	r0, r3
 80135d2:	f7fe fd2f 	bl	8012034 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	3304      	adds	r3, #4
 80135da:	4618      	mov	r0, r3
 80135dc:	f7fe fd2a 	bl	8012034 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135e4:	4b2d      	ldr	r3, [pc, #180]	; (801369c <xTaskResumeAll+0x124>)
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	429a      	cmp	r2, r3
 80135ea:	d903      	bls.n	80135f4 <xTaskResumeAll+0x7c>
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135f0:	4a2a      	ldr	r2, [pc, #168]	; (801369c <xTaskResumeAll+0x124>)
 80135f2:	6013      	str	r3, [r2, #0]
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135f8:	4613      	mov	r3, r2
 80135fa:	009b      	lsls	r3, r3, #2
 80135fc:	4413      	add	r3, r2
 80135fe:	009b      	lsls	r3, r3, #2
 8013600:	4a27      	ldr	r2, [pc, #156]	; (80136a0 <xTaskResumeAll+0x128>)
 8013602:	441a      	add	r2, r3
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	3304      	adds	r3, #4
 8013608:	4619      	mov	r1, r3
 801360a:	4610      	mov	r0, r2
 801360c:	f7fe fcb5 	bl	8011f7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013614:	4b23      	ldr	r3, [pc, #140]	; (80136a4 <xTaskResumeAll+0x12c>)
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801361a:	429a      	cmp	r2, r3
 801361c:	d302      	bcc.n	8013624 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801361e:	4b22      	ldr	r3, [pc, #136]	; (80136a8 <xTaskResumeAll+0x130>)
 8013620:	2201      	movs	r2, #1
 8013622:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013624:	4b1c      	ldr	r3, [pc, #112]	; (8013698 <xTaskResumeAll+0x120>)
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d1cb      	bne.n	80135c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d001      	beq.n	8013636 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013632:	f000 fbfd 	bl	8013e30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013636:	4b1d      	ldr	r3, [pc, #116]	; (80136ac <xTaskResumeAll+0x134>)
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d010      	beq.n	8013664 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013642:	f000 f847 	bl	80136d4 <xTaskIncrementTick>
 8013646:	4603      	mov	r3, r0
 8013648:	2b00      	cmp	r3, #0
 801364a:	d002      	beq.n	8013652 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801364c:	4b16      	ldr	r3, [pc, #88]	; (80136a8 <xTaskResumeAll+0x130>)
 801364e:	2201      	movs	r2, #1
 8013650:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	3b01      	subs	r3, #1
 8013656:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d1f1      	bne.n	8013642 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801365e:	4b13      	ldr	r3, [pc, #76]	; (80136ac <xTaskResumeAll+0x134>)
 8013660:	2200      	movs	r2, #0
 8013662:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013664:	4b10      	ldr	r3, [pc, #64]	; (80136a8 <xTaskResumeAll+0x130>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d009      	beq.n	8013680 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801366c:	2301      	movs	r3, #1
 801366e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013670:	4b0f      	ldr	r3, [pc, #60]	; (80136b0 <xTaskResumeAll+0x138>)
 8013672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013676:	601a      	str	r2, [r3, #0]
 8013678:	f3bf 8f4f 	dsb	sy
 801367c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013680:	f001 fb70 	bl	8014d64 <vPortExitCritical>

	return xAlreadyYielded;
 8013684:	68bb      	ldr	r3, [r7, #8]
}
 8013686:	4618      	mov	r0, r3
 8013688:	3710      	adds	r7, #16
 801368a:	46bd      	mov	sp, r7
 801368c:	bd80      	pop	{r7, pc}
 801368e:	bf00      	nop
 8013690:	20001798 	.word	0x20001798
 8013694:	20001770 	.word	0x20001770
 8013698:	20001730 	.word	0x20001730
 801369c:	20001778 	.word	0x20001778
 80136a0:	200012a0 	.word	0x200012a0
 80136a4:	2000129c 	.word	0x2000129c
 80136a8:	20001784 	.word	0x20001784
 80136ac:	20001780 	.word	0x20001780
 80136b0:	e000ed04 	.word	0xe000ed04

080136b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80136b4:	b480      	push	{r7}
 80136b6:	b083      	sub	sp, #12
 80136b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80136ba:	4b05      	ldr	r3, [pc, #20]	; (80136d0 <xTaskGetTickCount+0x1c>)
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80136c0:	687b      	ldr	r3, [r7, #4]
}
 80136c2:	4618      	mov	r0, r3
 80136c4:	370c      	adds	r7, #12
 80136c6:	46bd      	mov	sp, r7
 80136c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136cc:	4770      	bx	lr
 80136ce:	bf00      	nop
 80136d0:	20001774 	.word	0x20001774

080136d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b086      	sub	sp, #24
 80136d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80136da:	2300      	movs	r3, #0
 80136dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80136de:	4b4f      	ldr	r3, [pc, #316]	; (801381c <xTaskIncrementTick+0x148>)
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	f040 808f 	bne.w	8013806 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80136e8:	4b4d      	ldr	r3, [pc, #308]	; (8013820 <xTaskIncrementTick+0x14c>)
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	3301      	adds	r3, #1
 80136ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80136f0:	4a4b      	ldr	r2, [pc, #300]	; (8013820 <xTaskIncrementTick+0x14c>)
 80136f2:	693b      	ldr	r3, [r7, #16]
 80136f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80136f6:	693b      	ldr	r3, [r7, #16]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d120      	bne.n	801373e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80136fc:	4b49      	ldr	r3, [pc, #292]	; (8013824 <xTaskIncrementTick+0x150>)
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d00a      	beq.n	801371c <xTaskIncrementTick+0x48>
	__asm volatile
 8013706:	f04f 0350 	mov.w	r3, #80	; 0x50
 801370a:	f383 8811 	msr	BASEPRI, r3
 801370e:	f3bf 8f6f 	isb	sy
 8013712:	f3bf 8f4f 	dsb	sy
 8013716:	603b      	str	r3, [r7, #0]
}
 8013718:	bf00      	nop
 801371a:	e7fe      	b.n	801371a <xTaskIncrementTick+0x46>
 801371c:	4b41      	ldr	r3, [pc, #260]	; (8013824 <xTaskIncrementTick+0x150>)
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	60fb      	str	r3, [r7, #12]
 8013722:	4b41      	ldr	r3, [pc, #260]	; (8013828 <xTaskIncrementTick+0x154>)
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	4a3f      	ldr	r2, [pc, #252]	; (8013824 <xTaskIncrementTick+0x150>)
 8013728:	6013      	str	r3, [r2, #0]
 801372a:	4a3f      	ldr	r2, [pc, #252]	; (8013828 <xTaskIncrementTick+0x154>)
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	6013      	str	r3, [r2, #0]
 8013730:	4b3e      	ldr	r3, [pc, #248]	; (801382c <xTaskIncrementTick+0x158>)
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	3301      	adds	r3, #1
 8013736:	4a3d      	ldr	r2, [pc, #244]	; (801382c <xTaskIncrementTick+0x158>)
 8013738:	6013      	str	r3, [r2, #0]
 801373a:	f000 fb79 	bl	8013e30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801373e:	4b3c      	ldr	r3, [pc, #240]	; (8013830 <xTaskIncrementTick+0x15c>)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	693a      	ldr	r2, [r7, #16]
 8013744:	429a      	cmp	r2, r3
 8013746:	d349      	bcc.n	80137dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013748:	4b36      	ldr	r3, [pc, #216]	; (8013824 <xTaskIncrementTick+0x150>)
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	2b00      	cmp	r3, #0
 8013750:	d104      	bne.n	801375c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013752:	4b37      	ldr	r3, [pc, #220]	; (8013830 <xTaskIncrementTick+0x15c>)
 8013754:	f04f 32ff 	mov.w	r2, #4294967295
 8013758:	601a      	str	r2, [r3, #0]
					break;
 801375a:	e03f      	b.n	80137dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801375c:	4b31      	ldr	r3, [pc, #196]	; (8013824 <xTaskIncrementTick+0x150>)
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	68db      	ldr	r3, [r3, #12]
 8013762:	68db      	ldr	r3, [r3, #12]
 8013764:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013766:	68bb      	ldr	r3, [r7, #8]
 8013768:	685b      	ldr	r3, [r3, #4]
 801376a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801376c:	693a      	ldr	r2, [r7, #16]
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	429a      	cmp	r2, r3
 8013772:	d203      	bcs.n	801377c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013774:	4a2e      	ldr	r2, [pc, #184]	; (8013830 <xTaskIncrementTick+0x15c>)
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801377a:	e02f      	b.n	80137dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801377c:	68bb      	ldr	r3, [r7, #8]
 801377e:	3304      	adds	r3, #4
 8013780:	4618      	mov	r0, r3
 8013782:	f7fe fc57 	bl	8012034 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013786:	68bb      	ldr	r3, [r7, #8]
 8013788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801378a:	2b00      	cmp	r3, #0
 801378c:	d004      	beq.n	8013798 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801378e:	68bb      	ldr	r3, [r7, #8]
 8013790:	3318      	adds	r3, #24
 8013792:	4618      	mov	r0, r3
 8013794:	f7fe fc4e 	bl	8012034 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013798:	68bb      	ldr	r3, [r7, #8]
 801379a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801379c:	4b25      	ldr	r3, [pc, #148]	; (8013834 <xTaskIncrementTick+0x160>)
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	429a      	cmp	r2, r3
 80137a2:	d903      	bls.n	80137ac <xTaskIncrementTick+0xd8>
 80137a4:	68bb      	ldr	r3, [r7, #8]
 80137a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137a8:	4a22      	ldr	r2, [pc, #136]	; (8013834 <xTaskIncrementTick+0x160>)
 80137aa:	6013      	str	r3, [r2, #0]
 80137ac:	68bb      	ldr	r3, [r7, #8]
 80137ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137b0:	4613      	mov	r3, r2
 80137b2:	009b      	lsls	r3, r3, #2
 80137b4:	4413      	add	r3, r2
 80137b6:	009b      	lsls	r3, r3, #2
 80137b8:	4a1f      	ldr	r2, [pc, #124]	; (8013838 <xTaskIncrementTick+0x164>)
 80137ba:	441a      	add	r2, r3
 80137bc:	68bb      	ldr	r3, [r7, #8]
 80137be:	3304      	adds	r3, #4
 80137c0:	4619      	mov	r1, r3
 80137c2:	4610      	mov	r0, r2
 80137c4:	f7fe fbd9 	bl	8011f7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80137c8:	68bb      	ldr	r3, [r7, #8]
 80137ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137cc:	4b1b      	ldr	r3, [pc, #108]	; (801383c <xTaskIncrementTick+0x168>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d3b8      	bcc.n	8013748 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80137d6:	2301      	movs	r3, #1
 80137d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80137da:	e7b5      	b.n	8013748 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80137dc:	4b17      	ldr	r3, [pc, #92]	; (801383c <xTaskIncrementTick+0x168>)
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137e2:	4915      	ldr	r1, [pc, #84]	; (8013838 <xTaskIncrementTick+0x164>)
 80137e4:	4613      	mov	r3, r2
 80137e6:	009b      	lsls	r3, r3, #2
 80137e8:	4413      	add	r3, r2
 80137ea:	009b      	lsls	r3, r3, #2
 80137ec:	440b      	add	r3, r1
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	2b01      	cmp	r3, #1
 80137f2:	d901      	bls.n	80137f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80137f4:	2301      	movs	r3, #1
 80137f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80137f8:	4b11      	ldr	r3, [pc, #68]	; (8013840 <xTaskIncrementTick+0x16c>)
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d007      	beq.n	8013810 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8013800:	2301      	movs	r3, #1
 8013802:	617b      	str	r3, [r7, #20]
 8013804:	e004      	b.n	8013810 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013806:	4b0f      	ldr	r3, [pc, #60]	; (8013844 <xTaskIncrementTick+0x170>)
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	3301      	adds	r3, #1
 801380c:	4a0d      	ldr	r2, [pc, #52]	; (8013844 <xTaskIncrementTick+0x170>)
 801380e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013810:	697b      	ldr	r3, [r7, #20]
}
 8013812:	4618      	mov	r0, r3
 8013814:	3718      	adds	r7, #24
 8013816:	46bd      	mov	sp, r7
 8013818:	bd80      	pop	{r7, pc}
 801381a:	bf00      	nop
 801381c:	20001798 	.word	0x20001798
 8013820:	20001774 	.word	0x20001774
 8013824:	20001728 	.word	0x20001728
 8013828:	2000172c 	.word	0x2000172c
 801382c:	20001788 	.word	0x20001788
 8013830:	20001790 	.word	0x20001790
 8013834:	20001778 	.word	0x20001778
 8013838:	200012a0 	.word	0x200012a0
 801383c:	2000129c 	.word	0x2000129c
 8013840:	20001784 	.word	0x20001784
 8013844:	20001780 	.word	0x20001780

08013848 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013848:	b480      	push	{r7}
 801384a:	b085      	sub	sp, #20
 801384c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801384e:	4b2a      	ldr	r3, [pc, #168]	; (80138f8 <vTaskSwitchContext+0xb0>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d003      	beq.n	801385e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013856:	4b29      	ldr	r3, [pc, #164]	; (80138fc <vTaskSwitchContext+0xb4>)
 8013858:	2201      	movs	r2, #1
 801385a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801385c:	e046      	b.n	80138ec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801385e:	4b27      	ldr	r3, [pc, #156]	; (80138fc <vTaskSwitchContext+0xb4>)
 8013860:	2200      	movs	r2, #0
 8013862:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013864:	4b26      	ldr	r3, [pc, #152]	; (8013900 <vTaskSwitchContext+0xb8>)
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	60fb      	str	r3, [r7, #12]
 801386a:	e010      	b.n	801388e <vTaskSwitchContext+0x46>
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d10a      	bne.n	8013888 <vTaskSwitchContext+0x40>
	__asm volatile
 8013872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013876:	f383 8811 	msr	BASEPRI, r3
 801387a:	f3bf 8f6f 	isb	sy
 801387e:	f3bf 8f4f 	dsb	sy
 8013882:	607b      	str	r3, [r7, #4]
}
 8013884:	bf00      	nop
 8013886:	e7fe      	b.n	8013886 <vTaskSwitchContext+0x3e>
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	3b01      	subs	r3, #1
 801388c:	60fb      	str	r3, [r7, #12]
 801388e:	491d      	ldr	r1, [pc, #116]	; (8013904 <vTaskSwitchContext+0xbc>)
 8013890:	68fa      	ldr	r2, [r7, #12]
 8013892:	4613      	mov	r3, r2
 8013894:	009b      	lsls	r3, r3, #2
 8013896:	4413      	add	r3, r2
 8013898:	009b      	lsls	r3, r3, #2
 801389a:	440b      	add	r3, r1
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d0e4      	beq.n	801386c <vTaskSwitchContext+0x24>
 80138a2:	68fa      	ldr	r2, [r7, #12]
 80138a4:	4613      	mov	r3, r2
 80138a6:	009b      	lsls	r3, r3, #2
 80138a8:	4413      	add	r3, r2
 80138aa:	009b      	lsls	r3, r3, #2
 80138ac:	4a15      	ldr	r2, [pc, #84]	; (8013904 <vTaskSwitchContext+0xbc>)
 80138ae:	4413      	add	r3, r2
 80138b0:	60bb      	str	r3, [r7, #8]
 80138b2:	68bb      	ldr	r3, [r7, #8]
 80138b4:	685b      	ldr	r3, [r3, #4]
 80138b6:	685a      	ldr	r2, [r3, #4]
 80138b8:	68bb      	ldr	r3, [r7, #8]
 80138ba:	605a      	str	r2, [r3, #4]
 80138bc:	68bb      	ldr	r3, [r7, #8]
 80138be:	685a      	ldr	r2, [r3, #4]
 80138c0:	68bb      	ldr	r3, [r7, #8]
 80138c2:	3308      	adds	r3, #8
 80138c4:	429a      	cmp	r2, r3
 80138c6:	d104      	bne.n	80138d2 <vTaskSwitchContext+0x8a>
 80138c8:	68bb      	ldr	r3, [r7, #8]
 80138ca:	685b      	ldr	r3, [r3, #4]
 80138cc:	685a      	ldr	r2, [r3, #4]
 80138ce:	68bb      	ldr	r3, [r7, #8]
 80138d0:	605a      	str	r2, [r3, #4]
 80138d2:	68bb      	ldr	r3, [r7, #8]
 80138d4:	685b      	ldr	r3, [r3, #4]
 80138d6:	68db      	ldr	r3, [r3, #12]
 80138d8:	4a0b      	ldr	r2, [pc, #44]	; (8013908 <vTaskSwitchContext+0xc0>)
 80138da:	6013      	str	r3, [r2, #0]
 80138dc:	4a08      	ldr	r2, [pc, #32]	; (8013900 <vTaskSwitchContext+0xb8>)
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80138e2:	4b09      	ldr	r3, [pc, #36]	; (8013908 <vTaskSwitchContext+0xc0>)
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	3354      	adds	r3, #84	; 0x54
 80138e8:	4a08      	ldr	r2, [pc, #32]	; (801390c <vTaskSwitchContext+0xc4>)
 80138ea:	6013      	str	r3, [r2, #0]
}
 80138ec:	bf00      	nop
 80138ee:	3714      	adds	r7, #20
 80138f0:	46bd      	mov	sp, r7
 80138f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f6:	4770      	bx	lr
 80138f8:	20001798 	.word	0x20001798
 80138fc:	20001784 	.word	0x20001784
 8013900:	20001778 	.word	0x20001778
 8013904:	200012a0 	.word	0x200012a0
 8013908:	2000129c 	.word	0x2000129c
 801390c:	2000013c 	.word	0x2000013c

08013910 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b084      	sub	sp, #16
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d10a      	bne.n	8013936 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013924:	f383 8811 	msr	BASEPRI, r3
 8013928:	f3bf 8f6f 	isb	sy
 801392c:	f3bf 8f4f 	dsb	sy
 8013930:	60fb      	str	r3, [r7, #12]
}
 8013932:	bf00      	nop
 8013934:	e7fe      	b.n	8013934 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013936:	4b07      	ldr	r3, [pc, #28]	; (8013954 <vTaskPlaceOnEventList+0x44>)
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	3318      	adds	r3, #24
 801393c:	4619      	mov	r1, r3
 801393e:	6878      	ldr	r0, [r7, #4]
 8013940:	f7fe fb3f 	bl	8011fc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013944:	2101      	movs	r1, #1
 8013946:	6838      	ldr	r0, [r7, #0]
 8013948:	f000 fc34 	bl	80141b4 <prvAddCurrentTaskToDelayedList>
}
 801394c:	bf00      	nop
 801394e:	3710      	adds	r7, #16
 8013950:	46bd      	mov	sp, r7
 8013952:	bd80      	pop	{r7, pc}
 8013954:	2000129c 	.word	0x2000129c

08013958 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b086      	sub	sp, #24
 801395c:	af00      	add	r7, sp, #0
 801395e:	60f8      	str	r0, [r7, #12]
 8013960:	60b9      	str	r1, [r7, #8]
 8013962:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d10a      	bne.n	8013980 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801396a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801396e:	f383 8811 	msr	BASEPRI, r3
 8013972:	f3bf 8f6f 	isb	sy
 8013976:	f3bf 8f4f 	dsb	sy
 801397a:	617b      	str	r3, [r7, #20]
}
 801397c:	bf00      	nop
 801397e:	e7fe      	b.n	801397e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8013980:	4b11      	ldr	r3, [pc, #68]	; (80139c8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d10a      	bne.n	801399e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8013988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801398c:	f383 8811 	msr	BASEPRI, r3
 8013990:	f3bf 8f6f 	isb	sy
 8013994:	f3bf 8f4f 	dsb	sy
 8013998:	613b      	str	r3, [r7, #16]
}
 801399a:	bf00      	nop
 801399c:	e7fe      	b.n	801399c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801399e:	4b0b      	ldr	r3, [pc, #44]	; (80139cc <vTaskPlaceOnUnorderedEventList+0x74>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	68ba      	ldr	r2, [r7, #8]
 80139a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80139a8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80139aa:	4b08      	ldr	r3, [pc, #32]	; (80139cc <vTaskPlaceOnUnorderedEventList+0x74>)
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	3318      	adds	r3, #24
 80139b0:	4619      	mov	r1, r3
 80139b2:	68f8      	ldr	r0, [r7, #12]
 80139b4:	f7fe fae1 	bl	8011f7a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80139b8:	2101      	movs	r1, #1
 80139ba:	6878      	ldr	r0, [r7, #4]
 80139bc:	f000 fbfa 	bl	80141b4 <prvAddCurrentTaskToDelayedList>
}
 80139c0:	bf00      	nop
 80139c2:	3718      	adds	r7, #24
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}
 80139c8:	20001798 	.word	0x20001798
 80139cc:	2000129c 	.word	0x2000129c

080139d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b086      	sub	sp, #24
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	60f8      	str	r0, [r7, #12]
 80139d8:	60b9      	str	r1, [r7, #8]
 80139da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d10a      	bne.n	80139f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80139e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139e6:	f383 8811 	msr	BASEPRI, r3
 80139ea:	f3bf 8f6f 	isb	sy
 80139ee:	f3bf 8f4f 	dsb	sy
 80139f2:	617b      	str	r3, [r7, #20]
}
 80139f4:	bf00      	nop
 80139f6:	e7fe      	b.n	80139f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80139f8:	4b0a      	ldr	r3, [pc, #40]	; (8013a24 <vTaskPlaceOnEventListRestricted+0x54>)
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	3318      	adds	r3, #24
 80139fe:	4619      	mov	r1, r3
 8013a00:	68f8      	ldr	r0, [r7, #12]
 8013a02:	f7fe faba 	bl	8011f7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d002      	beq.n	8013a12 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8013a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8013a10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013a12:	6879      	ldr	r1, [r7, #4]
 8013a14:	68b8      	ldr	r0, [r7, #8]
 8013a16:	f000 fbcd 	bl	80141b4 <prvAddCurrentTaskToDelayedList>
	}
 8013a1a:	bf00      	nop
 8013a1c:	3718      	adds	r7, #24
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	bd80      	pop	{r7, pc}
 8013a22:	bf00      	nop
 8013a24:	2000129c 	.word	0x2000129c

08013a28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b086      	sub	sp, #24
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	68db      	ldr	r3, [r3, #12]
 8013a34:	68db      	ldr	r3, [r3, #12]
 8013a36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013a38:	693b      	ldr	r3, [r7, #16]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d10a      	bne.n	8013a54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8013a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a42:	f383 8811 	msr	BASEPRI, r3
 8013a46:	f3bf 8f6f 	isb	sy
 8013a4a:	f3bf 8f4f 	dsb	sy
 8013a4e:	60fb      	str	r3, [r7, #12]
}
 8013a50:	bf00      	nop
 8013a52:	e7fe      	b.n	8013a52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013a54:	693b      	ldr	r3, [r7, #16]
 8013a56:	3318      	adds	r3, #24
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f7fe faeb 	bl	8012034 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013a5e:	4b1e      	ldr	r3, [pc, #120]	; (8013ad8 <xTaskRemoveFromEventList+0xb0>)
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d11d      	bne.n	8013aa2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013a66:	693b      	ldr	r3, [r7, #16]
 8013a68:	3304      	adds	r3, #4
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	f7fe fae2 	bl	8012034 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013a70:	693b      	ldr	r3, [r7, #16]
 8013a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a74:	4b19      	ldr	r3, [pc, #100]	; (8013adc <xTaskRemoveFromEventList+0xb4>)
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	429a      	cmp	r2, r3
 8013a7a:	d903      	bls.n	8013a84 <xTaskRemoveFromEventList+0x5c>
 8013a7c:	693b      	ldr	r3, [r7, #16]
 8013a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a80:	4a16      	ldr	r2, [pc, #88]	; (8013adc <xTaskRemoveFromEventList+0xb4>)
 8013a82:	6013      	str	r3, [r2, #0]
 8013a84:	693b      	ldr	r3, [r7, #16]
 8013a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a88:	4613      	mov	r3, r2
 8013a8a:	009b      	lsls	r3, r3, #2
 8013a8c:	4413      	add	r3, r2
 8013a8e:	009b      	lsls	r3, r3, #2
 8013a90:	4a13      	ldr	r2, [pc, #76]	; (8013ae0 <xTaskRemoveFromEventList+0xb8>)
 8013a92:	441a      	add	r2, r3
 8013a94:	693b      	ldr	r3, [r7, #16]
 8013a96:	3304      	adds	r3, #4
 8013a98:	4619      	mov	r1, r3
 8013a9a:	4610      	mov	r0, r2
 8013a9c:	f7fe fa6d 	bl	8011f7a <vListInsertEnd>
 8013aa0:	e005      	b.n	8013aae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013aa2:	693b      	ldr	r3, [r7, #16]
 8013aa4:	3318      	adds	r3, #24
 8013aa6:	4619      	mov	r1, r3
 8013aa8:	480e      	ldr	r0, [pc, #56]	; (8013ae4 <xTaskRemoveFromEventList+0xbc>)
 8013aaa:	f7fe fa66 	bl	8011f7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013aae:	693b      	ldr	r3, [r7, #16]
 8013ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ab2:	4b0d      	ldr	r3, [pc, #52]	; (8013ae8 <xTaskRemoveFromEventList+0xc0>)
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ab8:	429a      	cmp	r2, r3
 8013aba:	d905      	bls.n	8013ac8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013abc:	2301      	movs	r3, #1
 8013abe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013ac0:	4b0a      	ldr	r3, [pc, #40]	; (8013aec <xTaskRemoveFromEventList+0xc4>)
 8013ac2:	2201      	movs	r2, #1
 8013ac4:	601a      	str	r2, [r3, #0]
 8013ac6:	e001      	b.n	8013acc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013ac8:	2300      	movs	r3, #0
 8013aca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013acc:	697b      	ldr	r3, [r7, #20]
}
 8013ace:	4618      	mov	r0, r3
 8013ad0:	3718      	adds	r7, #24
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	bd80      	pop	{r7, pc}
 8013ad6:	bf00      	nop
 8013ad8:	20001798 	.word	0x20001798
 8013adc:	20001778 	.word	0x20001778
 8013ae0:	200012a0 	.word	0x200012a0
 8013ae4:	20001730 	.word	0x20001730
 8013ae8:	2000129c 	.word	0x2000129c
 8013aec:	20001784 	.word	0x20001784

08013af0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b086      	sub	sp, #24
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8013afa:	4b29      	ldr	r3, [pc, #164]	; (8013ba0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d10a      	bne.n	8013b18 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8013b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b06:	f383 8811 	msr	BASEPRI, r3
 8013b0a:	f3bf 8f6f 	isb	sy
 8013b0e:	f3bf 8f4f 	dsb	sy
 8013b12:	613b      	str	r3, [r7, #16]
}
 8013b14:	bf00      	nop
 8013b16:	e7fe      	b.n	8013b16 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8013b18:	683b      	ldr	r3, [r7, #0]
 8013b1a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	68db      	ldr	r3, [r3, #12]
 8013b26:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8013b28:	697b      	ldr	r3, [r7, #20]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d10a      	bne.n	8013b44 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8013b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b32:	f383 8811 	msr	BASEPRI, r3
 8013b36:	f3bf 8f6f 	isb	sy
 8013b3a:	f3bf 8f4f 	dsb	sy
 8013b3e:	60fb      	str	r3, [r7, #12]
}
 8013b40:	bf00      	nop
 8013b42:	e7fe      	b.n	8013b42 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8013b44:	6878      	ldr	r0, [r7, #4]
 8013b46:	f7fe fa75 	bl	8012034 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013b4a:	697b      	ldr	r3, [r7, #20]
 8013b4c:	3304      	adds	r3, #4
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f7fe fa70 	bl	8012034 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8013b54:	697b      	ldr	r3, [r7, #20]
 8013b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b58:	4b12      	ldr	r3, [pc, #72]	; (8013ba4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	429a      	cmp	r2, r3
 8013b5e:	d903      	bls.n	8013b68 <vTaskRemoveFromUnorderedEventList+0x78>
 8013b60:	697b      	ldr	r3, [r7, #20]
 8013b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b64:	4a0f      	ldr	r2, [pc, #60]	; (8013ba4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8013b66:	6013      	str	r3, [r2, #0]
 8013b68:	697b      	ldr	r3, [r7, #20]
 8013b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b6c:	4613      	mov	r3, r2
 8013b6e:	009b      	lsls	r3, r3, #2
 8013b70:	4413      	add	r3, r2
 8013b72:	009b      	lsls	r3, r3, #2
 8013b74:	4a0c      	ldr	r2, [pc, #48]	; (8013ba8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8013b76:	441a      	add	r2, r3
 8013b78:	697b      	ldr	r3, [r7, #20]
 8013b7a:	3304      	adds	r3, #4
 8013b7c:	4619      	mov	r1, r3
 8013b7e:	4610      	mov	r0, r2
 8013b80:	f7fe f9fb 	bl	8011f7a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013b84:	697b      	ldr	r3, [r7, #20]
 8013b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b88:	4b08      	ldr	r3, [pc, #32]	; (8013bac <vTaskRemoveFromUnorderedEventList+0xbc>)
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b8e:	429a      	cmp	r2, r3
 8013b90:	d902      	bls.n	8013b98 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8013b92:	4b07      	ldr	r3, [pc, #28]	; (8013bb0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8013b94:	2201      	movs	r2, #1
 8013b96:	601a      	str	r2, [r3, #0]
	}
}
 8013b98:	bf00      	nop
 8013b9a:	3718      	adds	r7, #24
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	bd80      	pop	{r7, pc}
 8013ba0:	20001798 	.word	0x20001798
 8013ba4:	20001778 	.word	0x20001778
 8013ba8:	200012a0 	.word	0x200012a0
 8013bac:	2000129c 	.word	0x2000129c
 8013bb0:	20001784 	.word	0x20001784

08013bb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013bb4:	b480      	push	{r7}
 8013bb6:	b083      	sub	sp, #12
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013bbc:	4b06      	ldr	r3, [pc, #24]	; (8013bd8 <vTaskInternalSetTimeOutState+0x24>)
 8013bbe:	681a      	ldr	r2, [r3, #0]
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013bc4:	4b05      	ldr	r3, [pc, #20]	; (8013bdc <vTaskInternalSetTimeOutState+0x28>)
 8013bc6:	681a      	ldr	r2, [r3, #0]
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	605a      	str	r2, [r3, #4]
}
 8013bcc:	bf00      	nop
 8013bce:	370c      	adds	r7, #12
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd6:	4770      	bx	lr
 8013bd8:	20001788 	.word	0x20001788
 8013bdc:	20001774 	.word	0x20001774

08013be0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b088      	sub	sp, #32
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
 8013be8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d10a      	bne.n	8013c06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bf4:	f383 8811 	msr	BASEPRI, r3
 8013bf8:	f3bf 8f6f 	isb	sy
 8013bfc:	f3bf 8f4f 	dsb	sy
 8013c00:	613b      	str	r3, [r7, #16]
}
 8013c02:	bf00      	nop
 8013c04:	e7fe      	b.n	8013c04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013c06:	683b      	ldr	r3, [r7, #0]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d10a      	bne.n	8013c22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c10:	f383 8811 	msr	BASEPRI, r3
 8013c14:	f3bf 8f6f 	isb	sy
 8013c18:	f3bf 8f4f 	dsb	sy
 8013c1c:	60fb      	str	r3, [r7, #12]
}
 8013c1e:	bf00      	nop
 8013c20:	e7fe      	b.n	8013c20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8013c22:	f001 f86f 	bl	8014d04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013c26:	4b1d      	ldr	r3, [pc, #116]	; (8013c9c <xTaskCheckForTimeOut+0xbc>)
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	685b      	ldr	r3, [r3, #4]
 8013c30:	69ba      	ldr	r2, [r7, #24]
 8013c32:	1ad3      	subs	r3, r2, r3
 8013c34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013c36:	683b      	ldr	r3, [r7, #0]
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c3e:	d102      	bne.n	8013c46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013c40:	2300      	movs	r3, #0
 8013c42:	61fb      	str	r3, [r7, #28]
 8013c44:	e023      	b.n	8013c8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	681a      	ldr	r2, [r3, #0]
 8013c4a:	4b15      	ldr	r3, [pc, #84]	; (8013ca0 <xTaskCheckForTimeOut+0xc0>)
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	429a      	cmp	r2, r3
 8013c50:	d007      	beq.n	8013c62 <xTaskCheckForTimeOut+0x82>
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	685b      	ldr	r3, [r3, #4]
 8013c56:	69ba      	ldr	r2, [r7, #24]
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	d302      	bcc.n	8013c62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013c5c:	2301      	movs	r3, #1
 8013c5e:	61fb      	str	r3, [r7, #28]
 8013c60:	e015      	b.n	8013c8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013c62:	683b      	ldr	r3, [r7, #0]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	697a      	ldr	r2, [r7, #20]
 8013c68:	429a      	cmp	r2, r3
 8013c6a:	d20b      	bcs.n	8013c84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013c6c:	683b      	ldr	r3, [r7, #0]
 8013c6e:	681a      	ldr	r2, [r3, #0]
 8013c70:	697b      	ldr	r3, [r7, #20]
 8013c72:	1ad2      	subs	r2, r2, r3
 8013c74:	683b      	ldr	r3, [r7, #0]
 8013c76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013c78:	6878      	ldr	r0, [r7, #4]
 8013c7a:	f7ff ff9b 	bl	8013bb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013c7e:	2300      	movs	r3, #0
 8013c80:	61fb      	str	r3, [r7, #28]
 8013c82:	e004      	b.n	8013c8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	2200      	movs	r2, #0
 8013c88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013c8a:	2301      	movs	r3, #1
 8013c8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013c8e:	f001 f869 	bl	8014d64 <vPortExitCritical>

	return xReturn;
 8013c92:	69fb      	ldr	r3, [r7, #28]
}
 8013c94:	4618      	mov	r0, r3
 8013c96:	3720      	adds	r7, #32
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	bd80      	pop	{r7, pc}
 8013c9c:	20001774 	.word	0x20001774
 8013ca0:	20001788 	.word	0x20001788

08013ca4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013ca4:	b480      	push	{r7}
 8013ca6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013ca8:	4b03      	ldr	r3, [pc, #12]	; (8013cb8 <vTaskMissedYield+0x14>)
 8013caa:	2201      	movs	r2, #1
 8013cac:	601a      	str	r2, [r3, #0]
}
 8013cae:	bf00      	nop
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb6:	4770      	bx	lr
 8013cb8:	20001784 	.word	0x20001784

08013cbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	b082      	sub	sp, #8
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013cc4:	f000 f852 	bl	8013d6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013cc8:	4b06      	ldr	r3, [pc, #24]	; (8013ce4 <prvIdleTask+0x28>)
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	2b01      	cmp	r3, #1
 8013cce:	d9f9      	bls.n	8013cc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013cd0:	4b05      	ldr	r3, [pc, #20]	; (8013ce8 <prvIdleTask+0x2c>)
 8013cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cd6:	601a      	str	r2, [r3, #0]
 8013cd8:	f3bf 8f4f 	dsb	sy
 8013cdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013ce0:	e7f0      	b.n	8013cc4 <prvIdleTask+0x8>
 8013ce2:	bf00      	nop
 8013ce4:	200012a0 	.word	0x200012a0
 8013ce8:	e000ed04 	.word	0xe000ed04

08013cec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b082      	sub	sp, #8
 8013cf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	607b      	str	r3, [r7, #4]
 8013cf6:	e00c      	b.n	8013d12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013cf8:	687a      	ldr	r2, [r7, #4]
 8013cfa:	4613      	mov	r3, r2
 8013cfc:	009b      	lsls	r3, r3, #2
 8013cfe:	4413      	add	r3, r2
 8013d00:	009b      	lsls	r3, r3, #2
 8013d02:	4a12      	ldr	r2, [pc, #72]	; (8013d4c <prvInitialiseTaskLists+0x60>)
 8013d04:	4413      	add	r3, r2
 8013d06:	4618      	mov	r0, r3
 8013d08:	f7fe f90a 	bl	8011f20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	3301      	adds	r3, #1
 8013d10:	607b      	str	r3, [r7, #4]
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2b37      	cmp	r3, #55	; 0x37
 8013d16:	d9ef      	bls.n	8013cf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013d18:	480d      	ldr	r0, [pc, #52]	; (8013d50 <prvInitialiseTaskLists+0x64>)
 8013d1a:	f7fe f901 	bl	8011f20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013d1e:	480d      	ldr	r0, [pc, #52]	; (8013d54 <prvInitialiseTaskLists+0x68>)
 8013d20:	f7fe f8fe 	bl	8011f20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013d24:	480c      	ldr	r0, [pc, #48]	; (8013d58 <prvInitialiseTaskLists+0x6c>)
 8013d26:	f7fe f8fb 	bl	8011f20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013d2a:	480c      	ldr	r0, [pc, #48]	; (8013d5c <prvInitialiseTaskLists+0x70>)
 8013d2c:	f7fe f8f8 	bl	8011f20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013d30:	480b      	ldr	r0, [pc, #44]	; (8013d60 <prvInitialiseTaskLists+0x74>)
 8013d32:	f7fe f8f5 	bl	8011f20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013d36:	4b0b      	ldr	r3, [pc, #44]	; (8013d64 <prvInitialiseTaskLists+0x78>)
 8013d38:	4a05      	ldr	r2, [pc, #20]	; (8013d50 <prvInitialiseTaskLists+0x64>)
 8013d3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013d3c:	4b0a      	ldr	r3, [pc, #40]	; (8013d68 <prvInitialiseTaskLists+0x7c>)
 8013d3e:	4a05      	ldr	r2, [pc, #20]	; (8013d54 <prvInitialiseTaskLists+0x68>)
 8013d40:	601a      	str	r2, [r3, #0]
}
 8013d42:	bf00      	nop
 8013d44:	3708      	adds	r7, #8
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bd80      	pop	{r7, pc}
 8013d4a:	bf00      	nop
 8013d4c:	200012a0 	.word	0x200012a0
 8013d50:	20001700 	.word	0x20001700
 8013d54:	20001714 	.word	0x20001714
 8013d58:	20001730 	.word	0x20001730
 8013d5c:	20001744 	.word	0x20001744
 8013d60:	2000175c 	.word	0x2000175c
 8013d64:	20001728 	.word	0x20001728
 8013d68:	2000172c 	.word	0x2000172c

08013d6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b082      	sub	sp, #8
 8013d70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013d72:	e019      	b.n	8013da8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013d74:	f000 ffc6 	bl	8014d04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d78:	4b10      	ldr	r3, [pc, #64]	; (8013dbc <prvCheckTasksWaitingTermination+0x50>)
 8013d7a:	68db      	ldr	r3, [r3, #12]
 8013d7c:	68db      	ldr	r3, [r3, #12]
 8013d7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	3304      	adds	r3, #4
 8013d84:	4618      	mov	r0, r3
 8013d86:	f7fe f955 	bl	8012034 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013d8a:	4b0d      	ldr	r3, [pc, #52]	; (8013dc0 <prvCheckTasksWaitingTermination+0x54>)
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	3b01      	subs	r3, #1
 8013d90:	4a0b      	ldr	r2, [pc, #44]	; (8013dc0 <prvCheckTasksWaitingTermination+0x54>)
 8013d92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013d94:	4b0b      	ldr	r3, [pc, #44]	; (8013dc4 <prvCheckTasksWaitingTermination+0x58>)
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	3b01      	subs	r3, #1
 8013d9a:	4a0a      	ldr	r2, [pc, #40]	; (8013dc4 <prvCheckTasksWaitingTermination+0x58>)
 8013d9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013d9e:	f000 ffe1 	bl	8014d64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013da2:	6878      	ldr	r0, [r7, #4]
 8013da4:	f000 f810 	bl	8013dc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013da8:	4b06      	ldr	r3, [pc, #24]	; (8013dc4 <prvCheckTasksWaitingTermination+0x58>)
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d1e1      	bne.n	8013d74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013db0:	bf00      	nop
 8013db2:	bf00      	nop
 8013db4:	3708      	adds	r7, #8
 8013db6:	46bd      	mov	sp, r7
 8013db8:	bd80      	pop	{r7, pc}
 8013dba:	bf00      	nop
 8013dbc:	20001744 	.word	0x20001744
 8013dc0:	20001770 	.word	0x20001770
 8013dc4:	20001758 	.word	0x20001758

08013dc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b084      	sub	sp, #16
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	3354      	adds	r3, #84	; 0x54
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	f002 ff87 	bl	8016ce8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d108      	bne.n	8013df6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013de8:	4618      	mov	r0, r3
 8013dea:	f001 f979 	bl	80150e0 <vPortFree>
				vPortFree( pxTCB );
 8013dee:	6878      	ldr	r0, [r7, #4]
 8013df0:	f001 f976 	bl	80150e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013df4:	e018      	b.n	8013e28 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8013dfc:	2b01      	cmp	r3, #1
 8013dfe:	d103      	bne.n	8013e08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013e00:	6878      	ldr	r0, [r7, #4]
 8013e02:	f001 f96d 	bl	80150e0 <vPortFree>
	}
 8013e06:	e00f      	b.n	8013e28 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8013e0e:	2b02      	cmp	r3, #2
 8013e10:	d00a      	beq.n	8013e28 <prvDeleteTCB+0x60>
	__asm volatile
 8013e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e16:	f383 8811 	msr	BASEPRI, r3
 8013e1a:	f3bf 8f6f 	isb	sy
 8013e1e:	f3bf 8f4f 	dsb	sy
 8013e22:	60fb      	str	r3, [r7, #12]
}
 8013e24:	bf00      	nop
 8013e26:	e7fe      	b.n	8013e26 <prvDeleteTCB+0x5e>
	}
 8013e28:	bf00      	nop
 8013e2a:	3710      	adds	r7, #16
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}

08013e30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013e30:	b480      	push	{r7}
 8013e32:	b083      	sub	sp, #12
 8013e34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013e36:	4b0c      	ldr	r3, [pc, #48]	; (8013e68 <prvResetNextTaskUnblockTime+0x38>)
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d104      	bne.n	8013e4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013e40:	4b0a      	ldr	r3, [pc, #40]	; (8013e6c <prvResetNextTaskUnblockTime+0x3c>)
 8013e42:	f04f 32ff 	mov.w	r2, #4294967295
 8013e46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013e48:	e008      	b.n	8013e5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e4a:	4b07      	ldr	r3, [pc, #28]	; (8013e68 <prvResetNextTaskUnblockTime+0x38>)
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	68db      	ldr	r3, [r3, #12]
 8013e50:	68db      	ldr	r3, [r3, #12]
 8013e52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	685b      	ldr	r3, [r3, #4]
 8013e58:	4a04      	ldr	r2, [pc, #16]	; (8013e6c <prvResetNextTaskUnblockTime+0x3c>)
 8013e5a:	6013      	str	r3, [r2, #0]
}
 8013e5c:	bf00      	nop
 8013e5e:	370c      	adds	r7, #12
 8013e60:	46bd      	mov	sp, r7
 8013e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e66:	4770      	bx	lr
 8013e68:	20001728 	.word	0x20001728
 8013e6c:	20001790 	.word	0x20001790

08013e70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013e70:	b480      	push	{r7}
 8013e72:	b083      	sub	sp, #12
 8013e74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013e76:	4b0b      	ldr	r3, [pc, #44]	; (8013ea4 <xTaskGetSchedulerState+0x34>)
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d102      	bne.n	8013e84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013e7e:	2301      	movs	r3, #1
 8013e80:	607b      	str	r3, [r7, #4]
 8013e82:	e008      	b.n	8013e96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013e84:	4b08      	ldr	r3, [pc, #32]	; (8013ea8 <xTaskGetSchedulerState+0x38>)
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d102      	bne.n	8013e92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013e8c:	2302      	movs	r3, #2
 8013e8e:	607b      	str	r3, [r7, #4]
 8013e90:	e001      	b.n	8013e96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013e92:	2300      	movs	r3, #0
 8013e94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013e96:	687b      	ldr	r3, [r7, #4]
	}
 8013e98:	4618      	mov	r0, r3
 8013e9a:	370c      	adds	r7, #12
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea2:	4770      	bx	lr
 8013ea4:	2000177c 	.word	0x2000177c
 8013ea8:	20001798 	.word	0x20001798

08013eac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b084      	sub	sp, #16
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013eb8:	2300      	movs	r3, #0
 8013eba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d051      	beq.n	8013f66 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013ec2:	68bb      	ldr	r3, [r7, #8]
 8013ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ec6:	4b2a      	ldr	r3, [pc, #168]	; (8013f70 <xTaskPriorityInherit+0xc4>)
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ecc:	429a      	cmp	r2, r3
 8013ece:	d241      	bcs.n	8013f54 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013ed0:	68bb      	ldr	r3, [r7, #8]
 8013ed2:	699b      	ldr	r3, [r3, #24]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	db06      	blt.n	8013ee6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013ed8:	4b25      	ldr	r3, [pc, #148]	; (8013f70 <xTaskPriorityInherit+0xc4>)
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ede:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013ee2:	68bb      	ldr	r3, [r7, #8]
 8013ee4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013ee6:	68bb      	ldr	r3, [r7, #8]
 8013ee8:	6959      	ldr	r1, [r3, #20]
 8013eea:	68bb      	ldr	r3, [r7, #8]
 8013eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013eee:	4613      	mov	r3, r2
 8013ef0:	009b      	lsls	r3, r3, #2
 8013ef2:	4413      	add	r3, r2
 8013ef4:	009b      	lsls	r3, r3, #2
 8013ef6:	4a1f      	ldr	r2, [pc, #124]	; (8013f74 <xTaskPriorityInherit+0xc8>)
 8013ef8:	4413      	add	r3, r2
 8013efa:	4299      	cmp	r1, r3
 8013efc:	d122      	bne.n	8013f44 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013efe:	68bb      	ldr	r3, [r7, #8]
 8013f00:	3304      	adds	r3, #4
 8013f02:	4618      	mov	r0, r3
 8013f04:	f7fe f896 	bl	8012034 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013f08:	4b19      	ldr	r3, [pc, #100]	; (8013f70 <xTaskPriorityInherit+0xc4>)
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f0e:	68bb      	ldr	r3, [r7, #8]
 8013f10:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013f12:	68bb      	ldr	r3, [r7, #8]
 8013f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f16:	4b18      	ldr	r3, [pc, #96]	; (8013f78 <xTaskPriorityInherit+0xcc>)
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	429a      	cmp	r2, r3
 8013f1c:	d903      	bls.n	8013f26 <xTaskPriorityInherit+0x7a>
 8013f1e:	68bb      	ldr	r3, [r7, #8]
 8013f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f22:	4a15      	ldr	r2, [pc, #84]	; (8013f78 <xTaskPriorityInherit+0xcc>)
 8013f24:	6013      	str	r3, [r2, #0]
 8013f26:	68bb      	ldr	r3, [r7, #8]
 8013f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f2a:	4613      	mov	r3, r2
 8013f2c:	009b      	lsls	r3, r3, #2
 8013f2e:	4413      	add	r3, r2
 8013f30:	009b      	lsls	r3, r3, #2
 8013f32:	4a10      	ldr	r2, [pc, #64]	; (8013f74 <xTaskPriorityInherit+0xc8>)
 8013f34:	441a      	add	r2, r3
 8013f36:	68bb      	ldr	r3, [r7, #8]
 8013f38:	3304      	adds	r3, #4
 8013f3a:	4619      	mov	r1, r3
 8013f3c:	4610      	mov	r0, r2
 8013f3e:	f7fe f81c 	bl	8011f7a <vListInsertEnd>
 8013f42:	e004      	b.n	8013f4e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013f44:	4b0a      	ldr	r3, [pc, #40]	; (8013f70 <xTaskPriorityInherit+0xc4>)
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f4a:	68bb      	ldr	r3, [r7, #8]
 8013f4c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013f4e:	2301      	movs	r3, #1
 8013f50:	60fb      	str	r3, [r7, #12]
 8013f52:	e008      	b.n	8013f66 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013f54:	68bb      	ldr	r3, [r7, #8]
 8013f56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013f58:	4b05      	ldr	r3, [pc, #20]	; (8013f70 <xTaskPriorityInherit+0xc4>)
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f5e:	429a      	cmp	r2, r3
 8013f60:	d201      	bcs.n	8013f66 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013f62:	2301      	movs	r3, #1
 8013f64:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013f66:	68fb      	ldr	r3, [r7, #12]
	}
 8013f68:	4618      	mov	r0, r3
 8013f6a:	3710      	adds	r7, #16
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	bd80      	pop	{r7, pc}
 8013f70:	2000129c 	.word	0x2000129c
 8013f74:	200012a0 	.word	0x200012a0
 8013f78:	20001778 	.word	0x20001778

08013f7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b086      	sub	sp, #24
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013f88:	2300      	movs	r3, #0
 8013f8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d056      	beq.n	8014040 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013f92:	4b2e      	ldr	r3, [pc, #184]	; (801404c <xTaskPriorityDisinherit+0xd0>)
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	693a      	ldr	r2, [r7, #16]
 8013f98:	429a      	cmp	r2, r3
 8013f9a:	d00a      	beq.n	8013fb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8013f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fa0:	f383 8811 	msr	BASEPRI, r3
 8013fa4:	f3bf 8f6f 	isb	sy
 8013fa8:	f3bf 8f4f 	dsb	sy
 8013fac:	60fb      	str	r3, [r7, #12]
}
 8013fae:	bf00      	nop
 8013fb0:	e7fe      	b.n	8013fb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013fb2:	693b      	ldr	r3, [r7, #16]
 8013fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d10a      	bne.n	8013fd0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8013fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fbe:	f383 8811 	msr	BASEPRI, r3
 8013fc2:	f3bf 8f6f 	isb	sy
 8013fc6:	f3bf 8f4f 	dsb	sy
 8013fca:	60bb      	str	r3, [r7, #8]
}
 8013fcc:	bf00      	nop
 8013fce:	e7fe      	b.n	8013fce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013fd0:	693b      	ldr	r3, [r7, #16]
 8013fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013fd4:	1e5a      	subs	r2, r3, #1
 8013fd6:	693b      	ldr	r3, [r7, #16]
 8013fd8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013fda:	693b      	ldr	r3, [r7, #16]
 8013fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fde:	693b      	ldr	r3, [r7, #16]
 8013fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013fe2:	429a      	cmp	r2, r3
 8013fe4:	d02c      	beq.n	8014040 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013fe6:	693b      	ldr	r3, [r7, #16]
 8013fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d128      	bne.n	8014040 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013fee:	693b      	ldr	r3, [r7, #16]
 8013ff0:	3304      	adds	r3, #4
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f7fe f81e 	bl	8012034 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013ff8:	693b      	ldr	r3, [r7, #16]
 8013ffa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013ffc:	693b      	ldr	r3, [r7, #16]
 8013ffe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014000:	693b      	ldr	r3, [r7, #16]
 8014002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014004:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014008:	693b      	ldr	r3, [r7, #16]
 801400a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801400c:	693b      	ldr	r3, [r7, #16]
 801400e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014010:	4b0f      	ldr	r3, [pc, #60]	; (8014050 <xTaskPriorityDisinherit+0xd4>)
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	429a      	cmp	r2, r3
 8014016:	d903      	bls.n	8014020 <xTaskPriorityDisinherit+0xa4>
 8014018:	693b      	ldr	r3, [r7, #16]
 801401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801401c:	4a0c      	ldr	r2, [pc, #48]	; (8014050 <xTaskPriorityDisinherit+0xd4>)
 801401e:	6013      	str	r3, [r2, #0]
 8014020:	693b      	ldr	r3, [r7, #16]
 8014022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014024:	4613      	mov	r3, r2
 8014026:	009b      	lsls	r3, r3, #2
 8014028:	4413      	add	r3, r2
 801402a:	009b      	lsls	r3, r3, #2
 801402c:	4a09      	ldr	r2, [pc, #36]	; (8014054 <xTaskPriorityDisinherit+0xd8>)
 801402e:	441a      	add	r2, r3
 8014030:	693b      	ldr	r3, [r7, #16]
 8014032:	3304      	adds	r3, #4
 8014034:	4619      	mov	r1, r3
 8014036:	4610      	mov	r0, r2
 8014038:	f7fd ff9f 	bl	8011f7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801403c:	2301      	movs	r3, #1
 801403e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014040:	697b      	ldr	r3, [r7, #20]
	}
 8014042:	4618      	mov	r0, r3
 8014044:	3718      	adds	r7, #24
 8014046:	46bd      	mov	sp, r7
 8014048:	bd80      	pop	{r7, pc}
 801404a:	bf00      	nop
 801404c:	2000129c 	.word	0x2000129c
 8014050:	20001778 	.word	0x20001778
 8014054:	200012a0 	.word	0x200012a0

08014058 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014058:	b580      	push	{r7, lr}
 801405a:	b088      	sub	sp, #32
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
 8014060:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014066:	2301      	movs	r3, #1
 8014068:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d06a      	beq.n	8014146 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014070:	69bb      	ldr	r3, [r7, #24]
 8014072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014074:	2b00      	cmp	r3, #0
 8014076:	d10a      	bne.n	801408e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8014078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801407c:	f383 8811 	msr	BASEPRI, r3
 8014080:	f3bf 8f6f 	isb	sy
 8014084:	f3bf 8f4f 	dsb	sy
 8014088:	60fb      	str	r3, [r7, #12]
}
 801408a:	bf00      	nop
 801408c:	e7fe      	b.n	801408c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801408e:	69bb      	ldr	r3, [r7, #24]
 8014090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014092:	683a      	ldr	r2, [r7, #0]
 8014094:	429a      	cmp	r2, r3
 8014096:	d902      	bls.n	801409e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014098:	683b      	ldr	r3, [r7, #0]
 801409a:	61fb      	str	r3, [r7, #28]
 801409c:	e002      	b.n	80140a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801409e:	69bb      	ldr	r3, [r7, #24]
 80140a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80140a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80140a4:	69bb      	ldr	r3, [r7, #24]
 80140a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140a8:	69fa      	ldr	r2, [r7, #28]
 80140aa:	429a      	cmp	r2, r3
 80140ac:	d04b      	beq.n	8014146 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80140ae:	69bb      	ldr	r3, [r7, #24]
 80140b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80140b2:	697a      	ldr	r2, [r7, #20]
 80140b4:	429a      	cmp	r2, r3
 80140b6:	d146      	bne.n	8014146 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80140b8:	4b25      	ldr	r3, [pc, #148]	; (8014150 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	69ba      	ldr	r2, [r7, #24]
 80140be:	429a      	cmp	r2, r3
 80140c0:	d10a      	bne.n	80140d8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80140c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140c6:	f383 8811 	msr	BASEPRI, r3
 80140ca:	f3bf 8f6f 	isb	sy
 80140ce:	f3bf 8f4f 	dsb	sy
 80140d2:	60bb      	str	r3, [r7, #8]
}
 80140d4:	bf00      	nop
 80140d6:	e7fe      	b.n	80140d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80140d8:	69bb      	ldr	r3, [r7, #24]
 80140da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80140de:	69bb      	ldr	r3, [r7, #24]
 80140e0:	69fa      	ldr	r2, [r7, #28]
 80140e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80140e4:	69bb      	ldr	r3, [r7, #24]
 80140e6:	699b      	ldr	r3, [r3, #24]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	db04      	blt.n	80140f6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80140ec:	69fb      	ldr	r3, [r7, #28]
 80140ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80140f2:	69bb      	ldr	r3, [r7, #24]
 80140f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80140f6:	69bb      	ldr	r3, [r7, #24]
 80140f8:	6959      	ldr	r1, [r3, #20]
 80140fa:	693a      	ldr	r2, [r7, #16]
 80140fc:	4613      	mov	r3, r2
 80140fe:	009b      	lsls	r3, r3, #2
 8014100:	4413      	add	r3, r2
 8014102:	009b      	lsls	r3, r3, #2
 8014104:	4a13      	ldr	r2, [pc, #76]	; (8014154 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014106:	4413      	add	r3, r2
 8014108:	4299      	cmp	r1, r3
 801410a:	d11c      	bne.n	8014146 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801410c:	69bb      	ldr	r3, [r7, #24]
 801410e:	3304      	adds	r3, #4
 8014110:	4618      	mov	r0, r3
 8014112:	f7fd ff8f 	bl	8012034 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014116:	69bb      	ldr	r3, [r7, #24]
 8014118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801411a:	4b0f      	ldr	r3, [pc, #60]	; (8014158 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	429a      	cmp	r2, r3
 8014120:	d903      	bls.n	801412a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8014122:	69bb      	ldr	r3, [r7, #24]
 8014124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014126:	4a0c      	ldr	r2, [pc, #48]	; (8014158 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014128:	6013      	str	r3, [r2, #0]
 801412a:	69bb      	ldr	r3, [r7, #24]
 801412c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801412e:	4613      	mov	r3, r2
 8014130:	009b      	lsls	r3, r3, #2
 8014132:	4413      	add	r3, r2
 8014134:	009b      	lsls	r3, r3, #2
 8014136:	4a07      	ldr	r2, [pc, #28]	; (8014154 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014138:	441a      	add	r2, r3
 801413a:	69bb      	ldr	r3, [r7, #24]
 801413c:	3304      	adds	r3, #4
 801413e:	4619      	mov	r1, r3
 8014140:	4610      	mov	r0, r2
 8014142:	f7fd ff1a 	bl	8011f7a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014146:	bf00      	nop
 8014148:	3720      	adds	r7, #32
 801414a:	46bd      	mov	sp, r7
 801414c:	bd80      	pop	{r7, pc}
 801414e:	bf00      	nop
 8014150:	2000129c 	.word	0x2000129c
 8014154:	200012a0 	.word	0x200012a0
 8014158:	20001778 	.word	0x20001778

0801415c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 801415c:	b480      	push	{r7}
 801415e:	b083      	sub	sp, #12
 8014160:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8014162:	4b09      	ldr	r3, [pc, #36]	; (8014188 <uxTaskResetEventItemValue+0x2c>)
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	699b      	ldr	r3, [r3, #24]
 8014168:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801416a:	4b07      	ldr	r3, [pc, #28]	; (8014188 <uxTaskResetEventItemValue+0x2c>)
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014170:	4b05      	ldr	r3, [pc, #20]	; (8014188 <uxTaskResetEventItemValue+0x2c>)
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8014178:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801417a:	687b      	ldr	r3, [r7, #4]
}
 801417c:	4618      	mov	r0, r3
 801417e:	370c      	adds	r7, #12
 8014180:	46bd      	mov	sp, r7
 8014182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014186:	4770      	bx	lr
 8014188:	2000129c 	.word	0x2000129c

0801418c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801418c:	b480      	push	{r7}
 801418e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014190:	4b07      	ldr	r3, [pc, #28]	; (80141b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d004      	beq.n	80141a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014198:	4b05      	ldr	r3, [pc, #20]	; (80141b0 <pvTaskIncrementMutexHeldCount+0x24>)
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801419e:	3201      	adds	r2, #1
 80141a0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80141a2:	4b03      	ldr	r3, [pc, #12]	; (80141b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80141a4:	681b      	ldr	r3, [r3, #0]
	}
 80141a6:	4618      	mov	r0, r3
 80141a8:	46bd      	mov	sp, r7
 80141aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ae:	4770      	bx	lr
 80141b0:	2000129c 	.word	0x2000129c

080141b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80141b4:	b580      	push	{r7, lr}
 80141b6:	b084      	sub	sp, #16
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
 80141bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80141be:	4b21      	ldr	r3, [pc, #132]	; (8014244 <prvAddCurrentTaskToDelayedList+0x90>)
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80141c4:	4b20      	ldr	r3, [pc, #128]	; (8014248 <prvAddCurrentTaskToDelayedList+0x94>)
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	3304      	adds	r3, #4
 80141ca:	4618      	mov	r0, r3
 80141cc:	f7fd ff32 	bl	8012034 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141d6:	d10a      	bne.n	80141ee <prvAddCurrentTaskToDelayedList+0x3a>
 80141d8:	683b      	ldr	r3, [r7, #0]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d007      	beq.n	80141ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80141de:	4b1a      	ldr	r3, [pc, #104]	; (8014248 <prvAddCurrentTaskToDelayedList+0x94>)
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	3304      	adds	r3, #4
 80141e4:	4619      	mov	r1, r3
 80141e6:	4819      	ldr	r0, [pc, #100]	; (801424c <prvAddCurrentTaskToDelayedList+0x98>)
 80141e8:	f7fd fec7 	bl	8011f7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80141ec:	e026      	b.n	801423c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80141ee:	68fa      	ldr	r2, [r7, #12]
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	4413      	add	r3, r2
 80141f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80141f6:	4b14      	ldr	r3, [pc, #80]	; (8014248 <prvAddCurrentTaskToDelayedList+0x94>)
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	68ba      	ldr	r2, [r7, #8]
 80141fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80141fe:	68ba      	ldr	r2, [r7, #8]
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	429a      	cmp	r2, r3
 8014204:	d209      	bcs.n	801421a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014206:	4b12      	ldr	r3, [pc, #72]	; (8014250 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014208:	681a      	ldr	r2, [r3, #0]
 801420a:	4b0f      	ldr	r3, [pc, #60]	; (8014248 <prvAddCurrentTaskToDelayedList+0x94>)
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	3304      	adds	r3, #4
 8014210:	4619      	mov	r1, r3
 8014212:	4610      	mov	r0, r2
 8014214:	f7fd fed5 	bl	8011fc2 <vListInsert>
}
 8014218:	e010      	b.n	801423c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801421a:	4b0e      	ldr	r3, [pc, #56]	; (8014254 <prvAddCurrentTaskToDelayedList+0xa0>)
 801421c:	681a      	ldr	r2, [r3, #0]
 801421e:	4b0a      	ldr	r3, [pc, #40]	; (8014248 <prvAddCurrentTaskToDelayedList+0x94>)
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	3304      	adds	r3, #4
 8014224:	4619      	mov	r1, r3
 8014226:	4610      	mov	r0, r2
 8014228:	f7fd fecb 	bl	8011fc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801422c:	4b0a      	ldr	r3, [pc, #40]	; (8014258 <prvAddCurrentTaskToDelayedList+0xa4>)
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	68ba      	ldr	r2, [r7, #8]
 8014232:	429a      	cmp	r2, r3
 8014234:	d202      	bcs.n	801423c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014236:	4a08      	ldr	r2, [pc, #32]	; (8014258 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	6013      	str	r3, [r2, #0]
}
 801423c:	bf00      	nop
 801423e:	3710      	adds	r7, #16
 8014240:	46bd      	mov	sp, r7
 8014242:	bd80      	pop	{r7, pc}
 8014244:	20001774 	.word	0x20001774
 8014248:	2000129c 	.word	0x2000129c
 801424c:	2000175c 	.word	0x2000175c
 8014250:	2000172c 	.word	0x2000172c
 8014254:	20001728 	.word	0x20001728
 8014258:	20001790 	.word	0x20001790

0801425c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801425c:	b580      	push	{r7, lr}
 801425e:	b08a      	sub	sp, #40	; 0x28
 8014260:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014262:	2300      	movs	r3, #0
 8014264:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014266:	f000 fba1 	bl	80149ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801426a:	4b1c      	ldr	r3, [pc, #112]	; (80142dc <xTimerCreateTimerTask+0x80>)
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d021      	beq.n	80142b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014272:	2300      	movs	r3, #0
 8014274:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014276:	2300      	movs	r3, #0
 8014278:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801427a:	1d3a      	adds	r2, r7, #4
 801427c:	f107 0108 	add.w	r1, r7, #8
 8014280:	f107 030c 	add.w	r3, r7, #12
 8014284:	4618      	mov	r0, r3
 8014286:	f7fd fc43 	bl	8011b10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801428a:	6879      	ldr	r1, [r7, #4]
 801428c:	68bb      	ldr	r3, [r7, #8]
 801428e:	68fa      	ldr	r2, [r7, #12]
 8014290:	9202      	str	r2, [sp, #8]
 8014292:	9301      	str	r3, [sp, #4]
 8014294:	2302      	movs	r3, #2
 8014296:	9300      	str	r3, [sp, #0]
 8014298:	2300      	movs	r3, #0
 801429a:	460a      	mov	r2, r1
 801429c:	4910      	ldr	r1, [pc, #64]	; (80142e0 <xTimerCreateTimerTask+0x84>)
 801429e:	4811      	ldr	r0, [pc, #68]	; (80142e4 <xTimerCreateTimerTask+0x88>)
 80142a0:	f7fe ff00 	bl	80130a4 <xTaskCreateStatic>
 80142a4:	4603      	mov	r3, r0
 80142a6:	4a10      	ldr	r2, [pc, #64]	; (80142e8 <xTimerCreateTimerTask+0x8c>)
 80142a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80142aa:	4b0f      	ldr	r3, [pc, #60]	; (80142e8 <xTimerCreateTimerTask+0x8c>)
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d001      	beq.n	80142b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80142b2:	2301      	movs	r3, #1
 80142b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80142b6:	697b      	ldr	r3, [r7, #20]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d10a      	bne.n	80142d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80142bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142c0:	f383 8811 	msr	BASEPRI, r3
 80142c4:	f3bf 8f6f 	isb	sy
 80142c8:	f3bf 8f4f 	dsb	sy
 80142cc:	613b      	str	r3, [r7, #16]
}
 80142ce:	bf00      	nop
 80142d0:	e7fe      	b.n	80142d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80142d2:	697b      	ldr	r3, [r7, #20]
}
 80142d4:	4618      	mov	r0, r3
 80142d6:	3718      	adds	r7, #24
 80142d8:	46bd      	mov	sp, r7
 80142da:	bd80      	pop	{r7, pc}
 80142dc:	200017cc 	.word	0x200017cc
 80142e0:	08019890 	.word	0x08019890
 80142e4:	08014555 	.word	0x08014555
 80142e8:	200017d0 	.word	0x200017d0

080142ec <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b088      	sub	sp, #32
 80142f0:	af02      	add	r7, sp, #8
 80142f2:	60f8      	str	r0, [r7, #12]
 80142f4:	60b9      	str	r1, [r7, #8]
 80142f6:	607a      	str	r2, [r7, #4]
 80142f8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80142fa:	202c      	movs	r0, #44	; 0x2c
 80142fc:	f000 fe24 	bl	8014f48 <pvPortMalloc>
 8014300:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8014302:	697b      	ldr	r3, [r7, #20]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d00d      	beq.n	8014324 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8014308:	697b      	ldr	r3, [r7, #20]
 801430a:	2200      	movs	r2, #0
 801430c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8014310:	697b      	ldr	r3, [r7, #20]
 8014312:	9301      	str	r3, [sp, #4]
 8014314:	6a3b      	ldr	r3, [r7, #32]
 8014316:	9300      	str	r3, [sp, #0]
 8014318:	683b      	ldr	r3, [r7, #0]
 801431a:	687a      	ldr	r2, [r7, #4]
 801431c:	68b9      	ldr	r1, [r7, #8]
 801431e:	68f8      	ldr	r0, [r7, #12]
 8014320:	f000 f843 	bl	80143aa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8014324:	697b      	ldr	r3, [r7, #20]
	}
 8014326:	4618      	mov	r0, r3
 8014328:	3718      	adds	r7, #24
 801432a:	46bd      	mov	sp, r7
 801432c:	bd80      	pop	{r7, pc}

0801432e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 801432e:	b580      	push	{r7, lr}
 8014330:	b08a      	sub	sp, #40	; 0x28
 8014332:	af02      	add	r7, sp, #8
 8014334:	60f8      	str	r0, [r7, #12]
 8014336:	60b9      	str	r1, [r7, #8]
 8014338:	607a      	str	r2, [r7, #4]
 801433a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 801433c:	232c      	movs	r3, #44	; 0x2c
 801433e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8014340:	693b      	ldr	r3, [r7, #16]
 8014342:	2b2c      	cmp	r3, #44	; 0x2c
 8014344:	d00a      	beq.n	801435c <xTimerCreateStatic+0x2e>
	__asm volatile
 8014346:	f04f 0350 	mov.w	r3, #80	; 0x50
 801434a:	f383 8811 	msr	BASEPRI, r3
 801434e:	f3bf 8f6f 	isb	sy
 8014352:	f3bf 8f4f 	dsb	sy
 8014356:	61bb      	str	r3, [r7, #24]
}
 8014358:	bf00      	nop
 801435a:	e7fe      	b.n	801435a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801435c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014360:	2b00      	cmp	r3, #0
 8014362:	d10a      	bne.n	801437a <xTimerCreateStatic+0x4c>
	__asm volatile
 8014364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014368:	f383 8811 	msr	BASEPRI, r3
 801436c:	f3bf 8f6f 	isb	sy
 8014370:	f3bf 8f4f 	dsb	sy
 8014374:	617b      	str	r3, [r7, #20]
}
 8014376:	bf00      	nop
 8014378:	e7fe      	b.n	8014378 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 801437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801437c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 801437e:	69fb      	ldr	r3, [r7, #28]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d00d      	beq.n	80143a0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8014384:	69fb      	ldr	r3, [r7, #28]
 8014386:	2202      	movs	r2, #2
 8014388:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801438c:	69fb      	ldr	r3, [r7, #28]
 801438e:	9301      	str	r3, [sp, #4]
 8014390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014392:	9300      	str	r3, [sp, #0]
 8014394:	683b      	ldr	r3, [r7, #0]
 8014396:	687a      	ldr	r2, [r7, #4]
 8014398:	68b9      	ldr	r1, [r7, #8]
 801439a:	68f8      	ldr	r0, [r7, #12]
 801439c:	f000 f805 	bl	80143aa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80143a0:	69fb      	ldr	r3, [r7, #28]
	}
 80143a2:	4618      	mov	r0, r3
 80143a4:	3720      	adds	r7, #32
 80143a6:	46bd      	mov	sp, r7
 80143a8:	bd80      	pop	{r7, pc}

080143aa <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80143aa:	b580      	push	{r7, lr}
 80143ac:	b086      	sub	sp, #24
 80143ae:	af00      	add	r7, sp, #0
 80143b0:	60f8      	str	r0, [r7, #12]
 80143b2:	60b9      	str	r1, [r7, #8]
 80143b4:	607a      	str	r2, [r7, #4]
 80143b6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80143b8:	68bb      	ldr	r3, [r7, #8]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d10a      	bne.n	80143d4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80143be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143c2:	f383 8811 	msr	BASEPRI, r3
 80143c6:	f3bf 8f6f 	isb	sy
 80143ca:	f3bf 8f4f 	dsb	sy
 80143ce:	617b      	str	r3, [r7, #20]
}
 80143d0:	bf00      	nop
 80143d2:	e7fe      	b.n	80143d2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80143d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d01e      	beq.n	8014418 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80143da:	f000 fae7 	bl	80149ac <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80143de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143e0:	68fa      	ldr	r2, [r7, #12]
 80143e2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80143e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143e6:	68ba      	ldr	r2, [r7, #8]
 80143e8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80143ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ec:	683a      	ldr	r2, [r7, #0]
 80143ee:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80143f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f2:	6a3a      	ldr	r2, [r7, #32]
 80143f4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80143f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f8:	3304      	adds	r3, #4
 80143fa:	4618      	mov	r0, r3
 80143fc:	f7fd fdb0 	bl	8011f60 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d008      	beq.n	8014418 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8014406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014408:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801440c:	f043 0304 	orr.w	r3, r3, #4
 8014410:	b2da      	uxtb	r2, r3
 8014412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014414:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8014418:	bf00      	nop
 801441a:	3718      	adds	r7, #24
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}

08014420 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b08a      	sub	sp, #40	; 0x28
 8014424:	af00      	add	r7, sp, #0
 8014426:	60f8      	str	r0, [r7, #12]
 8014428:	60b9      	str	r1, [r7, #8]
 801442a:	607a      	str	r2, [r7, #4]
 801442c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801442e:	2300      	movs	r3, #0
 8014430:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d10a      	bne.n	801444e <xTimerGenericCommand+0x2e>
	__asm volatile
 8014438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801443c:	f383 8811 	msr	BASEPRI, r3
 8014440:	f3bf 8f6f 	isb	sy
 8014444:	f3bf 8f4f 	dsb	sy
 8014448:	623b      	str	r3, [r7, #32]
}
 801444a:	bf00      	nop
 801444c:	e7fe      	b.n	801444c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801444e:	4b1a      	ldr	r3, [pc, #104]	; (80144b8 <xTimerGenericCommand+0x98>)
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d02a      	beq.n	80144ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014456:	68bb      	ldr	r3, [r7, #8]
 8014458:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014462:	68bb      	ldr	r3, [r7, #8]
 8014464:	2b05      	cmp	r3, #5
 8014466:	dc18      	bgt.n	801449a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014468:	f7ff fd02 	bl	8013e70 <xTaskGetSchedulerState>
 801446c:	4603      	mov	r3, r0
 801446e:	2b02      	cmp	r3, #2
 8014470:	d109      	bne.n	8014486 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014472:	4b11      	ldr	r3, [pc, #68]	; (80144b8 <xTimerGenericCommand+0x98>)
 8014474:	6818      	ldr	r0, [r3, #0]
 8014476:	f107 0110 	add.w	r1, r7, #16
 801447a:	2300      	movs	r3, #0
 801447c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801447e:	f7fd ffab 	bl	80123d8 <xQueueGenericSend>
 8014482:	6278      	str	r0, [r7, #36]	; 0x24
 8014484:	e012      	b.n	80144ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014486:	4b0c      	ldr	r3, [pc, #48]	; (80144b8 <xTimerGenericCommand+0x98>)
 8014488:	6818      	ldr	r0, [r3, #0]
 801448a:	f107 0110 	add.w	r1, r7, #16
 801448e:	2300      	movs	r3, #0
 8014490:	2200      	movs	r2, #0
 8014492:	f7fd ffa1 	bl	80123d8 <xQueueGenericSend>
 8014496:	6278      	str	r0, [r7, #36]	; 0x24
 8014498:	e008      	b.n	80144ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801449a:	4b07      	ldr	r3, [pc, #28]	; (80144b8 <xTimerGenericCommand+0x98>)
 801449c:	6818      	ldr	r0, [r3, #0]
 801449e:	f107 0110 	add.w	r1, r7, #16
 80144a2:	2300      	movs	r3, #0
 80144a4:	683a      	ldr	r2, [r7, #0]
 80144a6:	f7fe f895 	bl	80125d4 <xQueueGenericSendFromISR>
 80144aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80144ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80144ae:	4618      	mov	r0, r3
 80144b0:	3728      	adds	r7, #40	; 0x28
 80144b2:	46bd      	mov	sp, r7
 80144b4:	bd80      	pop	{r7, pc}
 80144b6:	bf00      	nop
 80144b8:	200017cc 	.word	0x200017cc

080144bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80144bc:	b580      	push	{r7, lr}
 80144be:	b088      	sub	sp, #32
 80144c0:	af02      	add	r7, sp, #8
 80144c2:	6078      	str	r0, [r7, #4]
 80144c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80144c6:	4b22      	ldr	r3, [pc, #136]	; (8014550 <prvProcessExpiredTimer+0x94>)
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	68db      	ldr	r3, [r3, #12]
 80144cc:	68db      	ldr	r3, [r3, #12]
 80144ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80144d0:	697b      	ldr	r3, [r7, #20]
 80144d2:	3304      	adds	r3, #4
 80144d4:	4618      	mov	r0, r3
 80144d6:	f7fd fdad 	bl	8012034 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80144da:	697b      	ldr	r3, [r7, #20]
 80144dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80144e0:	f003 0304 	and.w	r3, r3, #4
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d022      	beq.n	801452e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80144e8:	697b      	ldr	r3, [r7, #20]
 80144ea:	699a      	ldr	r2, [r3, #24]
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	18d1      	adds	r1, r2, r3
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	683a      	ldr	r2, [r7, #0]
 80144f4:	6978      	ldr	r0, [r7, #20]
 80144f6:	f000 f8d1 	bl	801469c <prvInsertTimerInActiveList>
 80144fa:	4603      	mov	r3, r0
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d01f      	beq.n	8014540 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014500:	2300      	movs	r3, #0
 8014502:	9300      	str	r3, [sp, #0]
 8014504:	2300      	movs	r3, #0
 8014506:	687a      	ldr	r2, [r7, #4]
 8014508:	2100      	movs	r1, #0
 801450a:	6978      	ldr	r0, [r7, #20]
 801450c:	f7ff ff88 	bl	8014420 <xTimerGenericCommand>
 8014510:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014512:	693b      	ldr	r3, [r7, #16]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d113      	bne.n	8014540 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8014518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801451c:	f383 8811 	msr	BASEPRI, r3
 8014520:	f3bf 8f6f 	isb	sy
 8014524:	f3bf 8f4f 	dsb	sy
 8014528:	60fb      	str	r3, [r7, #12]
}
 801452a:	bf00      	nop
 801452c:	e7fe      	b.n	801452c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801452e:	697b      	ldr	r3, [r7, #20]
 8014530:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014534:	f023 0301 	bic.w	r3, r3, #1
 8014538:	b2da      	uxtb	r2, r3
 801453a:	697b      	ldr	r3, [r7, #20]
 801453c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014540:	697b      	ldr	r3, [r7, #20]
 8014542:	6a1b      	ldr	r3, [r3, #32]
 8014544:	6978      	ldr	r0, [r7, #20]
 8014546:	4798      	blx	r3
}
 8014548:	bf00      	nop
 801454a:	3718      	adds	r7, #24
 801454c:	46bd      	mov	sp, r7
 801454e:	bd80      	pop	{r7, pc}
 8014550:	200017c4 	.word	0x200017c4

08014554 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014554:	b580      	push	{r7, lr}
 8014556:	b084      	sub	sp, #16
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801455c:	f107 0308 	add.w	r3, r7, #8
 8014560:	4618      	mov	r0, r3
 8014562:	f000 f857 	bl	8014614 <prvGetNextExpireTime>
 8014566:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014568:	68bb      	ldr	r3, [r7, #8]
 801456a:	4619      	mov	r1, r3
 801456c:	68f8      	ldr	r0, [r7, #12]
 801456e:	f000 f803 	bl	8014578 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014572:	f000 f8d5 	bl	8014720 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014576:	e7f1      	b.n	801455c <prvTimerTask+0x8>

08014578 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b084      	sub	sp, #16
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
 8014580:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014582:	f7fe ffeb 	bl	801355c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014586:	f107 0308 	add.w	r3, r7, #8
 801458a:	4618      	mov	r0, r3
 801458c:	f000 f866 	bl	801465c <prvSampleTimeNow>
 8014590:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014592:	68bb      	ldr	r3, [r7, #8]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d130      	bne.n	80145fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014598:	683b      	ldr	r3, [r7, #0]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d10a      	bne.n	80145b4 <prvProcessTimerOrBlockTask+0x3c>
 801459e:	687a      	ldr	r2, [r7, #4]
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	429a      	cmp	r2, r3
 80145a4:	d806      	bhi.n	80145b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80145a6:	f7fe ffe7 	bl	8013578 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80145aa:	68f9      	ldr	r1, [r7, #12]
 80145ac:	6878      	ldr	r0, [r7, #4]
 80145ae:	f7ff ff85 	bl	80144bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80145b2:	e024      	b.n	80145fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80145b4:	683b      	ldr	r3, [r7, #0]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d008      	beq.n	80145cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80145ba:	4b13      	ldr	r3, [pc, #76]	; (8014608 <prvProcessTimerOrBlockTask+0x90>)
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d101      	bne.n	80145c8 <prvProcessTimerOrBlockTask+0x50>
 80145c4:	2301      	movs	r3, #1
 80145c6:	e000      	b.n	80145ca <prvProcessTimerOrBlockTask+0x52>
 80145c8:	2300      	movs	r3, #0
 80145ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80145cc:	4b0f      	ldr	r3, [pc, #60]	; (801460c <prvProcessTimerOrBlockTask+0x94>)
 80145ce:	6818      	ldr	r0, [r3, #0]
 80145d0:	687a      	ldr	r2, [r7, #4]
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	1ad3      	subs	r3, r2, r3
 80145d6:	683a      	ldr	r2, [r7, #0]
 80145d8:	4619      	mov	r1, r3
 80145da:	f7fe fd2f 	bl	801303c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80145de:	f7fe ffcb 	bl	8013578 <xTaskResumeAll>
 80145e2:	4603      	mov	r3, r0
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d10a      	bne.n	80145fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80145e8:	4b09      	ldr	r3, [pc, #36]	; (8014610 <prvProcessTimerOrBlockTask+0x98>)
 80145ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145ee:	601a      	str	r2, [r3, #0]
 80145f0:	f3bf 8f4f 	dsb	sy
 80145f4:	f3bf 8f6f 	isb	sy
}
 80145f8:	e001      	b.n	80145fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80145fa:	f7fe ffbd 	bl	8013578 <xTaskResumeAll>
}
 80145fe:	bf00      	nop
 8014600:	3710      	adds	r7, #16
 8014602:	46bd      	mov	sp, r7
 8014604:	bd80      	pop	{r7, pc}
 8014606:	bf00      	nop
 8014608:	200017c8 	.word	0x200017c8
 801460c:	200017cc 	.word	0x200017cc
 8014610:	e000ed04 	.word	0xe000ed04

08014614 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014614:	b480      	push	{r7}
 8014616:	b085      	sub	sp, #20
 8014618:	af00      	add	r7, sp, #0
 801461a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801461c:	4b0e      	ldr	r3, [pc, #56]	; (8014658 <prvGetNextExpireTime+0x44>)
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d101      	bne.n	801462a <prvGetNextExpireTime+0x16>
 8014626:	2201      	movs	r2, #1
 8014628:	e000      	b.n	801462c <prvGetNextExpireTime+0x18>
 801462a:	2200      	movs	r2, #0
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d105      	bne.n	8014644 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014638:	4b07      	ldr	r3, [pc, #28]	; (8014658 <prvGetNextExpireTime+0x44>)
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	68db      	ldr	r3, [r3, #12]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	60fb      	str	r3, [r7, #12]
 8014642:	e001      	b.n	8014648 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014644:	2300      	movs	r3, #0
 8014646:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014648:	68fb      	ldr	r3, [r7, #12]
}
 801464a:	4618      	mov	r0, r3
 801464c:	3714      	adds	r7, #20
 801464e:	46bd      	mov	sp, r7
 8014650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014654:	4770      	bx	lr
 8014656:	bf00      	nop
 8014658:	200017c4 	.word	0x200017c4

0801465c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801465c:	b580      	push	{r7, lr}
 801465e:	b084      	sub	sp, #16
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014664:	f7ff f826 	bl	80136b4 <xTaskGetTickCount>
 8014668:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801466a:	4b0b      	ldr	r3, [pc, #44]	; (8014698 <prvSampleTimeNow+0x3c>)
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	68fa      	ldr	r2, [r7, #12]
 8014670:	429a      	cmp	r2, r3
 8014672:	d205      	bcs.n	8014680 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014674:	f000 f936 	bl	80148e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	2201      	movs	r2, #1
 801467c:	601a      	str	r2, [r3, #0]
 801467e:	e002      	b.n	8014686 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	2200      	movs	r2, #0
 8014684:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014686:	4a04      	ldr	r2, [pc, #16]	; (8014698 <prvSampleTimeNow+0x3c>)
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801468c:	68fb      	ldr	r3, [r7, #12]
}
 801468e:	4618      	mov	r0, r3
 8014690:	3710      	adds	r7, #16
 8014692:	46bd      	mov	sp, r7
 8014694:	bd80      	pop	{r7, pc}
 8014696:	bf00      	nop
 8014698:	200017d4 	.word	0x200017d4

0801469c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b086      	sub	sp, #24
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	60f8      	str	r0, [r7, #12]
 80146a4:	60b9      	str	r1, [r7, #8]
 80146a6:	607a      	str	r2, [r7, #4]
 80146a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80146aa:	2300      	movs	r3, #0
 80146ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	68ba      	ldr	r2, [r7, #8]
 80146b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	68fa      	ldr	r2, [r7, #12]
 80146b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80146ba:	68ba      	ldr	r2, [r7, #8]
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	429a      	cmp	r2, r3
 80146c0:	d812      	bhi.n	80146e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80146c2:	687a      	ldr	r2, [r7, #4]
 80146c4:	683b      	ldr	r3, [r7, #0]
 80146c6:	1ad2      	subs	r2, r2, r3
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	699b      	ldr	r3, [r3, #24]
 80146cc:	429a      	cmp	r2, r3
 80146ce:	d302      	bcc.n	80146d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80146d0:	2301      	movs	r3, #1
 80146d2:	617b      	str	r3, [r7, #20]
 80146d4:	e01b      	b.n	801470e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80146d6:	4b10      	ldr	r3, [pc, #64]	; (8014718 <prvInsertTimerInActiveList+0x7c>)
 80146d8:	681a      	ldr	r2, [r3, #0]
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	3304      	adds	r3, #4
 80146de:	4619      	mov	r1, r3
 80146e0:	4610      	mov	r0, r2
 80146e2:	f7fd fc6e 	bl	8011fc2 <vListInsert>
 80146e6:	e012      	b.n	801470e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80146e8:	687a      	ldr	r2, [r7, #4]
 80146ea:	683b      	ldr	r3, [r7, #0]
 80146ec:	429a      	cmp	r2, r3
 80146ee:	d206      	bcs.n	80146fe <prvInsertTimerInActiveList+0x62>
 80146f0:	68ba      	ldr	r2, [r7, #8]
 80146f2:	683b      	ldr	r3, [r7, #0]
 80146f4:	429a      	cmp	r2, r3
 80146f6:	d302      	bcc.n	80146fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80146f8:	2301      	movs	r3, #1
 80146fa:	617b      	str	r3, [r7, #20]
 80146fc:	e007      	b.n	801470e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80146fe:	4b07      	ldr	r3, [pc, #28]	; (801471c <prvInsertTimerInActiveList+0x80>)
 8014700:	681a      	ldr	r2, [r3, #0]
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	3304      	adds	r3, #4
 8014706:	4619      	mov	r1, r3
 8014708:	4610      	mov	r0, r2
 801470a:	f7fd fc5a 	bl	8011fc2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801470e:	697b      	ldr	r3, [r7, #20]
}
 8014710:	4618      	mov	r0, r3
 8014712:	3718      	adds	r7, #24
 8014714:	46bd      	mov	sp, r7
 8014716:	bd80      	pop	{r7, pc}
 8014718:	200017c8 	.word	0x200017c8
 801471c:	200017c4 	.word	0x200017c4

08014720 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b08e      	sub	sp, #56	; 0x38
 8014724:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014726:	e0ca      	b.n	80148be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	2b00      	cmp	r3, #0
 801472c:	da18      	bge.n	8014760 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801472e:	1d3b      	adds	r3, r7, #4
 8014730:	3304      	adds	r3, #4
 8014732:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014736:	2b00      	cmp	r3, #0
 8014738:	d10a      	bne.n	8014750 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801473a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801473e:	f383 8811 	msr	BASEPRI, r3
 8014742:	f3bf 8f6f 	isb	sy
 8014746:	f3bf 8f4f 	dsb	sy
 801474a:	61fb      	str	r3, [r7, #28]
}
 801474c:	bf00      	nop
 801474e:	e7fe      	b.n	801474e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014756:	6850      	ldr	r0, [r2, #4]
 8014758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801475a:	6892      	ldr	r2, [r2, #8]
 801475c:	4611      	mov	r1, r2
 801475e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2b00      	cmp	r3, #0
 8014764:	f2c0 80aa 	blt.w	80148bc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801476c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801476e:	695b      	ldr	r3, [r3, #20]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d004      	beq.n	801477e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014776:	3304      	adds	r3, #4
 8014778:	4618      	mov	r0, r3
 801477a:	f7fd fc5b 	bl	8012034 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801477e:	463b      	mov	r3, r7
 8014780:	4618      	mov	r0, r3
 8014782:	f7ff ff6b 	bl	801465c <prvSampleTimeNow>
 8014786:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	2b09      	cmp	r3, #9
 801478c:	f200 8097 	bhi.w	80148be <prvProcessReceivedCommands+0x19e>
 8014790:	a201      	add	r2, pc, #4	; (adr r2, 8014798 <prvProcessReceivedCommands+0x78>)
 8014792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014796:	bf00      	nop
 8014798:	080147c1 	.word	0x080147c1
 801479c:	080147c1 	.word	0x080147c1
 80147a0:	080147c1 	.word	0x080147c1
 80147a4:	08014835 	.word	0x08014835
 80147a8:	08014849 	.word	0x08014849
 80147ac:	08014893 	.word	0x08014893
 80147b0:	080147c1 	.word	0x080147c1
 80147b4:	080147c1 	.word	0x080147c1
 80147b8:	08014835 	.word	0x08014835
 80147bc:	08014849 	.word	0x08014849
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80147c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80147c6:	f043 0301 	orr.w	r3, r3, #1
 80147ca:	b2da      	uxtb	r2, r3
 80147cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80147d2:	68ba      	ldr	r2, [r7, #8]
 80147d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147d6:	699b      	ldr	r3, [r3, #24]
 80147d8:	18d1      	adds	r1, r2, r3
 80147da:	68bb      	ldr	r3, [r7, #8]
 80147dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80147e0:	f7ff ff5c 	bl	801469c <prvInsertTimerInActiveList>
 80147e4:	4603      	mov	r3, r0
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d069      	beq.n	80148be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80147ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ec:	6a1b      	ldr	r3, [r3, #32]
 80147ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80147f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80147f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80147f8:	f003 0304 	and.w	r3, r3, #4
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d05e      	beq.n	80148be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014800:	68ba      	ldr	r2, [r7, #8]
 8014802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014804:	699b      	ldr	r3, [r3, #24]
 8014806:	441a      	add	r2, r3
 8014808:	2300      	movs	r3, #0
 801480a:	9300      	str	r3, [sp, #0]
 801480c:	2300      	movs	r3, #0
 801480e:	2100      	movs	r1, #0
 8014810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014812:	f7ff fe05 	bl	8014420 <xTimerGenericCommand>
 8014816:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014818:	6a3b      	ldr	r3, [r7, #32]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d14f      	bne.n	80148be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801481e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014822:	f383 8811 	msr	BASEPRI, r3
 8014826:	f3bf 8f6f 	isb	sy
 801482a:	f3bf 8f4f 	dsb	sy
 801482e:	61bb      	str	r3, [r7, #24]
}
 8014830:	bf00      	nop
 8014832:	e7fe      	b.n	8014832 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014836:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801483a:	f023 0301 	bic.w	r3, r3, #1
 801483e:	b2da      	uxtb	r2, r3
 8014840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014842:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014846:	e03a      	b.n	80148be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801484a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801484e:	f043 0301 	orr.w	r3, r3, #1
 8014852:	b2da      	uxtb	r2, r3
 8014854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014856:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801485a:	68ba      	ldr	r2, [r7, #8]
 801485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801485e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014862:	699b      	ldr	r3, [r3, #24]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d10a      	bne.n	801487e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8014868:	f04f 0350 	mov.w	r3, #80	; 0x50
 801486c:	f383 8811 	msr	BASEPRI, r3
 8014870:	f3bf 8f6f 	isb	sy
 8014874:	f3bf 8f4f 	dsb	sy
 8014878:	617b      	str	r3, [r7, #20]
}
 801487a:	bf00      	nop
 801487c:	e7fe      	b.n	801487c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014880:	699a      	ldr	r2, [r3, #24]
 8014882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014884:	18d1      	adds	r1, r2, r3
 8014886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801488a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801488c:	f7ff ff06 	bl	801469c <prvInsertTimerInActiveList>
					break;
 8014890:	e015      	b.n	80148be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014894:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014898:	f003 0302 	and.w	r3, r3, #2
 801489c:	2b00      	cmp	r3, #0
 801489e:	d103      	bne.n	80148a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80148a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80148a2:	f000 fc1d 	bl	80150e0 <vPortFree>
 80148a6:	e00a      	b.n	80148be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80148a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80148ae:	f023 0301 	bic.w	r3, r3, #1
 80148b2:	b2da      	uxtb	r2, r3
 80148b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80148ba:	e000      	b.n	80148be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80148bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80148be:	4b08      	ldr	r3, [pc, #32]	; (80148e0 <prvProcessReceivedCommands+0x1c0>)
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	1d39      	adds	r1, r7, #4
 80148c4:	2200      	movs	r2, #0
 80148c6:	4618      	mov	r0, r3
 80148c8:	f7fd ffac 	bl	8012824 <xQueueReceive>
 80148cc:	4603      	mov	r3, r0
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	f47f af2a 	bne.w	8014728 <prvProcessReceivedCommands+0x8>
	}
}
 80148d4:	bf00      	nop
 80148d6:	bf00      	nop
 80148d8:	3730      	adds	r7, #48	; 0x30
 80148da:	46bd      	mov	sp, r7
 80148dc:	bd80      	pop	{r7, pc}
 80148de:	bf00      	nop
 80148e0:	200017cc 	.word	0x200017cc

080148e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b088      	sub	sp, #32
 80148e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80148ea:	e048      	b.n	801497e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80148ec:	4b2d      	ldr	r3, [pc, #180]	; (80149a4 <prvSwitchTimerLists+0xc0>)
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	68db      	ldr	r3, [r3, #12]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80148f6:	4b2b      	ldr	r3, [pc, #172]	; (80149a4 <prvSwitchTimerLists+0xc0>)
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	68db      	ldr	r3, [r3, #12]
 80148fc:	68db      	ldr	r3, [r3, #12]
 80148fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	3304      	adds	r3, #4
 8014904:	4618      	mov	r0, r3
 8014906:	f7fd fb95 	bl	8012034 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	6a1b      	ldr	r3, [r3, #32]
 801490e:	68f8      	ldr	r0, [r7, #12]
 8014910:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014918:	f003 0304 	and.w	r3, r3, #4
 801491c:	2b00      	cmp	r3, #0
 801491e:	d02e      	beq.n	801497e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	699b      	ldr	r3, [r3, #24]
 8014924:	693a      	ldr	r2, [r7, #16]
 8014926:	4413      	add	r3, r2
 8014928:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801492a:	68ba      	ldr	r2, [r7, #8]
 801492c:	693b      	ldr	r3, [r7, #16]
 801492e:	429a      	cmp	r2, r3
 8014930:	d90e      	bls.n	8014950 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	68ba      	ldr	r2, [r7, #8]
 8014936:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	68fa      	ldr	r2, [r7, #12]
 801493c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801493e:	4b19      	ldr	r3, [pc, #100]	; (80149a4 <prvSwitchTimerLists+0xc0>)
 8014940:	681a      	ldr	r2, [r3, #0]
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	3304      	adds	r3, #4
 8014946:	4619      	mov	r1, r3
 8014948:	4610      	mov	r0, r2
 801494a:	f7fd fb3a 	bl	8011fc2 <vListInsert>
 801494e:	e016      	b.n	801497e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014950:	2300      	movs	r3, #0
 8014952:	9300      	str	r3, [sp, #0]
 8014954:	2300      	movs	r3, #0
 8014956:	693a      	ldr	r2, [r7, #16]
 8014958:	2100      	movs	r1, #0
 801495a:	68f8      	ldr	r0, [r7, #12]
 801495c:	f7ff fd60 	bl	8014420 <xTimerGenericCommand>
 8014960:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d10a      	bne.n	801497e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8014968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801496c:	f383 8811 	msr	BASEPRI, r3
 8014970:	f3bf 8f6f 	isb	sy
 8014974:	f3bf 8f4f 	dsb	sy
 8014978:	603b      	str	r3, [r7, #0]
}
 801497a:	bf00      	nop
 801497c:	e7fe      	b.n	801497c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801497e:	4b09      	ldr	r3, [pc, #36]	; (80149a4 <prvSwitchTimerLists+0xc0>)
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d1b1      	bne.n	80148ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014988:	4b06      	ldr	r3, [pc, #24]	; (80149a4 <prvSwitchTimerLists+0xc0>)
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801498e:	4b06      	ldr	r3, [pc, #24]	; (80149a8 <prvSwitchTimerLists+0xc4>)
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	4a04      	ldr	r2, [pc, #16]	; (80149a4 <prvSwitchTimerLists+0xc0>)
 8014994:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014996:	4a04      	ldr	r2, [pc, #16]	; (80149a8 <prvSwitchTimerLists+0xc4>)
 8014998:	697b      	ldr	r3, [r7, #20]
 801499a:	6013      	str	r3, [r2, #0]
}
 801499c:	bf00      	nop
 801499e:	3718      	adds	r7, #24
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bd80      	pop	{r7, pc}
 80149a4:	200017c4 	.word	0x200017c4
 80149a8:	200017c8 	.word	0x200017c8

080149ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b082      	sub	sp, #8
 80149b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80149b2:	f000 f9a7 	bl	8014d04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80149b6:	4b15      	ldr	r3, [pc, #84]	; (8014a0c <prvCheckForValidListAndQueue+0x60>)
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d120      	bne.n	8014a00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80149be:	4814      	ldr	r0, [pc, #80]	; (8014a10 <prvCheckForValidListAndQueue+0x64>)
 80149c0:	f7fd faae 	bl	8011f20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80149c4:	4813      	ldr	r0, [pc, #76]	; (8014a14 <prvCheckForValidListAndQueue+0x68>)
 80149c6:	f7fd faab 	bl	8011f20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80149ca:	4b13      	ldr	r3, [pc, #76]	; (8014a18 <prvCheckForValidListAndQueue+0x6c>)
 80149cc:	4a10      	ldr	r2, [pc, #64]	; (8014a10 <prvCheckForValidListAndQueue+0x64>)
 80149ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80149d0:	4b12      	ldr	r3, [pc, #72]	; (8014a1c <prvCheckForValidListAndQueue+0x70>)
 80149d2:	4a10      	ldr	r2, [pc, #64]	; (8014a14 <prvCheckForValidListAndQueue+0x68>)
 80149d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80149d6:	2300      	movs	r3, #0
 80149d8:	9300      	str	r3, [sp, #0]
 80149da:	4b11      	ldr	r3, [pc, #68]	; (8014a20 <prvCheckForValidListAndQueue+0x74>)
 80149dc:	4a11      	ldr	r2, [pc, #68]	; (8014a24 <prvCheckForValidListAndQueue+0x78>)
 80149de:	2110      	movs	r1, #16
 80149e0:	200a      	movs	r0, #10
 80149e2:	f7fd fbb9 	bl	8012158 <xQueueGenericCreateStatic>
 80149e6:	4603      	mov	r3, r0
 80149e8:	4a08      	ldr	r2, [pc, #32]	; (8014a0c <prvCheckForValidListAndQueue+0x60>)
 80149ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80149ec:	4b07      	ldr	r3, [pc, #28]	; (8014a0c <prvCheckForValidListAndQueue+0x60>)
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d005      	beq.n	8014a00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80149f4:	4b05      	ldr	r3, [pc, #20]	; (8014a0c <prvCheckForValidListAndQueue+0x60>)
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	490b      	ldr	r1, [pc, #44]	; (8014a28 <prvCheckForValidListAndQueue+0x7c>)
 80149fa:	4618      	mov	r0, r3
 80149fc:	f7fe faca 	bl	8012f94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014a00:	f000 f9b0 	bl	8014d64 <vPortExitCritical>
}
 8014a04:	bf00      	nop
 8014a06:	46bd      	mov	sp, r7
 8014a08:	bd80      	pop	{r7, pc}
 8014a0a:	bf00      	nop
 8014a0c:	200017cc 	.word	0x200017cc
 8014a10:	2000179c 	.word	0x2000179c
 8014a14:	200017b0 	.word	0x200017b0
 8014a18:	200017c4 	.word	0x200017c4
 8014a1c:	200017c8 	.word	0x200017c8
 8014a20:	20001878 	.word	0x20001878
 8014a24:	200017d8 	.word	0x200017d8
 8014a28:	08019898 	.word	0x08019898

08014a2c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	b086      	sub	sp, #24
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d10a      	bne.n	8014a54 <pvTimerGetTimerID+0x28>
	__asm volatile
 8014a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a42:	f383 8811 	msr	BASEPRI, r3
 8014a46:	f3bf 8f6f 	isb	sy
 8014a4a:	f3bf 8f4f 	dsb	sy
 8014a4e:	60fb      	str	r3, [r7, #12]
}
 8014a50:	bf00      	nop
 8014a52:	e7fe      	b.n	8014a52 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8014a54:	f000 f956 	bl	8014d04 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8014a58:	697b      	ldr	r3, [r7, #20]
 8014a5a:	69db      	ldr	r3, [r3, #28]
 8014a5c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8014a5e:	f000 f981 	bl	8014d64 <vPortExitCritical>

	return pvReturn;
 8014a62:	693b      	ldr	r3, [r7, #16]
}
 8014a64:	4618      	mov	r0, r3
 8014a66:	3718      	adds	r7, #24
 8014a68:	46bd      	mov	sp, r7
 8014a6a:	bd80      	pop	{r7, pc}

08014a6c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b08a      	sub	sp, #40	; 0x28
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	60f8      	str	r0, [r7, #12]
 8014a74:	60b9      	str	r1, [r7, #8]
 8014a76:	607a      	str	r2, [r7, #4]
 8014a78:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8014a7a:	f06f 0301 	mvn.w	r3, #1
 8014a7e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8014a84:	68bb      	ldr	r3, [r7, #8]
 8014a86:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014a8c:	4b06      	ldr	r3, [pc, #24]	; (8014aa8 <xTimerPendFunctionCallFromISR+0x3c>)
 8014a8e:	6818      	ldr	r0, [r3, #0]
 8014a90:	f107 0114 	add.w	r1, r7, #20
 8014a94:	2300      	movs	r3, #0
 8014a96:	683a      	ldr	r2, [r7, #0]
 8014a98:	f7fd fd9c 	bl	80125d4 <xQueueGenericSendFromISR>
 8014a9c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8014a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	3728      	adds	r7, #40	; 0x28
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	bd80      	pop	{r7, pc}
 8014aa8:	200017cc 	.word	0x200017cc

08014aac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014aac:	b480      	push	{r7}
 8014aae:	b085      	sub	sp, #20
 8014ab0:	af00      	add	r7, sp, #0
 8014ab2:	60f8      	str	r0, [r7, #12]
 8014ab4:	60b9      	str	r1, [r7, #8]
 8014ab6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	3b04      	subs	r3, #4
 8014abc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014ac4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	3b04      	subs	r3, #4
 8014aca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014acc:	68bb      	ldr	r3, [r7, #8]
 8014ace:	f023 0201 	bic.w	r2, r3, #1
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	3b04      	subs	r3, #4
 8014ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014adc:	4a0c      	ldr	r2, [pc, #48]	; (8014b10 <pxPortInitialiseStack+0x64>)
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	3b14      	subs	r3, #20
 8014ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014ae8:	687a      	ldr	r2, [r7, #4]
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	3b04      	subs	r3, #4
 8014af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	f06f 0202 	mvn.w	r2, #2
 8014afa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	3b20      	subs	r3, #32
 8014b00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014b02:	68fb      	ldr	r3, [r7, #12]
}
 8014b04:	4618      	mov	r0, r3
 8014b06:	3714      	adds	r7, #20
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b0e:	4770      	bx	lr
 8014b10:	08014b15 	.word	0x08014b15

08014b14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014b14:	b480      	push	{r7}
 8014b16:	b085      	sub	sp, #20
 8014b18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014b1e:	4b12      	ldr	r3, [pc, #72]	; (8014b68 <prvTaskExitError+0x54>)
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b26:	d00a      	beq.n	8014b3e <prvTaskExitError+0x2a>
	__asm volatile
 8014b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b2c:	f383 8811 	msr	BASEPRI, r3
 8014b30:	f3bf 8f6f 	isb	sy
 8014b34:	f3bf 8f4f 	dsb	sy
 8014b38:	60fb      	str	r3, [r7, #12]
}
 8014b3a:	bf00      	nop
 8014b3c:	e7fe      	b.n	8014b3c <prvTaskExitError+0x28>
	__asm volatile
 8014b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b42:	f383 8811 	msr	BASEPRI, r3
 8014b46:	f3bf 8f6f 	isb	sy
 8014b4a:	f3bf 8f4f 	dsb	sy
 8014b4e:	60bb      	str	r3, [r7, #8]
}
 8014b50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014b52:	bf00      	nop
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d0fc      	beq.n	8014b54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014b5a:	bf00      	nop
 8014b5c:	bf00      	nop
 8014b5e:	3714      	adds	r7, #20
 8014b60:	46bd      	mov	sp, r7
 8014b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b66:	4770      	bx	lr
 8014b68:	200000c4 	.word	0x200000c4
 8014b6c:	00000000 	.word	0x00000000

08014b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014b70:	4b07      	ldr	r3, [pc, #28]	; (8014b90 <pxCurrentTCBConst2>)
 8014b72:	6819      	ldr	r1, [r3, #0]
 8014b74:	6808      	ldr	r0, [r1, #0]
 8014b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b7a:	f380 8809 	msr	PSP, r0
 8014b7e:	f3bf 8f6f 	isb	sy
 8014b82:	f04f 0000 	mov.w	r0, #0
 8014b86:	f380 8811 	msr	BASEPRI, r0
 8014b8a:	4770      	bx	lr
 8014b8c:	f3af 8000 	nop.w

08014b90 <pxCurrentTCBConst2>:
 8014b90:	2000129c 	.word	0x2000129c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014b94:	bf00      	nop
 8014b96:	bf00      	nop

08014b98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014b98:	4808      	ldr	r0, [pc, #32]	; (8014bbc <prvPortStartFirstTask+0x24>)
 8014b9a:	6800      	ldr	r0, [r0, #0]
 8014b9c:	6800      	ldr	r0, [r0, #0]
 8014b9e:	f380 8808 	msr	MSP, r0
 8014ba2:	f04f 0000 	mov.w	r0, #0
 8014ba6:	f380 8814 	msr	CONTROL, r0
 8014baa:	b662      	cpsie	i
 8014bac:	b661      	cpsie	f
 8014bae:	f3bf 8f4f 	dsb	sy
 8014bb2:	f3bf 8f6f 	isb	sy
 8014bb6:	df00      	svc	0
 8014bb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014bba:	bf00      	nop
 8014bbc:	e000ed08 	.word	0xe000ed08

08014bc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b086      	sub	sp, #24
 8014bc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014bc6:	4b46      	ldr	r3, [pc, #280]	; (8014ce0 <xPortStartScheduler+0x120>)
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	4a46      	ldr	r2, [pc, #280]	; (8014ce4 <xPortStartScheduler+0x124>)
 8014bcc:	4293      	cmp	r3, r2
 8014bce:	d10a      	bne.n	8014be6 <xPortStartScheduler+0x26>
	__asm volatile
 8014bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bd4:	f383 8811 	msr	BASEPRI, r3
 8014bd8:	f3bf 8f6f 	isb	sy
 8014bdc:	f3bf 8f4f 	dsb	sy
 8014be0:	613b      	str	r3, [r7, #16]
}
 8014be2:	bf00      	nop
 8014be4:	e7fe      	b.n	8014be4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014be6:	4b3e      	ldr	r3, [pc, #248]	; (8014ce0 <xPortStartScheduler+0x120>)
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	4a3f      	ldr	r2, [pc, #252]	; (8014ce8 <xPortStartScheduler+0x128>)
 8014bec:	4293      	cmp	r3, r2
 8014bee:	d10a      	bne.n	8014c06 <xPortStartScheduler+0x46>
	__asm volatile
 8014bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bf4:	f383 8811 	msr	BASEPRI, r3
 8014bf8:	f3bf 8f6f 	isb	sy
 8014bfc:	f3bf 8f4f 	dsb	sy
 8014c00:	60fb      	str	r3, [r7, #12]
}
 8014c02:	bf00      	nop
 8014c04:	e7fe      	b.n	8014c04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014c06:	4b39      	ldr	r3, [pc, #228]	; (8014cec <xPortStartScheduler+0x12c>)
 8014c08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014c0a:	697b      	ldr	r3, [r7, #20]
 8014c0c:	781b      	ldrb	r3, [r3, #0]
 8014c0e:	b2db      	uxtb	r3, r3
 8014c10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014c12:	697b      	ldr	r3, [r7, #20]
 8014c14:	22ff      	movs	r2, #255	; 0xff
 8014c16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014c18:	697b      	ldr	r3, [r7, #20]
 8014c1a:	781b      	ldrb	r3, [r3, #0]
 8014c1c:	b2db      	uxtb	r3, r3
 8014c1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014c20:	78fb      	ldrb	r3, [r7, #3]
 8014c22:	b2db      	uxtb	r3, r3
 8014c24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014c28:	b2da      	uxtb	r2, r3
 8014c2a:	4b31      	ldr	r3, [pc, #196]	; (8014cf0 <xPortStartScheduler+0x130>)
 8014c2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014c2e:	4b31      	ldr	r3, [pc, #196]	; (8014cf4 <xPortStartScheduler+0x134>)
 8014c30:	2207      	movs	r2, #7
 8014c32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c34:	e009      	b.n	8014c4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014c36:	4b2f      	ldr	r3, [pc, #188]	; (8014cf4 <xPortStartScheduler+0x134>)
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	3b01      	subs	r3, #1
 8014c3c:	4a2d      	ldr	r2, [pc, #180]	; (8014cf4 <xPortStartScheduler+0x134>)
 8014c3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014c40:	78fb      	ldrb	r3, [r7, #3]
 8014c42:	b2db      	uxtb	r3, r3
 8014c44:	005b      	lsls	r3, r3, #1
 8014c46:	b2db      	uxtb	r3, r3
 8014c48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c4a:	78fb      	ldrb	r3, [r7, #3]
 8014c4c:	b2db      	uxtb	r3, r3
 8014c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014c52:	2b80      	cmp	r3, #128	; 0x80
 8014c54:	d0ef      	beq.n	8014c36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014c56:	4b27      	ldr	r3, [pc, #156]	; (8014cf4 <xPortStartScheduler+0x134>)
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	f1c3 0307 	rsb	r3, r3, #7
 8014c5e:	2b04      	cmp	r3, #4
 8014c60:	d00a      	beq.n	8014c78 <xPortStartScheduler+0xb8>
	__asm volatile
 8014c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c66:	f383 8811 	msr	BASEPRI, r3
 8014c6a:	f3bf 8f6f 	isb	sy
 8014c6e:	f3bf 8f4f 	dsb	sy
 8014c72:	60bb      	str	r3, [r7, #8]
}
 8014c74:	bf00      	nop
 8014c76:	e7fe      	b.n	8014c76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014c78:	4b1e      	ldr	r3, [pc, #120]	; (8014cf4 <xPortStartScheduler+0x134>)
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	021b      	lsls	r3, r3, #8
 8014c7e:	4a1d      	ldr	r2, [pc, #116]	; (8014cf4 <xPortStartScheduler+0x134>)
 8014c80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014c82:	4b1c      	ldr	r3, [pc, #112]	; (8014cf4 <xPortStartScheduler+0x134>)
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014c8a:	4a1a      	ldr	r2, [pc, #104]	; (8014cf4 <xPortStartScheduler+0x134>)
 8014c8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	b2da      	uxtb	r2, r3
 8014c92:	697b      	ldr	r3, [r7, #20]
 8014c94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014c96:	4b18      	ldr	r3, [pc, #96]	; (8014cf8 <xPortStartScheduler+0x138>)
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	4a17      	ldr	r2, [pc, #92]	; (8014cf8 <xPortStartScheduler+0x138>)
 8014c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014ca0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014ca2:	4b15      	ldr	r3, [pc, #84]	; (8014cf8 <xPortStartScheduler+0x138>)
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	4a14      	ldr	r2, [pc, #80]	; (8014cf8 <xPortStartScheduler+0x138>)
 8014ca8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014cac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014cae:	f000 f8dd 	bl	8014e6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014cb2:	4b12      	ldr	r3, [pc, #72]	; (8014cfc <xPortStartScheduler+0x13c>)
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014cb8:	f000 f8fc 	bl	8014eb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014cbc:	4b10      	ldr	r3, [pc, #64]	; (8014d00 <xPortStartScheduler+0x140>)
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	4a0f      	ldr	r2, [pc, #60]	; (8014d00 <xPortStartScheduler+0x140>)
 8014cc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014cc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014cc8:	f7ff ff66 	bl	8014b98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014ccc:	f7fe fdbc 	bl	8013848 <vTaskSwitchContext>
	prvTaskExitError();
 8014cd0:	f7ff ff20 	bl	8014b14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014cd4:	2300      	movs	r3, #0
}
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	3718      	adds	r7, #24
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	bd80      	pop	{r7, pc}
 8014cde:	bf00      	nop
 8014ce0:	e000ed00 	.word	0xe000ed00
 8014ce4:	410fc271 	.word	0x410fc271
 8014ce8:	410fc270 	.word	0x410fc270
 8014cec:	e000e400 	.word	0xe000e400
 8014cf0:	200018c8 	.word	0x200018c8
 8014cf4:	200018cc 	.word	0x200018cc
 8014cf8:	e000ed20 	.word	0xe000ed20
 8014cfc:	200000c4 	.word	0x200000c4
 8014d00:	e000ef34 	.word	0xe000ef34

08014d04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014d04:	b480      	push	{r7}
 8014d06:	b083      	sub	sp, #12
 8014d08:	af00      	add	r7, sp, #0
	__asm volatile
 8014d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d0e:	f383 8811 	msr	BASEPRI, r3
 8014d12:	f3bf 8f6f 	isb	sy
 8014d16:	f3bf 8f4f 	dsb	sy
 8014d1a:	607b      	str	r3, [r7, #4]
}
 8014d1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014d1e:	4b0f      	ldr	r3, [pc, #60]	; (8014d5c <vPortEnterCritical+0x58>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	3301      	adds	r3, #1
 8014d24:	4a0d      	ldr	r2, [pc, #52]	; (8014d5c <vPortEnterCritical+0x58>)
 8014d26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014d28:	4b0c      	ldr	r3, [pc, #48]	; (8014d5c <vPortEnterCritical+0x58>)
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	2b01      	cmp	r3, #1
 8014d2e:	d10f      	bne.n	8014d50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014d30:	4b0b      	ldr	r3, [pc, #44]	; (8014d60 <vPortEnterCritical+0x5c>)
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	b2db      	uxtb	r3, r3
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d00a      	beq.n	8014d50 <vPortEnterCritical+0x4c>
	__asm volatile
 8014d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d3e:	f383 8811 	msr	BASEPRI, r3
 8014d42:	f3bf 8f6f 	isb	sy
 8014d46:	f3bf 8f4f 	dsb	sy
 8014d4a:	603b      	str	r3, [r7, #0]
}
 8014d4c:	bf00      	nop
 8014d4e:	e7fe      	b.n	8014d4e <vPortEnterCritical+0x4a>
	}
}
 8014d50:	bf00      	nop
 8014d52:	370c      	adds	r7, #12
 8014d54:	46bd      	mov	sp, r7
 8014d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5a:	4770      	bx	lr
 8014d5c:	200000c4 	.word	0x200000c4
 8014d60:	e000ed04 	.word	0xe000ed04

08014d64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014d64:	b480      	push	{r7}
 8014d66:	b083      	sub	sp, #12
 8014d68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014d6a:	4b12      	ldr	r3, [pc, #72]	; (8014db4 <vPortExitCritical+0x50>)
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d10a      	bne.n	8014d88 <vPortExitCritical+0x24>
	__asm volatile
 8014d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d76:	f383 8811 	msr	BASEPRI, r3
 8014d7a:	f3bf 8f6f 	isb	sy
 8014d7e:	f3bf 8f4f 	dsb	sy
 8014d82:	607b      	str	r3, [r7, #4]
}
 8014d84:	bf00      	nop
 8014d86:	e7fe      	b.n	8014d86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014d88:	4b0a      	ldr	r3, [pc, #40]	; (8014db4 <vPortExitCritical+0x50>)
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	3b01      	subs	r3, #1
 8014d8e:	4a09      	ldr	r2, [pc, #36]	; (8014db4 <vPortExitCritical+0x50>)
 8014d90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014d92:	4b08      	ldr	r3, [pc, #32]	; (8014db4 <vPortExitCritical+0x50>)
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d105      	bne.n	8014da6 <vPortExitCritical+0x42>
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014d9e:	683b      	ldr	r3, [r7, #0]
 8014da0:	f383 8811 	msr	BASEPRI, r3
}
 8014da4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014da6:	bf00      	nop
 8014da8:	370c      	adds	r7, #12
 8014daa:	46bd      	mov	sp, r7
 8014dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db0:	4770      	bx	lr
 8014db2:	bf00      	nop
 8014db4:	200000c4 	.word	0x200000c4
	...

08014dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014dc0:	f3ef 8009 	mrs	r0, PSP
 8014dc4:	f3bf 8f6f 	isb	sy
 8014dc8:	4b15      	ldr	r3, [pc, #84]	; (8014e20 <pxCurrentTCBConst>)
 8014dca:	681a      	ldr	r2, [r3, #0]
 8014dcc:	f01e 0f10 	tst.w	lr, #16
 8014dd0:	bf08      	it	eq
 8014dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dda:	6010      	str	r0, [r2, #0]
 8014ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014de0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014de4:	f380 8811 	msr	BASEPRI, r0
 8014de8:	f3bf 8f4f 	dsb	sy
 8014dec:	f3bf 8f6f 	isb	sy
 8014df0:	f7fe fd2a 	bl	8013848 <vTaskSwitchContext>
 8014df4:	f04f 0000 	mov.w	r0, #0
 8014df8:	f380 8811 	msr	BASEPRI, r0
 8014dfc:	bc09      	pop	{r0, r3}
 8014dfe:	6819      	ldr	r1, [r3, #0]
 8014e00:	6808      	ldr	r0, [r1, #0]
 8014e02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e06:	f01e 0f10 	tst.w	lr, #16
 8014e0a:	bf08      	it	eq
 8014e0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014e10:	f380 8809 	msr	PSP, r0
 8014e14:	f3bf 8f6f 	isb	sy
 8014e18:	4770      	bx	lr
 8014e1a:	bf00      	nop
 8014e1c:	f3af 8000 	nop.w

08014e20 <pxCurrentTCBConst>:
 8014e20:	2000129c 	.word	0x2000129c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014e24:	bf00      	nop
 8014e26:	bf00      	nop

08014e28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b082      	sub	sp, #8
 8014e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8014e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e32:	f383 8811 	msr	BASEPRI, r3
 8014e36:	f3bf 8f6f 	isb	sy
 8014e3a:	f3bf 8f4f 	dsb	sy
 8014e3e:	607b      	str	r3, [r7, #4]
}
 8014e40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014e42:	f7fe fc47 	bl	80136d4 <xTaskIncrementTick>
 8014e46:	4603      	mov	r3, r0
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d003      	beq.n	8014e54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014e4c:	4b06      	ldr	r3, [pc, #24]	; (8014e68 <xPortSysTickHandler+0x40>)
 8014e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e52:	601a      	str	r2, [r3, #0]
 8014e54:	2300      	movs	r3, #0
 8014e56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014e58:	683b      	ldr	r3, [r7, #0]
 8014e5a:	f383 8811 	msr	BASEPRI, r3
}
 8014e5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014e60:	bf00      	nop
 8014e62:	3708      	adds	r7, #8
 8014e64:	46bd      	mov	sp, r7
 8014e66:	bd80      	pop	{r7, pc}
 8014e68:	e000ed04 	.word	0xe000ed04

08014e6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014e6c:	b480      	push	{r7}
 8014e6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014e70:	4b0b      	ldr	r3, [pc, #44]	; (8014ea0 <vPortSetupTimerInterrupt+0x34>)
 8014e72:	2200      	movs	r2, #0
 8014e74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014e76:	4b0b      	ldr	r3, [pc, #44]	; (8014ea4 <vPortSetupTimerInterrupt+0x38>)
 8014e78:	2200      	movs	r2, #0
 8014e7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014e7c:	4b0a      	ldr	r3, [pc, #40]	; (8014ea8 <vPortSetupTimerInterrupt+0x3c>)
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	4a0a      	ldr	r2, [pc, #40]	; (8014eac <vPortSetupTimerInterrupt+0x40>)
 8014e82:	fba2 2303 	umull	r2, r3, r2, r3
 8014e86:	099b      	lsrs	r3, r3, #6
 8014e88:	4a09      	ldr	r2, [pc, #36]	; (8014eb0 <vPortSetupTimerInterrupt+0x44>)
 8014e8a:	3b01      	subs	r3, #1
 8014e8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014e8e:	4b04      	ldr	r3, [pc, #16]	; (8014ea0 <vPortSetupTimerInterrupt+0x34>)
 8014e90:	2207      	movs	r2, #7
 8014e92:	601a      	str	r2, [r3, #0]
}
 8014e94:	bf00      	nop
 8014e96:	46bd      	mov	sp, r7
 8014e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9c:	4770      	bx	lr
 8014e9e:	bf00      	nop
 8014ea0:	e000e010 	.word	0xe000e010
 8014ea4:	e000e018 	.word	0xe000e018
 8014ea8:	20000018 	.word	0x20000018
 8014eac:	10624dd3 	.word	0x10624dd3
 8014eb0:	e000e014 	.word	0xe000e014

08014eb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014eb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014ec4 <vPortEnableVFP+0x10>
 8014eb8:	6801      	ldr	r1, [r0, #0]
 8014eba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014ebe:	6001      	str	r1, [r0, #0]
 8014ec0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014ec2:	bf00      	nop
 8014ec4:	e000ed88 	.word	0xe000ed88

08014ec8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014ec8:	b480      	push	{r7}
 8014eca:	b085      	sub	sp, #20
 8014ecc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014ece:	f3ef 8305 	mrs	r3, IPSR
 8014ed2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	2b0f      	cmp	r3, #15
 8014ed8:	d914      	bls.n	8014f04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014eda:	4a17      	ldr	r2, [pc, #92]	; (8014f38 <vPortValidateInterruptPriority+0x70>)
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	4413      	add	r3, r2
 8014ee0:	781b      	ldrb	r3, [r3, #0]
 8014ee2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014ee4:	4b15      	ldr	r3, [pc, #84]	; (8014f3c <vPortValidateInterruptPriority+0x74>)
 8014ee6:	781b      	ldrb	r3, [r3, #0]
 8014ee8:	7afa      	ldrb	r2, [r7, #11]
 8014eea:	429a      	cmp	r2, r3
 8014eec:	d20a      	bcs.n	8014f04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8014eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ef2:	f383 8811 	msr	BASEPRI, r3
 8014ef6:	f3bf 8f6f 	isb	sy
 8014efa:	f3bf 8f4f 	dsb	sy
 8014efe:	607b      	str	r3, [r7, #4]
}
 8014f00:	bf00      	nop
 8014f02:	e7fe      	b.n	8014f02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014f04:	4b0e      	ldr	r3, [pc, #56]	; (8014f40 <vPortValidateInterruptPriority+0x78>)
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014f0c:	4b0d      	ldr	r3, [pc, #52]	; (8014f44 <vPortValidateInterruptPriority+0x7c>)
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	429a      	cmp	r2, r3
 8014f12:	d90a      	bls.n	8014f2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f18:	f383 8811 	msr	BASEPRI, r3
 8014f1c:	f3bf 8f6f 	isb	sy
 8014f20:	f3bf 8f4f 	dsb	sy
 8014f24:	603b      	str	r3, [r7, #0]
}
 8014f26:	bf00      	nop
 8014f28:	e7fe      	b.n	8014f28 <vPortValidateInterruptPriority+0x60>
	}
 8014f2a:	bf00      	nop
 8014f2c:	3714      	adds	r7, #20
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f34:	4770      	bx	lr
 8014f36:	bf00      	nop
 8014f38:	e000e3f0 	.word	0xe000e3f0
 8014f3c:	200018c8 	.word	0x200018c8
 8014f40:	e000ed0c 	.word	0xe000ed0c
 8014f44:	200018cc 	.word	0x200018cc

08014f48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b08a      	sub	sp, #40	; 0x28
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014f50:	2300      	movs	r3, #0
 8014f52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014f54:	f7fe fb02 	bl	801355c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014f58:	4b5b      	ldr	r3, [pc, #364]	; (80150c8 <pvPortMalloc+0x180>)
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d101      	bne.n	8014f64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014f60:	f000 f920 	bl	80151a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014f64:	4b59      	ldr	r3, [pc, #356]	; (80150cc <pvPortMalloc+0x184>)
 8014f66:	681a      	ldr	r2, [r3, #0]
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	4013      	ands	r3, r2
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	f040 8093 	bne.w	8015098 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d01d      	beq.n	8014fb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014f78:	2208      	movs	r2, #8
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	4413      	add	r3, r2
 8014f7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f003 0307 	and.w	r3, r3, #7
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d014      	beq.n	8014fb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	f023 0307 	bic.w	r3, r3, #7
 8014f90:	3308      	adds	r3, #8
 8014f92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	f003 0307 	and.w	r3, r3, #7
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d00a      	beq.n	8014fb4 <pvPortMalloc+0x6c>
	__asm volatile
 8014f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fa2:	f383 8811 	msr	BASEPRI, r3
 8014fa6:	f3bf 8f6f 	isb	sy
 8014faa:	f3bf 8f4f 	dsb	sy
 8014fae:	617b      	str	r3, [r7, #20]
}
 8014fb0:	bf00      	nop
 8014fb2:	e7fe      	b.n	8014fb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d06e      	beq.n	8015098 <pvPortMalloc+0x150>
 8014fba:	4b45      	ldr	r3, [pc, #276]	; (80150d0 <pvPortMalloc+0x188>)
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	687a      	ldr	r2, [r7, #4]
 8014fc0:	429a      	cmp	r2, r3
 8014fc2:	d869      	bhi.n	8015098 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014fc4:	4b43      	ldr	r3, [pc, #268]	; (80150d4 <pvPortMalloc+0x18c>)
 8014fc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014fc8:	4b42      	ldr	r3, [pc, #264]	; (80150d4 <pvPortMalloc+0x18c>)
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014fce:	e004      	b.n	8014fda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fdc:	685b      	ldr	r3, [r3, #4]
 8014fde:	687a      	ldr	r2, [r7, #4]
 8014fe0:	429a      	cmp	r2, r3
 8014fe2:	d903      	bls.n	8014fec <pvPortMalloc+0xa4>
 8014fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d1f1      	bne.n	8014fd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014fec:	4b36      	ldr	r3, [pc, #216]	; (80150c8 <pvPortMalloc+0x180>)
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ff2:	429a      	cmp	r2, r3
 8014ff4:	d050      	beq.n	8015098 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014ff6:	6a3b      	ldr	r3, [r7, #32]
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	2208      	movs	r2, #8
 8014ffc:	4413      	add	r3, r2
 8014ffe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015002:	681a      	ldr	r2, [r3, #0]
 8015004:	6a3b      	ldr	r3, [r7, #32]
 8015006:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801500a:	685a      	ldr	r2, [r3, #4]
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	1ad2      	subs	r2, r2, r3
 8015010:	2308      	movs	r3, #8
 8015012:	005b      	lsls	r3, r3, #1
 8015014:	429a      	cmp	r2, r3
 8015016:	d91f      	bls.n	8015058 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	4413      	add	r3, r2
 801501e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015020:	69bb      	ldr	r3, [r7, #24]
 8015022:	f003 0307 	and.w	r3, r3, #7
 8015026:	2b00      	cmp	r3, #0
 8015028:	d00a      	beq.n	8015040 <pvPortMalloc+0xf8>
	__asm volatile
 801502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801502e:	f383 8811 	msr	BASEPRI, r3
 8015032:	f3bf 8f6f 	isb	sy
 8015036:	f3bf 8f4f 	dsb	sy
 801503a:	613b      	str	r3, [r7, #16]
}
 801503c:	bf00      	nop
 801503e:	e7fe      	b.n	801503e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015042:	685a      	ldr	r2, [r3, #4]
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	1ad2      	subs	r2, r2, r3
 8015048:	69bb      	ldr	r3, [r7, #24]
 801504a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801504e:	687a      	ldr	r2, [r7, #4]
 8015050:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015052:	69b8      	ldr	r0, [r7, #24]
 8015054:	f000 f908 	bl	8015268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015058:	4b1d      	ldr	r3, [pc, #116]	; (80150d0 <pvPortMalloc+0x188>)
 801505a:	681a      	ldr	r2, [r3, #0]
 801505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801505e:	685b      	ldr	r3, [r3, #4]
 8015060:	1ad3      	subs	r3, r2, r3
 8015062:	4a1b      	ldr	r2, [pc, #108]	; (80150d0 <pvPortMalloc+0x188>)
 8015064:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015066:	4b1a      	ldr	r3, [pc, #104]	; (80150d0 <pvPortMalloc+0x188>)
 8015068:	681a      	ldr	r2, [r3, #0]
 801506a:	4b1b      	ldr	r3, [pc, #108]	; (80150d8 <pvPortMalloc+0x190>)
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	429a      	cmp	r2, r3
 8015070:	d203      	bcs.n	801507a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015072:	4b17      	ldr	r3, [pc, #92]	; (80150d0 <pvPortMalloc+0x188>)
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	4a18      	ldr	r2, [pc, #96]	; (80150d8 <pvPortMalloc+0x190>)
 8015078:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801507c:	685a      	ldr	r2, [r3, #4]
 801507e:	4b13      	ldr	r3, [pc, #76]	; (80150cc <pvPortMalloc+0x184>)
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	431a      	orrs	r2, r3
 8015084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015086:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801508a:	2200      	movs	r2, #0
 801508c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801508e:	4b13      	ldr	r3, [pc, #76]	; (80150dc <pvPortMalloc+0x194>)
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	3301      	adds	r3, #1
 8015094:	4a11      	ldr	r2, [pc, #68]	; (80150dc <pvPortMalloc+0x194>)
 8015096:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015098:	f7fe fa6e 	bl	8013578 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801509c:	69fb      	ldr	r3, [r7, #28]
 801509e:	f003 0307 	and.w	r3, r3, #7
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d00a      	beq.n	80150bc <pvPortMalloc+0x174>
	__asm volatile
 80150a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150aa:	f383 8811 	msr	BASEPRI, r3
 80150ae:	f3bf 8f6f 	isb	sy
 80150b2:	f3bf 8f4f 	dsb	sy
 80150b6:	60fb      	str	r3, [r7, #12]
}
 80150b8:	bf00      	nop
 80150ba:	e7fe      	b.n	80150ba <pvPortMalloc+0x172>
	return pvReturn;
 80150bc:	69fb      	ldr	r3, [r7, #28]
}
 80150be:	4618      	mov	r0, r3
 80150c0:	3728      	adds	r7, #40	; 0x28
 80150c2:	46bd      	mov	sp, r7
 80150c4:	bd80      	pop	{r7, pc}
 80150c6:	bf00      	nop
 80150c8:	200054d8 	.word	0x200054d8
 80150cc:	200054ec 	.word	0x200054ec
 80150d0:	200054dc 	.word	0x200054dc
 80150d4:	200054d0 	.word	0x200054d0
 80150d8:	200054e0 	.word	0x200054e0
 80150dc:	200054e4 	.word	0x200054e4

080150e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b086      	sub	sp, #24
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d04d      	beq.n	801518e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80150f2:	2308      	movs	r3, #8
 80150f4:	425b      	negs	r3, r3
 80150f6:	697a      	ldr	r2, [r7, #20]
 80150f8:	4413      	add	r3, r2
 80150fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80150fc:	697b      	ldr	r3, [r7, #20]
 80150fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015100:	693b      	ldr	r3, [r7, #16]
 8015102:	685a      	ldr	r2, [r3, #4]
 8015104:	4b24      	ldr	r3, [pc, #144]	; (8015198 <vPortFree+0xb8>)
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	4013      	ands	r3, r2
 801510a:	2b00      	cmp	r3, #0
 801510c:	d10a      	bne.n	8015124 <vPortFree+0x44>
	__asm volatile
 801510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015112:	f383 8811 	msr	BASEPRI, r3
 8015116:	f3bf 8f6f 	isb	sy
 801511a:	f3bf 8f4f 	dsb	sy
 801511e:	60fb      	str	r3, [r7, #12]
}
 8015120:	bf00      	nop
 8015122:	e7fe      	b.n	8015122 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d00a      	beq.n	8015142 <vPortFree+0x62>
	__asm volatile
 801512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015130:	f383 8811 	msr	BASEPRI, r3
 8015134:	f3bf 8f6f 	isb	sy
 8015138:	f3bf 8f4f 	dsb	sy
 801513c:	60bb      	str	r3, [r7, #8]
}
 801513e:	bf00      	nop
 8015140:	e7fe      	b.n	8015140 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015142:	693b      	ldr	r3, [r7, #16]
 8015144:	685a      	ldr	r2, [r3, #4]
 8015146:	4b14      	ldr	r3, [pc, #80]	; (8015198 <vPortFree+0xb8>)
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	4013      	ands	r3, r2
 801514c:	2b00      	cmp	r3, #0
 801514e:	d01e      	beq.n	801518e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015150:	693b      	ldr	r3, [r7, #16]
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d11a      	bne.n	801518e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015158:	693b      	ldr	r3, [r7, #16]
 801515a:	685a      	ldr	r2, [r3, #4]
 801515c:	4b0e      	ldr	r3, [pc, #56]	; (8015198 <vPortFree+0xb8>)
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	43db      	mvns	r3, r3
 8015162:	401a      	ands	r2, r3
 8015164:	693b      	ldr	r3, [r7, #16]
 8015166:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015168:	f7fe f9f8 	bl	801355c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801516c:	693b      	ldr	r3, [r7, #16]
 801516e:	685a      	ldr	r2, [r3, #4]
 8015170:	4b0a      	ldr	r3, [pc, #40]	; (801519c <vPortFree+0xbc>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	4413      	add	r3, r2
 8015176:	4a09      	ldr	r2, [pc, #36]	; (801519c <vPortFree+0xbc>)
 8015178:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801517a:	6938      	ldr	r0, [r7, #16]
 801517c:	f000 f874 	bl	8015268 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015180:	4b07      	ldr	r3, [pc, #28]	; (80151a0 <vPortFree+0xc0>)
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	3301      	adds	r3, #1
 8015186:	4a06      	ldr	r2, [pc, #24]	; (80151a0 <vPortFree+0xc0>)
 8015188:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801518a:	f7fe f9f5 	bl	8013578 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801518e:	bf00      	nop
 8015190:	3718      	adds	r7, #24
 8015192:	46bd      	mov	sp, r7
 8015194:	bd80      	pop	{r7, pc}
 8015196:	bf00      	nop
 8015198:	200054ec 	.word	0x200054ec
 801519c:	200054dc 	.word	0x200054dc
 80151a0:	200054e8 	.word	0x200054e8

080151a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80151a4:	b480      	push	{r7}
 80151a6:	b085      	sub	sp, #20
 80151a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80151aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80151ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80151b0:	4b27      	ldr	r3, [pc, #156]	; (8015250 <prvHeapInit+0xac>)
 80151b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	f003 0307 	and.w	r3, r3, #7
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d00c      	beq.n	80151d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	3307      	adds	r3, #7
 80151c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	f023 0307 	bic.w	r3, r3, #7
 80151ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80151cc:	68ba      	ldr	r2, [r7, #8]
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	1ad3      	subs	r3, r2, r3
 80151d2:	4a1f      	ldr	r2, [pc, #124]	; (8015250 <prvHeapInit+0xac>)
 80151d4:	4413      	add	r3, r2
 80151d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80151dc:	4a1d      	ldr	r2, [pc, #116]	; (8015254 <prvHeapInit+0xb0>)
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80151e2:	4b1c      	ldr	r3, [pc, #112]	; (8015254 <prvHeapInit+0xb0>)
 80151e4:	2200      	movs	r2, #0
 80151e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	68ba      	ldr	r2, [r7, #8]
 80151ec:	4413      	add	r3, r2
 80151ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80151f0:	2208      	movs	r2, #8
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	1a9b      	subs	r3, r3, r2
 80151f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	f023 0307 	bic.w	r3, r3, #7
 80151fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	4a15      	ldr	r2, [pc, #84]	; (8015258 <prvHeapInit+0xb4>)
 8015204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015206:	4b14      	ldr	r3, [pc, #80]	; (8015258 <prvHeapInit+0xb4>)
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	2200      	movs	r2, #0
 801520c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801520e:	4b12      	ldr	r3, [pc, #72]	; (8015258 <prvHeapInit+0xb4>)
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	2200      	movs	r2, #0
 8015214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801521a:	683b      	ldr	r3, [r7, #0]
 801521c:	68fa      	ldr	r2, [r7, #12]
 801521e:	1ad2      	subs	r2, r2, r3
 8015220:	683b      	ldr	r3, [r7, #0]
 8015222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015224:	4b0c      	ldr	r3, [pc, #48]	; (8015258 <prvHeapInit+0xb4>)
 8015226:	681a      	ldr	r2, [r3, #0]
 8015228:	683b      	ldr	r3, [r7, #0]
 801522a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801522c:	683b      	ldr	r3, [r7, #0]
 801522e:	685b      	ldr	r3, [r3, #4]
 8015230:	4a0a      	ldr	r2, [pc, #40]	; (801525c <prvHeapInit+0xb8>)
 8015232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015234:	683b      	ldr	r3, [r7, #0]
 8015236:	685b      	ldr	r3, [r3, #4]
 8015238:	4a09      	ldr	r2, [pc, #36]	; (8015260 <prvHeapInit+0xbc>)
 801523a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801523c:	4b09      	ldr	r3, [pc, #36]	; (8015264 <prvHeapInit+0xc0>)
 801523e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015242:	601a      	str	r2, [r3, #0]
}
 8015244:	bf00      	nop
 8015246:	3714      	adds	r7, #20
 8015248:	46bd      	mov	sp, r7
 801524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801524e:	4770      	bx	lr
 8015250:	200018d0 	.word	0x200018d0
 8015254:	200054d0 	.word	0x200054d0
 8015258:	200054d8 	.word	0x200054d8
 801525c:	200054e0 	.word	0x200054e0
 8015260:	200054dc 	.word	0x200054dc
 8015264:	200054ec 	.word	0x200054ec

08015268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015268:	b480      	push	{r7}
 801526a:	b085      	sub	sp, #20
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015270:	4b28      	ldr	r3, [pc, #160]	; (8015314 <prvInsertBlockIntoFreeList+0xac>)
 8015272:	60fb      	str	r3, [r7, #12]
 8015274:	e002      	b.n	801527c <prvInsertBlockIntoFreeList+0x14>
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	60fb      	str	r3, [r7, #12]
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	687a      	ldr	r2, [r7, #4]
 8015282:	429a      	cmp	r2, r3
 8015284:	d8f7      	bhi.n	8015276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	685b      	ldr	r3, [r3, #4]
 801528e:	68ba      	ldr	r2, [r7, #8]
 8015290:	4413      	add	r3, r2
 8015292:	687a      	ldr	r2, [r7, #4]
 8015294:	429a      	cmp	r2, r3
 8015296:	d108      	bne.n	80152aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	685a      	ldr	r2, [r3, #4]
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	685b      	ldr	r3, [r3, #4]
 80152a0:	441a      	add	r2, r3
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	685b      	ldr	r3, [r3, #4]
 80152b2:	68ba      	ldr	r2, [r7, #8]
 80152b4:	441a      	add	r2, r3
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	429a      	cmp	r2, r3
 80152bc:	d118      	bne.n	80152f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	681a      	ldr	r2, [r3, #0]
 80152c2:	4b15      	ldr	r3, [pc, #84]	; (8015318 <prvInsertBlockIntoFreeList+0xb0>)
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	429a      	cmp	r2, r3
 80152c8:	d00d      	beq.n	80152e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	685a      	ldr	r2, [r3, #4]
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	685b      	ldr	r3, [r3, #4]
 80152d4:	441a      	add	r2, r3
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	681a      	ldr	r2, [r3, #0]
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	601a      	str	r2, [r3, #0]
 80152e4:	e008      	b.n	80152f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80152e6:	4b0c      	ldr	r3, [pc, #48]	; (8015318 <prvInsertBlockIntoFreeList+0xb0>)
 80152e8:	681a      	ldr	r2, [r3, #0]
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	601a      	str	r2, [r3, #0]
 80152ee:	e003      	b.n	80152f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	681a      	ldr	r2, [r3, #0]
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80152f8:	68fa      	ldr	r2, [r7, #12]
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	429a      	cmp	r2, r3
 80152fe:	d002      	beq.n	8015306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	687a      	ldr	r2, [r7, #4]
 8015304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015306:	bf00      	nop
 8015308:	3714      	adds	r7, #20
 801530a:	46bd      	mov	sp, r7
 801530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015310:	4770      	bx	lr
 8015312:	bf00      	nop
 8015314:	200054d0 	.word	0x200054d0
 8015318:	200054d8 	.word	0x200054d8

0801531c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015320:	2200      	movs	r2, #0
 8015322:	4912      	ldr	r1, [pc, #72]	; (801536c <MX_USB_DEVICE_Init+0x50>)
 8015324:	4812      	ldr	r0, [pc, #72]	; (8015370 <MX_USB_DEVICE_Init+0x54>)
 8015326:	f7f9 ff1f 	bl	800f168 <USBD_Init>
 801532a:	4603      	mov	r3, r0
 801532c:	2b00      	cmp	r3, #0
 801532e:	d001      	beq.n	8015334 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015330:	f7ef f9b6 	bl	80046a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015334:	490f      	ldr	r1, [pc, #60]	; (8015374 <MX_USB_DEVICE_Init+0x58>)
 8015336:	480e      	ldr	r0, [pc, #56]	; (8015370 <MX_USB_DEVICE_Init+0x54>)
 8015338:	f7f9 ff46 	bl	800f1c8 <USBD_RegisterClass>
 801533c:	4603      	mov	r3, r0
 801533e:	2b00      	cmp	r3, #0
 8015340:	d001      	beq.n	8015346 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015342:	f7ef f9ad 	bl	80046a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015346:	490c      	ldr	r1, [pc, #48]	; (8015378 <MX_USB_DEVICE_Init+0x5c>)
 8015348:	4809      	ldr	r0, [pc, #36]	; (8015370 <MX_USB_DEVICE_Init+0x54>)
 801534a:	f7f9 fe37 	bl	800efbc <USBD_CDC_RegisterInterface>
 801534e:	4603      	mov	r3, r0
 8015350:	2b00      	cmp	r3, #0
 8015352:	d001      	beq.n	8015358 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015354:	f7ef f9a4 	bl	80046a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015358:	4805      	ldr	r0, [pc, #20]	; (8015370 <MX_USB_DEVICE_Init+0x54>)
 801535a:	f7f9 ff6b 	bl	800f234 <USBD_Start>
 801535e:	4603      	mov	r3, r0
 8015360:	2b00      	cmp	r3, #0
 8015362:	d001      	beq.n	8015368 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015364:	f7ef f99c 	bl	80046a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015368:	bf00      	nop
 801536a:	bd80      	pop	{r7, pc}
 801536c:	200000dc 	.word	0x200000dc
 8015370:	200054f0 	.word	0x200054f0
 8015374:	20000044 	.word	0x20000044
 8015378:	200000c8 	.word	0x200000c8

0801537c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015380:	2200      	movs	r2, #0
 8015382:	4905      	ldr	r1, [pc, #20]	; (8015398 <CDC_Init_FS+0x1c>)
 8015384:	4805      	ldr	r0, [pc, #20]	; (801539c <CDC_Init_FS+0x20>)
 8015386:	f7f9 fe33 	bl	800eff0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801538a:	4905      	ldr	r1, [pc, #20]	; (80153a0 <CDC_Init_FS+0x24>)
 801538c:	4803      	ldr	r0, [pc, #12]	; (801539c <CDC_Init_FS+0x20>)
 801538e:	f7f9 fe51 	bl	800f034 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015392:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015394:	4618      	mov	r0, r3
 8015396:	bd80      	pop	{r7, pc}
 8015398:	20005fd8 	.word	0x20005fd8
 801539c:	200054f0 	.word	0x200054f0
 80153a0:	200057d8 	.word	0x200057d8

080153a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80153a4:	b480      	push	{r7}
 80153a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80153a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	46bd      	mov	sp, r7
 80153ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b2:	4770      	bx	lr

080153b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80153b4:	b480      	push	{r7}
 80153b6:	b083      	sub	sp, #12
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	4603      	mov	r3, r0
 80153bc:	6039      	str	r1, [r7, #0]
 80153be:	71fb      	strb	r3, [r7, #7]
 80153c0:	4613      	mov	r3, r2
 80153c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80153c4:	79fb      	ldrb	r3, [r7, #7]
 80153c6:	2b23      	cmp	r3, #35	; 0x23
 80153c8:	d84a      	bhi.n	8015460 <CDC_Control_FS+0xac>
 80153ca:	a201      	add	r2, pc, #4	; (adr r2, 80153d0 <CDC_Control_FS+0x1c>)
 80153cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153d0:	08015461 	.word	0x08015461
 80153d4:	08015461 	.word	0x08015461
 80153d8:	08015461 	.word	0x08015461
 80153dc:	08015461 	.word	0x08015461
 80153e0:	08015461 	.word	0x08015461
 80153e4:	08015461 	.word	0x08015461
 80153e8:	08015461 	.word	0x08015461
 80153ec:	08015461 	.word	0x08015461
 80153f0:	08015461 	.word	0x08015461
 80153f4:	08015461 	.word	0x08015461
 80153f8:	08015461 	.word	0x08015461
 80153fc:	08015461 	.word	0x08015461
 8015400:	08015461 	.word	0x08015461
 8015404:	08015461 	.word	0x08015461
 8015408:	08015461 	.word	0x08015461
 801540c:	08015461 	.word	0x08015461
 8015410:	08015461 	.word	0x08015461
 8015414:	08015461 	.word	0x08015461
 8015418:	08015461 	.word	0x08015461
 801541c:	08015461 	.word	0x08015461
 8015420:	08015461 	.word	0x08015461
 8015424:	08015461 	.word	0x08015461
 8015428:	08015461 	.word	0x08015461
 801542c:	08015461 	.word	0x08015461
 8015430:	08015461 	.word	0x08015461
 8015434:	08015461 	.word	0x08015461
 8015438:	08015461 	.word	0x08015461
 801543c:	08015461 	.word	0x08015461
 8015440:	08015461 	.word	0x08015461
 8015444:	08015461 	.word	0x08015461
 8015448:	08015461 	.word	0x08015461
 801544c:	08015461 	.word	0x08015461
 8015450:	08015461 	.word	0x08015461
 8015454:	08015461 	.word	0x08015461
 8015458:	08015461 	.word	0x08015461
 801545c:	08015461 	.word	0x08015461
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015460:	bf00      	nop
  }

  return (USBD_OK);
 8015462:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015464:	4618      	mov	r0, r3
 8015466:	370c      	adds	r7, #12
 8015468:	46bd      	mov	sp, r7
 801546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801546e:	4770      	bx	lr

08015470 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b082      	sub	sp, #8
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
 8015478:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801547a:	6879      	ldr	r1, [r7, #4]
 801547c:	481b      	ldr	r0, [pc, #108]	; (80154ec <CDC_Receive_FS+0x7c>)
 801547e:	f7f9 fdd9 	bl	800f034 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015482:	481a      	ldr	r0, [pc, #104]	; (80154ec <CDC_Receive_FS+0x7c>)
 8015484:	f7f9 fe3a 	bl	800f0fc <USBD_CDC_ReceivePacket>

	if (Buf[0] == '\r') {
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	781b      	ldrb	r3, [r3, #0]
 801548c:	2b0d      	cmp	r3, #13
 801548e:	d114      	bne.n	80154ba <CDC_Receive_FS+0x4a>
		memcpy(usb_rx_buffer.buffer, _buffer.buffer, sizeof(usb_rx_buffer.buffer));
 8015490:	4a17      	ldr	r2, [pc, #92]	; (80154f0 <CDC_Receive_FS+0x80>)
 8015492:	4b18      	ldr	r3, [pc, #96]	; (80154f4 <CDC_Receive_FS+0x84>)
 8015494:	cb03      	ldmia	r3!, {r0, r1}
 8015496:	6010      	str	r0, [r2, #0]
 8015498:	6051      	str	r1, [r2, #4]
		memset(_buffer.buffer, 0, EVENT_RECEIVE_USB);
 801549a:	2204      	movs	r2, #4
 801549c:	2100      	movs	r1, #0
 801549e:	4815      	ldr	r0, [pc, #84]	; (80154f4 <CDC_Receive_FS+0x84>)
 80154a0:	f000 fe34 	bl	801610c <memset>
		_buffer.pos = 0;
 80154a4:	4b13      	ldr	r3, [pc, #76]	; (80154f4 <CDC_Receive_FS+0x84>)
 80154a6:	2200      	movs	r2, #0
 80154a8:	811a      	strh	r2, [r3, #8]
		osEventFlagsSet(EventReceiveHandle, EVENT_RECEIVE_USB);
 80154aa:	4b13      	ldr	r3, [pc, #76]	; (80154f8 <CDC_Receive_FS+0x88>)
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	2104      	movs	r1, #4
 80154b0:	4618      	mov	r0, r3
 80154b2:	f7fc f925 	bl	8011700 <osEventFlagsSet>
		return (USBD_OK);
 80154b6:	2300      	movs	r3, #0
 80154b8:	e014      	b.n	80154e4 <CDC_Receive_FS+0x74>
	}

	_buffer.buffer[_buffer.pos++] = Buf[0];
 80154ba:	4b0e      	ldr	r3, [pc, #56]	; (80154f4 <CDC_Receive_FS+0x84>)
 80154bc:	891b      	ldrh	r3, [r3, #8]
 80154be:	b29b      	uxth	r3, r3
 80154c0:	1c5a      	adds	r2, r3, #1
 80154c2:	b291      	uxth	r1, r2
 80154c4:	4a0b      	ldr	r2, [pc, #44]	; (80154f4 <CDC_Receive_FS+0x84>)
 80154c6:	8111      	strh	r1, [r2, #8]
 80154c8:	461a      	mov	r2, r3
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	7819      	ldrb	r1, [r3, #0]
 80154ce:	4b09      	ldr	r3, [pc, #36]	; (80154f4 <CDC_Receive_FS+0x84>)
 80154d0:	5499      	strb	r1, [r3, r2]
	if (_buffer.pos > USB_BUFFER_SIZE) {
 80154d2:	4b08      	ldr	r3, [pc, #32]	; (80154f4 <CDC_Receive_FS+0x84>)
 80154d4:	891b      	ldrh	r3, [r3, #8]
 80154d6:	b29b      	uxth	r3, r3
 80154d8:	2b08      	cmp	r3, #8
 80154da:	d902      	bls.n	80154e2 <CDC_Receive_FS+0x72>

		_buffer.pos = 0;
 80154dc:	4b05      	ldr	r3, [pc, #20]	; (80154f4 <CDC_Receive_FS+0x84>)
 80154de:	2200      	movs	r2, #0
 80154e0:	811a      	strh	r2, [r3, #8]
	}

	return (USBD_OK);
 80154e2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80154e4:	4618      	mov	r0, r3
 80154e6:	3708      	adds	r7, #8
 80154e8:	46bd      	mov	sp, r7
 80154ea:	bd80      	pop	{r7, pc}
 80154ec:	200054f0 	.word	0x200054f0
 80154f0:	20000400 	.word	0x20000400
 80154f4:	200057cc 	.word	0x200057cc
 80154f8:	200003e4 	.word	0x200003e4

080154fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b084      	sub	sp, #16
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]
 8015504:	460b      	mov	r3, r1
 8015506:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015508:	2300      	movs	r3, #0
 801550a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801550c:	4b0d      	ldr	r3, [pc, #52]	; (8015544 <CDC_Transmit_FS+0x48>)
 801550e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015512:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015514:	68bb      	ldr	r3, [r7, #8]
 8015516:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801551a:	2b00      	cmp	r3, #0
 801551c:	d001      	beq.n	8015522 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801551e:	2301      	movs	r3, #1
 8015520:	e00b      	b.n	801553a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8015522:	887b      	ldrh	r3, [r7, #2]
 8015524:	461a      	mov	r2, r3
 8015526:	6879      	ldr	r1, [r7, #4]
 8015528:	4806      	ldr	r0, [pc, #24]	; (8015544 <CDC_Transmit_FS+0x48>)
 801552a:	f7f9 fd61 	bl	800eff0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801552e:	4805      	ldr	r0, [pc, #20]	; (8015544 <CDC_Transmit_FS+0x48>)
 8015530:	f7f9 fd9e 	bl	800f070 <USBD_CDC_TransmitPacket>
 8015534:	4603      	mov	r3, r0
 8015536:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015538:	7bfb      	ldrb	r3, [r7, #15]
}
 801553a:	4618      	mov	r0, r3
 801553c:	3710      	adds	r7, #16
 801553e:	46bd      	mov	sp, r7
 8015540:	bd80      	pop	{r7, pc}
 8015542:	bf00      	nop
 8015544:	200054f0 	.word	0x200054f0

08015548 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015548:	b480      	push	{r7}
 801554a:	b087      	sub	sp, #28
 801554c:	af00      	add	r7, sp, #0
 801554e:	60f8      	str	r0, [r7, #12]
 8015550:	60b9      	str	r1, [r7, #8]
 8015552:	4613      	mov	r3, r2
 8015554:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015556:	2300      	movs	r3, #0
 8015558:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801555a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801555e:	4618      	mov	r0, r3
 8015560:	371c      	adds	r7, #28
 8015562:	46bd      	mov	sp, r7
 8015564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015568:	4770      	bx	lr
	...

0801556c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801556c:	b480      	push	{r7}
 801556e:	b083      	sub	sp, #12
 8015570:	af00      	add	r7, sp, #0
 8015572:	4603      	mov	r3, r0
 8015574:	6039      	str	r1, [r7, #0]
 8015576:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015578:	683b      	ldr	r3, [r7, #0]
 801557a:	2212      	movs	r2, #18
 801557c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801557e:	4b03      	ldr	r3, [pc, #12]	; (801558c <USBD_FS_DeviceDescriptor+0x20>)
}
 8015580:	4618      	mov	r0, r3
 8015582:	370c      	adds	r7, #12
 8015584:	46bd      	mov	sp, r7
 8015586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801558a:	4770      	bx	lr
 801558c:	200000fc 	.word	0x200000fc

08015590 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015590:	b480      	push	{r7}
 8015592:	b083      	sub	sp, #12
 8015594:	af00      	add	r7, sp, #0
 8015596:	4603      	mov	r3, r0
 8015598:	6039      	str	r1, [r7, #0]
 801559a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801559c:	683b      	ldr	r3, [r7, #0]
 801559e:	2204      	movs	r2, #4
 80155a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80155a2:	4b03      	ldr	r3, [pc, #12]	; (80155b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80155a4:	4618      	mov	r0, r3
 80155a6:	370c      	adds	r7, #12
 80155a8:	46bd      	mov	sp, r7
 80155aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ae:	4770      	bx	lr
 80155b0:	2000011c 	.word	0x2000011c

080155b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b082      	sub	sp, #8
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	4603      	mov	r3, r0
 80155bc:	6039      	str	r1, [r7, #0]
 80155be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80155c0:	79fb      	ldrb	r3, [r7, #7]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d105      	bne.n	80155d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80155c6:	683a      	ldr	r2, [r7, #0]
 80155c8:	4907      	ldr	r1, [pc, #28]	; (80155e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80155ca:	4808      	ldr	r0, [pc, #32]	; (80155ec <USBD_FS_ProductStrDescriptor+0x38>)
 80155cc:	f7fb f808 	bl	80105e0 <USBD_GetString>
 80155d0:	e004      	b.n	80155dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80155d2:	683a      	ldr	r2, [r7, #0]
 80155d4:	4904      	ldr	r1, [pc, #16]	; (80155e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80155d6:	4805      	ldr	r0, [pc, #20]	; (80155ec <USBD_FS_ProductStrDescriptor+0x38>)
 80155d8:	f7fb f802 	bl	80105e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80155dc:	4b02      	ldr	r3, [pc, #8]	; (80155e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80155de:	4618      	mov	r0, r3
 80155e0:	3708      	adds	r7, #8
 80155e2:	46bd      	mov	sp, r7
 80155e4:	bd80      	pop	{r7, pc}
 80155e6:	bf00      	nop
 80155e8:	200067d8 	.word	0x200067d8
 80155ec:	080198a0 	.word	0x080198a0

080155f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b082      	sub	sp, #8
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	4603      	mov	r3, r0
 80155f8:	6039      	str	r1, [r7, #0]
 80155fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80155fc:	683a      	ldr	r2, [r7, #0]
 80155fe:	4904      	ldr	r1, [pc, #16]	; (8015610 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015600:	4804      	ldr	r0, [pc, #16]	; (8015614 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015602:	f7fa ffed 	bl	80105e0 <USBD_GetString>
  return USBD_StrDesc;
 8015606:	4b02      	ldr	r3, [pc, #8]	; (8015610 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015608:	4618      	mov	r0, r3
 801560a:	3708      	adds	r7, #8
 801560c:	46bd      	mov	sp, r7
 801560e:	bd80      	pop	{r7, pc}
 8015610:	200067d8 	.word	0x200067d8
 8015614:	080198b8 	.word	0x080198b8

08015618 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015618:	b580      	push	{r7, lr}
 801561a:	b082      	sub	sp, #8
 801561c:	af00      	add	r7, sp, #0
 801561e:	4603      	mov	r3, r0
 8015620:	6039      	str	r1, [r7, #0]
 8015622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015624:	683b      	ldr	r3, [r7, #0]
 8015626:	221a      	movs	r2, #26
 8015628:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801562a:	f000 f855 	bl	80156d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801562e:	4b02      	ldr	r3, [pc, #8]	; (8015638 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015630:	4618      	mov	r0, r3
 8015632:	3708      	adds	r7, #8
 8015634:	46bd      	mov	sp, r7
 8015636:	bd80      	pop	{r7, pc}
 8015638:	20000120 	.word	0x20000120

0801563c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801563c:	b580      	push	{r7, lr}
 801563e:	b082      	sub	sp, #8
 8015640:	af00      	add	r7, sp, #0
 8015642:	4603      	mov	r3, r0
 8015644:	6039      	str	r1, [r7, #0]
 8015646:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015648:	79fb      	ldrb	r3, [r7, #7]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d105      	bne.n	801565a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801564e:	683a      	ldr	r2, [r7, #0]
 8015650:	4907      	ldr	r1, [pc, #28]	; (8015670 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015652:	4808      	ldr	r0, [pc, #32]	; (8015674 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015654:	f7fa ffc4 	bl	80105e0 <USBD_GetString>
 8015658:	e004      	b.n	8015664 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801565a:	683a      	ldr	r2, [r7, #0]
 801565c:	4904      	ldr	r1, [pc, #16]	; (8015670 <USBD_FS_ConfigStrDescriptor+0x34>)
 801565e:	4805      	ldr	r0, [pc, #20]	; (8015674 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015660:	f7fa ffbe 	bl	80105e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015664:	4b02      	ldr	r3, [pc, #8]	; (8015670 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015666:	4618      	mov	r0, r3
 8015668:	3708      	adds	r7, #8
 801566a:	46bd      	mov	sp, r7
 801566c:	bd80      	pop	{r7, pc}
 801566e:	bf00      	nop
 8015670:	200067d8 	.word	0x200067d8
 8015674:	080198cc 	.word	0x080198cc

08015678 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015678:	b580      	push	{r7, lr}
 801567a:	b082      	sub	sp, #8
 801567c:	af00      	add	r7, sp, #0
 801567e:	4603      	mov	r3, r0
 8015680:	6039      	str	r1, [r7, #0]
 8015682:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015684:	79fb      	ldrb	r3, [r7, #7]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d105      	bne.n	8015696 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801568a:	683a      	ldr	r2, [r7, #0]
 801568c:	4907      	ldr	r1, [pc, #28]	; (80156ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 801568e:	4808      	ldr	r0, [pc, #32]	; (80156b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015690:	f7fa ffa6 	bl	80105e0 <USBD_GetString>
 8015694:	e004      	b.n	80156a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015696:	683a      	ldr	r2, [r7, #0]
 8015698:	4904      	ldr	r1, [pc, #16]	; (80156ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 801569a:	4805      	ldr	r0, [pc, #20]	; (80156b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801569c:	f7fa ffa0 	bl	80105e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80156a0:	4b02      	ldr	r3, [pc, #8]	; (80156ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80156a2:	4618      	mov	r0, r3
 80156a4:	3708      	adds	r7, #8
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}
 80156aa:	bf00      	nop
 80156ac:	200067d8 	.word	0x200067d8
 80156b0:	080198d8 	.word	0x080198d8

080156b4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80156b4:	b480      	push	{r7}
 80156b6:	b083      	sub	sp, #12
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	4603      	mov	r3, r0
 80156bc:	6039      	str	r1, [r7, #0]
 80156be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80156c0:	683b      	ldr	r3, [r7, #0]
 80156c2:	220c      	movs	r2, #12
 80156c4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80156c6:	4b03      	ldr	r3, [pc, #12]	; (80156d4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80156c8:	4618      	mov	r0, r3
 80156ca:	370c      	adds	r7, #12
 80156cc:	46bd      	mov	sp, r7
 80156ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d2:	4770      	bx	lr
 80156d4:	20000110 	.word	0x20000110

080156d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b084      	sub	sp, #16
 80156dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80156de:	4b0f      	ldr	r3, [pc, #60]	; (801571c <Get_SerialNum+0x44>)
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80156e4:	4b0e      	ldr	r3, [pc, #56]	; (8015720 <Get_SerialNum+0x48>)
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80156ea:	4b0e      	ldr	r3, [pc, #56]	; (8015724 <Get_SerialNum+0x4c>)
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80156f0:	68fa      	ldr	r2, [r7, #12]
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	4413      	add	r3, r2
 80156f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d009      	beq.n	8015712 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80156fe:	2208      	movs	r2, #8
 8015700:	4909      	ldr	r1, [pc, #36]	; (8015728 <Get_SerialNum+0x50>)
 8015702:	68f8      	ldr	r0, [r7, #12]
 8015704:	f000 f814 	bl	8015730 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015708:	2204      	movs	r2, #4
 801570a:	4908      	ldr	r1, [pc, #32]	; (801572c <Get_SerialNum+0x54>)
 801570c:	68b8      	ldr	r0, [r7, #8]
 801570e:	f000 f80f 	bl	8015730 <IntToUnicode>
  }
}
 8015712:	bf00      	nop
 8015714:	3710      	adds	r7, #16
 8015716:	46bd      	mov	sp, r7
 8015718:	bd80      	pop	{r7, pc}
 801571a:	bf00      	nop
 801571c:	1fff7a10 	.word	0x1fff7a10
 8015720:	1fff7a14 	.word	0x1fff7a14
 8015724:	1fff7a18 	.word	0x1fff7a18
 8015728:	20000122 	.word	0x20000122
 801572c:	20000132 	.word	0x20000132

08015730 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015730:	b480      	push	{r7}
 8015732:	b087      	sub	sp, #28
 8015734:	af00      	add	r7, sp, #0
 8015736:	60f8      	str	r0, [r7, #12]
 8015738:	60b9      	str	r1, [r7, #8]
 801573a:	4613      	mov	r3, r2
 801573c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801573e:	2300      	movs	r3, #0
 8015740:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015742:	2300      	movs	r3, #0
 8015744:	75fb      	strb	r3, [r7, #23]
 8015746:	e027      	b.n	8015798 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	0f1b      	lsrs	r3, r3, #28
 801574c:	2b09      	cmp	r3, #9
 801574e:	d80b      	bhi.n	8015768 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	0f1b      	lsrs	r3, r3, #28
 8015754:	b2da      	uxtb	r2, r3
 8015756:	7dfb      	ldrb	r3, [r7, #23]
 8015758:	005b      	lsls	r3, r3, #1
 801575a:	4619      	mov	r1, r3
 801575c:	68bb      	ldr	r3, [r7, #8]
 801575e:	440b      	add	r3, r1
 8015760:	3230      	adds	r2, #48	; 0x30
 8015762:	b2d2      	uxtb	r2, r2
 8015764:	701a      	strb	r2, [r3, #0]
 8015766:	e00a      	b.n	801577e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	0f1b      	lsrs	r3, r3, #28
 801576c:	b2da      	uxtb	r2, r3
 801576e:	7dfb      	ldrb	r3, [r7, #23]
 8015770:	005b      	lsls	r3, r3, #1
 8015772:	4619      	mov	r1, r3
 8015774:	68bb      	ldr	r3, [r7, #8]
 8015776:	440b      	add	r3, r1
 8015778:	3237      	adds	r2, #55	; 0x37
 801577a:	b2d2      	uxtb	r2, r2
 801577c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	011b      	lsls	r3, r3, #4
 8015782:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015784:	7dfb      	ldrb	r3, [r7, #23]
 8015786:	005b      	lsls	r3, r3, #1
 8015788:	3301      	adds	r3, #1
 801578a:	68ba      	ldr	r2, [r7, #8]
 801578c:	4413      	add	r3, r2
 801578e:	2200      	movs	r2, #0
 8015790:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015792:	7dfb      	ldrb	r3, [r7, #23]
 8015794:	3301      	adds	r3, #1
 8015796:	75fb      	strb	r3, [r7, #23]
 8015798:	7dfa      	ldrb	r2, [r7, #23]
 801579a:	79fb      	ldrb	r3, [r7, #7]
 801579c:	429a      	cmp	r2, r3
 801579e:	d3d3      	bcc.n	8015748 <IntToUnicode+0x18>
  }
}
 80157a0:	bf00      	nop
 80157a2:	bf00      	nop
 80157a4:	371c      	adds	r7, #28
 80157a6:	46bd      	mov	sp, r7
 80157a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ac:	4770      	bx	lr
	...

080157b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b0a0      	sub	sp, #128	; 0x80
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80157b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80157bc:	2200      	movs	r2, #0
 80157be:	601a      	str	r2, [r3, #0]
 80157c0:	605a      	str	r2, [r3, #4]
 80157c2:	609a      	str	r2, [r3, #8]
 80157c4:	60da      	str	r2, [r3, #12]
 80157c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80157c8:	f107 0310 	add.w	r3, r7, #16
 80157cc:	225c      	movs	r2, #92	; 0x5c
 80157ce:	2100      	movs	r1, #0
 80157d0:	4618      	mov	r0, r3
 80157d2:	f000 fc9b 	bl	801610c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80157de:	d149      	bne.n	8015874 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80157e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80157e4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80157e6:	2300      	movs	r3, #0
 80157e8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80157ea:	f107 0310 	add.w	r3, r7, #16
 80157ee:	4618      	mov	r0, r3
 80157f0:	f7f3 ff38 	bl	8009664 <HAL_RCCEx_PeriphCLKConfig>
 80157f4:	4603      	mov	r3, r0
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d001      	beq.n	80157fe <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80157fa:	f7ee ff51 	bl	80046a0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80157fe:	2300      	movs	r3, #0
 8015800:	60fb      	str	r3, [r7, #12]
 8015802:	4b1e      	ldr	r3, [pc, #120]	; (801587c <HAL_PCD_MspInit+0xcc>)
 8015804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015806:	4a1d      	ldr	r2, [pc, #116]	; (801587c <HAL_PCD_MspInit+0xcc>)
 8015808:	f043 0301 	orr.w	r3, r3, #1
 801580c:	6313      	str	r3, [r2, #48]	; 0x30
 801580e:	4b1b      	ldr	r3, [pc, #108]	; (801587c <HAL_PCD_MspInit+0xcc>)
 8015810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015812:	f003 0301 	and.w	r3, r3, #1
 8015816:	60fb      	str	r3, [r7, #12]
 8015818:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801581a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801581e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015820:	2302      	movs	r3, #2
 8015822:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015824:	2300      	movs	r3, #0
 8015826:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015828:	2303      	movs	r3, #3
 801582a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801582c:	230a      	movs	r3, #10
 801582e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015830:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015834:	4619      	mov	r1, r3
 8015836:	4812      	ldr	r0, [pc, #72]	; (8015880 <HAL_PCD_MspInit+0xd0>)
 8015838:	f7f0 fcea 	bl	8006210 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801583c:	4b0f      	ldr	r3, [pc, #60]	; (801587c <HAL_PCD_MspInit+0xcc>)
 801583e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015840:	4a0e      	ldr	r2, [pc, #56]	; (801587c <HAL_PCD_MspInit+0xcc>)
 8015842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015846:	6353      	str	r3, [r2, #52]	; 0x34
 8015848:	2300      	movs	r3, #0
 801584a:	60bb      	str	r3, [r7, #8]
 801584c:	4b0b      	ldr	r3, [pc, #44]	; (801587c <HAL_PCD_MspInit+0xcc>)
 801584e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015850:	4a0a      	ldr	r2, [pc, #40]	; (801587c <HAL_PCD_MspInit+0xcc>)
 8015852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015856:	6453      	str	r3, [r2, #68]	; 0x44
 8015858:	4b08      	ldr	r3, [pc, #32]	; (801587c <HAL_PCD_MspInit+0xcc>)
 801585a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801585c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015860:	60bb      	str	r3, [r7, #8]
 8015862:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015864:	2200      	movs	r2, #0
 8015866:	2105      	movs	r1, #5
 8015868:	2043      	movs	r0, #67	; 0x43
 801586a:	f7f0 fc15 	bl	8006098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801586e:	2043      	movs	r0, #67	; 0x43
 8015870:	f7f0 fc2e 	bl	80060d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015874:	bf00      	nop
 8015876:	3780      	adds	r7, #128	; 0x80
 8015878:	46bd      	mov	sp, r7
 801587a:	bd80      	pop	{r7, pc}
 801587c:	40023800 	.word	0x40023800
 8015880:	40020000 	.word	0x40020000

08015884 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015884:	b580      	push	{r7, lr}
 8015886:	b082      	sub	sp, #8
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8015898:	4619      	mov	r1, r3
 801589a:	4610      	mov	r0, r2
 801589c:	f7f9 fd17 	bl	800f2ce <USBD_LL_SetupStage>
}
 80158a0:	bf00      	nop
 80158a2:	3708      	adds	r7, #8
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd80      	pop	{r7, pc}

080158a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b082      	sub	sp, #8
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	6078      	str	r0, [r7, #4]
 80158b0:	460b      	mov	r3, r1
 80158b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80158ba:	78fa      	ldrb	r2, [r7, #3]
 80158bc:	6879      	ldr	r1, [r7, #4]
 80158be:	4613      	mov	r3, r2
 80158c0:	00db      	lsls	r3, r3, #3
 80158c2:	4413      	add	r3, r2
 80158c4:	009b      	lsls	r3, r3, #2
 80158c6:	440b      	add	r3, r1
 80158c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80158cc:	681a      	ldr	r2, [r3, #0]
 80158ce:	78fb      	ldrb	r3, [r7, #3]
 80158d0:	4619      	mov	r1, r3
 80158d2:	f7f9 fd51 	bl	800f378 <USBD_LL_DataOutStage>
}
 80158d6:	bf00      	nop
 80158d8:	3708      	adds	r7, #8
 80158da:	46bd      	mov	sp, r7
 80158dc:	bd80      	pop	{r7, pc}

080158de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158de:	b580      	push	{r7, lr}
 80158e0:	b082      	sub	sp, #8
 80158e2:	af00      	add	r7, sp, #0
 80158e4:	6078      	str	r0, [r7, #4]
 80158e6:	460b      	mov	r3, r1
 80158e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80158f0:	78fa      	ldrb	r2, [r7, #3]
 80158f2:	6879      	ldr	r1, [r7, #4]
 80158f4:	4613      	mov	r3, r2
 80158f6:	00db      	lsls	r3, r3, #3
 80158f8:	4413      	add	r3, r2
 80158fa:	009b      	lsls	r3, r3, #2
 80158fc:	440b      	add	r3, r1
 80158fe:	334c      	adds	r3, #76	; 0x4c
 8015900:	681a      	ldr	r2, [r3, #0]
 8015902:	78fb      	ldrb	r3, [r7, #3]
 8015904:	4619      	mov	r1, r3
 8015906:	f7f9 fdea 	bl	800f4de <USBD_LL_DataInStage>
}
 801590a:	bf00      	nop
 801590c:	3708      	adds	r7, #8
 801590e:	46bd      	mov	sp, r7
 8015910:	bd80      	pop	{r7, pc}

08015912 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015912:	b580      	push	{r7, lr}
 8015914:	b082      	sub	sp, #8
 8015916:	af00      	add	r7, sp, #0
 8015918:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015920:	4618      	mov	r0, r3
 8015922:	f7f9 ff1e 	bl	800f762 <USBD_LL_SOF>
}
 8015926:	bf00      	nop
 8015928:	3708      	adds	r7, #8
 801592a:	46bd      	mov	sp, r7
 801592c:	bd80      	pop	{r7, pc}

0801592e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801592e:	b580      	push	{r7, lr}
 8015930:	b084      	sub	sp, #16
 8015932:	af00      	add	r7, sp, #0
 8015934:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015936:	2301      	movs	r3, #1
 8015938:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	68db      	ldr	r3, [r3, #12]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d102      	bne.n	8015948 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015942:	2300      	movs	r3, #0
 8015944:	73fb      	strb	r3, [r7, #15]
 8015946:	e008      	b.n	801595a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	68db      	ldr	r3, [r3, #12]
 801594c:	2b02      	cmp	r3, #2
 801594e:	d102      	bne.n	8015956 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015950:	2301      	movs	r3, #1
 8015952:	73fb      	strb	r3, [r7, #15]
 8015954:	e001      	b.n	801595a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015956:	f7ee fea3 	bl	80046a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015960:	7bfa      	ldrb	r2, [r7, #15]
 8015962:	4611      	mov	r1, r2
 8015964:	4618      	mov	r0, r3
 8015966:	f7f9 febe 	bl	800f6e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015970:	4618      	mov	r0, r3
 8015972:	f7f9 fe66 	bl	800f642 <USBD_LL_Reset>
}
 8015976:	bf00      	nop
 8015978:	3710      	adds	r7, #16
 801597a:	46bd      	mov	sp, r7
 801597c:	bd80      	pop	{r7, pc}
	...

08015980 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b082      	sub	sp, #8
 8015984:	af00      	add	r7, sp, #0
 8015986:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801598e:	4618      	mov	r0, r3
 8015990:	f7f9 feb9 	bl	800f706 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	687a      	ldr	r2, [r7, #4]
 80159a0:	6812      	ldr	r2, [r2, #0]
 80159a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80159a6:	f043 0301 	orr.w	r3, r3, #1
 80159aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	6a1b      	ldr	r3, [r3, #32]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d005      	beq.n	80159c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80159b4:	4b04      	ldr	r3, [pc, #16]	; (80159c8 <HAL_PCD_SuspendCallback+0x48>)
 80159b6:	691b      	ldr	r3, [r3, #16]
 80159b8:	4a03      	ldr	r2, [pc, #12]	; (80159c8 <HAL_PCD_SuspendCallback+0x48>)
 80159ba:	f043 0306 	orr.w	r3, r3, #6
 80159be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80159c0:	bf00      	nop
 80159c2:	3708      	adds	r7, #8
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd80      	pop	{r7, pc}
 80159c8:	e000ed00 	.word	0xe000ed00

080159cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b082      	sub	sp, #8
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80159da:	4618      	mov	r0, r3
 80159dc:	f7f9 fea9 	bl	800f732 <USBD_LL_Resume>
}
 80159e0:	bf00      	nop
 80159e2:	3708      	adds	r7, #8
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bd80      	pop	{r7, pc}

080159e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159e8:	b580      	push	{r7, lr}
 80159ea:	b082      	sub	sp, #8
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	6078      	str	r0, [r7, #4]
 80159f0:	460b      	mov	r3, r1
 80159f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80159fa:	78fa      	ldrb	r2, [r7, #3]
 80159fc:	4611      	mov	r1, r2
 80159fe:	4618      	mov	r0, r3
 8015a00:	f7f9 ff01 	bl	800f806 <USBD_LL_IsoOUTIncomplete>
}
 8015a04:	bf00      	nop
 8015a06:	3708      	adds	r7, #8
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bd80      	pop	{r7, pc}

08015a0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a0c:	b580      	push	{r7, lr}
 8015a0e:	b082      	sub	sp, #8
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]
 8015a14:	460b      	mov	r3, r1
 8015a16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015a1e:	78fa      	ldrb	r2, [r7, #3]
 8015a20:	4611      	mov	r1, r2
 8015a22:	4618      	mov	r0, r3
 8015a24:	f7f9 febd 	bl	800f7a2 <USBD_LL_IsoINIncomplete>
}
 8015a28:	bf00      	nop
 8015a2a:	3708      	adds	r7, #8
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	bd80      	pop	{r7, pc}

08015a30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b082      	sub	sp, #8
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f7f9 ff13 	bl	800f86a <USBD_LL_DevConnected>
}
 8015a44:	bf00      	nop
 8015a46:	3708      	adds	r7, #8
 8015a48:	46bd      	mov	sp, r7
 8015a4a:	bd80      	pop	{r7, pc}

08015a4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	b082      	sub	sp, #8
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	f7f9 ff10 	bl	800f880 <USBD_LL_DevDisconnected>
}
 8015a60:	bf00      	nop
 8015a62:	3708      	adds	r7, #8
 8015a64:	46bd      	mov	sp, r7
 8015a66:	bd80      	pop	{r7, pc}

08015a68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	b082      	sub	sp, #8
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	781b      	ldrb	r3, [r3, #0]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d13c      	bne.n	8015af2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015a78:	4a20      	ldr	r2, [pc, #128]	; (8015afc <USBD_LL_Init+0x94>)
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	4a1e      	ldr	r2, [pc, #120]	; (8015afc <USBD_LL_Init+0x94>)
 8015a84:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015a88:	4b1c      	ldr	r3, [pc, #112]	; (8015afc <USBD_LL_Init+0x94>)
 8015a8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015a8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8015a90:	4b1a      	ldr	r3, [pc, #104]	; (8015afc <USBD_LL_Init+0x94>)
 8015a92:	2206      	movs	r2, #6
 8015a94:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015a96:	4b19      	ldr	r3, [pc, #100]	; (8015afc <USBD_LL_Init+0x94>)
 8015a98:	2202      	movs	r2, #2
 8015a9a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015a9c:	4b17      	ldr	r3, [pc, #92]	; (8015afc <USBD_LL_Init+0x94>)
 8015a9e:	2200      	movs	r2, #0
 8015aa0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015aa2:	4b16      	ldr	r3, [pc, #88]	; (8015afc <USBD_LL_Init+0x94>)
 8015aa4:	2202      	movs	r2, #2
 8015aa6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015aa8:	4b14      	ldr	r3, [pc, #80]	; (8015afc <USBD_LL_Init+0x94>)
 8015aaa:	2200      	movs	r2, #0
 8015aac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015aae:	4b13      	ldr	r3, [pc, #76]	; (8015afc <USBD_LL_Init+0x94>)
 8015ab0:	2200      	movs	r2, #0
 8015ab2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015ab4:	4b11      	ldr	r3, [pc, #68]	; (8015afc <USBD_LL_Init+0x94>)
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015aba:	4b10      	ldr	r3, [pc, #64]	; (8015afc <USBD_LL_Init+0x94>)
 8015abc:	2200      	movs	r2, #0
 8015abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015ac0:	4b0e      	ldr	r3, [pc, #56]	; (8015afc <USBD_LL_Init+0x94>)
 8015ac2:	2200      	movs	r2, #0
 8015ac4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015ac6:	480d      	ldr	r0, [pc, #52]	; (8015afc <USBD_LL_Init+0x94>)
 8015ac8:	f7f2 f9b7 	bl	8007e3a <HAL_PCD_Init>
 8015acc:	4603      	mov	r3, r0
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d001      	beq.n	8015ad6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015ad2:	f7ee fde5 	bl	80046a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015ad6:	2180      	movs	r1, #128	; 0x80
 8015ad8:	4808      	ldr	r0, [pc, #32]	; (8015afc <USBD_LL_Init+0x94>)
 8015ada:	f7f3 fc42 	bl	8009362 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015ade:	2240      	movs	r2, #64	; 0x40
 8015ae0:	2100      	movs	r1, #0
 8015ae2:	4806      	ldr	r0, [pc, #24]	; (8015afc <USBD_LL_Init+0x94>)
 8015ae4:	f7f3 fbf6 	bl	80092d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015ae8:	2280      	movs	r2, #128	; 0x80
 8015aea:	2101      	movs	r1, #1
 8015aec:	4803      	ldr	r0, [pc, #12]	; (8015afc <USBD_LL_Init+0x94>)
 8015aee:	f7f3 fbf1 	bl	80092d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015af2:	2300      	movs	r3, #0
}
 8015af4:	4618      	mov	r0, r3
 8015af6:	3708      	adds	r7, #8
 8015af8:	46bd      	mov	sp, r7
 8015afa:	bd80      	pop	{r7, pc}
 8015afc:	200069d8 	.word	0x200069d8

08015b00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015b00:	b580      	push	{r7, lr}
 8015b02:	b084      	sub	sp, #16
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015b16:	4618      	mov	r0, r3
 8015b18:	f7f2 fab3 	bl	8008082 <HAL_PCD_Start>
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b20:	7bfb      	ldrb	r3, [r7, #15]
 8015b22:	4618      	mov	r0, r3
 8015b24:	f000 f990 	bl	8015e48 <USBD_Get_USB_Status>
 8015b28:	4603      	mov	r3, r0
 8015b2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b2e:	4618      	mov	r0, r3
 8015b30:	3710      	adds	r7, #16
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd80      	pop	{r7, pc}

08015b36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015b36:	b580      	push	{r7, lr}
 8015b38:	b084      	sub	sp, #16
 8015b3a:	af00      	add	r7, sp, #0
 8015b3c:	6078      	str	r0, [r7, #4]
 8015b3e:	4608      	mov	r0, r1
 8015b40:	4611      	mov	r1, r2
 8015b42:	461a      	mov	r2, r3
 8015b44:	4603      	mov	r3, r0
 8015b46:	70fb      	strb	r3, [r7, #3]
 8015b48:	460b      	mov	r3, r1
 8015b4a:	70bb      	strb	r3, [r7, #2]
 8015b4c:	4613      	mov	r3, r2
 8015b4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b50:	2300      	movs	r3, #0
 8015b52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b54:	2300      	movs	r3, #0
 8015b56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015b5e:	78bb      	ldrb	r3, [r7, #2]
 8015b60:	883a      	ldrh	r2, [r7, #0]
 8015b62:	78f9      	ldrb	r1, [r7, #3]
 8015b64:	f7f2 ffb1 	bl	8008aca <HAL_PCD_EP_Open>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b6c:	7bfb      	ldrb	r3, [r7, #15]
 8015b6e:	4618      	mov	r0, r3
 8015b70:	f000 f96a 	bl	8015e48 <USBD_Get_USB_Status>
 8015b74:	4603      	mov	r3, r0
 8015b76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b78:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	3710      	adds	r7, #16
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	bd80      	pop	{r7, pc}

08015b82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b82:	b580      	push	{r7, lr}
 8015b84:	b084      	sub	sp, #16
 8015b86:	af00      	add	r7, sp, #0
 8015b88:	6078      	str	r0, [r7, #4]
 8015b8a:	460b      	mov	r3, r1
 8015b8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b8e:	2300      	movs	r3, #0
 8015b90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b92:	2300      	movs	r3, #0
 8015b94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015b9c:	78fa      	ldrb	r2, [r7, #3]
 8015b9e:	4611      	mov	r1, r2
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	f7f2 fffa 	bl	8008b9a <HAL_PCD_EP_Close>
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015baa:	7bfb      	ldrb	r3, [r7, #15]
 8015bac:	4618      	mov	r0, r3
 8015bae:	f000 f94b 	bl	8015e48 <USBD_Get_USB_Status>
 8015bb2:	4603      	mov	r3, r0
 8015bb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015bb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8015bb8:	4618      	mov	r0, r3
 8015bba:	3710      	adds	r7, #16
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	bd80      	pop	{r7, pc}

08015bc0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015bc0:	b580      	push	{r7, lr}
 8015bc2:	b084      	sub	sp, #16
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	6078      	str	r0, [r7, #4]
 8015bc8:	460b      	mov	r3, r1
 8015bca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bcc:	2300      	movs	r3, #0
 8015bce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015bda:	78fa      	ldrb	r2, [r7, #3]
 8015bdc:	4611      	mov	r1, r2
 8015bde:	4618      	mov	r0, r3
 8015be0:	f7f3 f8d2 	bl	8008d88 <HAL_PCD_EP_SetStall>
 8015be4:	4603      	mov	r3, r0
 8015be6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015be8:	7bfb      	ldrb	r3, [r7, #15]
 8015bea:	4618      	mov	r0, r3
 8015bec:	f000 f92c 	bl	8015e48 <USBD_Get_USB_Status>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015bf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	3710      	adds	r7, #16
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	bd80      	pop	{r7, pc}

08015bfe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015bfe:	b580      	push	{r7, lr}
 8015c00:	b084      	sub	sp, #16
 8015c02:	af00      	add	r7, sp, #0
 8015c04:	6078      	str	r0, [r7, #4]
 8015c06:	460b      	mov	r3, r1
 8015c08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c0e:	2300      	movs	r3, #0
 8015c10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015c18:	78fa      	ldrb	r2, [r7, #3]
 8015c1a:	4611      	mov	r1, r2
 8015c1c:	4618      	mov	r0, r3
 8015c1e:	f7f3 f917 	bl	8008e50 <HAL_PCD_EP_ClrStall>
 8015c22:	4603      	mov	r3, r0
 8015c24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c26:	7bfb      	ldrb	r3, [r7, #15]
 8015c28:	4618      	mov	r0, r3
 8015c2a:	f000 f90d 	bl	8015e48 <USBD_Get_USB_Status>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c32:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c34:	4618      	mov	r0, r3
 8015c36:	3710      	adds	r7, #16
 8015c38:	46bd      	mov	sp, r7
 8015c3a:	bd80      	pop	{r7, pc}

08015c3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c3c:	b480      	push	{r7}
 8015c3e:	b085      	sub	sp, #20
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
 8015c44:	460b      	mov	r3, r1
 8015c46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015c4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015c50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	da0b      	bge.n	8015c70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015c58:	78fb      	ldrb	r3, [r7, #3]
 8015c5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c5e:	68f9      	ldr	r1, [r7, #12]
 8015c60:	4613      	mov	r3, r2
 8015c62:	00db      	lsls	r3, r3, #3
 8015c64:	4413      	add	r3, r2
 8015c66:	009b      	lsls	r3, r3, #2
 8015c68:	440b      	add	r3, r1
 8015c6a:	333e      	adds	r3, #62	; 0x3e
 8015c6c:	781b      	ldrb	r3, [r3, #0]
 8015c6e:	e00b      	b.n	8015c88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015c70:	78fb      	ldrb	r3, [r7, #3]
 8015c72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c76:	68f9      	ldr	r1, [r7, #12]
 8015c78:	4613      	mov	r3, r2
 8015c7a:	00db      	lsls	r3, r3, #3
 8015c7c:	4413      	add	r3, r2
 8015c7e:	009b      	lsls	r3, r3, #2
 8015c80:	440b      	add	r3, r1
 8015c82:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8015c86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015c88:	4618      	mov	r0, r3
 8015c8a:	3714      	adds	r7, #20
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c92:	4770      	bx	lr

08015c94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015c94:	b580      	push	{r7, lr}
 8015c96:	b084      	sub	sp, #16
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	6078      	str	r0, [r7, #4]
 8015c9c:	460b      	mov	r3, r1
 8015c9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015cae:	78fa      	ldrb	r2, [r7, #3]
 8015cb0:	4611      	mov	r1, r2
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	f7f2 fee4 	bl	8008a80 <HAL_PCD_SetAddress>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cbc:	7bfb      	ldrb	r3, [r7, #15]
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	f000 f8c2 	bl	8015e48 <USBD_Get_USB_Status>
 8015cc4:	4603      	mov	r3, r0
 8015cc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015cc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8015cca:	4618      	mov	r0, r3
 8015ccc:	3710      	adds	r7, #16
 8015cce:	46bd      	mov	sp, r7
 8015cd0:	bd80      	pop	{r7, pc}

08015cd2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015cd2:	b580      	push	{r7, lr}
 8015cd4:	b086      	sub	sp, #24
 8015cd6:	af00      	add	r7, sp, #0
 8015cd8:	60f8      	str	r0, [r7, #12]
 8015cda:	607a      	str	r2, [r7, #4]
 8015cdc:	603b      	str	r3, [r7, #0]
 8015cde:	460b      	mov	r3, r1
 8015ce0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ce6:	2300      	movs	r3, #0
 8015ce8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015cf0:	7af9      	ldrb	r1, [r7, #11]
 8015cf2:	683b      	ldr	r3, [r7, #0]
 8015cf4:	687a      	ldr	r2, [r7, #4]
 8015cf6:	f7f2 fffd 	bl	8008cf4 <HAL_PCD_EP_Transmit>
 8015cfa:	4603      	mov	r3, r0
 8015cfc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cfe:	7dfb      	ldrb	r3, [r7, #23]
 8015d00:	4618      	mov	r0, r3
 8015d02:	f000 f8a1 	bl	8015e48 <USBD_Get_USB_Status>
 8015d06:	4603      	mov	r3, r0
 8015d08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015d0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	3718      	adds	r7, #24
 8015d10:	46bd      	mov	sp, r7
 8015d12:	bd80      	pop	{r7, pc}

08015d14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015d14:	b580      	push	{r7, lr}
 8015d16:	b086      	sub	sp, #24
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	60f8      	str	r0, [r7, #12]
 8015d1c:	607a      	str	r2, [r7, #4]
 8015d1e:	603b      	str	r3, [r7, #0]
 8015d20:	460b      	mov	r3, r1
 8015d22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d24:	2300      	movs	r3, #0
 8015d26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d28:	2300      	movs	r3, #0
 8015d2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015d32:	7af9      	ldrb	r1, [r7, #11]
 8015d34:	683b      	ldr	r3, [r7, #0]
 8015d36:	687a      	ldr	r2, [r7, #4]
 8015d38:	f7f2 ff79 	bl	8008c2e <HAL_PCD_EP_Receive>
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d40:	7dfb      	ldrb	r3, [r7, #23]
 8015d42:	4618      	mov	r0, r3
 8015d44:	f000 f880 	bl	8015e48 <USBD_Get_USB_Status>
 8015d48:	4603      	mov	r3, r0
 8015d4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015d4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8015d4e:	4618      	mov	r0, r3
 8015d50:	3718      	adds	r7, #24
 8015d52:	46bd      	mov	sp, r7
 8015d54:	bd80      	pop	{r7, pc}

08015d56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d56:	b580      	push	{r7, lr}
 8015d58:	b082      	sub	sp, #8
 8015d5a:	af00      	add	r7, sp, #0
 8015d5c:	6078      	str	r0, [r7, #4]
 8015d5e:	460b      	mov	r3, r1
 8015d60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015d68:	78fa      	ldrb	r2, [r7, #3]
 8015d6a:	4611      	mov	r1, r2
 8015d6c:	4618      	mov	r0, r3
 8015d6e:	f7f2 ffa9 	bl	8008cc4 <HAL_PCD_EP_GetRxCount>
 8015d72:	4603      	mov	r3, r0
}
 8015d74:	4618      	mov	r0, r3
 8015d76:	3708      	adds	r7, #8
 8015d78:	46bd      	mov	sp, r7
 8015d7a:	bd80      	pop	{r7, pc}

08015d7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8015d7c:	b580      	push	{r7, lr}
 8015d7e:	b082      	sub	sp, #8
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	6078      	str	r0, [r7, #4]
 8015d84:	460b      	mov	r3, r1
 8015d86:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8015d88:	78fb      	ldrb	r3, [r7, #3]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d002      	beq.n	8015d94 <HAL_PCDEx_LPM_Callback+0x18>
 8015d8e:	2b01      	cmp	r3, #1
 8015d90:	d01f      	beq.n	8015dd2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8015d92:	e03b      	b.n	8015e0c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	6a1b      	ldr	r3, [r3, #32]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d007      	beq.n	8015dac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8015d9c:	f7ef f8a4 	bl	8004ee8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015da0:	4b1c      	ldr	r3, [pc, #112]	; (8015e14 <HAL_PCDEx_LPM_Callback+0x98>)
 8015da2:	691b      	ldr	r3, [r3, #16]
 8015da4:	4a1b      	ldr	r2, [pc, #108]	; (8015e14 <HAL_PCDEx_LPM_Callback+0x98>)
 8015da6:	f023 0306 	bic.w	r3, r3, #6
 8015daa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	687a      	ldr	r2, [r7, #4]
 8015db8:	6812      	ldr	r2, [r2, #0]
 8015dba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015dbe:	f023 0301 	bic.w	r3, r3, #1
 8015dc2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015dca:	4618      	mov	r0, r3
 8015dcc:	f7f9 fcb1 	bl	800f732 <USBD_LL_Resume>
    break;
 8015dd0:	e01c      	b.n	8015e0c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	687a      	ldr	r2, [r7, #4]
 8015dde:	6812      	ldr	r2, [r2, #0]
 8015de0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015de4:	f043 0301 	orr.w	r3, r3, #1
 8015de8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015df0:	4618      	mov	r0, r3
 8015df2:	f7f9 fc88 	bl	800f706 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	6a1b      	ldr	r3, [r3, #32]
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d005      	beq.n	8015e0a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015dfe:	4b05      	ldr	r3, [pc, #20]	; (8015e14 <HAL_PCDEx_LPM_Callback+0x98>)
 8015e00:	691b      	ldr	r3, [r3, #16]
 8015e02:	4a04      	ldr	r2, [pc, #16]	; (8015e14 <HAL_PCDEx_LPM_Callback+0x98>)
 8015e04:	f043 0306 	orr.w	r3, r3, #6
 8015e08:	6113      	str	r3, [r2, #16]
    break;
 8015e0a:	bf00      	nop
}
 8015e0c:	bf00      	nop
 8015e0e:	3708      	adds	r7, #8
 8015e10:	46bd      	mov	sp, r7
 8015e12:	bd80      	pop	{r7, pc}
 8015e14:	e000ed00 	.word	0xe000ed00

08015e18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015e18:	b480      	push	{r7}
 8015e1a:	b083      	sub	sp, #12
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015e20:	4b03      	ldr	r3, [pc, #12]	; (8015e30 <USBD_static_malloc+0x18>)
}
 8015e22:	4618      	mov	r0, r3
 8015e24:	370c      	adds	r7, #12
 8015e26:	46bd      	mov	sp, r7
 8015e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2c:	4770      	bx	lr
 8015e2e:	bf00      	nop
 8015e30:	20006ee4 	.word	0x20006ee4

08015e34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015e34:	b480      	push	{r7}
 8015e36:	b083      	sub	sp, #12
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	6078      	str	r0, [r7, #4]

}
 8015e3c:	bf00      	nop
 8015e3e:	370c      	adds	r7, #12
 8015e40:	46bd      	mov	sp, r7
 8015e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e46:	4770      	bx	lr

08015e48 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015e48:	b480      	push	{r7}
 8015e4a:	b085      	sub	sp, #20
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	4603      	mov	r3, r0
 8015e50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e52:	2300      	movs	r3, #0
 8015e54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015e56:	79fb      	ldrb	r3, [r7, #7]
 8015e58:	2b03      	cmp	r3, #3
 8015e5a:	d817      	bhi.n	8015e8c <USBD_Get_USB_Status+0x44>
 8015e5c:	a201      	add	r2, pc, #4	; (adr r2, 8015e64 <USBD_Get_USB_Status+0x1c>)
 8015e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e62:	bf00      	nop
 8015e64:	08015e75 	.word	0x08015e75
 8015e68:	08015e7b 	.word	0x08015e7b
 8015e6c:	08015e81 	.word	0x08015e81
 8015e70:	08015e87 	.word	0x08015e87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015e74:	2300      	movs	r3, #0
 8015e76:	73fb      	strb	r3, [r7, #15]
    break;
 8015e78:	e00b      	b.n	8015e92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015e7a:	2303      	movs	r3, #3
 8015e7c:	73fb      	strb	r3, [r7, #15]
    break;
 8015e7e:	e008      	b.n	8015e92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015e80:	2301      	movs	r3, #1
 8015e82:	73fb      	strb	r3, [r7, #15]
    break;
 8015e84:	e005      	b.n	8015e92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015e86:	2303      	movs	r3, #3
 8015e88:	73fb      	strb	r3, [r7, #15]
    break;
 8015e8a:	e002      	b.n	8015e92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015e8c:	2303      	movs	r3, #3
 8015e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8015e90:	bf00      	nop
  }
  return usb_status;
 8015e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e94:	4618      	mov	r0, r3
 8015e96:	3714      	adds	r7, #20
 8015e98:	46bd      	mov	sp, r7
 8015e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e9e:	4770      	bx	lr

08015ea0 <__errno>:
 8015ea0:	4b01      	ldr	r3, [pc, #4]	; (8015ea8 <__errno+0x8>)
 8015ea2:	6818      	ldr	r0, [r3, #0]
 8015ea4:	4770      	bx	lr
 8015ea6:	bf00      	nop
 8015ea8:	2000013c 	.word	0x2000013c

08015eac <std>:
 8015eac:	2300      	movs	r3, #0
 8015eae:	b510      	push	{r4, lr}
 8015eb0:	4604      	mov	r4, r0
 8015eb2:	e9c0 3300 	strd	r3, r3, [r0]
 8015eb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015eba:	6083      	str	r3, [r0, #8]
 8015ebc:	8181      	strh	r1, [r0, #12]
 8015ebe:	6643      	str	r3, [r0, #100]	; 0x64
 8015ec0:	81c2      	strh	r2, [r0, #14]
 8015ec2:	6183      	str	r3, [r0, #24]
 8015ec4:	4619      	mov	r1, r3
 8015ec6:	2208      	movs	r2, #8
 8015ec8:	305c      	adds	r0, #92	; 0x5c
 8015eca:	f000 f91f 	bl	801610c <memset>
 8015ece:	4b05      	ldr	r3, [pc, #20]	; (8015ee4 <std+0x38>)
 8015ed0:	6263      	str	r3, [r4, #36]	; 0x24
 8015ed2:	4b05      	ldr	r3, [pc, #20]	; (8015ee8 <std+0x3c>)
 8015ed4:	62a3      	str	r3, [r4, #40]	; 0x28
 8015ed6:	4b05      	ldr	r3, [pc, #20]	; (8015eec <std+0x40>)
 8015ed8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015eda:	4b05      	ldr	r3, [pc, #20]	; (8015ef0 <std+0x44>)
 8015edc:	6224      	str	r4, [r4, #32]
 8015ede:	6323      	str	r3, [r4, #48]	; 0x30
 8015ee0:	bd10      	pop	{r4, pc}
 8015ee2:	bf00      	nop
 8015ee4:	08016dc1 	.word	0x08016dc1
 8015ee8:	08016de3 	.word	0x08016de3
 8015eec:	08016e1b 	.word	0x08016e1b
 8015ef0:	08016e3f 	.word	0x08016e3f

08015ef4 <_cleanup_r>:
 8015ef4:	4901      	ldr	r1, [pc, #4]	; (8015efc <_cleanup_r+0x8>)
 8015ef6:	f000 b8af 	b.w	8016058 <_fwalk_reent>
 8015efa:	bf00      	nop
 8015efc:	08017e41 	.word	0x08017e41

08015f00 <__sfmoreglue>:
 8015f00:	b570      	push	{r4, r5, r6, lr}
 8015f02:	2268      	movs	r2, #104	; 0x68
 8015f04:	1e4d      	subs	r5, r1, #1
 8015f06:	4355      	muls	r5, r2
 8015f08:	460e      	mov	r6, r1
 8015f0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015f0e:	f000 f971 	bl	80161f4 <_malloc_r>
 8015f12:	4604      	mov	r4, r0
 8015f14:	b140      	cbz	r0, 8015f28 <__sfmoreglue+0x28>
 8015f16:	2100      	movs	r1, #0
 8015f18:	e9c0 1600 	strd	r1, r6, [r0]
 8015f1c:	300c      	adds	r0, #12
 8015f1e:	60a0      	str	r0, [r4, #8]
 8015f20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015f24:	f000 f8f2 	bl	801610c <memset>
 8015f28:	4620      	mov	r0, r4
 8015f2a:	bd70      	pop	{r4, r5, r6, pc}

08015f2c <__sfp_lock_acquire>:
 8015f2c:	4801      	ldr	r0, [pc, #4]	; (8015f34 <__sfp_lock_acquire+0x8>)
 8015f2e:	f7ef bb91 	b.w	8005654 <__retarget_lock_acquire_recursive>
 8015f32:	bf00      	nop
 8015f34:	20000850 	.word	0x20000850

08015f38 <__sfp_lock_release>:
 8015f38:	4801      	ldr	r0, [pc, #4]	; (8015f40 <__sfp_lock_release+0x8>)
 8015f3a:	f7ef bb9f 	b.w	800567c <__retarget_lock_release_recursive>
 8015f3e:	bf00      	nop
 8015f40:	20000850 	.word	0x20000850

08015f44 <__sinit_lock_acquire>:
 8015f44:	4801      	ldr	r0, [pc, #4]	; (8015f4c <__sinit_lock_acquire+0x8>)
 8015f46:	f7ef bb85 	b.w	8005654 <__retarget_lock_acquire_recursive>
 8015f4a:	bf00      	nop
 8015f4c:	20000844 	.word	0x20000844

08015f50 <__sinit_lock_release>:
 8015f50:	4801      	ldr	r0, [pc, #4]	; (8015f58 <__sinit_lock_release+0x8>)
 8015f52:	f7ef bb93 	b.w	800567c <__retarget_lock_release_recursive>
 8015f56:	bf00      	nop
 8015f58:	20000844 	.word	0x20000844

08015f5c <__sinit>:
 8015f5c:	b510      	push	{r4, lr}
 8015f5e:	4604      	mov	r4, r0
 8015f60:	f7ff fff0 	bl	8015f44 <__sinit_lock_acquire>
 8015f64:	69a3      	ldr	r3, [r4, #24]
 8015f66:	b11b      	cbz	r3, 8015f70 <__sinit+0x14>
 8015f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f6c:	f7ff bff0 	b.w	8015f50 <__sinit_lock_release>
 8015f70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015f74:	6523      	str	r3, [r4, #80]	; 0x50
 8015f76:	4b13      	ldr	r3, [pc, #76]	; (8015fc4 <__sinit+0x68>)
 8015f78:	4a13      	ldr	r2, [pc, #76]	; (8015fc8 <__sinit+0x6c>)
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8015f7e:	42a3      	cmp	r3, r4
 8015f80:	bf04      	itt	eq
 8015f82:	2301      	moveq	r3, #1
 8015f84:	61a3      	streq	r3, [r4, #24]
 8015f86:	4620      	mov	r0, r4
 8015f88:	f000 f820 	bl	8015fcc <__sfp>
 8015f8c:	6060      	str	r0, [r4, #4]
 8015f8e:	4620      	mov	r0, r4
 8015f90:	f000 f81c 	bl	8015fcc <__sfp>
 8015f94:	60a0      	str	r0, [r4, #8]
 8015f96:	4620      	mov	r0, r4
 8015f98:	f000 f818 	bl	8015fcc <__sfp>
 8015f9c:	2200      	movs	r2, #0
 8015f9e:	60e0      	str	r0, [r4, #12]
 8015fa0:	2104      	movs	r1, #4
 8015fa2:	6860      	ldr	r0, [r4, #4]
 8015fa4:	f7ff ff82 	bl	8015eac <std>
 8015fa8:	68a0      	ldr	r0, [r4, #8]
 8015faa:	2201      	movs	r2, #1
 8015fac:	2109      	movs	r1, #9
 8015fae:	f7ff ff7d 	bl	8015eac <std>
 8015fb2:	68e0      	ldr	r0, [r4, #12]
 8015fb4:	2202      	movs	r2, #2
 8015fb6:	2112      	movs	r1, #18
 8015fb8:	f7ff ff78 	bl	8015eac <std>
 8015fbc:	2301      	movs	r3, #1
 8015fbe:	61a3      	str	r3, [r4, #24]
 8015fc0:	e7d2      	b.n	8015f68 <__sinit+0xc>
 8015fc2:	bf00      	nop
 8015fc4:	08019a74 	.word	0x08019a74
 8015fc8:	08015ef5 	.word	0x08015ef5

08015fcc <__sfp>:
 8015fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fce:	4607      	mov	r7, r0
 8015fd0:	f7ff ffac 	bl	8015f2c <__sfp_lock_acquire>
 8015fd4:	4b1e      	ldr	r3, [pc, #120]	; (8016050 <__sfp+0x84>)
 8015fd6:	681e      	ldr	r6, [r3, #0]
 8015fd8:	69b3      	ldr	r3, [r6, #24]
 8015fda:	b913      	cbnz	r3, 8015fe2 <__sfp+0x16>
 8015fdc:	4630      	mov	r0, r6
 8015fde:	f7ff ffbd 	bl	8015f5c <__sinit>
 8015fe2:	3648      	adds	r6, #72	; 0x48
 8015fe4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015fe8:	3b01      	subs	r3, #1
 8015fea:	d503      	bpl.n	8015ff4 <__sfp+0x28>
 8015fec:	6833      	ldr	r3, [r6, #0]
 8015fee:	b30b      	cbz	r3, 8016034 <__sfp+0x68>
 8015ff0:	6836      	ldr	r6, [r6, #0]
 8015ff2:	e7f7      	b.n	8015fe4 <__sfp+0x18>
 8015ff4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015ff8:	b9d5      	cbnz	r5, 8016030 <__sfp+0x64>
 8015ffa:	4b16      	ldr	r3, [pc, #88]	; (8016054 <__sfp+0x88>)
 8015ffc:	60e3      	str	r3, [r4, #12]
 8015ffe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016002:	6665      	str	r5, [r4, #100]	; 0x64
 8016004:	f7ef fb00 	bl	8005608 <__retarget_lock_init_recursive>
 8016008:	f7ff ff96 	bl	8015f38 <__sfp_lock_release>
 801600c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016010:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016014:	6025      	str	r5, [r4, #0]
 8016016:	61a5      	str	r5, [r4, #24]
 8016018:	2208      	movs	r2, #8
 801601a:	4629      	mov	r1, r5
 801601c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016020:	f000 f874 	bl	801610c <memset>
 8016024:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016028:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801602c:	4620      	mov	r0, r4
 801602e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016030:	3468      	adds	r4, #104	; 0x68
 8016032:	e7d9      	b.n	8015fe8 <__sfp+0x1c>
 8016034:	2104      	movs	r1, #4
 8016036:	4638      	mov	r0, r7
 8016038:	f7ff ff62 	bl	8015f00 <__sfmoreglue>
 801603c:	4604      	mov	r4, r0
 801603e:	6030      	str	r0, [r6, #0]
 8016040:	2800      	cmp	r0, #0
 8016042:	d1d5      	bne.n	8015ff0 <__sfp+0x24>
 8016044:	f7ff ff78 	bl	8015f38 <__sfp_lock_release>
 8016048:	230c      	movs	r3, #12
 801604a:	603b      	str	r3, [r7, #0]
 801604c:	e7ee      	b.n	801602c <__sfp+0x60>
 801604e:	bf00      	nop
 8016050:	08019a74 	.word	0x08019a74
 8016054:	ffff0001 	.word	0xffff0001

08016058 <_fwalk_reent>:
 8016058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801605c:	4606      	mov	r6, r0
 801605e:	4688      	mov	r8, r1
 8016060:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016064:	2700      	movs	r7, #0
 8016066:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801606a:	f1b9 0901 	subs.w	r9, r9, #1
 801606e:	d505      	bpl.n	801607c <_fwalk_reent+0x24>
 8016070:	6824      	ldr	r4, [r4, #0]
 8016072:	2c00      	cmp	r4, #0
 8016074:	d1f7      	bne.n	8016066 <_fwalk_reent+0xe>
 8016076:	4638      	mov	r0, r7
 8016078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801607c:	89ab      	ldrh	r3, [r5, #12]
 801607e:	2b01      	cmp	r3, #1
 8016080:	d907      	bls.n	8016092 <_fwalk_reent+0x3a>
 8016082:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016086:	3301      	adds	r3, #1
 8016088:	d003      	beq.n	8016092 <_fwalk_reent+0x3a>
 801608a:	4629      	mov	r1, r5
 801608c:	4630      	mov	r0, r6
 801608e:	47c0      	blx	r8
 8016090:	4307      	orrs	r7, r0
 8016092:	3568      	adds	r5, #104	; 0x68
 8016094:	e7e9      	b.n	801606a <_fwalk_reent+0x12>
	...

08016098 <__libc_init_array>:
 8016098:	b570      	push	{r4, r5, r6, lr}
 801609a:	4d0d      	ldr	r5, [pc, #52]	; (80160d0 <__libc_init_array+0x38>)
 801609c:	4c0d      	ldr	r4, [pc, #52]	; (80160d4 <__libc_init_array+0x3c>)
 801609e:	1b64      	subs	r4, r4, r5
 80160a0:	10a4      	asrs	r4, r4, #2
 80160a2:	2600      	movs	r6, #0
 80160a4:	42a6      	cmp	r6, r4
 80160a6:	d109      	bne.n	80160bc <__libc_init_array+0x24>
 80160a8:	4d0b      	ldr	r5, [pc, #44]	; (80160d8 <__libc_init_array+0x40>)
 80160aa:	4c0c      	ldr	r4, [pc, #48]	; (80160dc <__libc_init_array+0x44>)
 80160ac:	f003 fa00 	bl	80194b0 <_init>
 80160b0:	1b64      	subs	r4, r4, r5
 80160b2:	10a4      	asrs	r4, r4, #2
 80160b4:	2600      	movs	r6, #0
 80160b6:	42a6      	cmp	r6, r4
 80160b8:	d105      	bne.n	80160c6 <__libc_init_array+0x2e>
 80160ba:	bd70      	pop	{r4, r5, r6, pc}
 80160bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80160c0:	4798      	blx	r3
 80160c2:	3601      	adds	r6, #1
 80160c4:	e7ee      	b.n	80160a4 <__libc_init_array+0xc>
 80160c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80160ca:	4798      	blx	r3
 80160cc:	3601      	adds	r6, #1
 80160ce:	e7f2      	b.n	80160b6 <__libc_init_array+0x1e>
 80160d0:	08019e14 	.word	0x08019e14
 80160d4:	08019e14 	.word	0x08019e14
 80160d8:	08019e14 	.word	0x08019e14
 80160dc:	08019e18 	.word	0x08019e18

080160e0 <malloc>:
 80160e0:	4b02      	ldr	r3, [pc, #8]	; (80160ec <malloc+0xc>)
 80160e2:	4601      	mov	r1, r0
 80160e4:	6818      	ldr	r0, [r3, #0]
 80160e6:	f000 b885 	b.w	80161f4 <_malloc_r>
 80160ea:	bf00      	nop
 80160ec:	2000013c 	.word	0x2000013c

080160f0 <memcpy>:
 80160f0:	440a      	add	r2, r1
 80160f2:	4291      	cmp	r1, r2
 80160f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80160f8:	d100      	bne.n	80160fc <memcpy+0xc>
 80160fa:	4770      	bx	lr
 80160fc:	b510      	push	{r4, lr}
 80160fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016102:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016106:	4291      	cmp	r1, r2
 8016108:	d1f9      	bne.n	80160fe <memcpy+0xe>
 801610a:	bd10      	pop	{r4, pc}

0801610c <memset>:
 801610c:	4402      	add	r2, r0
 801610e:	4603      	mov	r3, r0
 8016110:	4293      	cmp	r3, r2
 8016112:	d100      	bne.n	8016116 <memset+0xa>
 8016114:	4770      	bx	lr
 8016116:	f803 1b01 	strb.w	r1, [r3], #1
 801611a:	e7f9      	b.n	8016110 <memset+0x4>

0801611c <_free_r>:
 801611c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801611e:	2900      	cmp	r1, #0
 8016120:	d044      	beq.n	80161ac <_free_r+0x90>
 8016122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016126:	9001      	str	r0, [sp, #4]
 8016128:	2b00      	cmp	r3, #0
 801612a:	f1a1 0404 	sub.w	r4, r1, #4
 801612e:	bfb8      	it	lt
 8016130:	18e4      	addlt	r4, r4, r3
 8016132:	f001 ff4f 	bl	8017fd4 <__malloc_lock>
 8016136:	4a1e      	ldr	r2, [pc, #120]	; (80161b0 <_free_r+0x94>)
 8016138:	9801      	ldr	r0, [sp, #4]
 801613a:	6813      	ldr	r3, [r2, #0]
 801613c:	b933      	cbnz	r3, 801614c <_free_r+0x30>
 801613e:	6063      	str	r3, [r4, #4]
 8016140:	6014      	str	r4, [r2, #0]
 8016142:	b003      	add	sp, #12
 8016144:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016148:	f001 bf4a 	b.w	8017fe0 <__malloc_unlock>
 801614c:	42a3      	cmp	r3, r4
 801614e:	d908      	bls.n	8016162 <_free_r+0x46>
 8016150:	6825      	ldr	r5, [r4, #0]
 8016152:	1961      	adds	r1, r4, r5
 8016154:	428b      	cmp	r3, r1
 8016156:	bf01      	itttt	eq
 8016158:	6819      	ldreq	r1, [r3, #0]
 801615a:	685b      	ldreq	r3, [r3, #4]
 801615c:	1949      	addeq	r1, r1, r5
 801615e:	6021      	streq	r1, [r4, #0]
 8016160:	e7ed      	b.n	801613e <_free_r+0x22>
 8016162:	461a      	mov	r2, r3
 8016164:	685b      	ldr	r3, [r3, #4]
 8016166:	b10b      	cbz	r3, 801616c <_free_r+0x50>
 8016168:	42a3      	cmp	r3, r4
 801616a:	d9fa      	bls.n	8016162 <_free_r+0x46>
 801616c:	6811      	ldr	r1, [r2, #0]
 801616e:	1855      	adds	r5, r2, r1
 8016170:	42a5      	cmp	r5, r4
 8016172:	d10b      	bne.n	801618c <_free_r+0x70>
 8016174:	6824      	ldr	r4, [r4, #0]
 8016176:	4421      	add	r1, r4
 8016178:	1854      	adds	r4, r2, r1
 801617a:	42a3      	cmp	r3, r4
 801617c:	6011      	str	r1, [r2, #0]
 801617e:	d1e0      	bne.n	8016142 <_free_r+0x26>
 8016180:	681c      	ldr	r4, [r3, #0]
 8016182:	685b      	ldr	r3, [r3, #4]
 8016184:	6053      	str	r3, [r2, #4]
 8016186:	4421      	add	r1, r4
 8016188:	6011      	str	r1, [r2, #0]
 801618a:	e7da      	b.n	8016142 <_free_r+0x26>
 801618c:	d902      	bls.n	8016194 <_free_r+0x78>
 801618e:	230c      	movs	r3, #12
 8016190:	6003      	str	r3, [r0, #0]
 8016192:	e7d6      	b.n	8016142 <_free_r+0x26>
 8016194:	6825      	ldr	r5, [r4, #0]
 8016196:	1961      	adds	r1, r4, r5
 8016198:	428b      	cmp	r3, r1
 801619a:	bf04      	itt	eq
 801619c:	6819      	ldreq	r1, [r3, #0]
 801619e:	685b      	ldreq	r3, [r3, #4]
 80161a0:	6063      	str	r3, [r4, #4]
 80161a2:	bf04      	itt	eq
 80161a4:	1949      	addeq	r1, r1, r5
 80161a6:	6021      	streq	r1, [r4, #0]
 80161a8:	6054      	str	r4, [r2, #4]
 80161aa:	e7ca      	b.n	8016142 <_free_r+0x26>
 80161ac:	b003      	add	sp, #12
 80161ae:	bd30      	pop	{r4, r5, pc}
 80161b0:	20007104 	.word	0x20007104

080161b4 <sbrk_aligned>:
 80161b4:	b570      	push	{r4, r5, r6, lr}
 80161b6:	4e0e      	ldr	r6, [pc, #56]	; (80161f0 <sbrk_aligned+0x3c>)
 80161b8:	460c      	mov	r4, r1
 80161ba:	6831      	ldr	r1, [r6, #0]
 80161bc:	4605      	mov	r5, r0
 80161be:	b911      	cbnz	r1, 80161c6 <sbrk_aligned+0x12>
 80161c0:	f000 fdee 	bl	8016da0 <_sbrk_r>
 80161c4:	6030      	str	r0, [r6, #0]
 80161c6:	4621      	mov	r1, r4
 80161c8:	4628      	mov	r0, r5
 80161ca:	f000 fde9 	bl	8016da0 <_sbrk_r>
 80161ce:	1c43      	adds	r3, r0, #1
 80161d0:	d00a      	beq.n	80161e8 <sbrk_aligned+0x34>
 80161d2:	1cc4      	adds	r4, r0, #3
 80161d4:	f024 0403 	bic.w	r4, r4, #3
 80161d8:	42a0      	cmp	r0, r4
 80161da:	d007      	beq.n	80161ec <sbrk_aligned+0x38>
 80161dc:	1a21      	subs	r1, r4, r0
 80161de:	4628      	mov	r0, r5
 80161e0:	f000 fdde 	bl	8016da0 <_sbrk_r>
 80161e4:	3001      	adds	r0, #1
 80161e6:	d101      	bne.n	80161ec <sbrk_aligned+0x38>
 80161e8:	f04f 34ff 	mov.w	r4, #4294967295
 80161ec:	4620      	mov	r0, r4
 80161ee:	bd70      	pop	{r4, r5, r6, pc}
 80161f0:	20007108 	.word	0x20007108

080161f4 <_malloc_r>:
 80161f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161f8:	1ccd      	adds	r5, r1, #3
 80161fa:	f025 0503 	bic.w	r5, r5, #3
 80161fe:	3508      	adds	r5, #8
 8016200:	2d0c      	cmp	r5, #12
 8016202:	bf38      	it	cc
 8016204:	250c      	movcc	r5, #12
 8016206:	2d00      	cmp	r5, #0
 8016208:	4607      	mov	r7, r0
 801620a:	db01      	blt.n	8016210 <_malloc_r+0x1c>
 801620c:	42a9      	cmp	r1, r5
 801620e:	d905      	bls.n	801621c <_malloc_r+0x28>
 8016210:	230c      	movs	r3, #12
 8016212:	603b      	str	r3, [r7, #0]
 8016214:	2600      	movs	r6, #0
 8016216:	4630      	mov	r0, r6
 8016218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801621c:	4e2e      	ldr	r6, [pc, #184]	; (80162d8 <_malloc_r+0xe4>)
 801621e:	f001 fed9 	bl	8017fd4 <__malloc_lock>
 8016222:	6833      	ldr	r3, [r6, #0]
 8016224:	461c      	mov	r4, r3
 8016226:	bb34      	cbnz	r4, 8016276 <_malloc_r+0x82>
 8016228:	4629      	mov	r1, r5
 801622a:	4638      	mov	r0, r7
 801622c:	f7ff ffc2 	bl	80161b4 <sbrk_aligned>
 8016230:	1c43      	adds	r3, r0, #1
 8016232:	4604      	mov	r4, r0
 8016234:	d14d      	bne.n	80162d2 <_malloc_r+0xde>
 8016236:	6834      	ldr	r4, [r6, #0]
 8016238:	4626      	mov	r6, r4
 801623a:	2e00      	cmp	r6, #0
 801623c:	d140      	bne.n	80162c0 <_malloc_r+0xcc>
 801623e:	6823      	ldr	r3, [r4, #0]
 8016240:	4631      	mov	r1, r6
 8016242:	4638      	mov	r0, r7
 8016244:	eb04 0803 	add.w	r8, r4, r3
 8016248:	f000 fdaa 	bl	8016da0 <_sbrk_r>
 801624c:	4580      	cmp	r8, r0
 801624e:	d13a      	bne.n	80162c6 <_malloc_r+0xd2>
 8016250:	6821      	ldr	r1, [r4, #0]
 8016252:	3503      	adds	r5, #3
 8016254:	1a6d      	subs	r5, r5, r1
 8016256:	f025 0503 	bic.w	r5, r5, #3
 801625a:	3508      	adds	r5, #8
 801625c:	2d0c      	cmp	r5, #12
 801625e:	bf38      	it	cc
 8016260:	250c      	movcc	r5, #12
 8016262:	4629      	mov	r1, r5
 8016264:	4638      	mov	r0, r7
 8016266:	f7ff ffa5 	bl	80161b4 <sbrk_aligned>
 801626a:	3001      	adds	r0, #1
 801626c:	d02b      	beq.n	80162c6 <_malloc_r+0xd2>
 801626e:	6823      	ldr	r3, [r4, #0]
 8016270:	442b      	add	r3, r5
 8016272:	6023      	str	r3, [r4, #0]
 8016274:	e00e      	b.n	8016294 <_malloc_r+0xa0>
 8016276:	6822      	ldr	r2, [r4, #0]
 8016278:	1b52      	subs	r2, r2, r5
 801627a:	d41e      	bmi.n	80162ba <_malloc_r+0xc6>
 801627c:	2a0b      	cmp	r2, #11
 801627e:	d916      	bls.n	80162ae <_malloc_r+0xba>
 8016280:	1961      	adds	r1, r4, r5
 8016282:	42a3      	cmp	r3, r4
 8016284:	6025      	str	r5, [r4, #0]
 8016286:	bf18      	it	ne
 8016288:	6059      	strne	r1, [r3, #4]
 801628a:	6863      	ldr	r3, [r4, #4]
 801628c:	bf08      	it	eq
 801628e:	6031      	streq	r1, [r6, #0]
 8016290:	5162      	str	r2, [r4, r5]
 8016292:	604b      	str	r3, [r1, #4]
 8016294:	4638      	mov	r0, r7
 8016296:	f104 060b 	add.w	r6, r4, #11
 801629a:	f001 fea1 	bl	8017fe0 <__malloc_unlock>
 801629e:	f026 0607 	bic.w	r6, r6, #7
 80162a2:	1d23      	adds	r3, r4, #4
 80162a4:	1af2      	subs	r2, r6, r3
 80162a6:	d0b6      	beq.n	8016216 <_malloc_r+0x22>
 80162a8:	1b9b      	subs	r3, r3, r6
 80162aa:	50a3      	str	r3, [r4, r2]
 80162ac:	e7b3      	b.n	8016216 <_malloc_r+0x22>
 80162ae:	6862      	ldr	r2, [r4, #4]
 80162b0:	42a3      	cmp	r3, r4
 80162b2:	bf0c      	ite	eq
 80162b4:	6032      	streq	r2, [r6, #0]
 80162b6:	605a      	strne	r2, [r3, #4]
 80162b8:	e7ec      	b.n	8016294 <_malloc_r+0xa0>
 80162ba:	4623      	mov	r3, r4
 80162bc:	6864      	ldr	r4, [r4, #4]
 80162be:	e7b2      	b.n	8016226 <_malloc_r+0x32>
 80162c0:	4634      	mov	r4, r6
 80162c2:	6876      	ldr	r6, [r6, #4]
 80162c4:	e7b9      	b.n	801623a <_malloc_r+0x46>
 80162c6:	230c      	movs	r3, #12
 80162c8:	603b      	str	r3, [r7, #0]
 80162ca:	4638      	mov	r0, r7
 80162cc:	f001 fe88 	bl	8017fe0 <__malloc_unlock>
 80162d0:	e7a1      	b.n	8016216 <_malloc_r+0x22>
 80162d2:	6025      	str	r5, [r4, #0]
 80162d4:	e7de      	b.n	8016294 <_malloc_r+0xa0>
 80162d6:	bf00      	nop
 80162d8:	20007104 	.word	0x20007104

080162dc <__cvt>:
 80162dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80162e0:	ec55 4b10 	vmov	r4, r5, d0
 80162e4:	2d00      	cmp	r5, #0
 80162e6:	460e      	mov	r6, r1
 80162e8:	4619      	mov	r1, r3
 80162ea:	462b      	mov	r3, r5
 80162ec:	bfbb      	ittet	lt
 80162ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80162f2:	461d      	movlt	r5, r3
 80162f4:	2300      	movge	r3, #0
 80162f6:	232d      	movlt	r3, #45	; 0x2d
 80162f8:	700b      	strb	r3, [r1, #0]
 80162fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80162fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016300:	4691      	mov	r9, r2
 8016302:	f023 0820 	bic.w	r8, r3, #32
 8016306:	bfbc      	itt	lt
 8016308:	4622      	movlt	r2, r4
 801630a:	4614      	movlt	r4, r2
 801630c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016310:	d005      	beq.n	801631e <__cvt+0x42>
 8016312:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016316:	d100      	bne.n	801631a <__cvt+0x3e>
 8016318:	3601      	adds	r6, #1
 801631a:	2102      	movs	r1, #2
 801631c:	e000      	b.n	8016320 <__cvt+0x44>
 801631e:	2103      	movs	r1, #3
 8016320:	ab03      	add	r3, sp, #12
 8016322:	9301      	str	r3, [sp, #4]
 8016324:	ab02      	add	r3, sp, #8
 8016326:	9300      	str	r3, [sp, #0]
 8016328:	ec45 4b10 	vmov	d0, r4, r5
 801632c:	4653      	mov	r3, sl
 801632e:	4632      	mov	r2, r6
 8016330:	f000 ff12 	bl	8017158 <_dtoa_r>
 8016334:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016338:	4607      	mov	r7, r0
 801633a:	d102      	bne.n	8016342 <__cvt+0x66>
 801633c:	f019 0f01 	tst.w	r9, #1
 8016340:	d022      	beq.n	8016388 <__cvt+0xac>
 8016342:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016346:	eb07 0906 	add.w	r9, r7, r6
 801634a:	d110      	bne.n	801636e <__cvt+0x92>
 801634c:	783b      	ldrb	r3, [r7, #0]
 801634e:	2b30      	cmp	r3, #48	; 0x30
 8016350:	d10a      	bne.n	8016368 <__cvt+0x8c>
 8016352:	2200      	movs	r2, #0
 8016354:	2300      	movs	r3, #0
 8016356:	4620      	mov	r0, r4
 8016358:	4629      	mov	r1, r5
 801635a:	f7ea fbd5 	bl	8000b08 <__aeabi_dcmpeq>
 801635e:	b918      	cbnz	r0, 8016368 <__cvt+0x8c>
 8016360:	f1c6 0601 	rsb	r6, r6, #1
 8016364:	f8ca 6000 	str.w	r6, [sl]
 8016368:	f8da 3000 	ldr.w	r3, [sl]
 801636c:	4499      	add	r9, r3
 801636e:	2200      	movs	r2, #0
 8016370:	2300      	movs	r3, #0
 8016372:	4620      	mov	r0, r4
 8016374:	4629      	mov	r1, r5
 8016376:	f7ea fbc7 	bl	8000b08 <__aeabi_dcmpeq>
 801637a:	b108      	cbz	r0, 8016380 <__cvt+0xa4>
 801637c:	f8cd 900c 	str.w	r9, [sp, #12]
 8016380:	2230      	movs	r2, #48	; 0x30
 8016382:	9b03      	ldr	r3, [sp, #12]
 8016384:	454b      	cmp	r3, r9
 8016386:	d307      	bcc.n	8016398 <__cvt+0xbc>
 8016388:	9b03      	ldr	r3, [sp, #12]
 801638a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801638c:	1bdb      	subs	r3, r3, r7
 801638e:	4638      	mov	r0, r7
 8016390:	6013      	str	r3, [r2, #0]
 8016392:	b004      	add	sp, #16
 8016394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016398:	1c59      	adds	r1, r3, #1
 801639a:	9103      	str	r1, [sp, #12]
 801639c:	701a      	strb	r2, [r3, #0]
 801639e:	e7f0      	b.n	8016382 <__cvt+0xa6>

080163a0 <__exponent>:
 80163a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80163a2:	4603      	mov	r3, r0
 80163a4:	2900      	cmp	r1, #0
 80163a6:	bfb8      	it	lt
 80163a8:	4249      	neglt	r1, r1
 80163aa:	f803 2b02 	strb.w	r2, [r3], #2
 80163ae:	bfb4      	ite	lt
 80163b0:	222d      	movlt	r2, #45	; 0x2d
 80163b2:	222b      	movge	r2, #43	; 0x2b
 80163b4:	2909      	cmp	r1, #9
 80163b6:	7042      	strb	r2, [r0, #1]
 80163b8:	dd2a      	ble.n	8016410 <__exponent+0x70>
 80163ba:	f10d 0407 	add.w	r4, sp, #7
 80163be:	46a4      	mov	ip, r4
 80163c0:	270a      	movs	r7, #10
 80163c2:	46a6      	mov	lr, r4
 80163c4:	460a      	mov	r2, r1
 80163c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80163ca:	fb07 1516 	mls	r5, r7, r6, r1
 80163ce:	3530      	adds	r5, #48	; 0x30
 80163d0:	2a63      	cmp	r2, #99	; 0x63
 80163d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80163d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80163da:	4631      	mov	r1, r6
 80163dc:	dcf1      	bgt.n	80163c2 <__exponent+0x22>
 80163de:	3130      	adds	r1, #48	; 0x30
 80163e0:	f1ae 0502 	sub.w	r5, lr, #2
 80163e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80163e8:	1c44      	adds	r4, r0, #1
 80163ea:	4629      	mov	r1, r5
 80163ec:	4561      	cmp	r1, ip
 80163ee:	d30a      	bcc.n	8016406 <__exponent+0x66>
 80163f0:	f10d 0209 	add.w	r2, sp, #9
 80163f4:	eba2 020e 	sub.w	r2, r2, lr
 80163f8:	4565      	cmp	r5, ip
 80163fa:	bf88      	it	hi
 80163fc:	2200      	movhi	r2, #0
 80163fe:	4413      	add	r3, r2
 8016400:	1a18      	subs	r0, r3, r0
 8016402:	b003      	add	sp, #12
 8016404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016406:	f811 2b01 	ldrb.w	r2, [r1], #1
 801640a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801640e:	e7ed      	b.n	80163ec <__exponent+0x4c>
 8016410:	2330      	movs	r3, #48	; 0x30
 8016412:	3130      	adds	r1, #48	; 0x30
 8016414:	7083      	strb	r3, [r0, #2]
 8016416:	70c1      	strb	r1, [r0, #3]
 8016418:	1d03      	adds	r3, r0, #4
 801641a:	e7f1      	b.n	8016400 <__exponent+0x60>

0801641c <_printf_float>:
 801641c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016420:	ed2d 8b02 	vpush	{d8}
 8016424:	b08d      	sub	sp, #52	; 0x34
 8016426:	460c      	mov	r4, r1
 8016428:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801642c:	4616      	mov	r6, r2
 801642e:	461f      	mov	r7, r3
 8016430:	4605      	mov	r5, r0
 8016432:	f001 fd41 	bl	8017eb8 <_localeconv_r>
 8016436:	f8d0 a000 	ldr.w	sl, [r0]
 801643a:	4650      	mov	r0, sl
 801643c:	f7e9 fee8 	bl	8000210 <strlen>
 8016440:	2300      	movs	r3, #0
 8016442:	930a      	str	r3, [sp, #40]	; 0x28
 8016444:	6823      	ldr	r3, [r4, #0]
 8016446:	9305      	str	r3, [sp, #20]
 8016448:	f8d8 3000 	ldr.w	r3, [r8]
 801644c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016450:	3307      	adds	r3, #7
 8016452:	f023 0307 	bic.w	r3, r3, #7
 8016456:	f103 0208 	add.w	r2, r3, #8
 801645a:	f8c8 2000 	str.w	r2, [r8]
 801645e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016462:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8016466:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801646a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801646e:	9307      	str	r3, [sp, #28]
 8016470:	f8cd 8018 	str.w	r8, [sp, #24]
 8016474:	ee08 0a10 	vmov	s16, r0
 8016478:	4b9f      	ldr	r3, [pc, #636]	; (80166f8 <_printf_float+0x2dc>)
 801647a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801647e:	f04f 32ff 	mov.w	r2, #4294967295
 8016482:	f7ea fb73 	bl	8000b6c <__aeabi_dcmpun>
 8016486:	bb88      	cbnz	r0, 80164ec <_printf_float+0xd0>
 8016488:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801648c:	4b9a      	ldr	r3, [pc, #616]	; (80166f8 <_printf_float+0x2dc>)
 801648e:	f04f 32ff 	mov.w	r2, #4294967295
 8016492:	f7ea fb4d 	bl	8000b30 <__aeabi_dcmple>
 8016496:	bb48      	cbnz	r0, 80164ec <_printf_float+0xd0>
 8016498:	2200      	movs	r2, #0
 801649a:	2300      	movs	r3, #0
 801649c:	4640      	mov	r0, r8
 801649e:	4649      	mov	r1, r9
 80164a0:	f7ea fb3c 	bl	8000b1c <__aeabi_dcmplt>
 80164a4:	b110      	cbz	r0, 80164ac <_printf_float+0x90>
 80164a6:	232d      	movs	r3, #45	; 0x2d
 80164a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80164ac:	4b93      	ldr	r3, [pc, #588]	; (80166fc <_printf_float+0x2e0>)
 80164ae:	4894      	ldr	r0, [pc, #592]	; (8016700 <_printf_float+0x2e4>)
 80164b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80164b4:	bf94      	ite	ls
 80164b6:	4698      	movls	r8, r3
 80164b8:	4680      	movhi	r8, r0
 80164ba:	2303      	movs	r3, #3
 80164bc:	6123      	str	r3, [r4, #16]
 80164be:	9b05      	ldr	r3, [sp, #20]
 80164c0:	f023 0204 	bic.w	r2, r3, #4
 80164c4:	6022      	str	r2, [r4, #0]
 80164c6:	f04f 0900 	mov.w	r9, #0
 80164ca:	9700      	str	r7, [sp, #0]
 80164cc:	4633      	mov	r3, r6
 80164ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80164d0:	4621      	mov	r1, r4
 80164d2:	4628      	mov	r0, r5
 80164d4:	f000 f9d8 	bl	8016888 <_printf_common>
 80164d8:	3001      	adds	r0, #1
 80164da:	f040 8090 	bne.w	80165fe <_printf_float+0x1e2>
 80164de:	f04f 30ff 	mov.w	r0, #4294967295
 80164e2:	b00d      	add	sp, #52	; 0x34
 80164e4:	ecbd 8b02 	vpop	{d8}
 80164e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164ec:	4642      	mov	r2, r8
 80164ee:	464b      	mov	r3, r9
 80164f0:	4640      	mov	r0, r8
 80164f2:	4649      	mov	r1, r9
 80164f4:	f7ea fb3a 	bl	8000b6c <__aeabi_dcmpun>
 80164f8:	b140      	cbz	r0, 801650c <_printf_float+0xf0>
 80164fa:	464b      	mov	r3, r9
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	bfbc      	itt	lt
 8016500:	232d      	movlt	r3, #45	; 0x2d
 8016502:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016506:	487f      	ldr	r0, [pc, #508]	; (8016704 <_printf_float+0x2e8>)
 8016508:	4b7f      	ldr	r3, [pc, #508]	; (8016708 <_printf_float+0x2ec>)
 801650a:	e7d1      	b.n	80164b0 <_printf_float+0x94>
 801650c:	6863      	ldr	r3, [r4, #4]
 801650e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8016512:	9206      	str	r2, [sp, #24]
 8016514:	1c5a      	adds	r2, r3, #1
 8016516:	d13f      	bne.n	8016598 <_printf_float+0x17c>
 8016518:	2306      	movs	r3, #6
 801651a:	6063      	str	r3, [r4, #4]
 801651c:	9b05      	ldr	r3, [sp, #20]
 801651e:	6861      	ldr	r1, [r4, #4]
 8016520:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016524:	2300      	movs	r3, #0
 8016526:	9303      	str	r3, [sp, #12]
 8016528:	ab0a      	add	r3, sp, #40	; 0x28
 801652a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801652e:	ab09      	add	r3, sp, #36	; 0x24
 8016530:	ec49 8b10 	vmov	d0, r8, r9
 8016534:	9300      	str	r3, [sp, #0]
 8016536:	6022      	str	r2, [r4, #0]
 8016538:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801653c:	4628      	mov	r0, r5
 801653e:	f7ff fecd 	bl	80162dc <__cvt>
 8016542:	9b06      	ldr	r3, [sp, #24]
 8016544:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016546:	2b47      	cmp	r3, #71	; 0x47
 8016548:	4680      	mov	r8, r0
 801654a:	d108      	bne.n	801655e <_printf_float+0x142>
 801654c:	1cc8      	adds	r0, r1, #3
 801654e:	db02      	blt.n	8016556 <_printf_float+0x13a>
 8016550:	6863      	ldr	r3, [r4, #4]
 8016552:	4299      	cmp	r1, r3
 8016554:	dd41      	ble.n	80165da <_printf_float+0x1be>
 8016556:	f1ab 0b02 	sub.w	fp, fp, #2
 801655a:	fa5f fb8b 	uxtb.w	fp, fp
 801655e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016562:	d820      	bhi.n	80165a6 <_printf_float+0x18a>
 8016564:	3901      	subs	r1, #1
 8016566:	465a      	mov	r2, fp
 8016568:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801656c:	9109      	str	r1, [sp, #36]	; 0x24
 801656e:	f7ff ff17 	bl	80163a0 <__exponent>
 8016572:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016574:	1813      	adds	r3, r2, r0
 8016576:	2a01      	cmp	r2, #1
 8016578:	4681      	mov	r9, r0
 801657a:	6123      	str	r3, [r4, #16]
 801657c:	dc02      	bgt.n	8016584 <_printf_float+0x168>
 801657e:	6822      	ldr	r2, [r4, #0]
 8016580:	07d2      	lsls	r2, r2, #31
 8016582:	d501      	bpl.n	8016588 <_printf_float+0x16c>
 8016584:	3301      	adds	r3, #1
 8016586:	6123      	str	r3, [r4, #16]
 8016588:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801658c:	2b00      	cmp	r3, #0
 801658e:	d09c      	beq.n	80164ca <_printf_float+0xae>
 8016590:	232d      	movs	r3, #45	; 0x2d
 8016592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016596:	e798      	b.n	80164ca <_printf_float+0xae>
 8016598:	9a06      	ldr	r2, [sp, #24]
 801659a:	2a47      	cmp	r2, #71	; 0x47
 801659c:	d1be      	bne.n	801651c <_printf_float+0x100>
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d1bc      	bne.n	801651c <_printf_float+0x100>
 80165a2:	2301      	movs	r3, #1
 80165a4:	e7b9      	b.n	801651a <_printf_float+0xfe>
 80165a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80165aa:	d118      	bne.n	80165de <_printf_float+0x1c2>
 80165ac:	2900      	cmp	r1, #0
 80165ae:	6863      	ldr	r3, [r4, #4]
 80165b0:	dd0b      	ble.n	80165ca <_printf_float+0x1ae>
 80165b2:	6121      	str	r1, [r4, #16]
 80165b4:	b913      	cbnz	r3, 80165bc <_printf_float+0x1a0>
 80165b6:	6822      	ldr	r2, [r4, #0]
 80165b8:	07d0      	lsls	r0, r2, #31
 80165ba:	d502      	bpl.n	80165c2 <_printf_float+0x1a6>
 80165bc:	3301      	adds	r3, #1
 80165be:	440b      	add	r3, r1
 80165c0:	6123      	str	r3, [r4, #16]
 80165c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80165c4:	f04f 0900 	mov.w	r9, #0
 80165c8:	e7de      	b.n	8016588 <_printf_float+0x16c>
 80165ca:	b913      	cbnz	r3, 80165d2 <_printf_float+0x1b6>
 80165cc:	6822      	ldr	r2, [r4, #0]
 80165ce:	07d2      	lsls	r2, r2, #31
 80165d0:	d501      	bpl.n	80165d6 <_printf_float+0x1ba>
 80165d2:	3302      	adds	r3, #2
 80165d4:	e7f4      	b.n	80165c0 <_printf_float+0x1a4>
 80165d6:	2301      	movs	r3, #1
 80165d8:	e7f2      	b.n	80165c0 <_printf_float+0x1a4>
 80165da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80165de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165e0:	4299      	cmp	r1, r3
 80165e2:	db05      	blt.n	80165f0 <_printf_float+0x1d4>
 80165e4:	6823      	ldr	r3, [r4, #0]
 80165e6:	6121      	str	r1, [r4, #16]
 80165e8:	07d8      	lsls	r0, r3, #31
 80165ea:	d5ea      	bpl.n	80165c2 <_printf_float+0x1a6>
 80165ec:	1c4b      	adds	r3, r1, #1
 80165ee:	e7e7      	b.n	80165c0 <_printf_float+0x1a4>
 80165f0:	2900      	cmp	r1, #0
 80165f2:	bfd4      	ite	le
 80165f4:	f1c1 0202 	rsble	r2, r1, #2
 80165f8:	2201      	movgt	r2, #1
 80165fa:	4413      	add	r3, r2
 80165fc:	e7e0      	b.n	80165c0 <_printf_float+0x1a4>
 80165fe:	6823      	ldr	r3, [r4, #0]
 8016600:	055a      	lsls	r2, r3, #21
 8016602:	d407      	bmi.n	8016614 <_printf_float+0x1f8>
 8016604:	6923      	ldr	r3, [r4, #16]
 8016606:	4642      	mov	r2, r8
 8016608:	4631      	mov	r1, r6
 801660a:	4628      	mov	r0, r5
 801660c:	47b8      	blx	r7
 801660e:	3001      	adds	r0, #1
 8016610:	d12c      	bne.n	801666c <_printf_float+0x250>
 8016612:	e764      	b.n	80164de <_printf_float+0xc2>
 8016614:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016618:	f240 80e0 	bls.w	80167dc <_printf_float+0x3c0>
 801661c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016620:	2200      	movs	r2, #0
 8016622:	2300      	movs	r3, #0
 8016624:	f7ea fa70 	bl	8000b08 <__aeabi_dcmpeq>
 8016628:	2800      	cmp	r0, #0
 801662a:	d034      	beq.n	8016696 <_printf_float+0x27a>
 801662c:	4a37      	ldr	r2, [pc, #220]	; (801670c <_printf_float+0x2f0>)
 801662e:	2301      	movs	r3, #1
 8016630:	4631      	mov	r1, r6
 8016632:	4628      	mov	r0, r5
 8016634:	47b8      	blx	r7
 8016636:	3001      	adds	r0, #1
 8016638:	f43f af51 	beq.w	80164de <_printf_float+0xc2>
 801663c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016640:	429a      	cmp	r2, r3
 8016642:	db02      	blt.n	801664a <_printf_float+0x22e>
 8016644:	6823      	ldr	r3, [r4, #0]
 8016646:	07d8      	lsls	r0, r3, #31
 8016648:	d510      	bpl.n	801666c <_printf_float+0x250>
 801664a:	ee18 3a10 	vmov	r3, s16
 801664e:	4652      	mov	r2, sl
 8016650:	4631      	mov	r1, r6
 8016652:	4628      	mov	r0, r5
 8016654:	47b8      	blx	r7
 8016656:	3001      	adds	r0, #1
 8016658:	f43f af41 	beq.w	80164de <_printf_float+0xc2>
 801665c:	f04f 0800 	mov.w	r8, #0
 8016660:	f104 091a 	add.w	r9, r4, #26
 8016664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016666:	3b01      	subs	r3, #1
 8016668:	4543      	cmp	r3, r8
 801666a:	dc09      	bgt.n	8016680 <_printf_float+0x264>
 801666c:	6823      	ldr	r3, [r4, #0]
 801666e:	079b      	lsls	r3, r3, #30
 8016670:	f100 8105 	bmi.w	801687e <_printf_float+0x462>
 8016674:	68e0      	ldr	r0, [r4, #12]
 8016676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016678:	4298      	cmp	r0, r3
 801667a:	bfb8      	it	lt
 801667c:	4618      	movlt	r0, r3
 801667e:	e730      	b.n	80164e2 <_printf_float+0xc6>
 8016680:	2301      	movs	r3, #1
 8016682:	464a      	mov	r2, r9
 8016684:	4631      	mov	r1, r6
 8016686:	4628      	mov	r0, r5
 8016688:	47b8      	blx	r7
 801668a:	3001      	adds	r0, #1
 801668c:	f43f af27 	beq.w	80164de <_printf_float+0xc2>
 8016690:	f108 0801 	add.w	r8, r8, #1
 8016694:	e7e6      	b.n	8016664 <_printf_float+0x248>
 8016696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016698:	2b00      	cmp	r3, #0
 801669a:	dc39      	bgt.n	8016710 <_printf_float+0x2f4>
 801669c:	4a1b      	ldr	r2, [pc, #108]	; (801670c <_printf_float+0x2f0>)
 801669e:	2301      	movs	r3, #1
 80166a0:	4631      	mov	r1, r6
 80166a2:	4628      	mov	r0, r5
 80166a4:	47b8      	blx	r7
 80166a6:	3001      	adds	r0, #1
 80166a8:	f43f af19 	beq.w	80164de <_printf_float+0xc2>
 80166ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80166b0:	4313      	orrs	r3, r2
 80166b2:	d102      	bne.n	80166ba <_printf_float+0x29e>
 80166b4:	6823      	ldr	r3, [r4, #0]
 80166b6:	07d9      	lsls	r1, r3, #31
 80166b8:	d5d8      	bpl.n	801666c <_printf_float+0x250>
 80166ba:	ee18 3a10 	vmov	r3, s16
 80166be:	4652      	mov	r2, sl
 80166c0:	4631      	mov	r1, r6
 80166c2:	4628      	mov	r0, r5
 80166c4:	47b8      	blx	r7
 80166c6:	3001      	adds	r0, #1
 80166c8:	f43f af09 	beq.w	80164de <_printf_float+0xc2>
 80166cc:	f04f 0900 	mov.w	r9, #0
 80166d0:	f104 0a1a 	add.w	sl, r4, #26
 80166d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166d6:	425b      	negs	r3, r3
 80166d8:	454b      	cmp	r3, r9
 80166da:	dc01      	bgt.n	80166e0 <_printf_float+0x2c4>
 80166dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80166de:	e792      	b.n	8016606 <_printf_float+0x1ea>
 80166e0:	2301      	movs	r3, #1
 80166e2:	4652      	mov	r2, sl
 80166e4:	4631      	mov	r1, r6
 80166e6:	4628      	mov	r0, r5
 80166e8:	47b8      	blx	r7
 80166ea:	3001      	adds	r0, #1
 80166ec:	f43f aef7 	beq.w	80164de <_printf_float+0xc2>
 80166f0:	f109 0901 	add.w	r9, r9, #1
 80166f4:	e7ee      	b.n	80166d4 <_printf_float+0x2b8>
 80166f6:	bf00      	nop
 80166f8:	7fefffff 	.word	0x7fefffff
 80166fc:	08019a78 	.word	0x08019a78
 8016700:	08019a7c 	.word	0x08019a7c
 8016704:	08019a84 	.word	0x08019a84
 8016708:	08019a80 	.word	0x08019a80
 801670c:	08019a88 	.word	0x08019a88
 8016710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016712:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016714:	429a      	cmp	r2, r3
 8016716:	bfa8      	it	ge
 8016718:	461a      	movge	r2, r3
 801671a:	2a00      	cmp	r2, #0
 801671c:	4691      	mov	r9, r2
 801671e:	dc37      	bgt.n	8016790 <_printf_float+0x374>
 8016720:	f04f 0b00 	mov.w	fp, #0
 8016724:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016728:	f104 021a 	add.w	r2, r4, #26
 801672c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801672e:	9305      	str	r3, [sp, #20]
 8016730:	eba3 0309 	sub.w	r3, r3, r9
 8016734:	455b      	cmp	r3, fp
 8016736:	dc33      	bgt.n	80167a0 <_printf_float+0x384>
 8016738:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801673c:	429a      	cmp	r2, r3
 801673e:	db3b      	blt.n	80167b8 <_printf_float+0x39c>
 8016740:	6823      	ldr	r3, [r4, #0]
 8016742:	07da      	lsls	r2, r3, #31
 8016744:	d438      	bmi.n	80167b8 <_printf_float+0x39c>
 8016746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016748:	9a05      	ldr	r2, [sp, #20]
 801674a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801674c:	1a9a      	subs	r2, r3, r2
 801674e:	eba3 0901 	sub.w	r9, r3, r1
 8016752:	4591      	cmp	r9, r2
 8016754:	bfa8      	it	ge
 8016756:	4691      	movge	r9, r2
 8016758:	f1b9 0f00 	cmp.w	r9, #0
 801675c:	dc35      	bgt.n	80167ca <_printf_float+0x3ae>
 801675e:	f04f 0800 	mov.w	r8, #0
 8016762:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016766:	f104 0a1a 	add.w	sl, r4, #26
 801676a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801676e:	1a9b      	subs	r3, r3, r2
 8016770:	eba3 0309 	sub.w	r3, r3, r9
 8016774:	4543      	cmp	r3, r8
 8016776:	f77f af79 	ble.w	801666c <_printf_float+0x250>
 801677a:	2301      	movs	r3, #1
 801677c:	4652      	mov	r2, sl
 801677e:	4631      	mov	r1, r6
 8016780:	4628      	mov	r0, r5
 8016782:	47b8      	blx	r7
 8016784:	3001      	adds	r0, #1
 8016786:	f43f aeaa 	beq.w	80164de <_printf_float+0xc2>
 801678a:	f108 0801 	add.w	r8, r8, #1
 801678e:	e7ec      	b.n	801676a <_printf_float+0x34e>
 8016790:	4613      	mov	r3, r2
 8016792:	4631      	mov	r1, r6
 8016794:	4642      	mov	r2, r8
 8016796:	4628      	mov	r0, r5
 8016798:	47b8      	blx	r7
 801679a:	3001      	adds	r0, #1
 801679c:	d1c0      	bne.n	8016720 <_printf_float+0x304>
 801679e:	e69e      	b.n	80164de <_printf_float+0xc2>
 80167a0:	2301      	movs	r3, #1
 80167a2:	4631      	mov	r1, r6
 80167a4:	4628      	mov	r0, r5
 80167a6:	9205      	str	r2, [sp, #20]
 80167a8:	47b8      	blx	r7
 80167aa:	3001      	adds	r0, #1
 80167ac:	f43f ae97 	beq.w	80164de <_printf_float+0xc2>
 80167b0:	9a05      	ldr	r2, [sp, #20]
 80167b2:	f10b 0b01 	add.w	fp, fp, #1
 80167b6:	e7b9      	b.n	801672c <_printf_float+0x310>
 80167b8:	ee18 3a10 	vmov	r3, s16
 80167bc:	4652      	mov	r2, sl
 80167be:	4631      	mov	r1, r6
 80167c0:	4628      	mov	r0, r5
 80167c2:	47b8      	blx	r7
 80167c4:	3001      	adds	r0, #1
 80167c6:	d1be      	bne.n	8016746 <_printf_float+0x32a>
 80167c8:	e689      	b.n	80164de <_printf_float+0xc2>
 80167ca:	9a05      	ldr	r2, [sp, #20]
 80167cc:	464b      	mov	r3, r9
 80167ce:	4442      	add	r2, r8
 80167d0:	4631      	mov	r1, r6
 80167d2:	4628      	mov	r0, r5
 80167d4:	47b8      	blx	r7
 80167d6:	3001      	adds	r0, #1
 80167d8:	d1c1      	bne.n	801675e <_printf_float+0x342>
 80167da:	e680      	b.n	80164de <_printf_float+0xc2>
 80167dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80167de:	2a01      	cmp	r2, #1
 80167e0:	dc01      	bgt.n	80167e6 <_printf_float+0x3ca>
 80167e2:	07db      	lsls	r3, r3, #31
 80167e4:	d538      	bpl.n	8016858 <_printf_float+0x43c>
 80167e6:	2301      	movs	r3, #1
 80167e8:	4642      	mov	r2, r8
 80167ea:	4631      	mov	r1, r6
 80167ec:	4628      	mov	r0, r5
 80167ee:	47b8      	blx	r7
 80167f0:	3001      	adds	r0, #1
 80167f2:	f43f ae74 	beq.w	80164de <_printf_float+0xc2>
 80167f6:	ee18 3a10 	vmov	r3, s16
 80167fa:	4652      	mov	r2, sl
 80167fc:	4631      	mov	r1, r6
 80167fe:	4628      	mov	r0, r5
 8016800:	47b8      	blx	r7
 8016802:	3001      	adds	r0, #1
 8016804:	f43f ae6b 	beq.w	80164de <_printf_float+0xc2>
 8016808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801680c:	2200      	movs	r2, #0
 801680e:	2300      	movs	r3, #0
 8016810:	f7ea f97a 	bl	8000b08 <__aeabi_dcmpeq>
 8016814:	b9d8      	cbnz	r0, 801684e <_printf_float+0x432>
 8016816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016818:	f108 0201 	add.w	r2, r8, #1
 801681c:	3b01      	subs	r3, #1
 801681e:	4631      	mov	r1, r6
 8016820:	4628      	mov	r0, r5
 8016822:	47b8      	blx	r7
 8016824:	3001      	adds	r0, #1
 8016826:	d10e      	bne.n	8016846 <_printf_float+0x42a>
 8016828:	e659      	b.n	80164de <_printf_float+0xc2>
 801682a:	2301      	movs	r3, #1
 801682c:	4652      	mov	r2, sl
 801682e:	4631      	mov	r1, r6
 8016830:	4628      	mov	r0, r5
 8016832:	47b8      	blx	r7
 8016834:	3001      	adds	r0, #1
 8016836:	f43f ae52 	beq.w	80164de <_printf_float+0xc2>
 801683a:	f108 0801 	add.w	r8, r8, #1
 801683e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016840:	3b01      	subs	r3, #1
 8016842:	4543      	cmp	r3, r8
 8016844:	dcf1      	bgt.n	801682a <_printf_float+0x40e>
 8016846:	464b      	mov	r3, r9
 8016848:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801684c:	e6dc      	b.n	8016608 <_printf_float+0x1ec>
 801684e:	f04f 0800 	mov.w	r8, #0
 8016852:	f104 0a1a 	add.w	sl, r4, #26
 8016856:	e7f2      	b.n	801683e <_printf_float+0x422>
 8016858:	2301      	movs	r3, #1
 801685a:	4642      	mov	r2, r8
 801685c:	e7df      	b.n	801681e <_printf_float+0x402>
 801685e:	2301      	movs	r3, #1
 8016860:	464a      	mov	r2, r9
 8016862:	4631      	mov	r1, r6
 8016864:	4628      	mov	r0, r5
 8016866:	47b8      	blx	r7
 8016868:	3001      	adds	r0, #1
 801686a:	f43f ae38 	beq.w	80164de <_printf_float+0xc2>
 801686e:	f108 0801 	add.w	r8, r8, #1
 8016872:	68e3      	ldr	r3, [r4, #12]
 8016874:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016876:	1a5b      	subs	r3, r3, r1
 8016878:	4543      	cmp	r3, r8
 801687a:	dcf0      	bgt.n	801685e <_printf_float+0x442>
 801687c:	e6fa      	b.n	8016674 <_printf_float+0x258>
 801687e:	f04f 0800 	mov.w	r8, #0
 8016882:	f104 0919 	add.w	r9, r4, #25
 8016886:	e7f4      	b.n	8016872 <_printf_float+0x456>

08016888 <_printf_common>:
 8016888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801688c:	4616      	mov	r6, r2
 801688e:	4699      	mov	r9, r3
 8016890:	688a      	ldr	r2, [r1, #8]
 8016892:	690b      	ldr	r3, [r1, #16]
 8016894:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016898:	4293      	cmp	r3, r2
 801689a:	bfb8      	it	lt
 801689c:	4613      	movlt	r3, r2
 801689e:	6033      	str	r3, [r6, #0]
 80168a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80168a4:	4607      	mov	r7, r0
 80168a6:	460c      	mov	r4, r1
 80168a8:	b10a      	cbz	r2, 80168ae <_printf_common+0x26>
 80168aa:	3301      	adds	r3, #1
 80168ac:	6033      	str	r3, [r6, #0]
 80168ae:	6823      	ldr	r3, [r4, #0]
 80168b0:	0699      	lsls	r1, r3, #26
 80168b2:	bf42      	ittt	mi
 80168b4:	6833      	ldrmi	r3, [r6, #0]
 80168b6:	3302      	addmi	r3, #2
 80168b8:	6033      	strmi	r3, [r6, #0]
 80168ba:	6825      	ldr	r5, [r4, #0]
 80168bc:	f015 0506 	ands.w	r5, r5, #6
 80168c0:	d106      	bne.n	80168d0 <_printf_common+0x48>
 80168c2:	f104 0a19 	add.w	sl, r4, #25
 80168c6:	68e3      	ldr	r3, [r4, #12]
 80168c8:	6832      	ldr	r2, [r6, #0]
 80168ca:	1a9b      	subs	r3, r3, r2
 80168cc:	42ab      	cmp	r3, r5
 80168ce:	dc26      	bgt.n	801691e <_printf_common+0x96>
 80168d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80168d4:	1e13      	subs	r3, r2, #0
 80168d6:	6822      	ldr	r2, [r4, #0]
 80168d8:	bf18      	it	ne
 80168da:	2301      	movne	r3, #1
 80168dc:	0692      	lsls	r2, r2, #26
 80168de:	d42b      	bmi.n	8016938 <_printf_common+0xb0>
 80168e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80168e4:	4649      	mov	r1, r9
 80168e6:	4638      	mov	r0, r7
 80168e8:	47c0      	blx	r8
 80168ea:	3001      	adds	r0, #1
 80168ec:	d01e      	beq.n	801692c <_printf_common+0xa4>
 80168ee:	6823      	ldr	r3, [r4, #0]
 80168f0:	68e5      	ldr	r5, [r4, #12]
 80168f2:	6832      	ldr	r2, [r6, #0]
 80168f4:	f003 0306 	and.w	r3, r3, #6
 80168f8:	2b04      	cmp	r3, #4
 80168fa:	bf08      	it	eq
 80168fc:	1aad      	subeq	r5, r5, r2
 80168fe:	68a3      	ldr	r3, [r4, #8]
 8016900:	6922      	ldr	r2, [r4, #16]
 8016902:	bf0c      	ite	eq
 8016904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016908:	2500      	movne	r5, #0
 801690a:	4293      	cmp	r3, r2
 801690c:	bfc4      	itt	gt
 801690e:	1a9b      	subgt	r3, r3, r2
 8016910:	18ed      	addgt	r5, r5, r3
 8016912:	2600      	movs	r6, #0
 8016914:	341a      	adds	r4, #26
 8016916:	42b5      	cmp	r5, r6
 8016918:	d11a      	bne.n	8016950 <_printf_common+0xc8>
 801691a:	2000      	movs	r0, #0
 801691c:	e008      	b.n	8016930 <_printf_common+0xa8>
 801691e:	2301      	movs	r3, #1
 8016920:	4652      	mov	r2, sl
 8016922:	4649      	mov	r1, r9
 8016924:	4638      	mov	r0, r7
 8016926:	47c0      	blx	r8
 8016928:	3001      	adds	r0, #1
 801692a:	d103      	bne.n	8016934 <_printf_common+0xac>
 801692c:	f04f 30ff 	mov.w	r0, #4294967295
 8016930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016934:	3501      	adds	r5, #1
 8016936:	e7c6      	b.n	80168c6 <_printf_common+0x3e>
 8016938:	18e1      	adds	r1, r4, r3
 801693a:	1c5a      	adds	r2, r3, #1
 801693c:	2030      	movs	r0, #48	; 0x30
 801693e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016942:	4422      	add	r2, r4
 8016944:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016948:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801694c:	3302      	adds	r3, #2
 801694e:	e7c7      	b.n	80168e0 <_printf_common+0x58>
 8016950:	2301      	movs	r3, #1
 8016952:	4622      	mov	r2, r4
 8016954:	4649      	mov	r1, r9
 8016956:	4638      	mov	r0, r7
 8016958:	47c0      	blx	r8
 801695a:	3001      	adds	r0, #1
 801695c:	d0e6      	beq.n	801692c <_printf_common+0xa4>
 801695e:	3601      	adds	r6, #1
 8016960:	e7d9      	b.n	8016916 <_printf_common+0x8e>
	...

08016964 <_printf_i>:
 8016964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016968:	7e0f      	ldrb	r7, [r1, #24]
 801696a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801696c:	2f78      	cmp	r7, #120	; 0x78
 801696e:	4691      	mov	r9, r2
 8016970:	4680      	mov	r8, r0
 8016972:	460c      	mov	r4, r1
 8016974:	469a      	mov	sl, r3
 8016976:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801697a:	d807      	bhi.n	801698c <_printf_i+0x28>
 801697c:	2f62      	cmp	r7, #98	; 0x62
 801697e:	d80a      	bhi.n	8016996 <_printf_i+0x32>
 8016980:	2f00      	cmp	r7, #0
 8016982:	f000 80d8 	beq.w	8016b36 <_printf_i+0x1d2>
 8016986:	2f58      	cmp	r7, #88	; 0x58
 8016988:	f000 80a3 	beq.w	8016ad2 <_printf_i+0x16e>
 801698c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016990:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016994:	e03a      	b.n	8016a0c <_printf_i+0xa8>
 8016996:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801699a:	2b15      	cmp	r3, #21
 801699c:	d8f6      	bhi.n	801698c <_printf_i+0x28>
 801699e:	a101      	add	r1, pc, #4	; (adr r1, 80169a4 <_printf_i+0x40>)
 80169a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80169a4:	080169fd 	.word	0x080169fd
 80169a8:	08016a11 	.word	0x08016a11
 80169ac:	0801698d 	.word	0x0801698d
 80169b0:	0801698d 	.word	0x0801698d
 80169b4:	0801698d 	.word	0x0801698d
 80169b8:	0801698d 	.word	0x0801698d
 80169bc:	08016a11 	.word	0x08016a11
 80169c0:	0801698d 	.word	0x0801698d
 80169c4:	0801698d 	.word	0x0801698d
 80169c8:	0801698d 	.word	0x0801698d
 80169cc:	0801698d 	.word	0x0801698d
 80169d0:	08016b1d 	.word	0x08016b1d
 80169d4:	08016a41 	.word	0x08016a41
 80169d8:	08016aff 	.word	0x08016aff
 80169dc:	0801698d 	.word	0x0801698d
 80169e0:	0801698d 	.word	0x0801698d
 80169e4:	08016b3f 	.word	0x08016b3f
 80169e8:	0801698d 	.word	0x0801698d
 80169ec:	08016a41 	.word	0x08016a41
 80169f0:	0801698d 	.word	0x0801698d
 80169f4:	0801698d 	.word	0x0801698d
 80169f8:	08016b07 	.word	0x08016b07
 80169fc:	682b      	ldr	r3, [r5, #0]
 80169fe:	1d1a      	adds	r2, r3, #4
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	602a      	str	r2, [r5, #0]
 8016a04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016a0c:	2301      	movs	r3, #1
 8016a0e:	e0a3      	b.n	8016b58 <_printf_i+0x1f4>
 8016a10:	6820      	ldr	r0, [r4, #0]
 8016a12:	6829      	ldr	r1, [r5, #0]
 8016a14:	0606      	lsls	r6, r0, #24
 8016a16:	f101 0304 	add.w	r3, r1, #4
 8016a1a:	d50a      	bpl.n	8016a32 <_printf_i+0xce>
 8016a1c:	680e      	ldr	r6, [r1, #0]
 8016a1e:	602b      	str	r3, [r5, #0]
 8016a20:	2e00      	cmp	r6, #0
 8016a22:	da03      	bge.n	8016a2c <_printf_i+0xc8>
 8016a24:	232d      	movs	r3, #45	; 0x2d
 8016a26:	4276      	negs	r6, r6
 8016a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016a2c:	485e      	ldr	r0, [pc, #376]	; (8016ba8 <_printf_i+0x244>)
 8016a2e:	230a      	movs	r3, #10
 8016a30:	e019      	b.n	8016a66 <_printf_i+0x102>
 8016a32:	680e      	ldr	r6, [r1, #0]
 8016a34:	602b      	str	r3, [r5, #0]
 8016a36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016a3a:	bf18      	it	ne
 8016a3c:	b236      	sxthne	r6, r6
 8016a3e:	e7ef      	b.n	8016a20 <_printf_i+0xbc>
 8016a40:	682b      	ldr	r3, [r5, #0]
 8016a42:	6820      	ldr	r0, [r4, #0]
 8016a44:	1d19      	adds	r1, r3, #4
 8016a46:	6029      	str	r1, [r5, #0]
 8016a48:	0601      	lsls	r1, r0, #24
 8016a4a:	d501      	bpl.n	8016a50 <_printf_i+0xec>
 8016a4c:	681e      	ldr	r6, [r3, #0]
 8016a4e:	e002      	b.n	8016a56 <_printf_i+0xf2>
 8016a50:	0646      	lsls	r6, r0, #25
 8016a52:	d5fb      	bpl.n	8016a4c <_printf_i+0xe8>
 8016a54:	881e      	ldrh	r6, [r3, #0]
 8016a56:	4854      	ldr	r0, [pc, #336]	; (8016ba8 <_printf_i+0x244>)
 8016a58:	2f6f      	cmp	r7, #111	; 0x6f
 8016a5a:	bf0c      	ite	eq
 8016a5c:	2308      	moveq	r3, #8
 8016a5e:	230a      	movne	r3, #10
 8016a60:	2100      	movs	r1, #0
 8016a62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016a66:	6865      	ldr	r5, [r4, #4]
 8016a68:	60a5      	str	r5, [r4, #8]
 8016a6a:	2d00      	cmp	r5, #0
 8016a6c:	bfa2      	ittt	ge
 8016a6e:	6821      	ldrge	r1, [r4, #0]
 8016a70:	f021 0104 	bicge.w	r1, r1, #4
 8016a74:	6021      	strge	r1, [r4, #0]
 8016a76:	b90e      	cbnz	r6, 8016a7c <_printf_i+0x118>
 8016a78:	2d00      	cmp	r5, #0
 8016a7a:	d04d      	beq.n	8016b18 <_printf_i+0x1b4>
 8016a7c:	4615      	mov	r5, r2
 8016a7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8016a82:	fb03 6711 	mls	r7, r3, r1, r6
 8016a86:	5dc7      	ldrb	r7, [r0, r7]
 8016a88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016a8c:	4637      	mov	r7, r6
 8016a8e:	42bb      	cmp	r3, r7
 8016a90:	460e      	mov	r6, r1
 8016a92:	d9f4      	bls.n	8016a7e <_printf_i+0x11a>
 8016a94:	2b08      	cmp	r3, #8
 8016a96:	d10b      	bne.n	8016ab0 <_printf_i+0x14c>
 8016a98:	6823      	ldr	r3, [r4, #0]
 8016a9a:	07de      	lsls	r6, r3, #31
 8016a9c:	d508      	bpl.n	8016ab0 <_printf_i+0x14c>
 8016a9e:	6923      	ldr	r3, [r4, #16]
 8016aa0:	6861      	ldr	r1, [r4, #4]
 8016aa2:	4299      	cmp	r1, r3
 8016aa4:	bfde      	ittt	le
 8016aa6:	2330      	movle	r3, #48	; 0x30
 8016aa8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016aac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016ab0:	1b52      	subs	r2, r2, r5
 8016ab2:	6122      	str	r2, [r4, #16]
 8016ab4:	f8cd a000 	str.w	sl, [sp]
 8016ab8:	464b      	mov	r3, r9
 8016aba:	aa03      	add	r2, sp, #12
 8016abc:	4621      	mov	r1, r4
 8016abe:	4640      	mov	r0, r8
 8016ac0:	f7ff fee2 	bl	8016888 <_printf_common>
 8016ac4:	3001      	adds	r0, #1
 8016ac6:	d14c      	bne.n	8016b62 <_printf_i+0x1fe>
 8016ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8016acc:	b004      	add	sp, #16
 8016ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ad2:	4835      	ldr	r0, [pc, #212]	; (8016ba8 <_printf_i+0x244>)
 8016ad4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8016ad8:	6829      	ldr	r1, [r5, #0]
 8016ada:	6823      	ldr	r3, [r4, #0]
 8016adc:	f851 6b04 	ldr.w	r6, [r1], #4
 8016ae0:	6029      	str	r1, [r5, #0]
 8016ae2:	061d      	lsls	r5, r3, #24
 8016ae4:	d514      	bpl.n	8016b10 <_printf_i+0x1ac>
 8016ae6:	07df      	lsls	r7, r3, #31
 8016ae8:	bf44      	itt	mi
 8016aea:	f043 0320 	orrmi.w	r3, r3, #32
 8016aee:	6023      	strmi	r3, [r4, #0]
 8016af0:	b91e      	cbnz	r6, 8016afa <_printf_i+0x196>
 8016af2:	6823      	ldr	r3, [r4, #0]
 8016af4:	f023 0320 	bic.w	r3, r3, #32
 8016af8:	6023      	str	r3, [r4, #0]
 8016afa:	2310      	movs	r3, #16
 8016afc:	e7b0      	b.n	8016a60 <_printf_i+0xfc>
 8016afe:	6823      	ldr	r3, [r4, #0]
 8016b00:	f043 0320 	orr.w	r3, r3, #32
 8016b04:	6023      	str	r3, [r4, #0]
 8016b06:	2378      	movs	r3, #120	; 0x78
 8016b08:	4828      	ldr	r0, [pc, #160]	; (8016bac <_printf_i+0x248>)
 8016b0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016b0e:	e7e3      	b.n	8016ad8 <_printf_i+0x174>
 8016b10:	0659      	lsls	r1, r3, #25
 8016b12:	bf48      	it	mi
 8016b14:	b2b6      	uxthmi	r6, r6
 8016b16:	e7e6      	b.n	8016ae6 <_printf_i+0x182>
 8016b18:	4615      	mov	r5, r2
 8016b1a:	e7bb      	b.n	8016a94 <_printf_i+0x130>
 8016b1c:	682b      	ldr	r3, [r5, #0]
 8016b1e:	6826      	ldr	r6, [r4, #0]
 8016b20:	6961      	ldr	r1, [r4, #20]
 8016b22:	1d18      	adds	r0, r3, #4
 8016b24:	6028      	str	r0, [r5, #0]
 8016b26:	0635      	lsls	r5, r6, #24
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	d501      	bpl.n	8016b30 <_printf_i+0x1cc>
 8016b2c:	6019      	str	r1, [r3, #0]
 8016b2e:	e002      	b.n	8016b36 <_printf_i+0x1d2>
 8016b30:	0670      	lsls	r0, r6, #25
 8016b32:	d5fb      	bpl.n	8016b2c <_printf_i+0x1c8>
 8016b34:	8019      	strh	r1, [r3, #0]
 8016b36:	2300      	movs	r3, #0
 8016b38:	6123      	str	r3, [r4, #16]
 8016b3a:	4615      	mov	r5, r2
 8016b3c:	e7ba      	b.n	8016ab4 <_printf_i+0x150>
 8016b3e:	682b      	ldr	r3, [r5, #0]
 8016b40:	1d1a      	adds	r2, r3, #4
 8016b42:	602a      	str	r2, [r5, #0]
 8016b44:	681d      	ldr	r5, [r3, #0]
 8016b46:	6862      	ldr	r2, [r4, #4]
 8016b48:	2100      	movs	r1, #0
 8016b4a:	4628      	mov	r0, r5
 8016b4c:	f7e9 fb68 	bl	8000220 <memchr>
 8016b50:	b108      	cbz	r0, 8016b56 <_printf_i+0x1f2>
 8016b52:	1b40      	subs	r0, r0, r5
 8016b54:	6060      	str	r0, [r4, #4]
 8016b56:	6863      	ldr	r3, [r4, #4]
 8016b58:	6123      	str	r3, [r4, #16]
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016b60:	e7a8      	b.n	8016ab4 <_printf_i+0x150>
 8016b62:	6923      	ldr	r3, [r4, #16]
 8016b64:	462a      	mov	r2, r5
 8016b66:	4649      	mov	r1, r9
 8016b68:	4640      	mov	r0, r8
 8016b6a:	47d0      	blx	sl
 8016b6c:	3001      	adds	r0, #1
 8016b6e:	d0ab      	beq.n	8016ac8 <_printf_i+0x164>
 8016b70:	6823      	ldr	r3, [r4, #0]
 8016b72:	079b      	lsls	r3, r3, #30
 8016b74:	d413      	bmi.n	8016b9e <_printf_i+0x23a>
 8016b76:	68e0      	ldr	r0, [r4, #12]
 8016b78:	9b03      	ldr	r3, [sp, #12]
 8016b7a:	4298      	cmp	r0, r3
 8016b7c:	bfb8      	it	lt
 8016b7e:	4618      	movlt	r0, r3
 8016b80:	e7a4      	b.n	8016acc <_printf_i+0x168>
 8016b82:	2301      	movs	r3, #1
 8016b84:	4632      	mov	r2, r6
 8016b86:	4649      	mov	r1, r9
 8016b88:	4640      	mov	r0, r8
 8016b8a:	47d0      	blx	sl
 8016b8c:	3001      	adds	r0, #1
 8016b8e:	d09b      	beq.n	8016ac8 <_printf_i+0x164>
 8016b90:	3501      	adds	r5, #1
 8016b92:	68e3      	ldr	r3, [r4, #12]
 8016b94:	9903      	ldr	r1, [sp, #12]
 8016b96:	1a5b      	subs	r3, r3, r1
 8016b98:	42ab      	cmp	r3, r5
 8016b9a:	dcf2      	bgt.n	8016b82 <_printf_i+0x21e>
 8016b9c:	e7eb      	b.n	8016b76 <_printf_i+0x212>
 8016b9e:	2500      	movs	r5, #0
 8016ba0:	f104 0619 	add.w	r6, r4, #25
 8016ba4:	e7f5      	b.n	8016b92 <_printf_i+0x22e>
 8016ba6:	bf00      	nop
 8016ba8:	08019a8a 	.word	0x08019a8a
 8016bac:	08019a9b 	.word	0x08019a9b

08016bb0 <iprintf>:
 8016bb0:	b40f      	push	{r0, r1, r2, r3}
 8016bb2:	4b0a      	ldr	r3, [pc, #40]	; (8016bdc <iprintf+0x2c>)
 8016bb4:	b513      	push	{r0, r1, r4, lr}
 8016bb6:	681c      	ldr	r4, [r3, #0]
 8016bb8:	b124      	cbz	r4, 8016bc4 <iprintf+0x14>
 8016bba:	69a3      	ldr	r3, [r4, #24]
 8016bbc:	b913      	cbnz	r3, 8016bc4 <iprintf+0x14>
 8016bbe:	4620      	mov	r0, r4
 8016bc0:	f7ff f9cc 	bl	8015f5c <__sinit>
 8016bc4:	ab05      	add	r3, sp, #20
 8016bc6:	9a04      	ldr	r2, [sp, #16]
 8016bc8:	68a1      	ldr	r1, [r4, #8]
 8016bca:	9301      	str	r3, [sp, #4]
 8016bcc:	4620      	mov	r0, r4
 8016bce:	f001 fdd1 	bl	8018774 <_vfiprintf_r>
 8016bd2:	b002      	add	sp, #8
 8016bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016bd8:	b004      	add	sp, #16
 8016bda:	4770      	bx	lr
 8016bdc:	2000013c 	.word	0x2000013c

08016be0 <_puts_r>:
 8016be0:	b570      	push	{r4, r5, r6, lr}
 8016be2:	460e      	mov	r6, r1
 8016be4:	4605      	mov	r5, r0
 8016be6:	b118      	cbz	r0, 8016bf0 <_puts_r+0x10>
 8016be8:	6983      	ldr	r3, [r0, #24]
 8016bea:	b90b      	cbnz	r3, 8016bf0 <_puts_r+0x10>
 8016bec:	f7ff f9b6 	bl	8015f5c <__sinit>
 8016bf0:	69ab      	ldr	r3, [r5, #24]
 8016bf2:	68ac      	ldr	r4, [r5, #8]
 8016bf4:	b913      	cbnz	r3, 8016bfc <_puts_r+0x1c>
 8016bf6:	4628      	mov	r0, r5
 8016bf8:	f7ff f9b0 	bl	8015f5c <__sinit>
 8016bfc:	4b2c      	ldr	r3, [pc, #176]	; (8016cb0 <_puts_r+0xd0>)
 8016bfe:	429c      	cmp	r4, r3
 8016c00:	d120      	bne.n	8016c44 <_puts_r+0x64>
 8016c02:	686c      	ldr	r4, [r5, #4]
 8016c04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016c06:	07db      	lsls	r3, r3, #31
 8016c08:	d405      	bmi.n	8016c16 <_puts_r+0x36>
 8016c0a:	89a3      	ldrh	r3, [r4, #12]
 8016c0c:	0598      	lsls	r0, r3, #22
 8016c0e:	d402      	bmi.n	8016c16 <_puts_r+0x36>
 8016c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c12:	f7ee fd1f 	bl	8005654 <__retarget_lock_acquire_recursive>
 8016c16:	89a3      	ldrh	r3, [r4, #12]
 8016c18:	0719      	lsls	r1, r3, #28
 8016c1a:	d51d      	bpl.n	8016c58 <_puts_r+0x78>
 8016c1c:	6923      	ldr	r3, [r4, #16]
 8016c1e:	b1db      	cbz	r3, 8016c58 <_puts_r+0x78>
 8016c20:	3e01      	subs	r6, #1
 8016c22:	68a3      	ldr	r3, [r4, #8]
 8016c24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016c28:	3b01      	subs	r3, #1
 8016c2a:	60a3      	str	r3, [r4, #8]
 8016c2c:	bb39      	cbnz	r1, 8016c7e <_puts_r+0x9e>
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	da38      	bge.n	8016ca4 <_puts_r+0xc4>
 8016c32:	4622      	mov	r2, r4
 8016c34:	210a      	movs	r1, #10
 8016c36:	4628      	mov	r0, r5
 8016c38:	f000 f91e 	bl	8016e78 <__swbuf_r>
 8016c3c:	3001      	adds	r0, #1
 8016c3e:	d011      	beq.n	8016c64 <_puts_r+0x84>
 8016c40:	250a      	movs	r5, #10
 8016c42:	e011      	b.n	8016c68 <_puts_r+0x88>
 8016c44:	4b1b      	ldr	r3, [pc, #108]	; (8016cb4 <_puts_r+0xd4>)
 8016c46:	429c      	cmp	r4, r3
 8016c48:	d101      	bne.n	8016c4e <_puts_r+0x6e>
 8016c4a:	68ac      	ldr	r4, [r5, #8]
 8016c4c:	e7da      	b.n	8016c04 <_puts_r+0x24>
 8016c4e:	4b1a      	ldr	r3, [pc, #104]	; (8016cb8 <_puts_r+0xd8>)
 8016c50:	429c      	cmp	r4, r3
 8016c52:	bf08      	it	eq
 8016c54:	68ec      	ldreq	r4, [r5, #12]
 8016c56:	e7d5      	b.n	8016c04 <_puts_r+0x24>
 8016c58:	4621      	mov	r1, r4
 8016c5a:	4628      	mov	r0, r5
 8016c5c:	f000 f970 	bl	8016f40 <__swsetup_r>
 8016c60:	2800      	cmp	r0, #0
 8016c62:	d0dd      	beq.n	8016c20 <_puts_r+0x40>
 8016c64:	f04f 35ff 	mov.w	r5, #4294967295
 8016c68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016c6a:	07da      	lsls	r2, r3, #31
 8016c6c:	d405      	bmi.n	8016c7a <_puts_r+0x9a>
 8016c6e:	89a3      	ldrh	r3, [r4, #12]
 8016c70:	059b      	lsls	r3, r3, #22
 8016c72:	d402      	bmi.n	8016c7a <_puts_r+0x9a>
 8016c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c76:	f7ee fd01 	bl	800567c <__retarget_lock_release_recursive>
 8016c7a:	4628      	mov	r0, r5
 8016c7c:	bd70      	pop	{r4, r5, r6, pc}
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	da04      	bge.n	8016c8c <_puts_r+0xac>
 8016c82:	69a2      	ldr	r2, [r4, #24]
 8016c84:	429a      	cmp	r2, r3
 8016c86:	dc06      	bgt.n	8016c96 <_puts_r+0xb6>
 8016c88:	290a      	cmp	r1, #10
 8016c8a:	d004      	beq.n	8016c96 <_puts_r+0xb6>
 8016c8c:	6823      	ldr	r3, [r4, #0]
 8016c8e:	1c5a      	adds	r2, r3, #1
 8016c90:	6022      	str	r2, [r4, #0]
 8016c92:	7019      	strb	r1, [r3, #0]
 8016c94:	e7c5      	b.n	8016c22 <_puts_r+0x42>
 8016c96:	4622      	mov	r2, r4
 8016c98:	4628      	mov	r0, r5
 8016c9a:	f000 f8ed 	bl	8016e78 <__swbuf_r>
 8016c9e:	3001      	adds	r0, #1
 8016ca0:	d1bf      	bne.n	8016c22 <_puts_r+0x42>
 8016ca2:	e7df      	b.n	8016c64 <_puts_r+0x84>
 8016ca4:	6823      	ldr	r3, [r4, #0]
 8016ca6:	250a      	movs	r5, #10
 8016ca8:	1c5a      	adds	r2, r3, #1
 8016caa:	6022      	str	r2, [r4, #0]
 8016cac:	701d      	strb	r5, [r3, #0]
 8016cae:	e7db      	b.n	8016c68 <_puts_r+0x88>
 8016cb0:	08019a34 	.word	0x08019a34
 8016cb4:	08019a54 	.word	0x08019a54
 8016cb8:	08019a14 	.word	0x08019a14

08016cbc <puts>:
 8016cbc:	4b02      	ldr	r3, [pc, #8]	; (8016cc8 <puts+0xc>)
 8016cbe:	4601      	mov	r1, r0
 8016cc0:	6818      	ldr	r0, [r3, #0]
 8016cc2:	f7ff bf8d 	b.w	8016be0 <_puts_r>
 8016cc6:	bf00      	nop
 8016cc8:	2000013c 	.word	0x2000013c

08016ccc <cleanup_glue>:
 8016ccc:	b538      	push	{r3, r4, r5, lr}
 8016cce:	460c      	mov	r4, r1
 8016cd0:	6809      	ldr	r1, [r1, #0]
 8016cd2:	4605      	mov	r5, r0
 8016cd4:	b109      	cbz	r1, 8016cda <cleanup_glue+0xe>
 8016cd6:	f7ff fff9 	bl	8016ccc <cleanup_glue>
 8016cda:	4621      	mov	r1, r4
 8016cdc:	4628      	mov	r0, r5
 8016cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016ce2:	f7ff ba1b 	b.w	801611c <_free_r>
	...

08016ce8 <_reclaim_reent>:
 8016ce8:	4b2c      	ldr	r3, [pc, #176]	; (8016d9c <_reclaim_reent+0xb4>)
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	4283      	cmp	r3, r0
 8016cee:	b570      	push	{r4, r5, r6, lr}
 8016cf0:	4604      	mov	r4, r0
 8016cf2:	d051      	beq.n	8016d98 <_reclaim_reent+0xb0>
 8016cf4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016cf6:	b143      	cbz	r3, 8016d0a <_reclaim_reent+0x22>
 8016cf8:	68db      	ldr	r3, [r3, #12]
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d14a      	bne.n	8016d94 <_reclaim_reent+0xac>
 8016cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d00:	6819      	ldr	r1, [r3, #0]
 8016d02:	b111      	cbz	r1, 8016d0a <_reclaim_reent+0x22>
 8016d04:	4620      	mov	r0, r4
 8016d06:	f7ff fa09 	bl	801611c <_free_r>
 8016d0a:	6961      	ldr	r1, [r4, #20]
 8016d0c:	b111      	cbz	r1, 8016d14 <_reclaim_reent+0x2c>
 8016d0e:	4620      	mov	r0, r4
 8016d10:	f7ff fa04 	bl	801611c <_free_r>
 8016d14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016d16:	b111      	cbz	r1, 8016d1e <_reclaim_reent+0x36>
 8016d18:	4620      	mov	r0, r4
 8016d1a:	f7ff f9ff 	bl	801611c <_free_r>
 8016d1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016d20:	b111      	cbz	r1, 8016d28 <_reclaim_reent+0x40>
 8016d22:	4620      	mov	r0, r4
 8016d24:	f7ff f9fa 	bl	801611c <_free_r>
 8016d28:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016d2a:	b111      	cbz	r1, 8016d32 <_reclaim_reent+0x4a>
 8016d2c:	4620      	mov	r0, r4
 8016d2e:	f7ff f9f5 	bl	801611c <_free_r>
 8016d32:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016d34:	b111      	cbz	r1, 8016d3c <_reclaim_reent+0x54>
 8016d36:	4620      	mov	r0, r4
 8016d38:	f7ff f9f0 	bl	801611c <_free_r>
 8016d3c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016d3e:	b111      	cbz	r1, 8016d46 <_reclaim_reent+0x5e>
 8016d40:	4620      	mov	r0, r4
 8016d42:	f7ff f9eb 	bl	801611c <_free_r>
 8016d46:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016d48:	b111      	cbz	r1, 8016d50 <_reclaim_reent+0x68>
 8016d4a:	4620      	mov	r0, r4
 8016d4c:	f7ff f9e6 	bl	801611c <_free_r>
 8016d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016d52:	b111      	cbz	r1, 8016d5a <_reclaim_reent+0x72>
 8016d54:	4620      	mov	r0, r4
 8016d56:	f7ff f9e1 	bl	801611c <_free_r>
 8016d5a:	69a3      	ldr	r3, [r4, #24]
 8016d5c:	b1e3      	cbz	r3, 8016d98 <_reclaim_reent+0xb0>
 8016d5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016d60:	4620      	mov	r0, r4
 8016d62:	4798      	blx	r3
 8016d64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016d66:	b1b9      	cbz	r1, 8016d98 <_reclaim_reent+0xb0>
 8016d68:	4620      	mov	r0, r4
 8016d6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d6e:	f7ff bfad 	b.w	8016ccc <cleanup_glue>
 8016d72:	5949      	ldr	r1, [r1, r5]
 8016d74:	b941      	cbnz	r1, 8016d88 <_reclaim_reent+0xa0>
 8016d76:	3504      	adds	r5, #4
 8016d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d7a:	2d80      	cmp	r5, #128	; 0x80
 8016d7c:	68d9      	ldr	r1, [r3, #12]
 8016d7e:	d1f8      	bne.n	8016d72 <_reclaim_reent+0x8a>
 8016d80:	4620      	mov	r0, r4
 8016d82:	f7ff f9cb 	bl	801611c <_free_r>
 8016d86:	e7ba      	b.n	8016cfe <_reclaim_reent+0x16>
 8016d88:	680e      	ldr	r6, [r1, #0]
 8016d8a:	4620      	mov	r0, r4
 8016d8c:	f7ff f9c6 	bl	801611c <_free_r>
 8016d90:	4631      	mov	r1, r6
 8016d92:	e7ef      	b.n	8016d74 <_reclaim_reent+0x8c>
 8016d94:	2500      	movs	r5, #0
 8016d96:	e7ef      	b.n	8016d78 <_reclaim_reent+0x90>
 8016d98:	bd70      	pop	{r4, r5, r6, pc}
 8016d9a:	bf00      	nop
 8016d9c:	2000013c 	.word	0x2000013c

08016da0 <_sbrk_r>:
 8016da0:	b538      	push	{r3, r4, r5, lr}
 8016da2:	4d06      	ldr	r5, [pc, #24]	; (8016dbc <_sbrk_r+0x1c>)
 8016da4:	2300      	movs	r3, #0
 8016da6:	4604      	mov	r4, r0
 8016da8:	4608      	mov	r0, r1
 8016daa:	602b      	str	r3, [r5, #0]
 8016dac:	f7ed fff2 	bl	8004d94 <_sbrk>
 8016db0:	1c43      	adds	r3, r0, #1
 8016db2:	d102      	bne.n	8016dba <_sbrk_r+0x1a>
 8016db4:	682b      	ldr	r3, [r5, #0]
 8016db6:	b103      	cbz	r3, 8016dba <_sbrk_r+0x1a>
 8016db8:	6023      	str	r3, [r4, #0]
 8016dba:	bd38      	pop	{r3, r4, r5, pc}
 8016dbc:	2000710c 	.word	0x2000710c

08016dc0 <__sread>:
 8016dc0:	b510      	push	{r4, lr}
 8016dc2:	460c      	mov	r4, r1
 8016dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016dc8:	f001 fe04 	bl	80189d4 <_read_r>
 8016dcc:	2800      	cmp	r0, #0
 8016dce:	bfab      	itete	ge
 8016dd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016dd2:	89a3      	ldrhlt	r3, [r4, #12]
 8016dd4:	181b      	addge	r3, r3, r0
 8016dd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016dda:	bfac      	ite	ge
 8016ddc:	6563      	strge	r3, [r4, #84]	; 0x54
 8016dde:	81a3      	strhlt	r3, [r4, #12]
 8016de0:	bd10      	pop	{r4, pc}

08016de2 <__swrite>:
 8016de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016de6:	461f      	mov	r7, r3
 8016de8:	898b      	ldrh	r3, [r1, #12]
 8016dea:	05db      	lsls	r3, r3, #23
 8016dec:	4605      	mov	r5, r0
 8016dee:	460c      	mov	r4, r1
 8016df0:	4616      	mov	r6, r2
 8016df2:	d505      	bpl.n	8016e00 <__swrite+0x1e>
 8016df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016df8:	2302      	movs	r3, #2
 8016dfa:	2200      	movs	r2, #0
 8016dfc:	f001 f860 	bl	8017ec0 <_lseek_r>
 8016e00:	89a3      	ldrh	r3, [r4, #12]
 8016e02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016e0a:	81a3      	strh	r3, [r4, #12]
 8016e0c:	4632      	mov	r2, r6
 8016e0e:	463b      	mov	r3, r7
 8016e10:	4628      	mov	r0, r5
 8016e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e16:	f000 b881 	b.w	8016f1c <_write_r>

08016e1a <__sseek>:
 8016e1a:	b510      	push	{r4, lr}
 8016e1c:	460c      	mov	r4, r1
 8016e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e22:	f001 f84d 	bl	8017ec0 <_lseek_r>
 8016e26:	1c43      	adds	r3, r0, #1
 8016e28:	89a3      	ldrh	r3, [r4, #12]
 8016e2a:	bf15      	itete	ne
 8016e2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8016e2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016e32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016e36:	81a3      	strheq	r3, [r4, #12]
 8016e38:	bf18      	it	ne
 8016e3a:	81a3      	strhne	r3, [r4, #12]
 8016e3c:	bd10      	pop	{r4, pc}

08016e3e <__sclose>:
 8016e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e42:	f000 b8eb 	b.w	801701c <_close_r>
	...

08016e48 <viprintf>:
 8016e48:	b513      	push	{r0, r1, r4, lr}
 8016e4a:	460b      	mov	r3, r1
 8016e4c:	4909      	ldr	r1, [pc, #36]	; (8016e74 <viprintf+0x2c>)
 8016e4e:	680c      	ldr	r4, [r1, #0]
 8016e50:	4602      	mov	r2, r0
 8016e52:	b144      	cbz	r4, 8016e66 <viprintf+0x1e>
 8016e54:	69a1      	ldr	r1, [r4, #24]
 8016e56:	b931      	cbnz	r1, 8016e66 <viprintf+0x1e>
 8016e58:	e9cd 0300 	strd	r0, r3, [sp]
 8016e5c:	4620      	mov	r0, r4
 8016e5e:	f7ff f87d 	bl	8015f5c <__sinit>
 8016e62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016e66:	68a1      	ldr	r1, [r4, #8]
 8016e68:	4620      	mov	r0, r4
 8016e6a:	b002      	add	sp, #8
 8016e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e70:	f001 bc80 	b.w	8018774 <_vfiprintf_r>
 8016e74:	2000013c 	.word	0x2000013c

08016e78 <__swbuf_r>:
 8016e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e7a:	460e      	mov	r6, r1
 8016e7c:	4614      	mov	r4, r2
 8016e7e:	4605      	mov	r5, r0
 8016e80:	b118      	cbz	r0, 8016e8a <__swbuf_r+0x12>
 8016e82:	6983      	ldr	r3, [r0, #24]
 8016e84:	b90b      	cbnz	r3, 8016e8a <__swbuf_r+0x12>
 8016e86:	f7ff f869 	bl	8015f5c <__sinit>
 8016e8a:	4b21      	ldr	r3, [pc, #132]	; (8016f10 <__swbuf_r+0x98>)
 8016e8c:	429c      	cmp	r4, r3
 8016e8e:	d12b      	bne.n	8016ee8 <__swbuf_r+0x70>
 8016e90:	686c      	ldr	r4, [r5, #4]
 8016e92:	69a3      	ldr	r3, [r4, #24]
 8016e94:	60a3      	str	r3, [r4, #8]
 8016e96:	89a3      	ldrh	r3, [r4, #12]
 8016e98:	071a      	lsls	r2, r3, #28
 8016e9a:	d52f      	bpl.n	8016efc <__swbuf_r+0x84>
 8016e9c:	6923      	ldr	r3, [r4, #16]
 8016e9e:	b36b      	cbz	r3, 8016efc <__swbuf_r+0x84>
 8016ea0:	6923      	ldr	r3, [r4, #16]
 8016ea2:	6820      	ldr	r0, [r4, #0]
 8016ea4:	1ac0      	subs	r0, r0, r3
 8016ea6:	6963      	ldr	r3, [r4, #20]
 8016ea8:	b2f6      	uxtb	r6, r6
 8016eaa:	4283      	cmp	r3, r0
 8016eac:	4637      	mov	r7, r6
 8016eae:	dc04      	bgt.n	8016eba <__swbuf_r+0x42>
 8016eb0:	4621      	mov	r1, r4
 8016eb2:	4628      	mov	r0, r5
 8016eb4:	f000 ffc4 	bl	8017e40 <_fflush_r>
 8016eb8:	bb30      	cbnz	r0, 8016f08 <__swbuf_r+0x90>
 8016eba:	68a3      	ldr	r3, [r4, #8]
 8016ebc:	3b01      	subs	r3, #1
 8016ebe:	60a3      	str	r3, [r4, #8]
 8016ec0:	6823      	ldr	r3, [r4, #0]
 8016ec2:	1c5a      	adds	r2, r3, #1
 8016ec4:	6022      	str	r2, [r4, #0]
 8016ec6:	701e      	strb	r6, [r3, #0]
 8016ec8:	6963      	ldr	r3, [r4, #20]
 8016eca:	3001      	adds	r0, #1
 8016ecc:	4283      	cmp	r3, r0
 8016ece:	d004      	beq.n	8016eda <__swbuf_r+0x62>
 8016ed0:	89a3      	ldrh	r3, [r4, #12]
 8016ed2:	07db      	lsls	r3, r3, #31
 8016ed4:	d506      	bpl.n	8016ee4 <__swbuf_r+0x6c>
 8016ed6:	2e0a      	cmp	r6, #10
 8016ed8:	d104      	bne.n	8016ee4 <__swbuf_r+0x6c>
 8016eda:	4621      	mov	r1, r4
 8016edc:	4628      	mov	r0, r5
 8016ede:	f000 ffaf 	bl	8017e40 <_fflush_r>
 8016ee2:	b988      	cbnz	r0, 8016f08 <__swbuf_r+0x90>
 8016ee4:	4638      	mov	r0, r7
 8016ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ee8:	4b0a      	ldr	r3, [pc, #40]	; (8016f14 <__swbuf_r+0x9c>)
 8016eea:	429c      	cmp	r4, r3
 8016eec:	d101      	bne.n	8016ef2 <__swbuf_r+0x7a>
 8016eee:	68ac      	ldr	r4, [r5, #8]
 8016ef0:	e7cf      	b.n	8016e92 <__swbuf_r+0x1a>
 8016ef2:	4b09      	ldr	r3, [pc, #36]	; (8016f18 <__swbuf_r+0xa0>)
 8016ef4:	429c      	cmp	r4, r3
 8016ef6:	bf08      	it	eq
 8016ef8:	68ec      	ldreq	r4, [r5, #12]
 8016efa:	e7ca      	b.n	8016e92 <__swbuf_r+0x1a>
 8016efc:	4621      	mov	r1, r4
 8016efe:	4628      	mov	r0, r5
 8016f00:	f000 f81e 	bl	8016f40 <__swsetup_r>
 8016f04:	2800      	cmp	r0, #0
 8016f06:	d0cb      	beq.n	8016ea0 <__swbuf_r+0x28>
 8016f08:	f04f 37ff 	mov.w	r7, #4294967295
 8016f0c:	e7ea      	b.n	8016ee4 <__swbuf_r+0x6c>
 8016f0e:	bf00      	nop
 8016f10:	08019a34 	.word	0x08019a34
 8016f14:	08019a54 	.word	0x08019a54
 8016f18:	08019a14 	.word	0x08019a14

08016f1c <_write_r>:
 8016f1c:	b538      	push	{r3, r4, r5, lr}
 8016f1e:	4d07      	ldr	r5, [pc, #28]	; (8016f3c <_write_r+0x20>)
 8016f20:	4604      	mov	r4, r0
 8016f22:	4608      	mov	r0, r1
 8016f24:	4611      	mov	r1, r2
 8016f26:	2200      	movs	r2, #0
 8016f28:	602a      	str	r2, [r5, #0]
 8016f2a:	461a      	mov	r2, r3
 8016f2c:	f7ec fdd7 	bl	8003ade <_write>
 8016f30:	1c43      	adds	r3, r0, #1
 8016f32:	d102      	bne.n	8016f3a <_write_r+0x1e>
 8016f34:	682b      	ldr	r3, [r5, #0]
 8016f36:	b103      	cbz	r3, 8016f3a <_write_r+0x1e>
 8016f38:	6023      	str	r3, [r4, #0]
 8016f3a:	bd38      	pop	{r3, r4, r5, pc}
 8016f3c:	2000710c 	.word	0x2000710c

08016f40 <__swsetup_r>:
 8016f40:	4b32      	ldr	r3, [pc, #200]	; (801700c <__swsetup_r+0xcc>)
 8016f42:	b570      	push	{r4, r5, r6, lr}
 8016f44:	681d      	ldr	r5, [r3, #0]
 8016f46:	4606      	mov	r6, r0
 8016f48:	460c      	mov	r4, r1
 8016f4a:	b125      	cbz	r5, 8016f56 <__swsetup_r+0x16>
 8016f4c:	69ab      	ldr	r3, [r5, #24]
 8016f4e:	b913      	cbnz	r3, 8016f56 <__swsetup_r+0x16>
 8016f50:	4628      	mov	r0, r5
 8016f52:	f7ff f803 	bl	8015f5c <__sinit>
 8016f56:	4b2e      	ldr	r3, [pc, #184]	; (8017010 <__swsetup_r+0xd0>)
 8016f58:	429c      	cmp	r4, r3
 8016f5a:	d10f      	bne.n	8016f7c <__swsetup_r+0x3c>
 8016f5c:	686c      	ldr	r4, [r5, #4]
 8016f5e:	89a3      	ldrh	r3, [r4, #12]
 8016f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016f64:	0719      	lsls	r1, r3, #28
 8016f66:	d42c      	bmi.n	8016fc2 <__swsetup_r+0x82>
 8016f68:	06dd      	lsls	r5, r3, #27
 8016f6a:	d411      	bmi.n	8016f90 <__swsetup_r+0x50>
 8016f6c:	2309      	movs	r3, #9
 8016f6e:	6033      	str	r3, [r6, #0]
 8016f70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016f74:	81a3      	strh	r3, [r4, #12]
 8016f76:	f04f 30ff 	mov.w	r0, #4294967295
 8016f7a:	e03e      	b.n	8016ffa <__swsetup_r+0xba>
 8016f7c:	4b25      	ldr	r3, [pc, #148]	; (8017014 <__swsetup_r+0xd4>)
 8016f7e:	429c      	cmp	r4, r3
 8016f80:	d101      	bne.n	8016f86 <__swsetup_r+0x46>
 8016f82:	68ac      	ldr	r4, [r5, #8]
 8016f84:	e7eb      	b.n	8016f5e <__swsetup_r+0x1e>
 8016f86:	4b24      	ldr	r3, [pc, #144]	; (8017018 <__swsetup_r+0xd8>)
 8016f88:	429c      	cmp	r4, r3
 8016f8a:	bf08      	it	eq
 8016f8c:	68ec      	ldreq	r4, [r5, #12]
 8016f8e:	e7e6      	b.n	8016f5e <__swsetup_r+0x1e>
 8016f90:	0758      	lsls	r0, r3, #29
 8016f92:	d512      	bpl.n	8016fba <__swsetup_r+0x7a>
 8016f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016f96:	b141      	cbz	r1, 8016faa <__swsetup_r+0x6a>
 8016f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f9c:	4299      	cmp	r1, r3
 8016f9e:	d002      	beq.n	8016fa6 <__swsetup_r+0x66>
 8016fa0:	4630      	mov	r0, r6
 8016fa2:	f7ff f8bb 	bl	801611c <_free_r>
 8016fa6:	2300      	movs	r3, #0
 8016fa8:	6363      	str	r3, [r4, #52]	; 0x34
 8016faa:	89a3      	ldrh	r3, [r4, #12]
 8016fac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016fb0:	81a3      	strh	r3, [r4, #12]
 8016fb2:	2300      	movs	r3, #0
 8016fb4:	6063      	str	r3, [r4, #4]
 8016fb6:	6923      	ldr	r3, [r4, #16]
 8016fb8:	6023      	str	r3, [r4, #0]
 8016fba:	89a3      	ldrh	r3, [r4, #12]
 8016fbc:	f043 0308 	orr.w	r3, r3, #8
 8016fc0:	81a3      	strh	r3, [r4, #12]
 8016fc2:	6923      	ldr	r3, [r4, #16]
 8016fc4:	b94b      	cbnz	r3, 8016fda <__swsetup_r+0x9a>
 8016fc6:	89a3      	ldrh	r3, [r4, #12]
 8016fc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016fd0:	d003      	beq.n	8016fda <__swsetup_r+0x9a>
 8016fd2:	4621      	mov	r1, r4
 8016fd4:	4630      	mov	r0, r6
 8016fd6:	f000 ffab 	bl	8017f30 <__smakebuf_r>
 8016fda:	89a0      	ldrh	r0, [r4, #12]
 8016fdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016fe0:	f010 0301 	ands.w	r3, r0, #1
 8016fe4:	d00a      	beq.n	8016ffc <__swsetup_r+0xbc>
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	60a3      	str	r3, [r4, #8]
 8016fea:	6963      	ldr	r3, [r4, #20]
 8016fec:	425b      	negs	r3, r3
 8016fee:	61a3      	str	r3, [r4, #24]
 8016ff0:	6923      	ldr	r3, [r4, #16]
 8016ff2:	b943      	cbnz	r3, 8017006 <__swsetup_r+0xc6>
 8016ff4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016ff8:	d1ba      	bne.n	8016f70 <__swsetup_r+0x30>
 8016ffa:	bd70      	pop	{r4, r5, r6, pc}
 8016ffc:	0781      	lsls	r1, r0, #30
 8016ffe:	bf58      	it	pl
 8017000:	6963      	ldrpl	r3, [r4, #20]
 8017002:	60a3      	str	r3, [r4, #8]
 8017004:	e7f4      	b.n	8016ff0 <__swsetup_r+0xb0>
 8017006:	2000      	movs	r0, #0
 8017008:	e7f7      	b.n	8016ffa <__swsetup_r+0xba>
 801700a:	bf00      	nop
 801700c:	2000013c 	.word	0x2000013c
 8017010:	08019a34 	.word	0x08019a34
 8017014:	08019a54 	.word	0x08019a54
 8017018:	08019a14 	.word	0x08019a14

0801701c <_close_r>:
 801701c:	b538      	push	{r3, r4, r5, lr}
 801701e:	4d06      	ldr	r5, [pc, #24]	; (8017038 <_close_r+0x1c>)
 8017020:	2300      	movs	r3, #0
 8017022:	4604      	mov	r4, r0
 8017024:	4608      	mov	r0, r1
 8017026:	602b      	str	r3, [r5, #0]
 8017028:	f7ed fe7f 	bl	8004d2a <_close>
 801702c:	1c43      	adds	r3, r0, #1
 801702e:	d102      	bne.n	8017036 <_close_r+0x1a>
 8017030:	682b      	ldr	r3, [r5, #0]
 8017032:	b103      	cbz	r3, 8017036 <_close_r+0x1a>
 8017034:	6023      	str	r3, [r4, #0]
 8017036:	bd38      	pop	{r3, r4, r5, pc}
 8017038:	2000710c 	.word	0x2000710c

0801703c <quorem>:
 801703c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017040:	6903      	ldr	r3, [r0, #16]
 8017042:	690c      	ldr	r4, [r1, #16]
 8017044:	42a3      	cmp	r3, r4
 8017046:	4607      	mov	r7, r0
 8017048:	f2c0 8081 	blt.w	801714e <quorem+0x112>
 801704c:	3c01      	subs	r4, #1
 801704e:	f101 0814 	add.w	r8, r1, #20
 8017052:	f100 0514 	add.w	r5, r0, #20
 8017056:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801705a:	9301      	str	r3, [sp, #4]
 801705c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017060:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017064:	3301      	adds	r3, #1
 8017066:	429a      	cmp	r2, r3
 8017068:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801706c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017070:	fbb2 f6f3 	udiv	r6, r2, r3
 8017074:	d331      	bcc.n	80170da <quorem+0x9e>
 8017076:	f04f 0e00 	mov.w	lr, #0
 801707a:	4640      	mov	r0, r8
 801707c:	46ac      	mov	ip, r5
 801707e:	46f2      	mov	sl, lr
 8017080:	f850 2b04 	ldr.w	r2, [r0], #4
 8017084:	b293      	uxth	r3, r2
 8017086:	fb06 e303 	mla	r3, r6, r3, lr
 801708a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801708e:	b29b      	uxth	r3, r3
 8017090:	ebaa 0303 	sub.w	r3, sl, r3
 8017094:	f8dc a000 	ldr.w	sl, [ip]
 8017098:	0c12      	lsrs	r2, r2, #16
 801709a:	fa13 f38a 	uxtah	r3, r3, sl
 801709e:	fb06 e202 	mla	r2, r6, r2, lr
 80170a2:	9300      	str	r3, [sp, #0]
 80170a4:	9b00      	ldr	r3, [sp, #0]
 80170a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80170aa:	b292      	uxth	r2, r2
 80170ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80170b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80170b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80170b8:	4581      	cmp	r9, r0
 80170ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80170be:	f84c 3b04 	str.w	r3, [ip], #4
 80170c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80170c6:	d2db      	bcs.n	8017080 <quorem+0x44>
 80170c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80170cc:	b92b      	cbnz	r3, 80170da <quorem+0x9e>
 80170ce:	9b01      	ldr	r3, [sp, #4]
 80170d0:	3b04      	subs	r3, #4
 80170d2:	429d      	cmp	r5, r3
 80170d4:	461a      	mov	r2, r3
 80170d6:	d32e      	bcc.n	8017136 <quorem+0xfa>
 80170d8:	613c      	str	r4, [r7, #16]
 80170da:	4638      	mov	r0, r7
 80170dc:	f001 fa08 	bl	80184f0 <__mcmp>
 80170e0:	2800      	cmp	r0, #0
 80170e2:	db24      	blt.n	801712e <quorem+0xf2>
 80170e4:	3601      	adds	r6, #1
 80170e6:	4628      	mov	r0, r5
 80170e8:	f04f 0c00 	mov.w	ip, #0
 80170ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80170f0:	f8d0 e000 	ldr.w	lr, [r0]
 80170f4:	b293      	uxth	r3, r2
 80170f6:	ebac 0303 	sub.w	r3, ip, r3
 80170fa:	0c12      	lsrs	r2, r2, #16
 80170fc:	fa13 f38e 	uxtah	r3, r3, lr
 8017100:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017104:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017108:	b29b      	uxth	r3, r3
 801710a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801710e:	45c1      	cmp	r9, r8
 8017110:	f840 3b04 	str.w	r3, [r0], #4
 8017114:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017118:	d2e8      	bcs.n	80170ec <quorem+0xb0>
 801711a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801711e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017122:	b922      	cbnz	r2, 801712e <quorem+0xf2>
 8017124:	3b04      	subs	r3, #4
 8017126:	429d      	cmp	r5, r3
 8017128:	461a      	mov	r2, r3
 801712a:	d30a      	bcc.n	8017142 <quorem+0x106>
 801712c:	613c      	str	r4, [r7, #16]
 801712e:	4630      	mov	r0, r6
 8017130:	b003      	add	sp, #12
 8017132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017136:	6812      	ldr	r2, [r2, #0]
 8017138:	3b04      	subs	r3, #4
 801713a:	2a00      	cmp	r2, #0
 801713c:	d1cc      	bne.n	80170d8 <quorem+0x9c>
 801713e:	3c01      	subs	r4, #1
 8017140:	e7c7      	b.n	80170d2 <quorem+0x96>
 8017142:	6812      	ldr	r2, [r2, #0]
 8017144:	3b04      	subs	r3, #4
 8017146:	2a00      	cmp	r2, #0
 8017148:	d1f0      	bne.n	801712c <quorem+0xf0>
 801714a:	3c01      	subs	r4, #1
 801714c:	e7eb      	b.n	8017126 <quorem+0xea>
 801714e:	2000      	movs	r0, #0
 8017150:	e7ee      	b.n	8017130 <quorem+0xf4>
 8017152:	0000      	movs	r0, r0
 8017154:	0000      	movs	r0, r0
	...

08017158 <_dtoa_r>:
 8017158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801715c:	ed2d 8b04 	vpush	{d8-d9}
 8017160:	ec57 6b10 	vmov	r6, r7, d0
 8017164:	b093      	sub	sp, #76	; 0x4c
 8017166:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017168:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801716c:	9106      	str	r1, [sp, #24]
 801716e:	ee10 aa10 	vmov	sl, s0
 8017172:	4604      	mov	r4, r0
 8017174:	9209      	str	r2, [sp, #36]	; 0x24
 8017176:	930c      	str	r3, [sp, #48]	; 0x30
 8017178:	46bb      	mov	fp, r7
 801717a:	b975      	cbnz	r5, 801719a <_dtoa_r+0x42>
 801717c:	2010      	movs	r0, #16
 801717e:	f7fe ffaf 	bl	80160e0 <malloc>
 8017182:	4602      	mov	r2, r0
 8017184:	6260      	str	r0, [r4, #36]	; 0x24
 8017186:	b920      	cbnz	r0, 8017192 <_dtoa_r+0x3a>
 8017188:	4ba7      	ldr	r3, [pc, #668]	; (8017428 <_dtoa_r+0x2d0>)
 801718a:	21ea      	movs	r1, #234	; 0xea
 801718c:	48a7      	ldr	r0, [pc, #668]	; (801742c <_dtoa_r+0x2d4>)
 801718e:	f001 fc41 	bl	8018a14 <__assert_func>
 8017192:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017196:	6005      	str	r5, [r0, #0]
 8017198:	60c5      	str	r5, [r0, #12]
 801719a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801719c:	6819      	ldr	r1, [r3, #0]
 801719e:	b151      	cbz	r1, 80171b6 <_dtoa_r+0x5e>
 80171a0:	685a      	ldr	r2, [r3, #4]
 80171a2:	604a      	str	r2, [r1, #4]
 80171a4:	2301      	movs	r3, #1
 80171a6:	4093      	lsls	r3, r2
 80171a8:	608b      	str	r3, [r1, #8]
 80171aa:	4620      	mov	r0, r4
 80171ac:	f000 ff5e 	bl	801806c <_Bfree>
 80171b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80171b2:	2200      	movs	r2, #0
 80171b4:	601a      	str	r2, [r3, #0]
 80171b6:	1e3b      	subs	r3, r7, #0
 80171b8:	bfaa      	itet	ge
 80171ba:	2300      	movge	r3, #0
 80171bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80171c0:	f8c8 3000 	strge.w	r3, [r8]
 80171c4:	4b9a      	ldr	r3, [pc, #616]	; (8017430 <_dtoa_r+0x2d8>)
 80171c6:	bfbc      	itt	lt
 80171c8:	2201      	movlt	r2, #1
 80171ca:	f8c8 2000 	strlt.w	r2, [r8]
 80171ce:	ea33 030b 	bics.w	r3, r3, fp
 80171d2:	d11b      	bne.n	801720c <_dtoa_r+0xb4>
 80171d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80171d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80171da:	6013      	str	r3, [r2, #0]
 80171dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80171e0:	4333      	orrs	r3, r6
 80171e2:	f000 8592 	beq.w	8017d0a <_dtoa_r+0xbb2>
 80171e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80171e8:	b963      	cbnz	r3, 8017204 <_dtoa_r+0xac>
 80171ea:	4b92      	ldr	r3, [pc, #584]	; (8017434 <_dtoa_r+0x2dc>)
 80171ec:	e022      	b.n	8017234 <_dtoa_r+0xdc>
 80171ee:	4b92      	ldr	r3, [pc, #584]	; (8017438 <_dtoa_r+0x2e0>)
 80171f0:	9301      	str	r3, [sp, #4]
 80171f2:	3308      	adds	r3, #8
 80171f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80171f6:	6013      	str	r3, [r2, #0]
 80171f8:	9801      	ldr	r0, [sp, #4]
 80171fa:	b013      	add	sp, #76	; 0x4c
 80171fc:	ecbd 8b04 	vpop	{d8-d9}
 8017200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017204:	4b8b      	ldr	r3, [pc, #556]	; (8017434 <_dtoa_r+0x2dc>)
 8017206:	9301      	str	r3, [sp, #4]
 8017208:	3303      	adds	r3, #3
 801720a:	e7f3      	b.n	80171f4 <_dtoa_r+0x9c>
 801720c:	2200      	movs	r2, #0
 801720e:	2300      	movs	r3, #0
 8017210:	4650      	mov	r0, sl
 8017212:	4659      	mov	r1, fp
 8017214:	f7e9 fc78 	bl	8000b08 <__aeabi_dcmpeq>
 8017218:	ec4b ab19 	vmov	d9, sl, fp
 801721c:	4680      	mov	r8, r0
 801721e:	b158      	cbz	r0, 8017238 <_dtoa_r+0xe0>
 8017220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017222:	2301      	movs	r3, #1
 8017224:	6013      	str	r3, [r2, #0]
 8017226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017228:	2b00      	cmp	r3, #0
 801722a:	f000 856b 	beq.w	8017d04 <_dtoa_r+0xbac>
 801722e:	4883      	ldr	r0, [pc, #524]	; (801743c <_dtoa_r+0x2e4>)
 8017230:	6018      	str	r0, [r3, #0]
 8017232:	1e43      	subs	r3, r0, #1
 8017234:	9301      	str	r3, [sp, #4]
 8017236:	e7df      	b.n	80171f8 <_dtoa_r+0xa0>
 8017238:	ec4b ab10 	vmov	d0, sl, fp
 801723c:	aa10      	add	r2, sp, #64	; 0x40
 801723e:	a911      	add	r1, sp, #68	; 0x44
 8017240:	4620      	mov	r0, r4
 8017242:	f001 f9fb 	bl	801863c <__d2b>
 8017246:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801724a:	ee08 0a10 	vmov	s16, r0
 801724e:	2d00      	cmp	r5, #0
 8017250:	f000 8084 	beq.w	801735c <_dtoa_r+0x204>
 8017254:	ee19 3a90 	vmov	r3, s19
 8017258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801725c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017260:	4656      	mov	r6, sl
 8017262:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017266:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801726a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801726e:	4b74      	ldr	r3, [pc, #464]	; (8017440 <_dtoa_r+0x2e8>)
 8017270:	2200      	movs	r2, #0
 8017272:	4630      	mov	r0, r6
 8017274:	4639      	mov	r1, r7
 8017276:	f7e9 f827 	bl	80002c8 <__aeabi_dsub>
 801727a:	a365      	add	r3, pc, #404	; (adr r3, 8017410 <_dtoa_r+0x2b8>)
 801727c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017280:	f7e9 f9da 	bl	8000638 <__aeabi_dmul>
 8017284:	a364      	add	r3, pc, #400	; (adr r3, 8017418 <_dtoa_r+0x2c0>)
 8017286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801728a:	f7e9 f81f 	bl	80002cc <__adddf3>
 801728e:	4606      	mov	r6, r0
 8017290:	4628      	mov	r0, r5
 8017292:	460f      	mov	r7, r1
 8017294:	f7e9 f966 	bl	8000564 <__aeabi_i2d>
 8017298:	a361      	add	r3, pc, #388	; (adr r3, 8017420 <_dtoa_r+0x2c8>)
 801729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801729e:	f7e9 f9cb 	bl	8000638 <__aeabi_dmul>
 80172a2:	4602      	mov	r2, r0
 80172a4:	460b      	mov	r3, r1
 80172a6:	4630      	mov	r0, r6
 80172a8:	4639      	mov	r1, r7
 80172aa:	f7e9 f80f 	bl	80002cc <__adddf3>
 80172ae:	4606      	mov	r6, r0
 80172b0:	460f      	mov	r7, r1
 80172b2:	f7e9 fc71 	bl	8000b98 <__aeabi_d2iz>
 80172b6:	2200      	movs	r2, #0
 80172b8:	9000      	str	r0, [sp, #0]
 80172ba:	2300      	movs	r3, #0
 80172bc:	4630      	mov	r0, r6
 80172be:	4639      	mov	r1, r7
 80172c0:	f7e9 fc2c 	bl	8000b1c <__aeabi_dcmplt>
 80172c4:	b150      	cbz	r0, 80172dc <_dtoa_r+0x184>
 80172c6:	9800      	ldr	r0, [sp, #0]
 80172c8:	f7e9 f94c 	bl	8000564 <__aeabi_i2d>
 80172cc:	4632      	mov	r2, r6
 80172ce:	463b      	mov	r3, r7
 80172d0:	f7e9 fc1a 	bl	8000b08 <__aeabi_dcmpeq>
 80172d4:	b910      	cbnz	r0, 80172dc <_dtoa_r+0x184>
 80172d6:	9b00      	ldr	r3, [sp, #0]
 80172d8:	3b01      	subs	r3, #1
 80172da:	9300      	str	r3, [sp, #0]
 80172dc:	9b00      	ldr	r3, [sp, #0]
 80172de:	2b16      	cmp	r3, #22
 80172e0:	d85a      	bhi.n	8017398 <_dtoa_r+0x240>
 80172e2:	9a00      	ldr	r2, [sp, #0]
 80172e4:	4b57      	ldr	r3, [pc, #348]	; (8017444 <_dtoa_r+0x2ec>)
 80172e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80172ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172ee:	ec51 0b19 	vmov	r0, r1, d9
 80172f2:	f7e9 fc13 	bl	8000b1c <__aeabi_dcmplt>
 80172f6:	2800      	cmp	r0, #0
 80172f8:	d050      	beq.n	801739c <_dtoa_r+0x244>
 80172fa:	9b00      	ldr	r3, [sp, #0]
 80172fc:	3b01      	subs	r3, #1
 80172fe:	9300      	str	r3, [sp, #0]
 8017300:	2300      	movs	r3, #0
 8017302:	930b      	str	r3, [sp, #44]	; 0x2c
 8017304:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017306:	1b5d      	subs	r5, r3, r5
 8017308:	1e6b      	subs	r3, r5, #1
 801730a:	9305      	str	r3, [sp, #20]
 801730c:	bf45      	ittet	mi
 801730e:	f1c5 0301 	rsbmi	r3, r5, #1
 8017312:	9304      	strmi	r3, [sp, #16]
 8017314:	2300      	movpl	r3, #0
 8017316:	2300      	movmi	r3, #0
 8017318:	bf4c      	ite	mi
 801731a:	9305      	strmi	r3, [sp, #20]
 801731c:	9304      	strpl	r3, [sp, #16]
 801731e:	9b00      	ldr	r3, [sp, #0]
 8017320:	2b00      	cmp	r3, #0
 8017322:	db3d      	blt.n	80173a0 <_dtoa_r+0x248>
 8017324:	9b05      	ldr	r3, [sp, #20]
 8017326:	9a00      	ldr	r2, [sp, #0]
 8017328:	920a      	str	r2, [sp, #40]	; 0x28
 801732a:	4413      	add	r3, r2
 801732c:	9305      	str	r3, [sp, #20]
 801732e:	2300      	movs	r3, #0
 8017330:	9307      	str	r3, [sp, #28]
 8017332:	9b06      	ldr	r3, [sp, #24]
 8017334:	2b09      	cmp	r3, #9
 8017336:	f200 8089 	bhi.w	801744c <_dtoa_r+0x2f4>
 801733a:	2b05      	cmp	r3, #5
 801733c:	bfc4      	itt	gt
 801733e:	3b04      	subgt	r3, #4
 8017340:	9306      	strgt	r3, [sp, #24]
 8017342:	9b06      	ldr	r3, [sp, #24]
 8017344:	f1a3 0302 	sub.w	r3, r3, #2
 8017348:	bfcc      	ite	gt
 801734a:	2500      	movgt	r5, #0
 801734c:	2501      	movle	r5, #1
 801734e:	2b03      	cmp	r3, #3
 8017350:	f200 8087 	bhi.w	8017462 <_dtoa_r+0x30a>
 8017354:	e8df f003 	tbb	[pc, r3]
 8017358:	59383a2d 	.word	0x59383a2d
 801735c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8017360:	441d      	add	r5, r3
 8017362:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017366:	2b20      	cmp	r3, #32
 8017368:	bfc1      	itttt	gt
 801736a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801736e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8017372:	fa0b f303 	lslgt.w	r3, fp, r3
 8017376:	fa26 f000 	lsrgt.w	r0, r6, r0
 801737a:	bfda      	itte	le
 801737c:	f1c3 0320 	rsble	r3, r3, #32
 8017380:	fa06 f003 	lslle.w	r0, r6, r3
 8017384:	4318      	orrgt	r0, r3
 8017386:	f7e9 f8dd 	bl	8000544 <__aeabi_ui2d>
 801738a:	2301      	movs	r3, #1
 801738c:	4606      	mov	r6, r0
 801738e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017392:	3d01      	subs	r5, #1
 8017394:	930e      	str	r3, [sp, #56]	; 0x38
 8017396:	e76a      	b.n	801726e <_dtoa_r+0x116>
 8017398:	2301      	movs	r3, #1
 801739a:	e7b2      	b.n	8017302 <_dtoa_r+0x1aa>
 801739c:	900b      	str	r0, [sp, #44]	; 0x2c
 801739e:	e7b1      	b.n	8017304 <_dtoa_r+0x1ac>
 80173a0:	9b04      	ldr	r3, [sp, #16]
 80173a2:	9a00      	ldr	r2, [sp, #0]
 80173a4:	1a9b      	subs	r3, r3, r2
 80173a6:	9304      	str	r3, [sp, #16]
 80173a8:	4253      	negs	r3, r2
 80173aa:	9307      	str	r3, [sp, #28]
 80173ac:	2300      	movs	r3, #0
 80173ae:	930a      	str	r3, [sp, #40]	; 0x28
 80173b0:	e7bf      	b.n	8017332 <_dtoa_r+0x1da>
 80173b2:	2300      	movs	r3, #0
 80173b4:	9308      	str	r3, [sp, #32]
 80173b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	dc55      	bgt.n	8017468 <_dtoa_r+0x310>
 80173bc:	2301      	movs	r3, #1
 80173be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80173c2:	461a      	mov	r2, r3
 80173c4:	9209      	str	r2, [sp, #36]	; 0x24
 80173c6:	e00c      	b.n	80173e2 <_dtoa_r+0x28a>
 80173c8:	2301      	movs	r3, #1
 80173ca:	e7f3      	b.n	80173b4 <_dtoa_r+0x25c>
 80173cc:	2300      	movs	r3, #0
 80173ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80173d0:	9308      	str	r3, [sp, #32]
 80173d2:	9b00      	ldr	r3, [sp, #0]
 80173d4:	4413      	add	r3, r2
 80173d6:	9302      	str	r3, [sp, #8]
 80173d8:	3301      	adds	r3, #1
 80173da:	2b01      	cmp	r3, #1
 80173dc:	9303      	str	r3, [sp, #12]
 80173de:	bfb8      	it	lt
 80173e0:	2301      	movlt	r3, #1
 80173e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80173e4:	2200      	movs	r2, #0
 80173e6:	6042      	str	r2, [r0, #4]
 80173e8:	2204      	movs	r2, #4
 80173ea:	f102 0614 	add.w	r6, r2, #20
 80173ee:	429e      	cmp	r6, r3
 80173f0:	6841      	ldr	r1, [r0, #4]
 80173f2:	d93d      	bls.n	8017470 <_dtoa_r+0x318>
 80173f4:	4620      	mov	r0, r4
 80173f6:	f000 fdf9 	bl	8017fec <_Balloc>
 80173fa:	9001      	str	r0, [sp, #4]
 80173fc:	2800      	cmp	r0, #0
 80173fe:	d13b      	bne.n	8017478 <_dtoa_r+0x320>
 8017400:	4b11      	ldr	r3, [pc, #68]	; (8017448 <_dtoa_r+0x2f0>)
 8017402:	4602      	mov	r2, r0
 8017404:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017408:	e6c0      	b.n	801718c <_dtoa_r+0x34>
 801740a:	2301      	movs	r3, #1
 801740c:	e7df      	b.n	80173ce <_dtoa_r+0x276>
 801740e:	bf00      	nop
 8017410:	636f4361 	.word	0x636f4361
 8017414:	3fd287a7 	.word	0x3fd287a7
 8017418:	8b60c8b3 	.word	0x8b60c8b3
 801741c:	3fc68a28 	.word	0x3fc68a28
 8017420:	509f79fb 	.word	0x509f79fb
 8017424:	3fd34413 	.word	0x3fd34413
 8017428:	08019bba 	.word	0x08019bba
 801742c:	08019bd1 	.word	0x08019bd1
 8017430:	7ff00000 	.word	0x7ff00000
 8017434:	08019bb6 	.word	0x08019bb6
 8017438:	08019bad 	.word	0x08019bad
 801743c:	08019a89 	.word	0x08019a89
 8017440:	3ff80000 	.word	0x3ff80000
 8017444:	08019cd0 	.word	0x08019cd0
 8017448:	08019c2c 	.word	0x08019c2c
 801744c:	2501      	movs	r5, #1
 801744e:	2300      	movs	r3, #0
 8017450:	9306      	str	r3, [sp, #24]
 8017452:	9508      	str	r5, [sp, #32]
 8017454:	f04f 33ff 	mov.w	r3, #4294967295
 8017458:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801745c:	2200      	movs	r2, #0
 801745e:	2312      	movs	r3, #18
 8017460:	e7b0      	b.n	80173c4 <_dtoa_r+0x26c>
 8017462:	2301      	movs	r3, #1
 8017464:	9308      	str	r3, [sp, #32]
 8017466:	e7f5      	b.n	8017454 <_dtoa_r+0x2fc>
 8017468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801746a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801746e:	e7b8      	b.n	80173e2 <_dtoa_r+0x28a>
 8017470:	3101      	adds	r1, #1
 8017472:	6041      	str	r1, [r0, #4]
 8017474:	0052      	lsls	r2, r2, #1
 8017476:	e7b8      	b.n	80173ea <_dtoa_r+0x292>
 8017478:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801747a:	9a01      	ldr	r2, [sp, #4]
 801747c:	601a      	str	r2, [r3, #0]
 801747e:	9b03      	ldr	r3, [sp, #12]
 8017480:	2b0e      	cmp	r3, #14
 8017482:	f200 809d 	bhi.w	80175c0 <_dtoa_r+0x468>
 8017486:	2d00      	cmp	r5, #0
 8017488:	f000 809a 	beq.w	80175c0 <_dtoa_r+0x468>
 801748c:	9b00      	ldr	r3, [sp, #0]
 801748e:	2b00      	cmp	r3, #0
 8017490:	dd32      	ble.n	80174f8 <_dtoa_r+0x3a0>
 8017492:	4ab7      	ldr	r2, [pc, #732]	; (8017770 <_dtoa_r+0x618>)
 8017494:	f003 030f 	and.w	r3, r3, #15
 8017498:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801749c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80174a0:	9b00      	ldr	r3, [sp, #0]
 80174a2:	05d8      	lsls	r0, r3, #23
 80174a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80174a8:	d516      	bpl.n	80174d8 <_dtoa_r+0x380>
 80174aa:	4bb2      	ldr	r3, [pc, #712]	; (8017774 <_dtoa_r+0x61c>)
 80174ac:	ec51 0b19 	vmov	r0, r1, d9
 80174b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80174b4:	f7e9 f9ea 	bl	800088c <__aeabi_ddiv>
 80174b8:	f007 070f 	and.w	r7, r7, #15
 80174bc:	4682      	mov	sl, r0
 80174be:	468b      	mov	fp, r1
 80174c0:	2503      	movs	r5, #3
 80174c2:	4eac      	ldr	r6, [pc, #688]	; (8017774 <_dtoa_r+0x61c>)
 80174c4:	b957      	cbnz	r7, 80174dc <_dtoa_r+0x384>
 80174c6:	4642      	mov	r2, r8
 80174c8:	464b      	mov	r3, r9
 80174ca:	4650      	mov	r0, sl
 80174cc:	4659      	mov	r1, fp
 80174ce:	f7e9 f9dd 	bl	800088c <__aeabi_ddiv>
 80174d2:	4682      	mov	sl, r0
 80174d4:	468b      	mov	fp, r1
 80174d6:	e028      	b.n	801752a <_dtoa_r+0x3d2>
 80174d8:	2502      	movs	r5, #2
 80174da:	e7f2      	b.n	80174c2 <_dtoa_r+0x36a>
 80174dc:	07f9      	lsls	r1, r7, #31
 80174de:	d508      	bpl.n	80174f2 <_dtoa_r+0x39a>
 80174e0:	4640      	mov	r0, r8
 80174e2:	4649      	mov	r1, r9
 80174e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80174e8:	f7e9 f8a6 	bl	8000638 <__aeabi_dmul>
 80174ec:	3501      	adds	r5, #1
 80174ee:	4680      	mov	r8, r0
 80174f0:	4689      	mov	r9, r1
 80174f2:	107f      	asrs	r7, r7, #1
 80174f4:	3608      	adds	r6, #8
 80174f6:	e7e5      	b.n	80174c4 <_dtoa_r+0x36c>
 80174f8:	f000 809b 	beq.w	8017632 <_dtoa_r+0x4da>
 80174fc:	9b00      	ldr	r3, [sp, #0]
 80174fe:	4f9d      	ldr	r7, [pc, #628]	; (8017774 <_dtoa_r+0x61c>)
 8017500:	425e      	negs	r6, r3
 8017502:	4b9b      	ldr	r3, [pc, #620]	; (8017770 <_dtoa_r+0x618>)
 8017504:	f006 020f 	and.w	r2, r6, #15
 8017508:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801750c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017510:	ec51 0b19 	vmov	r0, r1, d9
 8017514:	f7e9 f890 	bl	8000638 <__aeabi_dmul>
 8017518:	1136      	asrs	r6, r6, #4
 801751a:	4682      	mov	sl, r0
 801751c:	468b      	mov	fp, r1
 801751e:	2300      	movs	r3, #0
 8017520:	2502      	movs	r5, #2
 8017522:	2e00      	cmp	r6, #0
 8017524:	d17a      	bne.n	801761c <_dtoa_r+0x4c4>
 8017526:	2b00      	cmp	r3, #0
 8017528:	d1d3      	bne.n	80174d2 <_dtoa_r+0x37a>
 801752a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801752c:	2b00      	cmp	r3, #0
 801752e:	f000 8082 	beq.w	8017636 <_dtoa_r+0x4de>
 8017532:	4b91      	ldr	r3, [pc, #580]	; (8017778 <_dtoa_r+0x620>)
 8017534:	2200      	movs	r2, #0
 8017536:	4650      	mov	r0, sl
 8017538:	4659      	mov	r1, fp
 801753a:	f7e9 faef 	bl	8000b1c <__aeabi_dcmplt>
 801753e:	2800      	cmp	r0, #0
 8017540:	d079      	beq.n	8017636 <_dtoa_r+0x4de>
 8017542:	9b03      	ldr	r3, [sp, #12]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d076      	beq.n	8017636 <_dtoa_r+0x4de>
 8017548:	9b02      	ldr	r3, [sp, #8]
 801754a:	2b00      	cmp	r3, #0
 801754c:	dd36      	ble.n	80175bc <_dtoa_r+0x464>
 801754e:	9b00      	ldr	r3, [sp, #0]
 8017550:	4650      	mov	r0, sl
 8017552:	4659      	mov	r1, fp
 8017554:	1e5f      	subs	r7, r3, #1
 8017556:	2200      	movs	r2, #0
 8017558:	4b88      	ldr	r3, [pc, #544]	; (801777c <_dtoa_r+0x624>)
 801755a:	f7e9 f86d 	bl	8000638 <__aeabi_dmul>
 801755e:	9e02      	ldr	r6, [sp, #8]
 8017560:	4682      	mov	sl, r0
 8017562:	468b      	mov	fp, r1
 8017564:	3501      	adds	r5, #1
 8017566:	4628      	mov	r0, r5
 8017568:	f7e8 fffc 	bl	8000564 <__aeabi_i2d>
 801756c:	4652      	mov	r2, sl
 801756e:	465b      	mov	r3, fp
 8017570:	f7e9 f862 	bl	8000638 <__aeabi_dmul>
 8017574:	4b82      	ldr	r3, [pc, #520]	; (8017780 <_dtoa_r+0x628>)
 8017576:	2200      	movs	r2, #0
 8017578:	f7e8 fea8 	bl	80002cc <__adddf3>
 801757c:	46d0      	mov	r8, sl
 801757e:	46d9      	mov	r9, fp
 8017580:	4682      	mov	sl, r0
 8017582:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8017586:	2e00      	cmp	r6, #0
 8017588:	d158      	bne.n	801763c <_dtoa_r+0x4e4>
 801758a:	4b7e      	ldr	r3, [pc, #504]	; (8017784 <_dtoa_r+0x62c>)
 801758c:	2200      	movs	r2, #0
 801758e:	4640      	mov	r0, r8
 8017590:	4649      	mov	r1, r9
 8017592:	f7e8 fe99 	bl	80002c8 <__aeabi_dsub>
 8017596:	4652      	mov	r2, sl
 8017598:	465b      	mov	r3, fp
 801759a:	4680      	mov	r8, r0
 801759c:	4689      	mov	r9, r1
 801759e:	f7e9 fadb 	bl	8000b58 <__aeabi_dcmpgt>
 80175a2:	2800      	cmp	r0, #0
 80175a4:	f040 8295 	bne.w	8017ad2 <_dtoa_r+0x97a>
 80175a8:	4652      	mov	r2, sl
 80175aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80175ae:	4640      	mov	r0, r8
 80175b0:	4649      	mov	r1, r9
 80175b2:	f7e9 fab3 	bl	8000b1c <__aeabi_dcmplt>
 80175b6:	2800      	cmp	r0, #0
 80175b8:	f040 8289 	bne.w	8017ace <_dtoa_r+0x976>
 80175bc:	ec5b ab19 	vmov	sl, fp, d9
 80175c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	f2c0 8148 	blt.w	8017858 <_dtoa_r+0x700>
 80175c8:	9a00      	ldr	r2, [sp, #0]
 80175ca:	2a0e      	cmp	r2, #14
 80175cc:	f300 8144 	bgt.w	8017858 <_dtoa_r+0x700>
 80175d0:	4b67      	ldr	r3, [pc, #412]	; (8017770 <_dtoa_r+0x618>)
 80175d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80175d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80175da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175dc:	2b00      	cmp	r3, #0
 80175de:	f280 80d5 	bge.w	801778c <_dtoa_r+0x634>
 80175e2:	9b03      	ldr	r3, [sp, #12]
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	f300 80d1 	bgt.w	801778c <_dtoa_r+0x634>
 80175ea:	f040 826f 	bne.w	8017acc <_dtoa_r+0x974>
 80175ee:	4b65      	ldr	r3, [pc, #404]	; (8017784 <_dtoa_r+0x62c>)
 80175f0:	2200      	movs	r2, #0
 80175f2:	4640      	mov	r0, r8
 80175f4:	4649      	mov	r1, r9
 80175f6:	f7e9 f81f 	bl	8000638 <__aeabi_dmul>
 80175fa:	4652      	mov	r2, sl
 80175fc:	465b      	mov	r3, fp
 80175fe:	f7e9 faa1 	bl	8000b44 <__aeabi_dcmpge>
 8017602:	9e03      	ldr	r6, [sp, #12]
 8017604:	4637      	mov	r7, r6
 8017606:	2800      	cmp	r0, #0
 8017608:	f040 8245 	bne.w	8017a96 <_dtoa_r+0x93e>
 801760c:	9d01      	ldr	r5, [sp, #4]
 801760e:	2331      	movs	r3, #49	; 0x31
 8017610:	f805 3b01 	strb.w	r3, [r5], #1
 8017614:	9b00      	ldr	r3, [sp, #0]
 8017616:	3301      	adds	r3, #1
 8017618:	9300      	str	r3, [sp, #0]
 801761a:	e240      	b.n	8017a9e <_dtoa_r+0x946>
 801761c:	07f2      	lsls	r2, r6, #31
 801761e:	d505      	bpl.n	801762c <_dtoa_r+0x4d4>
 8017620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017624:	f7e9 f808 	bl	8000638 <__aeabi_dmul>
 8017628:	3501      	adds	r5, #1
 801762a:	2301      	movs	r3, #1
 801762c:	1076      	asrs	r6, r6, #1
 801762e:	3708      	adds	r7, #8
 8017630:	e777      	b.n	8017522 <_dtoa_r+0x3ca>
 8017632:	2502      	movs	r5, #2
 8017634:	e779      	b.n	801752a <_dtoa_r+0x3d2>
 8017636:	9f00      	ldr	r7, [sp, #0]
 8017638:	9e03      	ldr	r6, [sp, #12]
 801763a:	e794      	b.n	8017566 <_dtoa_r+0x40e>
 801763c:	9901      	ldr	r1, [sp, #4]
 801763e:	4b4c      	ldr	r3, [pc, #304]	; (8017770 <_dtoa_r+0x618>)
 8017640:	4431      	add	r1, r6
 8017642:	910d      	str	r1, [sp, #52]	; 0x34
 8017644:	9908      	ldr	r1, [sp, #32]
 8017646:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801764a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801764e:	2900      	cmp	r1, #0
 8017650:	d043      	beq.n	80176da <_dtoa_r+0x582>
 8017652:	494d      	ldr	r1, [pc, #308]	; (8017788 <_dtoa_r+0x630>)
 8017654:	2000      	movs	r0, #0
 8017656:	f7e9 f919 	bl	800088c <__aeabi_ddiv>
 801765a:	4652      	mov	r2, sl
 801765c:	465b      	mov	r3, fp
 801765e:	f7e8 fe33 	bl	80002c8 <__aeabi_dsub>
 8017662:	9d01      	ldr	r5, [sp, #4]
 8017664:	4682      	mov	sl, r0
 8017666:	468b      	mov	fp, r1
 8017668:	4649      	mov	r1, r9
 801766a:	4640      	mov	r0, r8
 801766c:	f7e9 fa94 	bl	8000b98 <__aeabi_d2iz>
 8017670:	4606      	mov	r6, r0
 8017672:	f7e8 ff77 	bl	8000564 <__aeabi_i2d>
 8017676:	4602      	mov	r2, r0
 8017678:	460b      	mov	r3, r1
 801767a:	4640      	mov	r0, r8
 801767c:	4649      	mov	r1, r9
 801767e:	f7e8 fe23 	bl	80002c8 <__aeabi_dsub>
 8017682:	3630      	adds	r6, #48	; 0x30
 8017684:	f805 6b01 	strb.w	r6, [r5], #1
 8017688:	4652      	mov	r2, sl
 801768a:	465b      	mov	r3, fp
 801768c:	4680      	mov	r8, r0
 801768e:	4689      	mov	r9, r1
 8017690:	f7e9 fa44 	bl	8000b1c <__aeabi_dcmplt>
 8017694:	2800      	cmp	r0, #0
 8017696:	d163      	bne.n	8017760 <_dtoa_r+0x608>
 8017698:	4642      	mov	r2, r8
 801769a:	464b      	mov	r3, r9
 801769c:	4936      	ldr	r1, [pc, #216]	; (8017778 <_dtoa_r+0x620>)
 801769e:	2000      	movs	r0, #0
 80176a0:	f7e8 fe12 	bl	80002c8 <__aeabi_dsub>
 80176a4:	4652      	mov	r2, sl
 80176a6:	465b      	mov	r3, fp
 80176a8:	f7e9 fa38 	bl	8000b1c <__aeabi_dcmplt>
 80176ac:	2800      	cmp	r0, #0
 80176ae:	f040 80b5 	bne.w	801781c <_dtoa_r+0x6c4>
 80176b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80176b4:	429d      	cmp	r5, r3
 80176b6:	d081      	beq.n	80175bc <_dtoa_r+0x464>
 80176b8:	4b30      	ldr	r3, [pc, #192]	; (801777c <_dtoa_r+0x624>)
 80176ba:	2200      	movs	r2, #0
 80176bc:	4650      	mov	r0, sl
 80176be:	4659      	mov	r1, fp
 80176c0:	f7e8 ffba 	bl	8000638 <__aeabi_dmul>
 80176c4:	4b2d      	ldr	r3, [pc, #180]	; (801777c <_dtoa_r+0x624>)
 80176c6:	4682      	mov	sl, r0
 80176c8:	468b      	mov	fp, r1
 80176ca:	4640      	mov	r0, r8
 80176cc:	4649      	mov	r1, r9
 80176ce:	2200      	movs	r2, #0
 80176d0:	f7e8 ffb2 	bl	8000638 <__aeabi_dmul>
 80176d4:	4680      	mov	r8, r0
 80176d6:	4689      	mov	r9, r1
 80176d8:	e7c6      	b.n	8017668 <_dtoa_r+0x510>
 80176da:	4650      	mov	r0, sl
 80176dc:	4659      	mov	r1, fp
 80176de:	f7e8 ffab 	bl	8000638 <__aeabi_dmul>
 80176e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80176e4:	9d01      	ldr	r5, [sp, #4]
 80176e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80176e8:	4682      	mov	sl, r0
 80176ea:	468b      	mov	fp, r1
 80176ec:	4649      	mov	r1, r9
 80176ee:	4640      	mov	r0, r8
 80176f0:	f7e9 fa52 	bl	8000b98 <__aeabi_d2iz>
 80176f4:	4606      	mov	r6, r0
 80176f6:	f7e8 ff35 	bl	8000564 <__aeabi_i2d>
 80176fa:	3630      	adds	r6, #48	; 0x30
 80176fc:	4602      	mov	r2, r0
 80176fe:	460b      	mov	r3, r1
 8017700:	4640      	mov	r0, r8
 8017702:	4649      	mov	r1, r9
 8017704:	f7e8 fde0 	bl	80002c8 <__aeabi_dsub>
 8017708:	f805 6b01 	strb.w	r6, [r5], #1
 801770c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801770e:	429d      	cmp	r5, r3
 8017710:	4680      	mov	r8, r0
 8017712:	4689      	mov	r9, r1
 8017714:	f04f 0200 	mov.w	r2, #0
 8017718:	d124      	bne.n	8017764 <_dtoa_r+0x60c>
 801771a:	4b1b      	ldr	r3, [pc, #108]	; (8017788 <_dtoa_r+0x630>)
 801771c:	4650      	mov	r0, sl
 801771e:	4659      	mov	r1, fp
 8017720:	f7e8 fdd4 	bl	80002cc <__adddf3>
 8017724:	4602      	mov	r2, r0
 8017726:	460b      	mov	r3, r1
 8017728:	4640      	mov	r0, r8
 801772a:	4649      	mov	r1, r9
 801772c:	f7e9 fa14 	bl	8000b58 <__aeabi_dcmpgt>
 8017730:	2800      	cmp	r0, #0
 8017732:	d173      	bne.n	801781c <_dtoa_r+0x6c4>
 8017734:	4652      	mov	r2, sl
 8017736:	465b      	mov	r3, fp
 8017738:	4913      	ldr	r1, [pc, #76]	; (8017788 <_dtoa_r+0x630>)
 801773a:	2000      	movs	r0, #0
 801773c:	f7e8 fdc4 	bl	80002c8 <__aeabi_dsub>
 8017740:	4602      	mov	r2, r0
 8017742:	460b      	mov	r3, r1
 8017744:	4640      	mov	r0, r8
 8017746:	4649      	mov	r1, r9
 8017748:	f7e9 f9e8 	bl	8000b1c <__aeabi_dcmplt>
 801774c:	2800      	cmp	r0, #0
 801774e:	f43f af35 	beq.w	80175bc <_dtoa_r+0x464>
 8017752:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8017754:	1e6b      	subs	r3, r5, #1
 8017756:	930f      	str	r3, [sp, #60]	; 0x3c
 8017758:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801775c:	2b30      	cmp	r3, #48	; 0x30
 801775e:	d0f8      	beq.n	8017752 <_dtoa_r+0x5fa>
 8017760:	9700      	str	r7, [sp, #0]
 8017762:	e049      	b.n	80177f8 <_dtoa_r+0x6a0>
 8017764:	4b05      	ldr	r3, [pc, #20]	; (801777c <_dtoa_r+0x624>)
 8017766:	f7e8 ff67 	bl	8000638 <__aeabi_dmul>
 801776a:	4680      	mov	r8, r0
 801776c:	4689      	mov	r9, r1
 801776e:	e7bd      	b.n	80176ec <_dtoa_r+0x594>
 8017770:	08019cd0 	.word	0x08019cd0
 8017774:	08019ca8 	.word	0x08019ca8
 8017778:	3ff00000 	.word	0x3ff00000
 801777c:	40240000 	.word	0x40240000
 8017780:	401c0000 	.word	0x401c0000
 8017784:	40140000 	.word	0x40140000
 8017788:	3fe00000 	.word	0x3fe00000
 801778c:	9d01      	ldr	r5, [sp, #4]
 801778e:	4656      	mov	r6, sl
 8017790:	465f      	mov	r7, fp
 8017792:	4642      	mov	r2, r8
 8017794:	464b      	mov	r3, r9
 8017796:	4630      	mov	r0, r6
 8017798:	4639      	mov	r1, r7
 801779a:	f7e9 f877 	bl	800088c <__aeabi_ddiv>
 801779e:	f7e9 f9fb 	bl	8000b98 <__aeabi_d2iz>
 80177a2:	4682      	mov	sl, r0
 80177a4:	f7e8 fede 	bl	8000564 <__aeabi_i2d>
 80177a8:	4642      	mov	r2, r8
 80177aa:	464b      	mov	r3, r9
 80177ac:	f7e8 ff44 	bl	8000638 <__aeabi_dmul>
 80177b0:	4602      	mov	r2, r0
 80177b2:	460b      	mov	r3, r1
 80177b4:	4630      	mov	r0, r6
 80177b6:	4639      	mov	r1, r7
 80177b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80177bc:	f7e8 fd84 	bl	80002c8 <__aeabi_dsub>
 80177c0:	f805 6b01 	strb.w	r6, [r5], #1
 80177c4:	9e01      	ldr	r6, [sp, #4]
 80177c6:	9f03      	ldr	r7, [sp, #12]
 80177c8:	1bae      	subs	r6, r5, r6
 80177ca:	42b7      	cmp	r7, r6
 80177cc:	4602      	mov	r2, r0
 80177ce:	460b      	mov	r3, r1
 80177d0:	d135      	bne.n	801783e <_dtoa_r+0x6e6>
 80177d2:	f7e8 fd7b 	bl	80002cc <__adddf3>
 80177d6:	4642      	mov	r2, r8
 80177d8:	464b      	mov	r3, r9
 80177da:	4606      	mov	r6, r0
 80177dc:	460f      	mov	r7, r1
 80177de:	f7e9 f9bb 	bl	8000b58 <__aeabi_dcmpgt>
 80177e2:	b9d0      	cbnz	r0, 801781a <_dtoa_r+0x6c2>
 80177e4:	4642      	mov	r2, r8
 80177e6:	464b      	mov	r3, r9
 80177e8:	4630      	mov	r0, r6
 80177ea:	4639      	mov	r1, r7
 80177ec:	f7e9 f98c 	bl	8000b08 <__aeabi_dcmpeq>
 80177f0:	b110      	cbz	r0, 80177f8 <_dtoa_r+0x6a0>
 80177f2:	f01a 0f01 	tst.w	sl, #1
 80177f6:	d110      	bne.n	801781a <_dtoa_r+0x6c2>
 80177f8:	4620      	mov	r0, r4
 80177fa:	ee18 1a10 	vmov	r1, s16
 80177fe:	f000 fc35 	bl	801806c <_Bfree>
 8017802:	2300      	movs	r3, #0
 8017804:	9800      	ldr	r0, [sp, #0]
 8017806:	702b      	strb	r3, [r5, #0]
 8017808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801780a:	3001      	adds	r0, #1
 801780c:	6018      	str	r0, [r3, #0]
 801780e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017810:	2b00      	cmp	r3, #0
 8017812:	f43f acf1 	beq.w	80171f8 <_dtoa_r+0xa0>
 8017816:	601d      	str	r5, [r3, #0]
 8017818:	e4ee      	b.n	80171f8 <_dtoa_r+0xa0>
 801781a:	9f00      	ldr	r7, [sp, #0]
 801781c:	462b      	mov	r3, r5
 801781e:	461d      	mov	r5, r3
 8017820:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017824:	2a39      	cmp	r2, #57	; 0x39
 8017826:	d106      	bne.n	8017836 <_dtoa_r+0x6de>
 8017828:	9a01      	ldr	r2, [sp, #4]
 801782a:	429a      	cmp	r2, r3
 801782c:	d1f7      	bne.n	801781e <_dtoa_r+0x6c6>
 801782e:	9901      	ldr	r1, [sp, #4]
 8017830:	2230      	movs	r2, #48	; 0x30
 8017832:	3701      	adds	r7, #1
 8017834:	700a      	strb	r2, [r1, #0]
 8017836:	781a      	ldrb	r2, [r3, #0]
 8017838:	3201      	adds	r2, #1
 801783a:	701a      	strb	r2, [r3, #0]
 801783c:	e790      	b.n	8017760 <_dtoa_r+0x608>
 801783e:	4ba6      	ldr	r3, [pc, #664]	; (8017ad8 <_dtoa_r+0x980>)
 8017840:	2200      	movs	r2, #0
 8017842:	f7e8 fef9 	bl	8000638 <__aeabi_dmul>
 8017846:	2200      	movs	r2, #0
 8017848:	2300      	movs	r3, #0
 801784a:	4606      	mov	r6, r0
 801784c:	460f      	mov	r7, r1
 801784e:	f7e9 f95b 	bl	8000b08 <__aeabi_dcmpeq>
 8017852:	2800      	cmp	r0, #0
 8017854:	d09d      	beq.n	8017792 <_dtoa_r+0x63a>
 8017856:	e7cf      	b.n	80177f8 <_dtoa_r+0x6a0>
 8017858:	9a08      	ldr	r2, [sp, #32]
 801785a:	2a00      	cmp	r2, #0
 801785c:	f000 80d7 	beq.w	8017a0e <_dtoa_r+0x8b6>
 8017860:	9a06      	ldr	r2, [sp, #24]
 8017862:	2a01      	cmp	r2, #1
 8017864:	f300 80ba 	bgt.w	80179dc <_dtoa_r+0x884>
 8017868:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801786a:	2a00      	cmp	r2, #0
 801786c:	f000 80b2 	beq.w	80179d4 <_dtoa_r+0x87c>
 8017870:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017874:	9e07      	ldr	r6, [sp, #28]
 8017876:	9d04      	ldr	r5, [sp, #16]
 8017878:	9a04      	ldr	r2, [sp, #16]
 801787a:	441a      	add	r2, r3
 801787c:	9204      	str	r2, [sp, #16]
 801787e:	9a05      	ldr	r2, [sp, #20]
 8017880:	2101      	movs	r1, #1
 8017882:	441a      	add	r2, r3
 8017884:	4620      	mov	r0, r4
 8017886:	9205      	str	r2, [sp, #20]
 8017888:	f000 fca8 	bl	80181dc <__i2b>
 801788c:	4607      	mov	r7, r0
 801788e:	2d00      	cmp	r5, #0
 8017890:	dd0c      	ble.n	80178ac <_dtoa_r+0x754>
 8017892:	9b05      	ldr	r3, [sp, #20]
 8017894:	2b00      	cmp	r3, #0
 8017896:	dd09      	ble.n	80178ac <_dtoa_r+0x754>
 8017898:	42ab      	cmp	r3, r5
 801789a:	9a04      	ldr	r2, [sp, #16]
 801789c:	bfa8      	it	ge
 801789e:	462b      	movge	r3, r5
 80178a0:	1ad2      	subs	r2, r2, r3
 80178a2:	9204      	str	r2, [sp, #16]
 80178a4:	9a05      	ldr	r2, [sp, #20]
 80178a6:	1aed      	subs	r5, r5, r3
 80178a8:	1ad3      	subs	r3, r2, r3
 80178aa:	9305      	str	r3, [sp, #20]
 80178ac:	9b07      	ldr	r3, [sp, #28]
 80178ae:	b31b      	cbz	r3, 80178f8 <_dtoa_r+0x7a0>
 80178b0:	9b08      	ldr	r3, [sp, #32]
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	f000 80af 	beq.w	8017a16 <_dtoa_r+0x8be>
 80178b8:	2e00      	cmp	r6, #0
 80178ba:	dd13      	ble.n	80178e4 <_dtoa_r+0x78c>
 80178bc:	4639      	mov	r1, r7
 80178be:	4632      	mov	r2, r6
 80178c0:	4620      	mov	r0, r4
 80178c2:	f000 fd4b 	bl	801835c <__pow5mult>
 80178c6:	ee18 2a10 	vmov	r2, s16
 80178ca:	4601      	mov	r1, r0
 80178cc:	4607      	mov	r7, r0
 80178ce:	4620      	mov	r0, r4
 80178d0:	f000 fc9a 	bl	8018208 <__multiply>
 80178d4:	ee18 1a10 	vmov	r1, s16
 80178d8:	4680      	mov	r8, r0
 80178da:	4620      	mov	r0, r4
 80178dc:	f000 fbc6 	bl	801806c <_Bfree>
 80178e0:	ee08 8a10 	vmov	s16, r8
 80178e4:	9b07      	ldr	r3, [sp, #28]
 80178e6:	1b9a      	subs	r2, r3, r6
 80178e8:	d006      	beq.n	80178f8 <_dtoa_r+0x7a0>
 80178ea:	ee18 1a10 	vmov	r1, s16
 80178ee:	4620      	mov	r0, r4
 80178f0:	f000 fd34 	bl	801835c <__pow5mult>
 80178f4:	ee08 0a10 	vmov	s16, r0
 80178f8:	2101      	movs	r1, #1
 80178fa:	4620      	mov	r0, r4
 80178fc:	f000 fc6e 	bl	80181dc <__i2b>
 8017900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017902:	2b00      	cmp	r3, #0
 8017904:	4606      	mov	r6, r0
 8017906:	f340 8088 	ble.w	8017a1a <_dtoa_r+0x8c2>
 801790a:	461a      	mov	r2, r3
 801790c:	4601      	mov	r1, r0
 801790e:	4620      	mov	r0, r4
 8017910:	f000 fd24 	bl	801835c <__pow5mult>
 8017914:	9b06      	ldr	r3, [sp, #24]
 8017916:	2b01      	cmp	r3, #1
 8017918:	4606      	mov	r6, r0
 801791a:	f340 8081 	ble.w	8017a20 <_dtoa_r+0x8c8>
 801791e:	f04f 0800 	mov.w	r8, #0
 8017922:	6933      	ldr	r3, [r6, #16]
 8017924:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017928:	6918      	ldr	r0, [r3, #16]
 801792a:	f000 fc07 	bl	801813c <__hi0bits>
 801792e:	f1c0 0020 	rsb	r0, r0, #32
 8017932:	9b05      	ldr	r3, [sp, #20]
 8017934:	4418      	add	r0, r3
 8017936:	f010 001f 	ands.w	r0, r0, #31
 801793a:	f000 8092 	beq.w	8017a62 <_dtoa_r+0x90a>
 801793e:	f1c0 0320 	rsb	r3, r0, #32
 8017942:	2b04      	cmp	r3, #4
 8017944:	f340 808a 	ble.w	8017a5c <_dtoa_r+0x904>
 8017948:	f1c0 001c 	rsb	r0, r0, #28
 801794c:	9b04      	ldr	r3, [sp, #16]
 801794e:	4403      	add	r3, r0
 8017950:	9304      	str	r3, [sp, #16]
 8017952:	9b05      	ldr	r3, [sp, #20]
 8017954:	4403      	add	r3, r0
 8017956:	4405      	add	r5, r0
 8017958:	9305      	str	r3, [sp, #20]
 801795a:	9b04      	ldr	r3, [sp, #16]
 801795c:	2b00      	cmp	r3, #0
 801795e:	dd07      	ble.n	8017970 <_dtoa_r+0x818>
 8017960:	ee18 1a10 	vmov	r1, s16
 8017964:	461a      	mov	r2, r3
 8017966:	4620      	mov	r0, r4
 8017968:	f000 fd52 	bl	8018410 <__lshift>
 801796c:	ee08 0a10 	vmov	s16, r0
 8017970:	9b05      	ldr	r3, [sp, #20]
 8017972:	2b00      	cmp	r3, #0
 8017974:	dd05      	ble.n	8017982 <_dtoa_r+0x82a>
 8017976:	4631      	mov	r1, r6
 8017978:	461a      	mov	r2, r3
 801797a:	4620      	mov	r0, r4
 801797c:	f000 fd48 	bl	8018410 <__lshift>
 8017980:	4606      	mov	r6, r0
 8017982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017984:	2b00      	cmp	r3, #0
 8017986:	d06e      	beq.n	8017a66 <_dtoa_r+0x90e>
 8017988:	ee18 0a10 	vmov	r0, s16
 801798c:	4631      	mov	r1, r6
 801798e:	f000 fdaf 	bl	80184f0 <__mcmp>
 8017992:	2800      	cmp	r0, #0
 8017994:	da67      	bge.n	8017a66 <_dtoa_r+0x90e>
 8017996:	9b00      	ldr	r3, [sp, #0]
 8017998:	3b01      	subs	r3, #1
 801799a:	ee18 1a10 	vmov	r1, s16
 801799e:	9300      	str	r3, [sp, #0]
 80179a0:	220a      	movs	r2, #10
 80179a2:	2300      	movs	r3, #0
 80179a4:	4620      	mov	r0, r4
 80179a6:	f000 fb83 	bl	80180b0 <__multadd>
 80179aa:	9b08      	ldr	r3, [sp, #32]
 80179ac:	ee08 0a10 	vmov	s16, r0
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	f000 81b1 	beq.w	8017d18 <_dtoa_r+0xbc0>
 80179b6:	2300      	movs	r3, #0
 80179b8:	4639      	mov	r1, r7
 80179ba:	220a      	movs	r2, #10
 80179bc:	4620      	mov	r0, r4
 80179be:	f000 fb77 	bl	80180b0 <__multadd>
 80179c2:	9b02      	ldr	r3, [sp, #8]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	4607      	mov	r7, r0
 80179c8:	f300 808e 	bgt.w	8017ae8 <_dtoa_r+0x990>
 80179cc:	9b06      	ldr	r3, [sp, #24]
 80179ce:	2b02      	cmp	r3, #2
 80179d0:	dc51      	bgt.n	8017a76 <_dtoa_r+0x91e>
 80179d2:	e089      	b.n	8017ae8 <_dtoa_r+0x990>
 80179d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80179d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80179da:	e74b      	b.n	8017874 <_dtoa_r+0x71c>
 80179dc:	9b03      	ldr	r3, [sp, #12]
 80179de:	1e5e      	subs	r6, r3, #1
 80179e0:	9b07      	ldr	r3, [sp, #28]
 80179e2:	42b3      	cmp	r3, r6
 80179e4:	bfbf      	itttt	lt
 80179e6:	9b07      	ldrlt	r3, [sp, #28]
 80179e8:	9607      	strlt	r6, [sp, #28]
 80179ea:	1af2      	sublt	r2, r6, r3
 80179ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80179ee:	bfb6      	itet	lt
 80179f0:	189b      	addlt	r3, r3, r2
 80179f2:	1b9e      	subge	r6, r3, r6
 80179f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80179f6:	9b03      	ldr	r3, [sp, #12]
 80179f8:	bfb8      	it	lt
 80179fa:	2600      	movlt	r6, #0
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	bfb7      	itett	lt
 8017a00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8017a04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8017a08:	1a9d      	sublt	r5, r3, r2
 8017a0a:	2300      	movlt	r3, #0
 8017a0c:	e734      	b.n	8017878 <_dtoa_r+0x720>
 8017a0e:	9e07      	ldr	r6, [sp, #28]
 8017a10:	9d04      	ldr	r5, [sp, #16]
 8017a12:	9f08      	ldr	r7, [sp, #32]
 8017a14:	e73b      	b.n	801788e <_dtoa_r+0x736>
 8017a16:	9a07      	ldr	r2, [sp, #28]
 8017a18:	e767      	b.n	80178ea <_dtoa_r+0x792>
 8017a1a:	9b06      	ldr	r3, [sp, #24]
 8017a1c:	2b01      	cmp	r3, #1
 8017a1e:	dc18      	bgt.n	8017a52 <_dtoa_r+0x8fa>
 8017a20:	f1ba 0f00 	cmp.w	sl, #0
 8017a24:	d115      	bne.n	8017a52 <_dtoa_r+0x8fa>
 8017a26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017a2a:	b993      	cbnz	r3, 8017a52 <_dtoa_r+0x8fa>
 8017a2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017a30:	0d1b      	lsrs	r3, r3, #20
 8017a32:	051b      	lsls	r3, r3, #20
 8017a34:	b183      	cbz	r3, 8017a58 <_dtoa_r+0x900>
 8017a36:	9b04      	ldr	r3, [sp, #16]
 8017a38:	3301      	adds	r3, #1
 8017a3a:	9304      	str	r3, [sp, #16]
 8017a3c:	9b05      	ldr	r3, [sp, #20]
 8017a3e:	3301      	adds	r3, #1
 8017a40:	9305      	str	r3, [sp, #20]
 8017a42:	f04f 0801 	mov.w	r8, #1
 8017a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	f47f af6a 	bne.w	8017922 <_dtoa_r+0x7ca>
 8017a4e:	2001      	movs	r0, #1
 8017a50:	e76f      	b.n	8017932 <_dtoa_r+0x7da>
 8017a52:	f04f 0800 	mov.w	r8, #0
 8017a56:	e7f6      	b.n	8017a46 <_dtoa_r+0x8ee>
 8017a58:	4698      	mov	r8, r3
 8017a5a:	e7f4      	b.n	8017a46 <_dtoa_r+0x8ee>
 8017a5c:	f43f af7d 	beq.w	801795a <_dtoa_r+0x802>
 8017a60:	4618      	mov	r0, r3
 8017a62:	301c      	adds	r0, #28
 8017a64:	e772      	b.n	801794c <_dtoa_r+0x7f4>
 8017a66:	9b03      	ldr	r3, [sp, #12]
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	dc37      	bgt.n	8017adc <_dtoa_r+0x984>
 8017a6c:	9b06      	ldr	r3, [sp, #24]
 8017a6e:	2b02      	cmp	r3, #2
 8017a70:	dd34      	ble.n	8017adc <_dtoa_r+0x984>
 8017a72:	9b03      	ldr	r3, [sp, #12]
 8017a74:	9302      	str	r3, [sp, #8]
 8017a76:	9b02      	ldr	r3, [sp, #8]
 8017a78:	b96b      	cbnz	r3, 8017a96 <_dtoa_r+0x93e>
 8017a7a:	4631      	mov	r1, r6
 8017a7c:	2205      	movs	r2, #5
 8017a7e:	4620      	mov	r0, r4
 8017a80:	f000 fb16 	bl	80180b0 <__multadd>
 8017a84:	4601      	mov	r1, r0
 8017a86:	4606      	mov	r6, r0
 8017a88:	ee18 0a10 	vmov	r0, s16
 8017a8c:	f000 fd30 	bl	80184f0 <__mcmp>
 8017a90:	2800      	cmp	r0, #0
 8017a92:	f73f adbb 	bgt.w	801760c <_dtoa_r+0x4b4>
 8017a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a98:	9d01      	ldr	r5, [sp, #4]
 8017a9a:	43db      	mvns	r3, r3
 8017a9c:	9300      	str	r3, [sp, #0]
 8017a9e:	f04f 0800 	mov.w	r8, #0
 8017aa2:	4631      	mov	r1, r6
 8017aa4:	4620      	mov	r0, r4
 8017aa6:	f000 fae1 	bl	801806c <_Bfree>
 8017aaa:	2f00      	cmp	r7, #0
 8017aac:	f43f aea4 	beq.w	80177f8 <_dtoa_r+0x6a0>
 8017ab0:	f1b8 0f00 	cmp.w	r8, #0
 8017ab4:	d005      	beq.n	8017ac2 <_dtoa_r+0x96a>
 8017ab6:	45b8      	cmp	r8, r7
 8017ab8:	d003      	beq.n	8017ac2 <_dtoa_r+0x96a>
 8017aba:	4641      	mov	r1, r8
 8017abc:	4620      	mov	r0, r4
 8017abe:	f000 fad5 	bl	801806c <_Bfree>
 8017ac2:	4639      	mov	r1, r7
 8017ac4:	4620      	mov	r0, r4
 8017ac6:	f000 fad1 	bl	801806c <_Bfree>
 8017aca:	e695      	b.n	80177f8 <_dtoa_r+0x6a0>
 8017acc:	2600      	movs	r6, #0
 8017ace:	4637      	mov	r7, r6
 8017ad0:	e7e1      	b.n	8017a96 <_dtoa_r+0x93e>
 8017ad2:	9700      	str	r7, [sp, #0]
 8017ad4:	4637      	mov	r7, r6
 8017ad6:	e599      	b.n	801760c <_dtoa_r+0x4b4>
 8017ad8:	40240000 	.word	0x40240000
 8017adc:	9b08      	ldr	r3, [sp, #32]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	f000 80ca 	beq.w	8017c78 <_dtoa_r+0xb20>
 8017ae4:	9b03      	ldr	r3, [sp, #12]
 8017ae6:	9302      	str	r3, [sp, #8]
 8017ae8:	2d00      	cmp	r5, #0
 8017aea:	dd05      	ble.n	8017af8 <_dtoa_r+0x9a0>
 8017aec:	4639      	mov	r1, r7
 8017aee:	462a      	mov	r2, r5
 8017af0:	4620      	mov	r0, r4
 8017af2:	f000 fc8d 	bl	8018410 <__lshift>
 8017af6:	4607      	mov	r7, r0
 8017af8:	f1b8 0f00 	cmp.w	r8, #0
 8017afc:	d05b      	beq.n	8017bb6 <_dtoa_r+0xa5e>
 8017afe:	6879      	ldr	r1, [r7, #4]
 8017b00:	4620      	mov	r0, r4
 8017b02:	f000 fa73 	bl	8017fec <_Balloc>
 8017b06:	4605      	mov	r5, r0
 8017b08:	b928      	cbnz	r0, 8017b16 <_dtoa_r+0x9be>
 8017b0a:	4b87      	ldr	r3, [pc, #540]	; (8017d28 <_dtoa_r+0xbd0>)
 8017b0c:	4602      	mov	r2, r0
 8017b0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017b12:	f7ff bb3b 	b.w	801718c <_dtoa_r+0x34>
 8017b16:	693a      	ldr	r2, [r7, #16]
 8017b18:	3202      	adds	r2, #2
 8017b1a:	0092      	lsls	r2, r2, #2
 8017b1c:	f107 010c 	add.w	r1, r7, #12
 8017b20:	300c      	adds	r0, #12
 8017b22:	f7fe fae5 	bl	80160f0 <memcpy>
 8017b26:	2201      	movs	r2, #1
 8017b28:	4629      	mov	r1, r5
 8017b2a:	4620      	mov	r0, r4
 8017b2c:	f000 fc70 	bl	8018410 <__lshift>
 8017b30:	9b01      	ldr	r3, [sp, #4]
 8017b32:	f103 0901 	add.w	r9, r3, #1
 8017b36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8017b3a:	4413      	add	r3, r2
 8017b3c:	9305      	str	r3, [sp, #20]
 8017b3e:	f00a 0301 	and.w	r3, sl, #1
 8017b42:	46b8      	mov	r8, r7
 8017b44:	9304      	str	r3, [sp, #16]
 8017b46:	4607      	mov	r7, r0
 8017b48:	4631      	mov	r1, r6
 8017b4a:	ee18 0a10 	vmov	r0, s16
 8017b4e:	f7ff fa75 	bl	801703c <quorem>
 8017b52:	4641      	mov	r1, r8
 8017b54:	9002      	str	r0, [sp, #8]
 8017b56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8017b5a:	ee18 0a10 	vmov	r0, s16
 8017b5e:	f000 fcc7 	bl	80184f0 <__mcmp>
 8017b62:	463a      	mov	r2, r7
 8017b64:	9003      	str	r0, [sp, #12]
 8017b66:	4631      	mov	r1, r6
 8017b68:	4620      	mov	r0, r4
 8017b6a:	f000 fcdd 	bl	8018528 <__mdiff>
 8017b6e:	68c2      	ldr	r2, [r0, #12]
 8017b70:	f109 3bff 	add.w	fp, r9, #4294967295
 8017b74:	4605      	mov	r5, r0
 8017b76:	bb02      	cbnz	r2, 8017bba <_dtoa_r+0xa62>
 8017b78:	4601      	mov	r1, r0
 8017b7a:	ee18 0a10 	vmov	r0, s16
 8017b7e:	f000 fcb7 	bl	80184f0 <__mcmp>
 8017b82:	4602      	mov	r2, r0
 8017b84:	4629      	mov	r1, r5
 8017b86:	4620      	mov	r0, r4
 8017b88:	9207      	str	r2, [sp, #28]
 8017b8a:	f000 fa6f 	bl	801806c <_Bfree>
 8017b8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8017b92:	ea43 0102 	orr.w	r1, r3, r2
 8017b96:	9b04      	ldr	r3, [sp, #16]
 8017b98:	430b      	orrs	r3, r1
 8017b9a:	464d      	mov	r5, r9
 8017b9c:	d10f      	bne.n	8017bbe <_dtoa_r+0xa66>
 8017b9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017ba2:	d02a      	beq.n	8017bfa <_dtoa_r+0xaa2>
 8017ba4:	9b03      	ldr	r3, [sp, #12]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	dd02      	ble.n	8017bb0 <_dtoa_r+0xa58>
 8017baa:	9b02      	ldr	r3, [sp, #8]
 8017bac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8017bb0:	f88b a000 	strb.w	sl, [fp]
 8017bb4:	e775      	b.n	8017aa2 <_dtoa_r+0x94a>
 8017bb6:	4638      	mov	r0, r7
 8017bb8:	e7ba      	b.n	8017b30 <_dtoa_r+0x9d8>
 8017bba:	2201      	movs	r2, #1
 8017bbc:	e7e2      	b.n	8017b84 <_dtoa_r+0xa2c>
 8017bbe:	9b03      	ldr	r3, [sp, #12]
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	db04      	blt.n	8017bce <_dtoa_r+0xa76>
 8017bc4:	9906      	ldr	r1, [sp, #24]
 8017bc6:	430b      	orrs	r3, r1
 8017bc8:	9904      	ldr	r1, [sp, #16]
 8017bca:	430b      	orrs	r3, r1
 8017bcc:	d122      	bne.n	8017c14 <_dtoa_r+0xabc>
 8017bce:	2a00      	cmp	r2, #0
 8017bd0:	ddee      	ble.n	8017bb0 <_dtoa_r+0xa58>
 8017bd2:	ee18 1a10 	vmov	r1, s16
 8017bd6:	2201      	movs	r2, #1
 8017bd8:	4620      	mov	r0, r4
 8017bda:	f000 fc19 	bl	8018410 <__lshift>
 8017bde:	4631      	mov	r1, r6
 8017be0:	ee08 0a10 	vmov	s16, r0
 8017be4:	f000 fc84 	bl	80184f0 <__mcmp>
 8017be8:	2800      	cmp	r0, #0
 8017bea:	dc03      	bgt.n	8017bf4 <_dtoa_r+0xa9c>
 8017bec:	d1e0      	bne.n	8017bb0 <_dtoa_r+0xa58>
 8017bee:	f01a 0f01 	tst.w	sl, #1
 8017bf2:	d0dd      	beq.n	8017bb0 <_dtoa_r+0xa58>
 8017bf4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017bf8:	d1d7      	bne.n	8017baa <_dtoa_r+0xa52>
 8017bfa:	2339      	movs	r3, #57	; 0x39
 8017bfc:	f88b 3000 	strb.w	r3, [fp]
 8017c00:	462b      	mov	r3, r5
 8017c02:	461d      	mov	r5, r3
 8017c04:	3b01      	subs	r3, #1
 8017c06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017c0a:	2a39      	cmp	r2, #57	; 0x39
 8017c0c:	d071      	beq.n	8017cf2 <_dtoa_r+0xb9a>
 8017c0e:	3201      	adds	r2, #1
 8017c10:	701a      	strb	r2, [r3, #0]
 8017c12:	e746      	b.n	8017aa2 <_dtoa_r+0x94a>
 8017c14:	2a00      	cmp	r2, #0
 8017c16:	dd07      	ble.n	8017c28 <_dtoa_r+0xad0>
 8017c18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017c1c:	d0ed      	beq.n	8017bfa <_dtoa_r+0xaa2>
 8017c1e:	f10a 0301 	add.w	r3, sl, #1
 8017c22:	f88b 3000 	strb.w	r3, [fp]
 8017c26:	e73c      	b.n	8017aa2 <_dtoa_r+0x94a>
 8017c28:	9b05      	ldr	r3, [sp, #20]
 8017c2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8017c2e:	4599      	cmp	r9, r3
 8017c30:	d047      	beq.n	8017cc2 <_dtoa_r+0xb6a>
 8017c32:	ee18 1a10 	vmov	r1, s16
 8017c36:	2300      	movs	r3, #0
 8017c38:	220a      	movs	r2, #10
 8017c3a:	4620      	mov	r0, r4
 8017c3c:	f000 fa38 	bl	80180b0 <__multadd>
 8017c40:	45b8      	cmp	r8, r7
 8017c42:	ee08 0a10 	vmov	s16, r0
 8017c46:	f04f 0300 	mov.w	r3, #0
 8017c4a:	f04f 020a 	mov.w	r2, #10
 8017c4e:	4641      	mov	r1, r8
 8017c50:	4620      	mov	r0, r4
 8017c52:	d106      	bne.n	8017c62 <_dtoa_r+0xb0a>
 8017c54:	f000 fa2c 	bl	80180b0 <__multadd>
 8017c58:	4680      	mov	r8, r0
 8017c5a:	4607      	mov	r7, r0
 8017c5c:	f109 0901 	add.w	r9, r9, #1
 8017c60:	e772      	b.n	8017b48 <_dtoa_r+0x9f0>
 8017c62:	f000 fa25 	bl	80180b0 <__multadd>
 8017c66:	4639      	mov	r1, r7
 8017c68:	4680      	mov	r8, r0
 8017c6a:	2300      	movs	r3, #0
 8017c6c:	220a      	movs	r2, #10
 8017c6e:	4620      	mov	r0, r4
 8017c70:	f000 fa1e 	bl	80180b0 <__multadd>
 8017c74:	4607      	mov	r7, r0
 8017c76:	e7f1      	b.n	8017c5c <_dtoa_r+0xb04>
 8017c78:	9b03      	ldr	r3, [sp, #12]
 8017c7a:	9302      	str	r3, [sp, #8]
 8017c7c:	9d01      	ldr	r5, [sp, #4]
 8017c7e:	ee18 0a10 	vmov	r0, s16
 8017c82:	4631      	mov	r1, r6
 8017c84:	f7ff f9da 	bl	801703c <quorem>
 8017c88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8017c8c:	9b01      	ldr	r3, [sp, #4]
 8017c8e:	f805 ab01 	strb.w	sl, [r5], #1
 8017c92:	1aea      	subs	r2, r5, r3
 8017c94:	9b02      	ldr	r3, [sp, #8]
 8017c96:	4293      	cmp	r3, r2
 8017c98:	dd09      	ble.n	8017cae <_dtoa_r+0xb56>
 8017c9a:	ee18 1a10 	vmov	r1, s16
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	220a      	movs	r2, #10
 8017ca2:	4620      	mov	r0, r4
 8017ca4:	f000 fa04 	bl	80180b0 <__multadd>
 8017ca8:	ee08 0a10 	vmov	s16, r0
 8017cac:	e7e7      	b.n	8017c7e <_dtoa_r+0xb26>
 8017cae:	9b02      	ldr	r3, [sp, #8]
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	bfc8      	it	gt
 8017cb4:	461d      	movgt	r5, r3
 8017cb6:	9b01      	ldr	r3, [sp, #4]
 8017cb8:	bfd8      	it	le
 8017cba:	2501      	movle	r5, #1
 8017cbc:	441d      	add	r5, r3
 8017cbe:	f04f 0800 	mov.w	r8, #0
 8017cc2:	ee18 1a10 	vmov	r1, s16
 8017cc6:	2201      	movs	r2, #1
 8017cc8:	4620      	mov	r0, r4
 8017cca:	f000 fba1 	bl	8018410 <__lshift>
 8017cce:	4631      	mov	r1, r6
 8017cd0:	ee08 0a10 	vmov	s16, r0
 8017cd4:	f000 fc0c 	bl	80184f0 <__mcmp>
 8017cd8:	2800      	cmp	r0, #0
 8017cda:	dc91      	bgt.n	8017c00 <_dtoa_r+0xaa8>
 8017cdc:	d102      	bne.n	8017ce4 <_dtoa_r+0xb8c>
 8017cde:	f01a 0f01 	tst.w	sl, #1
 8017ce2:	d18d      	bne.n	8017c00 <_dtoa_r+0xaa8>
 8017ce4:	462b      	mov	r3, r5
 8017ce6:	461d      	mov	r5, r3
 8017ce8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017cec:	2a30      	cmp	r2, #48	; 0x30
 8017cee:	d0fa      	beq.n	8017ce6 <_dtoa_r+0xb8e>
 8017cf0:	e6d7      	b.n	8017aa2 <_dtoa_r+0x94a>
 8017cf2:	9a01      	ldr	r2, [sp, #4]
 8017cf4:	429a      	cmp	r2, r3
 8017cf6:	d184      	bne.n	8017c02 <_dtoa_r+0xaaa>
 8017cf8:	9b00      	ldr	r3, [sp, #0]
 8017cfa:	3301      	adds	r3, #1
 8017cfc:	9300      	str	r3, [sp, #0]
 8017cfe:	2331      	movs	r3, #49	; 0x31
 8017d00:	7013      	strb	r3, [r2, #0]
 8017d02:	e6ce      	b.n	8017aa2 <_dtoa_r+0x94a>
 8017d04:	4b09      	ldr	r3, [pc, #36]	; (8017d2c <_dtoa_r+0xbd4>)
 8017d06:	f7ff ba95 	b.w	8017234 <_dtoa_r+0xdc>
 8017d0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	f47f aa6e 	bne.w	80171ee <_dtoa_r+0x96>
 8017d12:	4b07      	ldr	r3, [pc, #28]	; (8017d30 <_dtoa_r+0xbd8>)
 8017d14:	f7ff ba8e 	b.w	8017234 <_dtoa_r+0xdc>
 8017d18:	9b02      	ldr	r3, [sp, #8]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	dcae      	bgt.n	8017c7c <_dtoa_r+0xb24>
 8017d1e:	9b06      	ldr	r3, [sp, #24]
 8017d20:	2b02      	cmp	r3, #2
 8017d22:	f73f aea8 	bgt.w	8017a76 <_dtoa_r+0x91e>
 8017d26:	e7a9      	b.n	8017c7c <_dtoa_r+0xb24>
 8017d28:	08019c2c 	.word	0x08019c2c
 8017d2c:	08019a88 	.word	0x08019a88
 8017d30:	08019bad 	.word	0x08019bad

08017d34 <__sflush_r>:
 8017d34:	898a      	ldrh	r2, [r1, #12]
 8017d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d3a:	4605      	mov	r5, r0
 8017d3c:	0710      	lsls	r0, r2, #28
 8017d3e:	460c      	mov	r4, r1
 8017d40:	d458      	bmi.n	8017df4 <__sflush_r+0xc0>
 8017d42:	684b      	ldr	r3, [r1, #4]
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	dc05      	bgt.n	8017d54 <__sflush_r+0x20>
 8017d48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	dc02      	bgt.n	8017d54 <__sflush_r+0x20>
 8017d4e:	2000      	movs	r0, #0
 8017d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017d56:	2e00      	cmp	r6, #0
 8017d58:	d0f9      	beq.n	8017d4e <__sflush_r+0x1a>
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017d60:	682f      	ldr	r7, [r5, #0]
 8017d62:	602b      	str	r3, [r5, #0]
 8017d64:	d032      	beq.n	8017dcc <__sflush_r+0x98>
 8017d66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017d68:	89a3      	ldrh	r3, [r4, #12]
 8017d6a:	075a      	lsls	r2, r3, #29
 8017d6c:	d505      	bpl.n	8017d7a <__sflush_r+0x46>
 8017d6e:	6863      	ldr	r3, [r4, #4]
 8017d70:	1ac0      	subs	r0, r0, r3
 8017d72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017d74:	b10b      	cbz	r3, 8017d7a <__sflush_r+0x46>
 8017d76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017d78:	1ac0      	subs	r0, r0, r3
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	4602      	mov	r2, r0
 8017d7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017d80:	6a21      	ldr	r1, [r4, #32]
 8017d82:	4628      	mov	r0, r5
 8017d84:	47b0      	blx	r6
 8017d86:	1c43      	adds	r3, r0, #1
 8017d88:	89a3      	ldrh	r3, [r4, #12]
 8017d8a:	d106      	bne.n	8017d9a <__sflush_r+0x66>
 8017d8c:	6829      	ldr	r1, [r5, #0]
 8017d8e:	291d      	cmp	r1, #29
 8017d90:	d82c      	bhi.n	8017dec <__sflush_r+0xb8>
 8017d92:	4a2a      	ldr	r2, [pc, #168]	; (8017e3c <__sflush_r+0x108>)
 8017d94:	40ca      	lsrs	r2, r1
 8017d96:	07d6      	lsls	r6, r2, #31
 8017d98:	d528      	bpl.n	8017dec <__sflush_r+0xb8>
 8017d9a:	2200      	movs	r2, #0
 8017d9c:	6062      	str	r2, [r4, #4]
 8017d9e:	04d9      	lsls	r1, r3, #19
 8017da0:	6922      	ldr	r2, [r4, #16]
 8017da2:	6022      	str	r2, [r4, #0]
 8017da4:	d504      	bpl.n	8017db0 <__sflush_r+0x7c>
 8017da6:	1c42      	adds	r2, r0, #1
 8017da8:	d101      	bne.n	8017dae <__sflush_r+0x7a>
 8017daa:	682b      	ldr	r3, [r5, #0]
 8017dac:	b903      	cbnz	r3, 8017db0 <__sflush_r+0x7c>
 8017dae:	6560      	str	r0, [r4, #84]	; 0x54
 8017db0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017db2:	602f      	str	r7, [r5, #0]
 8017db4:	2900      	cmp	r1, #0
 8017db6:	d0ca      	beq.n	8017d4e <__sflush_r+0x1a>
 8017db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017dbc:	4299      	cmp	r1, r3
 8017dbe:	d002      	beq.n	8017dc6 <__sflush_r+0x92>
 8017dc0:	4628      	mov	r0, r5
 8017dc2:	f7fe f9ab 	bl	801611c <_free_r>
 8017dc6:	2000      	movs	r0, #0
 8017dc8:	6360      	str	r0, [r4, #52]	; 0x34
 8017dca:	e7c1      	b.n	8017d50 <__sflush_r+0x1c>
 8017dcc:	6a21      	ldr	r1, [r4, #32]
 8017dce:	2301      	movs	r3, #1
 8017dd0:	4628      	mov	r0, r5
 8017dd2:	47b0      	blx	r6
 8017dd4:	1c41      	adds	r1, r0, #1
 8017dd6:	d1c7      	bne.n	8017d68 <__sflush_r+0x34>
 8017dd8:	682b      	ldr	r3, [r5, #0]
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d0c4      	beq.n	8017d68 <__sflush_r+0x34>
 8017dde:	2b1d      	cmp	r3, #29
 8017de0:	d001      	beq.n	8017de6 <__sflush_r+0xb2>
 8017de2:	2b16      	cmp	r3, #22
 8017de4:	d101      	bne.n	8017dea <__sflush_r+0xb6>
 8017de6:	602f      	str	r7, [r5, #0]
 8017de8:	e7b1      	b.n	8017d4e <__sflush_r+0x1a>
 8017dea:	89a3      	ldrh	r3, [r4, #12]
 8017dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017df0:	81a3      	strh	r3, [r4, #12]
 8017df2:	e7ad      	b.n	8017d50 <__sflush_r+0x1c>
 8017df4:	690f      	ldr	r7, [r1, #16]
 8017df6:	2f00      	cmp	r7, #0
 8017df8:	d0a9      	beq.n	8017d4e <__sflush_r+0x1a>
 8017dfa:	0793      	lsls	r3, r2, #30
 8017dfc:	680e      	ldr	r6, [r1, #0]
 8017dfe:	bf08      	it	eq
 8017e00:	694b      	ldreq	r3, [r1, #20]
 8017e02:	600f      	str	r7, [r1, #0]
 8017e04:	bf18      	it	ne
 8017e06:	2300      	movne	r3, #0
 8017e08:	eba6 0807 	sub.w	r8, r6, r7
 8017e0c:	608b      	str	r3, [r1, #8]
 8017e0e:	f1b8 0f00 	cmp.w	r8, #0
 8017e12:	dd9c      	ble.n	8017d4e <__sflush_r+0x1a>
 8017e14:	6a21      	ldr	r1, [r4, #32]
 8017e16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017e18:	4643      	mov	r3, r8
 8017e1a:	463a      	mov	r2, r7
 8017e1c:	4628      	mov	r0, r5
 8017e1e:	47b0      	blx	r6
 8017e20:	2800      	cmp	r0, #0
 8017e22:	dc06      	bgt.n	8017e32 <__sflush_r+0xfe>
 8017e24:	89a3      	ldrh	r3, [r4, #12]
 8017e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e2a:	81a3      	strh	r3, [r4, #12]
 8017e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8017e30:	e78e      	b.n	8017d50 <__sflush_r+0x1c>
 8017e32:	4407      	add	r7, r0
 8017e34:	eba8 0800 	sub.w	r8, r8, r0
 8017e38:	e7e9      	b.n	8017e0e <__sflush_r+0xda>
 8017e3a:	bf00      	nop
 8017e3c:	20400001 	.word	0x20400001

08017e40 <_fflush_r>:
 8017e40:	b538      	push	{r3, r4, r5, lr}
 8017e42:	690b      	ldr	r3, [r1, #16]
 8017e44:	4605      	mov	r5, r0
 8017e46:	460c      	mov	r4, r1
 8017e48:	b913      	cbnz	r3, 8017e50 <_fflush_r+0x10>
 8017e4a:	2500      	movs	r5, #0
 8017e4c:	4628      	mov	r0, r5
 8017e4e:	bd38      	pop	{r3, r4, r5, pc}
 8017e50:	b118      	cbz	r0, 8017e5a <_fflush_r+0x1a>
 8017e52:	6983      	ldr	r3, [r0, #24]
 8017e54:	b90b      	cbnz	r3, 8017e5a <_fflush_r+0x1a>
 8017e56:	f7fe f881 	bl	8015f5c <__sinit>
 8017e5a:	4b14      	ldr	r3, [pc, #80]	; (8017eac <_fflush_r+0x6c>)
 8017e5c:	429c      	cmp	r4, r3
 8017e5e:	d11b      	bne.n	8017e98 <_fflush_r+0x58>
 8017e60:	686c      	ldr	r4, [r5, #4]
 8017e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d0ef      	beq.n	8017e4a <_fflush_r+0xa>
 8017e6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017e6c:	07d0      	lsls	r0, r2, #31
 8017e6e:	d404      	bmi.n	8017e7a <_fflush_r+0x3a>
 8017e70:	0599      	lsls	r1, r3, #22
 8017e72:	d402      	bmi.n	8017e7a <_fflush_r+0x3a>
 8017e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017e76:	f7ed fbed 	bl	8005654 <__retarget_lock_acquire_recursive>
 8017e7a:	4628      	mov	r0, r5
 8017e7c:	4621      	mov	r1, r4
 8017e7e:	f7ff ff59 	bl	8017d34 <__sflush_r>
 8017e82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017e84:	07da      	lsls	r2, r3, #31
 8017e86:	4605      	mov	r5, r0
 8017e88:	d4e0      	bmi.n	8017e4c <_fflush_r+0xc>
 8017e8a:	89a3      	ldrh	r3, [r4, #12]
 8017e8c:	059b      	lsls	r3, r3, #22
 8017e8e:	d4dd      	bmi.n	8017e4c <_fflush_r+0xc>
 8017e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017e92:	f7ed fbf3 	bl	800567c <__retarget_lock_release_recursive>
 8017e96:	e7d9      	b.n	8017e4c <_fflush_r+0xc>
 8017e98:	4b05      	ldr	r3, [pc, #20]	; (8017eb0 <_fflush_r+0x70>)
 8017e9a:	429c      	cmp	r4, r3
 8017e9c:	d101      	bne.n	8017ea2 <_fflush_r+0x62>
 8017e9e:	68ac      	ldr	r4, [r5, #8]
 8017ea0:	e7df      	b.n	8017e62 <_fflush_r+0x22>
 8017ea2:	4b04      	ldr	r3, [pc, #16]	; (8017eb4 <_fflush_r+0x74>)
 8017ea4:	429c      	cmp	r4, r3
 8017ea6:	bf08      	it	eq
 8017ea8:	68ec      	ldreq	r4, [r5, #12]
 8017eaa:	e7da      	b.n	8017e62 <_fflush_r+0x22>
 8017eac:	08019a34 	.word	0x08019a34
 8017eb0:	08019a54 	.word	0x08019a54
 8017eb4:	08019a14 	.word	0x08019a14

08017eb8 <_localeconv_r>:
 8017eb8:	4800      	ldr	r0, [pc, #0]	; (8017ebc <_localeconv_r+0x4>)
 8017eba:	4770      	bx	lr
 8017ebc:	20000290 	.word	0x20000290

08017ec0 <_lseek_r>:
 8017ec0:	b538      	push	{r3, r4, r5, lr}
 8017ec2:	4d07      	ldr	r5, [pc, #28]	; (8017ee0 <_lseek_r+0x20>)
 8017ec4:	4604      	mov	r4, r0
 8017ec6:	4608      	mov	r0, r1
 8017ec8:	4611      	mov	r1, r2
 8017eca:	2200      	movs	r2, #0
 8017ecc:	602a      	str	r2, [r5, #0]
 8017ece:	461a      	mov	r2, r3
 8017ed0:	f7ec ff52 	bl	8004d78 <_lseek>
 8017ed4:	1c43      	adds	r3, r0, #1
 8017ed6:	d102      	bne.n	8017ede <_lseek_r+0x1e>
 8017ed8:	682b      	ldr	r3, [r5, #0]
 8017eda:	b103      	cbz	r3, 8017ede <_lseek_r+0x1e>
 8017edc:	6023      	str	r3, [r4, #0]
 8017ede:	bd38      	pop	{r3, r4, r5, pc}
 8017ee0:	2000710c 	.word	0x2000710c

08017ee4 <__swhatbuf_r>:
 8017ee4:	b570      	push	{r4, r5, r6, lr}
 8017ee6:	460e      	mov	r6, r1
 8017ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017eec:	2900      	cmp	r1, #0
 8017eee:	b096      	sub	sp, #88	; 0x58
 8017ef0:	4614      	mov	r4, r2
 8017ef2:	461d      	mov	r5, r3
 8017ef4:	da08      	bge.n	8017f08 <__swhatbuf_r+0x24>
 8017ef6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017efa:	2200      	movs	r2, #0
 8017efc:	602a      	str	r2, [r5, #0]
 8017efe:	061a      	lsls	r2, r3, #24
 8017f00:	d410      	bmi.n	8017f24 <__swhatbuf_r+0x40>
 8017f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017f06:	e00e      	b.n	8017f26 <__swhatbuf_r+0x42>
 8017f08:	466a      	mov	r2, sp
 8017f0a:	f000 fdb3 	bl	8018a74 <_fstat_r>
 8017f0e:	2800      	cmp	r0, #0
 8017f10:	dbf1      	blt.n	8017ef6 <__swhatbuf_r+0x12>
 8017f12:	9a01      	ldr	r2, [sp, #4]
 8017f14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017f18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017f1c:	425a      	negs	r2, r3
 8017f1e:	415a      	adcs	r2, r3
 8017f20:	602a      	str	r2, [r5, #0]
 8017f22:	e7ee      	b.n	8017f02 <__swhatbuf_r+0x1e>
 8017f24:	2340      	movs	r3, #64	; 0x40
 8017f26:	2000      	movs	r0, #0
 8017f28:	6023      	str	r3, [r4, #0]
 8017f2a:	b016      	add	sp, #88	; 0x58
 8017f2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08017f30 <__smakebuf_r>:
 8017f30:	898b      	ldrh	r3, [r1, #12]
 8017f32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017f34:	079d      	lsls	r5, r3, #30
 8017f36:	4606      	mov	r6, r0
 8017f38:	460c      	mov	r4, r1
 8017f3a:	d507      	bpl.n	8017f4c <__smakebuf_r+0x1c>
 8017f3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017f40:	6023      	str	r3, [r4, #0]
 8017f42:	6123      	str	r3, [r4, #16]
 8017f44:	2301      	movs	r3, #1
 8017f46:	6163      	str	r3, [r4, #20]
 8017f48:	b002      	add	sp, #8
 8017f4a:	bd70      	pop	{r4, r5, r6, pc}
 8017f4c:	ab01      	add	r3, sp, #4
 8017f4e:	466a      	mov	r2, sp
 8017f50:	f7ff ffc8 	bl	8017ee4 <__swhatbuf_r>
 8017f54:	9900      	ldr	r1, [sp, #0]
 8017f56:	4605      	mov	r5, r0
 8017f58:	4630      	mov	r0, r6
 8017f5a:	f7fe f94b 	bl	80161f4 <_malloc_r>
 8017f5e:	b948      	cbnz	r0, 8017f74 <__smakebuf_r+0x44>
 8017f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f64:	059a      	lsls	r2, r3, #22
 8017f66:	d4ef      	bmi.n	8017f48 <__smakebuf_r+0x18>
 8017f68:	f023 0303 	bic.w	r3, r3, #3
 8017f6c:	f043 0302 	orr.w	r3, r3, #2
 8017f70:	81a3      	strh	r3, [r4, #12]
 8017f72:	e7e3      	b.n	8017f3c <__smakebuf_r+0xc>
 8017f74:	4b0d      	ldr	r3, [pc, #52]	; (8017fac <__smakebuf_r+0x7c>)
 8017f76:	62b3      	str	r3, [r6, #40]	; 0x28
 8017f78:	89a3      	ldrh	r3, [r4, #12]
 8017f7a:	6020      	str	r0, [r4, #0]
 8017f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017f80:	81a3      	strh	r3, [r4, #12]
 8017f82:	9b00      	ldr	r3, [sp, #0]
 8017f84:	6163      	str	r3, [r4, #20]
 8017f86:	9b01      	ldr	r3, [sp, #4]
 8017f88:	6120      	str	r0, [r4, #16]
 8017f8a:	b15b      	cbz	r3, 8017fa4 <__smakebuf_r+0x74>
 8017f8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017f90:	4630      	mov	r0, r6
 8017f92:	f000 fd81 	bl	8018a98 <_isatty_r>
 8017f96:	b128      	cbz	r0, 8017fa4 <__smakebuf_r+0x74>
 8017f98:	89a3      	ldrh	r3, [r4, #12]
 8017f9a:	f023 0303 	bic.w	r3, r3, #3
 8017f9e:	f043 0301 	orr.w	r3, r3, #1
 8017fa2:	81a3      	strh	r3, [r4, #12]
 8017fa4:	89a0      	ldrh	r0, [r4, #12]
 8017fa6:	4305      	orrs	r5, r0
 8017fa8:	81a5      	strh	r5, [r4, #12]
 8017faa:	e7cd      	b.n	8017f48 <__smakebuf_r+0x18>
 8017fac:	08015ef5 	.word	0x08015ef5

08017fb0 <__ascii_mbtowc>:
 8017fb0:	b082      	sub	sp, #8
 8017fb2:	b901      	cbnz	r1, 8017fb6 <__ascii_mbtowc+0x6>
 8017fb4:	a901      	add	r1, sp, #4
 8017fb6:	b142      	cbz	r2, 8017fca <__ascii_mbtowc+0x1a>
 8017fb8:	b14b      	cbz	r3, 8017fce <__ascii_mbtowc+0x1e>
 8017fba:	7813      	ldrb	r3, [r2, #0]
 8017fbc:	600b      	str	r3, [r1, #0]
 8017fbe:	7812      	ldrb	r2, [r2, #0]
 8017fc0:	1e10      	subs	r0, r2, #0
 8017fc2:	bf18      	it	ne
 8017fc4:	2001      	movne	r0, #1
 8017fc6:	b002      	add	sp, #8
 8017fc8:	4770      	bx	lr
 8017fca:	4610      	mov	r0, r2
 8017fcc:	e7fb      	b.n	8017fc6 <__ascii_mbtowc+0x16>
 8017fce:	f06f 0001 	mvn.w	r0, #1
 8017fd2:	e7f8      	b.n	8017fc6 <__ascii_mbtowc+0x16>

08017fd4 <__malloc_lock>:
 8017fd4:	4801      	ldr	r0, [pc, #4]	; (8017fdc <__malloc_lock+0x8>)
 8017fd6:	f7ed bb3d 	b.w	8005654 <__retarget_lock_acquire_recursive>
 8017fda:	bf00      	nop
 8017fdc:	2000085c 	.word	0x2000085c

08017fe0 <__malloc_unlock>:
 8017fe0:	4801      	ldr	r0, [pc, #4]	; (8017fe8 <__malloc_unlock+0x8>)
 8017fe2:	f7ed bb4b 	b.w	800567c <__retarget_lock_release_recursive>
 8017fe6:	bf00      	nop
 8017fe8:	2000085c 	.word	0x2000085c

08017fec <_Balloc>:
 8017fec:	b570      	push	{r4, r5, r6, lr}
 8017fee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017ff0:	4604      	mov	r4, r0
 8017ff2:	460d      	mov	r5, r1
 8017ff4:	b976      	cbnz	r6, 8018014 <_Balloc+0x28>
 8017ff6:	2010      	movs	r0, #16
 8017ff8:	f7fe f872 	bl	80160e0 <malloc>
 8017ffc:	4602      	mov	r2, r0
 8017ffe:	6260      	str	r0, [r4, #36]	; 0x24
 8018000:	b920      	cbnz	r0, 801800c <_Balloc+0x20>
 8018002:	4b18      	ldr	r3, [pc, #96]	; (8018064 <_Balloc+0x78>)
 8018004:	4818      	ldr	r0, [pc, #96]	; (8018068 <_Balloc+0x7c>)
 8018006:	2166      	movs	r1, #102	; 0x66
 8018008:	f000 fd04 	bl	8018a14 <__assert_func>
 801800c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018010:	6006      	str	r6, [r0, #0]
 8018012:	60c6      	str	r6, [r0, #12]
 8018014:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018016:	68f3      	ldr	r3, [r6, #12]
 8018018:	b183      	cbz	r3, 801803c <_Balloc+0x50>
 801801a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801801c:	68db      	ldr	r3, [r3, #12]
 801801e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018022:	b9b8      	cbnz	r0, 8018054 <_Balloc+0x68>
 8018024:	2101      	movs	r1, #1
 8018026:	fa01 f605 	lsl.w	r6, r1, r5
 801802a:	1d72      	adds	r2, r6, #5
 801802c:	0092      	lsls	r2, r2, #2
 801802e:	4620      	mov	r0, r4
 8018030:	f000 fb60 	bl	80186f4 <_calloc_r>
 8018034:	b160      	cbz	r0, 8018050 <_Balloc+0x64>
 8018036:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801803a:	e00e      	b.n	801805a <_Balloc+0x6e>
 801803c:	2221      	movs	r2, #33	; 0x21
 801803e:	2104      	movs	r1, #4
 8018040:	4620      	mov	r0, r4
 8018042:	f000 fb57 	bl	80186f4 <_calloc_r>
 8018046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018048:	60f0      	str	r0, [r6, #12]
 801804a:	68db      	ldr	r3, [r3, #12]
 801804c:	2b00      	cmp	r3, #0
 801804e:	d1e4      	bne.n	801801a <_Balloc+0x2e>
 8018050:	2000      	movs	r0, #0
 8018052:	bd70      	pop	{r4, r5, r6, pc}
 8018054:	6802      	ldr	r2, [r0, #0]
 8018056:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801805a:	2300      	movs	r3, #0
 801805c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018060:	e7f7      	b.n	8018052 <_Balloc+0x66>
 8018062:	bf00      	nop
 8018064:	08019bba 	.word	0x08019bba
 8018068:	08019c47 	.word	0x08019c47

0801806c <_Bfree>:
 801806c:	b570      	push	{r4, r5, r6, lr}
 801806e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018070:	4605      	mov	r5, r0
 8018072:	460c      	mov	r4, r1
 8018074:	b976      	cbnz	r6, 8018094 <_Bfree+0x28>
 8018076:	2010      	movs	r0, #16
 8018078:	f7fe f832 	bl	80160e0 <malloc>
 801807c:	4602      	mov	r2, r0
 801807e:	6268      	str	r0, [r5, #36]	; 0x24
 8018080:	b920      	cbnz	r0, 801808c <_Bfree+0x20>
 8018082:	4b09      	ldr	r3, [pc, #36]	; (80180a8 <_Bfree+0x3c>)
 8018084:	4809      	ldr	r0, [pc, #36]	; (80180ac <_Bfree+0x40>)
 8018086:	218a      	movs	r1, #138	; 0x8a
 8018088:	f000 fcc4 	bl	8018a14 <__assert_func>
 801808c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018090:	6006      	str	r6, [r0, #0]
 8018092:	60c6      	str	r6, [r0, #12]
 8018094:	b13c      	cbz	r4, 80180a6 <_Bfree+0x3a>
 8018096:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018098:	6862      	ldr	r2, [r4, #4]
 801809a:	68db      	ldr	r3, [r3, #12]
 801809c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80180a0:	6021      	str	r1, [r4, #0]
 80180a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80180a6:	bd70      	pop	{r4, r5, r6, pc}
 80180a8:	08019bba 	.word	0x08019bba
 80180ac:	08019c47 	.word	0x08019c47

080180b0 <__multadd>:
 80180b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180b4:	690d      	ldr	r5, [r1, #16]
 80180b6:	4607      	mov	r7, r0
 80180b8:	460c      	mov	r4, r1
 80180ba:	461e      	mov	r6, r3
 80180bc:	f101 0c14 	add.w	ip, r1, #20
 80180c0:	2000      	movs	r0, #0
 80180c2:	f8dc 3000 	ldr.w	r3, [ip]
 80180c6:	b299      	uxth	r1, r3
 80180c8:	fb02 6101 	mla	r1, r2, r1, r6
 80180cc:	0c1e      	lsrs	r6, r3, #16
 80180ce:	0c0b      	lsrs	r3, r1, #16
 80180d0:	fb02 3306 	mla	r3, r2, r6, r3
 80180d4:	b289      	uxth	r1, r1
 80180d6:	3001      	adds	r0, #1
 80180d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80180dc:	4285      	cmp	r5, r0
 80180de:	f84c 1b04 	str.w	r1, [ip], #4
 80180e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80180e6:	dcec      	bgt.n	80180c2 <__multadd+0x12>
 80180e8:	b30e      	cbz	r6, 801812e <__multadd+0x7e>
 80180ea:	68a3      	ldr	r3, [r4, #8]
 80180ec:	42ab      	cmp	r3, r5
 80180ee:	dc19      	bgt.n	8018124 <__multadd+0x74>
 80180f0:	6861      	ldr	r1, [r4, #4]
 80180f2:	4638      	mov	r0, r7
 80180f4:	3101      	adds	r1, #1
 80180f6:	f7ff ff79 	bl	8017fec <_Balloc>
 80180fa:	4680      	mov	r8, r0
 80180fc:	b928      	cbnz	r0, 801810a <__multadd+0x5a>
 80180fe:	4602      	mov	r2, r0
 8018100:	4b0c      	ldr	r3, [pc, #48]	; (8018134 <__multadd+0x84>)
 8018102:	480d      	ldr	r0, [pc, #52]	; (8018138 <__multadd+0x88>)
 8018104:	21b5      	movs	r1, #181	; 0xb5
 8018106:	f000 fc85 	bl	8018a14 <__assert_func>
 801810a:	6922      	ldr	r2, [r4, #16]
 801810c:	3202      	adds	r2, #2
 801810e:	f104 010c 	add.w	r1, r4, #12
 8018112:	0092      	lsls	r2, r2, #2
 8018114:	300c      	adds	r0, #12
 8018116:	f7fd ffeb 	bl	80160f0 <memcpy>
 801811a:	4621      	mov	r1, r4
 801811c:	4638      	mov	r0, r7
 801811e:	f7ff ffa5 	bl	801806c <_Bfree>
 8018122:	4644      	mov	r4, r8
 8018124:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018128:	3501      	adds	r5, #1
 801812a:	615e      	str	r6, [r3, #20]
 801812c:	6125      	str	r5, [r4, #16]
 801812e:	4620      	mov	r0, r4
 8018130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018134:	08019c2c 	.word	0x08019c2c
 8018138:	08019c47 	.word	0x08019c47

0801813c <__hi0bits>:
 801813c:	0c03      	lsrs	r3, r0, #16
 801813e:	041b      	lsls	r3, r3, #16
 8018140:	b9d3      	cbnz	r3, 8018178 <__hi0bits+0x3c>
 8018142:	0400      	lsls	r0, r0, #16
 8018144:	2310      	movs	r3, #16
 8018146:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801814a:	bf04      	itt	eq
 801814c:	0200      	lsleq	r0, r0, #8
 801814e:	3308      	addeq	r3, #8
 8018150:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018154:	bf04      	itt	eq
 8018156:	0100      	lsleq	r0, r0, #4
 8018158:	3304      	addeq	r3, #4
 801815a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801815e:	bf04      	itt	eq
 8018160:	0080      	lsleq	r0, r0, #2
 8018162:	3302      	addeq	r3, #2
 8018164:	2800      	cmp	r0, #0
 8018166:	db05      	blt.n	8018174 <__hi0bits+0x38>
 8018168:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801816c:	f103 0301 	add.w	r3, r3, #1
 8018170:	bf08      	it	eq
 8018172:	2320      	moveq	r3, #32
 8018174:	4618      	mov	r0, r3
 8018176:	4770      	bx	lr
 8018178:	2300      	movs	r3, #0
 801817a:	e7e4      	b.n	8018146 <__hi0bits+0xa>

0801817c <__lo0bits>:
 801817c:	6803      	ldr	r3, [r0, #0]
 801817e:	f013 0207 	ands.w	r2, r3, #7
 8018182:	4601      	mov	r1, r0
 8018184:	d00b      	beq.n	801819e <__lo0bits+0x22>
 8018186:	07da      	lsls	r2, r3, #31
 8018188:	d423      	bmi.n	80181d2 <__lo0bits+0x56>
 801818a:	0798      	lsls	r0, r3, #30
 801818c:	bf49      	itett	mi
 801818e:	085b      	lsrmi	r3, r3, #1
 8018190:	089b      	lsrpl	r3, r3, #2
 8018192:	2001      	movmi	r0, #1
 8018194:	600b      	strmi	r3, [r1, #0]
 8018196:	bf5c      	itt	pl
 8018198:	600b      	strpl	r3, [r1, #0]
 801819a:	2002      	movpl	r0, #2
 801819c:	4770      	bx	lr
 801819e:	b298      	uxth	r0, r3
 80181a0:	b9a8      	cbnz	r0, 80181ce <__lo0bits+0x52>
 80181a2:	0c1b      	lsrs	r3, r3, #16
 80181a4:	2010      	movs	r0, #16
 80181a6:	b2da      	uxtb	r2, r3
 80181a8:	b90a      	cbnz	r2, 80181ae <__lo0bits+0x32>
 80181aa:	3008      	adds	r0, #8
 80181ac:	0a1b      	lsrs	r3, r3, #8
 80181ae:	071a      	lsls	r2, r3, #28
 80181b0:	bf04      	itt	eq
 80181b2:	091b      	lsreq	r3, r3, #4
 80181b4:	3004      	addeq	r0, #4
 80181b6:	079a      	lsls	r2, r3, #30
 80181b8:	bf04      	itt	eq
 80181ba:	089b      	lsreq	r3, r3, #2
 80181bc:	3002      	addeq	r0, #2
 80181be:	07da      	lsls	r2, r3, #31
 80181c0:	d403      	bmi.n	80181ca <__lo0bits+0x4e>
 80181c2:	085b      	lsrs	r3, r3, #1
 80181c4:	f100 0001 	add.w	r0, r0, #1
 80181c8:	d005      	beq.n	80181d6 <__lo0bits+0x5a>
 80181ca:	600b      	str	r3, [r1, #0]
 80181cc:	4770      	bx	lr
 80181ce:	4610      	mov	r0, r2
 80181d0:	e7e9      	b.n	80181a6 <__lo0bits+0x2a>
 80181d2:	2000      	movs	r0, #0
 80181d4:	4770      	bx	lr
 80181d6:	2020      	movs	r0, #32
 80181d8:	4770      	bx	lr
	...

080181dc <__i2b>:
 80181dc:	b510      	push	{r4, lr}
 80181de:	460c      	mov	r4, r1
 80181e0:	2101      	movs	r1, #1
 80181e2:	f7ff ff03 	bl	8017fec <_Balloc>
 80181e6:	4602      	mov	r2, r0
 80181e8:	b928      	cbnz	r0, 80181f6 <__i2b+0x1a>
 80181ea:	4b05      	ldr	r3, [pc, #20]	; (8018200 <__i2b+0x24>)
 80181ec:	4805      	ldr	r0, [pc, #20]	; (8018204 <__i2b+0x28>)
 80181ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80181f2:	f000 fc0f 	bl	8018a14 <__assert_func>
 80181f6:	2301      	movs	r3, #1
 80181f8:	6144      	str	r4, [r0, #20]
 80181fa:	6103      	str	r3, [r0, #16]
 80181fc:	bd10      	pop	{r4, pc}
 80181fe:	bf00      	nop
 8018200:	08019c2c 	.word	0x08019c2c
 8018204:	08019c47 	.word	0x08019c47

08018208 <__multiply>:
 8018208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801820c:	4691      	mov	r9, r2
 801820e:	690a      	ldr	r2, [r1, #16]
 8018210:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018214:	429a      	cmp	r2, r3
 8018216:	bfb8      	it	lt
 8018218:	460b      	movlt	r3, r1
 801821a:	460c      	mov	r4, r1
 801821c:	bfbc      	itt	lt
 801821e:	464c      	movlt	r4, r9
 8018220:	4699      	movlt	r9, r3
 8018222:	6927      	ldr	r7, [r4, #16]
 8018224:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018228:	68a3      	ldr	r3, [r4, #8]
 801822a:	6861      	ldr	r1, [r4, #4]
 801822c:	eb07 060a 	add.w	r6, r7, sl
 8018230:	42b3      	cmp	r3, r6
 8018232:	b085      	sub	sp, #20
 8018234:	bfb8      	it	lt
 8018236:	3101      	addlt	r1, #1
 8018238:	f7ff fed8 	bl	8017fec <_Balloc>
 801823c:	b930      	cbnz	r0, 801824c <__multiply+0x44>
 801823e:	4602      	mov	r2, r0
 8018240:	4b44      	ldr	r3, [pc, #272]	; (8018354 <__multiply+0x14c>)
 8018242:	4845      	ldr	r0, [pc, #276]	; (8018358 <__multiply+0x150>)
 8018244:	f240 115d 	movw	r1, #349	; 0x15d
 8018248:	f000 fbe4 	bl	8018a14 <__assert_func>
 801824c:	f100 0514 	add.w	r5, r0, #20
 8018250:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018254:	462b      	mov	r3, r5
 8018256:	2200      	movs	r2, #0
 8018258:	4543      	cmp	r3, r8
 801825a:	d321      	bcc.n	80182a0 <__multiply+0x98>
 801825c:	f104 0314 	add.w	r3, r4, #20
 8018260:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018264:	f109 0314 	add.w	r3, r9, #20
 8018268:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801826c:	9202      	str	r2, [sp, #8]
 801826e:	1b3a      	subs	r2, r7, r4
 8018270:	3a15      	subs	r2, #21
 8018272:	f022 0203 	bic.w	r2, r2, #3
 8018276:	3204      	adds	r2, #4
 8018278:	f104 0115 	add.w	r1, r4, #21
 801827c:	428f      	cmp	r7, r1
 801827e:	bf38      	it	cc
 8018280:	2204      	movcc	r2, #4
 8018282:	9201      	str	r2, [sp, #4]
 8018284:	9a02      	ldr	r2, [sp, #8]
 8018286:	9303      	str	r3, [sp, #12]
 8018288:	429a      	cmp	r2, r3
 801828a:	d80c      	bhi.n	80182a6 <__multiply+0x9e>
 801828c:	2e00      	cmp	r6, #0
 801828e:	dd03      	ble.n	8018298 <__multiply+0x90>
 8018290:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018294:	2b00      	cmp	r3, #0
 8018296:	d05a      	beq.n	801834e <__multiply+0x146>
 8018298:	6106      	str	r6, [r0, #16]
 801829a:	b005      	add	sp, #20
 801829c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182a0:	f843 2b04 	str.w	r2, [r3], #4
 80182a4:	e7d8      	b.n	8018258 <__multiply+0x50>
 80182a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80182aa:	f1ba 0f00 	cmp.w	sl, #0
 80182ae:	d024      	beq.n	80182fa <__multiply+0xf2>
 80182b0:	f104 0e14 	add.w	lr, r4, #20
 80182b4:	46a9      	mov	r9, r5
 80182b6:	f04f 0c00 	mov.w	ip, #0
 80182ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 80182be:	f8d9 1000 	ldr.w	r1, [r9]
 80182c2:	fa1f fb82 	uxth.w	fp, r2
 80182c6:	b289      	uxth	r1, r1
 80182c8:	fb0a 110b 	mla	r1, sl, fp, r1
 80182cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80182d0:	f8d9 2000 	ldr.w	r2, [r9]
 80182d4:	4461      	add	r1, ip
 80182d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80182da:	fb0a c20b 	mla	r2, sl, fp, ip
 80182de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80182e2:	b289      	uxth	r1, r1
 80182e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80182e8:	4577      	cmp	r7, lr
 80182ea:	f849 1b04 	str.w	r1, [r9], #4
 80182ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80182f2:	d8e2      	bhi.n	80182ba <__multiply+0xb2>
 80182f4:	9a01      	ldr	r2, [sp, #4]
 80182f6:	f845 c002 	str.w	ip, [r5, r2]
 80182fa:	9a03      	ldr	r2, [sp, #12]
 80182fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018300:	3304      	adds	r3, #4
 8018302:	f1b9 0f00 	cmp.w	r9, #0
 8018306:	d020      	beq.n	801834a <__multiply+0x142>
 8018308:	6829      	ldr	r1, [r5, #0]
 801830a:	f104 0c14 	add.w	ip, r4, #20
 801830e:	46ae      	mov	lr, r5
 8018310:	f04f 0a00 	mov.w	sl, #0
 8018314:	f8bc b000 	ldrh.w	fp, [ip]
 8018318:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801831c:	fb09 220b 	mla	r2, r9, fp, r2
 8018320:	4492      	add	sl, r2
 8018322:	b289      	uxth	r1, r1
 8018324:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8018328:	f84e 1b04 	str.w	r1, [lr], #4
 801832c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8018330:	f8be 1000 	ldrh.w	r1, [lr]
 8018334:	0c12      	lsrs	r2, r2, #16
 8018336:	fb09 1102 	mla	r1, r9, r2, r1
 801833a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801833e:	4567      	cmp	r7, ip
 8018340:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018344:	d8e6      	bhi.n	8018314 <__multiply+0x10c>
 8018346:	9a01      	ldr	r2, [sp, #4]
 8018348:	50a9      	str	r1, [r5, r2]
 801834a:	3504      	adds	r5, #4
 801834c:	e79a      	b.n	8018284 <__multiply+0x7c>
 801834e:	3e01      	subs	r6, #1
 8018350:	e79c      	b.n	801828c <__multiply+0x84>
 8018352:	bf00      	nop
 8018354:	08019c2c 	.word	0x08019c2c
 8018358:	08019c47 	.word	0x08019c47

0801835c <__pow5mult>:
 801835c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018360:	4615      	mov	r5, r2
 8018362:	f012 0203 	ands.w	r2, r2, #3
 8018366:	4606      	mov	r6, r0
 8018368:	460f      	mov	r7, r1
 801836a:	d007      	beq.n	801837c <__pow5mult+0x20>
 801836c:	4c25      	ldr	r4, [pc, #148]	; (8018404 <__pow5mult+0xa8>)
 801836e:	3a01      	subs	r2, #1
 8018370:	2300      	movs	r3, #0
 8018372:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018376:	f7ff fe9b 	bl	80180b0 <__multadd>
 801837a:	4607      	mov	r7, r0
 801837c:	10ad      	asrs	r5, r5, #2
 801837e:	d03d      	beq.n	80183fc <__pow5mult+0xa0>
 8018380:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018382:	b97c      	cbnz	r4, 80183a4 <__pow5mult+0x48>
 8018384:	2010      	movs	r0, #16
 8018386:	f7fd feab 	bl	80160e0 <malloc>
 801838a:	4602      	mov	r2, r0
 801838c:	6270      	str	r0, [r6, #36]	; 0x24
 801838e:	b928      	cbnz	r0, 801839c <__pow5mult+0x40>
 8018390:	4b1d      	ldr	r3, [pc, #116]	; (8018408 <__pow5mult+0xac>)
 8018392:	481e      	ldr	r0, [pc, #120]	; (801840c <__pow5mult+0xb0>)
 8018394:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018398:	f000 fb3c 	bl	8018a14 <__assert_func>
 801839c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80183a0:	6004      	str	r4, [r0, #0]
 80183a2:	60c4      	str	r4, [r0, #12]
 80183a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80183a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80183ac:	b94c      	cbnz	r4, 80183c2 <__pow5mult+0x66>
 80183ae:	f240 2171 	movw	r1, #625	; 0x271
 80183b2:	4630      	mov	r0, r6
 80183b4:	f7ff ff12 	bl	80181dc <__i2b>
 80183b8:	2300      	movs	r3, #0
 80183ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80183be:	4604      	mov	r4, r0
 80183c0:	6003      	str	r3, [r0, #0]
 80183c2:	f04f 0900 	mov.w	r9, #0
 80183c6:	07eb      	lsls	r3, r5, #31
 80183c8:	d50a      	bpl.n	80183e0 <__pow5mult+0x84>
 80183ca:	4639      	mov	r1, r7
 80183cc:	4622      	mov	r2, r4
 80183ce:	4630      	mov	r0, r6
 80183d0:	f7ff ff1a 	bl	8018208 <__multiply>
 80183d4:	4639      	mov	r1, r7
 80183d6:	4680      	mov	r8, r0
 80183d8:	4630      	mov	r0, r6
 80183da:	f7ff fe47 	bl	801806c <_Bfree>
 80183de:	4647      	mov	r7, r8
 80183e0:	106d      	asrs	r5, r5, #1
 80183e2:	d00b      	beq.n	80183fc <__pow5mult+0xa0>
 80183e4:	6820      	ldr	r0, [r4, #0]
 80183e6:	b938      	cbnz	r0, 80183f8 <__pow5mult+0x9c>
 80183e8:	4622      	mov	r2, r4
 80183ea:	4621      	mov	r1, r4
 80183ec:	4630      	mov	r0, r6
 80183ee:	f7ff ff0b 	bl	8018208 <__multiply>
 80183f2:	6020      	str	r0, [r4, #0]
 80183f4:	f8c0 9000 	str.w	r9, [r0]
 80183f8:	4604      	mov	r4, r0
 80183fa:	e7e4      	b.n	80183c6 <__pow5mult+0x6a>
 80183fc:	4638      	mov	r0, r7
 80183fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018402:	bf00      	nop
 8018404:	08019d98 	.word	0x08019d98
 8018408:	08019bba 	.word	0x08019bba
 801840c:	08019c47 	.word	0x08019c47

08018410 <__lshift>:
 8018410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018414:	460c      	mov	r4, r1
 8018416:	6849      	ldr	r1, [r1, #4]
 8018418:	6923      	ldr	r3, [r4, #16]
 801841a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801841e:	68a3      	ldr	r3, [r4, #8]
 8018420:	4607      	mov	r7, r0
 8018422:	4691      	mov	r9, r2
 8018424:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018428:	f108 0601 	add.w	r6, r8, #1
 801842c:	42b3      	cmp	r3, r6
 801842e:	db0b      	blt.n	8018448 <__lshift+0x38>
 8018430:	4638      	mov	r0, r7
 8018432:	f7ff fddb 	bl	8017fec <_Balloc>
 8018436:	4605      	mov	r5, r0
 8018438:	b948      	cbnz	r0, 801844e <__lshift+0x3e>
 801843a:	4602      	mov	r2, r0
 801843c:	4b2a      	ldr	r3, [pc, #168]	; (80184e8 <__lshift+0xd8>)
 801843e:	482b      	ldr	r0, [pc, #172]	; (80184ec <__lshift+0xdc>)
 8018440:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018444:	f000 fae6 	bl	8018a14 <__assert_func>
 8018448:	3101      	adds	r1, #1
 801844a:	005b      	lsls	r3, r3, #1
 801844c:	e7ee      	b.n	801842c <__lshift+0x1c>
 801844e:	2300      	movs	r3, #0
 8018450:	f100 0114 	add.w	r1, r0, #20
 8018454:	f100 0210 	add.w	r2, r0, #16
 8018458:	4618      	mov	r0, r3
 801845a:	4553      	cmp	r3, sl
 801845c:	db37      	blt.n	80184ce <__lshift+0xbe>
 801845e:	6920      	ldr	r0, [r4, #16]
 8018460:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018464:	f104 0314 	add.w	r3, r4, #20
 8018468:	f019 091f 	ands.w	r9, r9, #31
 801846c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018470:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018474:	d02f      	beq.n	80184d6 <__lshift+0xc6>
 8018476:	f1c9 0e20 	rsb	lr, r9, #32
 801847a:	468a      	mov	sl, r1
 801847c:	f04f 0c00 	mov.w	ip, #0
 8018480:	681a      	ldr	r2, [r3, #0]
 8018482:	fa02 f209 	lsl.w	r2, r2, r9
 8018486:	ea42 020c 	orr.w	r2, r2, ip
 801848a:	f84a 2b04 	str.w	r2, [sl], #4
 801848e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018492:	4298      	cmp	r0, r3
 8018494:	fa22 fc0e 	lsr.w	ip, r2, lr
 8018498:	d8f2      	bhi.n	8018480 <__lshift+0x70>
 801849a:	1b03      	subs	r3, r0, r4
 801849c:	3b15      	subs	r3, #21
 801849e:	f023 0303 	bic.w	r3, r3, #3
 80184a2:	3304      	adds	r3, #4
 80184a4:	f104 0215 	add.w	r2, r4, #21
 80184a8:	4290      	cmp	r0, r2
 80184aa:	bf38      	it	cc
 80184ac:	2304      	movcc	r3, #4
 80184ae:	f841 c003 	str.w	ip, [r1, r3]
 80184b2:	f1bc 0f00 	cmp.w	ip, #0
 80184b6:	d001      	beq.n	80184bc <__lshift+0xac>
 80184b8:	f108 0602 	add.w	r6, r8, #2
 80184bc:	3e01      	subs	r6, #1
 80184be:	4638      	mov	r0, r7
 80184c0:	612e      	str	r6, [r5, #16]
 80184c2:	4621      	mov	r1, r4
 80184c4:	f7ff fdd2 	bl	801806c <_Bfree>
 80184c8:	4628      	mov	r0, r5
 80184ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80184d2:	3301      	adds	r3, #1
 80184d4:	e7c1      	b.n	801845a <__lshift+0x4a>
 80184d6:	3904      	subs	r1, #4
 80184d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80184dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80184e0:	4298      	cmp	r0, r3
 80184e2:	d8f9      	bhi.n	80184d8 <__lshift+0xc8>
 80184e4:	e7ea      	b.n	80184bc <__lshift+0xac>
 80184e6:	bf00      	nop
 80184e8:	08019c2c 	.word	0x08019c2c
 80184ec:	08019c47 	.word	0x08019c47

080184f0 <__mcmp>:
 80184f0:	b530      	push	{r4, r5, lr}
 80184f2:	6902      	ldr	r2, [r0, #16]
 80184f4:	690c      	ldr	r4, [r1, #16]
 80184f6:	1b12      	subs	r2, r2, r4
 80184f8:	d10e      	bne.n	8018518 <__mcmp+0x28>
 80184fa:	f100 0314 	add.w	r3, r0, #20
 80184fe:	3114      	adds	r1, #20
 8018500:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018504:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018508:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801850c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018510:	42a5      	cmp	r5, r4
 8018512:	d003      	beq.n	801851c <__mcmp+0x2c>
 8018514:	d305      	bcc.n	8018522 <__mcmp+0x32>
 8018516:	2201      	movs	r2, #1
 8018518:	4610      	mov	r0, r2
 801851a:	bd30      	pop	{r4, r5, pc}
 801851c:	4283      	cmp	r3, r0
 801851e:	d3f3      	bcc.n	8018508 <__mcmp+0x18>
 8018520:	e7fa      	b.n	8018518 <__mcmp+0x28>
 8018522:	f04f 32ff 	mov.w	r2, #4294967295
 8018526:	e7f7      	b.n	8018518 <__mcmp+0x28>

08018528 <__mdiff>:
 8018528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801852c:	460c      	mov	r4, r1
 801852e:	4606      	mov	r6, r0
 8018530:	4611      	mov	r1, r2
 8018532:	4620      	mov	r0, r4
 8018534:	4690      	mov	r8, r2
 8018536:	f7ff ffdb 	bl	80184f0 <__mcmp>
 801853a:	1e05      	subs	r5, r0, #0
 801853c:	d110      	bne.n	8018560 <__mdiff+0x38>
 801853e:	4629      	mov	r1, r5
 8018540:	4630      	mov	r0, r6
 8018542:	f7ff fd53 	bl	8017fec <_Balloc>
 8018546:	b930      	cbnz	r0, 8018556 <__mdiff+0x2e>
 8018548:	4b3a      	ldr	r3, [pc, #232]	; (8018634 <__mdiff+0x10c>)
 801854a:	4602      	mov	r2, r0
 801854c:	f240 2132 	movw	r1, #562	; 0x232
 8018550:	4839      	ldr	r0, [pc, #228]	; (8018638 <__mdiff+0x110>)
 8018552:	f000 fa5f 	bl	8018a14 <__assert_func>
 8018556:	2301      	movs	r3, #1
 8018558:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801855c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018560:	bfa4      	itt	ge
 8018562:	4643      	movge	r3, r8
 8018564:	46a0      	movge	r8, r4
 8018566:	4630      	mov	r0, r6
 8018568:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801856c:	bfa6      	itte	ge
 801856e:	461c      	movge	r4, r3
 8018570:	2500      	movge	r5, #0
 8018572:	2501      	movlt	r5, #1
 8018574:	f7ff fd3a 	bl	8017fec <_Balloc>
 8018578:	b920      	cbnz	r0, 8018584 <__mdiff+0x5c>
 801857a:	4b2e      	ldr	r3, [pc, #184]	; (8018634 <__mdiff+0x10c>)
 801857c:	4602      	mov	r2, r0
 801857e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018582:	e7e5      	b.n	8018550 <__mdiff+0x28>
 8018584:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018588:	6926      	ldr	r6, [r4, #16]
 801858a:	60c5      	str	r5, [r0, #12]
 801858c:	f104 0914 	add.w	r9, r4, #20
 8018590:	f108 0514 	add.w	r5, r8, #20
 8018594:	f100 0e14 	add.w	lr, r0, #20
 8018598:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801859c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80185a0:	f108 0210 	add.w	r2, r8, #16
 80185a4:	46f2      	mov	sl, lr
 80185a6:	2100      	movs	r1, #0
 80185a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80185ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80185b0:	fa1f f883 	uxth.w	r8, r3
 80185b4:	fa11 f18b 	uxtah	r1, r1, fp
 80185b8:	0c1b      	lsrs	r3, r3, #16
 80185ba:	eba1 0808 	sub.w	r8, r1, r8
 80185be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80185c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80185c6:	fa1f f888 	uxth.w	r8, r8
 80185ca:	1419      	asrs	r1, r3, #16
 80185cc:	454e      	cmp	r6, r9
 80185ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80185d2:	f84a 3b04 	str.w	r3, [sl], #4
 80185d6:	d8e7      	bhi.n	80185a8 <__mdiff+0x80>
 80185d8:	1b33      	subs	r3, r6, r4
 80185da:	3b15      	subs	r3, #21
 80185dc:	f023 0303 	bic.w	r3, r3, #3
 80185e0:	3304      	adds	r3, #4
 80185e2:	3415      	adds	r4, #21
 80185e4:	42a6      	cmp	r6, r4
 80185e6:	bf38      	it	cc
 80185e8:	2304      	movcc	r3, #4
 80185ea:	441d      	add	r5, r3
 80185ec:	4473      	add	r3, lr
 80185ee:	469e      	mov	lr, r3
 80185f0:	462e      	mov	r6, r5
 80185f2:	4566      	cmp	r6, ip
 80185f4:	d30e      	bcc.n	8018614 <__mdiff+0xec>
 80185f6:	f10c 0203 	add.w	r2, ip, #3
 80185fa:	1b52      	subs	r2, r2, r5
 80185fc:	f022 0203 	bic.w	r2, r2, #3
 8018600:	3d03      	subs	r5, #3
 8018602:	45ac      	cmp	ip, r5
 8018604:	bf38      	it	cc
 8018606:	2200      	movcc	r2, #0
 8018608:	441a      	add	r2, r3
 801860a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801860e:	b17b      	cbz	r3, 8018630 <__mdiff+0x108>
 8018610:	6107      	str	r7, [r0, #16]
 8018612:	e7a3      	b.n	801855c <__mdiff+0x34>
 8018614:	f856 8b04 	ldr.w	r8, [r6], #4
 8018618:	fa11 f288 	uxtah	r2, r1, r8
 801861c:	1414      	asrs	r4, r2, #16
 801861e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8018622:	b292      	uxth	r2, r2
 8018624:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8018628:	f84e 2b04 	str.w	r2, [lr], #4
 801862c:	1421      	asrs	r1, r4, #16
 801862e:	e7e0      	b.n	80185f2 <__mdiff+0xca>
 8018630:	3f01      	subs	r7, #1
 8018632:	e7ea      	b.n	801860a <__mdiff+0xe2>
 8018634:	08019c2c 	.word	0x08019c2c
 8018638:	08019c47 	.word	0x08019c47

0801863c <__d2b>:
 801863c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018640:	4689      	mov	r9, r1
 8018642:	2101      	movs	r1, #1
 8018644:	ec57 6b10 	vmov	r6, r7, d0
 8018648:	4690      	mov	r8, r2
 801864a:	f7ff fccf 	bl	8017fec <_Balloc>
 801864e:	4604      	mov	r4, r0
 8018650:	b930      	cbnz	r0, 8018660 <__d2b+0x24>
 8018652:	4602      	mov	r2, r0
 8018654:	4b25      	ldr	r3, [pc, #148]	; (80186ec <__d2b+0xb0>)
 8018656:	4826      	ldr	r0, [pc, #152]	; (80186f0 <__d2b+0xb4>)
 8018658:	f240 310a 	movw	r1, #778	; 0x30a
 801865c:	f000 f9da 	bl	8018a14 <__assert_func>
 8018660:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018664:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018668:	bb35      	cbnz	r5, 80186b8 <__d2b+0x7c>
 801866a:	2e00      	cmp	r6, #0
 801866c:	9301      	str	r3, [sp, #4]
 801866e:	d028      	beq.n	80186c2 <__d2b+0x86>
 8018670:	4668      	mov	r0, sp
 8018672:	9600      	str	r6, [sp, #0]
 8018674:	f7ff fd82 	bl	801817c <__lo0bits>
 8018678:	9900      	ldr	r1, [sp, #0]
 801867a:	b300      	cbz	r0, 80186be <__d2b+0x82>
 801867c:	9a01      	ldr	r2, [sp, #4]
 801867e:	f1c0 0320 	rsb	r3, r0, #32
 8018682:	fa02 f303 	lsl.w	r3, r2, r3
 8018686:	430b      	orrs	r3, r1
 8018688:	40c2      	lsrs	r2, r0
 801868a:	6163      	str	r3, [r4, #20]
 801868c:	9201      	str	r2, [sp, #4]
 801868e:	9b01      	ldr	r3, [sp, #4]
 8018690:	61a3      	str	r3, [r4, #24]
 8018692:	2b00      	cmp	r3, #0
 8018694:	bf14      	ite	ne
 8018696:	2202      	movne	r2, #2
 8018698:	2201      	moveq	r2, #1
 801869a:	6122      	str	r2, [r4, #16]
 801869c:	b1d5      	cbz	r5, 80186d4 <__d2b+0x98>
 801869e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80186a2:	4405      	add	r5, r0
 80186a4:	f8c9 5000 	str.w	r5, [r9]
 80186a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80186ac:	f8c8 0000 	str.w	r0, [r8]
 80186b0:	4620      	mov	r0, r4
 80186b2:	b003      	add	sp, #12
 80186b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80186b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80186bc:	e7d5      	b.n	801866a <__d2b+0x2e>
 80186be:	6161      	str	r1, [r4, #20]
 80186c0:	e7e5      	b.n	801868e <__d2b+0x52>
 80186c2:	a801      	add	r0, sp, #4
 80186c4:	f7ff fd5a 	bl	801817c <__lo0bits>
 80186c8:	9b01      	ldr	r3, [sp, #4]
 80186ca:	6163      	str	r3, [r4, #20]
 80186cc:	2201      	movs	r2, #1
 80186ce:	6122      	str	r2, [r4, #16]
 80186d0:	3020      	adds	r0, #32
 80186d2:	e7e3      	b.n	801869c <__d2b+0x60>
 80186d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80186d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80186dc:	f8c9 0000 	str.w	r0, [r9]
 80186e0:	6918      	ldr	r0, [r3, #16]
 80186e2:	f7ff fd2b 	bl	801813c <__hi0bits>
 80186e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80186ea:	e7df      	b.n	80186ac <__d2b+0x70>
 80186ec:	08019c2c 	.word	0x08019c2c
 80186f0:	08019c47 	.word	0x08019c47

080186f4 <_calloc_r>:
 80186f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80186f6:	fba1 2402 	umull	r2, r4, r1, r2
 80186fa:	b94c      	cbnz	r4, 8018710 <_calloc_r+0x1c>
 80186fc:	4611      	mov	r1, r2
 80186fe:	9201      	str	r2, [sp, #4]
 8018700:	f7fd fd78 	bl	80161f4 <_malloc_r>
 8018704:	9a01      	ldr	r2, [sp, #4]
 8018706:	4605      	mov	r5, r0
 8018708:	b930      	cbnz	r0, 8018718 <_calloc_r+0x24>
 801870a:	4628      	mov	r0, r5
 801870c:	b003      	add	sp, #12
 801870e:	bd30      	pop	{r4, r5, pc}
 8018710:	220c      	movs	r2, #12
 8018712:	6002      	str	r2, [r0, #0]
 8018714:	2500      	movs	r5, #0
 8018716:	e7f8      	b.n	801870a <_calloc_r+0x16>
 8018718:	4621      	mov	r1, r4
 801871a:	f7fd fcf7 	bl	801610c <memset>
 801871e:	e7f4      	b.n	801870a <_calloc_r+0x16>

08018720 <__sfputc_r>:
 8018720:	6893      	ldr	r3, [r2, #8]
 8018722:	3b01      	subs	r3, #1
 8018724:	2b00      	cmp	r3, #0
 8018726:	b410      	push	{r4}
 8018728:	6093      	str	r3, [r2, #8]
 801872a:	da08      	bge.n	801873e <__sfputc_r+0x1e>
 801872c:	6994      	ldr	r4, [r2, #24]
 801872e:	42a3      	cmp	r3, r4
 8018730:	db01      	blt.n	8018736 <__sfputc_r+0x16>
 8018732:	290a      	cmp	r1, #10
 8018734:	d103      	bne.n	801873e <__sfputc_r+0x1e>
 8018736:	f85d 4b04 	ldr.w	r4, [sp], #4
 801873a:	f7fe bb9d 	b.w	8016e78 <__swbuf_r>
 801873e:	6813      	ldr	r3, [r2, #0]
 8018740:	1c58      	adds	r0, r3, #1
 8018742:	6010      	str	r0, [r2, #0]
 8018744:	7019      	strb	r1, [r3, #0]
 8018746:	4608      	mov	r0, r1
 8018748:	f85d 4b04 	ldr.w	r4, [sp], #4
 801874c:	4770      	bx	lr

0801874e <__sfputs_r>:
 801874e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018750:	4606      	mov	r6, r0
 8018752:	460f      	mov	r7, r1
 8018754:	4614      	mov	r4, r2
 8018756:	18d5      	adds	r5, r2, r3
 8018758:	42ac      	cmp	r4, r5
 801875a:	d101      	bne.n	8018760 <__sfputs_r+0x12>
 801875c:	2000      	movs	r0, #0
 801875e:	e007      	b.n	8018770 <__sfputs_r+0x22>
 8018760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018764:	463a      	mov	r2, r7
 8018766:	4630      	mov	r0, r6
 8018768:	f7ff ffda 	bl	8018720 <__sfputc_r>
 801876c:	1c43      	adds	r3, r0, #1
 801876e:	d1f3      	bne.n	8018758 <__sfputs_r+0xa>
 8018770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018774 <_vfiprintf_r>:
 8018774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018778:	460d      	mov	r5, r1
 801877a:	b09d      	sub	sp, #116	; 0x74
 801877c:	4614      	mov	r4, r2
 801877e:	4698      	mov	r8, r3
 8018780:	4606      	mov	r6, r0
 8018782:	b118      	cbz	r0, 801878c <_vfiprintf_r+0x18>
 8018784:	6983      	ldr	r3, [r0, #24]
 8018786:	b90b      	cbnz	r3, 801878c <_vfiprintf_r+0x18>
 8018788:	f7fd fbe8 	bl	8015f5c <__sinit>
 801878c:	4b89      	ldr	r3, [pc, #548]	; (80189b4 <_vfiprintf_r+0x240>)
 801878e:	429d      	cmp	r5, r3
 8018790:	d11b      	bne.n	80187ca <_vfiprintf_r+0x56>
 8018792:	6875      	ldr	r5, [r6, #4]
 8018794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018796:	07d9      	lsls	r1, r3, #31
 8018798:	d405      	bmi.n	80187a6 <_vfiprintf_r+0x32>
 801879a:	89ab      	ldrh	r3, [r5, #12]
 801879c:	059a      	lsls	r2, r3, #22
 801879e:	d402      	bmi.n	80187a6 <_vfiprintf_r+0x32>
 80187a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80187a2:	f7ec ff57 	bl	8005654 <__retarget_lock_acquire_recursive>
 80187a6:	89ab      	ldrh	r3, [r5, #12]
 80187a8:	071b      	lsls	r3, r3, #28
 80187aa:	d501      	bpl.n	80187b0 <_vfiprintf_r+0x3c>
 80187ac:	692b      	ldr	r3, [r5, #16]
 80187ae:	b9eb      	cbnz	r3, 80187ec <_vfiprintf_r+0x78>
 80187b0:	4629      	mov	r1, r5
 80187b2:	4630      	mov	r0, r6
 80187b4:	f7fe fbc4 	bl	8016f40 <__swsetup_r>
 80187b8:	b1c0      	cbz	r0, 80187ec <_vfiprintf_r+0x78>
 80187ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80187bc:	07dc      	lsls	r4, r3, #31
 80187be:	d50e      	bpl.n	80187de <_vfiprintf_r+0x6a>
 80187c0:	f04f 30ff 	mov.w	r0, #4294967295
 80187c4:	b01d      	add	sp, #116	; 0x74
 80187c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187ca:	4b7b      	ldr	r3, [pc, #492]	; (80189b8 <_vfiprintf_r+0x244>)
 80187cc:	429d      	cmp	r5, r3
 80187ce:	d101      	bne.n	80187d4 <_vfiprintf_r+0x60>
 80187d0:	68b5      	ldr	r5, [r6, #8]
 80187d2:	e7df      	b.n	8018794 <_vfiprintf_r+0x20>
 80187d4:	4b79      	ldr	r3, [pc, #484]	; (80189bc <_vfiprintf_r+0x248>)
 80187d6:	429d      	cmp	r5, r3
 80187d8:	bf08      	it	eq
 80187da:	68f5      	ldreq	r5, [r6, #12]
 80187dc:	e7da      	b.n	8018794 <_vfiprintf_r+0x20>
 80187de:	89ab      	ldrh	r3, [r5, #12]
 80187e0:	0598      	lsls	r0, r3, #22
 80187e2:	d4ed      	bmi.n	80187c0 <_vfiprintf_r+0x4c>
 80187e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80187e6:	f7ec ff49 	bl	800567c <__retarget_lock_release_recursive>
 80187ea:	e7e9      	b.n	80187c0 <_vfiprintf_r+0x4c>
 80187ec:	2300      	movs	r3, #0
 80187ee:	9309      	str	r3, [sp, #36]	; 0x24
 80187f0:	2320      	movs	r3, #32
 80187f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80187f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80187fa:	2330      	movs	r3, #48	; 0x30
 80187fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80189c0 <_vfiprintf_r+0x24c>
 8018800:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018804:	f04f 0901 	mov.w	r9, #1
 8018808:	4623      	mov	r3, r4
 801880a:	469a      	mov	sl, r3
 801880c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018810:	b10a      	cbz	r2, 8018816 <_vfiprintf_r+0xa2>
 8018812:	2a25      	cmp	r2, #37	; 0x25
 8018814:	d1f9      	bne.n	801880a <_vfiprintf_r+0x96>
 8018816:	ebba 0b04 	subs.w	fp, sl, r4
 801881a:	d00b      	beq.n	8018834 <_vfiprintf_r+0xc0>
 801881c:	465b      	mov	r3, fp
 801881e:	4622      	mov	r2, r4
 8018820:	4629      	mov	r1, r5
 8018822:	4630      	mov	r0, r6
 8018824:	f7ff ff93 	bl	801874e <__sfputs_r>
 8018828:	3001      	adds	r0, #1
 801882a:	f000 80aa 	beq.w	8018982 <_vfiprintf_r+0x20e>
 801882e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018830:	445a      	add	r2, fp
 8018832:	9209      	str	r2, [sp, #36]	; 0x24
 8018834:	f89a 3000 	ldrb.w	r3, [sl]
 8018838:	2b00      	cmp	r3, #0
 801883a:	f000 80a2 	beq.w	8018982 <_vfiprintf_r+0x20e>
 801883e:	2300      	movs	r3, #0
 8018840:	f04f 32ff 	mov.w	r2, #4294967295
 8018844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018848:	f10a 0a01 	add.w	sl, sl, #1
 801884c:	9304      	str	r3, [sp, #16]
 801884e:	9307      	str	r3, [sp, #28]
 8018850:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018854:	931a      	str	r3, [sp, #104]	; 0x68
 8018856:	4654      	mov	r4, sl
 8018858:	2205      	movs	r2, #5
 801885a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801885e:	4858      	ldr	r0, [pc, #352]	; (80189c0 <_vfiprintf_r+0x24c>)
 8018860:	f7e7 fcde 	bl	8000220 <memchr>
 8018864:	9a04      	ldr	r2, [sp, #16]
 8018866:	b9d8      	cbnz	r0, 80188a0 <_vfiprintf_r+0x12c>
 8018868:	06d1      	lsls	r1, r2, #27
 801886a:	bf44      	itt	mi
 801886c:	2320      	movmi	r3, #32
 801886e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018872:	0713      	lsls	r3, r2, #28
 8018874:	bf44      	itt	mi
 8018876:	232b      	movmi	r3, #43	; 0x2b
 8018878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801887c:	f89a 3000 	ldrb.w	r3, [sl]
 8018880:	2b2a      	cmp	r3, #42	; 0x2a
 8018882:	d015      	beq.n	80188b0 <_vfiprintf_r+0x13c>
 8018884:	9a07      	ldr	r2, [sp, #28]
 8018886:	4654      	mov	r4, sl
 8018888:	2000      	movs	r0, #0
 801888a:	f04f 0c0a 	mov.w	ip, #10
 801888e:	4621      	mov	r1, r4
 8018890:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018894:	3b30      	subs	r3, #48	; 0x30
 8018896:	2b09      	cmp	r3, #9
 8018898:	d94e      	bls.n	8018938 <_vfiprintf_r+0x1c4>
 801889a:	b1b0      	cbz	r0, 80188ca <_vfiprintf_r+0x156>
 801889c:	9207      	str	r2, [sp, #28]
 801889e:	e014      	b.n	80188ca <_vfiprintf_r+0x156>
 80188a0:	eba0 0308 	sub.w	r3, r0, r8
 80188a4:	fa09 f303 	lsl.w	r3, r9, r3
 80188a8:	4313      	orrs	r3, r2
 80188aa:	9304      	str	r3, [sp, #16]
 80188ac:	46a2      	mov	sl, r4
 80188ae:	e7d2      	b.n	8018856 <_vfiprintf_r+0xe2>
 80188b0:	9b03      	ldr	r3, [sp, #12]
 80188b2:	1d19      	adds	r1, r3, #4
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	9103      	str	r1, [sp, #12]
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	bfbb      	ittet	lt
 80188bc:	425b      	neglt	r3, r3
 80188be:	f042 0202 	orrlt.w	r2, r2, #2
 80188c2:	9307      	strge	r3, [sp, #28]
 80188c4:	9307      	strlt	r3, [sp, #28]
 80188c6:	bfb8      	it	lt
 80188c8:	9204      	strlt	r2, [sp, #16]
 80188ca:	7823      	ldrb	r3, [r4, #0]
 80188cc:	2b2e      	cmp	r3, #46	; 0x2e
 80188ce:	d10c      	bne.n	80188ea <_vfiprintf_r+0x176>
 80188d0:	7863      	ldrb	r3, [r4, #1]
 80188d2:	2b2a      	cmp	r3, #42	; 0x2a
 80188d4:	d135      	bne.n	8018942 <_vfiprintf_r+0x1ce>
 80188d6:	9b03      	ldr	r3, [sp, #12]
 80188d8:	1d1a      	adds	r2, r3, #4
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	9203      	str	r2, [sp, #12]
 80188de:	2b00      	cmp	r3, #0
 80188e0:	bfb8      	it	lt
 80188e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80188e6:	3402      	adds	r4, #2
 80188e8:	9305      	str	r3, [sp, #20]
 80188ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80189d0 <_vfiprintf_r+0x25c>
 80188ee:	7821      	ldrb	r1, [r4, #0]
 80188f0:	2203      	movs	r2, #3
 80188f2:	4650      	mov	r0, sl
 80188f4:	f7e7 fc94 	bl	8000220 <memchr>
 80188f8:	b140      	cbz	r0, 801890c <_vfiprintf_r+0x198>
 80188fa:	2340      	movs	r3, #64	; 0x40
 80188fc:	eba0 000a 	sub.w	r0, r0, sl
 8018900:	fa03 f000 	lsl.w	r0, r3, r0
 8018904:	9b04      	ldr	r3, [sp, #16]
 8018906:	4303      	orrs	r3, r0
 8018908:	3401      	adds	r4, #1
 801890a:	9304      	str	r3, [sp, #16]
 801890c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018910:	482c      	ldr	r0, [pc, #176]	; (80189c4 <_vfiprintf_r+0x250>)
 8018912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018916:	2206      	movs	r2, #6
 8018918:	f7e7 fc82 	bl	8000220 <memchr>
 801891c:	2800      	cmp	r0, #0
 801891e:	d03f      	beq.n	80189a0 <_vfiprintf_r+0x22c>
 8018920:	4b29      	ldr	r3, [pc, #164]	; (80189c8 <_vfiprintf_r+0x254>)
 8018922:	bb1b      	cbnz	r3, 801896c <_vfiprintf_r+0x1f8>
 8018924:	9b03      	ldr	r3, [sp, #12]
 8018926:	3307      	adds	r3, #7
 8018928:	f023 0307 	bic.w	r3, r3, #7
 801892c:	3308      	adds	r3, #8
 801892e:	9303      	str	r3, [sp, #12]
 8018930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018932:	443b      	add	r3, r7
 8018934:	9309      	str	r3, [sp, #36]	; 0x24
 8018936:	e767      	b.n	8018808 <_vfiprintf_r+0x94>
 8018938:	fb0c 3202 	mla	r2, ip, r2, r3
 801893c:	460c      	mov	r4, r1
 801893e:	2001      	movs	r0, #1
 8018940:	e7a5      	b.n	801888e <_vfiprintf_r+0x11a>
 8018942:	2300      	movs	r3, #0
 8018944:	3401      	adds	r4, #1
 8018946:	9305      	str	r3, [sp, #20]
 8018948:	4619      	mov	r1, r3
 801894a:	f04f 0c0a 	mov.w	ip, #10
 801894e:	4620      	mov	r0, r4
 8018950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018954:	3a30      	subs	r2, #48	; 0x30
 8018956:	2a09      	cmp	r2, #9
 8018958:	d903      	bls.n	8018962 <_vfiprintf_r+0x1ee>
 801895a:	2b00      	cmp	r3, #0
 801895c:	d0c5      	beq.n	80188ea <_vfiprintf_r+0x176>
 801895e:	9105      	str	r1, [sp, #20]
 8018960:	e7c3      	b.n	80188ea <_vfiprintf_r+0x176>
 8018962:	fb0c 2101 	mla	r1, ip, r1, r2
 8018966:	4604      	mov	r4, r0
 8018968:	2301      	movs	r3, #1
 801896a:	e7f0      	b.n	801894e <_vfiprintf_r+0x1da>
 801896c:	ab03      	add	r3, sp, #12
 801896e:	9300      	str	r3, [sp, #0]
 8018970:	462a      	mov	r2, r5
 8018972:	4b16      	ldr	r3, [pc, #88]	; (80189cc <_vfiprintf_r+0x258>)
 8018974:	a904      	add	r1, sp, #16
 8018976:	4630      	mov	r0, r6
 8018978:	f7fd fd50 	bl	801641c <_printf_float>
 801897c:	4607      	mov	r7, r0
 801897e:	1c78      	adds	r0, r7, #1
 8018980:	d1d6      	bne.n	8018930 <_vfiprintf_r+0x1bc>
 8018982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018984:	07d9      	lsls	r1, r3, #31
 8018986:	d405      	bmi.n	8018994 <_vfiprintf_r+0x220>
 8018988:	89ab      	ldrh	r3, [r5, #12]
 801898a:	059a      	lsls	r2, r3, #22
 801898c:	d402      	bmi.n	8018994 <_vfiprintf_r+0x220>
 801898e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018990:	f7ec fe74 	bl	800567c <__retarget_lock_release_recursive>
 8018994:	89ab      	ldrh	r3, [r5, #12]
 8018996:	065b      	lsls	r3, r3, #25
 8018998:	f53f af12 	bmi.w	80187c0 <_vfiprintf_r+0x4c>
 801899c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801899e:	e711      	b.n	80187c4 <_vfiprintf_r+0x50>
 80189a0:	ab03      	add	r3, sp, #12
 80189a2:	9300      	str	r3, [sp, #0]
 80189a4:	462a      	mov	r2, r5
 80189a6:	4b09      	ldr	r3, [pc, #36]	; (80189cc <_vfiprintf_r+0x258>)
 80189a8:	a904      	add	r1, sp, #16
 80189aa:	4630      	mov	r0, r6
 80189ac:	f7fd ffda 	bl	8016964 <_printf_i>
 80189b0:	e7e4      	b.n	801897c <_vfiprintf_r+0x208>
 80189b2:	bf00      	nop
 80189b4:	08019a34 	.word	0x08019a34
 80189b8:	08019a54 	.word	0x08019a54
 80189bc:	08019a14 	.word	0x08019a14
 80189c0:	08019da4 	.word	0x08019da4
 80189c4:	08019dae 	.word	0x08019dae
 80189c8:	0801641d 	.word	0x0801641d
 80189cc:	0801874f 	.word	0x0801874f
 80189d0:	08019daa 	.word	0x08019daa

080189d4 <_read_r>:
 80189d4:	b538      	push	{r3, r4, r5, lr}
 80189d6:	4d07      	ldr	r5, [pc, #28]	; (80189f4 <_read_r+0x20>)
 80189d8:	4604      	mov	r4, r0
 80189da:	4608      	mov	r0, r1
 80189dc:	4611      	mov	r1, r2
 80189de:	2200      	movs	r2, #0
 80189e0:	602a      	str	r2, [r5, #0]
 80189e2:	461a      	mov	r2, r3
 80189e4:	f7ec f984 	bl	8004cf0 <_read>
 80189e8:	1c43      	adds	r3, r0, #1
 80189ea:	d102      	bne.n	80189f2 <_read_r+0x1e>
 80189ec:	682b      	ldr	r3, [r5, #0]
 80189ee:	b103      	cbz	r3, 80189f2 <_read_r+0x1e>
 80189f0:	6023      	str	r3, [r4, #0]
 80189f2:	bd38      	pop	{r3, r4, r5, pc}
 80189f4:	2000710c 	.word	0x2000710c

080189f8 <__ascii_wctomb>:
 80189f8:	b149      	cbz	r1, 8018a0e <__ascii_wctomb+0x16>
 80189fa:	2aff      	cmp	r2, #255	; 0xff
 80189fc:	bf85      	ittet	hi
 80189fe:	238a      	movhi	r3, #138	; 0x8a
 8018a00:	6003      	strhi	r3, [r0, #0]
 8018a02:	700a      	strbls	r2, [r1, #0]
 8018a04:	f04f 30ff 	movhi.w	r0, #4294967295
 8018a08:	bf98      	it	ls
 8018a0a:	2001      	movls	r0, #1
 8018a0c:	4770      	bx	lr
 8018a0e:	4608      	mov	r0, r1
 8018a10:	4770      	bx	lr
	...

08018a14 <__assert_func>:
 8018a14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018a16:	4614      	mov	r4, r2
 8018a18:	461a      	mov	r2, r3
 8018a1a:	4b09      	ldr	r3, [pc, #36]	; (8018a40 <__assert_func+0x2c>)
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	4605      	mov	r5, r0
 8018a20:	68d8      	ldr	r0, [r3, #12]
 8018a22:	b14c      	cbz	r4, 8018a38 <__assert_func+0x24>
 8018a24:	4b07      	ldr	r3, [pc, #28]	; (8018a44 <__assert_func+0x30>)
 8018a26:	9100      	str	r1, [sp, #0]
 8018a28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018a2c:	4906      	ldr	r1, [pc, #24]	; (8018a48 <__assert_func+0x34>)
 8018a2e:	462b      	mov	r3, r5
 8018a30:	f000 f80e 	bl	8018a50 <fiprintf>
 8018a34:	f000 f840 	bl	8018ab8 <abort>
 8018a38:	4b04      	ldr	r3, [pc, #16]	; (8018a4c <__assert_func+0x38>)
 8018a3a:	461c      	mov	r4, r3
 8018a3c:	e7f3      	b.n	8018a26 <__assert_func+0x12>
 8018a3e:	bf00      	nop
 8018a40:	2000013c 	.word	0x2000013c
 8018a44:	08019db5 	.word	0x08019db5
 8018a48:	08019dc2 	.word	0x08019dc2
 8018a4c:	08019df0 	.word	0x08019df0

08018a50 <fiprintf>:
 8018a50:	b40e      	push	{r1, r2, r3}
 8018a52:	b503      	push	{r0, r1, lr}
 8018a54:	4601      	mov	r1, r0
 8018a56:	ab03      	add	r3, sp, #12
 8018a58:	4805      	ldr	r0, [pc, #20]	; (8018a70 <fiprintf+0x20>)
 8018a5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a5e:	6800      	ldr	r0, [r0, #0]
 8018a60:	9301      	str	r3, [sp, #4]
 8018a62:	f7ff fe87 	bl	8018774 <_vfiprintf_r>
 8018a66:	b002      	add	sp, #8
 8018a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8018a6c:	b003      	add	sp, #12
 8018a6e:	4770      	bx	lr
 8018a70:	2000013c 	.word	0x2000013c

08018a74 <_fstat_r>:
 8018a74:	b538      	push	{r3, r4, r5, lr}
 8018a76:	4d07      	ldr	r5, [pc, #28]	; (8018a94 <_fstat_r+0x20>)
 8018a78:	2300      	movs	r3, #0
 8018a7a:	4604      	mov	r4, r0
 8018a7c:	4608      	mov	r0, r1
 8018a7e:	4611      	mov	r1, r2
 8018a80:	602b      	str	r3, [r5, #0]
 8018a82:	f7ec f95e 	bl	8004d42 <_fstat>
 8018a86:	1c43      	adds	r3, r0, #1
 8018a88:	d102      	bne.n	8018a90 <_fstat_r+0x1c>
 8018a8a:	682b      	ldr	r3, [r5, #0]
 8018a8c:	b103      	cbz	r3, 8018a90 <_fstat_r+0x1c>
 8018a8e:	6023      	str	r3, [r4, #0]
 8018a90:	bd38      	pop	{r3, r4, r5, pc}
 8018a92:	bf00      	nop
 8018a94:	2000710c 	.word	0x2000710c

08018a98 <_isatty_r>:
 8018a98:	b538      	push	{r3, r4, r5, lr}
 8018a9a:	4d06      	ldr	r5, [pc, #24]	; (8018ab4 <_isatty_r+0x1c>)
 8018a9c:	2300      	movs	r3, #0
 8018a9e:	4604      	mov	r4, r0
 8018aa0:	4608      	mov	r0, r1
 8018aa2:	602b      	str	r3, [r5, #0]
 8018aa4:	f7ec f95d 	bl	8004d62 <_isatty>
 8018aa8:	1c43      	adds	r3, r0, #1
 8018aaa:	d102      	bne.n	8018ab2 <_isatty_r+0x1a>
 8018aac:	682b      	ldr	r3, [r5, #0]
 8018aae:	b103      	cbz	r3, 8018ab2 <_isatty_r+0x1a>
 8018ab0:	6023      	str	r3, [r4, #0]
 8018ab2:	bd38      	pop	{r3, r4, r5, pc}
 8018ab4:	2000710c 	.word	0x2000710c

08018ab8 <abort>:
 8018ab8:	b508      	push	{r3, lr}
 8018aba:	2006      	movs	r0, #6
 8018abc:	f000 f82c 	bl	8018b18 <raise>
 8018ac0:	2001      	movs	r0, #1
 8018ac2:	f7ec f90b 	bl	8004cdc <_exit>

08018ac6 <_raise_r>:
 8018ac6:	291f      	cmp	r1, #31
 8018ac8:	b538      	push	{r3, r4, r5, lr}
 8018aca:	4604      	mov	r4, r0
 8018acc:	460d      	mov	r5, r1
 8018ace:	d904      	bls.n	8018ada <_raise_r+0x14>
 8018ad0:	2316      	movs	r3, #22
 8018ad2:	6003      	str	r3, [r0, #0]
 8018ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8018ad8:	bd38      	pop	{r3, r4, r5, pc}
 8018ada:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018adc:	b112      	cbz	r2, 8018ae4 <_raise_r+0x1e>
 8018ade:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018ae2:	b94b      	cbnz	r3, 8018af8 <_raise_r+0x32>
 8018ae4:	4620      	mov	r0, r4
 8018ae6:	f000 f831 	bl	8018b4c <_getpid_r>
 8018aea:	462a      	mov	r2, r5
 8018aec:	4601      	mov	r1, r0
 8018aee:	4620      	mov	r0, r4
 8018af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018af4:	f000 b818 	b.w	8018b28 <_kill_r>
 8018af8:	2b01      	cmp	r3, #1
 8018afa:	d00a      	beq.n	8018b12 <_raise_r+0x4c>
 8018afc:	1c59      	adds	r1, r3, #1
 8018afe:	d103      	bne.n	8018b08 <_raise_r+0x42>
 8018b00:	2316      	movs	r3, #22
 8018b02:	6003      	str	r3, [r0, #0]
 8018b04:	2001      	movs	r0, #1
 8018b06:	e7e7      	b.n	8018ad8 <_raise_r+0x12>
 8018b08:	2400      	movs	r4, #0
 8018b0a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018b0e:	4628      	mov	r0, r5
 8018b10:	4798      	blx	r3
 8018b12:	2000      	movs	r0, #0
 8018b14:	e7e0      	b.n	8018ad8 <_raise_r+0x12>
	...

08018b18 <raise>:
 8018b18:	4b02      	ldr	r3, [pc, #8]	; (8018b24 <raise+0xc>)
 8018b1a:	4601      	mov	r1, r0
 8018b1c:	6818      	ldr	r0, [r3, #0]
 8018b1e:	f7ff bfd2 	b.w	8018ac6 <_raise_r>
 8018b22:	bf00      	nop
 8018b24:	2000013c 	.word	0x2000013c

08018b28 <_kill_r>:
 8018b28:	b538      	push	{r3, r4, r5, lr}
 8018b2a:	4d07      	ldr	r5, [pc, #28]	; (8018b48 <_kill_r+0x20>)
 8018b2c:	2300      	movs	r3, #0
 8018b2e:	4604      	mov	r4, r0
 8018b30:	4608      	mov	r0, r1
 8018b32:	4611      	mov	r1, r2
 8018b34:	602b      	str	r3, [r5, #0]
 8018b36:	f7ec f8c1 	bl	8004cbc <_kill>
 8018b3a:	1c43      	adds	r3, r0, #1
 8018b3c:	d102      	bne.n	8018b44 <_kill_r+0x1c>
 8018b3e:	682b      	ldr	r3, [r5, #0]
 8018b40:	b103      	cbz	r3, 8018b44 <_kill_r+0x1c>
 8018b42:	6023      	str	r3, [r4, #0]
 8018b44:	bd38      	pop	{r3, r4, r5, pc}
 8018b46:	bf00      	nop
 8018b48:	2000710c 	.word	0x2000710c

08018b4c <_getpid_r>:
 8018b4c:	f7ec b8ae 	b.w	8004cac <_getpid>

08018b50 <sqrt>:
 8018b50:	b538      	push	{r3, r4, r5, lr}
 8018b52:	ed2d 8b02 	vpush	{d8}
 8018b56:	ec55 4b10 	vmov	r4, r5, d0
 8018b5a:	f000 f87d 	bl	8018c58 <__ieee754_sqrt>
 8018b5e:	4622      	mov	r2, r4
 8018b60:	462b      	mov	r3, r5
 8018b62:	4620      	mov	r0, r4
 8018b64:	4629      	mov	r1, r5
 8018b66:	eeb0 8a40 	vmov.f32	s16, s0
 8018b6a:	eef0 8a60 	vmov.f32	s17, s1
 8018b6e:	f7e7 fffd 	bl	8000b6c <__aeabi_dcmpun>
 8018b72:	b990      	cbnz	r0, 8018b9a <sqrt+0x4a>
 8018b74:	2200      	movs	r2, #0
 8018b76:	2300      	movs	r3, #0
 8018b78:	4620      	mov	r0, r4
 8018b7a:	4629      	mov	r1, r5
 8018b7c:	f7e7 ffce 	bl	8000b1c <__aeabi_dcmplt>
 8018b80:	b158      	cbz	r0, 8018b9a <sqrt+0x4a>
 8018b82:	f7fd f98d 	bl	8015ea0 <__errno>
 8018b86:	2321      	movs	r3, #33	; 0x21
 8018b88:	6003      	str	r3, [r0, #0]
 8018b8a:	2200      	movs	r2, #0
 8018b8c:	2300      	movs	r3, #0
 8018b8e:	4610      	mov	r0, r2
 8018b90:	4619      	mov	r1, r3
 8018b92:	f7e7 fe7b 	bl	800088c <__aeabi_ddiv>
 8018b96:	ec41 0b18 	vmov	d8, r0, r1
 8018b9a:	eeb0 0a48 	vmov.f32	s0, s16
 8018b9e:	eef0 0a68 	vmov.f32	s1, s17
 8018ba2:	ecbd 8b02 	vpop	{d8}
 8018ba6:	bd38      	pop	{r3, r4, r5, pc}

08018ba8 <powf>:
 8018ba8:	b508      	push	{r3, lr}
 8018baa:	ed2d 8b04 	vpush	{d8-d9}
 8018bae:	eeb0 8a60 	vmov.f32	s16, s1
 8018bb2:	eeb0 9a40 	vmov.f32	s18, s0
 8018bb6:	f000 f901 	bl	8018dbc <__ieee754_powf>
 8018bba:	eeb4 8a48 	vcmp.f32	s16, s16
 8018bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bc2:	eef0 8a40 	vmov.f32	s17, s0
 8018bc6:	d63e      	bvs.n	8018c46 <powf+0x9e>
 8018bc8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8018bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bd0:	d112      	bne.n	8018bf8 <powf+0x50>
 8018bd2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bda:	d039      	beq.n	8018c50 <powf+0xa8>
 8018bdc:	eeb0 0a48 	vmov.f32	s0, s16
 8018be0:	f000 fbe7 	bl	80193b2 <finitef>
 8018be4:	b378      	cbz	r0, 8018c46 <powf+0x9e>
 8018be6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bee:	d52a      	bpl.n	8018c46 <powf+0x9e>
 8018bf0:	f7fd f956 	bl	8015ea0 <__errno>
 8018bf4:	2322      	movs	r3, #34	; 0x22
 8018bf6:	e014      	b.n	8018c22 <powf+0x7a>
 8018bf8:	f000 fbdb 	bl	80193b2 <finitef>
 8018bfc:	b998      	cbnz	r0, 8018c26 <powf+0x7e>
 8018bfe:	eeb0 0a49 	vmov.f32	s0, s18
 8018c02:	f000 fbd6 	bl	80193b2 <finitef>
 8018c06:	b170      	cbz	r0, 8018c26 <powf+0x7e>
 8018c08:	eeb0 0a48 	vmov.f32	s0, s16
 8018c0c:	f000 fbd1 	bl	80193b2 <finitef>
 8018c10:	b148      	cbz	r0, 8018c26 <powf+0x7e>
 8018c12:	eef4 8a68 	vcmp.f32	s17, s17
 8018c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c1a:	d7e9      	bvc.n	8018bf0 <powf+0x48>
 8018c1c:	f7fd f940 	bl	8015ea0 <__errno>
 8018c20:	2321      	movs	r3, #33	; 0x21
 8018c22:	6003      	str	r3, [r0, #0]
 8018c24:	e00f      	b.n	8018c46 <powf+0x9e>
 8018c26:	eef5 8a40 	vcmp.f32	s17, #0.0
 8018c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c2e:	d10a      	bne.n	8018c46 <powf+0x9e>
 8018c30:	eeb0 0a49 	vmov.f32	s0, s18
 8018c34:	f000 fbbd 	bl	80193b2 <finitef>
 8018c38:	b128      	cbz	r0, 8018c46 <powf+0x9e>
 8018c3a:	eeb0 0a48 	vmov.f32	s0, s16
 8018c3e:	f000 fbb8 	bl	80193b2 <finitef>
 8018c42:	2800      	cmp	r0, #0
 8018c44:	d1d4      	bne.n	8018bf0 <powf+0x48>
 8018c46:	eeb0 0a68 	vmov.f32	s0, s17
 8018c4a:	ecbd 8b04 	vpop	{d8-d9}
 8018c4e:	bd08      	pop	{r3, pc}
 8018c50:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8018c54:	e7f7      	b.n	8018c46 <powf+0x9e>
	...

08018c58 <__ieee754_sqrt>:
 8018c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c5c:	ec55 4b10 	vmov	r4, r5, d0
 8018c60:	4e55      	ldr	r6, [pc, #340]	; (8018db8 <__ieee754_sqrt+0x160>)
 8018c62:	43ae      	bics	r6, r5
 8018c64:	ee10 0a10 	vmov	r0, s0
 8018c68:	ee10 3a10 	vmov	r3, s0
 8018c6c:	462a      	mov	r2, r5
 8018c6e:	4629      	mov	r1, r5
 8018c70:	d110      	bne.n	8018c94 <__ieee754_sqrt+0x3c>
 8018c72:	ee10 2a10 	vmov	r2, s0
 8018c76:	462b      	mov	r3, r5
 8018c78:	f7e7 fcde 	bl	8000638 <__aeabi_dmul>
 8018c7c:	4602      	mov	r2, r0
 8018c7e:	460b      	mov	r3, r1
 8018c80:	4620      	mov	r0, r4
 8018c82:	4629      	mov	r1, r5
 8018c84:	f7e7 fb22 	bl	80002cc <__adddf3>
 8018c88:	4604      	mov	r4, r0
 8018c8a:	460d      	mov	r5, r1
 8018c8c:	ec45 4b10 	vmov	d0, r4, r5
 8018c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c94:	2d00      	cmp	r5, #0
 8018c96:	dc10      	bgt.n	8018cba <__ieee754_sqrt+0x62>
 8018c98:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018c9c:	4330      	orrs	r0, r6
 8018c9e:	d0f5      	beq.n	8018c8c <__ieee754_sqrt+0x34>
 8018ca0:	b15d      	cbz	r5, 8018cba <__ieee754_sqrt+0x62>
 8018ca2:	ee10 2a10 	vmov	r2, s0
 8018ca6:	462b      	mov	r3, r5
 8018ca8:	ee10 0a10 	vmov	r0, s0
 8018cac:	f7e7 fb0c 	bl	80002c8 <__aeabi_dsub>
 8018cb0:	4602      	mov	r2, r0
 8018cb2:	460b      	mov	r3, r1
 8018cb4:	f7e7 fdea 	bl	800088c <__aeabi_ddiv>
 8018cb8:	e7e6      	b.n	8018c88 <__ieee754_sqrt+0x30>
 8018cba:	1512      	asrs	r2, r2, #20
 8018cbc:	d074      	beq.n	8018da8 <__ieee754_sqrt+0x150>
 8018cbe:	07d4      	lsls	r4, r2, #31
 8018cc0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018cc4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8018cc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018ccc:	bf5e      	ittt	pl
 8018cce:	0fda      	lsrpl	r2, r3, #31
 8018cd0:	005b      	lslpl	r3, r3, #1
 8018cd2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8018cd6:	2400      	movs	r4, #0
 8018cd8:	0fda      	lsrs	r2, r3, #31
 8018cda:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8018cde:	107f      	asrs	r7, r7, #1
 8018ce0:	005b      	lsls	r3, r3, #1
 8018ce2:	2516      	movs	r5, #22
 8018ce4:	4620      	mov	r0, r4
 8018ce6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8018cea:	1886      	adds	r6, r0, r2
 8018cec:	428e      	cmp	r6, r1
 8018cee:	bfde      	ittt	le
 8018cf0:	1b89      	suble	r1, r1, r6
 8018cf2:	18b0      	addle	r0, r6, r2
 8018cf4:	18a4      	addle	r4, r4, r2
 8018cf6:	0049      	lsls	r1, r1, #1
 8018cf8:	3d01      	subs	r5, #1
 8018cfa:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8018cfe:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8018d02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018d06:	d1f0      	bne.n	8018cea <__ieee754_sqrt+0x92>
 8018d08:	462a      	mov	r2, r5
 8018d0a:	f04f 0e20 	mov.w	lr, #32
 8018d0e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8018d12:	4281      	cmp	r1, r0
 8018d14:	eb06 0c05 	add.w	ip, r6, r5
 8018d18:	dc02      	bgt.n	8018d20 <__ieee754_sqrt+0xc8>
 8018d1a:	d113      	bne.n	8018d44 <__ieee754_sqrt+0xec>
 8018d1c:	459c      	cmp	ip, r3
 8018d1e:	d811      	bhi.n	8018d44 <__ieee754_sqrt+0xec>
 8018d20:	f1bc 0f00 	cmp.w	ip, #0
 8018d24:	eb0c 0506 	add.w	r5, ip, r6
 8018d28:	da43      	bge.n	8018db2 <__ieee754_sqrt+0x15a>
 8018d2a:	2d00      	cmp	r5, #0
 8018d2c:	db41      	blt.n	8018db2 <__ieee754_sqrt+0x15a>
 8018d2e:	f100 0801 	add.w	r8, r0, #1
 8018d32:	1a09      	subs	r1, r1, r0
 8018d34:	459c      	cmp	ip, r3
 8018d36:	bf88      	it	hi
 8018d38:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8018d3c:	eba3 030c 	sub.w	r3, r3, ip
 8018d40:	4432      	add	r2, r6
 8018d42:	4640      	mov	r0, r8
 8018d44:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8018d48:	f1be 0e01 	subs.w	lr, lr, #1
 8018d4c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8018d50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018d54:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8018d58:	d1db      	bne.n	8018d12 <__ieee754_sqrt+0xba>
 8018d5a:	430b      	orrs	r3, r1
 8018d5c:	d006      	beq.n	8018d6c <__ieee754_sqrt+0x114>
 8018d5e:	1c50      	adds	r0, r2, #1
 8018d60:	bf13      	iteet	ne
 8018d62:	3201      	addne	r2, #1
 8018d64:	3401      	addeq	r4, #1
 8018d66:	4672      	moveq	r2, lr
 8018d68:	f022 0201 	bicne.w	r2, r2, #1
 8018d6c:	1063      	asrs	r3, r4, #1
 8018d6e:	0852      	lsrs	r2, r2, #1
 8018d70:	07e1      	lsls	r1, r4, #31
 8018d72:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8018d76:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8018d7a:	bf48      	it	mi
 8018d7c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8018d80:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8018d84:	4614      	mov	r4, r2
 8018d86:	e781      	b.n	8018c8c <__ieee754_sqrt+0x34>
 8018d88:	0ad9      	lsrs	r1, r3, #11
 8018d8a:	3815      	subs	r0, #21
 8018d8c:	055b      	lsls	r3, r3, #21
 8018d8e:	2900      	cmp	r1, #0
 8018d90:	d0fa      	beq.n	8018d88 <__ieee754_sqrt+0x130>
 8018d92:	02cd      	lsls	r5, r1, #11
 8018d94:	d50a      	bpl.n	8018dac <__ieee754_sqrt+0x154>
 8018d96:	f1c2 0420 	rsb	r4, r2, #32
 8018d9a:	fa23 f404 	lsr.w	r4, r3, r4
 8018d9e:	1e55      	subs	r5, r2, #1
 8018da0:	4093      	lsls	r3, r2
 8018da2:	4321      	orrs	r1, r4
 8018da4:	1b42      	subs	r2, r0, r5
 8018da6:	e78a      	b.n	8018cbe <__ieee754_sqrt+0x66>
 8018da8:	4610      	mov	r0, r2
 8018daa:	e7f0      	b.n	8018d8e <__ieee754_sqrt+0x136>
 8018dac:	0049      	lsls	r1, r1, #1
 8018dae:	3201      	adds	r2, #1
 8018db0:	e7ef      	b.n	8018d92 <__ieee754_sqrt+0x13a>
 8018db2:	4680      	mov	r8, r0
 8018db4:	e7bd      	b.n	8018d32 <__ieee754_sqrt+0xda>
 8018db6:	bf00      	nop
 8018db8:	7ff00000 	.word	0x7ff00000

08018dbc <__ieee754_powf>:
 8018dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dc0:	ee10 4a90 	vmov	r4, s1
 8018dc4:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8018dc8:	ed2d 8b02 	vpush	{d8}
 8018dcc:	ee10 6a10 	vmov	r6, s0
 8018dd0:	eeb0 8a40 	vmov.f32	s16, s0
 8018dd4:	eef0 8a60 	vmov.f32	s17, s1
 8018dd8:	d10c      	bne.n	8018df4 <__ieee754_powf+0x38>
 8018dda:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8018dde:	0076      	lsls	r6, r6, #1
 8018de0:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8018de4:	f240 8296 	bls.w	8019314 <__ieee754_powf+0x558>
 8018de8:	ee38 0a28 	vadd.f32	s0, s16, s17
 8018dec:	ecbd 8b02 	vpop	{d8}
 8018df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018df4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8018df8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8018dfc:	dcf4      	bgt.n	8018de8 <__ieee754_powf+0x2c>
 8018dfe:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8018e02:	dd08      	ble.n	8018e16 <__ieee754_powf+0x5a>
 8018e04:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8018e08:	d1ee      	bne.n	8018de8 <__ieee754_powf+0x2c>
 8018e0a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8018e0e:	0064      	lsls	r4, r4, #1
 8018e10:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8018e14:	e7e6      	b.n	8018de4 <__ieee754_powf+0x28>
 8018e16:	2e00      	cmp	r6, #0
 8018e18:	da20      	bge.n	8018e5c <__ieee754_powf+0xa0>
 8018e1a:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8018e1e:	da2d      	bge.n	8018e7c <__ieee754_powf+0xc0>
 8018e20:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8018e24:	f2c0 827f 	blt.w	8019326 <__ieee754_powf+0x56a>
 8018e28:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8018e2c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8018e30:	fa48 f703 	asr.w	r7, r8, r3
 8018e34:	fa07 f303 	lsl.w	r3, r7, r3
 8018e38:	4543      	cmp	r3, r8
 8018e3a:	f040 8274 	bne.w	8019326 <__ieee754_powf+0x56a>
 8018e3e:	f007 0701 	and.w	r7, r7, #1
 8018e42:	f1c7 0702 	rsb	r7, r7, #2
 8018e46:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8018e4a:	d11f      	bne.n	8018e8c <__ieee754_powf+0xd0>
 8018e4c:	2c00      	cmp	r4, #0
 8018e4e:	f280 8267 	bge.w	8019320 <__ieee754_powf+0x564>
 8018e52:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018e56:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8018e5a:	e7c7      	b.n	8018dec <__ieee754_powf+0x30>
 8018e5c:	2700      	movs	r7, #0
 8018e5e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8018e62:	d1f0      	bne.n	8018e46 <__ieee754_powf+0x8a>
 8018e64:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8018e68:	f000 8254 	beq.w	8019314 <__ieee754_powf+0x558>
 8018e6c:	dd08      	ble.n	8018e80 <__ieee754_powf+0xc4>
 8018e6e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8019178 <__ieee754_powf+0x3bc>
 8018e72:	2c00      	cmp	r4, #0
 8018e74:	bfa8      	it	ge
 8018e76:	eeb0 0a68 	vmovge.f32	s0, s17
 8018e7a:	e7b7      	b.n	8018dec <__ieee754_powf+0x30>
 8018e7c:	2702      	movs	r7, #2
 8018e7e:	e7ee      	b.n	8018e5e <__ieee754_powf+0xa2>
 8018e80:	2c00      	cmp	r4, #0
 8018e82:	f280 824a 	bge.w	801931a <__ieee754_powf+0x55e>
 8018e86:	eeb1 0a68 	vneg.f32	s0, s17
 8018e8a:	e7af      	b.n	8018dec <__ieee754_powf+0x30>
 8018e8c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8018e90:	d102      	bne.n	8018e98 <__ieee754_powf+0xdc>
 8018e92:	ee28 0a08 	vmul.f32	s0, s16, s16
 8018e96:	e7a9      	b.n	8018dec <__ieee754_powf+0x30>
 8018e98:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8018e9c:	eeb0 0a48 	vmov.f32	s0, s16
 8018ea0:	d107      	bne.n	8018eb2 <__ieee754_powf+0xf6>
 8018ea2:	2e00      	cmp	r6, #0
 8018ea4:	db05      	blt.n	8018eb2 <__ieee754_powf+0xf6>
 8018ea6:	ecbd 8b02 	vpop	{d8}
 8018eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018eae:	f000 ba53 	b.w	8019358 <__ieee754_sqrtf>
 8018eb2:	f000 fa77 	bl	80193a4 <fabsf>
 8018eb6:	b125      	cbz	r5, 8018ec2 <__ieee754_powf+0x106>
 8018eb8:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8018ebc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8018ec0:	d116      	bne.n	8018ef0 <__ieee754_powf+0x134>
 8018ec2:	2c00      	cmp	r4, #0
 8018ec4:	bfbc      	itt	lt
 8018ec6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8018eca:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8018ece:	2e00      	cmp	r6, #0
 8018ed0:	da8c      	bge.n	8018dec <__ieee754_powf+0x30>
 8018ed2:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8018ed6:	ea55 0307 	orrs.w	r3, r5, r7
 8018eda:	d104      	bne.n	8018ee6 <__ieee754_powf+0x12a>
 8018edc:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018ee0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8018ee4:	e782      	b.n	8018dec <__ieee754_powf+0x30>
 8018ee6:	2f01      	cmp	r7, #1
 8018ee8:	d180      	bne.n	8018dec <__ieee754_powf+0x30>
 8018eea:	eeb1 0a40 	vneg.f32	s0, s0
 8018eee:	e77d      	b.n	8018dec <__ieee754_powf+0x30>
 8018ef0:	0ff0      	lsrs	r0, r6, #31
 8018ef2:	3801      	subs	r0, #1
 8018ef4:	ea57 0300 	orrs.w	r3, r7, r0
 8018ef8:	d104      	bne.n	8018f04 <__ieee754_powf+0x148>
 8018efa:	ee38 8a48 	vsub.f32	s16, s16, s16
 8018efe:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8018f02:	e773      	b.n	8018dec <__ieee754_powf+0x30>
 8018f04:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8018f08:	dd74      	ble.n	8018ff4 <__ieee754_powf+0x238>
 8018f0a:	4b9c      	ldr	r3, [pc, #624]	; (801917c <__ieee754_powf+0x3c0>)
 8018f0c:	429d      	cmp	r5, r3
 8018f0e:	dc08      	bgt.n	8018f22 <__ieee754_powf+0x166>
 8018f10:	2c00      	cmp	r4, #0
 8018f12:	da0b      	bge.n	8018f2c <__ieee754_powf+0x170>
 8018f14:	2000      	movs	r0, #0
 8018f16:	ecbd 8b02 	vpop	{d8}
 8018f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018f1e:	f000 ba3b 	b.w	8019398 <__math_oflowf>
 8018f22:	4b97      	ldr	r3, [pc, #604]	; (8019180 <__ieee754_powf+0x3c4>)
 8018f24:	429d      	cmp	r5, r3
 8018f26:	dd08      	ble.n	8018f3a <__ieee754_powf+0x17e>
 8018f28:	2c00      	cmp	r4, #0
 8018f2a:	dcf3      	bgt.n	8018f14 <__ieee754_powf+0x158>
 8018f2c:	2000      	movs	r0, #0
 8018f2e:	ecbd 8b02 	vpop	{d8}
 8018f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018f36:	f000 ba29 	b.w	801938c <__math_uflowf>
 8018f3a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018f3e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018f42:	eddf 6a90 	vldr	s13, [pc, #576]	; 8019184 <__ieee754_powf+0x3c8>
 8018f46:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8018f4a:	eee0 6a67 	vfms.f32	s13, s0, s15
 8018f4e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018f52:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8018f56:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018f5e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8019188 <__ieee754_powf+0x3cc>
 8018f62:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8018f66:	ed9f 7a89 	vldr	s14, [pc, #548]	; 801918c <__ieee754_powf+0x3d0>
 8018f6a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018f6e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8019190 <__ieee754_powf+0x3d4>
 8018f72:	eef0 6a67 	vmov.f32	s13, s15
 8018f76:	eee0 6a07 	vfma.f32	s13, s0, s14
 8018f7a:	ee16 3a90 	vmov	r3, s13
 8018f7e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8018f82:	f023 030f 	bic.w	r3, r3, #15
 8018f86:	ee00 3a90 	vmov	s1, r3
 8018f8a:	eee0 0a47 	vfms.f32	s1, s0, s14
 8018f8e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8018f92:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8018f96:	f024 040f 	bic.w	r4, r4, #15
 8018f9a:	ee07 4a10 	vmov	s14, r4
 8018f9e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8018fa2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8018fa6:	ee07 3a90 	vmov	s15, r3
 8018faa:	eee7 0a27 	vfma.f32	s1, s14, s15
 8018fae:	3f01      	subs	r7, #1
 8018fb0:	ea57 0200 	orrs.w	r2, r7, r0
 8018fb4:	ee07 4a10 	vmov	s14, r4
 8018fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018fbc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8018fc0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8018fc4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8018fc8:	ee17 4a10 	vmov	r4, s14
 8018fcc:	bf08      	it	eq
 8018fce:	eeb0 8a40 	vmoveq.f32	s16, s0
 8018fd2:	2c00      	cmp	r4, #0
 8018fd4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8018fd8:	f340 817e 	ble.w	80192d8 <__ieee754_powf+0x51c>
 8018fdc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8018fe0:	f340 80f8 	ble.w	80191d4 <__ieee754_powf+0x418>
 8018fe4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fec:	bf4c      	ite	mi
 8018fee:	2001      	movmi	r0, #1
 8018ff0:	2000      	movpl	r0, #0
 8018ff2:	e790      	b.n	8018f16 <__ieee754_powf+0x15a>
 8018ff4:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8018ff8:	bf01      	itttt	eq
 8018ffa:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8019194 <__ieee754_powf+0x3d8>
 8018ffe:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8019002:	f06f 0217 	mvneq.w	r2, #23
 8019006:	ee17 5a90 	vmoveq	r5, s15
 801900a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801900e:	bf18      	it	ne
 8019010:	2200      	movne	r2, #0
 8019012:	3b7f      	subs	r3, #127	; 0x7f
 8019014:	4413      	add	r3, r2
 8019016:	4a60      	ldr	r2, [pc, #384]	; (8019198 <__ieee754_powf+0x3dc>)
 8019018:	f3c5 0516 	ubfx	r5, r5, #0, #23
 801901c:	4295      	cmp	r5, r2
 801901e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8019022:	dd06      	ble.n	8019032 <__ieee754_powf+0x276>
 8019024:	4a5d      	ldr	r2, [pc, #372]	; (801919c <__ieee754_powf+0x3e0>)
 8019026:	4295      	cmp	r5, r2
 8019028:	f340 80a4 	ble.w	8019174 <__ieee754_powf+0x3b8>
 801902c:	3301      	adds	r3, #1
 801902e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8019032:	2500      	movs	r5, #0
 8019034:	4a5a      	ldr	r2, [pc, #360]	; (80191a0 <__ieee754_powf+0x3e4>)
 8019036:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 801903a:	ee07 1a90 	vmov	s15, r1
 801903e:	ed92 7a00 	vldr	s14, [r2]
 8019042:	4a58      	ldr	r2, [pc, #352]	; (80191a4 <__ieee754_powf+0x3e8>)
 8019044:	ee37 6a27 	vadd.f32	s12, s14, s15
 8019048:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801904c:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8019050:	1049      	asrs	r1, r1, #1
 8019052:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8019056:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801905a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 801905e:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8019062:	ee06 1a10 	vmov	s12, r1
 8019066:	ee65 4a26 	vmul.f32	s9, s10, s13
 801906a:	ee36 7a47 	vsub.f32	s14, s12, s14
 801906e:	ee14 6a90 	vmov	r6, s9
 8019072:	4016      	ands	r6, r2
 8019074:	ee05 6a90 	vmov	s11, r6
 8019078:	eea5 5ac6 	vfms.f32	s10, s11, s12
 801907c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019080:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80191a8 <__ieee754_powf+0x3ec>
 8019084:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8019088:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801908c:	ee25 6a26 	vmul.f32	s12, s10, s13
 8019090:	eddf 6a46 	vldr	s13, [pc, #280]	; 80191ac <__ieee754_powf+0x3f0>
 8019094:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8019098:	eddf 6a45 	vldr	s13, [pc, #276]	; 80191b0 <__ieee754_powf+0x3f4>
 801909c:	eee7 6a27 	vfma.f32	s13, s14, s15
 80190a0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8019184 <__ieee754_powf+0x3c8>
 80190a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80190a8:	eddf 6a42 	vldr	s13, [pc, #264]	; 80191b4 <__ieee754_powf+0x3f8>
 80190ac:	eee7 6a27 	vfma.f32	s13, s14, s15
 80190b0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80191b8 <__ieee754_powf+0x3fc>
 80190b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80190b8:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80190bc:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80190c0:	ee66 6a86 	vmul.f32	s13, s13, s12
 80190c4:	eee5 6a07 	vfma.f32	s13, s10, s14
 80190c8:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80190cc:	eef0 7a45 	vmov.f32	s15, s10
 80190d0:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80190d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80190d8:	ee17 1a90 	vmov	r1, s15
 80190dc:	4011      	ands	r1, r2
 80190de:	ee07 1a90 	vmov	s15, r1
 80190e2:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80190e6:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80190ea:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80190ee:	ee27 7a24 	vmul.f32	s14, s14, s9
 80190f2:	eea6 7a27 	vfma.f32	s14, s12, s15
 80190f6:	eeb0 6a47 	vmov.f32	s12, s14
 80190fa:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80190fe:	ee16 1a10 	vmov	r1, s12
 8019102:	4011      	ands	r1, r2
 8019104:	ee06 1a90 	vmov	s13, r1
 8019108:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801910c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80191bc <__ieee754_powf+0x400>
 8019110:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80191c0 <__ieee754_powf+0x404>
 8019114:	ee37 7a66 	vsub.f32	s14, s14, s13
 8019118:	ee06 1a10 	vmov	s12, r1
 801911c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019120:	eddf 7a28 	vldr	s15, [pc, #160]	; 80191c4 <__ieee754_powf+0x408>
 8019124:	4928      	ldr	r1, [pc, #160]	; (80191c8 <__ieee754_powf+0x40c>)
 8019126:	eea6 7a27 	vfma.f32	s14, s12, s15
 801912a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801912e:	edd1 7a00 	vldr	s15, [r1]
 8019132:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019136:	ee07 3a90 	vmov	s15, r3
 801913a:	4b24      	ldr	r3, [pc, #144]	; (80191cc <__ieee754_powf+0x410>)
 801913c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019140:	eef0 7a47 	vmov.f32	s15, s14
 8019144:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019148:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801914c:	edd5 0a00 	vldr	s1, [r5]
 8019150:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8019154:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019158:	ee17 3a90 	vmov	r3, s15
 801915c:	4013      	ands	r3, r2
 801915e:	ee07 3a90 	vmov	s15, r3
 8019162:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8019166:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801916a:	eee6 6a65 	vfms.f32	s13, s12, s11
 801916e:	ee77 7a66 	vsub.f32	s15, s14, s13
 8019172:	e70e      	b.n	8018f92 <__ieee754_powf+0x1d6>
 8019174:	2501      	movs	r5, #1
 8019176:	e75d      	b.n	8019034 <__ieee754_powf+0x278>
 8019178:	00000000 	.word	0x00000000
 801917c:	3f7ffff3 	.word	0x3f7ffff3
 8019180:	3f800007 	.word	0x3f800007
 8019184:	3eaaaaab 	.word	0x3eaaaaab
 8019188:	3fb8aa3b 	.word	0x3fb8aa3b
 801918c:	36eca570 	.word	0x36eca570
 8019190:	3fb8aa00 	.word	0x3fb8aa00
 8019194:	4b800000 	.word	0x4b800000
 8019198:	001cc471 	.word	0x001cc471
 801919c:	005db3d6 	.word	0x005db3d6
 80191a0:	08019df4 	.word	0x08019df4
 80191a4:	fffff000 	.word	0xfffff000
 80191a8:	3e6c3255 	.word	0x3e6c3255
 80191ac:	3e53f142 	.word	0x3e53f142
 80191b0:	3e8ba305 	.word	0x3e8ba305
 80191b4:	3edb6db7 	.word	0x3edb6db7
 80191b8:	3f19999a 	.word	0x3f19999a
 80191bc:	3f76384f 	.word	0x3f76384f
 80191c0:	3f763800 	.word	0x3f763800
 80191c4:	369dc3a0 	.word	0x369dc3a0
 80191c8:	08019e04 	.word	0x08019e04
 80191cc:	08019dfc 	.word	0x08019dfc
 80191d0:	3338aa3c 	.word	0x3338aa3c
 80191d4:	f040 8095 	bne.w	8019302 <__ieee754_powf+0x546>
 80191d8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80191d0 <__ieee754_powf+0x414>
 80191dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80191e0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80191e4:	eef4 6ac7 	vcmpe.f32	s13, s14
 80191e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191ec:	f73f aefa 	bgt.w	8018fe4 <__ieee754_powf+0x228>
 80191f0:	15db      	asrs	r3, r3, #23
 80191f2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80191f6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80191fa:	4103      	asrs	r3, r0
 80191fc:	4423      	add	r3, r4
 80191fe:	494b      	ldr	r1, [pc, #300]	; (801932c <__ieee754_powf+0x570>)
 8019200:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019204:	3a7f      	subs	r2, #127	; 0x7f
 8019206:	4111      	asrs	r1, r2
 8019208:	ea23 0101 	bic.w	r1, r3, r1
 801920c:	ee07 1a10 	vmov	s14, r1
 8019210:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8019214:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8019218:	f1c2 0217 	rsb	r2, r2, #23
 801921c:	4110      	asrs	r0, r2
 801921e:	2c00      	cmp	r4, #0
 8019220:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019224:	bfb8      	it	lt
 8019226:	4240      	neglt	r0, r0
 8019228:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801922c:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8019330 <__ieee754_powf+0x574>
 8019230:	eddf 6a40 	vldr	s13, [pc, #256]	; 8019334 <__ieee754_powf+0x578>
 8019234:	ee17 3a10 	vmov	r3, s14
 8019238:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801923c:	f023 030f 	bic.w	r3, r3, #15
 8019240:	ee07 3a10 	vmov	s14, r3
 8019244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019248:	ee27 0a00 	vmul.f32	s0, s14, s0
 801924c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8019250:	eddf 7a39 	vldr	s15, [pc, #228]	; 8019338 <__ieee754_powf+0x57c>
 8019254:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8019258:	eef0 7a40 	vmov.f32	s15, s0
 801925c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8019260:	eeb0 6a67 	vmov.f32	s12, s15
 8019264:	eea7 6a66 	vfms.f32	s12, s14, s13
 8019268:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801926c:	ee30 0a46 	vsub.f32	s0, s0, s12
 8019270:	eddf 6a32 	vldr	s13, [pc, #200]	; 801933c <__ieee754_powf+0x580>
 8019274:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8019340 <__ieee754_powf+0x584>
 8019278:	eee7 6a06 	vfma.f32	s13, s14, s12
 801927c:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8019344 <__ieee754_powf+0x588>
 8019280:	eea6 6a87 	vfma.f32	s12, s13, s14
 8019284:	eddf 6a30 	vldr	s13, [pc, #192]	; 8019348 <__ieee754_powf+0x58c>
 8019288:	eee6 6a07 	vfma.f32	s13, s12, s14
 801928c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801934c <__ieee754_powf+0x590>
 8019290:	eea6 6a87 	vfma.f32	s12, s13, s14
 8019294:	eef0 6a67 	vmov.f32	s13, s15
 8019298:	eee6 6a47 	vfms.f32	s13, s12, s14
 801929c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80192a0:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80192a4:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80192a8:	eea7 0a80 	vfma.f32	s0, s15, s0
 80192ac:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80192b0:	ee37 0a40 	vsub.f32	s0, s14, s0
 80192b4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80192b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80192bc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80192c0:	ee10 3a10 	vmov	r3, s0
 80192c4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80192c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80192cc:	da1f      	bge.n	801930e <__ieee754_powf+0x552>
 80192ce:	f000 f87d 	bl	80193cc <scalbnf>
 80192d2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80192d6:	e589      	b.n	8018dec <__ieee754_powf+0x30>
 80192d8:	4a1d      	ldr	r2, [pc, #116]	; (8019350 <__ieee754_powf+0x594>)
 80192da:	4293      	cmp	r3, r2
 80192dc:	dd07      	ble.n	80192ee <__ieee754_powf+0x532>
 80192de:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80192e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192e6:	bf4c      	ite	mi
 80192e8:	2001      	movmi	r0, #1
 80192ea:	2000      	movpl	r0, #0
 80192ec:	e61f      	b.n	8018f2e <__ieee754_powf+0x172>
 80192ee:	d108      	bne.n	8019302 <__ieee754_powf+0x546>
 80192f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80192f4:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80192f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192fc:	f6ff af78 	blt.w	80191f0 <__ieee754_powf+0x434>
 8019300:	e7ed      	b.n	80192de <__ieee754_powf+0x522>
 8019302:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8019306:	f73f af73 	bgt.w	80191f0 <__ieee754_powf+0x434>
 801930a:	2000      	movs	r0, #0
 801930c:	e78c      	b.n	8019228 <__ieee754_powf+0x46c>
 801930e:	ee00 3a10 	vmov	s0, r3
 8019312:	e7de      	b.n	80192d2 <__ieee754_powf+0x516>
 8019314:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019318:	e568      	b.n	8018dec <__ieee754_powf+0x30>
 801931a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8019354 <__ieee754_powf+0x598>
 801931e:	e565      	b.n	8018dec <__ieee754_powf+0x30>
 8019320:	eeb0 0a48 	vmov.f32	s0, s16
 8019324:	e562      	b.n	8018dec <__ieee754_powf+0x30>
 8019326:	2700      	movs	r7, #0
 8019328:	e58d      	b.n	8018e46 <__ieee754_powf+0x8a>
 801932a:	bf00      	nop
 801932c:	007fffff 	.word	0x007fffff
 8019330:	35bfbe8c 	.word	0x35bfbe8c
 8019334:	3f317200 	.word	0x3f317200
 8019338:	3f317218 	.word	0x3f317218
 801933c:	b5ddea0e 	.word	0xb5ddea0e
 8019340:	3331bb4c 	.word	0x3331bb4c
 8019344:	388ab355 	.word	0x388ab355
 8019348:	bb360b61 	.word	0xbb360b61
 801934c:	3e2aaaab 	.word	0x3e2aaaab
 8019350:	43160000 	.word	0x43160000
 8019354:	00000000 	.word	0x00000000

08019358 <__ieee754_sqrtf>:
 8019358:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801935c:	4770      	bx	lr

0801935e <with_errnof>:
 801935e:	b513      	push	{r0, r1, r4, lr}
 8019360:	4604      	mov	r4, r0
 8019362:	ed8d 0a01 	vstr	s0, [sp, #4]
 8019366:	f7fc fd9b 	bl	8015ea0 <__errno>
 801936a:	ed9d 0a01 	vldr	s0, [sp, #4]
 801936e:	6004      	str	r4, [r0, #0]
 8019370:	b002      	add	sp, #8
 8019372:	bd10      	pop	{r4, pc}

08019374 <xflowf>:
 8019374:	b130      	cbz	r0, 8019384 <xflowf+0x10>
 8019376:	eef1 7a40 	vneg.f32	s15, s0
 801937a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801937e:	2022      	movs	r0, #34	; 0x22
 8019380:	f7ff bfed 	b.w	801935e <with_errnof>
 8019384:	eef0 7a40 	vmov.f32	s15, s0
 8019388:	e7f7      	b.n	801937a <xflowf+0x6>
	...

0801938c <__math_uflowf>:
 801938c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019394 <__math_uflowf+0x8>
 8019390:	f7ff bff0 	b.w	8019374 <xflowf>
 8019394:	10000000 	.word	0x10000000

08019398 <__math_oflowf>:
 8019398:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80193a0 <__math_oflowf+0x8>
 801939c:	f7ff bfea 	b.w	8019374 <xflowf>
 80193a0:	70000000 	.word	0x70000000

080193a4 <fabsf>:
 80193a4:	ee10 3a10 	vmov	r3, s0
 80193a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80193ac:	ee00 3a10 	vmov	s0, r3
 80193b0:	4770      	bx	lr

080193b2 <finitef>:
 80193b2:	b082      	sub	sp, #8
 80193b4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80193b8:	9801      	ldr	r0, [sp, #4]
 80193ba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80193be:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80193c2:	bfac      	ite	ge
 80193c4:	2000      	movge	r0, #0
 80193c6:	2001      	movlt	r0, #1
 80193c8:	b002      	add	sp, #8
 80193ca:	4770      	bx	lr

080193cc <scalbnf>:
 80193cc:	ee10 3a10 	vmov	r3, s0
 80193d0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80193d4:	d025      	beq.n	8019422 <scalbnf+0x56>
 80193d6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80193da:	d302      	bcc.n	80193e2 <scalbnf+0x16>
 80193dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80193e0:	4770      	bx	lr
 80193e2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80193e6:	d122      	bne.n	801942e <scalbnf+0x62>
 80193e8:	4b2a      	ldr	r3, [pc, #168]	; (8019494 <scalbnf+0xc8>)
 80193ea:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8019498 <scalbnf+0xcc>
 80193ee:	4298      	cmp	r0, r3
 80193f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80193f4:	db16      	blt.n	8019424 <scalbnf+0x58>
 80193f6:	ee10 3a10 	vmov	r3, s0
 80193fa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80193fe:	3a19      	subs	r2, #25
 8019400:	4402      	add	r2, r0
 8019402:	2afe      	cmp	r2, #254	; 0xfe
 8019404:	dd15      	ble.n	8019432 <scalbnf+0x66>
 8019406:	ee10 3a10 	vmov	r3, s0
 801940a:	eddf 7a24 	vldr	s15, [pc, #144]	; 801949c <scalbnf+0xd0>
 801940e:	eddf 6a24 	vldr	s13, [pc, #144]	; 80194a0 <scalbnf+0xd4>
 8019412:	2b00      	cmp	r3, #0
 8019414:	eeb0 7a67 	vmov.f32	s14, s15
 8019418:	bfb8      	it	lt
 801941a:	eef0 7a66 	vmovlt.f32	s15, s13
 801941e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8019422:	4770      	bx	lr
 8019424:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80194a4 <scalbnf+0xd8>
 8019428:	ee20 0a27 	vmul.f32	s0, s0, s15
 801942c:	4770      	bx	lr
 801942e:	0dd2      	lsrs	r2, r2, #23
 8019430:	e7e6      	b.n	8019400 <scalbnf+0x34>
 8019432:	2a00      	cmp	r2, #0
 8019434:	dd06      	ble.n	8019444 <scalbnf+0x78>
 8019436:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801943a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801943e:	ee00 3a10 	vmov	s0, r3
 8019442:	4770      	bx	lr
 8019444:	f112 0f16 	cmn.w	r2, #22
 8019448:	da1a      	bge.n	8019480 <scalbnf+0xb4>
 801944a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801944e:	4298      	cmp	r0, r3
 8019450:	ee10 3a10 	vmov	r3, s0
 8019454:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019458:	dd0a      	ble.n	8019470 <scalbnf+0xa4>
 801945a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801949c <scalbnf+0xd0>
 801945e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80194a0 <scalbnf+0xd4>
 8019462:	eef0 7a40 	vmov.f32	s15, s0
 8019466:	2b00      	cmp	r3, #0
 8019468:	bf18      	it	ne
 801946a:	eeb0 0a47 	vmovne.f32	s0, s14
 801946e:	e7db      	b.n	8019428 <scalbnf+0x5c>
 8019470:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80194a4 <scalbnf+0xd8>
 8019474:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80194a8 <scalbnf+0xdc>
 8019478:	eef0 7a40 	vmov.f32	s15, s0
 801947c:	2b00      	cmp	r3, #0
 801947e:	e7f3      	b.n	8019468 <scalbnf+0x9c>
 8019480:	3219      	adds	r2, #25
 8019482:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019486:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801948a:	eddf 7a08 	vldr	s15, [pc, #32]	; 80194ac <scalbnf+0xe0>
 801948e:	ee07 3a10 	vmov	s14, r3
 8019492:	e7c4      	b.n	801941e <scalbnf+0x52>
 8019494:	ffff3cb0 	.word	0xffff3cb0
 8019498:	4c000000 	.word	0x4c000000
 801949c:	7149f2ca 	.word	0x7149f2ca
 80194a0:	f149f2ca 	.word	0xf149f2ca
 80194a4:	0da24260 	.word	0x0da24260
 80194a8:	8da24260 	.word	0x8da24260
 80194ac:	33000000 	.word	0x33000000

080194b0 <_init>:
 80194b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194b2:	bf00      	nop
 80194b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80194b6:	bc08      	pop	{r3}
 80194b8:	469e      	mov	lr, r3
 80194ba:	4770      	bx	lr

080194bc <_fini>:
 80194bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194be:	bf00      	nop
 80194c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80194c2:	bc08      	pop	{r3}
 80194c4:	469e      	mov	lr, r3
 80194c6:	4770      	bx	lr
