
Inharo_FSW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000168c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000090c  08016a98  08016a98  00026a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080173a4  080173a4  000302f4  2**0
                  CONTENTS
  4 .ARM          00000008  080173a4  080173a4  000273a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080173ac  080173ac  000302f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080173ac  080173ac  000273ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080173b0  080173b0  000273b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f4  20000000  080173b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006cb0  200002f8  080176a8  000302f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006fa8  080176a8  00036fa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ac4f  00000000  00000000  00030324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000084b9  00000000  00000000  0006af73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002df0  00000000  00000000  00073430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002a80  00000000  00000000  00076220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000341e7  00000000  00000000  00078ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004385a  00000000  00000000  000ace87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff6f9  00000000  00000000  000f06e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001efdda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cfcc  00000000  00000000  001efe2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002f8 	.word	0x200002f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016a80 	.word	0x08016a80

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002fc 	.word	0x200002fc
 800020c:	08016a80 	.word	0x08016a80

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f000 ff70 	bl	8001dde <null_ptr_check>
 8000efe:	4603      	mov	r3, r0
 8000f00:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8000f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d131      	bne.n	8000f6e <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7a1b      	ldrb	r3, [r3, #8]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d003      	beq.n	8000f1a <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2201      	movs	r2, #1
 8000f16:	729a      	strb	r2, [r3, #10]
 8000f18:	e002      	b.n	8000f20 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	729a      	strb	r2, [r3, #10]
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8000f20:	f107 010e 	add.w	r1, r7, #14
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2201      	movs	r2, #1
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f000 f826 	bl	8000f7a <bmp3_get_regs>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d119      	bne.n	8000f6e <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8000f3a:	7bbb      	ldrb	r3, [r7, #14]
 8000f3c:	2b50      	cmp	r3, #80	; 0x50
 8000f3e:	d002      	beq.n	8000f46 <bmp3_init+0x5a>
 8000f40:	7bbb      	ldrb	r3, [r7, #14]
 8000f42:	2b60      	cmp	r3, #96	; 0x60
 8000f44:	d111      	bne.n	8000f6a <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 8000f46:	7bba      	ldrb	r2, [r7, #14]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 f983 	bl	8001258 <bmp3_soft_reset>
 8000f52:	4603      	mov	r3, r0
 8000f54:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d107      	bne.n	8000f6e <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 fae3 	bl	800152a <get_calib_data>
 8000f64:	4603      	mov	r3, r0
 8000f66:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000f68:	e001      	b.n	8000f6e <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8000f6a:	23f9      	movs	r3, #249	; 0xf9
 8000f6c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8000f7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f7e:	b08b      	sub	sp, #44	; 0x2c
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	4603      	mov	r3, r0
 8000f8a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000f8c:	6838      	ldr	r0, [r7, #0]
 8000f8e:	f000 ff26 	bl	8001dde <null_ptr_check>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8000f98:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d172      	bne.n	8001086 <bmp3_get_regs+0x10c>
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d06f      	beq.n	8001086 <bmp3_get_regs+0x10c>
    {
 8000fa6:	466b      	mov	r3, sp
 8000fa8:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	7a9b      	ldrb	r3, [r3, #10]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	7a9b      	ldrb	r3, [r3, #10]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	18d1      	adds	r1, r2, r3
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	61bb      	str	r3, [r7, #24]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	4688      	mov	r8, r1
 8000fca:	4699      	mov	r9, r3
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000fd8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000fdc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	460c      	mov	r4, r1
 8000fe4:	461d      	mov	r5, r3
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	00eb      	lsls	r3, r5, #3
 8000ff0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ff4:	00e2      	lsls	r2, r4, #3
 8000ff6:	1dcb      	adds	r3, r1, #7
 8000ff8:	08db      	lsrs	r3, r3, #3
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	ebad 0d03 	sub.w	sp, sp, r3
 8001000:	466b      	mov	r3, sp
 8001002:	3300      	adds	r3, #0
 8001004:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	7a1b      	ldrb	r3, [r3, #8]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d025      	beq.n	800105a <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001014:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	68dc      	ldr	r4, [r3, #12]
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	7bf8      	ldrb	r0, [r7, #15]
 8001020:	69fa      	ldr	r2, [r7, #28]
 8001022:	6979      	ldr	r1, [r7, #20]
 8001024:	47a0      	blx	r4
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
 8001032:	e00d      	b.n	8001050 <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	7a9b      	ldrb	r3, [r3, #10]
 8001038:	461a      	mov	r2, r3
 800103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103c:	441a      	add	r2, r3
 800103e:	68b9      	ldr	r1, [r7, #8]
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	440b      	add	r3, r1
 8001044:	6979      	ldr	r1, [r7, #20]
 8001046:	5c8a      	ldrb	r2, [r1, r2]
 8001048:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	3301      	adds	r3, #1
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
 8001050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	d3ed      	bcc.n	8001034 <bmp3_get_regs+0xba>
 8001058:	e00b      	b.n	8001072 <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	68dc      	ldr	r4, [r3, #12]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	7bf8      	ldrb	r0, [r7, #15]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	68b9      	ldr	r1, [r7, #8]
 8001068:	47a0      	blx	r4
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 800107c:	23fe      	movs	r3, #254	; 0xfe
 800107e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001082:	46b5      	mov	sp, r6
    {
 8001084:	e002      	b.n	800108c <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001086:	23ff      	movs	r3, #255	; 0xff
 8001088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }

    return rslt;
 800108c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 8001090:	4618      	mov	r0, r3
 8001092:	372c      	adds	r7, #44	; 0x2c
 8001094:	46bd      	mov	sp, r7
 8001096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800109a <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800109a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	603b      	str	r3, [r7, #0]
 80010aa:	466b      	mov	r3, sp
 80010ac:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	0059      	lsls	r1, r3, #1
 80010b2:	460b      	mov	r3, r1
 80010b4:	3b01      	subs	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	2300      	movs	r3, #0
 80010ba:	4688      	mov	r8, r1
 80010bc:	4699      	mov	r9, r3
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	f04f 0300 	mov.w	r3, #0
 80010c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010d2:	2300      	movs	r3, #0
 80010d4:	460c      	mov	r4, r1
 80010d6:	461d      	mov	r5, r3
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	00eb      	lsls	r3, r5, #3
 80010e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010e6:	00e2      	lsls	r2, r4, #3
 80010e8:	1dcb      	adds	r3, r1, #7
 80010ea:	08db      	lsrs	r3, r3, #3
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	ebad 0d03 	sub.w	sp, sp, r3
 80010f2:	466b      	mov	r3, sp
 80010f4:	3300      	adds	r3, #0
 80010f6:	613b      	str	r3, [r7, #16]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80010f8:	6838      	ldr	r0, [r7, #0]
 80010fa:	f000 fe70 	bl	8001dde <null_ptr_check>
 80010fe:	4603      	mov	r3, r0
 8001100:	76fb      	strb	r3, [r7, #27]

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001102:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d14c      	bne.n	80011a4 <bmp3_set_regs+0x10a>
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d049      	beq.n	80011a4 <bmp3_set_regs+0x10a>
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d046      	beq.n	80011a4 <bmp3_set_regs+0x10a>
    {
        if (len != 0)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d040      	beq.n	800119e <bmp3_set_regs+0x104>
        {
            temp_buff[0] = reg_data[0];
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	7a1b      	ldrb	r3, [r3, #8]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d114      	bne.n	8001156 <bmp3_set_regs+0xbc>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800112c:	2300      	movs	r3, #0
 800112e:	76bb      	strb	r3, [r7, #26]
 8001130:	e00d      	b.n	800114e <bmp3_set_regs+0xb4>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001132:	7ebb      	ldrb	r3, [r7, #26]
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	7ebb      	ldrb	r3, [r7, #26]
 800113c:	68f9      	ldr	r1, [r7, #12]
 800113e:	440b      	add	r3, r1
 8001140:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001148:	7ebb      	ldrb	r3, [r7, #26]
 800114a:	3301      	adds	r3, #1
 800114c:	76bb      	strb	r3, [r7, #26]
 800114e:	7ebb      	ldrb	r3, [r7, #26]
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	429a      	cmp	r2, r3
 8001154:	d8ed      	bhi.n	8001132 <bmp3_set_regs+0x98>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d909      	bls.n	8001170 <bmp3_set_regs+0xd6>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	6939      	ldr	r1, [r7, #16]
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f000 fa06 	bl	8001574 <interleave_reg_addr>
                temp_len = len * 2;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	61fb      	str	r3, [r7, #28]
 800116e:	e001      	b.n	8001174 <bmp3_set_regs+0xda>
            }
            else
            {
                temp_len = len;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	61fb      	str	r3, [r7, #28]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	691c      	ldr	r4, [r3, #16]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	7818      	ldrb	r0, [r3, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	6939      	ldr	r1, [r7, #16]
 8001184:	47a0      	blx	r4
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d008      	beq.n	80011aa <bmp3_set_regs+0x110>
            {
                rslt = BMP3_E_COMM_FAIL;
 8001198:	23fe      	movs	r3, #254	; 0xfe
 800119a:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 800119c:	e005      	b.n	80011aa <bmp3_set_regs+0x110>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 800119e:	23fa      	movs	r3, #250	; 0xfa
 80011a0:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 80011a2:	e002      	b.n	80011aa <bmp3_set_regs+0x110>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80011a4:	23ff      	movs	r3, #255	; 0xff
 80011a6:	76fb      	strb	r3, [r7, #27]
 80011a8:	e000      	b.n	80011ac <bmp3_set_regs+0x112>
        if (len != 0)
 80011aa:	bf00      	nop
    }

    return rslt;
 80011ac:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80011b0:	46b5      	mov	sp, r6
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3724      	adds	r7, #36	; 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080011bc <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80011c8:	2300      	movs	r3, #0
 80011ca:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d03a      	beq.n	8001248 <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 80011d2:	68f9      	ldr	r1, [r7, #12]
 80011d4:	2006      	movs	r0, #6
 80011d6:	f000 fdea 	bl	8001dae <are_settings_changed>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d006      	beq.n	80011ee <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	68b9      	ldr	r1, [r7, #8]
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f000 fa2b 	bl	8001640 <set_pwr_ctrl_settings>
 80011ea:	4603      	mov	r3, r0
 80011ec:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 80011ee:	68f9      	ldr	r1, [r7, #12]
 80011f0:	20f0      	movs	r0, #240	; 0xf0
 80011f2:	f000 fddc 	bl	8001dae <are_settings_changed>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d006      	beq.n	800120a <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	68b9      	ldr	r1, [r7, #8]
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f000 fa6b 	bl	80016dc <set_odr_filter_settings>
 8001206:	4603      	mov	r3, r0
 8001208:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 800120a:	68f9      	ldr	r1, [r7, #12]
 800120c:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8001210:	f000 fdcd 	bl	8001dae <are_settings_changed>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d006      	beq.n	8001228 <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f000 faca 	bl	80017b8 <set_int_ctrl_settings>
 8001224:	4603      	mov	r3, r0
 8001226:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 8001228:	68f9      	ldr	r1, [r7, #12]
 800122a:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800122e:	f000 fdbe 	bl	8001dae <are_settings_changed>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d009      	beq.n	800124c <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	68b9      	ldr	r1, [r7, #8]
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f000 fb35 	bl	80018ac <set_advance_settings>
 8001242:	4603      	mov	r3, r0
 8001244:	75fb      	strb	r3, [r7, #23]
 8001246:	e001      	b.n	800124c <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001248:	23ff      	movs	r3, #255	; 0xff
 800124a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800124c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 8001260:	237e      	movs	r3, #126	; 0x7e
 8001262:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 8001264:	23b6      	movs	r3, #182	; 0xb6
 8001266:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 8001268:	f107 010c 	add.w	r1, r7, #12
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2201      	movs	r2, #1
 8001270:	2003      	movs	r0, #3
 8001272:	f7ff fe82 	bl	8000f7a <bmp3_get_regs>
 8001276:	4603      	mov	r3, r0
 8001278:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 800127a:	7b3b      	ldrb	r3, [r7, #12]
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	2b00      	cmp	r3, #0
 8001282:	d02d      	beq.n	80012e0 <bmp3_soft_reset+0x88>
 8001284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d129      	bne.n	80012e0 <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800128c:	f107 010d 	add.w	r1, r7, #13
 8001290:	f107 000e 	add.w	r0, r7, #14
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	f7ff feff 	bl	800109a <bmp3_set_regs>
 800129c:	4603      	mov	r3, r0
 800129e:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 80012a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d11b      	bne.n	80012e0 <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6852      	ldr	r2, [r2, #4]
 80012b0:	4611      	mov	r1, r2
 80012b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012b6:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 80012b8:	f107 010b 	add.w	r1, r7, #11
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	2002      	movs	r0, #2
 80012c2:	f7ff fe5a 	bl	8000f7a <bmp3_get_regs>
 80012c6:	4603      	mov	r3, r0
 80012c8:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 80012ca:	7afb      	ldrb	r3, [r7, #11]
 80012cc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d103      	bne.n	80012dc <bmp3_soft_reset+0x84>
 80012d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 80012dc:	23fc      	movs	r3, #252	; 0xfc
 80012de:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80012e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80012f6:	6838      	ldr	r0, [r7, #0]
 80012f8:	f000 fd71 	bl	8001dde <null_ptr_check>
 80012fc:	4603      	mov	r3, r0
 80012fe:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 8001300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d139      	bne.n	800137c <bmp3_set_op_mode+0x90>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d036      	beq.n	800137c <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 8001314:	f107 030d 	add.w	r3, r7, #13
 8001318:	6839      	ldr	r1, [r7, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f838 	bl	8001390 <bmp3_get_op_mode>
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 8001324:	7b7b      	ldrb	r3, [r7, #13]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d010      	beq.n	800134c <bmp3_set_op_mode+0x60>
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d10c      	bne.n	800134c <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 8001332:	6838      	ldr	r0, [r7, #0]
 8001334:	f000 f8b7 	bl	80014a6 <put_device_to_sleep>
 8001338:	4603      	mov	r3, r0
 800133a:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	6852      	ldr	r2, [r2, #4]
 8001344:	4611      	mov	r1, r2
 8001346:	f241 3088 	movw	r0, #5000	; 0x1388
 800134a:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 800134c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d116      	bne.n	8001382 <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 8001354:	7bbb      	ldrb	r3, [r7, #14]
 8001356:	2b03      	cmp	r3, #3
 8001358:	d106      	bne.n	8001368 <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 800135a:	6839      	ldr	r1, [r7, #0]
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f839 	bl	80013d4 <set_normal_mode>
 8001362:	4603      	mov	r3, r0
 8001364:	73fb      	strb	r3, [r7, #15]
    {
 8001366:	e00c      	b.n	8001382 <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 8001368:	7bbb      	ldrb	r3, [r7, #14]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d109      	bne.n	8001382 <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 800136e:	6839      	ldr	r1, [r7, #0]
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f862 	bl	800143a <write_power_mode>
 8001376:	4603      	mov	r3, r0
 8001378:	73fb      	strb	r3, [r7, #15]
    {
 800137a:	e002      	b.n	8001382 <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800137c:	23ff      	movs	r3, #255	; 0xff
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	e000      	b.n	8001384 <bmp3_set_op_mode+0x98>
    {
 8001382:	bf00      	nop
    }

    return rslt;
 8001384:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d011      	beq.n	80013c4 <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	2201      	movs	r2, #1
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	201b      	movs	r0, #27
 80013a8:	f7ff fde7 	bl	8000f7a <bmp3_get_regs>
 80013ac:	4603      	mov	r3, r0
 80013ae:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	111b      	asrs	r3, r3, #4
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	701a      	strb	r2, [r3, #0]
 80013c2:	e001      	b.n	80013c8 <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80013c4:	23ff      	movs	r3, #255	; 0xff
 80013c6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80013c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 80013de:	6839      	ldr	r1, [r7, #0]
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 f888 	bl	80014f6 <validate_normal_mode_settings>
 80013e6:	4603      	mov	r3, r0
 80013e8:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d11d      	bne.n	800142e <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 80013f2:	6839      	ldr	r1, [r7, #0]
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 f820 	bl	800143a <write_power_mode>
 80013fa:	4603      	mov	r3, r0
 80013fc:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 80013fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d113      	bne.n	800142e <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 8001406:	f107 010e 	add.w	r1, r7, #14
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	2201      	movs	r2, #1
 800140e:	2002      	movs	r0, #2
 8001410:	f7ff fdb3 	bl	8000f7a <bmp3_get_regs>
 8001414:	4603      	mov	r3, r0
 8001416:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 8001418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d106      	bne.n	800142e <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8001420:	7bbb      	ldrb	r3, [r7, #14]
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 800142a:	23fb      	movs	r3, #251	; 0xfb
 800142c:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800142e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b084      	sub	sp, #16
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8001444:	231b      	movs	r3, #27
 8001446:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 800144e:	7b78      	ldrb	r0, [r7, #13]
 8001450:	f107 010c 	add.w	r1, r7, #12
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2201      	movs	r2, #1
 8001458:	f7ff fd8f 	bl	8000f7a <bmp3_get_regs>
 800145c:	4603      	mov	r3, r0
 800145e:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 8001460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d118      	bne.n	800149a <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 8001468:	7b3b      	ldrb	r3, [r7, #12]
 800146a:	b25b      	sxtb	r3, r3
 800146c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001470:	b25a      	sxtb	r2, r3
 8001472:	7bbb      	ldrb	r3, [r7, #14]
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	b25b      	sxtb	r3, r3
 8001478:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800147c:	b25b      	sxtb	r3, r3
 800147e:	4313      	orrs	r3, r2
 8001480:	b25b      	sxtb	r3, r3
 8001482:	b2db      	uxtb	r3, r3
 8001484:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 8001486:	f107 010c 	add.w	r1, r7, #12
 800148a:	f107 000d 	add.w	r0, r7, #13
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	2201      	movs	r2, #1
 8001492:	f7ff fe02 	bl	800109a <bmp3_set_regs>
 8001496:	4603      	mov	r3, r0
 8001498:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b084      	sub	sp, #16
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80014ae:	231b      	movs	r3, #27
 80014b0:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 80014b2:	f107 010d 	add.w	r1, r7, #13
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	201b      	movs	r0, #27
 80014bc:	f7ff fd5d 	bl	8000f7a <bmp3_get_regs>
 80014c0:	4603      	mov	r3, r0
 80014c2:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80014c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d10e      	bne.n	80014ea <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 80014cc:	7b7b      	ldrb	r3, [r7, #13]
 80014ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80014d6:	f107 010d 	add.w	r1, r7, #13
 80014da:	f107 000e 	add.w	r0, r7, #14
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f7ff fdda 	bl	800109a <bmp3_set_regs>
 80014e6:	4603      	mov	r3, r0
 80014e8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 8001500:	6839      	ldr	r1, [r7, #0]
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 fa25 	bl	8001952 <get_odr_filter_settings>
 8001508:	4603      	mov	r3, r0
 800150a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800150c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d104      	bne.n	800151e <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 fa39 	bl	800198c <validate_osr_and_odr_settings>
 800151a:	4603      	mov	r3, r0
 800151c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b088      	sub	sp, #32
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 8001532:	2331      	movs	r3, #49	; 0x31
 8001534:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 800154a:	f107 0108 	add.w	r1, r7, #8
 800154e:	7ff8      	ldrb	r0, [r7, #31]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2215      	movs	r2, #21
 8001554:	f7ff fd11 	bl	8000f7a <bmp3_get_regs>
 8001558:	4603      	mov	r3, r0
 800155a:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 800155c:	f107 0308 	add.w	r3, r7, #8
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fb70 	bl	8001c48 <parse_calib_data>

    return rslt;
 8001568:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3720      	adds	r7, #32
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001574:	b480      	push	{r7}
 8001576:	b087      	sub	sp, #28
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
 8001580:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001582:	2301      	movs	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	e015      	b.n	80015b4 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	441a      	add	r2, r3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	3b01      	subs	r3, #1
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	440b      	add	r3, r1
 8001598:	7812      	ldrb	r2, [r2, #0]
 800159a:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	441a      	add	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	68b9      	ldr	r1, [r7, #8]
 80015a8:	440b      	add	r3, r1
 80015aa:	7812      	ldrb	r2, [r2, #0]
 80015ac:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	3301      	adds	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d3e5      	bcc.n	8001588 <interleave_reg_addr+0x14>
    }
}
 80015bc:	bf00      	nop
 80015be:	bf00      	nop
 80015c0:	371c      	adds	r7, #28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b085      	sub	sp, #20
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	10db      	asrs	r3, r3, #3
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	3301      	adds	r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	f003 031f 	and.w	r3, r3, #31
 8001612:	b2da      	uxtb	r2, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	3302      	adds	r3, #2
 800161c:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	4413      	add	r3, r2
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	105b      	asrs	r3, r3, #1
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	b2da      	uxtb	r2, r3
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	709a      	strb	r2, [r3, #2]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 800164c:	231b      	movs	r3, #27
 800164e:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001650:	7db8      	ldrb	r0, [r7, #22]
 8001652:	f107 0115 	add.w	r1, r7, #21
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f7ff fc8e 	bl	8000f7a <bmp3_get_regs>
 800165e:	4603      	mov	r3, r0
 8001660:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001662:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d132      	bne.n	80016d0 <set_pwr_ctrl_settings+0x90>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00e      	beq.n	8001692 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 8001674:	7d7b      	ldrb	r3, [r7, #21]
 8001676:	b25b      	sxtb	r3, r3
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	b25a      	sxtb	r2, r3
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	785b      	ldrb	r3, [r3, #1]
 8001682:	b25b      	sxtb	r3, r3
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	b25b      	sxtb	r3, r3
 800168a:	4313      	orrs	r3, r2
 800168c:	b25b      	sxtb	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00f      	beq.n	80016bc <set_pwr_ctrl_settings+0x7c>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 800169c:	7d7b      	ldrb	r3, [r7, #21]
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	f023 0302 	bic.w	r3, r3, #2
 80016a4:	b25a      	sxtb	r2, r3
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	789b      	ldrb	r3, [r3, #2]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	4313      	orrs	r3, r2
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80016bc:	f107 0115 	add.w	r1, r7, #21
 80016c0:	f107 0016 	add.w	r0, r7, #22
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f7ff fce7 	bl	800109a <bmp3_set_regs>
 80016cc:	4603      	mov	r3, r0
 80016ce:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80016d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af02      	add	r7, sp, #8
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 80016e8:	4b32      	ldr	r3, [pc, #200]	; (80017b4 <set_odr_filter_settings+0xd8>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	83bb      	strh	r3, [r7, #28]
 80016ee:	2300      	movs	r3, #0
 80016f0:	77bb      	strb	r3, [r7, #30]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 80016f6:	f107 0118 	add.w	r1, r7, #24
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2204      	movs	r2, #4
 80016fe:	201c      	movs	r0, #28
 8001700:	f7ff fc3b 	bl	8000f7a <bmp3_get_regs>
 8001704:	4603      	mov	r3, r0
 8001706:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 8001708:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d14a      	bne.n	80017a6 <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8001710:	68f9      	ldr	r1, [r7, #12]
 8001712:	2030      	movs	r0, #48	; 0x30
 8001714:	f000 fb4b 	bl	8001dae <are_settings_changed>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00b      	beq.n	8001736 <set_odr_filter_settings+0x5a>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 800171e:	f107 0017 	add.w	r0, r7, #23
 8001722:	f107 0218 	add.w	r2, r7, #24
 8001726:	f107 011c 	add.w	r1, r7, #28
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	4603      	mov	r3, r0
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f000 f9c1 	bl	8001ab8 <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 8001736:	68f9      	ldr	r1, [r7, #12]
 8001738:	2080      	movs	r0, #128	; 0x80
 800173a:	f000 fb38 	bl	8001dae <are_settings_changed>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <set_odr_filter_settings+0x7a>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 8001744:	f107 0217 	add.w	r2, r7, #23
 8001748:	f107 0118 	add.w	r1, r7, #24
 800174c:	f107 001c 	add.w	r0, r7, #28
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	f000 fa09 	bl	8001b68 <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 8001756:	68f9      	ldr	r1, [r7, #12]
 8001758:	2040      	movs	r0, #64	; 0x40
 800175a:	f000 fb28 	bl	8001dae <are_settings_changed>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d008      	beq.n	8001776 <set_odr_filter_settings+0x9a>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 8001764:	f107 0217 	add.w	r2, r7, #23
 8001768:	f107 0118 	add.w	r1, r7, #24
 800176c:	f107 001c 	add.w	r0, r7, #28
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	f000 fa33 	bl	8001bdc <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d104      	bne.n	8001788 <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 800177e:	68b8      	ldr	r0, [r7, #8]
 8001780:	f000 f904 	bl	800198c <validate_osr_and_odr_settings>
 8001784:	4603      	mov	r3, r0
 8001786:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 8001788:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10a      	bne.n	80017a6 <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	461a      	mov	r2, r3
 8001794:	f107 0118 	add.w	r1, r7, #24
 8001798:	f107 001c 	add.w	r0, r7, #28
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f7ff fc7c 	bl	800109a <bmp3_set_regs>
 80017a2:	4603      	mov	r3, r0
 80017a4:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 80017a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3720      	adds	r7, #32
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	08016a98 	.word	0x08016a98

080017b8 <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 80017c4:	2319      	movs	r3, #25
 80017c6:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80017c8:	7d78      	ldrb	r0, [r7, #21]
 80017ca:	f107 0116 	add.w	r1, r7, #22
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f7ff fbd2 	bl	8000f7a <bmp3_get_regs>
 80017d6:	4603      	mov	r3, r0
 80017d8:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 80017da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d15e      	bne.n	80018a0 <set_int_ctrl_settings+0xe8>
    {
        int_settings = settings->int_settings;
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	3207      	adds	r2, #7
 80017ea:	6810      	ldr	r0, [r2, #0]
 80017ec:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00d      	beq.n	8001814 <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 80017f8:	7dbb      	ldrb	r3, [r7, #22]
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	b25a      	sxtb	r2, r3
 8001802:	7c3b      	ldrb	r3, [r7, #16]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	b25b      	sxtb	r3, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	b25b      	sxtb	r3, r3
 8001810:	b2db      	uxtb	r3, r3
 8001812:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00e      	beq.n	800183c <set_int_ctrl_settings+0x84>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 800181e:	7dbb      	ldrb	r3, [r7, #22]
 8001820:	b25b      	sxtb	r3, r3
 8001822:	f023 0302 	bic.w	r3, r3, #2
 8001826:	b25a      	sxtb	r2, r3
 8001828:	7c7b      	ldrb	r3, [r7, #17]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	b25b      	sxtb	r3, r3
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	b25b      	sxtb	r3, r3
 8001834:	4313      	orrs	r3, r2
 8001836:	b25b      	sxtb	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00e      	beq.n	8001864 <set_int_ctrl_settings+0xac>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 8001846:	7dbb      	ldrb	r3, [r7, #22]
 8001848:	b25b      	sxtb	r3, r3
 800184a:	f023 0304 	bic.w	r3, r3, #4
 800184e:	b25a      	sxtb	r2, r3
 8001850:	7cbb      	ldrb	r3, [r7, #18]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	b25b      	sxtb	r3, r3
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	b25b      	sxtb	r3, r3
 800185c:	4313      	orrs	r3, r2
 800185e:	b25b      	sxtb	r3, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00e      	beq.n	800188c <set_int_ctrl_settings+0xd4>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 800186e:	7dbb      	ldrb	r3, [r7, #22]
 8001870:	b25b      	sxtb	r3, r3
 8001872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001876:	b25a      	sxtb	r2, r3
 8001878:	7cfb      	ldrb	r3, [r7, #19]
 800187a:	019b      	lsls	r3, r3, #6
 800187c:	b25b      	sxtb	r3, r3
 800187e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001882:	b25b      	sxtb	r3, r3
 8001884:	4313      	orrs	r3, r2
 8001886:	b25b      	sxtb	r3, r3
 8001888:	b2db      	uxtb	r3, r3
 800188a:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 800188c:	f107 0116 	add.w	r1, r7, #22
 8001890:	f107 0015 	add.w	r0, r7, #21
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f7ff fbff 	bl	800109a <bmp3_set_regs>
 800189c:	4603      	mov	r3, r0
 800189e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80018a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	f107 0310 	add.w	r3, r7, #16
 80018be:	320b      	adds	r2, #11
 80018c0:	8812      	ldrh	r2, [r2, #0]
 80018c2:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 80018c4:	231a      	movs	r3, #26
 80018c6:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80018c8:	7db8      	ldrb	r0, [r7, #22]
 80018ca:	f107 0115 	add.w	r1, r7, #21
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f7ff fb52 	bl	8000f7a <bmp3_get_regs>
 80018d6:	4603      	mov	r3, r0
 80018d8:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 80018da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d131      	bne.n	8001946 <set_advance_settings+0x9a>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00e      	beq.n	800190a <set_advance_settings+0x5e>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 80018ec:	7d7b      	ldrb	r3, [r7, #21]
 80018ee:	b25b      	sxtb	r3, r3
 80018f0:	f023 0302 	bic.w	r3, r3, #2
 80018f4:	b25a      	sxtb	r2, r3
 80018f6:	7c3b      	ldrb	r3, [r7, #16]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	b25b      	sxtb	r3, r3
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	b25b      	sxtb	r3, r3
 8001902:	4313      	orrs	r3, r2
 8001904:	b25b      	sxtb	r3, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00e      	beq.n	8001932 <set_advance_settings+0x86>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8001914:	7d7b      	ldrb	r3, [r7, #21]
 8001916:	b25b      	sxtb	r3, r3
 8001918:	f023 0304 	bic.w	r3, r3, #4
 800191c:	b25a      	sxtb	r2, r3
 800191e:	7c7b      	ldrb	r3, [r7, #17]
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	b25b      	sxtb	r3, r3
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	b25b      	sxtb	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	b25b      	sxtb	r3, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001932:	f107 0115 	add.w	r1, r7, #21
 8001936:	f107 0016 	add.w	r0, r7, #22
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f7ff fbac 	bl	800109a <bmp3_set_regs>
 8001942:	4603      	mov	r3, r0
 8001944:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001946:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b084      	sub	sp, #16
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 800195c:	f107 0108 	add.w	r1, r7, #8
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2204      	movs	r2, #4
 8001964:	201c      	movs	r0, #28
 8001966:	f7ff fb08 	bl	8000f7a <bmp3_get_regs>
 800196a:	4603      	mov	r3, r0
 800196c:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	1cda      	adds	r2, r3, #3
 8001972:	f107 0308 	add.w	r3, r7, #8
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fe26 	bl	80015ca <parse_odr_filter_settings>

    return rslt;
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b098      	sub	sp, #96	; 0x60
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8001994:	23ea      	movs	r3, #234	; 0xea
 8001996:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 800199c:	4a1a      	ldr	r2, [pc, #104]	; (8001a08 <validate_osr_and_odr_settings+0x7c>)
 800199e:	f107 030c 	add.w	r3, r7, #12
 80019a2:	4611      	mov	r1, r2
 80019a4:	2248      	movs	r2, #72	; 0x48
 80019a6:	4618      	mov	r0, r3
 80019a8:	f012 fb3a 	bl	8014020 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	785b      	ldrb	r3, [r3, #1]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d006      	beq.n	80019c2 <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f83f 	bl	8001a38 <calculate_press_meas_time>
 80019ba:	4602      	mov	r2, r0
 80019bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019be:	4413      	add	r3, r2
 80019c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (settings->temp_en)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	789b      	ldrb	r3, [r3, #2]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f854 	bl	8001a78 <calculate_temp_meas_time>
 80019d0:	4602      	mov	r2, r0
 80019d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d4:	4413      	add	r3, r2
 80019d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 80019d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019dc:	4413      	add	r3, r2
 80019de:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	799b      	ldrb	r3, [r3, #6]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	3360      	adds	r3, #96	; 0x60
 80019e8:	443b      	add	r3, r7
 80019ea:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80019ee:	4619      	mov	r1, r3
 80019f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80019f2:	f000 f80b 	bl	8001a0c <verify_meas_time_and_odr_duration>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 80019fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3760      	adds	r7, #96	; 0x60
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	08016a9c 	.word	0x08016a9c

08001a0c <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d202      	bcs.n	8001a24 <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	e001      	b.n	8001a28 <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8001a24:	23fd      	movs	r3, #253	; 0xfd
 8001a26:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	f107 0308 	add.w	r3, r7, #8
 8001a46:	3203      	adds	r2, #3
 8001a48:	6810      	ldr	r0, [r2, #0]
 8001a4a:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
    float partial_out;
#else
    uint8_t base = 2;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	75fb      	strb	r3, [r7, #23]
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8001a50:	7a3a      	ldrb	r2, [r7, #8]
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
 8001a54:	4611      	mov	r1, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f98c 	bl	8001d74 <pow_bmp3>
 8001a5c:	6138      	str	r0, [r7, #16]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a64:	fb02 f303 	mul.w	r3, r2, r3
 8001a68:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001a6c:	60fb      	str	r3, [r7, #12]

    /* Output in microseconds */
    return press_meas_t;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	3203      	adds	r2, #3
 8001a88:	6810      	ldr	r0, [r2, #0]
 8001a8a:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
    float partial_out;
#else
    uint8_t base = 2;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	75fb      	strb	r3, [r7, #23]
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8001a90:	7a7a      	ldrb	r2, [r7, #9]
 8001a92:	7dfb      	ldrb	r3, [r7, #23]
 8001a94:	4611      	mov	r1, r2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f96c 	bl	8001d74 <pow_bmp3>
 8001a9c:	6138      	str	r0, [r7, #16]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001aa4:	fb02 f303 	mul.w	r3, r2, r3
 8001aa8:	f203 1339 	addw	r3, r3, #313	; 0x139
 8001aac:	60fb      	str	r3, [r7, #12]

    /* Output in uint32_t */
    return temp_meas_t;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001ac6:	6a3a      	ldr	r2, [r7, #32]
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	3203      	adds	r2, #3
 8001ace:	6810      	ldr	r0, [r2, #0]
 8001ad0:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d03f      	beq.n	8001b5c <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d013      	beq.n	8001b0e <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	b25b      	sxtb	r3, r3
 8001aec:	f023 0307 	bic.w	r3, r3, #7
 8001af0:	b25a      	sxtb	r2, r3
 8001af2:	7d3b      	ldrb	r3, [r7, #20]
 8001af4:	b25b      	sxtb	r3, r3
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	b25b      	sxtb	r3, r3
 8001afc:	4313      	orrs	r3, r2
 8001afe:	b25a      	sxtb	r2, r3
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	440b      	add	r3, r1
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f003 0320 	and.w	r3, r3, #32
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d014      	beq.n	8001b42 <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	b25b      	sxtb	r3, r3
 8001b1e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001b22:	b25a      	sxtb	r2, r3
 8001b24:	7d7b      	ldrb	r3, [r7, #21]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	b25b      	sxtb	r3, r3
 8001b2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b2e:	b25b      	sxtb	r3, r3
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b25a      	sxtb	r2, r3
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	440b      	add	r3, r1
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	221c      	movs	r2, #28
 8001b4e:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	701a      	strb	r2, [r3, #0]
    }
}
 8001b5c:	bf00      	nop
 8001b5e:	371c      	adds	r7, #28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
 8001b74:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	3303      	adds	r3, #3
 8001b7a:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	78db      	ldrb	r3, [r3, #3]
 8001b80:	2b11      	cmp	r3, #17
 8001b82:	d902      	bls.n	8001b8a <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	2211      	movs	r2, #17
 8001b88:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b25b      	sxtb	r3, r3
 8001b92:	f023 031f 	bic.w	r3, r3, #31
 8001b96:	b25a      	sxtb	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	78db      	ldrb	r3, [r3, #3]
 8001b9c:	b25b      	sxtb	r3, r3
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	b25b      	sxtb	r3, r3
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	b25a      	sxtb	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	440b      	add	r3, r1
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	221d      	movs	r2, #29
 8001bc2:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	701a      	strb	r2, [r3, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b087      	sub	sp, #28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	3203      	adds	r2, #3
 8001bf2:	6810      	ldr	r0, [r2, #0]
 8001bf4:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	3303      	adds	r3, #3
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	b25b      	sxtb	r3, r3
 8001bfe:	f023 030e 	bic.w	r3, r3, #14
 8001c02:	b25a      	sxtb	r2, r3
 8001c04:	7dbb      	ldrb	r3, [r7, #22]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	b25b      	sxtb	r3, r3
 8001c0a:	f003 030e 	and.w	r3, r3, #14
 8001c0e:	b25b      	sxtb	r3, r3
 8001c10:	4313      	orrs	r3, r2
 8001c12:	b25a      	sxtb	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	440b      	add	r3, r1
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	221f      	movs	r2, #31
 8001c2e:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	701a      	strb	r2, [r3, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	371c      	adds	r7, #28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	3318      	adds	r3, #24
 8001c56:	60fb      	str	r3, [r7, #12]

    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	b21a      	sxth	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	801a      	strh	r2, [r3, #0]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3303      	adds	r3, #3
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3302      	adds	r3, #2
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	b21b      	sxth	r3, r3
 8001c84:	4313      	orrs	r3, r2
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	805a      	strh	r2, [r3, #2]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3304      	adds	r3, #4
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	b25a      	sxtb	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	711a      	strb	r2, [r3, #4]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3306      	adds	r3, #6
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3305      	adds	r3, #5
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	4313      	orrs	r3, r2
 8001cae:	b21a      	sxth	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	80da      	strh	r2, [r3, #6]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3308      	adds	r3, #8
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	021b      	lsls	r3, r3, #8
 8001cbc:	b21a      	sxth	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3307      	adds	r3, #7
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b21b      	sxth	r3, r3
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	b21a      	sxth	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	811a      	strh	r2, [r3, #8]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3309      	adds	r3, #9
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	b25a      	sxtb	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	729a      	strb	r2, [r3, #10]
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	330a      	adds	r3, #10
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b25a      	sxtb	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	72da      	strb	r2, [r3, #11]
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	330c      	adds	r3, #12
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	b21a      	sxth	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	330b      	adds	r3, #11
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	819a      	strh	r2, [r3, #12]
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	330e      	adds	r3, #14
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21a      	sxth	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	330d      	adds	r3, #13
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	4313      	orrs	r3, r2
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	81da      	strh	r2, [r3, #14]
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	330f      	adds	r3, #15
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	b25a      	sxtb	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	741a      	strb	r2, [r3, #16]
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3310      	adds	r3, #16
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	b25a      	sxtb	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	745a      	strb	r2, [r3, #17]
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3312      	adds	r3, #18
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	b21a      	sxth	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3311      	adds	r3, #17
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	b21a      	sxth	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	825a      	strh	r2, [r3, #18]
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3313      	adds	r3, #19
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	b25a      	sxtb	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	751a      	strb	r2, [r3, #20]
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3314      	adds	r3, #20
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	b25a      	sxtb	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	755a      	strb	r2, [r3, #21]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <pow_bmp3>:

/*!
 * @brief This internal API is used to calculate the power functionality.
 */
static uint32_t pow_bmp3(uint8_t base, uint8_t power)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	460a      	mov	r2, r1
 8001d7e:	71fb      	strb	r3, [r7, #7]
 8001d80:	4613      	mov	r3, r2
 8001d82:	71bb      	strb	r3, [r7, #6]
    uint32_t pow_output = 1;
 8001d84:	2301      	movs	r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]

    while (power != 0)
 8001d88:	e007      	b.n	8001d9a <pow_bmp3+0x26>
    {
        pow_output = base * pow_output;
 8001d8a:	79fa      	ldrb	r2, [r7, #7]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	fb02 f303 	mul.w	r3, r2, r3
 8001d92:	60fb      	str	r3, [r7, #12]
        power--;
 8001d94:	79bb      	ldrb	r3, [r7, #6]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	71bb      	strb	r3, [r7, #6]
    while (power != 0)
 8001d9a:	79bb      	ldrb	r3, [r7, #6]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f4      	bne.n	8001d8a <pow_bmp3+0x16>
    }

    return pow_output;
 8001da0:	68fb      	ldr	r3, [r7, #12]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b085      	sub	sp, #20
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d002      	beq.n	8001dcc <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	73fb      	strb	r3, [r7, #15]
 8001dca:	e001      	b.n	8001dd0 <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b085      	sub	sp, #20
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00f      	beq.n	8001e0c <null_ptr_check+0x2e>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00b      	beq.n	8001e0c <null_ptr_check+0x2e>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <null_ptr_check+0x2e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 8001e0c:	23ff      	movs	r3, #255	; 0xff
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e001      	b.n	8001e16 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <BMP390_Read>:
static struct bmp3_data data = { 0 };
static struct bmp3_settings settings = { 0 };
static struct bmp3_status status = { { 0 } };
static I2C_HandleTypeDef *bmp390_phi2c;

BMP3_INTF_RET_TYPE BMP390_Read(uint8_t reg_addr, uint8_t *read_data, uint32_t len, void *intf_ptr){
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b088      	sub	sp, #32
 8001e2a:	af04      	add	r7, sp, #16
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	4603      	mov	r3, r0
 8001e34:	73fb      	strb	r3, [r7, #15]
	return HAL_I2C_Mem_Read(
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	2164      	movs	r1, #100	; 0x64
 8001e40:	9102      	str	r1, [sp, #8]
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	2301      	movs	r3, #1
 8001e4a:	21ee      	movs	r1, #238	; 0xee
 8001e4c:	6838      	ldr	r0, [r7, #0]
 8001e4e:	f003 f9a3 	bl	8005198 <HAL_I2C_Mem_Read>
 8001e52:	4603      	mov	r3, r0
 8001e54:	b25b      	sxtb	r3, r3
			reg_addr,
			I2C_MEMADD_SIZE_8BIT,
			read_data,
			len,
			BMP390_I2C_TIMEOUT);
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <BMP390_Write>:
BMP3_INTF_RET_TYPE BMP390_Write(uint8_t reg_addr, const uint8_t *read_data, uint32_t len, void *intf_ptr){
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b088      	sub	sp, #32
 8001e62:	af04      	add	r7, sp, #16
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	73fb      	strb	r3, [r7, #15]
	return HAL_I2C_Mem_Write(
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	2164      	movs	r1, #100	; 0x64
 8001e78:	9102      	str	r1, [sp, #8]
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2301      	movs	r3, #1
 8001e82:	21ee      	movs	r1, #238	; 0xee
 8001e84:	6838      	ldr	r0, [r7, #0]
 8001e86:	f003 f88d 	bl	8004fa4 <HAL_I2C_Mem_Write>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	b25b      	sxtb	r3, r3
			I2C_MEMADD_SIZE_8BIT,
			read_data,
			len,
			BMP390_I2C_TIMEOUT
	);
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <BMP390_DelayUs>:
void BMP390_DelayUs(uint32_t period, void *intf_ptr){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
	/* bmp3.c only requires ms delay, so i'll just use millisecond delay function */
	uint32_t delay = period / 1000;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <BMP390_DelayUs+0x24>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	099b      	lsrs	r3, r3, #6
 8001eac:	60fb      	str	r3, [r7, #12]
	HAL_Delay(delay);
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f001 fe3e 	bl	8003b30 <HAL_Delay>
}
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	10624dd3 	.word	0x10624dd3

08001ec0 <BMP390_Init>:
void BMP390_Init(void){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af04      	add	r7, sp, #16
	HAL_Delay(100);
 8001ec6:	2064      	movs	r0, #100	; 0x64
 8001ec8:	f001 fe32 	bl	8003b30 <HAL_Delay>
	bmp390dev.chip_id = BMP390_CHIP_ID;
 8001ecc:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <BMP390_Init+0xa0>)
 8001ece:	2260      	movs	r2, #96	; 0x60
 8001ed0:	701a      	strb	r2, [r3, #0]
	bmp390dev.intf_ptr = bmp390_phi2c;
 8001ed2:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <BMP390_Init+0xa4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a22      	ldr	r2, [pc, #136]	; (8001f60 <BMP390_Init+0xa0>)
 8001ed8:	6053      	str	r3, [r2, #4]
	bmp390dev.intf = BMP3_I2C_INTF;
 8001eda:	4b21      	ldr	r3, [pc, #132]	; (8001f60 <BMP390_Init+0xa0>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	721a      	strb	r2, [r3, #8]
	bmp390dev.read = BMP390_Read;
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <BMP390_Init+0xa0>)
 8001ee2:	4a21      	ldr	r2, [pc, #132]	; (8001f68 <BMP390_Init+0xa8>)
 8001ee4:	60da      	str	r2, [r3, #12]
	bmp390dev.write = BMP390_Write;
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <BMP390_Init+0xa0>)
 8001ee8:	4a20      	ldr	r2, [pc, #128]	; (8001f6c <BMP390_Init+0xac>)
 8001eea:	611a      	str	r2, [r3, #16]
	bmp390dev.delay_us = BMP390_DelayUs;
 8001eec:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <BMP390_Init+0xa0>)
 8001eee:	4a20      	ldr	r2, [pc, #128]	; (8001f70 <BMP390_Init+0xb0>)
 8001ef0:	615a      	str	r2, [r3, #20]

	// Force soft reset
	uint8_t buf = 0xB6;
 8001ef2:	23b6      	movs	r3, #182	; 0xb6
 8001ef4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(bmp390dev.intf_ptr, BMP3_ADDR_I2C_SEC << 1, 0x7E, I2C_MEMADD_SIZE_8BIT, &buf, 1, 100);
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <BMP390_Init+0xa0>)
 8001ef8:	6858      	ldr	r0, [r3, #4]
 8001efa:	2364      	movs	r3, #100	; 0x64
 8001efc:	9302      	str	r3, [sp, #8]
 8001efe:	2301      	movs	r3, #1
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	1dfb      	adds	r3, r7, #7
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2301      	movs	r3, #1
 8001f08:	227e      	movs	r2, #126	; 0x7e
 8001f0a:	21ee      	movs	r1, #238	; 0xee
 8001f0c:	f003 f84a 	bl	8004fa4 <HAL_I2C_Mem_Write>
	bmp3_init(&bmp390dev);
 8001f10:	4813      	ldr	r0, [pc, #76]	; (8001f60 <BMP390_Init+0xa0>)
 8001f12:	f7fe ffeb 	bl	8000eec <bmp3_init>

	settings.press_en = BMP3_ENABLE;
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <BMP390_Init+0xb4>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	705a      	strb	r2, [r3, #1]
	settings.temp_en = BMP3_ENABLE;
 8001f1c:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <BMP390_Init+0xb4>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	709a      	strb	r2, [r3, #2]

	settings.odr_filter.press_os = BMP3_OVERSAMPLING_8X;
 8001f22:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <BMP390_Init+0xb4>)
 8001f24:	2203      	movs	r2, #3
 8001f26:	70da      	strb	r2, [r3, #3]
	settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <BMP390_Init+0xb4>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	711a      	strb	r2, [r3, #4]
	settings.odr_filter.odr = BMP3_ODR_50_HZ;
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <BMP390_Init+0xb4>)
 8001f30:	2202      	movs	r2, #2
 8001f32:	719a      	strb	r2, [r3, #6]

	settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR;
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <BMP390_Init+0xb8>)
 8001f36:	22b6      	movs	r2, #182	; 0xb6
 8001f38:	801a      	strh	r2, [r3, #0]
	bmp3_set_sensor_settings(settings_sel, &settings, &bmp390dev);
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <BMP390_Init+0xb8>)
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	4a08      	ldr	r2, [pc, #32]	; (8001f60 <BMP390_Init+0xa0>)
 8001f40:	490c      	ldr	r1, [pc, #48]	; (8001f74 <BMP390_Init+0xb4>)
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff f93a 	bl	80011bc <bmp3_set_sensor_settings>

	settings.op_mode = BMP3_MODE_NORMAL;
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <BMP390_Init+0xb4>)
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	701a      	strb	r2, [r3, #0]
	bmp3_set_op_mode(&settings, &bmp390dev);
 8001f4e:	4904      	ldr	r1, [pc, #16]	; (8001f60 <BMP390_Init+0xa0>)
 8001f50:	4808      	ldr	r0, [pc, #32]	; (8001f74 <BMP390_Init+0xb4>)
 8001f52:	f7ff f9cb 	bl	80012ec <bmp3_set_op_mode>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000318 	.word	0x20000318
 8001f64:	20000360 	.word	0x20000360
 8001f68:	08001e27 	.word	0x08001e27
 8001f6c:	08001e5f 	.word	0x08001e5f
 8001f70:	08001e99 	.word	0x08001e99
 8001f74:	20000350 	.word	0x20000350
 8001f78:	20000314 	.word	0x20000314

08001f7c <BMP390_AssignI2C>:
	*pPressure		= data.pressure;

	return HAL_OK;

}
void BMP390_AssignI2C(I2C_HandleTypeDef *phi2c){
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	bmp390_phi2c = phi2c;
 8001f84:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <BMP390_AssignI2C+0x1c>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6013      	str	r3, [r2, #0]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000360 	.word	0x20000360

08001f9c <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	2007      	movs	r0, #7
 8001fac:	f000 f87a 	bl	80020a4 <bno055_writeData>
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	203d      	movs	r0, #61	; 0x3d
 8001fc8:	f000 f86c 	bl	80020a4 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d103      	bne.n	8001fda <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8001fd2:	2013      	movs	r0, #19
 8001fd4:	f000 f85a 	bl	800208c <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001fd8:	e002      	b.n	8001fe0 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001fda:	2007      	movs	r0, #7
 8001fdc:	f000 f856 	bl	800208c <bno055_delay>
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7ff ffe3 	bl	8001fb8 <bno055_setOperationMode>
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001ffa:	200c      	movs	r0, #12
 8001ffc:	f7ff ffdc 	bl	8001fb8 <bno055_setOperationMode>
}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}

08002004 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(1); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(0); }

void bno055_reset() {
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8002008:	2120      	movs	r1, #32
 800200a:	203f      	movs	r0, #63	; 0x3f
 800200c:	f000 f84a 	bl	80020a4 <bno055_writeData>
  bno055_delay(700);
 8002010:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002014:	f000 f83a 	bl	800208c <bno055_delay>
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}

0800201c <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
  bno055_reset();
 8002022:	f7ff ffef 	bl	8002004 <bno055_reset>

  uint8_t id = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800202a:	1dfb      	adds	r3, r7, #7
 800202c:	2201      	movs	r2, #1
 800202e:	4619      	mov	r1, r3
 8002030:	2000      	movs	r0, #0
 8002032:	f000 f923 	bl	800227c <bno055_readData>
  if (id != BNO055_ID) {
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	2ba0      	cmp	r3, #160	; 0xa0
 800203a:	d004      	beq.n	8002046 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	4619      	mov	r1, r3
 8002040:	4809      	ldr	r0, [pc, #36]	; (8002068 <bno055_setup+0x4c>)
 8002042:	f012 fd4d 	bl	8014ae0 <iprintf>
  }
  bno055_setPage(0);
 8002046:	2000      	movs	r0, #0
 8002048:	f7ff ffa8 	bl	8001f9c <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 800204c:	2100      	movs	r1, #0
 800204e:	203f      	movs	r0, #63	; 0x3f
 8002050:	f000 f828 	bl	80020a4 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8002054:	f7ff ffc8 	bl	8001fe8 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8002058:	200a      	movs	r0, #10
 800205a:	f000 f817 	bl	800208c <bno055_delay>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	08016ae4 	.word	0x08016ae4

0800206c <bno055_assignI2C>:

#include "module/bno055/bno055_stm32.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8002074:	4a04      	ldr	r2, [pc, #16]	; (8002088 <bno055_assignI2C+0x1c>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6013      	str	r3, [r2, #0]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000364 	.word	0x20000364

0800208c <bno055_delay>:

void bno055_delay(int time) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4618      	mov	r0, r3
 8002098:	f001 fd4a 	bl	8003b30 <HAL_Delay>
#endif
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af02      	add	r7, sp, #8
 80020aa:	4603      	mov	r3, r0
 80020ac:	460a      	mov	r2, r1
 80020ae:	71fb      	strb	r3, [r7, #7]
 80020b0:	4613      	mov	r3, r2
 80020b2:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	733b      	strb	r3, [r7, #12]
 80020b8:	79bb      	ldrb	r3, [r7, #6]
 80020ba:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80020bc:	4b5a      	ldr	r3, [pc, #360]	; (8002228 <bno055_writeData+0x184>)
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	f107 020c 	add.w	r2, r7, #12
 80020c4:	230a      	movs	r3, #10
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	2302      	movs	r3, #2
 80020ca:	2150      	movs	r1, #80	; 0x50
 80020cc:	f002 fc46 	bl	800495c <HAL_I2C_Master_Transmit>
 80020d0:	4603      	mov	r3, r0
 80020d2:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80020d4:	7dfb      	ldrb	r3, [r7, #23]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 80a0 	beq.w	800221c <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80020dc:	7dfb      	ldrb	r3, [r7, #23]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d103      	bne.n	80020ea <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80020e2:	4852      	ldr	r0, [pc, #328]	; (800222c <bno055_writeData+0x188>)
 80020e4:	f012 fd82 	bl	8014bec <puts>
 80020e8:	e012      	b.n	8002110 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d103      	bne.n	80020f8 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80020f0:	484f      	ldr	r0, [pc, #316]	; (8002230 <bno055_writeData+0x18c>)
 80020f2:	f012 fd7b 	bl	8014bec <puts>
 80020f6:	e00b      	b.n	8002110 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d103      	bne.n	8002106 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80020fe:	484d      	ldr	r0, [pc, #308]	; (8002234 <bno055_writeData+0x190>)
 8002100:	f012 fd74 	bl	8014bec <puts>
 8002104:	e004      	b.n	8002110 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8002106:	7dfb      	ldrb	r3, [r7, #23]
 8002108:	4619      	mov	r1, r3
 800210a:	484b      	ldr	r0, [pc, #300]	; (8002238 <bno055_writeData+0x194>)
 800210c:	f012 fce8 	bl	8014ae0 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8002110:	4b45      	ldr	r3, [pc, #276]	; (8002228 <bno055_writeData+0x184>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f003 fa73 	bl	8005600 <HAL_I2C_GetError>
 800211a:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d07e      	beq.n	8002220 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d103      	bne.n	8002130 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8002128:	4844      	ldr	r0, [pc, #272]	; (800223c <bno055_writeData+0x198>)
 800212a:	f012 fd5f 	bl	8014bec <puts>
 800212e:	e021      	b.n	8002174 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d103      	bne.n	800213e <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8002136:	4842      	ldr	r0, [pc, #264]	; (8002240 <bno055_writeData+0x19c>)
 8002138:	f012 fd58 	bl	8014bec <puts>
 800213c:	e01a      	b.n	8002174 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b04      	cmp	r3, #4
 8002142:	d103      	bne.n	800214c <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8002144:	483f      	ldr	r0, [pc, #252]	; (8002244 <bno055_writeData+0x1a0>)
 8002146:	f012 fd51 	bl	8014bec <puts>
 800214a:	e013      	b.n	8002174 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	2b08      	cmp	r3, #8
 8002150:	d103      	bne.n	800215a <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8002152:	483d      	ldr	r0, [pc, #244]	; (8002248 <bno055_writeData+0x1a4>)
 8002154:	f012 fd4a 	bl	8014bec <puts>
 8002158:	e00c      	b.n	8002174 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b10      	cmp	r3, #16
 800215e:	d103      	bne.n	8002168 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8002160:	483a      	ldr	r0, [pc, #232]	; (800224c <bno055_writeData+0x1a8>)
 8002162:	f012 fd43 	bl	8014bec <puts>
 8002166:	e005      	b.n	8002174 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	2b20      	cmp	r3, #32
 800216c:	d102      	bne.n	8002174 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800216e:	4838      	ldr	r0, [pc, #224]	; (8002250 <bno055_writeData+0x1ac>)
 8002170:	f012 fd3c 	bl	8014bec <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8002174:	4b2c      	ldr	r3, [pc, #176]	; (8002228 <bno055_writeData+0x184>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f003 fa33 	bl	80055e4 <HAL_I2C_GetState>
 800217e:	4603      	mov	r3, r0
 8002180:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d103      	bne.n	8002190 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8002188:	4832      	ldr	r0, [pc, #200]	; (8002254 <bno055_writeData+0x1b0>)
 800218a:	f012 fd2f 	bl	8014bec <puts>
 800218e:	e048      	b.n	8002222 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	2b20      	cmp	r3, #32
 8002194:	d103      	bne.n	800219e <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8002196:	482f      	ldr	r0, [pc, #188]	; (8002254 <bno055_writeData+0x1b0>)
 8002198:	f012 fd28 	bl	8014bec <puts>
 800219c:	e041      	b.n	8002222 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	2b24      	cmp	r3, #36	; 0x24
 80021a2:	d103      	bne.n	80021ac <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80021a4:	482c      	ldr	r0, [pc, #176]	; (8002258 <bno055_writeData+0x1b4>)
 80021a6:	f012 fd21 	bl	8014bec <puts>
 80021aa:	e03a      	b.n	8002222 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	2b21      	cmp	r3, #33	; 0x21
 80021b0:	d103      	bne.n	80021ba <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80021b2:	482a      	ldr	r0, [pc, #168]	; (800225c <bno055_writeData+0x1b8>)
 80021b4:	f012 fd1a 	bl	8014bec <puts>
 80021b8:	e033      	b.n	8002222 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	2b22      	cmp	r3, #34	; 0x22
 80021be:	d103      	bne.n	80021c8 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80021c0:	4827      	ldr	r0, [pc, #156]	; (8002260 <bno055_writeData+0x1bc>)
 80021c2:	f012 fd13 	bl	8014bec <puts>
 80021c6:	e02c      	b.n	8002222 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	2b28      	cmp	r3, #40	; 0x28
 80021cc:	d103      	bne.n	80021d6 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80021ce:	4825      	ldr	r0, [pc, #148]	; (8002264 <bno055_writeData+0x1c0>)
 80021d0:	f012 fd0c 	bl	8014bec <puts>
 80021d4:	e025      	b.n	8002222 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	2b29      	cmp	r3, #41	; 0x29
 80021da:	d103      	bne.n	80021e4 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80021dc:	4822      	ldr	r0, [pc, #136]	; (8002268 <bno055_writeData+0x1c4>)
 80021de:	f012 fd05 	bl	8014bec <puts>
 80021e2:	e01e      	b.n	8002222 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	2b2a      	cmp	r3, #42	; 0x2a
 80021e8:	d103      	bne.n	80021f2 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80021ea:	4820      	ldr	r0, [pc, #128]	; (800226c <bno055_writeData+0x1c8>)
 80021ec:	f012 fcfe 	bl	8014bec <puts>
 80021f0:	e017      	b.n	8002222 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
 80021f4:	2b60      	cmp	r3, #96	; 0x60
 80021f6:	d103      	bne.n	8002200 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80021f8:	481d      	ldr	r0, [pc, #116]	; (8002270 <bno055_writeData+0x1cc>)
 80021fa:	f012 fcf7 	bl	8014bec <puts>
 80021fe:	e010      	b.n	8002222 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	2ba0      	cmp	r3, #160	; 0xa0
 8002204:	d103      	bne.n	800220e <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8002206:	481b      	ldr	r0, [pc, #108]	; (8002274 <bno055_writeData+0x1d0>)
 8002208:	f012 fcf0 	bl	8014bec <puts>
 800220c:	e009      	b.n	8002222 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	2be0      	cmp	r3, #224	; 0xe0
 8002212:	d106      	bne.n	8002222 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8002214:	4818      	ldr	r0, [pc, #96]	; (8002278 <bno055_writeData+0x1d4>)
 8002216:	f012 fce9 	bl	8014bec <puts>
 800221a:	e002      	b.n	8002222 <bno055_writeData+0x17e>
    return;
 800221c:	bf00      	nop
 800221e:	e000      	b.n	8002222 <bno055_writeData+0x17e>
    return;
 8002220:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000364 	.word	0x20000364
 800222c:	08016b20 	.word	0x08016b20
 8002230:	08016b44 	.word	0x08016b44
 8002234:	08016b6c 	.word	0x08016b6c
 8002238:	08016b90 	.word	0x08016b90
 800223c:	08016ba8 	.word	0x08016ba8
 8002240:	08016bbc 	.word	0x08016bbc
 8002244:	08016bd0 	.word	0x08016bd0
 8002248:	08016be4 	.word	0x08016be4
 800224c:	08016bf8 	.word	0x08016bf8
 8002250:	08016c0c 	.word	0x08016c0c
 8002254:	08016c24 	.word	0x08016c24
 8002258:	08016c3c 	.word	0x08016c3c
 800225c:	08016c50 	.word	0x08016c50
 8002260:	08016c68 	.word	0x08016c68
 8002264:	08016c80 	.word	0x08016c80
 8002268:	08016c98 	.word	0x08016c98
 800226c:	08016cb8 	.word	0x08016cb8
 8002270:	08016cd8 	.word	0x08016cd8
 8002274:	08016cf0 	.word	0x08016cf0
 8002278:	08016d08 	.word	0x08016d08

0800227c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af02      	add	r7, sp, #8
 8002282:	4603      	mov	r3, r0
 8002284:	6039      	str	r1, [r7, #0]
 8002286:	71fb      	strb	r3, [r7, #7]
 8002288:	4613      	mov	r3, r2
 800228a:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <bno055_readData+0x40>)
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	1dfa      	adds	r2, r7, #7
 8002292:	2364      	movs	r3, #100	; 0x64
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	2301      	movs	r3, #1
 8002298:	2150      	movs	r1, #80	; 0x50
 800229a:	f002 fb5f 	bl	800495c <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <bno055_readData+0x40>)
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	79bb      	ldrb	r3, [r7, #6]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	2264      	movs	r2, #100	; 0x64
 80022a8:	9200      	str	r2, [sp, #0]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	2150      	movs	r1, #80	; 0x50
 80022ae:	f002 fc53 	bl	8004b58 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000364 	.word	0x20000364

080022c0 <SD_Assign>:
static volatile DSTATUS Stat = STA_NOINIT;              /* 디스크 상태 Flag*/
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* assign */
void SD_Assign(SPI_HandleTypeDef *phspi){
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	_sd_phspi = phspi;
 80022c8:	4a04      	ldr	r2, [pc, #16]	; (80022dc <SD_Assign+0x1c>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6013      	str	r3, [r2, #0]
	return;
 80022ce:	bf00      	nop
}
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000368 	.word	0x20000368

080022e0 <Servo_Attach>:
 *      Author: SURFACE
 */

#include "module/servo/servo.h"

void Servo_Attach(Servo_HandleTypeDef *servo, TIM_HandleTypeDef *htim, uint32_t channel){
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
	servo->htim 	= htim;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	601a      	str	r2, [r3, #0]
	servo->channel 	= channel;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	605a      	str	r2, [r3, #4]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800230c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002310:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d013      	beq.n	8002344 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800231c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002320:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002324:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00b      	beq.n	8002344 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800232c:	e000      	b.n	8002330 <ITM_SendChar+0x2c>
    {
      __NOP();
 800232e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002330:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f9      	beq.n	800232e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800233a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002344:	687b      	ldr	r3, [r7, #4]
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <_write>:
#include "stdarg.h"

uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	b29b      	uxth	r3, r3
 8002362:	4619      	mov	r1, r3
 8002364:	68b8      	ldr	r0, [r7, #8]
 8002366:	f011 f861 	bl	801342c <CDC_Transmit_FS>
	for(int i = 0; i < len; i++)
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	e009      	b.n	8002384 <_write+0x32>
	{
		ITM_SendChar(*ptr++);
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	60ba      	str	r2, [r7, #8]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ffc3 	bl	8002304 <ITM_SendChar>
	for(int i = 0; i < len; i++)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	3301      	adds	r3, #1
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	429a      	cmp	r2, r3
 800238a:	dbf1      	blt.n	8002370 <_write+0x1e>

	}
	return len;
 800238c:	687b      	ldr	r3, [r7, #4]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <log_format>:

static RTC_TimeTypeDef sTime;
static RTC_DateTypeDef sDate;
static uint32_t g_SubSeconds;

void log_format(const char* tag, const char* message, va_list args) {
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b087      	sub	sp, #28
 800239c:	af02      	add	r7, sp, #8
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
	g_SubSeconds = ((255-(uint32_t)(hrtc.Instance->SSR))*1000L)/(255+1); // ms
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <log_format+0x74>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023aa:	4a19      	ldr	r2, [pc, #100]	; (8002410 <log_format+0x78>)
 80023ac:	fb02 f303 	mul.w	r3, r2, r3
 80023b0:	f503 3379 	add.w	r3, r3, #254976	; 0x3e400
 80023b4:	3318      	adds	r3, #24
 80023b6:	0a1b      	lsrs	r3, r3, #8
 80023b8:	4a16      	ldr	r2, [pc, #88]	; (8002414 <log_format+0x7c>)
 80023ba:	6013      	str	r3, [r2, #0]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80023bc:	2200      	movs	r2, #0
 80023be:	4916      	ldr	r1, [pc, #88]	; (8002418 <log_format+0x80>)
 80023c0:	4812      	ldr	r0, [pc, #72]	; (800240c <log_format+0x74>)
 80023c2:	f006 fa6b 	bl	800889c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80023c6:	2200      	movs	r2, #0
 80023c8:	4914      	ldr	r1, [pc, #80]	; (800241c <log_format+0x84>)
 80023ca:	4810      	ldr	r0, [pc, #64]	; (800240c <log_format+0x74>)
 80023cc:	f006 fb48 	bl	8008a60 <HAL_RTC_GetDate>

	printf("%02d:%02d:%02d,%03lu[%s] ", sTime.Hours, sTime.Minutes, sTime.Seconds, g_SubSeconds, tag);
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <log_format+0x80>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	4619      	mov	r1, r3
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <log_format+0x80>)
 80023d8:	785b      	ldrb	r3, [r3, #1]
 80023da:	4618      	mov	r0, r3
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <log_format+0x80>)
 80023de:	789b      	ldrb	r3, [r3, #2]
 80023e0:	461c      	mov	r4, r3
 80023e2:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <log_format+0x7c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	9201      	str	r2, [sp, #4]
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	4623      	mov	r3, r4
 80023ee:	4602      	mov	r2, r0
 80023f0:	480b      	ldr	r0, [pc, #44]	; (8002420 <log_format+0x88>)
 80023f2:	f012 fb75 	bl	8014ae0 <iprintf>
	vprintf(message, args);
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	68b8      	ldr	r0, [r7, #8]
 80023fa:	f012 fcbd 	bl	8014d78 <viprintf>
	printf("\r\n");
 80023fe:	4809      	ldr	r0, [pc, #36]	; (8002424 <log_format+0x8c>)
 8002400:	f012 fbf4 	bl	8014bec <puts>
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bd90      	pop	{r4, r7, pc}
 800240c:	20000550 	.word	0x20000550
 8002410:	fffffc18 	.word	0xfffffc18
 8002414:	20000384 	.word	0x20000384
 8002418:	2000036c 	.word	0x2000036c
 800241c:	20000380 	.word	0x20000380
 8002420:	08016d20 	.word	0x08016d20
 8002424:	08016d3c 	.word	0x08016d3c

08002428 <logi>:

void logi(const char* message, ...) {
 8002428:	b40f      	push	{r0, r1, r2, r3}
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	607b      	str	r3, [r7, #4]
	log_format("INFO", message, args);
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6939      	ldr	r1, [r7, #16]
 800243a:	4805      	ldr	r0, [pc, #20]	; (8002450 <logi+0x28>)
 800243c:	f7ff ffac 	bl	8002398 <log_format>
	va_end(args);
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800244a:	b004      	add	sp, #16
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	08016d40 	.word	0x08016d40

08002454 <logd>:

void logd(const char* message, ...) {
 8002454:	b40f      	push	{r0, r1, r2, r3}
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	607b      	str	r3, [r7, #4]
	log_format("DEBUG", message, args);
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6939      	ldr	r1, [r7, #16]
 8002466:	4805      	ldr	r0, [pc, #20]	; (800247c <logd+0x28>)
 8002468:	f7ff ff96 	bl	8002398 <log_format>
	va_end(args);
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002476:	b004      	add	sp, #16
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	08016d48 	.word	0x08016d48

08002480 <loge>:

void loge(const char* message, ...) {
 8002480:	b40f      	push	{r0, r1, r2, r3}
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	607b      	str	r3, [r7, #4]
	log_format("ERROR", message, args);
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6939      	ldr	r1, [r7, #16]
 8002492:	4805      	ldr	r0, [pc, #20]	; (80024a8 <loge+0x28>)
 8002494:	f7ff ff80 	bl	8002398 <log_format>
	va_end(args);
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024a2:	b004      	add	sp, #16
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	08016d50 	.word	0x08016d50

080024ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024b0:	f001 fafc 	bl	8003aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024b4:	f000 ff1c 	bl	80032f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024b8:	f000 ff88 	bl	80033cc <MX_GPIO_Init>
  MX_ADC1_Init();
 80024bc:	f000 feb6 	bl	800322c <MX_ADC1_Init>
  MX_I2C1_Init();
 80024c0:	f001 f82c 	bl	800351c <MX_I2C1_Init>
  MX_RTC_Init();
 80024c4:	f001 f858 	bl	8003578 <MX_RTC_Init>
  MX_SPI2_Init();
 80024c8:	f001 f8b0 	bl	800362c <MX_SPI2_Init>
  MX_TIM3_Init();
 80024cc:	f001 f8e4 	bl	8003698 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80024d0:	f001 f96e 	bl	80037b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80024d4:	f001 f996 	bl	8003804 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80024d8:	f001 f9be 	bl	8003858 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80024dc:	f00a f89e 	bl	800c61c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  logi("Initializing...");
 80024e0:	483a      	ldr	r0, [pc, #232]	; (80025cc <main+0x120>)
 80024e2:	f7ff ffa1 	bl	8002428 <logi>

  _BMP390_Init();
 80024e6:	f000 f98f 	bl	8002808 <_BMP390_Init>
  _BNO055_Init();
 80024ea:	f000 f999 	bl	8002820 <_BNO055_Init>
  _SD_Init();
 80024ee:	f000 f9a5 	bl	800283c <_SD_Init>
  _Servo_Init();
 80024f2:	f000 f9c5 	bl	8002880 <_Servo_Init>

  logi("Initialized");
 80024f6:	4836      	ldr	r0, [pc, #216]	; (80025d0 <main+0x124>)
 80024f8:	f7ff ff96 	bl	8002428 <logi>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80024fc:	f00c fea4 	bl	800f248 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of TransmitSemaphore */
  ReceiveSemaphoreHandle = osSemaphoreNew(1, 1, &ReceiveSemaphore_attributes);
 8002500:	4a34      	ldr	r2, [pc, #208]	; (80025d4 <main+0x128>)
 8002502:	2101      	movs	r1, #1
 8002504:	2001      	movs	r0, #1
 8002506:	f00d f93f 	bl	800f788 <osSemaphoreNew>
 800250a:	4603      	mov	r3, r0
 800250c:	4a32      	ldr	r2, [pc, #200]	; (80025d8 <main+0x12c>)
 800250e:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of SensorReading */
  SensorReadingHandle = osTimerNew(vSensorReadingCallback, osTimerPeriodic, NULL, &SensorReading_attributes);
 8002510:	4b32      	ldr	r3, [pc, #200]	; (80025dc <main+0x130>)
 8002512:	2200      	movs	r2, #0
 8002514:	2101      	movs	r1, #1
 8002516:	4832      	ldr	r0, [pc, #200]	; (80025e0 <main+0x134>)
 8002518:	f00c ffa2 	bl	800f460 <osTimerNew>
 800251c:	4603      	mov	r3, r0
 800251e:	4a31      	ldr	r2, [pc, #196]	; (80025e4 <main+0x138>)
 8002520:	6013      	str	r3, [r2, #0]

  /* creation of Transmit */
  TransmitHandle = osTimerNew(vTransmitCallback, osTimerPeriodic, NULL, &Transmit_attributes);
 8002522:	4b31      	ldr	r3, [pc, #196]	; (80025e8 <main+0x13c>)
 8002524:	2200      	movs	r2, #0
 8002526:	2101      	movs	r1, #1
 8002528:	4830      	ldr	r0, [pc, #192]	; (80025ec <main+0x140>)
 800252a:	f00c ff99 	bl	800f460 <osTimerNew>
 800252e:	4603      	mov	r3, r0
 8002530:	4a2f      	ldr	r2, [pc, #188]	; (80025f0 <main+0x144>)
 8002532:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(SensorReadingHandle, 3000);
 8002534:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <main+0x138>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800253c:	4618      	mov	r0, r3
 800253e:	f00d f80b 	bl	800f558 <osTimerStart>
  osTimerStart(TransmitHandle, 3000);
 8002542:	4b2b      	ldr	r3, [pc, #172]	; (80025f0 <main+0x144>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800254a:	4618      	mov	r0, r3
 800254c:	f00d f804 	bl	800f558 <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Main */
  MainHandle = osThreadNew(vMainTask, NULL, &Main_attributes);
 8002550:	4a28      	ldr	r2, [pc, #160]	; (80025f4 <main+0x148>)
 8002552:	2100      	movs	r1, #0
 8002554:	4828      	ldr	r0, [pc, #160]	; (80025f8 <main+0x14c>)
 8002556:	f00c fec1 	bl	800f2dc <osThreadNew>
 800255a:	4603      	mov	r3, r0
 800255c:	4a27      	ldr	r2, [pc, #156]	; (80025fc <main+0x150>)
 800255e:	6013      	str	r3, [r2, #0]

  /* creation of GPS */
  GPSHandle = osThreadNew(vGPSTask, NULL, &GPS_attributes);
 8002560:	4a27      	ldr	r2, [pc, #156]	; (8002600 <main+0x154>)
 8002562:	2100      	movs	r1, #0
 8002564:	4827      	ldr	r0, [pc, #156]	; (8002604 <main+0x158>)
 8002566:	f00c feb9 	bl	800f2dc <osThreadNew>
 800256a:	4603      	mov	r3, r0
 800256c:	4a26      	ldr	r2, [pc, #152]	; (8002608 <main+0x15c>)
 800256e:	6013      	str	r3, [r2, #0]

  /* creation of StateManaging */
  StateManagingHandle = osThreadNew(vStateManagingTask, NULL, &StateManaging_attributes);
 8002570:	4a26      	ldr	r2, [pc, #152]	; (800260c <main+0x160>)
 8002572:	2100      	movs	r1, #0
 8002574:	4826      	ldr	r0, [pc, #152]	; (8002610 <main+0x164>)
 8002576:	f00c feb1 	bl	800f2dc <osThreadNew>
 800257a:	4603      	mov	r3, r0
 800257c:	4a25      	ldr	r2, [pc, #148]	; (8002614 <main+0x168>)
 800257e:	6013      	str	r3, [r2, #0]

  /* creation of Receive */
  ReceiveHandle = osThreadNew(vReceiveTask, NULL, &Receive_attributes);
 8002580:	4a25      	ldr	r2, [pc, #148]	; (8002618 <main+0x16c>)
 8002582:	2100      	movs	r1, #0
 8002584:	4825      	ldr	r0, [pc, #148]	; (800261c <main+0x170>)
 8002586:	f00c fea9 	bl	800f2dc <osThreadNew>
 800258a:	4603      	mov	r3, r0
 800258c:	4a24      	ldr	r2, [pc, #144]	; (8002620 <main+0x174>)
 800258e:	6013      	str	r3, [r2, #0]

  /* creation of Debug */
  DebugHandle = osThreadNew(vDebugTask, NULL, &Debug_attributes);
 8002590:	4a24      	ldr	r2, [pc, #144]	; (8002624 <main+0x178>)
 8002592:	2100      	movs	r1, #0
 8002594:	4824      	ldr	r0, [pc, #144]	; (8002628 <main+0x17c>)
 8002596:	f00c fea1 	bl	800f2dc <osThreadNew>
 800259a:	4603      	mov	r3, r0
 800259c:	4a23      	ldr	r2, [pc, #140]	; (800262c <main+0x180>)
 800259e:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of GPSEvent */
  EventGPSHandle = osEventFlagsNew(&EventGPS_attributes);
 80025a0:	4823      	ldr	r0, [pc, #140]	; (8002630 <main+0x184>)
 80025a2:	f00d f807 	bl	800f5b4 <osEventFlagsNew>
 80025a6:	4603      	mov	r3, r0
 80025a8:	4a22      	ldr	r2, [pc, #136]	; (8002634 <main+0x188>)
 80025aa:	6013      	str	r3, [r2, #0]

  /* creation of CommandEvent */
  EventCommandHandle = osEventFlagsNew(&EventCommand_attributes);
 80025ac:	4822      	ldr	r0, [pc, #136]	; (8002638 <main+0x18c>)
 80025ae:	f00d f801 	bl	800f5b4 <osEventFlagsNew>
 80025b2:	4603      	mov	r3, r0
 80025b4:	4a21      	ldr	r2, [pc, #132]	; (800263c <main+0x190>)
 80025b6:	6013      	str	r3, [r2, #0]

  EventReceiveHandle = osEventFlagsNew(&EventReceive_attributes);
 80025b8:	4821      	ldr	r0, [pc, #132]	; (8002640 <main+0x194>)
 80025ba:	f00c fffb 	bl	800f5b4 <osEventFlagsNew>
 80025be:	4603      	mov	r3, r0
 80025c0:	4a20      	ldr	r2, [pc, #128]	; (8002644 <main+0x198>)
 80025c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80025c4:	f00c fe64 	bl	800f290 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80025c8:	e7fe      	b.n	80025c8 <main+0x11c>
 80025ca:	bf00      	nop
 80025cc:	08016de0 	.word	0x08016de0
 80025d0:	08016df0 	.word	0x08016df0
 80025d4:	08016f70 	.word	0x08016f70
 80025d8:	200003a4 	.word	0x200003a4
 80025dc:	08016f50 	.word	0x08016f50
 80025e0:	08002a5d 	.word	0x08002a5d
 80025e4:	2000039c 	.word	0x2000039c
 80025e8:	08016f60 	.word	0x08016f60
 80025ec:	08002a71 	.word	0x08002a71
 80025f0:	200003a0 	.word	0x200003a0
 80025f4:	08016e9c 	.word	0x08016e9c
 80025f8:	080028d1 	.word	0x080028d1
 80025fc:	20000388 	.word	0x20000388
 8002600:	08016ec0 	.word	0x08016ec0
 8002604:	08002911 	.word	0x08002911
 8002608:	2000038c 	.word	0x2000038c
 800260c:	08016ee4 	.word	0x08016ee4
 8002610:	08002921 	.word	0x08002921
 8002614:	20000390 	.word	0x20000390
 8002618:	08016f08 	.word	0x08016f08
 800261c:	08002931 	.word	0x08002931
 8002620:	20000394 	.word	0x20000394
 8002624:	08016f2c 	.word	0x08016f2c
 8002628:	080029f1 	.word	0x080029f1
 800262c:	20000398 	.word	0x20000398
 8002630:	08016f80 	.word	0x08016f80
 8002634:	200003a8 	.word	0x200003a8
 8002638:	08016f90 	.word	0x08016f90
 800263c:	200003ac 	.word	0x200003ac
 8002640:	08016fa0 	.word	0x08016fa0
 8002644:	200003b0 	.word	0x200003b0

08002648 <HAL_UART_RxCpltCallback>:
//uint8_t buffer[14] = {};



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART3)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a65      	ldr	r2, [pc, #404]	; (80027ec <HAL_UART_RxCpltCallback+0x1a4>)
 8002656:	4293      	cmp	r3, r2
 8002658:	f040 80c5 	bne.w	80027e6 <HAL_UART_RxCpltCallback+0x19e>
  {
  	//osSemaphoreRelease(ReceiveSemaphoreHandle);

  	if(HAL_GetTick() - receive_tick > 10) {
 800265c:	f001 fa5c 	bl	8003b18 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	4b63      	ldr	r3, [pc, #396]	; (80027f0 <HAL_UART_RxCpltCallback+0x1a8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b0a      	cmp	r3, #10
 800266a:	d907      	bls.n	800267c <HAL_UART_RxCpltCallback+0x34>
  		xbee_rx_buffer.isReceiving = FALSE;
 800266c:	4b61      	ldr	r3, [pc, #388]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
  		receive_tick = HAL_GetTick();
 8002672:	f001 fa51 	bl	8003b18 <HAL_GetTick>
 8002676:	4603      	mov	r3, r0
 8002678:	4a5d      	ldr	r2, [pc, #372]	; (80027f0 <HAL_UART_RxCpltCallback+0x1a8>)
 800267a:	6013      	str	r3, [r2, #0]
  	}

  	if(xbee_rx_buffer.isReceiving == FALSE) {
 800267c:	4b5d      	ldr	r3, [pc, #372]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d119      	bne.n	80026b8 <HAL_UART_RxCpltCallback+0x70>
  		if(uart_rx_buffer[0] == 0x7E){
 8002684:	4b5c      	ldr	r3, [pc, #368]	; (80027f8 <HAL_UART_RxCpltCallback+0x1b0>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b7e      	cmp	r3, #126	; 0x7e
 800268a:	d10f      	bne.n	80026ac <HAL_UART_RxCpltCallback+0x64>
  			memset(&xbee_rx_buffer,0, sizeof(xbee_rx_buffer));
 800268c:	2288      	movs	r2, #136	; 0x88
 800268e:	2100      	movs	r1, #0
 8002690:	4858      	ldr	r0, [pc, #352]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 8002692:	f011 fcd3 	bl	801403c <memset>
  			xbee_rx_buffer.isReceiving = TRUE;
 8002696:	4b57      	ldr	r3, [pc, #348]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 8002698:	2201      	movs	r2, #1
 800269a:	701a      	strb	r2, [r3, #0]
  	  	++xbee_rx_buffer.pos;
 800269c:	4b55      	ldr	r3, [pc, #340]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 800269e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80026a2:	3301      	adds	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	4b53      	ldr	r3, [pc, #332]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 80026a8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
  		}
    	HAL_UART_Receive_IT(&huart3, uart_rx_buffer, sizeof(uart_rx_buffer));
 80026ac:	2201      	movs	r2, #1
 80026ae:	4952      	ldr	r1, [pc, #328]	; (80027f8 <HAL_UART_RxCpltCallback+0x1b0>)
 80026b0:	4852      	ldr	r0, [pc, #328]	; (80027fc <HAL_UART_RxCpltCallback+0x1b4>)
 80026b2:	f007 fc40 	bl	8009f36 <HAL_UART_Receive_IT>
  		return;
 80026b6:	e096      	b.n	80027e6 <HAL_UART_RxCpltCallback+0x19e>
  	}

  	if(xbee_rx_buffer.pos == 0) {
 80026b8:	4b4e      	ldr	r3, [pc, #312]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 80026ba:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d104      	bne.n	80026cc <HAL_UART_RxCpltCallback+0x84>
  		xbee_rx_buffer.length = 0;
 80026c2:	4b4c      	ldr	r3, [pc, #304]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 80026ca:	e07f      	b.n	80027cc <HAL_UART_RxCpltCallback+0x184>
  	} else if(xbee_rx_buffer.pos == 1) {
 80026cc:	4b49      	ldr	r3, [pc, #292]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 80026ce:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d10a      	bne.n	80026ec <HAL_UART_RxCpltCallback+0xa4>
  		xbee_rx_buffer.length = uart_rx_buffer[0] * 0xFF;
 80026d6:	4b48      	ldr	r3, [pc, #288]	; (80027f8 <HAL_UART_RxCpltCallback+0x1b0>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	0212      	lsls	r2, r2, #8
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	4b43      	ldr	r3, [pc, #268]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 80026e6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 80026ea:	e06f      	b.n	80027cc <HAL_UART_RxCpltCallback+0x184>
  	} else if(xbee_rx_buffer.pos == 2) {
 80026ec:	4b41      	ldr	r3, [pc, #260]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 80026ee:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d10b      	bne.n	800270e <HAL_UART_RxCpltCallback+0xc6>
  		xbee_rx_buffer.length += uart_rx_buffer[0];
 80026f6:	4b3f      	ldr	r3, [pc, #252]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 80026f8:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 80026fc:	4b3e      	ldr	r3, [pc, #248]	; (80027f8 <HAL_UART_RxCpltCallback+0x1b0>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	b29b      	uxth	r3, r3
 8002702:	4413      	add	r3, r2
 8002704:	b29a      	uxth	r2, r3
 8002706:	4b3b      	ldr	r3, [pc, #236]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 8002708:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 800270c:	e05e      	b.n	80027cc <HAL_UART_RxCpltCallback+0x184>
  	} else if(xbee_rx_buffer.pos < xbee_rx_buffer.length + 3){
 800270e:	4b39      	ldr	r3, [pc, #228]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 8002710:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8002714:	3302      	adds	r3, #2
 8002716:	4a37      	ldr	r2, [pc, #220]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 8002718:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 800271c:	4293      	cmp	r3, r2
 800271e:	db15      	blt.n	800274c <HAL_UART_RxCpltCallback+0x104>
  		xbee_rx_buffer.buffer[xbee_rx_buffer.pos-3] = uart_rx_buffer[0];
 8002720:	4b34      	ldr	r3, [pc, #208]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 8002722:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002726:	3b03      	subs	r3, #3
 8002728:	4a33      	ldr	r2, [pc, #204]	; (80027f8 <HAL_UART_RxCpltCallback+0x1b0>)
 800272a:	7811      	ldrb	r1, [r2, #0]
 800272c:	4a31      	ldr	r2, [pc, #196]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 800272e:	4413      	add	r3, r2
 8002730:	460a      	mov	r2, r1
 8002732:	709a      	strb	r2, [r3, #2]
  		xbee_rx_buffer.checksum += uart_rx_buffer[0];
 8002734:	4b2f      	ldr	r3, [pc, #188]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 8002736:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 800273a:	4b2f      	ldr	r3, [pc, #188]	; (80027f8 <HAL_UART_RxCpltCallback+0x1b0>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	b29b      	uxth	r3, r3
 8002740:	4413      	add	r3, r2
 8002742:	b29a      	uxth	r2, r3
 8002744:	4b2b      	ldr	r3, [pc, #172]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 8002746:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800274a:	e03f      	b.n	80027cc <HAL_UART_RxCpltCallback+0x184>
  	} else if(xbee_rx_buffer.pos >= xbee_rx_buffer.length + 3) {
 800274c:	4b29      	ldr	r3, [pc, #164]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 800274e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8002752:	3302      	adds	r3, #2
 8002754:	4a27      	ldr	r2, [pc, #156]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 8002756:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 800275a:	4293      	cmp	r3, r2
 800275c:	da36      	bge.n	80027cc <HAL_UART_RxCpltCallback+0x184>
  		xbee_rx_buffer.checksum = (uint8_t) xbee_rx_buffer.checksum;
 800275e:	4b25      	ldr	r3, [pc, #148]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 8002760:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002764:	b2db      	uxtb	r3, r3
 8002766:	b29a      	uxth	r2, r3
 8002768:	4b22      	ldr	r3, [pc, #136]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 800276a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
  		xbee_rx_buffer.checksum = 0xFF - xbee_rx_buffer.checksum;
 800276e:	4b21      	ldr	r3, [pc, #132]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 8002770:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002774:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002778:	b29a      	uxth	r2, r3
 800277a:	4b1e      	ldr	r3, [pc, #120]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 800277c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
			if (osSemaphoreAcquire(ReceiveSemaphoreHandle, 0) == osOK) {
 8002780:	4b1f      	ldr	r3, [pc, #124]	; (8002800 <HAL_UART_RxCpltCallback+0x1b8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f00d f888 	bl	800f89c <osSemaphoreAcquire>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d119      	bne.n	80027c6 <HAL_UART_RxCpltCallback+0x17e>
				if (xbee_rx_buffer.checksum == uart_rx_buffer[0]) {
 8002792:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 8002794:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8002798:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <HAL_UART_RxCpltCallback+0x1b0>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	b29b      	uxth	r3, r3
 800279e:	429a      	cmp	r2, r3
 80027a0:	d106      	bne.n	80027b0 <HAL_UART_RxCpltCallback+0x168>
					osEventFlagsSet(EventReceiveHandle,
 80027a2:	4b18      	ldr	r3, [pc, #96]	; (8002804 <HAL_UART_RxCpltCallback+0x1bc>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2109      	movs	r1, #9
 80027a8:	4618      	mov	r0, r3
 80027aa:	f00c ff43 	bl	800f634 <osEventFlagsSet>
 80027ae:	e005      	b.n	80027bc <HAL_UART_RxCpltCallback+0x174>
							EVENT_RECEIVE_XBEE | EVENT_RECEIVE_SUCCESS);
				} else {
					osEventFlagsSet(EventReceiveHandle,
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <HAL_UART_RxCpltCallback+0x1bc>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	210a      	movs	r1, #10
 80027b6:	4618      	mov	r0, r3
 80027b8:	f00c ff3c 	bl	800f634 <osEventFlagsSet>
							EVENT_RECEIVE_XBEE | EVENT_RECEIVE_FAIL);
				}
				osSemaphoreRelease(ReceiveSemaphoreHandle);
 80027bc:	4b10      	ldr	r3, [pc, #64]	; (8002800 <HAL_UART_RxCpltCallback+0x1b8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f00d f8bd 	bl	800f940 <osSemaphoreRelease>
			}
  		xbee_rx_buffer.isReceiving = FALSE;
 80027c6:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
  	}

  	++xbee_rx_buffer.pos;
 80027cc:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 80027ce:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80027d2:	3301      	adds	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <HAL_UART_RxCpltCallback+0x1ac>)
 80027d8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
  	HAL_UART_Receive_IT(&huart3, uart_rx_buffer, sizeof(uart_rx_buffer));
 80027dc:	2201      	movs	r2, #1
 80027de:	4906      	ldr	r1, [pc, #24]	; (80027f8 <HAL_UART_RxCpltCallback+0x1b0>)
 80027e0:	4806      	ldr	r0, [pc, #24]	; (80027fc <HAL_UART_RxCpltCallback+0x1b4>)
 80027e2:	f007 fba8 	bl	8009f36 <HAL_UART_Receive_IT>
  }
}
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40004800 	.word	0x40004800
 80027f0:	200003dc 	.word	0x200003dc
 80027f4:	200003e0 	.word	0x200003e0
 80027f8:	200003d8 	.word	0x200003d8
 80027fc:	20000698 	.word	0x20000698
 8002800:	200003a4 	.word	0x200003a4
 8002804:	200003b0 	.word	0x200003b0

08002808 <_BMP390_Init>:

static void _BMP390_Init(void){
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
	BMP390_AssignI2C(&hi2c1);
 800280c:	4803      	ldr	r0, [pc, #12]	; (800281c <_BMP390_Init+0x14>)
 800280e:	f7ff fbb5 	bl	8001f7c <BMP390_AssignI2C>
	BMP390_Init();
 8002812:	f7ff fb55 	bl	8001ec0 <BMP390_Init>
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	200004fc 	.word	0x200004fc

08002820 <_BNO055_Init>:
static void _BNO055_Init(void){
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
	bno055_assignI2C(&hi2c1);
 8002824:	4804      	ldr	r0, [pc, #16]	; (8002838 <_BNO055_Init+0x18>)
 8002826:	f7ff fc21 	bl	800206c <bno055_assignI2C>
	bno055_setup();
 800282a:	f7ff fbf7 	bl	800201c <bno055_setup>
	bno055_setOperationModeNDOF();
 800282e:	f7ff fbe2 	bl	8001ff6 <bno055_setOperationModeNDOF>
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	200004fc 	.word	0x200004fc

0800283c <_SD_Init>:
static void _SD_Init(void){
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
	SD_Assign(&hspi2);
 8002840:	480a      	ldr	r0, [pc, #40]	; (800286c <_SD_Init+0x30>)
 8002842:	f7ff fd3d 	bl	80022c0 <SD_Assign>
	retUSER = f_mount(&USERFatFS, USERPath, 1);
 8002846:	2201      	movs	r2, #1
 8002848:	4909      	ldr	r1, [pc, #36]	; (8002870 <_SD_Init+0x34>)
 800284a:	480a      	ldr	r0, [pc, #40]	; (8002874 <_SD_Init+0x38>)
 800284c:	f00c fbb2 	bl	800efb4 <f_mount>
 8002850:	4603      	mov	r3, r0
 8002852:	461a      	mov	r2, r3
 8002854:	4b08      	ldr	r3, [pc, #32]	; (8002878 <_SD_Init+0x3c>)
 8002856:	701a      	strb	r2, [r3, #0]
	if ( retUSER != FR_OK ) {
 8002858:	4b07      	ldr	r3, [pc, #28]	; (8002878 <_SD_Init+0x3c>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <_SD_Init+0x2a>
		loge("SD Init Fail");
 8002860:	4806      	ldr	r0, [pc, #24]	; (800287c <_SD_Init+0x40>)
 8002862:	f7ff fe0d 	bl	8002480 <loge>
	}
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000570 	.word	0x20000570
 8002870:	20000708 	.word	0x20000708
 8002874:	2000070c 	.word	0x2000070c
 8002878:	20000704 	.word	0x20000704
 800287c:	08016dfc 	.word	0x08016dfc

08002880 <_Servo_Init>:
static void _Servo_Init(void){
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
	Servo_Attach(&hservo1, &htim3, TIM_CHANNEL_1);
 8002884:	2200      	movs	r2, #0
 8002886:	490e      	ldr	r1, [pc, #56]	; (80028c0 <_Servo_Init+0x40>)
 8002888:	480e      	ldr	r0, [pc, #56]	; (80028c4 <_Servo_Init+0x44>)
 800288a:	f7ff fd29 	bl	80022e0 <Servo_Attach>
	Servo_Attach(&hservo2, &htim3, TIM_CHANNEL_2);
 800288e:	2204      	movs	r2, #4
 8002890:	490b      	ldr	r1, [pc, #44]	; (80028c0 <_Servo_Init+0x40>)
 8002892:	480d      	ldr	r0, [pc, #52]	; (80028c8 <_Servo_Init+0x48>)
 8002894:	f7ff fd24 	bl	80022e0 <Servo_Attach>
	Servo_Attach(&hservo3, &htim3, TIM_CHANNEL_3);
 8002898:	2208      	movs	r2, #8
 800289a:	4909      	ldr	r1, [pc, #36]	; (80028c0 <_Servo_Init+0x40>)
 800289c:	480b      	ldr	r0, [pc, #44]	; (80028cc <_Servo_Init+0x4c>)
 800289e:	f7ff fd1f 	bl	80022e0 <Servo_Attach>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 80028a2:	2100      	movs	r1, #0
 80028a4:	4806      	ldr	r0, [pc, #24]	; (80028c0 <_Servo_Init+0x40>)
 80028a6:	f006 fb89 	bl	8008fbc <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 80028aa:	2104      	movs	r1, #4
 80028ac:	4804      	ldr	r0, [pc, #16]	; (80028c0 <_Servo_Init+0x40>)
 80028ae:	f006 fb85 	bl	8008fbc <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 80028b2:	2108      	movs	r1, #8
 80028b4:	4802      	ldr	r0, [pc, #8]	; (80028c0 <_Servo_Init+0x40>)
 80028b6:	f006 fb81 	bl	8008fbc <HAL_TIM_PWM_Start_IT>
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200005c8 	.word	0x200005c8
 80028c4:	200003b4 	.word	0x200003b4
 80028c8:	200003bc 	.word	0x200003bc
 80028cc:	200003c4 	.word	0x200003c4

080028d0 <vMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vMainTask */
void vMainTask(void *argument)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80028d8:	f010 fcb8 	bl	801324c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80028dc:	2200      	movs	r2, #0
 80028de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028e2:	480a      	ldr	r0, [pc, #40]	; (800290c <vMainTask+0x3c>)
 80028e4:	f001 fec2 	bl	800466c <HAL_GPIO_WritePin>
  osDelay(100);
 80028e8:	2064      	movs	r0, #100	; 0x64
 80028ea:	f00c fd89 	bl	800f400 <osDelay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80028ee:	2201      	movs	r2, #1
 80028f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028f4:	4805      	ldr	r0, [pc, #20]	; (800290c <vMainTask+0x3c>)
 80028f6:	f001 feb9 	bl	800466c <HAL_GPIO_WritePin>
  //HAL_UART_Receive_IT(&huart3, (uint8_t *) buffer, sizeof(buffer));
  //uint8_t data[]= {0x7E, 0x00, 0x0A, 0x01, 0x01, 0xCC, 0xCC, 0x00, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x71};

  for(;;)
  {
    osDelay(1000);
 80028fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028fe:	f00c fd7f 	bl	800f400 <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002902:	2120      	movs	r1, #32
 8002904:	4801      	ldr	r0, [pc, #4]	; (800290c <vMainTask+0x3c>)
 8002906:	f001 feca 	bl	800469e <HAL_GPIO_TogglePin>
    osDelay(1000);
 800290a:	e7f6      	b.n	80028fa <vMainTask+0x2a>
 800290c:	40020000 	.word	0x40020000

08002910 <vGPSTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vGPSTask */
void vGPSTask(void *argument)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  		IH_UART1_headerPass = 0;
  		IH_UART1_pMessage = 0;
  	}
  	HAL_UART_Receive_IT(&huart1, &IH_UART1_byteBuf, sizeof(IH_UART1_byteBuf));
  	*/
  	osDelay(1);
 8002918:	2001      	movs	r0, #1
 800291a:	f00c fd71 	bl	800f400 <osDelay>
 800291e:	e7fb      	b.n	8002918 <vGPSTask+0x8>

08002920 <vStateManagingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStateManagingTask */
void vStateManagingTask(void *argument)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStateManagingTask */
  /* Infinite loop */
  for(;;)
  {
  	osDelay(100);
 8002928:	2064      	movs	r0, #100	; 0x64
 800292a:	f00c fd69 	bl	800f400 <osDelay>
 800292e:	e7fb      	b.n	8002928 <vStateManagingTask+0x8>

08002930 <vReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vReceiveTask */
void vReceiveTask(void *argument)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b0a4      	sub	sp, #144	; 0x90
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vReceiveTask */
  /* Infinite loop */
	uint32_t event_flag;
	uint8_t message[RECEIVE_BUFFER_SIZE];

	HAL_UART_Receive_IT(&huart3, uart_rx_buffer, sizeof(uart_rx_buffer));
 8002938:	2201      	movs	r2, #1
 800293a:	4926      	ldr	r1, [pc, #152]	; (80029d4 <vReceiveTask+0xa4>)
 800293c:	4826      	ldr	r0, [pc, #152]	; (80029d8 <vReceiveTask+0xa8>)
 800293e:	f007 fafa 	bl	8009f36 <HAL_UART_Receive_IT>
  for(;;)
  {
  	event_flag = osEventFlagsWait(EventReceiveHandle, EVENT_RECEIVE_XBEE, osFlagsWaitAny, osWaitForever);
 8002942:	4b26      	ldr	r3, [pc, #152]	; (80029dc <vReceiveTask+0xac>)
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	f04f 33ff 	mov.w	r3, #4294967295
 800294a:	2200      	movs	r2, #0
 800294c:	2108      	movs	r1, #8
 800294e:	f00c feb5 	bl	800f6bc <osEventFlagsWait>
 8002952:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

  	if(!(event_flag & EVENT_RECEIVE_XBEE)) { return; }
 8002956:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d032      	beq.n	80029c8 <vReceiveTask+0x98>
  	if((event_flag & EVENT_RECEIVE_SUCCESS)) {
 8002962:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d028      	beq.n	80029c0 <vReceiveTask+0x90>
  		if(xbee_rx_buffer.length < 5) { return; }
 800296e:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <vReceiveTask+0xb0>)
 8002970:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8002974:	2b04      	cmp	r3, #4
 8002976:	d929      	bls.n	80029cc <vReceiveTask+0x9c>
  		osSemaphoreAcquire(ReceiveSemaphoreHandle, osWaitForever);
 8002978:	4b1a      	ldr	r3, [pc, #104]	; (80029e4 <vReceiveTask+0xb4>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f04f 31ff 	mov.w	r1, #4294967295
 8002980:	4618      	mov	r0, r3
 8002982:	f00c ff8b 	bl	800f89c <osSemaphoreAcquire>
  		memset(message, 0, sizeof(message));
 8002986:	f107 030c 	add.w	r3, r7, #12
 800298a:	2280      	movs	r2, #128	; 0x80
 800298c:	2100      	movs	r1, #0
 800298e:	4618      	mov	r0, r3
 8002990:	f011 fb54 	bl	801403c <memset>
  		memcpy(message, xbee_rx_buffer.buffer+5, xbee_rx_buffer.length-5);
 8002994:	4914      	ldr	r1, [pc, #80]	; (80029e8 <vReceiveTask+0xb8>)
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <vReceiveTask+0xb0>)
 8002998:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800299c:	3b05      	subs	r3, #5
 800299e:	461a      	mov	r2, r3
 80029a0:	f107 030c 	add.w	r3, r7, #12
 80029a4:	4618      	mov	r0, r3
 80029a6:	f011 fb3b 	bl	8014020 <memcpy>
  		logd("message:%s",message);
 80029aa:	f107 030c 	add.w	r3, r7, #12
 80029ae:	4619      	mov	r1, r3
 80029b0:	480e      	ldr	r0, [pc, #56]	; (80029ec <vReceiveTask+0xbc>)
 80029b2:	f7ff fd4f 	bl	8002454 <logd>
  		osSemaphoreRelease(ReceiveSemaphoreHandle);
 80029b6:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <vReceiveTask+0xb4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f00c ffc0 	bl	800f940 <osSemaphoreRelease>
  	}
  	osDelay(1);
 80029c0:	2001      	movs	r0, #1
 80029c2:	f00c fd1d 	bl	800f400 <osDelay>
  	event_flag = osEventFlagsWait(EventReceiveHandle, EVENT_RECEIVE_XBEE, osFlagsWaitAny, osWaitForever);
 80029c6:	e7bc      	b.n	8002942 <vReceiveTask+0x12>
  	if(!(event_flag & EVENT_RECEIVE_XBEE)) { return; }
 80029c8:	bf00      	nop
 80029ca:	e000      	b.n	80029ce <vReceiveTask+0x9e>
  		if(xbee_rx_buffer.length < 5) { return; }
 80029cc:	bf00      	nop
  }
  /* USER CODE END vReceiveTask */
}
 80029ce:	3790      	adds	r7, #144	; 0x90
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	200003d8 	.word	0x200003d8
 80029d8:	20000698 	.word	0x20000698
 80029dc:	200003b0 	.word	0x200003b0
 80029e0:	200003e0 	.word	0x200003e0
 80029e4:	200003a4 	.word	0x200003a4
 80029e8:	200003e7 	.word	0x200003e7
 80029ec:	08016e0c 	.word	0x08016e0c

080029f0 <vDebugTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vDebugTask */
void vDebugTask(void *argument)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vDebugTask */
  /* Infinite loop */
	uint32_t event_flag;
	uint32_t buffer;
	uint16_t cmd = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef status;
	for (;;) {
		event_flag = osEventFlagsWait(EventReceiveHandle, EVENT_RECEIVE_USB, osFlagsWaitAny, osWaitForever);
 80029fc:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <vDebugTask+0x60>)
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	f04f 33ff 	mov.w	r3, #4294967295
 8002a04:	2200      	movs	r2, #0
 8002a06:	2104      	movs	r1, #4
 8002a08:	f00c fe58 	bl	800f6bc <osEventFlagsWait>
 8002a0c:	60f8      	str	r0, [r7, #12]
		if (event_flag & EVENT_RECEIVE_USB) {
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d018      	beq.n	8002a4a <vDebugTask+0x5a>
			Buzzer_Once();
 8002a18:	f000 ff48 	bl	80038ac <Buzzer_Once>
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <vDebugTask+0x64>)
 8002a1e:	881b      	ldrh	r3, [r3, #0]
			memcpy(&cmd, usb_rx_buffer.buffer, DEBUG_CMD_SIZE);
 8002a20:	817b      	strh	r3, [r7, #10]
			switch (cmd) {
 8002a22:	897b      	ldrh	r3, [r7, #10]
 8002a24:	461a      	mov	r2, r3
 8002a26:	f647 2362 	movw	r3, #31330	; 0x7a62
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d1e6      	bne.n	80029fc <vDebugTask+0xc>
			case DEBUG_CMD_BUZZER:
				logd("Buzzer");
 8002a2e:	480a      	ldr	r0, [pc, #40]	; (8002a58 <vDebugTask+0x68>)
 8002a30:	f7ff fd10 	bl	8002454 <logd>
				osDelay(100);
 8002a34:	2064      	movs	r0, #100	; 0x64
 8002a36:	f00c fce3 	bl	800f400 <osDelay>
				Buzzer_Once();
 8002a3a:	f000 ff37 	bl	80038ac <Buzzer_Once>
				osDelay(100);
 8002a3e:	2064      	movs	r0, #100	; 0x64
 8002a40:	f00c fcde 	bl	800f400 <osDelay>
				Buzzer_Once();
 8002a44:	f000 ff32 	bl	80038ac <Buzzer_Once>
				break;
 8002a48:	e000      	b.n	8002a4c <vDebugTask+0x5c>
						sensor_data.pressure);

				break;
				*/
			}
		}
 8002a4a:	bf00      	nop
		event_flag = osEventFlagsWait(EventReceiveHandle, EVENT_RECEIVE_USB, osFlagsWaitAny, osWaitForever);
 8002a4c:	e7d6      	b.n	80029fc <vDebugTask+0xc>
 8002a4e:	bf00      	nop
 8002a50:	200003b0 	.word	0x200003b0
 8002a54:	200003cc 	.word	0x200003cc
 8002a58:	08016e18 	.word	0x08016e18

08002a5c <vSensorReadingCallback>:
  /* USER CODE END vDebugTask */
}

/* vSensorReadingCallback function */
void vSensorReadingCallback(void *argument)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vSensorReadingCallback */

  /* USER CODE END vSensorReadingCallback */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <vTransmitCallback>:

/* vTransmitCallback function */
void vTransmitCallback(void *argument)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTransmitCallback */
	//logi("transmit");
  /* USER CODE END vTransmitCallback */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a04      	ldr	r2, [pc, #16]	; (8002aa4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a96:	f001 f82b 	bl	8003af0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40001000 	.word	0x40001000

08002aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  printf("Error_Handler\r\n");
 8002aac:	4803      	ldr	r0, [pc, #12]	; (8002abc <Error_Handler+0x14>)
 8002aae:	f012 f89d 	bl	8014bec <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ab2:	b672      	cpsid	i
}
 8002ab4:	bf00      	nop
  __disable_irq();

  while (1)
  {
	  break;
 8002ab6:	bf00      	nop
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	08016e20 	.word	0x08016e20

08002ac0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	607b      	str	r3, [r7, #4]
 8002aca:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <HAL_MspInit+0x54>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	4a11      	ldr	r2, [pc, #68]	; (8002b14 <HAL_MspInit+0x54>)
 8002ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad6:	4b0f      	ldr	r3, [pc, #60]	; (8002b14 <HAL_MspInit+0x54>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	603b      	str	r3, [r7, #0]
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_MspInit+0x54>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <HAL_MspInit+0x54>)
 8002aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af0:	6413      	str	r3, [r2, #64]	; 0x40
 8002af2:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <HAL_MspInit+0x54>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002afe:	2200      	movs	r2, #0
 8002b00:	210f      	movs	r1, #15
 8002b02:	f06f 0001 	mvn.w	r0, #1
 8002b06:	f001 fb61 	bl	80041cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800

08002b18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08a      	sub	sp, #40	; 0x28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b20:	f107 0314 	add.w	r3, r7, #20
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a17      	ldr	r2, [pc, #92]	; (8002b94 <HAL_ADC_MspInit+0x7c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d127      	bne.n	8002b8a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <HAL_ADC_MspInit+0x80>)
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	4a15      	ldr	r2, [pc, #84]	; (8002b98 <HAL_ADC_MspInit+0x80>)
 8002b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b48:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4a:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <HAL_ADC_MspInit+0x80>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <HAL_ADC_MspInit+0x80>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	4a0e      	ldr	r2, [pc, #56]	; (8002b98 <HAL_ADC_MspInit+0x80>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6313      	str	r3, [r2, #48]	; 0x30
 8002b66:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <HAL_ADC_MspInit+0x80>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b72:	2303      	movs	r3, #3
 8002b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b76:	2303      	movs	r3, #3
 8002b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7e:	f107 0314 	add.w	r3, r7, #20
 8002b82:	4619      	mov	r1, r3
 8002b84:	4805      	ldr	r0, [pc, #20]	; (8002b9c <HAL_ADC_MspInit+0x84>)
 8002b86:	f001 fbdd 	bl	8004344 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b8a:	bf00      	nop
 8002b8c:	3728      	adds	r7, #40	; 0x28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40012000 	.word	0x40012000
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40020000 	.word	0x40020000

08002ba0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a19      	ldr	r2, [pc, #100]	; (8002c24 <HAL_I2C_MspInit+0x84>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d12c      	bne.n	8002c1c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <HAL_I2C_MspInit+0x88>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a17      	ldr	r2, [pc, #92]	; (8002c28 <HAL_I2C_MspInit+0x88>)
 8002bcc:	f043 0302 	orr.w	r3, r3, #2
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <HAL_I2C_MspInit+0x88>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002be4:	2312      	movs	r3, #18
 8002be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bec:	2303      	movs	r3, #3
 8002bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bf0:	2304      	movs	r3, #4
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	480c      	ldr	r0, [pc, #48]	; (8002c2c <HAL_I2C_MspInit+0x8c>)
 8002bfc:	f001 fba2 	bl	8004344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <HAL_I2C_MspInit+0x88>)
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	4a07      	ldr	r2, [pc, #28]	; (8002c28 <HAL_I2C_MspInit+0x88>)
 8002c0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_I2C_MspInit+0x88>)
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c1c:	bf00      	nop
 8002c1e:	3728      	adds	r7, #40	; 0x28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40005400 	.word	0x40005400
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40020400 	.word	0x40020400

08002c30 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b09a      	sub	sp, #104	; 0x68
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c38:	f107 030c 	add.w	r3, r7, #12
 8002c3c:	225c      	movs	r2, #92	; 0x5c
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f011 f9fb 	bl	801403c <memset>
  if(hrtc->Instance==RTC)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a0c      	ldr	r2, [pc, #48]	; (8002c7c <HAL_RTC_MspInit+0x4c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d111      	bne.n	8002c74 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c50:	2320      	movs	r3, #32
 8002c52:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002c54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c58:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f004 fd9a 	bl	8007798 <HAL_RCCEx_PeriphCLKConfig>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002c6a:	f7ff ff1d 	bl	8002aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c6e:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <HAL_RTC_MspInit+0x50>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c74:	bf00      	nop
 8002c76:	3768      	adds	r7, #104	; 0x68
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40002800 	.word	0x40002800
 8002c80:	42470e3c 	.word	0x42470e3c

08002c84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08a      	sub	sp, #40	; 0x28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8c:	f107 0314 	add.w	r3, r7, #20
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a19      	ldr	r2, [pc, #100]	; (8002d08 <HAL_SPI_MspInit+0x84>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d12c      	bne.n	8002d00 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <HAL_SPI_MspInit+0x88>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	4a17      	ldr	r2, [pc, #92]	; (8002d0c <HAL_SPI_MspInit+0x88>)
 8002cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb6:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <HAL_SPI_MspInit+0x88>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <HAL_SPI_MspInit+0x88>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	4a10      	ldr	r2, [pc, #64]	; (8002d0c <HAL_SPI_MspInit+0x88>)
 8002ccc:	f043 0302 	orr.w	r3, r3, #2
 8002cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd2:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <HAL_SPI_MspInit+0x88>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002cde:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cec:	2303      	movs	r3, #3
 8002cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cf0:	2305      	movs	r3, #5
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4805      	ldr	r0, [pc, #20]	; (8002d10 <HAL_SPI_MspInit+0x8c>)
 8002cfc:	f001 fb22 	bl	8004344 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002d00:	bf00      	nop
 8002d02:	3728      	adds	r7, #40	; 0x28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40003800 	.word	0x40003800
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40020400 	.word	0x40020400

08002d14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a0b      	ldr	r2, [pc, #44]	; (8002d50 <HAL_TIM_Base_MspInit+0x3c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d10d      	bne.n	8002d42 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <HAL_TIM_Base_MspInit+0x40>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	4a09      	ldr	r2, [pc, #36]	; (8002d54 <HAL_TIM_Base_MspInit+0x40>)
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	6413      	str	r3, [r2, #64]	; 0x40
 8002d36:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <HAL_TIM_Base_MspInit+0x40>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40000400 	.word	0x40000400
 8002d54:	40023800 	.word	0x40023800

08002d58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d60:	f107 030c 	add.w	r3, r7, #12
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	605a      	str	r2, [r3, #4]
 8002d6a:	609a      	str	r2, [r3, #8]
 8002d6c:	60da      	str	r2, [r3, #12]
 8002d6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a12      	ldr	r2, [pc, #72]	; (8002dc0 <HAL_TIM_MspPostInit+0x68>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d11e      	bne.n	8002db8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <HAL_TIM_MspPostInit+0x6c>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	4a10      	ldr	r2, [pc, #64]	; (8002dc4 <HAL_TIM_MspPostInit+0x6c>)
 8002d84:	f043 0304 	orr.w	r3, r3, #4
 8002d88:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <HAL_TIM_MspPostInit+0x6c>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002d96:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002d9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002da8:	2302      	movs	r3, #2
 8002daa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dac:	f107 030c 	add.w	r3, r7, #12
 8002db0:	4619      	mov	r1, r3
 8002db2:	4805      	ldr	r0, [pc, #20]	; (8002dc8 <HAL_TIM_MspPostInit+0x70>)
 8002db4:	f001 fac6 	bl	8004344 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002db8:	bf00      	nop
 8002dba:	3720      	adds	r7, #32
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40000400 	.word	0x40000400
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40020800 	.word	0x40020800

08002dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08e      	sub	sp, #56	; 0x38
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a4f      	ldr	r2, [pc, #316]	; (8002f28 <HAL_UART_MspInit+0x15c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d12c      	bne.n	8002e48 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	623b      	str	r3, [r7, #32]
 8002df2:	4b4e      	ldr	r3, [pc, #312]	; (8002f2c <HAL_UART_MspInit+0x160>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	4a4d      	ldr	r2, [pc, #308]	; (8002f2c <HAL_UART_MspInit+0x160>)
 8002df8:	f043 0310 	orr.w	r3, r3, #16
 8002dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dfe:	4b4b      	ldr	r3, [pc, #300]	; (8002f2c <HAL_UART_MspInit+0x160>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	623b      	str	r3, [r7, #32]
 8002e08:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
 8002e0e:	4b47      	ldr	r3, [pc, #284]	; (8002f2c <HAL_UART_MspInit+0x160>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	4a46      	ldr	r2, [pc, #280]	; (8002f2c <HAL_UART_MspInit+0x160>)
 8002e14:	f043 0302 	orr.w	r3, r3, #2
 8002e18:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1a:	4b44      	ldr	r3, [pc, #272]	; (8002f2c <HAL_UART_MspInit+0x160>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	61fb      	str	r3, [r7, #28]
 8002e24:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e26:	23c0      	movs	r3, #192	; 0xc0
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e32:	2303      	movs	r3, #3
 8002e34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e36:	2307      	movs	r3, #7
 8002e38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e3e:	4619      	mov	r1, r3
 8002e40:	483b      	ldr	r0, [pc, #236]	; (8002f30 <HAL_UART_MspInit+0x164>)
 8002e42:	f001 fa7f 	bl	8004344 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e46:	e06b      	b.n	8002f20 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a39      	ldr	r2, [pc, #228]	; (8002f34 <HAL_UART_MspInit+0x168>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d12c      	bne.n	8002eac <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	4b35      	ldr	r3, [pc, #212]	; (8002f2c <HAL_UART_MspInit+0x160>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	4a34      	ldr	r2, [pc, #208]	; (8002f2c <HAL_UART_MspInit+0x160>)
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e60:	6413      	str	r3, [r2, #64]	; 0x40
 8002e62:	4b32      	ldr	r3, [pc, #200]	; (8002f2c <HAL_UART_MspInit+0x160>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	61bb      	str	r3, [r7, #24]
 8002e6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	4b2e      	ldr	r3, [pc, #184]	; (8002f2c <HAL_UART_MspInit+0x160>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a2d      	ldr	r2, [pc, #180]	; (8002f2c <HAL_UART_MspInit+0x160>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b2b      	ldr	r3, [pc, #172]	; (8002f2c <HAL_UART_MspInit+0x160>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e8a:	230c      	movs	r3, #12
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e96:	2303      	movs	r3, #3
 8002e98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e9a:	2307      	movs	r3, #7
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4824      	ldr	r0, [pc, #144]	; (8002f38 <HAL_UART_MspInit+0x16c>)
 8002ea6:	f001 fa4d 	bl	8004344 <HAL_GPIO_Init>
}
 8002eaa:	e039      	b.n	8002f20 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART3)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a22      	ldr	r2, [pc, #136]	; (8002f3c <HAL_UART_MspInit+0x170>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d134      	bne.n	8002f20 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <HAL_UART_MspInit+0x160>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	4a1b      	ldr	r2, [pc, #108]	; (8002f2c <HAL_UART_MspInit+0x160>)
 8002ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec6:	4b19      	ldr	r3, [pc, #100]	; (8002f2c <HAL_UART_MspInit+0x160>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	4b15      	ldr	r3, [pc, #84]	; (8002f2c <HAL_UART_MspInit+0x160>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <HAL_UART_MspInit+0x160>)
 8002edc:	f043 0304 	orr.w	r3, r3, #4
 8002ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee2:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <HAL_UART_MspInit+0x160>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002eee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efc:	2303      	movs	r3, #3
 8002efe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f00:	2307      	movs	r3, #7
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f08:	4619      	mov	r1, r3
 8002f0a:	480d      	ldr	r0, [pc, #52]	; (8002f40 <HAL_UART_MspInit+0x174>)
 8002f0c:	f001 fa1a 	bl	8004344 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002f10:	2200      	movs	r2, #0
 8002f12:	2105      	movs	r1, #5
 8002f14:	2027      	movs	r0, #39	; 0x27
 8002f16:	f001 f959 	bl	80041cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f1a:	2027      	movs	r0, #39	; 0x27
 8002f1c:	f001 f972 	bl	8004204 <HAL_NVIC_EnableIRQ>
}
 8002f20:	bf00      	nop
 8002f22:	3738      	adds	r7, #56	; 0x38
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40011000 	.word	0x40011000
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40020400 	.word	0x40020400
 8002f34:	40004400 	.word	0x40004400
 8002f38:	40020000 	.word	0x40020000
 8002f3c:	40004800 	.word	0x40004800
 8002f40:	40020800 	.word	0x40020800

08002f44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08e      	sub	sp, #56	; 0x38
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002f54:	2300      	movs	r3, #0
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	4b33      	ldr	r3, [pc, #204]	; (8003028 <HAL_InitTick+0xe4>)
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	4a32      	ldr	r2, [pc, #200]	; (8003028 <HAL_InitTick+0xe4>)
 8002f5e:	f043 0310 	orr.w	r3, r3, #16
 8002f62:	6413      	str	r3, [r2, #64]	; 0x40
 8002f64:	4b30      	ldr	r3, [pc, #192]	; (8003028 <HAL_InitTick+0xe4>)
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	f003 0310 	and.w	r3, r3, #16
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f70:	f107 0210 	add.w	r2, r7, #16
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f004 fbda 	bl	8007734 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d103      	bne.n	8002f92 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002f8a:	f004 fbab 	bl	80076e4 <HAL_RCC_GetPCLK1Freq>
 8002f8e:	6378      	str	r0, [r7, #52]	; 0x34
 8002f90:	e004      	b.n	8002f9c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002f92:	f004 fba7 	bl	80076e4 <HAL_RCC_GetPCLK1Freq>
 8002f96:	4603      	mov	r3, r0
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9e:	4a23      	ldr	r2, [pc, #140]	; (800302c <HAL_InitTick+0xe8>)
 8002fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa4:	0c9b      	lsrs	r3, r3, #18
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002faa:	4b21      	ldr	r3, [pc, #132]	; (8003030 <HAL_InitTick+0xec>)
 8002fac:	4a21      	ldr	r2, [pc, #132]	; (8003034 <HAL_InitTick+0xf0>)
 8002fae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002fb0:	4b1f      	ldr	r3, [pc, #124]	; (8003030 <HAL_InitTick+0xec>)
 8002fb2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fb6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002fb8:	4a1d      	ldr	r2, [pc, #116]	; (8003030 <HAL_InitTick+0xec>)
 8002fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002fbe:	4b1c      	ldr	r3, [pc, #112]	; (8003030 <HAL_InitTick+0xec>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fc4:	4b1a      	ldr	r3, [pc, #104]	; (8003030 <HAL_InitTick+0xec>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fca:	4b19      	ldr	r3, [pc, #100]	; (8003030 <HAL_InitTick+0xec>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002fd0:	4817      	ldr	r0, [pc, #92]	; (8003030 <HAL_InitTick+0xec>)
 8002fd2:	f005 feda 	bl	8008d8a <HAL_TIM_Base_Init>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002fdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d11b      	bne.n	800301c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002fe4:	4812      	ldr	r0, [pc, #72]	; (8003030 <HAL_InitTick+0xec>)
 8002fe6:	f005 ff1f 	bl	8008e28 <HAL_TIM_Base_Start_IT>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002ff0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d111      	bne.n	800301c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ff8:	2036      	movs	r0, #54	; 0x36
 8002ffa:	f001 f903 	bl	8004204 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b0f      	cmp	r3, #15
 8003002:	d808      	bhi.n	8003016 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003004:	2200      	movs	r2, #0
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	2036      	movs	r0, #54	; 0x36
 800300a:	f001 f8df 	bl	80041cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800300e:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <HAL_InitTick+0xf4>)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	e002      	b.n	800301c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800301c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003020:	4618      	mov	r0, r3
 8003022:	3738      	adds	r7, #56	; 0x38
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40023800 	.word	0x40023800
 800302c:	431bde83 	.word	0x431bde83
 8003030:	20000468 	.word	0x20000468
 8003034:	40001000 	.word	0x40001000
 8003038:	20000004 	.word	0x20000004

0800303c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003040:	e7fe      	b.n	8003040 <NMI_Handler+0x4>
	...

08003044 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  	loge("HardFault");
 8003048:	4802      	ldr	r0, [pc, #8]	; (8003054 <HardFault_Handler+0x10>)
 800304a:	f7ff fa19 	bl	8002480 <loge>
  	break;
 800304e:	bf00      	nop
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 8003050:	bf00      	nop
 8003052:	bd80      	pop	{r7, pc}
 8003054:	08016e30 	.word	0x08016e30

08003058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800305c:	e7fe      	b.n	800305c <MemManage_Handler+0x4>

0800305e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800305e:	b480      	push	{r7}
 8003060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003062:	e7fe      	b.n	8003062 <BusFault_Handler+0x4>

08003064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003068:	e7fe      	b.n	8003068 <UsageFault_Handler+0x4>

0800306a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800307c:	4802      	ldr	r0, [pc, #8]	; (8003088 <USART3_IRQHandler+0x10>)
 800307e:	f006 ff8b 	bl	8009f98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20000698 	.word	0x20000698

0800308c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003090:	4802      	ldr	r0, [pc, #8]	; (800309c <TIM6_DAC_IRQHandler+0x10>)
 8003092:	f006 f8a9 	bl	80091e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000468 	.word	0x20000468

080030a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80030a4:	4802      	ldr	r0, [pc, #8]	; (80030b0 <OTG_FS_IRQHandler+0x10>)
 80030a6:	f003 f8b9 	bl	800621c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20006870 	.word	0x20006870

080030b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return 1;
 80030b8:	2301      	movs	r3, #1
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <_kill>:

int _kill(int pid, int sig)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030ce:	f010 fe7f 	bl	8013dd0 <__errno>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2216      	movs	r2, #22
 80030d6:	601a      	str	r2, [r3, #0]
  return -1;
 80030d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <_exit>:

void _exit (int status)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030ec:	f04f 31ff 	mov.w	r1, #4294967295
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff ffe7 	bl	80030c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030f6:	e7fe      	b.n	80030f6 <_exit+0x12>

080030f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	e00a      	b.n	8003120 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800310a:	f3af 8000 	nop.w
 800310e:	4601      	mov	r1, r0
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	60ba      	str	r2, [r7, #8]
 8003116:	b2ca      	uxtb	r2, r1
 8003118:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	3301      	adds	r3, #1
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	dbf0      	blt.n	800310a <_read+0x12>
  }

  return len;
 8003128:	687b      	ldr	r3, [r7, #4]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800313a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800313e:	4618      	mov	r0, r3
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800315a:	605a      	str	r2, [r3, #4]
  return 0;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <_isatty>:

int _isatty(int file)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003172:	2301      	movs	r3, #1
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031a4:	4a14      	ldr	r2, [pc, #80]	; (80031f8 <_sbrk+0x5c>)
 80031a6:	4b15      	ldr	r3, [pc, #84]	; (80031fc <_sbrk+0x60>)
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031b0:	4b13      	ldr	r3, [pc, #76]	; (8003200 <_sbrk+0x64>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d102      	bne.n	80031be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031b8:	4b11      	ldr	r3, [pc, #68]	; (8003200 <_sbrk+0x64>)
 80031ba:	4a12      	ldr	r2, [pc, #72]	; (8003204 <_sbrk+0x68>)
 80031bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031be:	4b10      	ldr	r3, [pc, #64]	; (8003200 <_sbrk+0x64>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d207      	bcs.n	80031dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031cc:	f010 fe00 	bl	8013dd0 <__errno>
 80031d0:	4603      	mov	r3, r0
 80031d2:	220c      	movs	r2, #12
 80031d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031d6:	f04f 33ff 	mov.w	r3, #4294967295
 80031da:	e009      	b.n	80031f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031dc:	4b08      	ldr	r3, [pc, #32]	; (8003200 <_sbrk+0x64>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031e2:	4b07      	ldr	r3, [pc, #28]	; (8003200 <_sbrk+0x64>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	4a05      	ldr	r2, [pc, #20]	; (8003200 <_sbrk+0x64>)
 80031ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ee:	68fb      	ldr	r3, [r7, #12]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	20020000 	.word	0x20020000
 80031fc:	00000400 	.word	0x00000400
 8003200:	200004b0 	.word	0x200004b0
 8003204:	20006fa8 	.word	0x20006fa8

08003208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <SystemInit+0x20>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003212:	4a05      	ldr	r2, [pc, #20]	; (8003228 <SystemInit+0x20>)
 8003214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003232:	463b      	mov	r3, r7
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800323e:	4b29      	ldr	r3, [pc, #164]	; (80032e4 <MX_ADC1_Init+0xb8>)
 8003240:	4a29      	ldr	r2, [pc, #164]	; (80032e8 <MX_ADC1_Init+0xbc>)
 8003242:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003244:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <MX_ADC1_Init+0xb8>)
 8003246:	2200      	movs	r2, #0
 8003248:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800324a:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <MX_ADC1_Init+0xb8>)
 800324c:	2200      	movs	r2, #0
 800324e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003250:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <MX_ADC1_Init+0xb8>)
 8003252:	2201      	movs	r2, #1
 8003254:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003256:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <MX_ADC1_Init+0xb8>)
 8003258:	2200      	movs	r2, #0
 800325a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800325c:	4b21      	ldr	r3, [pc, #132]	; (80032e4 <MX_ADC1_Init+0xb8>)
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8003264:	4b1f      	ldr	r3, [pc, #124]	; (80032e4 <MX_ADC1_Init+0xb8>)
 8003266:	2201      	movs	r2, #1
 8003268:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800326a:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <MX_ADC1_Init+0xb8>)
 800326c:	2200      	movs	r2, #0
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003270:	4b1c      	ldr	r3, [pc, #112]	; (80032e4 <MX_ADC1_Init+0xb8>)
 8003272:	4a1e      	ldr	r2, [pc, #120]	; (80032ec <MX_ADC1_Init+0xc0>)
 8003274:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003276:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <MX_ADC1_Init+0xb8>)
 8003278:	2200      	movs	r2, #0
 800327a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800327c:	4b19      	ldr	r3, [pc, #100]	; (80032e4 <MX_ADC1_Init+0xb8>)
 800327e:	2202      	movs	r2, #2
 8003280:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003282:	4b18      	ldr	r3, [pc, #96]	; (80032e4 <MX_ADC1_Init+0xb8>)
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800328a:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <MX_ADC1_Init+0xb8>)
 800328c:	2201      	movs	r2, #1
 800328e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003290:	4814      	ldr	r0, [pc, #80]	; (80032e4 <MX_ADC1_Init+0xb8>)
 8003292:	f000 fc71 	bl	8003b78 <HAL_ADC_Init>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800329c:	f7ff fc04 	bl	8002aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80032a4:	2301      	movs	r3, #1
 80032a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80032a8:	2300      	movs	r3, #0
 80032aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032ac:	463b      	mov	r3, r7
 80032ae:	4619      	mov	r1, r3
 80032b0:	480c      	ldr	r0, [pc, #48]	; (80032e4 <MX_ADC1_Init+0xb8>)
 80032b2:	f000 fca5 	bl	8003c00 <HAL_ADC_ConfigChannel>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80032bc:	f7ff fbf4 	bl	8002aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80032c0:	2301      	movs	r3, #1
 80032c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80032c4:	2302      	movs	r3, #2
 80032c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032c8:	463b      	mov	r3, r7
 80032ca:	4619      	mov	r1, r3
 80032cc:	4805      	ldr	r0, [pc, #20]	; (80032e4 <MX_ADC1_Init+0xb8>)
 80032ce:	f000 fc97 	bl	8003c00 <HAL_ADC_ConfigChannel>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80032d8:	f7ff fbe6 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	200004b4 	.word	0x200004b4
 80032e8:	40012000 	.word	0x40012000
 80032ec:	0f000001 	.word	0x0f000001

080032f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b094      	sub	sp, #80	; 0x50
 80032f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032f6:	f107 031c 	add.w	r3, r7, #28
 80032fa:	2234      	movs	r2, #52	; 0x34
 80032fc:	2100      	movs	r1, #0
 80032fe:	4618      	mov	r0, r3
 8003300:	f010 fe9c 	bl	801403c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003304:	f107 0308 	add.w	r3, r7, #8
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003314:	2300      	movs	r3, #0
 8003316:	607b      	str	r3, [r7, #4]
 8003318:	4b2a      	ldr	r3, [pc, #168]	; (80033c4 <SystemClock_Config+0xd4>)
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	4a29      	ldr	r2, [pc, #164]	; (80033c4 <SystemClock_Config+0xd4>)
 800331e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003322:	6413      	str	r3, [r2, #64]	; 0x40
 8003324:	4b27      	ldr	r3, [pc, #156]	; (80033c4 <SystemClock_Config+0xd4>)
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332c:	607b      	str	r3, [r7, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003330:	2300      	movs	r3, #0
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	4b24      	ldr	r3, [pc, #144]	; (80033c8 <SystemClock_Config+0xd8>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800333c:	4a22      	ldr	r2, [pc, #136]	; (80033c8 <SystemClock_Config+0xd8>)
 800333e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <SystemClock_Config+0xd8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800334c:	603b      	str	r3, [r7, #0]
 800334e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003350:	2305      	movs	r3, #5
 8003352:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003354:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003358:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800335a:	2301      	movs	r3, #1
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800335e:	2302      	movs	r3, #2
 8003360:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003362:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003366:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003368:	2306      	movs	r3, #6
 800336a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800336c:	2348      	movs	r3, #72	; 0x48
 800336e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003370:	2302      	movs	r3, #2
 8003372:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003374:	2303      	movs	r3, #3
 8003376:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003378:	2302      	movs	r3, #2
 800337a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800337c:	f107 031c 	add.w	r3, r7, #28
 8003380:	4618      	mov	r0, r3
 8003382:	f004 fedd 	bl	8008140 <HAL_RCC_OscConfig>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800338c:	f7ff fb8c 	bl	8002aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003390:	230f      	movs	r3, #15
 8003392:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003394:	2302      	movs	r3, #2
 8003396:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003398:	2300      	movs	r3, #0
 800339a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800339c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033a6:	f107 0308 	add.w	r3, r7, #8
 80033aa:	2102      	movs	r1, #2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f004 f8a7 	bl	8007500 <HAL_RCC_ClockConfig>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80033b8:	f7ff fb76 	bl	8002aa8 <Error_Handler>
  }
}
 80033bc:	bf00      	nop
 80033be:	3750      	adds	r7, #80	; 0x50
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40007000 	.word	0x40007000

080033cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08a      	sub	sp, #40	; 0x28
 80033d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d2:	f107 0314 	add.w	r3, r7, #20
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	605a      	str	r2, [r3, #4]
 80033dc:	609a      	str	r2, [r3, #8]
 80033de:	60da      	str	r2, [r3, #12]
 80033e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	4b49      	ldr	r3, [pc, #292]	; (800350c <MX_GPIO_Init+0x140>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	4a48      	ldr	r2, [pc, #288]	; (800350c <MX_GPIO_Init+0x140>)
 80033ec:	f043 0304 	orr.w	r3, r3, #4
 80033f0:	6313      	str	r3, [r2, #48]	; 0x30
 80033f2:	4b46      	ldr	r3, [pc, #280]	; (800350c <MX_GPIO_Init+0x140>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	4b42      	ldr	r3, [pc, #264]	; (800350c <MX_GPIO_Init+0x140>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	4a41      	ldr	r2, [pc, #260]	; (800350c <MX_GPIO_Init+0x140>)
 8003408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800340c:	6313      	str	r3, [r2, #48]	; 0x30
 800340e:	4b3f      	ldr	r3, [pc, #252]	; (800350c <MX_GPIO_Init+0x140>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	4b3b      	ldr	r3, [pc, #236]	; (800350c <MX_GPIO_Init+0x140>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	4a3a      	ldr	r2, [pc, #232]	; (800350c <MX_GPIO_Init+0x140>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	6313      	str	r3, [r2, #48]	; 0x30
 800342a:	4b38      	ldr	r3, [pc, #224]	; (800350c <MX_GPIO_Init+0x140>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	607b      	str	r3, [r7, #4]
 800343a:	4b34      	ldr	r3, [pc, #208]	; (800350c <MX_GPIO_Init+0x140>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	4a33      	ldr	r2, [pc, #204]	; (800350c <MX_GPIO_Init+0x140>)
 8003440:	f043 0302 	orr.w	r3, r3, #2
 8003444:	6313      	str	r3, [r2, #48]	; 0x30
 8003446:	4b31      	ldr	r3, [pc, #196]	; (800350c <MX_GPIO_Init+0x140>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	607b      	str	r3, [r7, #4]
 8003450:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZ_Pin|CM1_Pin|CM2_Pin, GPIO_PIN_RESET);
 8003452:	2200      	movs	r2, #0
 8003454:	210e      	movs	r1, #14
 8003456:	482e      	ldr	r0, [pc, #184]	; (8003510 <MX_GPIO_Init+0x144>)
 8003458:	f001 f908 	bl	800466c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|USB_IO_Pin, GPIO_PIN_RESET);
 800345c:	2200      	movs	r2, #0
 800345e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003462:	482c      	ldr	r0, [pc, #176]	; (8003514 <MX_GPIO_Init+0x148>)
 8003464:	f001 f902 	bl	800466c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8003468:	2200      	movs	r2, #0
 800346a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800346e:	482a      	ldr	r0, [pc, #168]	; (8003518 <MX_GPIO_Init+0x14c>)
 8003470:	f001 f8fc 	bl	800466c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800347a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800347e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003480:	2300      	movs	r3, #0
 8003482:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003484:	f107 0314 	add.w	r3, r7, #20
 8003488:	4619      	mov	r1, r3
 800348a:	4821      	ldr	r0, [pc, #132]	; (8003510 <MX_GPIO_Init+0x144>)
 800348c:	f000 ff5a 	bl	8004344 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZ_Pin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 8003490:	2302      	movs	r3, #2
 8003492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003494:	2301      	movs	r3, #1
 8003496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003498:	2300      	movs	r3, #0
 800349a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349c:	2300      	movs	r3, #0
 800349e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 80034a0:	f107 0314 	add.w	r3, r7, #20
 80034a4:	4619      	mov	r1, r3
 80034a6:	481a      	ldr	r0, [pc, #104]	; (8003510 <MX_GPIO_Init+0x144>)
 80034a8:	f000 ff4c 	bl	8004344 <HAL_GPIO_Init>

  /*Configure GPIO pins : CM1_Pin CM2_Pin */
  GPIO_InitStruct.Pin = CM1_Pin|CM2_Pin;
 80034ac:	230c      	movs	r3, #12
 80034ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034b0:	2301      	movs	r3, #1
 80034b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b8:	2303      	movs	r3, #3
 80034ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034bc:	f107 0314 	add.w	r3, r7, #20
 80034c0:	4619      	mov	r1, r3
 80034c2:	4813      	ldr	r0, [pc, #76]	; (8003510 <MX_GPIO_Init+0x144>)
 80034c4:	f000 ff3e 	bl	8004344 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin USB_IO_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|USB_IO_Pin;
 80034c8:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80034cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ce:	2301      	movs	r3, #1
 80034d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d6:	2300      	movs	r3, #0
 80034d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034da:	f107 0314 	add.w	r3, r7, #20
 80034de:	4619      	mov	r1, r3
 80034e0:	480c      	ldr	r0, [pc, #48]	; (8003514 <MX_GPIO_Init+0x148>)
 80034e2:	f000 ff2f 	bl	8004344 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80034e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ec:	2301      	movs	r3, #1
 80034ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f4:	2303      	movs	r3, #3
 80034f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80034f8:	f107 0314 	add.w	r3, r7, #20
 80034fc:	4619      	mov	r1, r3
 80034fe:	4806      	ldr	r0, [pc, #24]	; (8003518 <MX_GPIO_Init+0x14c>)
 8003500:	f000 ff20 	bl	8004344 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003504:	bf00      	nop
 8003506:	3728      	adds	r7, #40	; 0x28
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40023800 	.word	0x40023800
 8003510:	40020800 	.word	0x40020800
 8003514:	40020000 	.word	0x40020000
 8003518:	40020400 	.word	0x40020400

0800351c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003520:	4b12      	ldr	r3, [pc, #72]	; (800356c <MX_I2C1_Init+0x50>)
 8003522:	4a13      	ldr	r2, [pc, #76]	; (8003570 <MX_I2C1_Init+0x54>)
 8003524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003526:	4b11      	ldr	r3, [pc, #68]	; (800356c <MX_I2C1_Init+0x50>)
 8003528:	4a12      	ldr	r2, [pc, #72]	; (8003574 <MX_I2C1_Init+0x58>)
 800352a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800352c:	4b0f      	ldr	r3, [pc, #60]	; (800356c <MX_I2C1_Init+0x50>)
 800352e:	2200      	movs	r2, #0
 8003530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003532:	4b0e      	ldr	r3, [pc, #56]	; (800356c <MX_I2C1_Init+0x50>)
 8003534:	2200      	movs	r2, #0
 8003536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003538:	4b0c      	ldr	r3, [pc, #48]	; (800356c <MX_I2C1_Init+0x50>)
 800353a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800353e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003540:	4b0a      	ldr	r3, [pc, #40]	; (800356c <MX_I2C1_Init+0x50>)
 8003542:	2200      	movs	r2, #0
 8003544:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003546:	4b09      	ldr	r3, [pc, #36]	; (800356c <MX_I2C1_Init+0x50>)
 8003548:	2200      	movs	r2, #0
 800354a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800354c:	4b07      	ldr	r3, [pc, #28]	; (800356c <MX_I2C1_Init+0x50>)
 800354e:	2200      	movs	r2, #0
 8003550:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <MX_I2C1_Init+0x50>)
 8003554:	2200      	movs	r2, #0
 8003556:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003558:	4804      	ldr	r0, [pc, #16]	; (800356c <MX_I2C1_Init+0x50>)
 800355a:	f001 f8bb 	bl	80046d4 <HAL_I2C_Init>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003564:	f7ff faa0 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003568:	bf00      	nop
 800356a:	bd80      	pop	{r7, pc}
 800356c:	200004fc 	.word	0x200004fc
 8003570:	40005400 	.word	0x40005400
 8003574:	00061a80 	.word	0x00061a80

08003578 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800357e:	1d3b      	adds	r3, r7, #4
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	609a      	str	r2, [r3, #8]
 8003588:	60da      	str	r2, [r3, #12]
 800358a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800358c:	2300      	movs	r3, #0
 800358e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003590:	4b24      	ldr	r3, [pc, #144]	; (8003624 <MX_RTC_Init+0xac>)
 8003592:	4a25      	ldr	r2, [pc, #148]	; (8003628 <MX_RTC_Init+0xb0>)
 8003594:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003596:	4b23      	ldr	r3, [pc, #140]	; (8003624 <MX_RTC_Init+0xac>)
 8003598:	2200      	movs	r2, #0
 800359a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800359c:	4b21      	ldr	r3, [pc, #132]	; (8003624 <MX_RTC_Init+0xac>)
 800359e:	227f      	movs	r2, #127	; 0x7f
 80035a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80035a2:	4b20      	ldr	r3, [pc, #128]	; (8003624 <MX_RTC_Init+0xac>)
 80035a4:	22ff      	movs	r2, #255	; 0xff
 80035a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80035a8:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <MX_RTC_Init+0xac>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80035ae:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <MX_RTC_Init+0xac>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80035b4:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <MX_RTC_Init+0xac>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80035ba:	481a      	ldr	r0, [pc, #104]	; (8003624 <MX_RTC_Init+0xac>)
 80035bc:	f005 f85e 	bl	800867c <HAL_RTC_Init>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80035c6:	f7ff fa6f 	bl	8002aa8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80035d6:	2300      	movs	r3, #0
 80035d8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80035de:	1d3b      	adds	r3, r7, #4
 80035e0:	2201      	movs	r2, #1
 80035e2:	4619      	mov	r1, r3
 80035e4:	480f      	ldr	r0, [pc, #60]	; (8003624 <MX_RTC_Init+0xac>)
 80035e6:	f005 f8bf 	bl	8008768 <HAL_RTC_SetTime>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80035f0:	f7ff fa5a 	bl	8002aa8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80035f4:	2301      	movs	r3, #1
 80035f6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80035f8:	2301      	movs	r3, #1
 80035fa:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80035fc:	2301      	movs	r3, #1
 80035fe:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003600:	2300      	movs	r3, #0
 8003602:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003604:	463b      	mov	r3, r7
 8003606:	2201      	movs	r2, #1
 8003608:	4619      	mov	r1, r3
 800360a:	4806      	ldr	r0, [pc, #24]	; (8003624 <MX_RTC_Init+0xac>)
 800360c:	f005 f9a4 	bl	8008958 <HAL_RTC_SetDate>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8003616:	f7ff fa47 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800361a:	bf00      	nop
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20000550 	.word	0x20000550
 8003628:	40002800 	.word	0x40002800

0800362c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI2_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003630:	4b17      	ldr	r3, [pc, #92]	; (8003690 <MX_SPI2_Init+0x64>)
 8003632:	4a18      	ldr	r2, [pc, #96]	; (8003694 <MX_SPI2_Init+0x68>)
 8003634:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003636:	4b16      	ldr	r3, [pc, #88]	; (8003690 <MX_SPI2_Init+0x64>)
 8003638:	f44f 7282 	mov.w	r2, #260	; 0x104
 800363c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800363e:	4b14      	ldr	r3, [pc, #80]	; (8003690 <MX_SPI2_Init+0x64>)
 8003640:	2200      	movs	r2, #0
 8003642:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003644:	4b12      	ldr	r3, [pc, #72]	; (8003690 <MX_SPI2_Init+0x64>)
 8003646:	2200      	movs	r2, #0
 8003648:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800364a:	4b11      	ldr	r3, [pc, #68]	; (8003690 <MX_SPI2_Init+0x64>)
 800364c:	2200      	movs	r2, #0
 800364e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003650:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <MX_SPI2_Init+0x64>)
 8003652:	2200      	movs	r2, #0
 8003654:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003656:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <MX_SPI2_Init+0x64>)
 8003658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800365c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800365e:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <MX_SPI2_Init+0x64>)
 8003660:	2200      	movs	r2, #0
 8003662:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003664:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <MX_SPI2_Init+0x64>)
 8003666:	2200      	movs	r2, #0
 8003668:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800366a:	4b09      	ldr	r3, [pc, #36]	; (8003690 <MX_SPI2_Init+0x64>)
 800366c:	2200      	movs	r2, #0
 800366e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003670:	4b07      	ldr	r3, [pc, #28]	; (8003690 <MX_SPI2_Init+0x64>)
 8003672:	2200      	movs	r2, #0
 8003674:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003676:	4b06      	ldr	r3, [pc, #24]	; (8003690 <MX_SPI2_Init+0x64>)
 8003678:	220a      	movs	r2, #10
 800367a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800367c:	4804      	ldr	r0, [pc, #16]	; (8003690 <MX_SPI2_Init+0x64>)
 800367e:	f005 fafb 	bl	8008c78 <HAL_SPI_Init>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003688:	f7ff fa0e 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800368c:	bf00      	nop
 800368e:	bd80      	pop	{r7, pc}
 8003690:	20000570 	.word	0x20000570
 8003694:	40003800 	.word	0x40003800

08003698 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08e      	sub	sp, #56	; 0x38
 800369c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800369e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	605a      	str	r2, [r3, #4]
 80036a8:	609a      	str	r2, [r3, #8]
 80036aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036ac:	f107 0320 	add.w	r3, r7, #32
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036b6:	1d3b      	adds	r3, r7, #4
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	605a      	str	r2, [r3, #4]
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	60da      	str	r2, [r3, #12]
 80036c2:	611a      	str	r2, [r3, #16]
 80036c4:	615a      	str	r2, [r3, #20]
 80036c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80036c8:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <MX_TIM3_Init+0x110>)
 80036ca:	4a38      	ldr	r2, [pc, #224]	; (80037ac <MX_TIM3_Init+0x114>)
 80036cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80036ce:	4b36      	ldr	r3, [pc, #216]	; (80037a8 <MX_TIM3_Init+0x110>)
 80036d0:	2247      	movs	r2, #71	; 0x47
 80036d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036d4:	4b34      	ldr	r3, [pc, #208]	; (80037a8 <MX_TIM3_Init+0x110>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80036da:	4b33      	ldr	r3, [pc, #204]	; (80037a8 <MX_TIM3_Init+0x110>)
 80036dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036e2:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <MX_TIM3_Init+0x110>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036e8:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <MX_TIM3_Init+0x110>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80036ee:	482e      	ldr	r0, [pc, #184]	; (80037a8 <MX_TIM3_Init+0x110>)
 80036f0:	f005 fb4b 	bl	8008d8a <HAL_TIM_Base_Init>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80036fa:	f7ff f9d5 	bl	8002aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003702:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003704:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003708:	4619      	mov	r1, r3
 800370a:	4827      	ldr	r0, [pc, #156]	; (80037a8 <MX_TIM3_Init+0x110>)
 800370c:	f005 ff36 	bl	800957c <HAL_TIM_ConfigClockSource>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003716:	f7ff f9c7 	bl	8002aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800371a:	4823      	ldr	r0, [pc, #140]	; (80037a8 <MX_TIM3_Init+0x110>)
 800371c:	f005 fbf4 	bl	8008f08 <HAL_TIM_PWM_Init>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003726:	f7ff f9bf 	bl	8002aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800372a:	2300      	movs	r3, #0
 800372c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800372e:	2300      	movs	r3, #0
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003732:	f107 0320 	add.w	r3, r7, #32
 8003736:	4619      	mov	r1, r3
 8003738:	481b      	ldr	r0, [pc, #108]	; (80037a8 <MX_TIM3_Init+0x110>)
 800373a:	f006 fb1f 	bl	8009d7c <HAL_TIMEx_MasterConfigSynchronization>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003744:	f7ff f9b0 	bl	8002aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003748:	2360      	movs	r3, #96	; 0x60
 800374a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003758:	1d3b      	adds	r3, r7, #4
 800375a:	2200      	movs	r2, #0
 800375c:	4619      	mov	r1, r3
 800375e:	4812      	ldr	r0, [pc, #72]	; (80037a8 <MX_TIM3_Init+0x110>)
 8003760:	f005 fe4a 	bl	80093f8 <HAL_TIM_PWM_ConfigChannel>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800376a:	f7ff f99d 	bl	8002aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800376e:	1d3b      	adds	r3, r7, #4
 8003770:	2204      	movs	r2, #4
 8003772:	4619      	mov	r1, r3
 8003774:	480c      	ldr	r0, [pc, #48]	; (80037a8 <MX_TIM3_Init+0x110>)
 8003776:	f005 fe3f 	bl	80093f8 <HAL_TIM_PWM_ConfigChannel>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8003780:	f7ff f992 	bl	8002aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003784:	1d3b      	adds	r3, r7, #4
 8003786:	2208      	movs	r2, #8
 8003788:	4619      	mov	r1, r3
 800378a:	4807      	ldr	r0, [pc, #28]	; (80037a8 <MX_TIM3_Init+0x110>)
 800378c:	f005 fe34 	bl	80093f8 <HAL_TIM_PWM_ConfigChannel>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8003796:	f7ff f987 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800379a:	4803      	ldr	r0, [pc, #12]	; (80037a8 <MX_TIM3_Init+0x110>)
 800379c:	f7ff fadc 	bl	8002d58 <HAL_TIM_MspPostInit>

}
 80037a0:	bf00      	nop
 80037a2:	3738      	adds	r7, #56	; 0x38
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	200005c8 	.word	0x200005c8
 80037ac:	40000400 	.word	0x40000400

080037b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80037b4:	4b11      	ldr	r3, [pc, #68]	; (80037fc <MX_USART1_UART_Init+0x4c>)
 80037b6:	4a12      	ldr	r2, [pc, #72]	; (8003800 <MX_USART1_UART_Init+0x50>)
 80037b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80037ba:	4b10      	ldr	r3, [pc, #64]	; (80037fc <MX_USART1_UART_Init+0x4c>)
 80037bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037c2:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <MX_USART1_UART_Init+0x4c>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037c8:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <MX_USART1_UART_Init+0x4c>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037ce:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <MX_USART1_UART_Init+0x4c>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037d4:	4b09      	ldr	r3, [pc, #36]	; (80037fc <MX_USART1_UART_Init+0x4c>)
 80037d6:	220c      	movs	r2, #12
 80037d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037da:	4b08      	ldr	r3, [pc, #32]	; (80037fc <MX_USART1_UART_Init+0x4c>)
 80037dc:	2200      	movs	r2, #0
 80037de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037e0:	4b06      	ldr	r3, [pc, #24]	; (80037fc <MX_USART1_UART_Init+0x4c>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037e6:	4805      	ldr	r0, [pc, #20]	; (80037fc <MX_USART1_UART_Init+0x4c>)
 80037e8:	f006 fb58 	bl	8009e9c <HAL_UART_Init>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80037f2:	f7ff f959 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80037f6:	bf00      	nop
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000610 	.word	0x20000610
 8003800:	40011000 	.word	0x40011000

08003804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <MX_USART2_UART_Init+0x4c>)
 800380a:	4a12      	ldr	r2, [pc, #72]	; (8003854 <MX_USART2_UART_Init+0x50>)
 800380c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800380e:	4b10      	ldr	r3, [pc, #64]	; (8003850 <MX_USART2_UART_Init+0x4c>)
 8003810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003816:	4b0e      	ldr	r3, [pc, #56]	; (8003850 <MX_USART2_UART_Init+0x4c>)
 8003818:	2200      	movs	r2, #0
 800381a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800381c:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <MX_USART2_UART_Init+0x4c>)
 800381e:	2200      	movs	r2, #0
 8003820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003822:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <MX_USART2_UART_Init+0x4c>)
 8003824:	2200      	movs	r2, #0
 8003826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003828:	4b09      	ldr	r3, [pc, #36]	; (8003850 <MX_USART2_UART_Init+0x4c>)
 800382a:	220c      	movs	r2, #12
 800382c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800382e:	4b08      	ldr	r3, [pc, #32]	; (8003850 <MX_USART2_UART_Init+0x4c>)
 8003830:	2200      	movs	r2, #0
 8003832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003834:	4b06      	ldr	r3, [pc, #24]	; (8003850 <MX_USART2_UART_Init+0x4c>)
 8003836:	2200      	movs	r2, #0
 8003838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800383a:	4805      	ldr	r0, [pc, #20]	; (8003850 <MX_USART2_UART_Init+0x4c>)
 800383c:	f006 fb2e 	bl	8009e9c <HAL_UART_Init>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003846:	f7ff f92f 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800384a:	bf00      	nop
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000654 	.word	0x20000654
 8003854:	40004400 	.word	0x40004400

08003858 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800385c:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <MX_USART3_UART_Init+0x4c>)
 800385e:	4a12      	ldr	r2, [pc, #72]	; (80038a8 <MX_USART3_UART_Init+0x50>)
 8003860:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003862:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <MX_USART3_UART_Init+0x4c>)
 8003864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003868:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800386a:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <MX_USART3_UART_Init+0x4c>)
 800386c:	2200      	movs	r2, #0
 800386e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <MX_USART3_UART_Init+0x4c>)
 8003872:	2200      	movs	r2, #0
 8003874:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003876:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <MX_USART3_UART_Init+0x4c>)
 8003878:	2200      	movs	r2, #0
 800387a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <MX_USART3_UART_Init+0x4c>)
 800387e:	220c      	movs	r2, #12
 8003880:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003882:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <MX_USART3_UART_Init+0x4c>)
 8003884:	2200      	movs	r2, #0
 8003886:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <MX_USART3_UART_Init+0x4c>)
 800388a:	2200      	movs	r2, #0
 800388c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800388e:	4805      	ldr	r0, [pc, #20]	; (80038a4 <MX_USART3_UART_Init+0x4c>)
 8003890:	f006 fb04 	bl	8009e9c <HAL_UART_Init>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800389a:	f7ff f905 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000698 	.word	0x20000698
 80038a8:	40004800 	.word	0x40004800

080038ac <Buzzer_Once>:
#ifndef SRC_MODULE_BUZZER_C_
#define SRC_MODULE_BUZZER_C_

#include "module/buzzer.h"

void Buzzer_Once() {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
	osDelay(100);
 80038b0:	2064      	movs	r0, #100	; 0x64
 80038b2:	f00b fda5 	bl	800f400 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80038b6:	2200      	movs	r2, #0
 80038b8:	2102      	movs	r1, #2
 80038ba:	4802      	ldr	r0, [pc, #8]	; (80038c4 <Buzzer_Once+0x18>)
 80038bc:	f000 fed6 	bl	800466c <HAL_GPIO_WritePin>
}
 80038c0:	bf00      	nop
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40020800 	.word	0x40020800

080038c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80038c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003900 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038cc:	480d      	ldr	r0, [pc, #52]	; (8003904 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80038ce:	490e      	ldr	r1, [pc, #56]	; (8003908 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80038d0:	4a0e      	ldr	r2, [pc, #56]	; (800390c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80038d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038d4:	e002      	b.n	80038dc <LoopCopyDataInit>

080038d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038da:	3304      	adds	r3, #4

080038dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038e0:	d3f9      	bcc.n	80038d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038e2:	4a0b      	ldr	r2, [pc, #44]	; (8003910 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80038e4:	4c0b      	ldr	r4, [pc, #44]	; (8003914 <LoopFillZerobss+0x26>)
  movs r3, #0
 80038e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038e8:	e001      	b.n	80038ee <LoopFillZerobss>

080038ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038ec:	3204      	adds	r2, #4

080038ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038f0:	d3fb      	bcc.n	80038ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80038f2:	f7ff fc89 	bl	8003208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038f6:	f010 fb67 	bl	8013fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038fa:	f7fe fdd7 	bl	80024ac <main>
  bx  lr    
 80038fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003900:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003908:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 800390c:	080173b4 	.word	0x080173b4
  ldr r2, =_sbss
 8003910:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8003914:	20006fa8 	.word	0x20006fa8

08003918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003918:	e7fe      	b.n	8003918 <ADC_IRQHandler>

0800391a <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d104      	bne.n	8003932 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003928:	b672      	cpsid	i
}
 800392a:	bf00      	nop
 800392c:	f7ff f8bc 	bl	8002aa8 <Error_Handler>
 8003930:	e7fe      	b.n	8003930 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	e007      	b.n	8003948 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	2100      	movs	r1, #0
 800393e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	3301      	adds	r3, #1
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d9f4      	bls.n	8003938 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	721a      	strb	r2, [r3, #8]
}
 8003954:	bf00      	nop
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d104      	bne.n	8003974 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800396a:	b672      	cpsid	i
}
 800396c:	bf00      	nop
 800396e:	f7ff f89b 	bl	8002aa8 <Error_Handler>
 8003972:	e7fe      	b.n	8003972 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	7a1b      	ldrb	r3, [r3, #8]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d904      	bls.n	8003986 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800397c:	b672      	cpsid	i
}
 800397e:	bf00      	nop
 8003980:	f7ff f892 	bl	8002aa8 <Error_Handler>
 8003984:	e7fe      	b.n	8003984 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	7a1b      	ldrb	r3, [r3, #8]
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	b2d1      	uxtb	r1, r2
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	7211      	strb	r1, [r2, #8]
 8003992:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003994:	f3ef 8211 	mrs	r2, BASEPRI
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	60fa      	str	r2, [r7, #12]
 80039aa:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80039b4:	bf00      	nop
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d104      	bne.n	80039d4 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80039ca:	b672      	cpsid	i
}
 80039cc:	bf00      	nop
 80039ce:	f7ff f86b 	bl	8002aa8 <Error_Handler>
 80039d2:	e7fe      	b.n	80039d2 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	7a1b      	ldrb	r3, [r3, #8]
 80039d8:	3b01      	subs	r3, #1
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	7a1b      	ldrb	r3, [r3, #8]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d904      	bls.n	80039f2 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 80039e8:	b672      	cpsid	i
}
 80039ea:	bf00      	nop
 80039ec:	f7ff f85c 	bl	8002aa8 <Error_Handler>
 80039f0:	e7fe      	b.n	80039f0 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	7a1b      	ldrb	r3, [r3, #8]
 80039f6:	461a      	mov	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039fe:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a06:	bf00      	nop
}
 8003a08:	bf00      	nop
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d105      	bne.n	8003a2a <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8003a1e:	f010 f9d7 	bl	8013dd0 <__errno>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2216      	movs	r2, #22
 8003a26:	601a      	str	r2, [r3, #0]
    return;
 8003a28:	e015      	b.n	8003a56 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8003a2a:	200c      	movs	r0, #12
 8003a2c:	f010 faf0 	bl	8014010 <malloc>
 8003a30:	4603      	mov	r3, r0
 8003a32:	461a      	mov	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff ff68 	bl	800391a <stm32_lock_init>
    return;
 8003a4a:	e004      	b.n	8003a56 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8003a4c:	b672      	cpsid	i
}
 8003a4e:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8003a50:	f7ff f82a 	bl	8002aa8 <Error_Handler>
 8003a54:	e7fe      	b.n	8003a54 <__retarget_lock_init_recursive+0x44>
}
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d104      	bne.n	8003a74 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003a6a:	b672      	cpsid	i
}
 8003a6c:	bf00      	nop
 8003a6e:	f7ff f81b 	bl	8002aa8 <Error_Handler>
 8003a72:	e7fe      	b.n	8003a72 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff ff70 	bl	800395c <stm32_lock_acquire>
}
 8003a7c:	bf00      	nop
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d104      	bne.n	8003a9c <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003a92:	b672      	cpsid	i
}
 8003a94:	bf00      	nop
 8003a96:	f7ff f807 	bl	8002aa8 <Error_Handler>
 8003a9a:	e7fe      	b.n	8003a9a <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff ff8c 	bl	80039bc <stm32_lock_release>
}
 8003aa4:	bf00      	nop
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ab0:	4b0e      	ldr	r3, [pc, #56]	; (8003aec <HAL_Init+0x40>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a0d      	ldr	r2, [pc, #52]	; (8003aec <HAL_Init+0x40>)
 8003ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_Init+0x40>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <HAL_Init+0x40>)
 8003ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ac6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ac8:	4b08      	ldr	r3, [pc, #32]	; (8003aec <HAL_Init+0x40>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a07      	ldr	r2, [pc, #28]	; (8003aec <HAL_Init+0x40>)
 8003ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ad4:	2003      	movs	r0, #3
 8003ad6:	f000 fb6e 	bl	80041b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ada:	200f      	movs	r0, #15
 8003adc:	f7ff fa32 	bl	8002f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ae0:	f7fe ffee 	bl	8002ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40023c00 	.word	0x40023c00

08003af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <HAL_IncTick+0x20>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_IncTick+0x24>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4413      	add	r3, r2
 8003b00:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <HAL_IncTick+0x24>)
 8003b02:	6013      	str	r3, [r2, #0]
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20000008 	.word	0x20000008
 8003b14:	20000700 	.word	0x20000700

08003b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b1c:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <HAL_GetTick+0x14>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	20000700 	.word	0x20000700

08003b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b38:	f7ff ffee 	bl	8003b18 <HAL_GetTick>
 8003b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b48:	d005      	beq.n	8003b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b4a:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <HAL_Delay+0x44>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4413      	add	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b56:	bf00      	nop
 8003b58:	f7ff ffde 	bl	8003b18 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d8f7      	bhi.n	8003b58 <HAL_Delay+0x28>
  {
  }
}
 8003b68:	bf00      	nop
 8003b6a:	bf00      	nop
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000008 	.word	0x20000008

08003b78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e033      	b.n	8003bf6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fe ffbe 	bl	8002b18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d118      	bne.n	8003be8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bbe:	f023 0302 	bic.w	r3, r3, #2
 8003bc2:	f043 0202 	orr.w	r2, r3, #2
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f94a 	bl	8003e64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f023 0303 	bic.w	r3, r3, #3
 8003bde:	f043 0201 	orr.w	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	641a      	str	r2, [r3, #64]	; 0x40
 8003be6:	e001      	b.n	8003bec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x1c>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e113      	b.n	8003e44 <HAL_ADC_ConfigChannel+0x244>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b09      	cmp	r3, #9
 8003c2a:	d925      	bls.n	8003c78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68d9      	ldr	r1, [r3, #12]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	4413      	add	r3, r2
 8003c40:	3b1e      	subs	r3, #30
 8003c42:	2207      	movs	r2, #7
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	43da      	mvns	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	400a      	ands	r2, r1
 8003c50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68d9      	ldr	r1, [r3, #12]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	4618      	mov	r0, r3
 8003c64:	4603      	mov	r3, r0
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	4403      	add	r3, r0
 8003c6a:	3b1e      	subs	r3, #30
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	60da      	str	r2, [r3, #12]
 8003c76:	e022      	b.n	8003cbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6919      	ldr	r1, [r3, #16]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	461a      	mov	r2, r3
 8003c86:	4613      	mov	r3, r2
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	4413      	add	r3, r2
 8003c8c:	2207      	movs	r2, #7
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	43da      	mvns	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	400a      	ands	r2, r1
 8003c9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6919      	ldr	r1, [r3, #16]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	4618      	mov	r0, r3
 8003cae:	4603      	mov	r3, r0
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	4403      	add	r3, r0
 8003cb4:	409a      	lsls	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b06      	cmp	r3, #6
 8003cc4:	d824      	bhi.n	8003d10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3b05      	subs	r3, #5
 8003cd8:	221f      	movs	r2, #31
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43da      	mvns	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	400a      	ands	r2, r1
 8003ce6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	3b05      	subs	r3, #5
 8003d02:	fa00 f203 	lsl.w	r2, r0, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	635a      	str	r2, [r3, #52]	; 0x34
 8003d0e:	e04c      	b.n	8003daa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b0c      	cmp	r3, #12
 8003d16:	d824      	bhi.n	8003d62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	3b23      	subs	r3, #35	; 0x23
 8003d2a:	221f      	movs	r2, #31
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	43da      	mvns	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	400a      	ands	r2, r1
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	4618      	mov	r0, r3
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	3b23      	subs	r3, #35	; 0x23
 8003d54:	fa00 f203 	lsl.w	r2, r0, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d60:	e023      	b.n	8003daa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	3b41      	subs	r3, #65	; 0x41
 8003d74:	221f      	movs	r2, #31
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	43da      	mvns	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	400a      	ands	r2, r1
 8003d82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	4618      	mov	r0, r3
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3b41      	subs	r3, #65	; 0x41
 8003d9e:	fa00 f203 	lsl.w	r2, r0, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003daa:	4b29      	ldr	r3, [pc, #164]	; (8003e50 <HAL_ADC_ConfigChannel+0x250>)
 8003dac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a28      	ldr	r2, [pc, #160]	; (8003e54 <HAL_ADC_ConfigChannel+0x254>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d10f      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x1d8>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b12      	cmp	r3, #18
 8003dbe:	d10b      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a1d      	ldr	r2, [pc, #116]	; (8003e54 <HAL_ADC_ConfigChannel+0x254>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d12b      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x23a>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a1c      	ldr	r2, [pc, #112]	; (8003e58 <HAL_ADC_ConfigChannel+0x258>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d003      	beq.n	8003df4 <HAL_ADC_ConfigChannel+0x1f4>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b11      	cmp	r3, #17
 8003df2:	d122      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a11      	ldr	r2, [pc, #68]	; (8003e58 <HAL_ADC_ConfigChannel+0x258>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d111      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e16:	4b11      	ldr	r3, [pc, #68]	; (8003e5c <HAL_ADC_ConfigChannel+0x25c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a11      	ldr	r2, [pc, #68]	; (8003e60 <HAL_ADC_ConfigChannel+0x260>)
 8003e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e20:	0c9a      	lsrs	r2, r3, #18
 8003e22:	4613      	mov	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e2c:	e002      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	3b01      	subs	r3, #1
 8003e32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f9      	bne.n	8003e2e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	40012300 	.word	0x40012300
 8003e54:	40012000 	.word	0x40012000
 8003e58:	10000012 	.word	0x10000012
 8003e5c:	20000000 	.word	0x20000000
 8003e60:	431bde83 	.word	0x431bde83

08003e64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e6c:	4b79      	ldr	r3, [pc, #484]	; (8004054 <ADC_Init+0x1f0>)
 8003e6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	431a      	orrs	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6859      	ldr	r1, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	021a      	lsls	r2, r3, #8
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ebc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6859      	ldr	r1, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ede:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6899      	ldr	r1, [r3, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	4a58      	ldr	r2, [pc, #352]	; (8004058 <ADC_Init+0x1f4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d022      	beq.n	8003f42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6899      	ldr	r1, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6899      	ldr	r1, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	e00f      	b.n	8003f62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0202 	bic.w	r2, r2, #2
 8003f70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6899      	ldr	r1, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	7e1b      	ldrb	r3, [r3, #24]
 8003f7c:	005a      	lsls	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d01b      	beq.n	8003fc8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003fae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6859      	ldr	r1, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	035a      	lsls	r2, r3, #13
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	e007      	b.n	8003fd8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	051a      	lsls	r2, r3, #20
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800400c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6899      	ldr	r1, [r3, #8]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800401a:	025a      	lsls	r2, r3, #9
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004032:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6899      	ldr	r1, [r3, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	029a      	lsls	r2, r3, #10
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	609a      	str	r2, [r3, #8]
}
 8004048:	bf00      	nop
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	40012300 	.word	0x40012300
 8004058:	0f000001 	.word	0x0f000001

0800405c <__NVIC_SetPriorityGrouping>:
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800406c:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <__NVIC_SetPriorityGrouping+0x44>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004078:	4013      	ands	r3, r2
 800407a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800408c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800408e:	4a04      	ldr	r2, [pc, #16]	; (80040a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	60d3      	str	r3, [r2, #12]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	e000ed00 	.word	0xe000ed00

080040a4 <__NVIC_GetPriorityGrouping>:
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040a8:	4b04      	ldr	r3, [pc, #16]	; (80040bc <__NVIC_GetPriorityGrouping+0x18>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	0a1b      	lsrs	r3, r3, #8
 80040ae:	f003 0307 	and.w	r3, r3, #7
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	e000ed00 	.word	0xe000ed00

080040c0 <__NVIC_EnableIRQ>:
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4603      	mov	r3, r0
 80040c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	db0b      	blt.n	80040ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	f003 021f 	and.w	r2, r3, #31
 80040d8:	4907      	ldr	r1, [pc, #28]	; (80040f8 <__NVIC_EnableIRQ+0x38>)
 80040da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2001      	movs	r0, #1
 80040e2:	fa00 f202 	lsl.w	r2, r0, r2
 80040e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	e000e100 	.word	0xe000e100

080040fc <__NVIC_SetPriority>:
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	6039      	str	r1, [r7, #0]
 8004106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410c:	2b00      	cmp	r3, #0
 800410e:	db0a      	blt.n	8004126 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	b2da      	uxtb	r2, r3
 8004114:	490c      	ldr	r1, [pc, #48]	; (8004148 <__NVIC_SetPriority+0x4c>)
 8004116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411a:	0112      	lsls	r2, r2, #4
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	440b      	add	r3, r1
 8004120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004124:	e00a      	b.n	800413c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	b2da      	uxtb	r2, r3
 800412a:	4908      	ldr	r1, [pc, #32]	; (800414c <__NVIC_SetPriority+0x50>)
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	3b04      	subs	r3, #4
 8004134:	0112      	lsls	r2, r2, #4
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	440b      	add	r3, r1
 800413a:	761a      	strb	r2, [r3, #24]
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	e000e100 	.word	0xe000e100
 800414c:	e000ed00 	.word	0xe000ed00

08004150 <NVIC_EncodePriority>:
{
 8004150:	b480      	push	{r7}
 8004152:	b089      	sub	sp, #36	; 0x24
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f1c3 0307 	rsb	r3, r3, #7
 800416a:	2b04      	cmp	r3, #4
 800416c:	bf28      	it	cs
 800416e:	2304      	movcs	r3, #4
 8004170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	3304      	adds	r3, #4
 8004176:	2b06      	cmp	r3, #6
 8004178:	d902      	bls.n	8004180 <NVIC_EncodePriority+0x30>
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	3b03      	subs	r3, #3
 800417e:	e000      	b.n	8004182 <NVIC_EncodePriority+0x32>
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004184:	f04f 32ff 	mov.w	r2, #4294967295
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43da      	mvns	r2, r3
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	401a      	ands	r2, r3
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004198:	f04f 31ff 	mov.w	r1, #4294967295
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	fa01 f303 	lsl.w	r3, r1, r3
 80041a2:	43d9      	mvns	r1, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041a8:	4313      	orrs	r3, r2
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3724      	adds	r7, #36	; 0x24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff ff4c 	bl	800405c <__NVIC_SetPriorityGrouping>
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	4603      	mov	r3, r0
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041de:	f7ff ff61 	bl	80040a4 <__NVIC_GetPriorityGrouping>
 80041e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	6978      	ldr	r0, [r7, #20]
 80041ea:	f7ff ffb1 	bl	8004150 <NVIC_EncodePriority>
 80041ee:	4602      	mov	r2, r0
 80041f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041f4:	4611      	mov	r1, r2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff ff80 	bl	80040fc <__NVIC_SetPriority>
}
 80041fc:	bf00      	nop
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800420e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff ff54 	bl	80040c0 <__NVIC_EnableIRQ>
}
 8004218:	bf00      	nop
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800422e:	f7ff fc73 	bl	8003b18 <HAL_GetTick>
 8004232:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d008      	beq.n	8004252 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2280      	movs	r2, #128	; 0x80
 8004244:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e052      	b.n	80042f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0216 	bic.w	r2, r2, #22
 8004260:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695a      	ldr	r2, [r3, #20]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004270:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	d103      	bne.n	8004282 <HAL_DMA_Abort+0x62>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427e:	2b00      	cmp	r3, #0
 8004280:	d007      	beq.n	8004292 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0208 	bic.w	r2, r2, #8
 8004290:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0201 	bic.w	r2, r2, #1
 80042a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042a2:	e013      	b.n	80042cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042a4:	f7ff fc38 	bl	8003b18 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b05      	cmp	r3, #5
 80042b0:	d90c      	bls.n	80042cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2220      	movs	r2, #32
 80042b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2203      	movs	r2, #3
 80042bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e015      	b.n	80042f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1e4      	bne.n	80042a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042de:	223f      	movs	r2, #63	; 0x3f
 80042e0:	409a      	lsls	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d004      	beq.n	800431e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2280      	movs	r2, #128	; 0x80
 8004318:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e00c      	b.n	8004338 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2205      	movs	r2, #5
 8004322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0201 	bic.w	r2, r2, #1
 8004334:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004344:	b480      	push	{r7}
 8004346:	b089      	sub	sp, #36	; 0x24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004352:	2300      	movs	r3, #0
 8004354:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004356:	2300      	movs	r3, #0
 8004358:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800435a:	2300      	movs	r3, #0
 800435c:	61fb      	str	r3, [r7, #28]
 800435e:	e165      	b.n	800462c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004360:	2201      	movs	r2, #1
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4013      	ands	r3, r2
 8004372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	429a      	cmp	r2, r3
 800437a:	f040 8154 	bne.w	8004626 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	2b01      	cmp	r3, #1
 8004388:	d005      	beq.n	8004396 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004392:	2b02      	cmp	r3, #2
 8004394:	d130      	bne.n	80043f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	2203      	movs	r2, #3
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43db      	mvns	r3, r3
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4013      	ands	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4313      	orrs	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043cc:	2201      	movs	r2, #1
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	43db      	mvns	r3, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4013      	ands	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	f003 0201 	and.w	r2, r3, #1
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	2b03      	cmp	r3, #3
 8004402:	d017      	beq.n	8004434 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	2203      	movs	r2, #3
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	43db      	mvns	r3, r3
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	4013      	ands	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4313      	orrs	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d123      	bne.n	8004488 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	08da      	lsrs	r2, r3, #3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3208      	adds	r2, #8
 8004448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800444c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	220f      	movs	r2, #15
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	43db      	mvns	r3, r3
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	4013      	ands	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	4313      	orrs	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	08da      	lsrs	r2, r3, #3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3208      	adds	r2, #8
 8004482:	69b9      	ldr	r1, [r7, #24]
 8004484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	2203      	movs	r2, #3
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f003 0203 	and.w	r2, r3, #3
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 80ae 	beq.w	8004626 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	4b5d      	ldr	r3, [pc, #372]	; (8004644 <HAL_GPIO_Init+0x300>)
 80044d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d2:	4a5c      	ldr	r2, [pc, #368]	; (8004644 <HAL_GPIO_Init+0x300>)
 80044d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044d8:	6453      	str	r3, [r2, #68]	; 0x44
 80044da:	4b5a      	ldr	r3, [pc, #360]	; (8004644 <HAL_GPIO_Init+0x300>)
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044e6:	4a58      	ldr	r2, [pc, #352]	; (8004648 <HAL_GPIO_Init+0x304>)
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	089b      	lsrs	r3, r3, #2
 80044ec:	3302      	adds	r3, #2
 80044ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	220f      	movs	r2, #15
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	43db      	mvns	r3, r3
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	4013      	ands	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a4f      	ldr	r2, [pc, #316]	; (800464c <HAL_GPIO_Init+0x308>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d025      	beq.n	800455e <HAL_GPIO_Init+0x21a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a4e      	ldr	r2, [pc, #312]	; (8004650 <HAL_GPIO_Init+0x30c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d01f      	beq.n	800455a <HAL_GPIO_Init+0x216>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a4d      	ldr	r2, [pc, #308]	; (8004654 <HAL_GPIO_Init+0x310>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d019      	beq.n	8004556 <HAL_GPIO_Init+0x212>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a4c      	ldr	r2, [pc, #304]	; (8004658 <HAL_GPIO_Init+0x314>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d013      	beq.n	8004552 <HAL_GPIO_Init+0x20e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a4b      	ldr	r2, [pc, #300]	; (800465c <HAL_GPIO_Init+0x318>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00d      	beq.n	800454e <HAL_GPIO_Init+0x20a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a4a      	ldr	r2, [pc, #296]	; (8004660 <HAL_GPIO_Init+0x31c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d007      	beq.n	800454a <HAL_GPIO_Init+0x206>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a49      	ldr	r2, [pc, #292]	; (8004664 <HAL_GPIO_Init+0x320>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d101      	bne.n	8004546 <HAL_GPIO_Init+0x202>
 8004542:	2306      	movs	r3, #6
 8004544:	e00c      	b.n	8004560 <HAL_GPIO_Init+0x21c>
 8004546:	2307      	movs	r3, #7
 8004548:	e00a      	b.n	8004560 <HAL_GPIO_Init+0x21c>
 800454a:	2305      	movs	r3, #5
 800454c:	e008      	b.n	8004560 <HAL_GPIO_Init+0x21c>
 800454e:	2304      	movs	r3, #4
 8004550:	e006      	b.n	8004560 <HAL_GPIO_Init+0x21c>
 8004552:	2303      	movs	r3, #3
 8004554:	e004      	b.n	8004560 <HAL_GPIO_Init+0x21c>
 8004556:	2302      	movs	r3, #2
 8004558:	e002      	b.n	8004560 <HAL_GPIO_Init+0x21c>
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <HAL_GPIO_Init+0x21c>
 800455e:	2300      	movs	r3, #0
 8004560:	69fa      	ldr	r2, [r7, #28]
 8004562:	f002 0203 	and.w	r2, r2, #3
 8004566:	0092      	lsls	r2, r2, #2
 8004568:	4093      	lsls	r3, r2
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4313      	orrs	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004570:	4935      	ldr	r1, [pc, #212]	; (8004648 <HAL_GPIO_Init+0x304>)
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	089b      	lsrs	r3, r3, #2
 8004576:	3302      	adds	r3, #2
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800457e:	4b3a      	ldr	r3, [pc, #232]	; (8004668 <HAL_GPIO_Init+0x324>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	43db      	mvns	r3, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4013      	ands	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	4313      	orrs	r3, r2
 80045a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045a2:	4a31      	ldr	r2, [pc, #196]	; (8004668 <HAL_GPIO_Init+0x324>)
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045a8:	4b2f      	ldr	r3, [pc, #188]	; (8004668 <HAL_GPIO_Init+0x324>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	43db      	mvns	r3, r3
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	4013      	ands	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045cc:	4a26      	ldr	r2, [pc, #152]	; (8004668 <HAL_GPIO_Init+0x324>)
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045d2:	4b25      	ldr	r3, [pc, #148]	; (8004668 <HAL_GPIO_Init+0x324>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	43db      	mvns	r3, r3
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	4013      	ands	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045f6:	4a1c      	ldr	r2, [pc, #112]	; (8004668 <HAL_GPIO_Init+0x324>)
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045fc:	4b1a      	ldr	r3, [pc, #104]	; (8004668 <HAL_GPIO_Init+0x324>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	43db      	mvns	r3, r3
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	4013      	ands	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d003      	beq.n	8004620 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004620:	4a11      	ldr	r2, [pc, #68]	; (8004668 <HAL_GPIO_Init+0x324>)
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	3301      	adds	r3, #1
 800462a:	61fb      	str	r3, [r7, #28]
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	2b0f      	cmp	r3, #15
 8004630:	f67f ae96 	bls.w	8004360 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop
 8004638:	3724      	adds	r7, #36	; 0x24
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40023800 	.word	0x40023800
 8004648:	40013800 	.word	0x40013800
 800464c:	40020000 	.word	0x40020000
 8004650:	40020400 	.word	0x40020400
 8004654:	40020800 	.word	0x40020800
 8004658:	40020c00 	.word	0x40020c00
 800465c:	40021000 	.word	0x40021000
 8004660:	40021400 	.word	0x40021400
 8004664:	40021800 	.word	0x40021800
 8004668:	40013c00 	.word	0x40013c00

0800466c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	807b      	strh	r3, [r7, #2]
 8004678:	4613      	mov	r3, r2
 800467a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800467c:	787b      	ldrb	r3, [r7, #1]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004682:	887a      	ldrh	r2, [r7, #2]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004688:	e003      	b.n	8004692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800468a:	887b      	ldrh	r3, [r7, #2]
 800468c:	041a      	lsls	r2, r3, #16
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	619a      	str	r2, [r3, #24]
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800469e:	b480      	push	{r7}
 80046a0:	b085      	sub	sp, #20
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	460b      	mov	r3, r1
 80046a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046b0:	887a      	ldrh	r2, [r7, #2]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4013      	ands	r3, r2
 80046b6:	041a      	lsls	r2, r3, #16
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	43d9      	mvns	r1, r3
 80046bc:	887b      	ldrh	r3, [r7, #2]
 80046be:	400b      	ands	r3, r1
 80046c0:	431a      	orrs	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	619a      	str	r2, [r3, #24]
}
 80046c6:	bf00      	nop
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
	...

080046d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e12b      	b.n	800493e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fe fa50 	bl	8002ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2224      	movs	r2, #36	; 0x24
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0201 	bic.w	r2, r2, #1
 8004716:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004726:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004736:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004738:	f002 ffd4 	bl	80076e4 <HAL_RCC_GetPCLK1Freq>
 800473c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	4a81      	ldr	r2, [pc, #516]	; (8004948 <HAL_I2C_Init+0x274>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d807      	bhi.n	8004758 <HAL_I2C_Init+0x84>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4a80      	ldr	r2, [pc, #512]	; (800494c <HAL_I2C_Init+0x278>)
 800474c:	4293      	cmp	r3, r2
 800474e:	bf94      	ite	ls
 8004750:	2301      	movls	r3, #1
 8004752:	2300      	movhi	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	e006      	b.n	8004766 <HAL_I2C_Init+0x92>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a7d      	ldr	r2, [pc, #500]	; (8004950 <HAL_I2C_Init+0x27c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	bf94      	ite	ls
 8004760:	2301      	movls	r3, #1
 8004762:	2300      	movhi	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e0e7      	b.n	800493e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4a78      	ldr	r2, [pc, #480]	; (8004954 <HAL_I2C_Init+0x280>)
 8004772:	fba2 2303 	umull	r2, r3, r2, r3
 8004776:	0c9b      	lsrs	r3, r3, #18
 8004778:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	4a6a      	ldr	r2, [pc, #424]	; (8004948 <HAL_I2C_Init+0x274>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d802      	bhi.n	80047a8 <HAL_I2C_Init+0xd4>
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	3301      	adds	r3, #1
 80047a6:	e009      	b.n	80047bc <HAL_I2C_Init+0xe8>
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047ae:	fb02 f303 	mul.w	r3, r2, r3
 80047b2:	4a69      	ldr	r2, [pc, #420]	; (8004958 <HAL_I2C_Init+0x284>)
 80047b4:	fba2 2303 	umull	r2, r3, r2, r3
 80047b8:	099b      	lsrs	r3, r3, #6
 80047ba:	3301      	adds	r3, #1
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6812      	ldr	r2, [r2, #0]
 80047c0:	430b      	orrs	r3, r1
 80047c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	495c      	ldr	r1, [pc, #368]	; (8004948 <HAL_I2C_Init+0x274>)
 80047d8:	428b      	cmp	r3, r1
 80047da:	d819      	bhi.n	8004810 <HAL_I2C_Init+0x13c>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	1e59      	subs	r1, r3, #1
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80047ea:	1c59      	adds	r1, r3, #1
 80047ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047f0:	400b      	ands	r3, r1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <HAL_I2C_Init+0x138>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1e59      	subs	r1, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	fbb1 f3f3 	udiv	r3, r1, r3
 8004804:	3301      	adds	r3, #1
 8004806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800480a:	e051      	b.n	80048b0 <HAL_I2C_Init+0x1dc>
 800480c:	2304      	movs	r3, #4
 800480e:	e04f      	b.n	80048b0 <HAL_I2C_Init+0x1dc>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d111      	bne.n	800483c <HAL_I2C_Init+0x168>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	1e58      	subs	r0, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6859      	ldr	r1, [r3, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	440b      	add	r3, r1
 8004826:	fbb0 f3f3 	udiv	r3, r0, r3
 800482a:	3301      	adds	r3, #1
 800482c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004830:	2b00      	cmp	r3, #0
 8004832:	bf0c      	ite	eq
 8004834:	2301      	moveq	r3, #1
 8004836:	2300      	movne	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	e012      	b.n	8004862 <HAL_I2C_Init+0x18e>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	1e58      	subs	r0, r3, #1
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6859      	ldr	r1, [r3, #4]
 8004844:	460b      	mov	r3, r1
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	440b      	add	r3, r1
 800484a:	0099      	lsls	r1, r3, #2
 800484c:	440b      	add	r3, r1
 800484e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004852:	3301      	adds	r3, #1
 8004854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004858:	2b00      	cmp	r3, #0
 800485a:	bf0c      	ite	eq
 800485c:	2301      	moveq	r3, #1
 800485e:	2300      	movne	r3, #0
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <HAL_I2C_Init+0x196>
 8004866:	2301      	movs	r3, #1
 8004868:	e022      	b.n	80048b0 <HAL_I2C_Init+0x1dc>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10e      	bne.n	8004890 <HAL_I2C_Init+0x1bc>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1e58      	subs	r0, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6859      	ldr	r1, [r3, #4]
 800487a:	460b      	mov	r3, r1
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	440b      	add	r3, r1
 8004880:	fbb0 f3f3 	udiv	r3, r0, r3
 8004884:	3301      	adds	r3, #1
 8004886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800488a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800488e:	e00f      	b.n	80048b0 <HAL_I2C_Init+0x1dc>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	1e58      	subs	r0, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6859      	ldr	r1, [r3, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	0099      	lsls	r1, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048a6:	3301      	adds	r3, #1
 80048a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	6809      	ldr	r1, [r1, #0]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69da      	ldr	r2, [r3, #28]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6911      	ldr	r1, [r2, #16]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	68d2      	ldr	r2, [r2, #12]
 80048ea:	4311      	orrs	r1, r2
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6812      	ldr	r2, [r2, #0]
 80048f0:	430b      	orrs	r3, r1
 80048f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	695a      	ldr	r2, [r3, #20]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2220      	movs	r2, #32
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	000186a0 	.word	0x000186a0
 800494c:	001e847f 	.word	0x001e847f
 8004950:	003d08ff 	.word	0x003d08ff
 8004954:	431bde83 	.word	0x431bde83
 8004958:	10624dd3 	.word	0x10624dd3

0800495c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af02      	add	r7, sp, #8
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	607a      	str	r2, [r7, #4]
 8004966:	461a      	mov	r2, r3
 8004968:	460b      	mov	r3, r1
 800496a:	817b      	strh	r3, [r7, #10]
 800496c:	4613      	mov	r3, r2
 800496e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004970:	f7ff f8d2 	bl	8003b18 <HAL_GetTick>
 8004974:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b20      	cmp	r3, #32
 8004980:	f040 80e0 	bne.w	8004b44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	2319      	movs	r3, #25
 800498a:	2201      	movs	r2, #1
 800498c:	4970      	ldr	r1, [pc, #448]	; (8004b50 <HAL_I2C_Master_Transmit+0x1f4>)
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f001 f910 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800499a:	2302      	movs	r3, #2
 800499c:	e0d3      	b.n	8004b46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_I2C_Master_Transmit+0x50>
 80049a8:	2302      	movs	r3, #2
 80049aa:	e0cc      	b.n	8004b46 <HAL_I2C_Master_Transmit+0x1ea>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d007      	beq.n	80049d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f042 0201 	orr.w	r2, r2, #1
 80049d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2221      	movs	r2, #33	; 0x21
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2210      	movs	r2, #16
 80049ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	893a      	ldrh	r2, [r7, #8]
 8004a02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4a50      	ldr	r2, [pc, #320]	; (8004b54 <HAL_I2C_Master_Transmit+0x1f8>)
 8004a12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a14:	8979      	ldrh	r1, [r7, #10]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	6a3a      	ldr	r2, [r7, #32]
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 fdfc 	bl	8005618 <I2C_MasterRequestWrite>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e08d      	b.n	8004b46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004a40:	e066      	b.n	8004b10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	6a39      	ldr	r1, [r7, #32]
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f001 f98a 	bl	8005d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00d      	beq.n	8004a6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d107      	bne.n	8004a6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e06b      	b.n	8004b46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	781a      	ldrb	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d11b      	bne.n	8004ae4 <HAL_I2C_Master_Transmit+0x188>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d017      	beq.n	8004ae4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	781a      	ldrb	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	6a39      	ldr	r1, [r7, #32]
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f001 f97a 	bl	8005de2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00d      	beq.n	8004b10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d107      	bne.n	8004b0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e01a      	b.n	8004b46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d194      	bne.n	8004a42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	e000      	b.n	8004b46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004b44:	2302      	movs	r3, #2
  }
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	00100002 	.word	0x00100002
 8004b54:	ffff0000 	.word	0xffff0000

08004b58 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08c      	sub	sp, #48	; 0x30
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	607a      	str	r2, [r7, #4]
 8004b62:	461a      	mov	r2, r3
 8004b64:	460b      	mov	r3, r1
 8004b66:	817b      	strh	r3, [r7, #10]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b6c:	f7fe ffd4 	bl	8003b18 <HAL_GetTick>
 8004b70:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b20      	cmp	r3, #32
 8004b7c:	f040 820b 	bne.w	8004f96 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	2319      	movs	r3, #25
 8004b86:	2201      	movs	r2, #1
 8004b88:	497c      	ldr	r1, [pc, #496]	; (8004d7c <HAL_I2C_Master_Receive+0x224>)
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f001 f812 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004b96:	2302      	movs	r3, #2
 8004b98:	e1fe      	b.n	8004f98 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_I2C_Master_Receive+0x50>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e1f7      	b.n	8004f98 <HAL_I2C_Master_Receive+0x440>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d007      	beq.n	8004bce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0201 	orr.w	r2, r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bdc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2222      	movs	r2, #34	; 0x22
 8004be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2210      	movs	r2, #16
 8004bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	893a      	ldrh	r2, [r7, #8]
 8004bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4a5c      	ldr	r2, [pc, #368]	; (8004d80 <HAL_I2C_Master_Receive+0x228>)
 8004c0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c10:	8979      	ldrh	r1, [r7, #10]
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 fd80 	bl	800571c <I2C_MasterRequestRead>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e1b8      	b.n	8004f98 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d113      	bne.n	8004c56 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c2e:	2300      	movs	r3, #0
 8004c30:	623b      	str	r3, [r7, #32]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	623b      	str	r3, [r7, #32]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	623b      	str	r3, [r7, #32]
 8004c42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	e18c      	b.n	8004f70 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d11b      	bne.n	8004c96 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61fb      	str	r3, [r7, #28]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	61fb      	str	r3, [r7, #28]
 8004c82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	e16c      	b.n	8004f70 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d11b      	bne.n	8004cd6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61bb      	str	r3, [r7, #24]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	61bb      	str	r3, [r7, #24]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	61bb      	str	r3, [r7, #24]
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	e14c      	b.n	8004f70 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ce4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004cfc:	e138      	b.n	8004f70 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	f200 80f1 	bhi.w	8004eea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d123      	bne.n	8004d58 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f001 f8a5 	bl	8005e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e139      	b.n	8004f98 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691a      	ldr	r2, [r3, #16]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d56:	e10b      	b.n	8004f70 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d14e      	bne.n	8004dfe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	2200      	movs	r2, #0
 8004d68:	4906      	ldr	r1, [pc, #24]	; (8004d84 <HAL_I2C_Master_Receive+0x22c>)
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 ff22 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d008      	beq.n	8004d88 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e10e      	b.n	8004f98 <HAL_I2C_Master_Receive+0x440>
 8004d7a:	bf00      	nop
 8004d7c:	00100002 	.word	0x00100002
 8004d80:	ffff0000 	.word	0xffff0000
 8004d84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	691a      	ldr	r2, [r3, #16]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dfc:	e0b8      	b.n	8004f70 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	2200      	movs	r2, #0
 8004e06:	4966      	ldr	r1, [pc, #408]	; (8004fa0 <HAL_I2C_Master_Receive+0x448>)
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 fed3 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0bf      	b.n	8004f98 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e60:	2200      	movs	r2, #0
 8004e62:	494f      	ldr	r1, [pc, #316]	; (8004fa0 <HAL_I2C_Master_Receive+0x448>)
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 fea5 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e091      	b.n	8004f98 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691a      	ldr	r2, [r3, #16]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	691a      	ldr	r2, [r3, #16]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ee8:	e042      	b.n	8004f70 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 ffb8 	bl	8005e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e04c      	b.n	8004f98 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d118      	bne.n	8004f70 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f47f aec2 	bne.w	8004cfe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	e000      	b.n	8004f98 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f96:	2302      	movs	r3, #2
  }
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3728      	adds	r7, #40	; 0x28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	00010004 	.word	0x00010004

08004fa4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	4608      	mov	r0, r1
 8004fae:	4611      	mov	r1, r2
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	817b      	strh	r3, [r7, #10]
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	813b      	strh	r3, [r7, #8]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fbe:	f7fe fdab 	bl	8003b18 <HAL_GetTick>
 8004fc2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b20      	cmp	r3, #32
 8004fce:	f040 80d9 	bne.w	8005184 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	2319      	movs	r3, #25
 8004fd8:	2201      	movs	r2, #1
 8004fda:	496d      	ldr	r1, [pc, #436]	; (8005190 <HAL_I2C_Mem_Write+0x1ec>)
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 fde9 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e0cc      	b.n	8005186 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_I2C_Mem_Write+0x56>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e0c5      	b.n	8005186 <HAL_I2C_Mem_Write+0x1e2>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b01      	cmp	r3, #1
 800500e:	d007      	beq.n	8005020 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800502e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2221      	movs	r2, #33	; 0x21
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2240      	movs	r2, #64	; 0x40
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a3a      	ldr	r2, [r7, #32]
 800504a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005050:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4a4d      	ldr	r2, [pc, #308]	; (8005194 <HAL_I2C_Mem_Write+0x1f0>)
 8005060:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005062:	88f8      	ldrh	r0, [r7, #6]
 8005064:	893a      	ldrh	r2, [r7, #8]
 8005066:	8979      	ldrh	r1, [r7, #10]
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	9301      	str	r3, [sp, #4]
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	4603      	mov	r3, r0
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 fc20 	bl	80058b8 <I2C_RequestMemoryWrite>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d052      	beq.n	8005124 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e081      	b.n	8005186 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 fe6a 	bl	8005d60 <I2C_WaitOnTXEFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00d      	beq.n	80050ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	2b04      	cmp	r3, #4
 8005098:	d107      	bne.n	80050aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e06b      	b.n	8005186 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	781a      	ldrb	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d11b      	bne.n	8005124 <HAL_I2C_Mem_Write+0x180>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d017      	beq.n	8005124 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	781a      	ldrb	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1aa      	bne.n	8005082 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 fe56 	bl	8005de2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00d      	beq.n	8005158 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005140:	2b04      	cmp	r3, #4
 8005142:	d107      	bne.n	8005154 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005152:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e016      	b.n	8005186 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2220      	movs	r2, #32
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	e000      	b.n	8005186 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005184:	2302      	movs	r3, #2
  }
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	00100002 	.word	0x00100002
 8005194:	ffff0000 	.word	0xffff0000

08005198 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08c      	sub	sp, #48	; 0x30
 800519c:	af02      	add	r7, sp, #8
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	4608      	mov	r0, r1
 80051a2:	4611      	mov	r1, r2
 80051a4:	461a      	mov	r2, r3
 80051a6:	4603      	mov	r3, r0
 80051a8:	817b      	strh	r3, [r7, #10]
 80051aa:	460b      	mov	r3, r1
 80051ac:	813b      	strh	r3, [r7, #8]
 80051ae:	4613      	mov	r3, r2
 80051b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051b2:	f7fe fcb1 	bl	8003b18 <HAL_GetTick>
 80051b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	f040 8208 	bne.w	80055d6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	2319      	movs	r3, #25
 80051cc:	2201      	movs	r2, #1
 80051ce:	497b      	ldr	r1, [pc, #492]	; (80053bc <HAL_I2C_Mem_Read+0x224>)
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 fcef 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80051dc:	2302      	movs	r3, #2
 80051de:	e1fb      	b.n	80055d8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d101      	bne.n	80051ee <HAL_I2C_Mem_Read+0x56>
 80051ea:	2302      	movs	r3, #2
 80051ec:	e1f4      	b.n	80055d8 <HAL_I2C_Mem_Read+0x440>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b01      	cmp	r3, #1
 8005202:	d007      	beq.n	8005214 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005222:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2222      	movs	r2, #34	; 0x22
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2240      	movs	r2, #64	; 0x40
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800523e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005244:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524a:	b29a      	uxth	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4a5b      	ldr	r2, [pc, #364]	; (80053c0 <HAL_I2C_Mem_Read+0x228>)
 8005254:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005256:	88f8      	ldrh	r0, [r7, #6]
 8005258:	893a      	ldrh	r2, [r7, #8]
 800525a:	8979      	ldrh	r1, [r7, #10]
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	9301      	str	r3, [sp, #4]
 8005260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	4603      	mov	r3, r0
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 fbbc 	bl	80059e4 <I2C_RequestMemoryRead>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e1b0      	b.n	80055d8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527a:	2b00      	cmp	r3, #0
 800527c:	d113      	bne.n	80052a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800527e:	2300      	movs	r3, #0
 8005280:	623b      	str	r3, [r7, #32]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	623b      	str	r3, [r7, #32]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	623b      	str	r3, [r7, #32]
 8005292:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	e184      	b.n	80055b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d11b      	bne.n	80052e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052be:	2300      	movs	r3, #0
 80052c0:	61fb      	str	r3, [r7, #28]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	61fb      	str	r3, [r7, #28]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	61fb      	str	r3, [r7, #28]
 80052d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	e164      	b.n	80055b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d11b      	bne.n	8005326 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800530c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800530e:	2300      	movs	r3, #0
 8005310:	61bb      	str	r3, [r7, #24]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	61bb      	str	r3, [r7, #24]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	61bb      	str	r3, [r7, #24]
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	e144      	b.n	80055b0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005326:	2300      	movs	r3, #0
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800533c:	e138      	b.n	80055b0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005342:	2b03      	cmp	r3, #3
 8005344:	f200 80f1 	bhi.w	800552a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534c:	2b01      	cmp	r3, #1
 800534e:	d123      	bne.n	8005398 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005352:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 fd85 	bl	8005e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e139      	b.n	80055d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691a      	ldr	r2, [r3, #16]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005380:	3b01      	subs	r3, #1
 8005382:	b29a      	uxth	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538c:	b29b      	uxth	r3, r3
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005396:	e10b      	b.n	80055b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800539c:	2b02      	cmp	r3, #2
 800539e:	d14e      	bne.n	800543e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a6:	2200      	movs	r2, #0
 80053a8:	4906      	ldr	r1, [pc, #24]	; (80053c4 <HAL_I2C_Mem_Read+0x22c>)
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 fc02 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d008      	beq.n	80053c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e10e      	b.n	80055d8 <HAL_I2C_Mem_Read+0x440>
 80053ba:	bf00      	nop
 80053bc:	00100002 	.word	0x00100002
 80053c0:	ffff0000 	.word	0xffff0000
 80053c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691a      	ldr	r2, [r3, #16]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005400:	b29b      	uxth	r3, r3
 8005402:	3b01      	subs	r3, #1
 8005404:	b29a      	uxth	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	b2d2      	uxtb	r2, r2
 8005416:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005426:	3b01      	subs	r3, #1
 8005428:	b29a      	uxth	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800543c:	e0b8      	b.n	80055b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005444:	2200      	movs	r2, #0
 8005446:	4966      	ldr	r1, [pc, #408]	; (80055e0 <HAL_I2C_Mem_Read+0x448>)
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 fbb3 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e0bf      	b.n	80055d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005466:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691a      	ldr	r2, [r3, #16]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005484:	3b01      	subs	r3, #1
 8005486:	b29a      	uxth	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005490:	b29b      	uxth	r3, r3
 8005492:	3b01      	subs	r3, #1
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	2200      	movs	r2, #0
 80054a2:	494f      	ldr	r1, [pc, #316]	; (80055e0 <HAL_I2C_Mem_Read+0x448>)
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 fb85 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e091      	b.n	80055d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	b2d2      	uxtb	r2, r2
 8005502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005512:	3b01      	subs	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551e:	b29b      	uxth	r3, r3
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005528:	e042      	b.n	80055b0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800552a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 fc98 	bl	8005e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e04c      	b.n	80055d8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005566:	b29b      	uxth	r3, r3
 8005568:	3b01      	subs	r3, #1
 800556a:	b29a      	uxth	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	f003 0304 	and.w	r3, r3, #4
 800557a:	2b04      	cmp	r3, #4
 800557c:	d118      	bne.n	80055b0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800559a:	3b01      	subs	r3, #1
 800559c:	b29a      	uxth	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f47f aec2 	bne.w	800533e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	e000      	b.n	80055d8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80055d6:	2302      	movs	r3, #2
  }
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3728      	adds	r7, #40	; 0x28
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	00010004 	.word	0x00010004

080055e4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f2:	b2db      	uxtb	r3, r3
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800560c:	4618      	mov	r0, r3
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af02      	add	r7, sp, #8
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	607a      	str	r2, [r7, #4]
 8005622:	603b      	str	r3, [r7, #0]
 8005624:	460b      	mov	r3, r1
 8005626:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b08      	cmp	r3, #8
 8005632:	d006      	beq.n	8005642 <I2C_MasterRequestWrite+0x2a>
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d003      	beq.n	8005642 <I2C_MasterRequestWrite+0x2a>
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005640:	d108      	bne.n	8005654 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	e00b      	b.n	800566c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	2b12      	cmp	r3, #18
 800565a:	d107      	bne.n	800566c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800566a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 fa9b 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00d      	beq.n	80056a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005692:	d103      	bne.n	800569c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800569a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e035      	b.n	800570c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056a8:	d108      	bne.n	80056bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056aa:	897b      	ldrh	r3, [r7, #10]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056b8:	611a      	str	r2, [r3, #16]
 80056ba:	e01b      	b.n	80056f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80056bc:	897b      	ldrh	r3, [r7, #10]
 80056be:	11db      	asrs	r3, r3, #7
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	f003 0306 	and.w	r3, r3, #6
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	f063 030f 	orn	r3, r3, #15
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	490e      	ldr	r1, [pc, #56]	; (8005714 <I2C_MasterRequestWrite+0xfc>)
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 fac1 	bl	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e010      	b.n	800570c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80056ea:	897b      	ldrh	r3, [r7, #10]
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	4907      	ldr	r1, [pc, #28]	; (8005718 <I2C_MasterRequestWrite+0x100>)
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 fab1 	bl	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	00010008 	.word	0x00010008
 8005718:	00010002 	.word	0x00010002

0800571c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af02      	add	r7, sp, #8
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	607a      	str	r2, [r7, #4]
 8005726:	603b      	str	r3, [r7, #0]
 8005728:	460b      	mov	r3, r1
 800572a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005730:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005740:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2b08      	cmp	r3, #8
 8005746:	d006      	beq.n	8005756 <I2C_MasterRequestRead+0x3a>
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d003      	beq.n	8005756 <I2C_MasterRequestRead+0x3a>
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005754:	d108      	bne.n	8005768 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	e00b      	b.n	8005780 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	2b11      	cmp	r3, #17
 800576e:	d107      	bne.n	8005780 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800577e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 fa11 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00d      	beq.n	80057b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a6:	d103      	bne.n	80057b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e079      	b.n	80058a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057bc:	d108      	bne.n	80057d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80057be:	897b      	ldrh	r3, [r7, #10]
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	f043 0301 	orr.w	r3, r3, #1
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	611a      	str	r2, [r3, #16]
 80057ce:	e05f      	b.n	8005890 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80057d0:	897b      	ldrh	r3, [r7, #10]
 80057d2:	11db      	asrs	r3, r3, #7
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	f003 0306 	and.w	r3, r3, #6
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	f063 030f 	orn	r3, r3, #15
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	4930      	ldr	r1, [pc, #192]	; (80058b0 <I2C_MasterRequestRead+0x194>)
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f000 fa37 	bl	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e054      	b.n	80058a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80057fe:	897b      	ldrh	r3, [r7, #10]
 8005800:	b2da      	uxtb	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	4929      	ldr	r1, [pc, #164]	; (80058b4 <I2C_MasterRequestRead+0x198>)
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 fa27 	bl	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e044      	b.n	80058a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800581e:	2300      	movs	r3, #0
 8005820:	613b      	str	r3, [r7, #16]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	613b      	str	r3, [r7, #16]
 8005832:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005842:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 f9af 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00d      	beq.n	8005878 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800586a:	d103      	bne.n	8005874 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005872:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e017      	b.n	80058a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005878:	897b      	ldrh	r3, [r7, #10]
 800587a:	11db      	asrs	r3, r3, #7
 800587c:	b2db      	uxtb	r3, r3
 800587e:	f003 0306 	and.w	r3, r3, #6
 8005882:	b2db      	uxtb	r3, r3
 8005884:	f063 030e 	orn	r3, r3, #14
 8005888:	b2da      	uxtb	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	4907      	ldr	r1, [pc, #28]	; (80058b4 <I2C_MasterRequestRead+0x198>)
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 f9e3 	bl	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3718      	adds	r7, #24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	00010008 	.word	0x00010008
 80058b4:	00010002 	.word	0x00010002

080058b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af02      	add	r7, sp, #8
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	4608      	mov	r0, r1
 80058c2:	4611      	mov	r1, r2
 80058c4:	461a      	mov	r2, r3
 80058c6:	4603      	mov	r3, r0
 80058c8:	817b      	strh	r3, [r7, #10]
 80058ca:	460b      	mov	r3, r1
 80058cc:	813b      	strh	r3, [r7, #8]
 80058ce:	4613      	mov	r3, r2
 80058d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 f960 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00d      	beq.n	8005916 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005908:	d103      	bne.n	8005912 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005910:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e05f      	b.n	80059d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005916:	897b      	ldrh	r3, [r7, #10]
 8005918:	b2db      	uxtb	r3, r3
 800591a:	461a      	mov	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005924:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	6a3a      	ldr	r2, [r7, #32]
 800592a:	492d      	ldr	r1, [pc, #180]	; (80059e0 <I2C_RequestMemoryWrite+0x128>)
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 f998 	bl	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e04c      	b.n	80059d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005954:	6a39      	ldr	r1, [r7, #32]
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 fa02 	bl	8005d60 <I2C_WaitOnTXEFlagUntilTimeout>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00d      	beq.n	800597e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	2b04      	cmp	r3, #4
 8005968:	d107      	bne.n	800597a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005978:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e02b      	b.n	80059d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800597e:	88fb      	ldrh	r3, [r7, #6]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d105      	bne.n	8005990 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005984:	893b      	ldrh	r3, [r7, #8]
 8005986:	b2da      	uxtb	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	611a      	str	r2, [r3, #16]
 800598e:	e021      	b.n	80059d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005990:	893b      	ldrh	r3, [r7, #8]
 8005992:	0a1b      	lsrs	r3, r3, #8
 8005994:	b29b      	uxth	r3, r3
 8005996:	b2da      	uxtb	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800599e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a0:	6a39      	ldr	r1, [r7, #32]
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 f9dc 	bl	8005d60 <I2C_WaitOnTXEFlagUntilTimeout>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00d      	beq.n	80059ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d107      	bne.n	80059c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e005      	b.n	80059d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059ca:	893b      	ldrh	r3, [r7, #8]
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	00010002 	.word	0x00010002

080059e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	4608      	mov	r0, r1
 80059ee:	4611      	mov	r1, r2
 80059f0:	461a      	mov	r2, r3
 80059f2:	4603      	mov	r3, r0
 80059f4:	817b      	strh	r3, [r7, #10]
 80059f6:	460b      	mov	r3, r1
 80059f8:	813b      	strh	r3, [r7, #8]
 80059fa:	4613      	mov	r3, r2
 80059fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 f8c2 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00d      	beq.n	8005a52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a44:	d103      	bne.n	8005a4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e0aa      	b.n	8005ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a52:	897b      	ldrh	r3, [r7, #10]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	6a3a      	ldr	r2, [r7, #32]
 8005a66:	4952      	ldr	r1, [pc, #328]	; (8005bb0 <I2C_RequestMemoryRead+0x1cc>)
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 f8fa 	bl	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e097      	b.n	8005ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a78:	2300      	movs	r3, #0
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a90:	6a39      	ldr	r1, [r7, #32]
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 f964 	bl	8005d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00d      	beq.n	8005aba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d107      	bne.n	8005ab6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ab4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e076      	b.n	8005ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d105      	bne.n	8005acc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ac0:	893b      	ldrh	r3, [r7, #8]
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	611a      	str	r2, [r3, #16]
 8005aca:	e021      	b.n	8005b10 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005acc:	893b      	ldrh	r3, [r7, #8]
 8005ace:	0a1b      	lsrs	r3, r3, #8
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005adc:	6a39      	ldr	r1, [r7, #32]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f93e 	bl	8005d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00d      	beq.n	8005b06 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	d107      	bne.n	8005b02 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e050      	b.n	8005ba8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b06:	893b      	ldrh	r3, [r7, #8]
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b12:	6a39      	ldr	r1, [r7, #32]
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 f923 	bl	8005d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00d      	beq.n	8005b3c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d107      	bne.n	8005b38 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e035      	b.n	8005ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b4a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 f82b 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00d      	beq.n	8005b80 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b72:	d103      	bne.n	8005b7c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e013      	b.n	8005ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b80:	897b      	ldrh	r3, [r7, #10]
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	f043 0301 	orr.w	r3, r3, #1
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	6a3a      	ldr	r2, [r7, #32]
 8005b94:	4906      	ldr	r1, [pc, #24]	; (8005bb0 <I2C_RequestMemoryRead+0x1cc>)
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 f863 	bl	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3718      	adds	r7, #24
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	00010002 	.word	0x00010002

08005bb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	603b      	str	r3, [r7, #0]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bc4:	e025      	b.n	8005c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bcc:	d021      	beq.n	8005c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bce:	f7fd ffa3 	bl	8003b18 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d302      	bcc.n	8005be4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d116      	bne.n	8005c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	f043 0220 	orr.w	r2, r3, #32
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e023      	b.n	8005c5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	0c1b      	lsrs	r3, r3, #16
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d10d      	bne.n	8005c38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	43da      	mvns	r2, r3
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	4013      	ands	r3, r2
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	bf0c      	ite	eq
 8005c2e:	2301      	moveq	r3, #1
 8005c30:	2300      	movne	r3, #0
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	e00c      	b.n	8005c52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	43da      	mvns	r2, r3
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	4013      	ands	r3, r2
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	bf0c      	ite	eq
 8005c4a:	2301      	moveq	r3, #1
 8005c4c:	2300      	movne	r3, #0
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	461a      	mov	r2, r3
 8005c52:	79fb      	ldrb	r3, [r7, #7]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d0b6      	beq.n	8005bc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b084      	sub	sp, #16
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	60b9      	str	r1, [r7, #8]
 8005c6c:	607a      	str	r2, [r7, #4]
 8005c6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c70:	e051      	b.n	8005d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c80:	d123      	bne.n	8005cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	f043 0204 	orr.w	r2, r3, #4
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e046      	b.n	8005d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd0:	d021      	beq.n	8005d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd2:	f7fd ff21 	bl	8003b18 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d302      	bcc.n	8005ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d116      	bne.n	8005d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	f043 0220 	orr.w	r2, r3, #32
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e020      	b.n	8005d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	0c1b      	lsrs	r3, r3, #16
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d10c      	bne.n	8005d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	43da      	mvns	r2, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	bf14      	ite	ne
 8005d32:	2301      	movne	r3, #1
 8005d34:	2300      	moveq	r3, #0
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	e00b      	b.n	8005d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	43da      	mvns	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	4013      	ands	r3, r2
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	bf14      	ite	ne
 8005d4c:	2301      	movne	r3, #1
 8005d4e:	2300      	moveq	r3, #0
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d18d      	bne.n	8005c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d6c:	e02d      	b.n	8005dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 f8ce 	bl	8005f10 <I2C_IsAcknowledgeFailed>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e02d      	b.n	8005dda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d84:	d021      	beq.n	8005dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d86:	f7fd fec7 	bl	8003b18 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d302      	bcc.n	8005d9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d116      	bne.n	8005dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	f043 0220 	orr.w	r2, r3, #32
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e007      	b.n	8005dda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd4:	2b80      	cmp	r3, #128	; 0x80
 8005dd6:	d1ca      	bne.n	8005d6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b084      	sub	sp, #16
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005dee:	e02d      	b.n	8005e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 f88d 	bl	8005f10 <I2C_IsAcknowledgeFailed>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e02d      	b.n	8005e5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e06:	d021      	beq.n	8005e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e08:	f7fd fe86 	bl	8003b18 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d302      	bcc.n	8005e1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d116      	bne.n	8005e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e38:	f043 0220 	orr.w	r2, r3, #32
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e007      	b.n	8005e5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d1ca      	bne.n	8005df0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e70:	e042      	b.n	8005ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	f003 0310 	and.w	r3, r3, #16
 8005e7c:	2b10      	cmp	r3, #16
 8005e7e:	d119      	bne.n	8005eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f06f 0210 	mvn.w	r2, #16
 8005e88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e029      	b.n	8005f08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eb4:	f7fd fe30 	bl	8003b18 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d302      	bcc.n	8005eca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d116      	bne.n	8005ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee4:	f043 0220 	orr.w	r2, r3, #32
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e007      	b.n	8005f08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f02:	2b40      	cmp	r3, #64	; 0x40
 8005f04:	d1b5      	bne.n	8005e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f26:	d11b      	bne.n	8005f60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4c:	f043 0204 	orr.w	r2, r3, #4
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e000      	b.n	8005f62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005f6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f70:	b08f      	sub	sp, #60	; 0x3c
 8005f72:	af0a      	add	r7, sp, #40	; 0x28
 8005f74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e116      	b.n	80061ae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d106      	bne.n	8005fa0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f00d fba0 	bl	80136e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2203      	movs	r2, #3
 8005fa4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d102      	bne.n	8005fba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f004 fff9 	bl	800afb6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	603b      	str	r3, [r7, #0]
 8005fca:	687e      	ldr	r6, [r7, #4]
 8005fcc:	466d      	mov	r5, sp
 8005fce:	f106 0410 	add.w	r4, r6, #16
 8005fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005fde:	e885 0003 	stmia.w	r5, {r0, r1}
 8005fe2:	1d33      	adds	r3, r6, #4
 8005fe4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fe6:	6838      	ldr	r0, [r7, #0]
 8005fe8:	f004 fed0 	bl	800ad8c <USB_CoreInit>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d005      	beq.n	8005ffe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e0d7      	b.n	80061ae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2100      	movs	r1, #0
 8006004:	4618      	mov	r0, r3
 8006006:	f004 ffe7 	bl	800afd8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800600a:	2300      	movs	r3, #0
 800600c:	73fb      	strb	r3, [r7, #15]
 800600e:	e04a      	b.n	80060a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006010:	7bfa      	ldrb	r2, [r7, #15]
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	4613      	mov	r3, r2
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	4413      	add	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	440b      	add	r3, r1
 800601e:	333d      	adds	r3, #61	; 0x3d
 8006020:	2201      	movs	r2, #1
 8006022:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006024:	7bfa      	ldrb	r2, [r7, #15]
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	4613      	mov	r3, r2
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	4413      	add	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	440b      	add	r3, r1
 8006032:	333c      	adds	r3, #60	; 0x3c
 8006034:	7bfa      	ldrb	r2, [r7, #15]
 8006036:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006038:	7bfa      	ldrb	r2, [r7, #15]
 800603a:	7bfb      	ldrb	r3, [r7, #15]
 800603c:	b298      	uxth	r0, r3
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	4613      	mov	r3, r2
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	4413      	add	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	440b      	add	r3, r1
 800604a:	3344      	adds	r3, #68	; 0x44
 800604c:	4602      	mov	r2, r0
 800604e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006050:	7bfa      	ldrb	r2, [r7, #15]
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	4613      	mov	r3, r2
 8006056:	00db      	lsls	r3, r3, #3
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	440b      	add	r3, r1
 800605e:	3340      	adds	r3, #64	; 0x40
 8006060:	2200      	movs	r2, #0
 8006062:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006064:	7bfa      	ldrb	r2, [r7, #15]
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	4613      	mov	r3, r2
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	4413      	add	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	440b      	add	r3, r1
 8006072:	3348      	adds	r3, #72	; 0x48
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006078:	7bfa      	ldrb	r2, [r7, #15]
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	4613      	mov	r3, r2
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	4413      	add	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	440b      	add	r3, r1
 8006086:	334c      	adds	r3, #76	; 0x4c
 8006088:	2200      	movs	r2, #0
 800608a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800608c:	7bfa      	ldrb	r2, [r7, #15]
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	4613      	mov	r3, r2
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	4413      	add	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	3354      	adds	r3, #84	; 0x54
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
 80060a2:	3301      	adds	r3, #1
 80060a4:	73fb      	strb	r3, [r7, #15]
 80060a6:	7bfa      	ldrb	r2, [r7, #15]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d3af      	bcc.n	8006010 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060b0:	2300      	movs	r3, #0
 80060b2:	73fb      	strb	r3, [r7, #15]
 80060b4:	e044      	b.n	8006140 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80060b6:	7bfa      	ldrb	r2, [r7, #15]
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	4613      	mov	r3, r2
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	440b      	add	r3, r1
 80060c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80060c8:	2200      	movs	r2, #0
 80060ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80060cc:	7bfa      	ldrb	r2, [r7, #15]
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	4613      	mov	r3, r2
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	4413      	add	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	440b      	add	r3, r1
 80060da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80060de:	7bfa      	ldrb	r2, [r7, #15]
 80060e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80060e2:	7bfa      	ldrb	r2, [r7, #15]
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	4613      	mov	r3, r2
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	4413      	add	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	440b      	add	r3, r1
 80060f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80060f4:	2200      	movs	r2, #0
 80060f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80060f8:	7bfa      	ldrb	r2, [r7, #15]
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	4613      	mov	r3, r2
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	4413      	add	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	440b      	add	r3, r1
 8006106:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800610e:	7bfa      	ldrb	r2, [r7, #15]
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	4613      	mov	r3, r2
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	4413      	add	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	440b      	add	r3, r1
 800611c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006120:	2200      	movs	r2, #0
 8006122:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006124:	7bfa      	ldrb	r2, [r7, #15]
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	4613      	mov	r3, r2
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	4413      	add	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	440b      	add	r3, r1
 8006132:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006136:	2200      	movs	r2, #0
 8006138:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800613a:	7bfb      	ldrb	r3, [r7, #15]
 800613c:	3301      	adds	r3, #1
 800613e:	73fb      	strb	r3, [r7, #15]
 8006140:	7bfa      	ldrb	r2, [r7, #15]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	429a      	cmp	r2, r3
 8006148:	d3b5      	bcc.n	80060b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	603b      	str	r3, [r7, #0]
 8006150:	687e      	ldr	r6, [r7, #4]
 8006152:	466d      	mov	r5, sp
 8006154:	f106 0410 	add.w	r4, r6, #16
 8006158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800615a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800615c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800615e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006160:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006164:	e885 0003 	stmia.w	r5, {r0, r1}
 8006168:	1d33      	adds	r3, r6, #4
 800616a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800616c:	6838      	ldr	r0, [r7, #0]
 800616e:	f004 ff7f 	bl	800b070 <USB_DevInit>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d005      	beq.n	8006184 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2202      	movs	r2, #2
 800617c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e014      	b.n	80061ae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	2b01      	cmp	r3, #1
 800619a:	d102      	bne.n	80061a2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f001 f98b 	bl	80074b8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f006 f8c1 	bl	800c32e <USB_DevDisconnect>

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d101      	bne.n	80061d2 <HAL_PCD_Start+0x1c>
 80061ce:	2302      	movs	r3, #2
 80061d0:	e020      	b.n	8006214 <HAL_PCD_Start+0x5e>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d109      	bne.n	80061f6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d005      	beq.n	80061f6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f004 feca 	bl	800af94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4618      	mov	r0, r3
 8006206:	f006 f871 	bl	800c2ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800621c:	b590      	push	{r4, r7, lr}
 800621e:	b08d      	sub	sp, #52	; 0x34
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4618      	mov	r0, r3
 8006234:	f006 f92f 	bl	800c496 <USB_GetMode>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	f040 84b7 	bne.w	8006bae <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4618      	mov	r0, r3
 8006246:	f006 f893 	bl	800c370 <USB_ReadInterrupts>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 84ad 	beq.w	8006bac <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	0a1b      	lsrs	r3, r3, #8
 800625c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4618      	mov	r0, r3
 800626c:	f006 f880 	bl	800c370 <USB_ReadInterrupts>
 8006270:	4603      	mov	r3, r0
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b02      	cmp	r3, #2
 8006278:	d107      	bne.n	800628a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	695a      	ldr	r2, [r3, #20]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f002 0202 	and.w	r2, r2, #2
 8006288:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4618      	mov	r0, r3
 8006290:	f006 f86e 	bl	800c370 <USB_ReadInterrupts>
 8006294:	4603      	mov	r3, r0
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	2b10      	cmp	r3, #16
 800629c:	d161      	bne.n	8006362 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	699a      	ldr	r2, [r3, #24]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0210 	bic.w	r2, r2, #16
 80062ac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	f003 020f 	and.w	r2, r3, #15
 80062ba:	4613      	mov	r3, r2
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	4413      	add	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	4413      	add	r3, r2
 80062ca:	3304      	adds	r3, #4
 80062cc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	0c5b      	lsrs	r3, r3, #17
 80062d2:	f003 030f 	and.w	r3, r3, #15
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d124      	bne.n	8006324 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80062e0:	4013      	ands	r3, r2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d035      	beq.n	8006352 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	091b      	lsrs	r3, r3, #4
 80062ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80062f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	461a      	mov	r2, r3
 80062f8:	6a38      	ldr	r0, [r7, #32]
 80062fa:	f005 fea5 	bl	800c048 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	091b      	lsrs	r3, r3, #4
 8006306:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800630a:	441a      	add	r2, r3
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	6a1a      	ldr	r2, [r3, #32]
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	091b      	lsrs	r3, r3, #4
 8006318:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800631c:	441a      	add	r2, r3
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	621a      	str	r2, [r3, #32]
 8006322:	e016      	b.n	8006352 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	0c5b      	lsrs	r3, r3, #17
 8006328:	f003 030f 	and.w	r3, r3, #15
 800632c:	2b06      	cmp	r3, #6
 800632e:	d110      	bne.n	8006352 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006336:	2208      	movs	r2, #8
 8006338:	4619      	mov	r1, r3
 800633a:	6a38      	ldr	r0, [r7, #32]
 800633c:	f005 fe84 	bl	800c048 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	6a1a      	ldr	r2, [r3, #32]
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	091b      	lsrs	r3, r3, #4
 8006348:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800634c:	441a      	add	r2, r3
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	699a      	ldr	r2, [r3, #24]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f042 0210 	orr.w	r2, r2, #16
 8006360:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4618      	mov	r0, r3
 8006368:	f006 f802 	bl	800c370 <USB_ReadInterrupts>
 800636c:	4603      	mov	r3, r0
 800636e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006372:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006376:	f040 80a7 	bne.w	80064c8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4618      	mov	r0, r3
 8006384:	f006 f807 	bl	800c396 <USB_ReadDevAllOutEpInterrupt>
 8006388:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800638a:	e099      	b.n	80064c0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 808e 	beq.w	80064b4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	4611      	mov	r1, r2
 80063a2:	4618      	mov	r0, r3
 80063a4:	f006 f82b 	bl	800c3fe <USB_ReadDevOutEPInterrupt>
 80063a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00c      	beq.n	80063ce <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c0:	461a      	mov	r2, r3
 80063c2:	2301      	movs	r3, #1
 80063c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80063c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 feef 	bl	80071ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f003 0308 	and.w	r3, r3, #8
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00c      	beq.n	80063f2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e4:	461a      	mov	r2, r3
 80063e6:	2308      	movs	r3, #8
 80063e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80063ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 ffc5 	bl	800737c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f003 0310 	and.w	r3, r3, #16
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d008      	beq.n	800640e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	4413      	add	r3, r2
 8006404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006408:	461a      	mov	r2, r3
 800640a:	2310      	movs	r3, #16
 800640c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d030      	beq.n	800647a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006420:	2b80      	cmp	r3, #128	; 0x80
 8006422:	d109      	bne.n	8006438 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	69fa      	ldr	r2, [r7, #28]
 800642e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006436:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643a:	4613      	mov	r3, r2
 800643c:	00db      	lsls	r3, r3, #3
 800643e:	4413      	add	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	4413      	add	r3, r2
 800644a:	3304      	adds	r3, #4
 800644c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	78db      	ldrb	r3, [r3, #3]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d108      	bne.n	8006468 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2200      	movs	r2, #0
 800645a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	b2db      	uxtb	r3, r3
 8006460:	4619      	mov	r1, r3
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f00d fa58 	bl	8013918 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006474:	461a      	mov	r2, r3
 8006476:	2302      	movs	r3, #2
 8006478:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f003 0320 	and.w	r3, r3, #32
 8006480:	2b00      	cmp	r3, #0
 8006482:	d008      	beq.n	8006496 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006490:	461a      	mov	r2, r3
 8006492:	2320      	movs	r3, #32
 8006494:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d009      	beq.n	80064b4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ac:	461a      	mov	r2, r3
 80064ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	3301      	adds	r3, #1
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80064ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064bc:	085b      	lsrs	r3, r3, #1
 80064be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f47f af62 	bne.w	800638c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f005 ff4f 	bl	800c370 <USB_ReadInterrupts>
 80064d2:	4603      	mov	r3, r0
 80064d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064dc:	f040 80db 	bne.w	8006696 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f005 ff70 	bl	800c3ca <USB_ReadDevAllInEpInterrupt>
 80064ea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80064f0:	e0cd      	b.n	800668e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80064f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 80c2 	beq.w	8006682 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006504:	b2d2      	uxtb	r2, r2
 8006506:	4611      	mov	r1, r2
 8006508:	4618      	mov	r0, r3
 800650a:	f005 ff96 	bl	800c43a <USB_ReadDevInEPInterrupt>
 800650e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d057      	beq.n	80065ca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	f003 030f 	and.w	r3, r3, #15
 8006520:	2201      	movs	r2, #1
 8006522:	fa02 f303 	lsl.w	r3, r2, r3
 8006526:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	43db      	mvns	r3, r3
 8006534:	69f9      	ldr	r1, [r7, #28]
 8006536:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800653a:	4013      	ands	r3, r2
 800653c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654a:	461a      	mov	r2, r3
 800654c:	2301      	movs	r3, #1
 800654e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d132      	bne.n	80065be <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006558:	6879      	ldr	r1, [r7, #4]
 800655a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800655c:	4613      	mov	r3, r2
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	4413      	add	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	440b      	add	r3, r1
 8006566:	334c      	adds	r3, #76	; 0x4c
 8006568:	6819      	ldr	r1, [r3, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800656e:	4613      	mov	r3, r2
 8006570:	00db      	lsls	r3, r3, #3
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4403      	add	r3, r0
 8006578:	3348      	adds	r3, #72	; 0x48
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4419      	add	r1, r3
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006582:	4613      	mov	r3, r2
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4403      	add	r3, r0
 800658c:	334c      	adds	r3, #76	; 0x4c
 800658e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	2b00      	cmp	r3, #0
 8006594:	d113      	bne.n	80065be <HAL_PCD_IRQHandler+0x3a2>
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800659a:	4613      	mov	r3, r2
 800659c:	00db      	lsls	r3, r3, #3
 800659e:	4413      	add	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	440b      	add	r3, r1
 80065a4:	3354      	adds	r3, #84	; 0x54
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d108      	bne.n	80065be <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6818      	ldr	r0, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80065b6:	461a      	mov	r2, r3
 80065b8:	2101      	movs	r1, #1
 80065ba:	f005 ff9d 	bl	800c4f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	4619      	mov	r1, r3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f00d f922 	bl	801380e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f003 0308 	and.w	r3, r3, #8
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d008      	beq.n	80065e6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e0:	461a      	mov	r2, r3
 80065e2:	2308      	movs	r3, #8
 80065e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f003 0310 	and.w	r3, r3, #16
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d008      	beq.n	8006602 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065fc:	461a      	mov	r2, r3
 80065fe:	2310      	movs	r3, #16
 8006600:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006608:	2b00      	cmp	r3, #0
 800660a:	d008      	beq.n	800661e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	015a      	lsls	r2, r3, #5
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	4413      	add	r3, r2
 8006614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006618:	461a      	mov	r2, r3
 800661a:	2340      	movs	r3, #64	; 0x40
 800661c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	2b00      	cmp	r3, #0
 8006626:	d023      	beq.n	8006670 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006628:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800662a:	6a38      	ldr	r0, [r7, #32]
 800662c:	f004 fe7e 	bl	800b32c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006632:	4613      	mov	r3, r2
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	3338      	adds	r3, #56	; 0x38
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	4413      	add	r3, r2
 8006640:	3304      	adds	r3, #4
 8006642:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	78db      	ldrb	r3, [r3, #3]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d108      	bne.n	800665e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	2200      	movs	r2, #0
 8006650:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	b2db      	uxtb	r3, r3
 8006656:	4619      	mov	r1, r3
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f00d f96f 	bl	801393c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666a:	461a      	mov	r2, r3
 800666c:	2302      	movs	r3, #2
 800666e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800667a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fd08 	bl	8007092 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	3301      	adds	r3, #1
 8006686:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668a:	085b      	lsrs	r3, r3, #1
 800668c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006690:	2b00      	cmp	r3, #0
 8006692:	f47f af2e 	bne.w	80064f2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4618      	mov	r0, r3
 800669c:	f005 fe68 	bl	800c370 <USB_ReadInterrupts>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066aa:	d122      	bne.n	80066f2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	69fa      	ldr	r2, [r7, #28]
 80066b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ba:	f023 0301 	bic.w	r3, r3, #1
 80066be:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d108      	bne.n	80066dc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80066d2:	2100      	movs	r1, #0
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f00d fae9 	bl	8013cac <HAL_PCDEx_LPM_Callback>
 80066da:	e002      	b.n	80066e2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f00d f90d 	bl	80138fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	695a      	ldr	r2, [r3, #20]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80066f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f005 fe3a 	bl	800c370 <USB_ReadInterrupts>
 80066fc:	4603      	mov	r3, r0
 80066fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006706:	d112      	bne.n	800672e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	2b01      	cmp	r3, #1
 8006716:	d102      	bne.n	800671e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f00d f8c9 	bl	80138b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	695a      	ldr	r2, [r3, #20]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800672c:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4618      	mov	r0, r3
 8006734:	f005 fe1c 	bl	800c370 <USB_ReadInterrupts>
 8006738:	4603      	mov	r3, r0
 800673a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800673e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006742:	d121      	bne.n	8006788 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	695a      	ldr	r2, [r3, #20]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006752:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800675a:	2b00      	cmp	r3, #0
 800675c:	d111      	bne.n	8006782 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676c:	089b      	lsrs	r3, r3, #2
 800676e:	f003 020f 	and.w	r2, r3, #15
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006778:	2101      	movs	r1, #1
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f00d fa96 	bl	8013cac <HAL_PCDEx_LPM_Callback>
 8006780:	e002      	b.n	8006788 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f00d f894 	bl	80138b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4618      	mov	r0, r3
 800678e:	f005 fdef 	bl	800c370 <USB_ReadInterrupts>
 8006792:	4603      	mov	r3, r0
 8006794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800679c:	f040 80b7 	bne.w	800690e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	69fa      	ldr	r2, [r7, #28]
 80067aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067ae:	f023 0301 	bic.w	r3, r3, #1
 80067b2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2110      	movs	r1, #16
 80067ba:	4618      	mov	r0, r3
 80067bc:	f004 fdb6 	bl	800b32c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067c0:	2300      	movs	r3, #0
 80067c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067c4:	e046      	b.n	8006854 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80067c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d2:	461a      	mov	r2, r3
 80067d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067d8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80067da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067ea:	0151      	lsls	r1, r2, #5
 80067ec:	69fa      	ldr	r2, [r7, #28]
 80067ee:	440a      	add	r2, r1
 80067f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80067fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fc:	015a      	lsls	r2, r3, #5
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	4413      	add	r3, r2
 8006802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006806:	461a      	mov	r2, r3
 8006808:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800680c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800680e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800681e:	0151      	lsls	r1, r2, #5
 8006820:	69fa      	ldr	r2, [r7, #28]
 8006822:	440a      	add	r2, r1
 8006824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006828:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800682c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800682e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800683e:	0151      	lsls	r1, r2, #5
 8006840:	69fa      	ldr	r2, [r7, #28]
 8006842:	440a      	add	r2, r1
 8006844:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006848:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800684c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800684e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006850:	3301      	adds	r3, #1
 8006852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800685a:	429a      	cmp	r2, r3
 800685c:	d3b3      	bcc.n	80067c6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	69fa      	ldr	r2, [r7, #28]
 8006868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800686c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006870:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006876:	2b00      	cmp	r3, #0
 8006878:	d016      	beq.n	80068a8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006884:	69fa      	ldr	r2, [r7, #28]
 8006886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800688a:	f043 030b 	orr.w	r3, r3, #11
 800688e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800689a:	69fa      	ldr	r2, [r7, #28]
 800689c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068a0:	f043 030b 	orr.w	r3, r3, #11
 80068a4:	6453      	str	r3, [r2, #68]	; 0x44
 80068a6:	e015      	b.n	80068d4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	69fa      	ldr	r2, [r7, #28]
 80068b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80068ba:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80068be:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	69fa      	ldr	r2, [r7, #28]
 80068ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068ce:	f043 030b 	orr.w	r3, r3, #11
 80068d2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	69fa      	ldr	r2, [r7, #28]
 80068de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80068e6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6818      	ldr	r0, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80068f8:	461a      	mov	r2, r3
 80068fa:	f005 fdfd 	bl	800c4f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	695a      	ldr	r2, [r3, #20]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800690c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4618      	mov	r0, r3
 8006914:	f005 fd2c 	bl	800c370 <USB_ReadInterrupts>
 8006918:	4603      	mov	r3, r0
 800691a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800691e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006922:	d124      	bne.n	800696e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4618      	mov	r0, r3
 800692a:	f005 fdc2 	bl	800c4b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4618      	mov	r0, r3
 8006934:	f004 fd77 	bl	800b426 <USB_GetDevSpeed>
 8006938:	4603      	mov	r3, r0
 800693a:	461a      	mov	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681c      	ldr	r4, [r3, #0]
 8006944:	f000 fec2 	bl	80076cc <HAL_RCC_GetHCLKFreq>
 8006948:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800694e:	b2db      	uxtb	r3, r3
 8006950:	461a      	mov	r2, r3
 8006952:	4620      	mov	r0, r4
 8006954:	f004 fa7c 	bl	800ae50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f00c ff80 	bl	801385e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	695a      	ldr	r2, [r3, #20]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800696c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4618      	mov	r0, r3
 8006974:	f005 fcfc 	bl	800c370 <USB_ReadInterrupts>
 8006978:	4603      	mov	r3, r0
 800697a:	f003 0308 	and.w	r3, r3, #8
 800697e:	2b08      	cmp	r3, #8
 8006980:	d10a      	bne.n	8006998 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f00c ff5d 	bl	8013842 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	695a      	ldr	r2, [r3, #20]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f002 0208 	and.w	r2, r2, #8
 8006996:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4618      	mov	r0, r3
 800699e:	f005 fce7 	bl	800c370 <USB_ReadInterrupts>
 80069a2:	4603      	mov	r3, r0
 80069a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a8:	2b80      	cmp	r3, #128	; 0x80
 80069aa:	d122      	bne.n	80069f2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80069b8:	2301      	movs	r3, #1
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
 80069bc:	e014      	b.n	80069e8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80069be:	6879      	ldr	r1, [r7, #4]
 80069c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069c2:	4613      	mov	r3, r2
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	4413      	add	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	440b      	add	r3, r1
 80069cc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d105      	bne.n	80069e2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80069d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	4619      	mov	r1, r3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fb27 	bl	8007030 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	3301      	adds	r3, #1
 80069e6:	627b      	str	r3, [r7, #36]	; 0x24
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d3e5      	bcc.n	80069be <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f005 fcba 	bl	800c370 <USB_ReadInterrupts>
 80069fc:	4603      	mov	r3, r0
 80069fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a06:	d13b      	bne.n	8006a80 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a08:	2301      	movs	r3, #1
 8006a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a0c:	e02b      	b.n	8006a66 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a22:	4613      	mov	r3, r2
 8006a24:	00db      	lsls	r3, r3, #3
 8006a26:	4413      	add	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	440b      	add	r3, r1
 8006a2c:	3340      	adds	r3, #64	; 0x40
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d115      	bne.n	8006a60 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006a34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	da12      	bge.n	8006a60 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006a3a:	6879      	ldr	r1, [r7, #4]
 8006a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a3e:	4613      	mov	r3, r2
 8006a40:	00db      	lsls	r3, r3, #3
 8006a42:	4413      	add	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	440b      	add	r3, r1
 8006a48:	333f      	adds	r3, #63	; 0x3f
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fae8 	bl	8007030 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	3301      	adds	r3, #1
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d3ce      	bcc.n	8006a0e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	695a      	ldr	r2, [r3, #20]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006a7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f005 fc73 	bl	800c370 <USB_ReadInterrupts>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a94:	d155      	bne.n	8006b42 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a96:	2301      	movs	r3, #1
 8006a98:	627b      	str	r3, [r7, #36]	; 0x24
 8006a9a:	e045      	b.n	8006b28 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006aac:	6879      	ldr	r1, [r7, #4]
 8006aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	4413      	add	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	440b      	add	r3, r1
 8006aba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d12e      	bne.n	8006b22 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006ac4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	da2b      	bge.n	8006b22 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006ad6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d121      	bne.n	8006b22 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	4413      	add	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	440b      	add	r3, r1
 8006aec:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006af0:	2201      	movs	r2, #1
 8006af2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10a      	bne.n	8006b22 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	69fa      	ldr	r2, [r7, #28]
 8006b16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b1e:	6053      	str	r3, [r2, #4]
            break;
 8006b20:	e007      	b.n	8006b32 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	3301      	adds	r3, #1
 8006b26:	627b      	str	r3, [r7, #36]	; 0x24
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d3b4      	bcc.n	8006a9c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	695a      	ldr	r2, [r3, #20]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f005 fc12 	bl	800c370 <USB_ReadInterrupts>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b56:	d10a      	bne.n	8006b6e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f00c ff01 	bl	8013960 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	695a      	ldr	r2, [r3, #20]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f005 fbfc 	bl	800c370 <USB_ReadInterrupts>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	f003 0304 	and.w	r3, r3, #4
 8006b7e:	2b04      	cmp	r3, #4
 8006b80:	d115      	bne.n	8006bae <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d002      	beq.n	8006b9a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f00c fef1 	bl	801397c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6859      	ldr	r1, [r3, #4]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	605a      	str	r2, [r3, #4]
 8006baa:	e000      	b.n	8006bae <HAL_PCD_IRQHandler+0x992>
      return;
 8006bac:	bf00      	nop
    }
  }
}
 8006bae:	3734      	adds	r7, #52	; 0x34
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd90      	pop	{r4, r7, pc}

08006bb4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d101      	bne.n	8006bce <HAL_PCD_SetAddress+0x1a>
 8006bca:	2302      	movs	r3, #2
 8006bcc:	e013      	b.n	8006bf6 <HAL_PCD_SetAddress+0x42>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	78fa      	ldrb	r2, [r7, #3]
 8006bda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	78fa      	ldrb	r2, [r7, #3]
 8006be4:	4611      	mov	r1, r2
 8006be6:	4618      	mov	r0, r3
 8006be8:	f005 fb5a 	bl	800c2a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	4608      	mov	r0, r1
 8006c08:	4611      	mov	r1, r2
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	70fb      	strb	r3, [r7, #3]
 8006c10:	460b      	mov	r3, r1
 8006c12:	803b      	strh	r3, [r7, #0]
 8006c14:	4613      	mov	r3, r2
 8006c16:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006c1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	da0f      	bge.n	8006c44 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c24:	78fb      	ldrb	r3, [r7, #3]
 8006c26:	f003 020f 	and.w	r2, r3, #15
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	00db      	lsls	r3, r3, #3
 8006c2e:	4413      	add	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	3338      	adds	r3, #56	; 0x38
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	4413      	add	r3, r2
 8006c38:	3304      	adds	r3, #4
 8006c3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	705a      	strb	r2, [r3, #1]
 8006c42:	e00f      	b.n	8006c64 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c44:	78fb      	ldrb	r3, [r7, #3]
 8006c46:	f003 020f 	and.w	r2, r3, #15
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	00db      	lsls	r3, r3, #3
 8006c4e:	4413      	add	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	4413      	add	r3, r2
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006c64:	78fb      	ldrb	r3, [r7, #3]
 8006c66:	f003 030f 	and.w	r3, r3, #15
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006c70:	883a      	ldrh	r2, [r7, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	78ba      	ldrb	r2, [r7, #2]
 8006c7a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	785b      	ldrb	r3, [r3, #1]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d004      	beq.n	8006c8e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006c8e:	78bb      	ldrb	r3, [r7, #2]
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d102      	bne.n	8006c9a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d101      	bne.n	8006ca8 <HAL_PCD_EP_Open+0xaa>
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	e00e      	b.n	8006cc6 <HAL_PCD_EP_Open+0xc8>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68f9      	ldr	r1, [r7, #12]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f004 fbda 	bl	800b470 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006cc4:	7afb      	ldrb	r3, [r7, #11]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006cda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	da0f      	bge.n	8006d02 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ce2:	78fb      	ldrb	r3, [r7, #3]
 8006ce4:	f003 020f 	and.w	r2, r3, #15
 8006ce8:	4613      	mov	r3, r2
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	4413      	add	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	3338      	adds	r3, #56	; 0x38
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	705a      	strb	r2, [r3, #1]
 8006d00:	e00f      	b.n	8006d22 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d02:	78fb      	ldrb	r3, [r7, #3]
 8006d04:	f003 020f 	and.w	r2, r3, #15
 8006d08:	4613      	mov	r3, r2
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	4413      	add	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	4413      	add	r3, r2
 8006d18:	3304      	adds	r3, #4
 8006d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006d22:	78fb      	ldrb	r3, [r7, #3]
 8006d24:	f003 030f 	and.w	r3, r3, #15
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d101      	bne.n	8006d3c <HAL_PCD_EP_Close+0x6e>
 8006d38:	2302      	movs	r3, #2
 8006d3a:	e00e      	b.n	8006d5a <HAL_PCD_EP_Close+0x8c>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68f9      	ldr	r1, [r7, #12]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f004 fc18 	bl	800b580 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b086      	sub	sp, #24
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	60f8      	str	r0, [r7, #12]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]
 8006d6e:	460b      	mov	r3, r1
 8006d70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d72:	7afb      	ldrb	r3, [r7, #11]
 8006d74:	f003 020f 	and.w	r2, r3, #15
 8006d78:	4613      	mov	r3, r2
 8006d7a:	00db      	lsls	r3, r3, #3
 8006d7c:	4413      	add	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	4413      	add	r3, r2
 8006d88:	3304      	adds	r3, #4
 8006d8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2200      	movs	r2, #0
 8006da2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006da4:	7afb      	ldrb	r3, [r7, #11]
 8006da6:	f003 030f 	and.w	r3, r3, #15
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d102      	bne.n	8006dbe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006dbe:	7afb      	ldrb	r3, [r7, #11]
 8006dc0:	f003 030f 	and.w	r3, r3, #15
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d109      	bne.n	8006ddc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6818      	ldr	r0, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	6979      	ldr	r1, [r7, #20]
 8006dd6:	f004 fef7 	bl	800bbc8 <USB_EP0StartXfer>
 8006dda:	e008      	b.n	8006dee <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6818      	ldr	r0, [r3, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	461a      	mov	r2, r3
 8006de8:	6979      	ldr	r1, [r7, #20]
 8006dea:	f004 fca5 	bl	800b738 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	460b      	mov	r3, r1
 8006e02:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006e04:	78fb      	ldrb	r3, [r7, #3]
 8006e06:	f003 020f 	and.w	r2, r3, #15
 8006e0a:	6879      	ldr	r1, [r7, #4]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	4413      	add	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	440b      	add	r3, r1
 8006e16:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006e1a:	681b      	ldr	r3, [r3, #0]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	607a      	str	r2, [r7, #4]
 8006e32:	603b      	str	r3, [r7, #0]
 8006e34:	460b      	mov	r3, r1
 8006e36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e38:	7afb      	ldrb	r3, [r7, #11]
 8006e3a:	f003 020f 	and.w	r2, r3, #15
 8006e3e:	4613      	mov	r3, r2
 8006e40:	00db      	lsls	r3, r3, #3
 8006e42:	4413      	add	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	3338      	adds	r3, #56	; 0x38
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	2201      	movs	r2, #1
 8006e66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e68:	7afb      	ldrb	r3, [r7, #11]
 8006e6a:	f003 030f 	and.w	r3, r3, #15
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d102      	bne.n	8006e82 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006e82:	7afb      	ldrb	r3, [r7, #11]
 8006e84:	f003 030f 	and.w	r3, r3, #15
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d109      	bne.n	8006ea0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6818      	ldr	r0, [r3, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	461a      	mov	r2, r3
 8006e98:	6979      	ldr	r1, [r7, #20]
 8006e9a:	f004 fe95 	bl	800bbc8 <USB_EP0StartXfer>
 8006e9e:	e008      	b.n	8006eb2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6818      	ldr	r0, [r3, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	461a      	mov	r2, r3
 8006eac:	6979      	ldr	r1, [r7, #20]
 8006eae:	f004 fc43 	bl	800b738 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3718      	adds	r7, #24
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006ec8:	78fb      	ldrb	r3, [r7, #3]
 8006eca:	f003 020f 	and.w	r2, r3, #15
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d901      	bls.n	8006eda <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e050      	b.n	8006f7c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006eda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	da0f      	bge.n	8006f02 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ee2:	78fb      	ldrb	r3, [r7, #3]
 8006ee4:	f003 020f 	and.w	r2, r3, #15
 8006ee8:	4613      	mov	r3, r2
 8006eea:	00db      	lsls	r3, r3, #3
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	3338      	adds	r3, #56	; 0x38
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2201      	movs	r2, #1
 8006efe:	705a      	strb	r2, [r3, #1]
 8006f00:	e00d      	b.n	8006f1e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006f02:	78fa      	ldrb	r2, [r7, #3]
 8006f04:	4613      	mov	r3, r2
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	4413      	add	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	4413      	add	r3, r2
 8006f14:	3304      	adds	r3, #4
 8006f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2201      	movs	r2, #1
 8006f22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f24:	78fb      	ldrb	r3, [r7, #3]
 8006f26:	f003 030f 	and.w	r3, r3, #15
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d101      	bne.n	8006f3e <HAL_PCD_EP_SetStall+0x82>
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	e01e      	b.n	8006f7c <HAL_PCD_EP_SetStall+0xc0>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68f9      	ldr	r1, [r7, #12]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f005 f8d3 	bl	800c0f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006f52:	78fb      	ldrb	r3, [r7, #3]
 8006f54:	f003 030f 	and.w	r3, r3, #15
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10a      	bne.n	8006f72 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6818      	ldr	r0, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	b2d9      	uxtb	r1, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	f005 fac3 	bl	800c4f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006f90:	78fb      	ldrb	r3, [r7, #3]
 8006f92:	f003 020f 	and.w	r2, r3, #15
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d901      	bls.n	8006fa2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e042      	b.n	8007028 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006fa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	da0f      	bge.n	8006fca <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006faa:	78fb      	ldrb	r3, [r7, #3]
 8006fac:	f003 020f 	and.w	r2, r3, #15
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	00db      	lsls	r3, r3, #3
 8006fb4:	4413      	add	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	3338      	adds	r3, #56	; 0x38
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	3304      	adds	r3, #4
 8006fc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	705a      	strb	r2, [r3, #1]
 8006fc8:	e00f      	b.n	8006fea <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006fca:	78fb      	ldrb	r3, [r7, #3]
 8006fcc:	f003 020f 	and.w	r2, r3, #15
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	4413      	add	r3, r2
 8006fe0:	3304      	adds	r3, #4
 8006fe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ff0:	78fb      	ldrb	r3, [r7, #3]
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007002:	2b01      	cmp	r3, #1
 8007004:	d101      	bne.n	800700a <HAL_PCD_EP_ClrStall+0x86>
 8007006:	2302      	movs	r3, #2
 8007008:	e00e      	b.n	8007028 <HAL_PCD_EP_ClrStall+0xa4>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68f9      	ldr	r1, [r7, #12]
 8007018:	4618      	mov	r0, r3
 800701a:	f005 f8db 	bl	800c1d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800703c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007040:	2b00      	cmp	r3, #0
 8007042:	da0c      	bge.n	800705e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007044:	78fb      	ldrb	r3, [r7, #3]
 8007046:	f003 020f 	and.w	r2, r3, #15
 800704a:	4613      	mov	r3, r2
 800704c:	00db      	lsls	r3, r3, #3
 800704e:	4413      	add	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	3338      	adds	r3, #56	; 0x38
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	4413      	add	r3, r2
 8007058:	3304      	adds	r3, #4
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	e00c      	b.n	8007078 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800705e:	78fb      	ldrb	r3, [r7, #3]
 8007060:	f003 020f 	and.w	r2, r3, #15
 8007064:	4613      	mov	r3, r2
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	4413      	add	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	4413      	add	r3, r2
 8007074:	3304      	adds	r3, #4
 8007076:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68f9      	ldr	r1, [r7, #12]
 800707e:	4618      	mov	r0, r3
 8007080:	f004 fefa 	bl	800be78 <USB_EPStopXfer>
 8007084:	4603      	mov	r3, r0
 8007086:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007088:	7afb      	ldrb	r3, [r7, #11]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b08a      	sub	sp, #40	; 0x28
 8007096:	af02      	add	r7, sp, #8
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	4613      	mov	r3, r2
 80070aa:	00db      	lsls	r3, r3, #3
 80070ac:	4413      	add	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	3338      	adds	r3, #56	; 0x38
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	4413      	add	r3, r2
 80070b6:	3304      	adds	r3, #4
 80070b8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6a1a      	ldr	r2, [r3, #32]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d901      	bls.n	80070ca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e06c      	b.n	80071a4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	699a      	ldr	r2, [r3, #24]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	69fa      	ldr	r2, [r7, #28]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d902      	bls.n	80070e6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	3303      	adds	r3, #3
 80070ea:	089b      	lsrs	r3, r3, #2
 80070ec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80070ee:	e02b      	b.n	8007148 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	699a      	ldr	r2, [r3, #24]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	69fa      	ldr	r2, [r7, #28]
 8007102:	429a      	cmp	r2, r3
 8007104:	d902      	bls.n	800710c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	3303      	adds	r3, #3
 8007110:	089b      	lsrs	r3, r3, #2
 8007112:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6919      	ldr	r1, [r3, #16]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	b2da      	uxtb	r2, r3
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007124:	b2db      	uxtb	r3, r3
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	4603      	mov	r3, r0
 800712a:	6978      	ldr	r0, [r7, #20]
 800712c:	f004 ff4e 	bl	800bfcc <USB_WritePacket>

    ep->xfer_buff  += len;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	691a      	ldr	r2, [r3, #16]
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	441a      	add	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6a1a      	ldr	r2, [r3, #32]
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	441a      	add	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	b29b      	uxth	r3, r3
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	429a      	cmp	r2, r3
 800715c:	d809      	bhi.n	8007172 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6a1a      	ldr	r2, [r3, #32]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007166:	429a      	cmp	r2, r3
 8007168:	d203      	bcs.n	8007172 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1be      	bne.n	80070f0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	699a      	ldr	r2, [r3, #24]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	429a      	cmp	r2, r3
 800717c:	d811      	bhi.n	80071a2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	f003 030f 	and.w	r3, r3, #15
 8007184:	2201      	movs	r2, #1
 8007186:	fa02 f303 	lsl.w	r3, r2, r3
 800718a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	43db      	mvns	r3, r3
 8007198:	6939      	ldr	r1, [r7, #16]
 800719a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800719e:	4013      	ands	r3, r2
 80071a0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3720      	adds	r7, #32
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b088      	sub	sp, #32
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	333c      	adds	r3, #60	; 0x3c
 80071c4:	3304      	adds	r3, #4
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	015a      	lsls	r2, r3, #5
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d17b      	bne.n	80072da <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f003 0308 	and.w	r3, r3, #8
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d015      	beq.n	8007218 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	4a61      	ldr	r2, [pc, #388]	; (8007374 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	f240 80b9 	bls.w	8007368 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 80b3 	beq.w	8007368 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	4413      	add	r3, r2
 800720a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800720e:	461a      	mov	r2, r3
 8007210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007214:	6093      	str	r3, [r2, #8]
 8007216:	e0a7      	b.n	8007368 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f003 0320 	and.w	r3, r3, #32
 800721e:	2b00      	cmp	r3, #0
 8007220:	d009      	beq.n	8007236 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	4413      	add	r3, r2
 800722a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722e:	461a      	mov	r2, r3
 8007230:	2320      	movs	r3, #32
 8007232:	6093      	str	r3, [r2, #8]
 8007234:	e098      	b.n	8007368 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800723c:	2b00      	cmp	r3, #0
 800723e:	f040 8093 	bne.w	8007368 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	4a4b      	ldr	r2, [pc, #300]	; (8007374 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d90f      	bls.n	800726a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00a      	beq.n	800726a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	015a      	lsls	r2, r3, #5
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	4413      	add	r3, r2
 800725c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007260:	461a      	mov	r2, r3
 8007262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007266:	6093      	str	r3, [r2, #8]
 8007268:	e07e      	b.n	8007368 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	4613      	mov	r3, r2
 800726e:	00db      	lsls	r3, r3, #3
 8007270:	4413      	add	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	4413      	add	r3, r2
 800727c:	3304      	adds	r3, #4
 800727e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	69da      	ldr	r2, [r3, #28]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	0159      	lsls	r1, r3, #5
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	440b      	add	r3, r1
 800728c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007296:	1ad2      	subs	r2, r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d114      	bne.n	80072cc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d109      	bne.n	80072be <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6818      	ldr	r0, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80072b4:	461a      	mov	r2, r3
 80072b6:	2101      	movs	r1, #1
 80072b8:	f005 f91e 	bl	800c4f8 <USB_EP0_OutStart>
 80072bc:	e006      	b.n	80072cc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	691a      	ldr	r2, [r3, #16]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	441a      	add	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	4619      	mov	r1, r3
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f00c fa80 	bl	80137d8 <HAL_PCD_DataOutStageCallback>
 80072d8:	e046      	b.n	8007368 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	4a26      	ldr	r2, [pc, #152]	; (8007378 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d124      	bne.n	800732c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00a      	beq.n	8007302 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f8:	461a      	mov	r2, r3
 80072fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072fe:	6093      	str	r3, [r2, #8]
 8007300:	e032      	b.n	8007368 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f003 0320 	and.w	r3, r3, #32
 8007308:	2b00      	cmp	r3, #0
 800730a:	d008      	beq.n	800731e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007318:	461a      	mov	r2, r3
 800731a:	2320      	movs	r3, #32
 800731c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	b2db      	uxtb	r3, r3
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f00c fa57 	bl	80137d8 <HAL_PCD_DataOutStageCallback>
 800732a:	e01d      	b.n	8007368 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d114      	bne.n	800735c <PCD_EP_OutXfrComplete_int+0x1b0>
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	4613      	mov	r3, r2
 8007338:	00db      	lsls	r3, r3, #3
 800733a:	4413      	add	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	440b      	add	r3, r1
 8007340:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d108      	bne.n	800735c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6818      	ldr	r0, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007354:	461a      	mov	r2, r3
 8007356:	2100      	movs	r1, #0
 8007358:	f005 f8ce 	bl	800c4f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	b2db      	uxtb	r3, r3
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f00c fa38 	bl	80137d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3720      	adds	r7, #32
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	4f54300a 	.word	0x4f54300a
 8007378:	4f54310a 	.word	0x4f54310a

0800737c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	333c      	adds	r3, #60	; 0x3c
 8007394:	3304      	adds	r3, #4
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	4a15      	ldr	r2, [pc, #84]	; (8007404 <PCD_EP_OutSetupPacket_int+0x88>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d90e      	bls.n	80073d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d009      	beq.n	80073d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c8:	461a      	mov	r2, r3
 80073ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f00c f9ef 	bl	80137b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	4a0a      	ldr	r2, [pc, #40]	; (8007404 <PCD_EP_OutSetupPacket_int+0x88>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d90c      	bls.n	80073f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d108      	bne.n	80073f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6818      	ldr	r0, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80073f0:	461a      	mov	r2, r3
 80073f2:	2101      	movs	r1, #1
 80073f4:	f005 f880 	bl	800c4f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3718      	adds	r7, #24
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	4f54300a 	.word	0x4f54300a

08007408 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	70fb      	strb	r3, [r7, #3]
 8007414:	4613      	mov	r3, r2
 8007416:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007420:	78fb      	ldrb	r3, [r7, #3]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d107      	bne.n	8007436 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007426:	883b      	ldrh	r3, [r7, #0]
 8007428:	0419      	lsls	r1, r3, #16
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	430a      	orrs	r2, r1
 8007432:	629a      	str	r2, [r3, #40]	; 0x28
 8007434:	e028      	b.n	8007488 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743c:	0c1b      	lsrs	r3, r3, #16
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	4413      	add	r3, r2
 8007442:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007444:	2300      	movs	r3, #0
 8007446:	73fb      	strb	r3, [r7, #15]
 8007448:	e00d      	b.n	8007466 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	7bfb      	ldrb	r3, [r7, #15]
 8007450:	3340      	adds	r3, #64	; 0x40
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	0c1b      	lsrs	r3, r3, #16
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	4413      	add	r3, r2
 800745e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	3301      	adds	r3, #1
 8007464:	73fb      	strb	r3, [r7, #15]
 8007466:	7bfa      	ldrb	r2, [r7, #15]
 8007468:	78fb      	ldrb	r3, [r7, #3]
 800746a:	3b01      	subs	r3, #1
 800746c:	429a      	cmp	r2, r3
 800746e:	d3ec      	bcc.n	800744a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007470:	883b      	ldrh	r3, [r7, #0]
 8007472:	0418      	lsls	r0, r3, #16
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6819      	ldr	r1, [r3, #0]
 8007478:	78fb      	ldrb	r3, [r7, #3]
 800747a:	3b01      	subs	r3, #1
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	4302      	orrs	r2, r0
 8007480:	3340      	adds	r3, #64	; 0x40
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	440b      	add	r3, r1
 8007486:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	460b      	mov	r3, r1
 80074a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	887a      	ldrh	r2, [r7, #2]
 80074a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074ea:	f043 0303 	orr.w	r3, r3, #3
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e0cc      	b.n	80076ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007514:	4b68      	ldr	r3, [pc, #416]	; (80076b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 030f 	and.w	r3, r3, #15
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	429a      	cmp	r2, r3
 8007520:	d90c      	bls.n	800753c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007522:	4b65      	ldr	r3, [pc, #404]	; (80076b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	b2d2      	uxtb	r2, r2
 8007528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800752a:	4b63      	ldr	r3, [pc, #396]	; (80076b8 <HAL_RCC_ClockConfig+0x1b8>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 030f 	and.w	r3, r3, #15
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	429a      	cmp	r2, r3
 8007536:	d001      	beq.n	800753c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e0b8      	b.n	80076ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0302 	and.w	r3, r3, #2
 8007544:	2b00      	cmp	r3, #0
 8007546:	d020      	beq.n	800758a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0304 	and.w	r3, r3, #4
 8007550:	2b00      	cmp	r3, #0
 8007552:	d005      	beq.n	8007560 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007554:	4b59      	ldr	r3, [pc, #356]	; (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	4a58      	ldr	r2, [pc, #352]	; (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 800755a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800755e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0308 	and.w	r3, r3, #8
 8007568:	2b00      	cmp	r3, #0
 800756a:	d005      	beq.n	8007578 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800756c:	4b53      	ldr	r3, [pc, #332]	; (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	4a52      	ldr	r2, [pc, #328]	; (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 8007572:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007576:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007578:	4b50      	ldr	r3, [pc, #320]	; (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	494d      	ldr	r1, [pc, #308]	; (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 8007586:	4313      	orrs	r3, r2
 8007588:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d044      	beq.n	8007620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d107      	bne.n	80075ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800759e:	4b47      	ldr	r3, [pc, #284]	; (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d119      	bne.n	80075de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e07f      	b.n	80076ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d003      	beq.n	80075be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d107      	bne.n	80075ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075be:	4b3f      	ldr	r3, [pc, #252]	; (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d109      	bne.n	80075de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e06f      	b.n	80076ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075ce:	4b3b      	ldr	r3, [pc, #236]	; (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0302 	and.w	r3, r3, #2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e067      	b.n	80076ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075de:	4b37      	ldr	r3, [pc, #220]	; (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f023 0203 	bic.w	r2, r3, #3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	4934      	ldr	r1, [pc, #208]	; (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 80075ec:	4313      	orrs	r3, r2
 80075ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075f0:	f7fc fa92 	bl	8003b18 <HAL_GetTick>
 80075f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075f6:	e00a      	b.n	800760e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075f8:	f7fc fa8e 	bl	8003b18 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	f241 3288 	movw	r2, #5000	; 0x1388
 8007606:	4293      	cmp	r3, r2
 8007608:	d901      	bls.n	800760e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e04f      	b.n	80076ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800760e:	4b2b      	ldr	r3, [pc, #172]	; (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f003 020c 	and.w	r2, r3, #12
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	429a      	cmp	r2, r3
 800761e:	d1eb      	bne.n	80075f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007620:	4b25      	ldr	r3, [pc, #148]	; (80076b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	429a      	cmp	r2, r3
 800762c:	d20c      	bcs.n	8007648 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800762e:	4b22      	ldr	r3, [pc, #136]	; (80076b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	b2d2      	uxtb	r2, r2
 8007634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007636:	4b20      	ldr	r3, [pc, #128]	; (80076b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 030f 	and.w	r3, r3, #15
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	429a      	cmp	r2, r3
 8007642:	d001      	beq.n	8007648 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e032      	b.n	80076ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b00      	cmp	r3, #0
 8007652:	d008      	beq.n	8007666 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007654:	4b19      	ldr	r3, [pc, #100]	; (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	4916      	ldr	r1, [pc, #88]	; (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 8007662:	4313      	orrs	r3, r2
 8007664:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0308 	and.w	r3, r3, #8
 800766e:	2b00      	cmp	r3, #0
 8007670:	d009      	beq.n	8007686 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007672:	4b12      	ldr	r3, [pc, #72]	; (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	490e      	ldr	r1, [pc, #56]	; (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 8007682:	4313      	orrs	r3, r2
 8007684:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007686:	f000 fbb1 	bl	8007dec <HAL_RCC_GetSysClockFreq>
 800768a:	4602      	mov	r2, r0
 800768c:	4b0b      	ldr	r3, [pc, #44]	; (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	091b      	lsrs	r3, r3, #4
 8007692:	f003 030f 	and.w	r3, r3, #15
 8007696:	490a      	ldr	r1, [pc, #40]	; (80076c0 <HAL_RCC_ClockConfig+0x1c0>)
 8007698:	5ccb      	ldrb	r3, [r1, r3]
 800769a:	fa22 f303 	lsr.w	r3, r2, r3
 800769e:	4a09      	ldr	r2, [pc, #36]	; (80076c4 <HAL_RCC_ClockConfig+0x1c4>)
 80076a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80076a2:	4b09      	ldr	r3, [pc, #36]	; (80076c8 <HAL_RCC_ClockConfig+0x1c8>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fb fc4c 	bl	8002f44 <HAL_InitTick>

  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	40023c00 	.word	0x40023c00
 80076bc:	40023800 	.word	0x40023800
 80076c0:	08016fb0 	.word	0x08016fb0
 80076c4:	20000000 	.word	0x20000000
 80076c8:	20000004 	.word	0x20000004

080076cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076cc:	b480      	push	{r7}
 80076ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076d0:	4b03      	ldr	r3, [pc, #12]	; (80076e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80076d2:	681b      	ldr	r3, [r3, #0]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	20000000 	.word	0x20000000

080076e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80076e8:	f7ff fff0 	bl	80076cc <HAL_RCC_GetHCLKFreq>
 80076ec:	4602      	mov	r2, r0
 80076ee:	4b05      	ldr	r3, [pc, #20]	; (8007704 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	0a9b      	lsrs	r3, r3, #10
 80076f4:	f003 0307 	and.w	r3, r3, #7
 80076f8:	4903      	ldr	r1, [pc, #12]	; (8007708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076fa:	5ccb      	ldrb	r3, [r1, r3]
 80076fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007700:	4618      	mov	r0, r3
 8007702:	bd80      	pop	{r7, pc}
 8007704:	40023800 	.word	0x40023800
 8007708:	08016fc0 	.word	0x08016fc0

0800770c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007710:	f7ff ffdc 	bl	80076cc <HAL_RCC_GetHCLKFreq>
 8007714:	4602      	mov	r2, r0
 8007716:	4b05      	ldr	r3, [pc, #20]	; (800772c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	0b5b      	lsrs	r3, r3, #13
 800771c:	f003 0307 	and.w	r3, r3, #7
 8007720:	4903      	ldr	r1, [pc, #12]	; (8007730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007722:	5ccb      	ldrb	r3, [r1, r3]
 8007724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007728:	4618      	mov	r0, r3
 800772a:	bd80      	pop	{r7, pc}
 800772c:	40023800 	.word	0x40023800
 8007730:	08016fc0 	.word	0x08016fc0

08007734 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	220f      	movs	r2, #15
 8007742:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007744:	4b12      	ldr	r3, [pc, #72]	; (8007790 <HAL_RCC_GetClockConfig+0x5c>)
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f003 0203 	and.w	r2, r3, #3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007750:	4b0f      	ldr	r3, [pc, #60]	; (8007790 <HAL_RCC_GetClockConfig+0x5c>)
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800775c:	4b0c      	ldr	r3, [pc, #48]	; (8007790 <HAL_RCC_GetClockConfig+0x5c>)
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007768:	4b09      	ldr	r3, [pc, #36]	; (8007790 <HAL_RCC_GetClockConfig+0x5c>)
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	08db      	lsrs	r3, r3, #3
 800776e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007776:	4b07      	ldr	r3, [pc, #28]	; (8007794 <HAL_RCC_GetClockConfig+0x60>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 020f 	and.w	r2, r3, #15
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	601a      	str	r2, [r3, #0]
}
 8007782:	bf00      	nop
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	40023800 	.word	0x40023800
 8007794:	40023c00 	.word	0x40023c00

08007798 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b08c      	sub	sp, #48	; 0x30
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80077a4:	2300      	movs	r3, #0
 80077a6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80077b8:	2300      	movs	r3, #0
 80077ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d010      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80077d0:	4b6f      	ldr	r3, [pc, #444]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077d6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077de:	496c      	ldr	r1, [pc, #432]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077e0:	4313      	orrs	r3, r2
 80077e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80077ee:	2301      	movs	r3, #1
 80077f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d010      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80077fe:	4b64      	ldr	r3, [pc, #400]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007804:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800780c:	4960      	ldr	r1, [pc, #384]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800780e:	4313      	orrs	r3, r2
 8007810:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800781c:	2301      	movs	r3, #1
 800781e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0304 	and.w	r3, r3, #4
 8007828:	2b00      	cmp	r3, #0
 800782a:	d017      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800782c:	4b58      	ldr	r3, [pc, #352]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800782e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007832:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783a:	4955      	ldr	r1, [pc, #340]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800783c:	4313      	orrs	r3, r2
 800783e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800784a:	d101      	bne.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800784c:	2301      	movs	r3, #1
 800784e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8007858:	2301      	movs	r3, #1
 800785a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0308 	and.w	r3, r3, #8
 8007864:	2b00      	cmp	r3, #0
 8007866:	d017      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007868:	4b49      	ldr	r3, [pc, #292]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800786a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800786e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007876:	4946      	ldr	r1, [pc, #280]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007878:	4313      	orrs	r3, r2
 800787a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007886:	d101      	bne.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8007888:	2301      	movs	r3, #1
 800788a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8007894:	2301      	movs	r3, #1
 8007896:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0320 	and.w	r3, r3, #32
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 808a 	beq.w	80079ba <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80078a6:	2300      	movs	r3, #0
 80078a8:	60bb      	str	r3, [r7, #8]
 80078aa:	4b39      	ldr	r3, [pc, #228]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80078ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ae:	4a38      	ldr	r2, [pc, #224]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80078b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078b4:	6413      	str	r3, [r2, #64]	; 0x40
 80078b6:	4b36      	ldr	r3, [pc, #216]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80078b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078be:	60bb      	str	r3, [r7, #8]
 80078c0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80078c2:	4b34      	ldr	r3, [pc, #208]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a33      	ldr	r2, [pc, #204]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80078c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80078ce:	f7fc f923 	bl	8003b18 <HAL_GetTick>
 80078d2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80078d4:	e008      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80078d6:	f7fc f91f 	bl	8003b18 <HAL_GetTick>
 80078da:	4602      	mov	r2, r0
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d901      	bls.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e278      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80078e8:	4b2a      	ldr	r3, [pc, #168]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d0f0      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80078f4:	4b26      	ldr	r3, [pc, #152]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80078f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078fc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d02f      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800790c:	6a3a      	ldr	r2, [r7, #32]
 800790e:	429a      	cmp	r2, r3
 8007910:	d028      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007912:	4b1f      	ldr	r3, [pc, #124]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800791a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800791c:	4b1e      	ldr	r3, [pc, #120]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800791e:	2201      	movs	r2, #1
 8007920:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007922:	4b1d      	ldr	r3, [pc, #116]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007928:	4a19      	ldr	r2, [pc, #100]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800792e:	4b18      	ldr	r3, [pc, #96]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007932:	f003 0301 	and.w	r3, r3, #1
 8007936:	2b01      	cmp	r3, #1
 8007938:	d114      	bne.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800793a:	f7fc f8ed 	bl	8003b18 <HAL_GetTick>
 800793e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007940:	e00a      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007942:	f7fc f8e9 	bl	8003b18 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007950:	4293      	cmp	r3, r2
 8007952:	d901      	bls.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e240      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007958:	4b0d      	ldr	r3, [pc, #52]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800795a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800795c:	f003 0302 	and.w	r3, r3, #2
 8007960:	2b00      	cmp	r3, #0
 8007962:	d0ee      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800796c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007970:	d114      	bne.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8007972:	4b07      	ldr	r3, [pc, #28]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007986:	4902      	ldr	r1, [pc, #8]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007988:	4313      	orrs	r3, r2
 800798a:	608b      	str	r3, [r1, #8]
 800798c:	e00c      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800798e:	bf00      	nop
 8007990:	40023800 	.word	0x40023800
 8007994:	40007000 	.word	0x40007000
 8007998:	42470e40 	.word	0x42470e40
 800799c:	4b4a      	ldr	r3, [pc, #296]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	4a49      	ldr	r2, [pc, #292]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80079a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80079a6:	6093      	str	r3, [r2, #8]
 80079a8:	4b47      	ldr	r3, [pc, #284]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80079aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079b4:	4944      	ldr	r1, [pc, #272]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80079b6:	4313      	orrs	r3, r2
 80079b8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0310 	and.w	r3, r3, #16
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d004      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80079cc:	4b3f      	ldr	r3, [pc, #252]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80079ce:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00a      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80079dc:	4b3a      	ldr	r3, [pc, #232]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80079de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ea:	4937      	ldr	r1, [pc, #220]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00a      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80079fe:	4b32      	ldr	r3, [pc, #200]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a04:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a0c:	492e      	ldr	r1, [pc, #184]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d011      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007a20:	4b29      	ldr	r3, [pc, #164]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a26:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2e:	4926      	ldr	r1, [pc, #152]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a3e:	d101      	bne.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8007a40:	2301      	movs	r3, #1
 8007a42:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00a      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007a50:	4b1d      	ldr	r3, [pc, #116]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a56:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a5e:	491a      	ldr	r1, [pc, #104]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d011      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8007a72:	4b15      	ldr	r3, [pc, #84]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a78:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a80:	4911      	ldr	r1, [pc, #68]	; (8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a90:	d101      	bne.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8007a92:	2301      	movs	r3, #1
 8007a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d005      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aa4:	f040 80ff 	bne.w	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007aa8:	4b09      	ldr	r3, [pc, #36]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007aae:	f7fc f833 	bl	8003b18 <HAL_GetTick>
 8007ab2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ab4:	e00e      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007ab6:	f7fc f82f 	bl	8003b18 <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d907      	bls.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e188      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007ac8:	40023800 	.word	0x40023800
 8007acc:	424711e0 	.word	0x424711e0
 8007ad0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ad4:	4b7e      	ldr	r3, [pc, #504]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1ea      	bne.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d009      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d028      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d124      	bne.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007b08:	4b71      	ldr	r3, [pc, #452]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b0e:	0c1b      	lsrs	r3, r3, #16
 8007b10:	f003 0303 	and.w	r3, r3, #3
 8007b14:	3301      	adds	r3, #1
 8007b16:	005b      	lsls	r3, r3, #1
 8007b18:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007b1a:	4b6d      	ldr	r3, [pc, #436]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b20:	0e1b      	lsrs	r3, r3, #24
 8007b22:	f003 030f 	and.w	r3, r3, #15
 8007b26:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	019b      	lsls	r3, r3, #6
 8007b32:	431a      	orrs	r2, r3
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	085b      	lsrs	r3, r3, #1
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	041b      	lsls	r3, r3, #16
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	061b      	lsls	r3, r3, #24
 8007b42:	431a      	orrs	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	071b      	lsls	r3, r3, #28
 8007b4a:	4961      	ldr	r1, [pc, #388]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0304 	and.w	r3, r3, #4
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d004      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b66:	d00a      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d035      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b7c:	d130      	bne.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007b7e:	4b54      	ldr	r3, [pc, #336]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b84:	0c1b      	lsrs	r3, r3, #16
 8007b86:	f003 0303 	and.w	r3, r3, #3
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	005b      	lsls	r3, r3, #1
 8007b8e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007b90:	4b4f      	ldr	r3, [pc, #316]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b96:	0f1b      	lsrs	r3, r3, #28
 8007b98:	f003 0307 	and.w	r3, r3, #7
 8007b9c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	019b      	lsls	r3, r3, #6
 8007ba8:	431a      	orrs	r2, r3
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	085b      	lsrs	r3, r3, #1
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	041b      	lsls	r3, r3, #16
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	061b      	lsls	r3, r3, #24
 8007bba:	431a      	orrs	r2, r3
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	071b      	lsls	r3, r3, #28
 8007bc0:	4943      	ldr	r1, [pc, #268]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007bc8:	4b41      	ldr	r3, [pc, #260]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bce:	f023 021f 	bic.w	r2, r3, #31
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	493d      	ldr	r1, [pc, #244]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d029      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bf4:	d124      	bne.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007bf6:	4b36      	ldr	r3, [pc, #216]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bfc:	0c1b      	lsrs	r3, r3, #16
 8007bfe:	f003 0303 	and.w	r3, r3, #3
 8007c02:	3301      	adds	r3, #1
 8007c04:	005b      	lsls	r3, r3, #1
 8007c06:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007c08:	4b31      	ldr	r3, [pc, #196]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c0e:	0f1b      	lsrs	r3, r3, #28
 8007c10:	f003 0307 	and.w	r3, r3, #7
 8007c14:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685a      	ldr	r2, [r3, #4]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	019b      	lsls	r3, r3, #6
 8007c20:	431a      	orrs	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	085b      	lsrs	r3, r3, #1
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	041b      	lsls	r3, r3, #16
 8007c2c:	431a      	orrs	r2, r3
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	061b      	lsls	r3, r3, #24
 8007c32:	431a      	orrs	r2, r3
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	071b      	lsls	r3, r3, #28
 8007c38:	4925      	ldr	r1, [pc, #148]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d016      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	019b      	lsls	r3, r3, #6
 8007c56:	431a      	orrs	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	085b      	lsrs	r3, r3, #1
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	041b      	lsls	r3, r3, #16
 8007c62:	431a      	orrs	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	061b      	lsls	r3, r3, #24
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	071b      	lsls	r3, r3, #28
 8007c72:	4917      	ldr	r1, [pc, #92]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007c7a:	4b16      	ldr	r3, [pc, #88]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c80:	f7fb ff4a 	bl	8003b18 <HAL_GetTick>
 8007c84:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c86:	e008      	b.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007c88:	f7fb ff46 	bl	8003b18 <HAL_GetTick>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d901      	bls.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e09f      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c9a:	4b0d      	ldr	r3, [pc, #52]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d0f0      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8007ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	f040 8095 	bne.w	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007cae:	4b0a      	ldr	r3, [pc, #40]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007cb4:	f7fb ff30 	bl	8003b18 <HAL_GetTick>
 8007cb8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007cba:	e00f      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007cbc:	f7fb ff2c 	bl	8003b18 <HAL_GetTick>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d908      	bls.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e085      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007cce:	bf00      	nop
 8007cd0:	40023800 	.word	0x40023800
 8007cd4:	42470068 	.word	0x42470068
 8007cd8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007cdc:	4b41      	ldr	r3, [pc, #260]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ce8:	d0e8      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0304 	and.w	r3, r3, #4
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x566>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d009      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d02b      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d127      	bne.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007d12:	4b34      	ldr	r3, [pc, #208]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d18:	0c1b      	lsrs	r3, r3, #16
 8007d1a:	f003 0303 	and.w	r3, r3, #3
 8007d1e:	3301      	adds	r3, #1
 8007d20:	005b      	lsls	r3, r3, #1
 8007d22:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	699a      	ldr	r2, [r3, #24]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	69db      	ldr	r3, [r3, #28]
 8007d2c:	019b      	lsls	r3, r3, #6
 8007d2e:	431a      	orrs	r2, r3
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	085b      	lsrs	r3, r3, #1
 8007d34:	3b01      	subs	r3, #1
 8007d36:	041b      	lsls	r3, r3, #16
 8007d38:	431a      	orrs	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	061b      	lsls	r3, r3, #24
 8007d40:	4928      	ldr	r1, [pc, #160]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007d48:	4b26      	ldr	r3, [pc, #152]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d4e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d56:	3b01      	subs	r3, #1
 8007d58:	021b      	lsls	r3, r3, #8
 8007d5a:	4922      	ldr	r1, [pc, #136]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d01d      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x612>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d76:	d118      	bne.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007d78:	4b1a      	ldr	r3, [pc, #104]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d7e:	0e1b      	lsrs	r3, r3, #24
 8007d80:	f003 030f 	and.w	r3, r3, #15
 8007d84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	699a      	ldr	r2, [r3, #24]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	019b      	lsls	r3, r3, #6
 8007d90:	431a      	orrs	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	085b      	lsrs	r3, r3, #1
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	041b      	lsls	r3, r3, #16
 8007d9c:	431a      	orrs	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	061b      	lsls	r3, r3, #24
 8007da2:	4910      	ldr	r1, [pc, #64]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007daa:	4b0f      	ldr	r3, [pc, #60]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8007dac:	2201      	movs	r2, #1
 8007dae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007db0:	f7fb feb2 	bl	8003b18 <HAL_GetTick>
 8007db4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007db6:	e008      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007db8:	f7fb feae 	bl	8003b18 <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d901      	bls.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e007      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007dca:	4b06      	ldr	r3, [pc, #24]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dd6:	d1ef      	bne.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3730      	adds	r7, #48	; 0x30
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	40023800 	.word	0x40023800
 8007de8:	42470070 	.word	0x42470070

08007dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007df0:	b0a6      	sub	sp, #152	; 0x98
 8007df2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8007e06:	2300      	movs	r3, #0
 8007e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e12:	4bc8      	ldr	r3, [pc, #800]	; (8008134 <HAL_RCC_GetSysClockFreq+0x348>)
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f003 030c 	and.w	r3, r3, #12
 8007e1a:	2b0c      	cmp	r3, #12
 8007e1c:	f200 817e 	bhi.w	800811c <HAL_RCC_GetSysClockFreq+0x330>
 8007e20:	a201      	add	r2, pc, #4	; (adr r2, 8007e28 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e26:	bf00      	nop
 8007e28:	08007e5d 	.word	0x08007e5d
 8007e2c:	0800811d 	.word	0x0800811d
 8007e30:	0800811d 	.word	0x0800811d
 8007e34:	0800811d 	.word	0x0800811d
 8007e38:	08007e65 	.word	0x08007e65
 8007e3c:	0800811d 	.word	0x0800811d
 8007e40:	0800811d 	.word	0x0800811d
 8007e44:	0800811d 	.word	0x0800811d
 8007e48:	08007e6d 	.word	0x08007e6d
 8007e4c:	0800811d 	.word	0x0800811d
 8007e50:	0800811d 	.word	0x0800811d
 8007e54:	0800811d 	.word	0x0800811d
 8007e58:	08007fd7 	.word	0x08007fd7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e5c:	4bb6      	ldr	r3, [pc, #728]	; (8008138 <HAL_RCC_GetSysClockFreq+0x34c>)
 8007e5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8007e62:	e15f      	b.n	8008124 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e64:	4bb5      	ldr	r3, [pc, #724]	; (800813c <HAL_RCC_GetSysClockFreq+0x350>)
 8007e66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8007e6a:	e15b      	b.n	8008124 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e6c:	4bb1      	ldr	r3, [pc, #708]	; (8008134 <HAL_RCC_GetSysClockFreq+0x348>)
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e78:	4bae      	ldr	r3, [pc, #696]	; (8008134 <HAL_RCC_GetSysClockFreq+0x348>)
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d031      	beq.n	8007ee8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e84:	4bab      	ldr	r3, [pc, #684]	; (8008134 <HAL_RCC_GetSysClockFreq+0x348>)
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	099b      	lsrs	r3, r3, #6
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e96:	663b      	str	r3, [r7, #96]	; 0x60
 8007e98:	2300      	movs	r3, #0
 8007e9a:	667b      	str	r3, [r7, #100]	; 0x64
 8007e9c:	4ba7      	ldr	r3, [pc, #668]	; (800813c <HAL_RCC_GetSysClockFreq+0x350>)
 8007e9e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007ea2:	462a      	mov	r2, r5
 8007ea4:	fb03 f202 	mul.w	r2, r3, r2
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	4621      	mov	r1, r4
 8007eac:	fb01 f303 	mul.w	r3, r1, r3
 8007eb0:	4413      	add	r3, r2
 8007eb2:	4aa2      	ldr	r2, [pc, #648]	; (800813c <HAL_RCC_GetSysClockFreq+0x350>)
 8007eb4:	4621      	mov	r1, r4
 8007eb6:	fba1 1202 	umull	r1, r2, r1, r2
 8007eba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007ebc:	460a      	mov	r2, r1
 8007ebe:	67ba      	str	r2, [r7, #120]	; 0x78
 8007ec0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007ec2:	4413      	add	r3, r2
 8007ec4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007eca:	2200      	movs	r2, #0
 8007ecc:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ece:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007ed0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007ed4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007ed8:	f7f8 fe86 	bl	8000be8 <__aeabi_uldivmod>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ee6:	e064      	b.n	8007fb2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ee8:	4b92      	ldr	r3, [pc, #584]	; (8008134 <HAL_RCC_GetSysClockFreq+0x348>)
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	099b      	lsrs	r3, r3, #6
 8007eee:	2200      	movs	r2, #0
 8007ef0:	653b      	str	r3, [r7, #80]	; 0x50
 8007ef2:	657a      	str	r2, [r7, #84]	; 0x54
 8007ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007efc:	2300      	movs	r3, #0
 8007efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f00:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8007f04:	4622      	mov	r2, r4
 8007f06:	462b      	mov	r3, r5
 8007f08:	f04f 0000 	mov.w	r0, #0
 8007f0c:	f04f 0100 	mov.w	r1, #0
 8007f10:	0159      	lsls	r1, r3, #5
 8007f12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f16:	0150      	lsls	r0, r2, #5
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	1a51      	subs	r1, r2, r1
 8007f20:	6139      	str	r1, [r7, #16]
 8007f22:	4629      	mov	r1, r5
 8007f24:	eb63 0301 	sbc.w	r3, r3, r1
 8007f28:	617b      	str	r3, [r7, #20]
 8007f2a:	f04f 0200 	mov.w	r2, #0
 8007f2e:	f04f 0300 	mov.w	r3, #0
 8007f32:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f36:	4659      	mov	r1, fp
 8007f38:	018b      	lsls	r3, r1, #6
 8007f3a:	4651      	mov	r1, sl
 8007f3c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f40:	4651      	mov	r1, sl
 8007f42:	018a      	lsls	r2, r1, #6
 8007f44:	4651      	mov	r1, sl
 8007f46:	ebb2 0801 	subs.w	r8, r2, r1
 8007f4a:	4659      	mov	r1, fp
 8007f4c:	eb63 0901 	sbc.w	r9, r3, r1
 8007f50:	f04f 0200 	mov.w	r2, #0
 8007f54:	f04f 0300 	mov.w	r3, #0
 8007f58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f64:	4690      	mov	r8, r2
 8007f66:	4699      	mov	r9, r3
 8007f68:	4623      	mov	r3, r4
 8007f6a:	eb18 0303 	adds.w	r3, r8, r3
 8007f6e:	60bb      	str	r3, [r7, #8]
 8007f70:	462b      	mov	r3, r5
 8007f72:	eb49 0303 	adc.w	r3, r9, r3
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	f04f 0200 	mov.w	r2, #0
 8007f7c:	f04f 0300 	mov.w	r3, #0
 8007f80:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007f84:	4629      	mov	r1, r5
 8007f86:	028b      	lsls	r3, r1, #10
 8007f88:	4621      	mov	r1, r4
 8007f8a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f8e:	4621      	mov	r1, r4
 8007f90:	028a      	lsls	r2, r1, #10
 8007f92:	4610      	mov	r0, r2
 8007f94:	4619      	mov	r1, r3
 8007f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	643b      	str	r3, [r7, #64]	; 0x40
 8007f9e:	647a      	str	r2, [r7, #68]	; 0x44
 8007fa0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007fa4:	f7f8 fe20 	bl	8000be8 <__aeabi_uldivmod>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4613      	mov	r3, r2
 8007fae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007fb2:	4b60      	ldr	r3, [pc, #384]	; (8008134 <HAL_RCC_GetSysClockFreq+0x348>)
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	0c1b      	lsrs	r3, r3, #16
 8007fb8:	f003 0303 	and.w	r3, r3, #3
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	005b      	lsls	r3, r3, #1
 8007fc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8007fc4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007fc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8007fd4:	e0a6      	b.n	8008124 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007fd6:	4b57      	ldr	r3, [pc, #348]	; (8008134 <HAL_RCC_GetSysClockFreq+0x348>)
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007fe2:	4b54      	ldr	r3, [pc, #336]	; (8008134 <HAL_RCC_GetSysClockFreq+0x348>)
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d02a      	beq.n	8008044 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fee:	4b51      	ldr	r3, [pc, #324]	; (8008134 <HAL_RCC_GetSysClockFreq+0x348>)
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	099b      	lsrs	r3, r3, #6
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ff8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008000:	2100      	movs	r1, #0
 8008002:	4b4e      	ldr	r3, [pc, #312]	; (800813c <HAL_RCC_GetSysClockFreq+0x350>)
 8008004:	fb03 f201 	mul.w	r2, r3, r1
 8008008:	2300      	movs	r3, #0
 800800a:	fb00 f303 	mul.w	r3, r0, r3
 800800e:	4413      	add	r3, r2
 8008010:	4a4a      	ldr	r2, [pc, #296]	; (800813c <HAL_RCC_GetSysClockFreq+0x350>)
 8008012:	fba0 1202 	umull	r1, r2, r0, r2
 8008016:	677a      	str	r2, [r7, #116]	; 0x74
 8008018:	460a      	mov	r2, r1
 800801a:	673a      	str	r2, [r7, #112]	; 0x70
 800801c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800801e:	4413      	add	r3, r2
 8008020:	677b      	str	r3, [r7, #116]	; 0x74
 8008022:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008026:	2200      	movs	r2, #0
 8008028:	633b      	str	r3, [r7, #48]	; 0x30
 800802a:	637a      	str	r2, [r7, #52]	; 0x34
 800802c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008030:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8008034:	f7f8 fdd8 	bl	8000be8 <__aeabi_uldivmod>
 8008038:	4602      	mov	r2, r0
 800803a:	460b      	mov	r3, r1
 800803c:	4613      	mov	r3, r2
 800803e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008042:	e05b      	b.n	80080fc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008044:	4b3b      	ldr	r3, [pc, #236]	; (8008134 <HAL_RCC_GetSysClockFreq+0x348>)
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	099b      	lsrs	r3, r3, #6
 800804a:	2200      	movs	r2, #0
 800804c:	62bb      	str	r3, [r7, #40]	; 0x28
 800804e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008056:	623b      	str	r3, [r7, #32]
 8008058:	2300      	movs	r3, #0
 800805a:	627b      	str	r3, [r7, #36]	; 0x24
 800805c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008060:	4642      	mov	r2, r8
 8008062:	464b      	mov	r3, r9
 8008064:	f04f 0000 	mov.w	r0, #0
 8008068:	f04f 0100 	mov.w	r1, #0
 800806c:	0159      	lsls	r1, r3, #5
 800806e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008072:	0150      	lsls	r0, r2, #5
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4641      	mov	r1, r8
 800807a:	ebb2 0a01 	subs.w	sl, r2, r1
 800807e:	4649      	mov	r1, r9
 8008080:	eb63 0b01 	sbc.w	fp, r3, r1
 8008084:	f04f 0200 	mov.w	r2, #0
 8008088:	f04f 0300 	mov.w	r3, #0
 800808c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008090:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008094:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008098:	ebb2 040a 	subs.w	r4, r2, sl
 800809c:	eb63 050b 	sbc.w	r5, r3, fp
 80080a0:	f04f 0200 	mov.w	r2, #0
 80080a4:	f04f 0300 	mov.w	r3, #0
 80080a8:	00eb      	lsls	r3, r5, #3
 80080aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080ae:	00e2      	lsls	r2, r4, #3
 80080b0:	4614      	mov	r4, r2
 80080b2:	461d      	mov	r5, r3
 80080b4:	4643      	mov	r3, r8
 80080b6:	18e3      	adds	r3, r4, r3
 80080b8:	603b      	str	r3, [r7, #0]
 80080ba:	464b      	mov	r3, r9
 80080bc:	eb45 0303 	adc.w	r3, r5, r3
 80080c0:	607b      	str	r3, [r7, #4]
 80080c2:	f04f 0200 	mov.w	r2, #0
 80080c6:	f04f 0300 	mov.w	r3, #0
 80080ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80080ce:	4629      	mov	r1, r5
 80080d0:	028b      	lsls	r3, r1, #10
 80080d2:	4621      	mov	r1, r4
 80080d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80080d8:	4621      	mov	r1, r4
 80080da:	028a      	lsls	r2, r1, #10
 80080dc:	4610      	mov	r0, r2
 80080de:	4619      	mov	r1, r3
 80080e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080e4:	2200      	movs	r2, #0
 80080e6:	61bb      	str	r3, [r7, #24]
 80080e8:	61fa      	str	r2, [r7, #28]
 80080ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080ee:	f7f8 fd7b 	bl	8000be8 <__aeabi_uldivmod>
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	4613      	mov	r3, r2
 80080f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80080fc:	4b0d      	ldr	r3, [pc, #52]	; (8008134 <HAL_RCC_GetSysClockFreq+0x348>)
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	0f1b      	lsrs	r3, r3, #28
 8008102:	f003 0307 	and.w	r3, r3, #7
 8008106:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800810a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800810e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008112:	fbb2 f3f3 	udiv	r3, r2, r3
 8008116:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800811a:	e003      	b.n	8008124 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800811c:	4b06      	ldr	r3, [pc, #24]	; (8008138 <HAL_RCC_GetSysClockFreq+0x34c>)
 800811e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8008122:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008124:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8008128:	4618      	mov	r0, r3
 800812a:	3798      	adds	r7, #152	; 0x98
 800812c:	46bd      	mov	sp, r7
 800812e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008132:	bf00      	nop
 8008134:	40023800 	.word	0x40023800
 8008138:	00f42400 	.word	0x00f42400
 800813c:	00b71b00 	.word	0x00b71b00

08008140 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d101      	bne.n	8008152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	e28d      	b.n	800866e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 8083 	beq.w	8008266 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008160:	4b94      	ldr	r3, [pc, #592]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	f003 030c 	and.w	r3, r3, #12
 8008168:	2b04      	cmp	r3, #4
 800816a:	d019      	beq.n	80081a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800816c:	4b91      	ldr	r3, [pc, #580]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008174:	2b08      	cmp	r3, #8
 8008176:	d106      	bne.n	8008186 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008178:	4b8e      	ldr	r3, [pc, #568]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008184:	d00c      	beq.n	80081a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008186:	4b8b      	ldr	r3, [pc, #556]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800818e:	2b0c      	cmp	r3, #12
 8008190:	d112      	bne.n	80081b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008192:	4b88      	ldr	r3, [pc, #544]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800819a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800819e:	d10b      	bne.n	80081b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081a0:	4b84      	ldr	r3, [pc, #528]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d05b      	beq.n	8008264 <HAL_RCC_OscConfig+0x124>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d157      	bne.n	8008264 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e25a      	b.n	800866e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081c0:	d106      	bne.n	80081d0 <HAL_RCC_OscConfig+0x90>
 80081c2:	4b7c      	ldr	r3, [pc, #496]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a7b      	ldr	r2, [pc, #492]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 80081c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081cc:	6013      	str	r3, [r2, #0]
 80081ce:	e01d      	b.n	800820c <HAL_RCC_OscConfig+0xcc>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081d8:	d10c      	bne.n	80081f4 <HAL_RCC_OscConfig+0xb4>
 80081da:	4b76      	ldr	r3, [pc, #472]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a75      	ldr	r2, [pc, #468]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 80081e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081e4:	6013      	str	r3, [r2, #0]
 80081e6:	4b73      	ldr	r3, [pc, #460]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a72      	ldr	r2, [pc, #456]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 80081ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081f0:	6013      	str	r3, [r2, #0]
 80081f2:	e00b      	b.n	800820c <HAL_RCC_OscConfig+0xcc>
 80081f4:	4b6f      	ldr	r3, [pc, #444]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a6e      	ldr	r2, [pc, #440]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 80081fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	4b6c      	ldr	r3, [pc, #432]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a6b      	ldr	r2, [pc, #428]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 8008206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800820a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d013      	beq.n	800823c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008214:	f7fb fc80 	bl	8003b18 <HAL_GetTick>
 8008218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800821a:	e008      	b.n	800822e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800821c:	f7fb fc7c 	bl	8003b18 <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	2b64      	cmp	r3, #100	; 0x64
 8008228:	d901      	bls.n	800822e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e21f      	b.n	800866e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800822e:	4b61      	ldr	r3, [pc, #388]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0f0      	beq.n	800821c <HAL_RCC_OscConfig+0xdc>
 800823a:	e014      	b.n	8008266 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800823c:	f7fb fc6c 	bl	8003b18 <HAL_GetTick>
 8008240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008242:	e008      	b.n	8008256 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008244:	f7fb fc68 	bl	8003b18 <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	2b64      	cmp	r3, #100	; 0x64
 8008250:	d901      	bls.n	8008256 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008252:	2303      	movs	r3, #3
 8008254:	e20b      	b.n	800866e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008256:	4b57      	ldr	r3, [pc, #348]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1f0      	bne.n	8008244 <HAL_RCC_OscConfig+0x104>
 8008262:	e000      	b.n	8008266 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0302 	and.w	r3, r3, #2
 800826e:	2b00      	cmp	r3, #0
 8008270:	d06f      	beq.n	8008352 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008272:	4b50      	ldr	r3, [pc, #320]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f003 030c 	and.w	r3, r3, #12
 800827a:	2b00      	cmp	r3, #0
 800827c:	d017      	beq.n	80082ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800827e:	4b4d      	ldr	r3, [pc, #308]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008286:	2b08      	cmp	r3, #8
 8008288:	d105      	bne.n	8008296 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800828a:	4b4a      	ldr	r3, [pc, #296]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00b      	beq.n	80082ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008296:	4b47      	ldr	r3, [pc, #284]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800829e:	2b0c      	cmp	r3, #12
 80082a0:	d11c      	bne.n	80082dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082a2:	4b44      	ldr	r3, [pc, #272]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d116      	bne.n	80082dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082ae:	4b41      	ldr	r3, [pc, #260]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0302 	and.w	r3, r3, #2
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d005      	beq.n	80082c6 <HAL_RCC_OscConfig+0x186>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d001      	beq.n	80082c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e1d3      	b.n	800866e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082c6:	4b3b      	ldr	r3, [pc, #236]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	00db      	lsls	r3, r3, #3
 80082d4:	4937      	ldr	r1, [pc, #220]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082da:	e03a      	b.n	8008352 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d020      	beq.n	8008326 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80082e4:	4b34      	ldr	r3, [pc, #208]	; (80083b8 <HAL_RCC_OscConfig+0x278>)
 80082e6:	2201      	movs	r2, #1
 80082e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ea:	f7fb fc15 	bl	8003b18 <HAL_GetTick>
 80082ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082f0:	e008      	b.n	8008304 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082f2:	f7fb fc11 	bl	8003b18 <HAL_GetTick>
 80082f6:	4602      	mov	r2, r0
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d901      	bls.n	8008304 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e1b4      	b.n	800866e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008304:	4b2b      	ldr	r3, [pc, #172]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 0302 	and.w	r3, r3, #2
 800830c:	2b00      	cmp	r3, #0
 800830e:	d0f0      	beq.n	80082f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008310:	4b28      	ldr	r3, [pc, #160]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	00db      	lsls	r3, r3, #3
 800831e:	4925      	ldr	r1, [pc, #148]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 8008320:	4313      	orrs	r3, r2
 8008322:	600b      	str	r3, [r1, #0]
 8008324:	e015      	b.n	8008352 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008326:	4b24      	ldr	r3, [pc, #144]	; (80083b8 <HAL_RCC_OscConfig+0x278>)
 8008328:	2200      	movs	r2, #0
 800832a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800832c:	f7fb fbf4 	bl	8003b18 <HAL_GetTick>
 8008330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008332:	e008      	b.n	8008346 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008334:	f7fb fbf0 	bl	8003b18 <HAL_GetTick>
 8008338:	4602      	mov	r2, r0
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	2b02      	cmp	r3, #2
 8008340:	d901      	bls.n	8008346 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008342:	2303      	movs	r3, #3
 8008344:	e193      	b.n	800866e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008346:	4b1b      	ldr	r3, [pc, #108]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 0302 	and.w	r3, r3, #2
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1f0      	bne.n	8008334 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 0308 	and.w	r3, r3, #8
 800835a:	2b00      	cmp	r3, #0
 800835c:	d036      	beq.n	80083cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d016      	beq.n	8008394 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008366:	4b15      	ldr	r3, [pc, #84]	; (80083bc <HAL_RCC_OscConfig+0x27c>)
 8008368:	2201      	movs	r2, #1
 800836a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800836c:	f7fb fbd4 	bl	8003b18 <HAL_GetTick>
 8008370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008372:	e008      	b.n	8008386 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008374:	f7fb fbd0 	bl	8003b18 <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	2b02      	cmp	r3, #2
 8008380:	d901      	bls.n	8008386 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e173      	b.n	800866e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008386:	4b0b      	ldr	r3, [pc, #44]	; (80083b4 <HAL_RCC_OscConfig+0x274>)
 8008388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800838a:	f003 0302 	and.w	r3, r3, #2
 800838e:	2b00      	cmp	r3, #0
 8008390:	d0f0      	beq.n	8008374 <HAL_RCC_OscConfig+0x234>
 8008392:	e01b      	b.n	80083cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008394:	4b09      	ldr	r3, [pc, #36]	; (80083bc <HAL_RCC_OscConfig+0x27c>)
 8008396:	2200      	movs	r2, #0
 8008398:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800839a:	f7fb fbbd 	bl	8003b18 <HAL_GetTick>
 800839e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083a0:	e00e      	b.n	80083c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083a2:	f7fb fbb9 	bl	8003b18 <HAL_GetTick>
 80083a6:	4602      	mov	r2, r0
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d907      	bls.n	80083c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e15c      	b.n	800866e <HAL_RCC_OscConfig+0x52e>
 80083b4:	40023800 	.word	0x40023800
 80083b8:	42470000 	.word	0x42470000
 80083bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083c0:	4b8a      	ldr	r3, [pc, #552]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 80083c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083c4:	f003 0302 	and.w	r3, r3, #2
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1ea      	bne.n	80083a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 0304 	and.w	r3, r3, #4
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f000 8097 	beq.w	8008508 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083da:	2300      	movs	r3, #0
 80083dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083de:	4b83      	ldr	r3, [pc, #524]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 80083e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10f      	bne.n	800840a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083ea:	2300      	movs	r3, #0
 80083ec:	60bb      	str	r3, [r7, #8]
 80083ee:	4b7f      	ldr	r3, [pc, #508]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 80083f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f2:	4a7e      	ldr	r2, [pc, #504]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 80083f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083f8:	6413      	str	r3, [r2, #64]	; 0x40
 80083fa:	4b7c      	ldr	r3, [pc, #496]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 80083fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008402:	60bb      	str	r3, [r7, #8]
 8008404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008406:	2301      	movs	r3, #1
 8008408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800840a:	4b79      	ldr	r3, [pc, #484]	; (80085f0 <HAL_RCC_OscConfig+0x4b0>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008412:	2b00      	cmp	r3, #0
 8008414:	d118      	bne.n	8008448 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008416:	4b76      	ldr	r3, [pc, #472]	; (80085f0 <HAL_RCC_OscConfig+0x4b0>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a75      	ldr	r2, [pc, #468]	; (80085f0 <HAL_RCC_OscConfig+0x4b0>)
 800841c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008422:	f7fb fb79 	bl	8003b18 <HAL_GetTick>
 8008426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008428:	e008      	b.n	800843c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800842a:	f7fb fb75 	bl	8003b18 <HAL_GetTick>
 800842e:	4602      	mov	r2, r0
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	2b02      	cmp	r3, #2
 8008436:	d901      	bls.n	800843c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e118      	b.n	800866e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800843c:	4b6c      	ldr	r3, [pc, #432]	; (80085f0 <HAL_RCC_OscConfig+0x4b0>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008444:	2b00      	cmp	r3, #0
 8008446:	d0f0      	beq.n	800842a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d106      	bne.n	800845e <HAL_RCC_OscConfig+0x31e>
 8008450:	4b66      	ldr	r3, [pc, #408]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 8008452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008454:	4a65      	ldr	r2, [pc, #404]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 8008456:	f043 0301 	orr.w	r3, r3, #1
 800845a:	6713      	str	r3, [r2, #112]	; 0x70
 800845c:	e01c      	b.n	8008498 <HAL_RCC_OscConfig+0x358>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	2b05      	cmp	r3, #5
 8008464:	d10c      	bne.n	8008480 <HAL_RCC_OscConfig+0x340>
 8008466:	4b61      	ldr	r3, [pc, #388]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 8008468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800846a:	4a60      	ldr	r2, [pc, #384]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 800846c:	f043 0304 	orr.w	r3, r3, #4
 8008470:	6713      	str	r3, [r2, #112]	; 0x70
 8008472:	4b5e      	ldr	r3, [pc, #376]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 8008474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008476:	4a5d      	ldr	r2, [pc, #372]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 8008478:	f043 0301 	orr.w	r3, r3, #1
 800847c:	6713      	str	r3, [r2, #112]	; 0x70
 800847e:	e00b      	b.n	8008498 <HAL_RCC_OscConfig+0x358>
 8008480:	4b5a      	ldr	r3, [pc, #360]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 8008482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008484:	4a59      	ldr	r2, [pc, #356]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 8008486:	f023 0301 	bic.w	r3, r3, #1
 800848a:	6713      	str	r3, [r2, #112]	; 0x70
 800848c:	4b57      	ldr	r3, [pc, #348]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 800848e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008490:	4a56      	ldr	r2, [pc, #344]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 8008492:	f023 0304 	bic.w	r3, r3, #4
 8008496:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d015      	beq.n	80084cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084a0:	f7fb fb3a 	bl	8003b18 <HAL_GetTick>
 80084a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084a6:	e00a      	b.n	80084be <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084a8:	f7fb fb36 	bl	8003b18 <HAL_GetTick>
 80084ac:	4602      	mov	r2, r0
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d901      	bls.n	80084be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e0d7      	b.n	800866e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084be:	4b4b      	ldr	r3, [pc, #300]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 80084c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c2:	f003 0302 	and.w	r3, r3, #2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d0ee      	beq.n	80084a8 <HAL_RCC_OscConfig+0x368>
 80084ca:	e014      	b.n	80084f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084cc:	f7fb fb24 	bl	8003b18 <HAL_GetTick>
 80084d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084d2:	e00a      	b.n	80084ea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084d4:	f7fb fb20 	bl	8003b18 <HAL_GetTick>
 80084d8:	4602      	mov	r2, r0
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	f241 3288 	movw	r2, #5000	; 0x1388
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d901      	bls.n	80084ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e0c1      	b.n	800866e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084ea:	4b40      	ldr	r3, [pc, #256]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 80084ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ee:	f003 0302 	and.w	r3, r3, #2
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1ee      	bne.n	80084d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80084f6:	7dfb      	ldrb	r3, [r7, #23]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d105      	bne.n	8008508 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084fc:	4b3b      	ldr	r3, [pc, #236]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 80084fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008500:	4a3a      	ldr	r2, [pc, #232]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 8008502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008506:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 80ad 	beq.w	800866c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008512:	4b36      	ldr	r3, [pc, #216]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f003 030c 	and.w	r3, r3, #12
 800851a:	2b08      	cmp	r3, #8
 800851c:	d060      	beq.n	80085e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	2b02      	cmp	r3, #2
 8008524:	d145      	bne.n	80085b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008526:	4b33      	ldr	r3, [pc, #204]	; (80085f4 <HAL_RCC_OscConfig+0x4b4>)
 8008528:	2200      	movs	r2, #0
 800852a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800852c:	f7fb faf4 	bl	8003b18 <HAL_GetTick>
 8008530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008532:	e008      	b.n	8008546 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008534:	f7fb faf0 	bl	8003b18 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	2b02      	cmp	r3, #2
 8008540:	d901      	bls.n	8008546 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e093      	b.n	800866e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008546:	4b29      	ldr	r3, [pc, #164]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1f0      	bne.n	8008534 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	69da      	ldr	r2, [r3, #28]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	431a      	orrs	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008560:	019b      	lsls	r3, r3, #6
 8008562:	431a      	orrs	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008568:	085b      	lsrs	r3, r3, #1
 800856a:	3b01      	subs	r3, #1
 800856c:	041b      	lsls	r3, r3, #16
 800856e:	431a      	orrs	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008574:	061b      	lsls	r3, r3, #24
 8008576:	431a      	orrs	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800857c:	071b      	lsls	r3, r3, #28
 800857e:	491b      	ldr	r1, [pc, #108]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 8008580:	4313      	orrs	r3, r2
 8008582:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008584:	4b1b      	ldr	r3, [pc, #108]	; (80085f4 <HAL_RCC_OscConfig+0x4b4>)
 8008586:	2201      	movs	r2, #1
 8008588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800858a:	f7fb fac5 	bl	8003b18 <HAL_GetTick>
 800858e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008590:	e008      	b.n	80085a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008592:	f7fb fac1 	bl	8003b18 <HAL_GetTick>
 8008596:	4602      	mov	r2, r0
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	2b02      	cmp	r3, #2
 800859e:	d901      	bls.n	80085a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e064      	b.n	800866e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085a4:	4b11      	ldr	r3, [pc, #68]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d0f0      	beq.n	8008592 <HAL_RCC_OscConfig+0x452>
 80085b0:	e05c      	b.n	800866c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085b2:	4b10      	ldr	r3, [pc, #64]	; (80085f4 <HAL_RCC_OscConfig+0x4b4>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085b8:	f7fb faae 	bl	8003b18 <HAL_GetTick>
 80085bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085be:	e008      	b.n	80085d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085c0:	f7fb faaa 	bl	8003b18 <HAL_GetTick>
 80085c4:	4602      	mov	r2, r0
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d901      	bls.n	80085d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e04d      	b.n	800866e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085d2:	4b06      	ldr	r3, [pc, #24]	; (80085ec <HAL_RCC_OscConfig+0x4ac>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1f0      	bne.n	80085c0 <HAL_RCC_OscConfig+0x480>
 80085de:	e045      	b.n	800866c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	699b      	ldr	r3, [r3, #24]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d107      	bne.n	80085f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e040      	b.n	800866e <HAL_RCC_OscConfig+0x52e>
 80085ec:	40023800 	.word	0x40023800
 80085f0:	40007000 	.word	0x40007000
 80085f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80085f8:	4b1f      	ldr	r3, [pc, #124]	; (8008678 <HAL_RCC_OscConfig+0x538>)
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	699b      	ldr	r3, [r3, #24]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d030      	beq.n	8008668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008610:	429a      	cmp	r2, r3
 8008612:	d129      	bne.n	8008668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800861e:	429a      	cmp	r2, r3
 8008620:	d122      	bne.n	8008668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008628:	4013      	ands	r3, r2
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800862e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008630:	4293      	cmp	r3, r2
 8008632:	d119      	bne.n	8008668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863e:	085b      	lsrs	r3, r3, #1
 8008640:	3b01      	subs	r3, #1
 8008642:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008644:	429a      	cmp	r2, r3
 8008646:	d10f      	bne.n	8008668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008652:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008654:	429a      	cmp	r2, r3
 8008656:	d107      	bne.n	8008668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008662:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008664:	429a      	cmp	r2, r3
 8008666:	d001      	beq.n	800866c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e000      	b.n	800866e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3718      	adds	r7, #24
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	40023800 	.word	0x40023800

0800867c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d101      	bne.n	8008692 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e066      	b.n	8008760 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	7f5b      	ldrb	r3, [r3, #29]
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b00      	cmp	r3, #0
 800869a:	d105      	bne.n	80086a8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7fa fac4 	bl	8002c30 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2202      	movs	r2, #2
 80086ac:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	22ca      	movs	r2, #202	; 0xca
 80086b4:	625a      	str	r2, [r3, #36]	; 0x24
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2253      	movs	r2, #83	; 0x53
 80086bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fa45 	bl	8008b4e <RTC_EnterInitMode>
 80086c4:	4603      	mov	r3, r0
 80086c6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d12c      	bne.n	8008728 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	6812      	ldr	r2, [r2, #0]
 80086d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80086dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086e0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	6899      	ldr	r1, [r3, #8]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	431a      	orrs	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	431a      	orrs	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	430a      	orrs	r2, r1
 80086fe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	68d2      	ldr	r2, [r2, #12]
 8008708:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6919      	ldr	r1, [r3, #16]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	041a      	lsls	r2, r3, #16
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	430a      	orrs	r2, r1
 800871c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fa4c 	bl	8008bbc <RTC_ExitInitMode>
 8008724:	4603      	mov	r3, r0
 8008726:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008728:	7bfb      	ldrb	r3, [r7, #15]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d113      	bne.n	8008756 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800873c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	699a      	ldr	r2, [r3, #24]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	430a      	orrs	r2, r1
 800874e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	22ff      	movs	r2, #255	; 0xff
 800875c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800875e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008760:	4618      	mov	r0, r3
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008768:	b590      	push	{r4, r7, lr}
 800876a:	b087      	sub	sp, #28
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008774:	2300      	movs	r3, #0
 8008776:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	7f1b      	ldrb	r3, [r3, #28]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d101      	bne.n	8008784 <HAL_RTC_SetTime+0x1c>
 8008780:	2302      	movs	r3, #2
 8008782:	e087      	b.n	8008894 <HAL_RTC_SetTime+0x12c>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2201      	movs	r2, #1
 8008788:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2202      	movs	r2, #2
 800878e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d126      	bne.n	80087e4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d102      	bne.n	80087aa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2200      	movs	r2, #0
 80087a8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 fa29 	bl	8008c06 <RTC_ByteToBcd2>
 80087b4:	4603      	mov	r3, r0
 80087b6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	785b      	ldrb	r3, [r3, #1]
 80087bc:	4618      	mov	r0, r3
 80087be:	f000 fa22 	bl	8008c06 <RTC_ByteToBcd2>
 80087c2:	4603      	mov	r3, r0
 80087c4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087c6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	789b      	ldrb	r3, [r3, #2]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f000 fa1a 	bl	8008c06 <RTC_ByteToBcd2>
 80087d2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80087d4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	78db      	ldrb	r3, [r3, #3]
 80087dc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087de:	4313      	orrs	r3, r2
 80087e0:	617b      	str	r3, [r7, #20]
 80087e2:	e018      	b.n	8008816 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d102      	bne.n	80087f8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2200      	movs	r2, #0
 80087f6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	785b      	ldrb	r3, [r3, #1]
 8008802:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008804:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800880a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	78db      	ldrb	r3, [r3, #3]
 8008810:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008812:	4313      	orrs	r3, r2
 8008814:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	22ca      	movs	r2, #202	; 0xca
 800881c:	625a      	str	r2, [r3, #36]	; 0x24
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2253      	movs	r2, #83	; 0x53
 8008824:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f000 f991 	bl	8008b4e <RTC_EnterInitMode>
 800882c:	4603      	mov	r3, r0
 800882e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008830:	7cfb      	ldrb	r3, [r7, #19]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d120      	bne.n	8008878 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008840:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008844:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	689a      	ldr	r2, [r3, #8]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008854:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	6899      	ldr	r1, [r3, #8]
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	68da      	ldr	r2, [r3, #12]
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	431a      	orrs	r2, r3
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	430a      	orrs	r2, r1
 800886c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f000 f9a4 	bl	8008bbc <RTC_ExitInitMode>
 8008874:	4603      	mov	r3, r0
 8008876:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008878:	7cfb      	ldrb	r3, [r7, #19]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d102      	bne.n	8008884 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2201      	movs	r2, #1
 8008882:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	22ff      	movs	r2, #255	; 0xff
 800888a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	771a      	strb	r2, [r3, #28]

  return status;
 8008892:	7cfb      	ldrb	r3, [r7, #19]
}
 8008894:	4618      	mov	r0, r3
 8008896:	371c      	adds	r7, #28
 8008898:	46bd      	mov	sp, r7
 800889a:	bd90      	pop	{r4, r7, pc}

0800889c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80088ce:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80088d2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	0c1b      	lsrs	r3, r3, #16
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	0a1b      	lsrs	r3, r3, #8
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ee:	b2da      	uxtb	r2, r3
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088fc:	b2da      	uxtb	r2, r3
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	0d9b      	lsrs	r3, r3, #22
 8008906:	b2db      	uxtb	r3, r3
 8008908:	f003 0301 	and.w	r3, r3, #1
 800890c:	b2da      	uxtb	r2, r3
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d11a      	bne.n	800894e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	4618      	mov	r0, r3
 800891e:	f000 f98f 	bl	8008c40 <RTC_Bcd2ToByte>
 8008922:	4603      	mov	r3, r0
 8008924:	461a      	mov	r2, r3
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	785b      	ldrb	r3, [r3, #1]
 800892e:	4618      	mov	r0, r3
 8008930:	f000 f986 	bl	8008c40 <RTC_Bcd2ToByte>
 8008934:	4603      	mov	r3, r0
 8008936:	461a      	mov	r2, r3
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	789b      	ldrb	r3, [r3, #2]
 8008940:	4618      	mov	r0, r3
 8008942:	f000 f97d 	bl	8008c40 <RTC_Bcd2ToByte>
 8008946:	4603      	mov	r3, r0
 8008948:	461a      	mov	r2, r3
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3718      	adds	r7, #24
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008958:	b590      	push	{r4, r7, lr}
 800895a:	b087      	sub	sp, #28
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008964:	2300      	movs	r3, #0
 8008966:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	7f1b      	ldrb	r3, [r3, #28]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d101      	bne.n	8008974 <HAL_RTC_SetDate+0x1c>
 8008970:	2302      	movs	r3, #2
 8008972:	e071      	b.n	8008a58 <HAL_RTC_SetDate+0x100>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2201      	movs	r2, #1
 8008978:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2202      	movs	r2, #2
 800897e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10e      	bne.n	80089a4 <HAL_RTC_SetDate+0x4c>
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	785b      	ldrb	r3, [r3, #1]
 800898a:	f003 0310 	and.w	r3, r3, #16
 800898e:	2b00      	cmp	r3, #0
 8008990:	d008      	beq.n	80089a4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	785b      	ldrb	r3, [r3, #1]
 8008996:	f023 0310 	bic.w	r3, r3, #16
 800899a:	b2db      	uxtb	r3, r3
 800899c:	330a      	adds	r3, #10
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d11c      	bne.n	80089e4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	78db      	ldrb	r3, [r3, #3]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 f929 	bl	8008c06 <RTC_ByteToBcd2>
 80089b4:	4603      	mov	r3, r0
 80089b6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	785b      	ldrb	r3, [r3, #1]
 80089bc:	4618      	mov	r0, r3
 80089be:	f000 f922 	bl	8008c06 <RTC_ByteToBcd2>
 80089c2:	4603      	mov	r3, r0
 80089c4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80089c6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	789b      	ldrb	r3, [r3, #2]
 80089cc:	4618      	mov	r0, r3
 80089ce:	f000 f91a 	bl	8008c06 <RTC_ByteToBcd2>
 80089d2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80089d4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80089de:	4313      	orrs	r3, r2
 80089e0:	617b      	str	r3, [r7, #20]
 80089e2:	e00e      	b.n	8008a02 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	78db      	ldrb	r3, [r3, #3]
 80089e8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	785b      	ldrb	r3, [r3, #1]
 80089ee:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80089f0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80089f6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80089fe:	4313      	orrs	r3, r2
 8008a00:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	22ca      	movs	r2, #202	; 0xca
 8008a08:	625a      	str	r2, [r3, #36]	; 0x24
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2253      	movs	r2, #83	; 0x53
 8008a10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f000 f89b 	bl	8008b4e <RTC_EnterInitMode>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008a1c:	7cfb      	ldrb	r3, [r7, #19]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10c      	bne.n	8008a3c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008a2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a30:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f000 f8c2 	bl	8008bbc <RTC_ExitInitMode>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008a3c:	7cfb      	ldrb	r3, [r7, #19]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d102      	bne.n	8008a48 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2201      	movs	r2, #1
 8008a46:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	22ff      	movs	r2, #255	; 0xff
 8008a4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	771a      	strb	r2, [r3, #28]

  return status;
 8008a56:	7cfb      	ldrb	r3, [r7, #19]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	371c      	adds	r7, #28
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd90      	pop	{r4, r7, pc}

08008a60 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008a7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a7e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	0c1b      	lsrs	r3, r3, #16
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	0a1b      	lsrs	r3, r3, #8
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	f003 031f 	and.w	r3, r3, #31
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	0b5b      	lsrs	r3, r3, #13
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	f003 0307 	and.w	r3, r3, #7
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d11a      	bne.n	8008af4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	78db      	ldrb	r3, [r3, #3]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f000 f8bc 	bl	8008c40 <RTC_Bcd2ToByte>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	461a      	mov	r2, r3
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	785b      	ldrb	r3, [r3, #1]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f000 f8b3 	bl	8008c40 <RTC_Bcd2ToByte>
 8008ada:	4603      	mov	r3, r0
 8008adc:	461a      	mov	r2, r3
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	789b      	ldrb	r3, [r3, #2]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 f8aa 	bl	8008c40 <RTC_Bcd2ToByte>
 8008aec:	4603      	mov	r3, r0
 8008aee:	461a      	mov	r2, r3
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3718      	adds	r7, #24
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b084      	sub	sp, #16
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008b06:	2300      	movs	r3, #0
 8008b08:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68da      	ldr	r2, [r3, #12]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008b18:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b1a:	f7fa fffd 	bl	8003b18 <HAL_GetTick>
 8008b1e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008b20:	e009      	b.n	8008b36 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008b22:	f7fa fff9 	bl	8003b18 <HAL_GetTick>
 8008b26:	4602      	mov	r2, r0
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	1ad3      	subs	r3, r2, r3
 8008b2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b30:	d901      	bls.n	8008b36 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e007      	b.n	8008b46 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	f003 0320 	and.w	r3, r3, #32
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d0ee      	beq.n	8008b22 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b084      	sub	sp, #16
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008b56:	2300      	movs	r3, #0
 8008b58:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d122      	bne.n	8008bb2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68da      	ldr	r2, [r3, #12]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008b7a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b7c:	f7fa ffcc 	bl	8003b18 <HAL_GetTick>
 8008b80:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008b82:	e00c      	b.n	8008b9e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008b84:	f7fa ffc8 	bl	8003b18 <HAL_GetTick>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b92:	d904      	bls.n	8008b9e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2204      	movs	r2, #4
 8008b98:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d102      	bne.n	8008bb2 <RTC_EnterInitMode+0x64>
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d1e8      	bne.n	8008b84 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68da      	ldr	r2, [r3, #12]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bd6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f003 0320 	and.w	r3, r3, #32
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10a      	bne.n	8008bfc <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7ff ff89 	bl	8008afe <HAL_RTC_WaitForSynchro>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d004      	beq.n	8008bfc <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2204      	movs	r2, #4
 8008bf6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008c06:	b480      	push	{r7}
 8008c08:	b085      	sub	sp, #20
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8008c10:	2300      	movs	r3, #0
 8008c12:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8008c14:	e005      	b.n	8008c22 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8008c1c:	79fb      	ldrb	r3, [r7, #7]
 8008c1e:	3b0a      	subs	r3, #10
 8008c20:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008c22:	79fb      	ldrb	r3, [r7, #7]
 8008c24:	2b09      	cmp	r3, #9
 8008c26:	d8f6      	bhi.n	8008c16 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
 8008c2a:	011b      	lsls	r3, r3, #4
 8008c2c:	b2da      	uxtb	r2, r3
 8008c2e:	79fb      	ldrb	r3, [r7, #7]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	b2db      	uxtb	r3, r3
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	4603      	mov	r3, r0
 8008c48:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008c4e:	79fb      	ldrb	r3, [r7, #7]
 8008c50:	091b      	lsrs	r3, r3, #4
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	461a      	mov	r2, r3
 8008c56:	0092      	lsls	r2, r2, #2
 8008c58:	4413      	add	r3, r2
 8008c5a:	005b      	lsls	r3, r3, #1
 8008c5c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8008c5e:	79fb      	ldrb	r3, [r7, #7]
 8008c60:	f003 030f 	and.w	r3, r3, #15
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
 8008c68:	4413      	add	r3, r2
 8008c6a:	b2db      	uxtb	r3, r3
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3714      	adds	r7, #20
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e07b      	b.n	8008d82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d108      	bne.n	8008ca4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c9a:	d009      	beq.n	8008cb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	61da      	str	r2, [r3, #28]
 8008ca2:	e005      	b.n	8008cb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d106      	bne.n	8008cd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7f9 ffda 	bl	8002c84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ce6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008cf8:	431a      	orrs	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d02:	431a      	orrs	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	f003 0302 	and.w	r3, r3, #2
 8008d0c:	431a      	orrs	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	f003 0301 	and.w	r3, r3, #1
 8008d16:	431a      	orrs	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	699b      	ldr	r3, [r3, #24]
 8008d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d20:	431a      	orrs	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	69db      	ldr	r3, [r3, #28]
 8008d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d2a:	431a      	orrs	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a1b      	ldr	r3, [r3, #32]
 8008d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d34:	ea42 0103 	orr.w	r1, r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	430a      	orrs	r2, r1
 8008d46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	0c1b      	lsrs	r3, r3, #16
 8008d4e:	f003 0104 	and.w	r1, r3, #4
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	f003 0210 	and.w	r2, r3, #16
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	69da      	ldr	r2, [r3, #28]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b082      	sub	sp, #8
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e041      	b.n	8008e20 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d106      	bne.n	8008db6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f7f9 ffaf 	bl	8002d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2202      	movs	r2, #2
 8008dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	3304      	adds	r3, #4
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	4610      	mov	r0, r2
 8008dca:	f000 fcc7 	bl	800975c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2201      	movs	r2, #1
 8008de2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2201      	movs	r2, #1
 8008e02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d001      	beq.n	8008e40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e04e      	b.n	8008ede <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2202      	movs	r2, #2
 8008e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68da      	ldr	r2, [r3, #12]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f042 0201 	orr.w	r2, r2, #1
 8008e56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a23      	ldr	r2, [pc, #140]	; (8008eec <HAL_TIM_Base_Start_IT+0xc4>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d022      	beq.n	8008ea8 <HAL_TIM_Base_Start_IT+0x80>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e6a:	d01d      	beq.n	8008ea8 <HAL_TIM_Base_Start_IT+0x80>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a1f      	ldr	r2, [pc, #124]	; (8008ef0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d018      	beq.n	8008ea8 <HAL_TIM_Base_Start_IT+0x80>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a1e      	ldr	r2, [pc, #120]	; (8008ef4 <HAL_TIM_Base_Start_IT+0xcc>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d013      	beq.n	8008ea8 <HAL_TIM_Base_Start_IT+0x80>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a1c      	ldr	r2, [pc, #112]	; (8008ef8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d00e      	beq.n	8008ea8 <HAL_TIM_Base_Start_IT+0x80>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a1b      	ldr	r2, [pc, #108]	; (8008efc <HAL_TIM_Base_Start_IT+0xd4>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d009      	beq.n	8008ea8 <HAL_TIM_Base_Start_IT+0x80>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a19      	ldr	r2, [pc, #100]	; (8008f00 <HAL_TIM_Base_Start_IT+0xd8>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d004      	beq.n	8008ea8 <HAL_TIM_Base_Start_IT+0x80>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a18      	ldr	r2, [pc, #96]	; (8008f04 <HAL_TIM_Base_Start_IT+0xdc>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d111      	bne.n	8008ecc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	f003 0307 	and.w	r3, r3, #7
 8008eb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2b06      	cmp	r3, #6
 8008eb8:	d010      	beq.n	8008edc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f042 0201 	orr.w	r2, r2, #1
 8008ec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eca:	e007      	b.n	8008edc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f042 0201 	orr.w	r2, r2, #1
 8008eda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	40010000 	.word	0x40010000
 8008ef0:	40000400 	.word	0x40000400
 8008ef4:	40000800 	.word	0x40000800
 8008ef8:	40000c00 	.word	0x40000c00
 8008efc:	40010400 	.word	0x40010400
 8008f00:	40014000 	.word	0x40014000
 8008f04:	40001800 	.word	0x40001800

08008f08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d101      	bne.n	8008f1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e041      	b.n	8008f9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d106      	bne.n	8008f34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f839 	bl	8008fa6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2202      	movs	r2, #2
 8008f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	3304      	adds	r3, #4
 8008f44:	4619      	mov	r1, r3
 8008f46:	4610      	mov	r0, r2
 8008f48:	f000 fc08 	bl	800975c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b083      	sub	sp, #12
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008fae:	bf00      	nop
 8008fb0:	370c      	adds	r7, #12
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
	...

08008fbc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d109      	bne.n	8008fe4 <HAL_TIM_PWM_Start_IT+0x28>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	bf14      	ite	ne
 8008fdc:	2301      	movne	r3, #1
 8008fde:	2300      	moveq	r3, #0
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	e022      	b.n	800902a <HAL_TIM_PWM_Start_IT+0x6e>
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	2b04      	cmp	r3, #4
 8008fe8:	d109      	bne.n	8008ffe <HAL_TIM_PWM_Start_IT+0x42>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	bf14      	ite	ne
 8008ff6:	2301      	movne	r3, #1
 8008ff8:	2300      	moveq	r3, #0
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	e015      	b.n	800902a <HAL_TIM_PWM_Start_IT+0x6e>
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b08      	cmp	r3, #8
 8009002:	d109      	bne.n	8009018 <HAL_TIM_PWM_Start_IT+0x5c>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b01      	cmp	r3, #1
 800900e:	bf14      	ite	ne
 8009010:	2301      	movne	r3, #1
 8009012:	2300      	moveq	r3, #0
 8009014:	b2db      	uxtb	r3, r3
 8009016:	e008      	b.n	800902a <HAL_TIM_PWM_Start_IT+0x6e>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b01      	cmp	r3, #1
 8009022:	bf14      	ite	ne
 8009024:	2301      	movne	r3, #1
 8009026:	2300      	moveq	r3, #0
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e0c7      	b.n	80091c2 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d104      	bne.n	8009042 <HAL_TIM_PWM_Start_IT+0x86>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2202      	movs	r2, #2
 800903c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009040:	e013      	b.n	800906a <HAL_TIM_PWM_Start_IT+0xae>
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	2b04      	cmp	r3, #4
 8009046:	d104      	bne.n	8009052 <HAL_TIM_PWM_Start_IT+0x96>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2202      	movs	r2, #2
 800904c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009050:	e00b      	b.n	800906a <HAL_TIM_PWM_Start_IT+0xae>
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	2b08      	cmp	r3, #8
 8009056:	d104      	bne.n	8009062 <HAL_TIM_PWM_Start_IT+0xa6>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2202      	movs	r2, #2
 800905c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009060:	e003      	b.n	800906a <HAL_TIM_PWM_Start_IT+0xae>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2202      	movs	r2, #2
 8009066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	2b0c      	cmp	r3, #12
 800906e:	d841      	bhi.n	80090f4 <HAL_TIM_PWM_Start_IT+0x138>
 8009070:	a201      	add	r2, pc, #4	; (adr r2, 8009078 <HAL_TIM_PWM_Start_IT+0xbc>)
 8009072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009076:	bf00      	nop
 8009078:	080090ad 	.word	0x080090ad
 800907c:	080090f5 	.word	0x080090f5
 8009080:	080090f5 	.word	0x080090f5
 8009084:	080090f5 	.word	0x080090f5
 8009088:	080090bf 	.word	0x080090bf
 800908c:	080090f5 	.word	0x080090f5
 8009090:	080090f5 	.word	0x080090f5
 8009094:	080090f5 	.word	0x080090f5
 8009098:	080090d1 	.word	0x080090d1
 800909c:	080090f5 	.word	0x080090f5
 80090a0:	080090f5 	.word	0x080090f5
 80090a4:	080090f5 	.word	0x080090f5
 80090a8:	080090e3 	.word	0x080090e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68da      	ldr	r2, [r3, #12]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f042 0202 	orr.w	r2, r2, #2
 80090ba:	60da      	str	r2, [r3, #12]
      break;
 80090bc:	e01d      	b.n	80090fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68da      	ldr	r2, [r3, #12]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f042 0204 	orr.w	r2, r2, #4
 80090cc:	60da      	str	r2, [r3, #12]
      break;
 80090ce:	e014      	b.n	80090fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68da      	ldr	r2, [r3, #12]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f042 0208 	orr.w	r2, r2, #8
 80090de:	60da      	str	r2, [r3, #12]
      break;
 80090e0:	e00b      	b.n	80090fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68da      	ldr	r2, [r3, #12]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f042 0210 	orr.w	r2, r2, #16
 80090f0:	60da      	str	r2, [r3, #12]
      break;
 80090f2:	e002      	b.n	80090fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	73fb      	strb	r3, [r7, #15]
      break;
 80090f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d15f      	bne.n	80091c0 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2201      	movs	r2, #1
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	4618      	mov	r0, r3
 800910a:	f000 fe11 	bl	8009d30 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a2e      	ldr	r2, [pc, #184]	; (80091cc <HAL_TIM_PWM_Start_IT+0x210>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d004      	beq.n	8009122 <HAL_TIM_PWM_Start_IT+0x166>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a2c      	ldr	r2, [pc, #176]	; (80091d0 <HAL_TIM_PWM_Start_IT+0x214>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d101      	bne.n	8009126 <HAL_TIM_PWM_Start_IT+0x16a>
 8009122:	2301      	movs	r3, #1
 8009124:	e000      	b.n	8009128 <HAL_TIM_PWM_Start_IT+0x16c>
 8009126:	2300      	movs	r3, #0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d007      	beq.n	800913c <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800913a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a22      	ldr	r2, [pc, #136]	; (80091cc <HAL_TIM_PWM_Start_IT+0x210>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d022      	beq.n	800918c <HAL_TIM_PWM_Start_IT+0x1d0>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800914e:	d01d      	beq.n	800918c <HAL_TIM_PWM_Start_IT+0x1d0>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a1f      	ldr	r2, [pc, #124]	; (80091d4 <HAL_TIM_PWM_Start_IT+0x218>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d018      	beq.n	800918c <HAL_TIM_PWM_Start_IT+0x1d0>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a1e      	ldr	r2, [pc, #120]	; (80091d8 <HAL_TIM_PWM_Start_IT+0x21c>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d013      	beq.n	800918c <HAL_TIM_PWM_Start_IT+0x1d0>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a1c      	ldr	r2, [pc, #112]	; (80091dc <HAL_TIM_PWM_Start_IT+0x220>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d00e      	beq.n	800918c <HAL_TIM_PWM_Start_IT+0x1d0>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a17      	ldr	r2, [pc, #92]	; (80091d0 <HAL_TIM_PWM_Start_IT+0x214>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d009      	beq.n	800918c <HAL_TIM_PWM_Start_IT+0x1d0>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a18      	ldr	r2, [pc, #96]	; (80091e0 <HAL_TIM_PWM_Start_IT+0x224>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d004      	beq.n	800918c <HAL_TIM_PWM_Start_IT+0x1d0>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a17      	ldr	r2, [pc, #92]	; (80091e4 <HAL_TIM_PWM_Start_IT+0x228>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d111      	bne.n	80091b0 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	f003 0307 	and.w	r3, r3, #7
 8009196:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2b06      	cmp	r3, #6
 800919c:	d010      	beq.n	80091c0 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f042 0201 	orr.w	r2, r2, #1
 80091ac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091ae:	e007      	b.n	80091c0 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f042 0201 	orr.w	r2, r2, #1
 80091be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	40010000 	.word	0x40010000
 80091d0:	40010400 	.word	0x40010400
 80091d4:	40000400 	.word	0x40000400
 80091d8:	40000800 	.word	0x40000800
 80091dc:	40000c00 	.word	0x40000c00
 80091e0:	40014000 	.word	0x40014000
 80091e4:	40001800 	.word	0x40001800

080091e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	f003 0302 	and.w	r3, r3, #2
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	d122      	bne.n	8009244 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	f003 0302 	and.w	r3, r3, #2
 8009208:	2b02      	cmp	r3, #2
 800920a:	d11b      	bne.n	8009244 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f06f 0202 	mvn.w	r2, #2
 8009214:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2201      	movs	r2, #1
 800921a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	f003 0303 	and.w	r3, r3, #3
 8009226:	2b00      	cmp	r3, #0
 8009228:	d003      	beq.n	8009232 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fa77 	bl	800971e <HAL_TIM_IC_CaptureCallback>
 8009230:	e005      	b.n	800923e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fa69 	bl	800970a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fa7a 	bl	8009732 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	f003 0304 	and.w	r3, r3, #4
 800924e:	2b04      	cmp	r3, #4
 8009250:	d122      	bne.n	8009298 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	f003 0304 	and.w	r3, r3, #4
 800925c:	2b04      	cmp	r3, #4
 800925e:	d11b      	bne.n	8009298 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f06f 0204 	mvn.w	r2, #4
 8009268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2202      	movs	r2, #2
 800926e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	699b      	ldr	r3, [r3, #24]
 8009276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800927a:	2b00      	cmp	r3, #0
 800927c:	d003      	beq.n	8009286 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fa4d 	bl	800971e <HAL_TIM_IC_CaptureCallback>
 8009284:	e005      	b.n	8009292 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fa3f 	bl	800970a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fa50 	bl	8009732 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	f003 0308 	and.w	r3, r3, #8
 80092a2:	2b08      	cmp	r3, #8
 80092a4:	d122      	bne.n	80092ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	f003 0308 	and.w	r3, r3, #8
 80092b0:	2b08      	cmp	r3, #8
 80092b2:	d11b      	bne.n	80092ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f06f 0208 	mvn.w	r2, #8
 80092bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2204      	movs	r2, #4
 80092c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	f003 0303 	and.w	r3, r3, #3
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d003      	beq.n	80092da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 fa23 	bl	800971e <HAL_TIM_IC_CaptureCallback>
 80092d8:	e005      	b.n	80092e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fa15 	bl	800970a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 fa26 	bl	8009732 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	f003 0310 	and.w	r3, r3, #16
 80092f6:	2b10      	cmp	r3, #16
 80092f8:	d122      	bne.n	8009340 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	f003 0310 	and.w	r3, r3, #16
 8009304:	2b10      	cmp	r3, #16
 8009306:	d11b      	bne.n	8009340 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f06f 0210 	mvn.w	r2, #16
 8009310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2208      	movs	r2, #8
 8009316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f9f9 	bl	800971e <HAL_TIM_IC_CaptureCallback>
 800932c:	e005      	b.n	800933a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f9eb 	bl	800970a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f9fc 	bl	8009732 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	2b01      	cmp	r3, #1
 800934c:	d10e      	bne.n	800936c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	f003 0301 	and.w	r3, r3, #1
 8009358:	2b01      	cmp	r3, #1
 800935a:	d107      	bne.n	800936c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f06f 0201 	mvn.w	r2, #1
 8009364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7f9 fb8c 	bl	8002a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009376:	2b80      	cmp	r3, #128	; 0x80
 8009378:	d10e      	bne.n	8009398 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009384:	2b80      	cmp	r3, #128	; 0x80
 8009386:	d107      	bne.n	8009398 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fd78 	bl	8009e88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093a2:	2b40      	cmp	r3, #64	; 0x40
 80093a4:	d10e      	bne.n	80093c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b0:	2b40      	cmp	r3, #64	; 0x40
 80093b2:	d107      	bne.n	80093c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80093bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f9c1 	bl	8009746 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	f003 0320 	and.w	r3, r3, #32
 80093ce:	2b20      	cmp	r3, #32
 80093d0:	d10e      	bne.n	80093f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	f003 0320 	and.w	r3, r3, #32
 80093dc:	2b20      	cmp	r3, #32
 80093de:	d107      	bne.n	80093f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f06f 0220 	mvn.w	r2, #32
 80093e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fd42 	bl	8009e74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093f0:	bf00      	nop
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b086      	sub	sp, #24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800940e:	2b01      	cmp	r3, #1
 8009410:	d101      	bne.n	8009416 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009412:	2302      	movs	r3, #2
 8009414:	e0ae      	b.n	8009574 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2201      	movs	r2, #1
 800941a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2b0c      	cmp	r3, #12
 8009422:	f200 809f 	bhi.w	8009564 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009426:	a201      	add	r2, pc, #4	; (adr r2, 800942c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942c:	08009461 	.word	0x08009461
 8009430:	08009565 	.word	0x08009565
 8009434:	08009565 	.word	0x08009565
 8009438:	08009565 	.word	0x08009565
 800943c:	080094a1 	.word	0x080094a1
 8009440:	08009565 	.word	0x08009565
 8009444:	08009565 	.word	0x08009565
 8009448:	08009565 	.word	0x08009565
 800944c:	080094e3 	.word	0x080094e3
 8009450:	08009565 	.word	0x08009565
 8009454:	08009565 	.word	0x08009565
 8009458:	08009565 	.word	0x08009565
 800945c:	08009523 	.word	0x08009523
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68b9      	ldr	r1, [r7, #8]
 8009466:	4618      	mov	r0, r3
 8009468:	f000 fa18 	bl	800989c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	699a      	ldr	r2, [r3, #24]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f042 0208 	orr.w	r2, r2, #8
 800947a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	699a      	ldr	r2, [r3, #24]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f022 0204 	bic.w	r2, r2, #4
 800948a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6999      	ldr	r1, [r3, #24]
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	691a      	ldr	r2, [r3, #16]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	430a      	orrs	r2, r1
 800949c:	619a      	str	r2, [r3, #24]
      break;
 800949e:	e064      	b.n	800956a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68b9      	ldr	r1, [r7, #8]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 fa68 	bl	800997c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	699a      	ldr	r2, [r3, #24]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	699a      	ldr	r2, [r3, #24]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6999      	ldr	r1, [r3, #24]
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	021a      	lsls	r2, r3, #8
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	430a      	orrs	r2, r1
 80094de:	619a      	str	r2, [r3, #24]
      break;
 80094e0:	e043      	b.n	800956a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68b9      	ldr	r1, [r7, #8]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f000 fabd 	bl	8009a68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	69da      	ldr	r2, [r3, #28]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f042 0208 	orr.w	r2, r2, #8
 80094fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	69da      	ldr	r2, [r3, #28]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f022 0204 	bic.w	r2, r2, #4
 800950c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	69d9      	ldr	r1, [r3, #28]
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	691a      	ldr	r2, [r3, #16]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	430a      	orrs	r2, r1
 800951e:	61da      	str	r2, [r3, #28]
      break;
 8009520:	e023      	b.n	800956a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68b9      	ldr	r1, [r7, #8]
 8009528:	4618      	mov	r0, r3
 800952a:	f000 fb11 	bl	8009b50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	69da      	ldr	r2, [r3, #28]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800953c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	69da      	ldr	r2, [r3, #28]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800954c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	69d9      	ldr	r1, [r3, #28]
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	021a      	lsls	r2, r3, #8
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	430a      	orrs	r2, r1
 8009560:	61da      	str	r2, [r3, #28]
      break;
 8009562:	e002      	b.n	800956a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	75fb      	strb	r3, [r7, #23]
      break;
 8009568:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009572:	7dfb      	ldrb	r3, [r7, #23]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3718      	adds	r7, #24
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009586:	2300      	movs	r3, #0
 8009588:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009590:	2b01      	cmp	r3, #1
 8009592:	d101      	bne.n	8009598 <HAL_TIM_ConfigClockSource+0x1c>
 8009594:	2302      	movs	r3, #2
 8009596:	e0b4      	b.n	8009702 <HAL_TIM_ConfigClockSource+0x186>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2202      	movs	r2, #2
 80095a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80095b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095d0:	d03e      	beq.n	8009650 <HAL_TIM_ConfigClockSource+0xd4>
 80095d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095d6:	f200 8087 	bhi.w	80096e8 <HAL_TIM_ConfigClockSource+0x16c>
 80095da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095de:	f000 8086 	beq.w	80096ee <HAL_TIM_ConfigClockSource+0x172>
 80095e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095e6:	d87f      	bhi.n	80096e8 <HAL_TIM_ConfigClockSource+0x16c>
 80095e8:	2b70      	cmp	r3, #112	; 0x70
 80095ea:	d01a      	beq.n	8009622 <HAL_TIM_ConfigClockSource+0xa6>
 80095ec:	2b70      	cmp	r3, #112	; 0x70
 80095ee:	d87b      	bhi.n	80096e8 <HAL_TIM_ConfigClockSource+0x16c>
 80095f0:	2b60      	cmp	r3, #96	; 0x60
 80095f2:	d050      	beq.n	8009696 <HAL_TIM_ConfigClockSource+0x11a>
 80095f4:	2b60      	cmp	r3, #96	; 0x60
 80095f6:	d877      	bhi.n	80096e8 <HAL_TIM_ConfigClockSource+0x16c>
 80095f8:	2b50      	cmp	r3, #80	; 0x50
 80095fa:	d03c      	beq.n	8009676 <HAL_TIM_ConfigClockSource+0xfa>
 80095fc:	2b50      	cmp	r3, #80	; 0x50
 80095fe:	d873      	bhi.n	80096e8 <HAL_TIM_ConfigClockSource+0x16c>
 8009600:	2b40      	cmp	r3, #64	; 0x40
 8009602:	d058      	beq.n	80096b6 <HAL_TIM_ConfigClockSource+0x13a>
 8009604:	2b40      	cmp	r3, #64	; 0x40
 8009606:	d86f      	bhi.n	80096e8 <HAL_TIM_ConfigClockSource+0x16c>
 8009608:	2b30      	cmp	r3, #48	; 0x30
 800960a:	d064      	beq.n	80096d6 <HAL_TIM_ConfigClockSource+0x15a>
 800960c:	2b30      	cmp	r3, #48	; 0x30
 800960e:	d86b      	bhi.n	80096e8 <HAL_TIM_ConfigClockSource+0x16c>
 8009610:	2b20      	cmp	r3, #32
 8009612:	d060      	beq.n	80096d6 <HAL_TIM_ConfigClockSource+0x15a>
 8009614:	2b20      	cmp	r3, #32
 8009616:	d867      	bhi.n	80096e8 <HAL_TIM_ConfigClockSource+0x16c>
 8009618:	2b00      	cmp	r3, #0
 800961a:	d05c      	beq.n	80096d6 <HAL_TIM_ConfigClockSource+0x15a>
 800961c:	2b10      	cmp	r3, #16
 800961e:	d05a      	beq.n	80096d6 <HAL_TIM_ConfigClockSource+0x15a>
 8009620:	e062      	b.n	80096e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6818      	ldr	r0, [r3, #0]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	6899      	ldr	r1, [r3, #8]
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	685a      	ldr	r2, [r3, #4]
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	f000 fb5d 	bl	8009cf0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009644:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	609a      	str	r2, [r3, #8]
      break;
 800964e:	e04f      	b.n	80096f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6818      	ldr	r0, [r3, #0]
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	6899      	ldr	r1, [r3, #8]
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	f000 fb46 	bl	8009cf0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	689a      	ldr	r2, [r3, #8]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009672:	609a      	str	r2, [r3, #8]
      break;
 8009674:	e03c      	b.n	80096f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6818      	ldr	r0, [r3, #0]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	6859      	ldr	r1, [r3, #4]
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	461a      	mov	r2, r3
 8009684:	f000 faba 	bl	8009bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2150      	movs	r1, #80	; 0x50
 800968e:	4618      	mov	r0, r3
 8009690:	f000 fb13 	bl	8009cba <TIM_ITRx_SetConfig>
      break;
 8009694:	e02c      	b.n	80096f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6818      	ldr	r0, [r3, #0]
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	6859      	ldr	r1, [r3, #4]
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	461a      	mov	r2, r3
 80096a4:	f000 fad9 	bl	8009c5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2160      	movs	r1, #96	; 0x60
 80096ae:	4618      	mov	r0, r3
 80096b0:	f000 fb03 	bl	8009cba <TIM_ITRx_SetConfig>
      break;
 80096b4:	e01c      	b.n	80096f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6818      	ldr	r0, [r3, #0]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	6859      	ldr	r1, [r3, #4]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	461a      	mov	r2, r3
 80096c4:	f000 fa9a 	bl	8009bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2140      	movs	r1, #64	; 0x40
 80096ce:	4618      	mov	r0, r3
 80096d0:	f000 faf3 	bl	8009cba <TIM_ITRx_SetConfig>
      break;
 80096d4:	e00c      	b.n	80096f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4619      	mov	r1, r3
 80096e0:	4610      	mov	r0, r2
 80096e2:	f000 faea 	bl	8009cba <TIM_ITRx_SetConfig>
      break;
 80096e6:	e003      	b.n	80096f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	73fb      	strb	r3, [r7, #15]
      break;
 80096ec:	e000      	b.n	80096f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80096ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009700:	7bfb      	ldrb	r3, [r7, #15]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800970a:	b480      	push	{r7}
 800970c:	b083      	sub	sp, #12
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009712:	bf00      	nop
 8009714:	370c      	adds	r7, #12
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800971e:	b480      	push	{r7}
 8009720:	b083      	sub	sp, #12
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009726:	bf00      	nop
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009732:	b480      	push	{r7}
 8009734:	b083      	sub	sp, #12
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800973a:	bf00      	nop
 800973c:	370c      	adds	r7, #12
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr

08009746 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009746:	b480      	push	{r7}
 8009748:	b083      	sub	sp, #12
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800974e:	bf00      	nop
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
	...

0800975c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a40      	ldr	r2, [pc, #256]	; (8009870 <TIM_Base_SetConfig+0x114>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d013      	beq.n	800979c <TIM_Base_SetConfig+0x40>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800977a:	d00f      	beq.n	800979c <TIM_Base_SetConfig+0x40>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a3d      	ldr	r2, [pc, #244]	; (8009874 <TIM_Base_SetConfig+0x118>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d00b      	beq.n	800979c <TIM_Base_SetConfig+0x40>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a3c      	ldr	r2, [pc, #240]	; (8009878 <TIM_Base_SetConfig+0x11c>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d007      	beq.n	800979c <TIM_Base_SetConfig+0x40>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a3b      	ldr	r2, [pc, #236]	; (800987c <TIM_Base_SetConfig+0x120>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d003      	beq.n	800979c <TIM_Base_SetConfig+0x40>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a3a      	ldr	r2, [pc, #232]	; (8009880 <TIM_Base_SetConfig+0x124>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d108      	bne.n	80097ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4a2f      	ldr	r2, [pc, #188]	; (8009870 <TIM_Base_SetConfig+0x114>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d02b      	beq.n	800980e <TIM_Base_SetConfig+0xb2>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097bc:	d027      	beq.n	800980e <TIM_Base_SetConfig+0xb2>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4a2c      	ldr	r2, [pc, #176]	; (8009874 <TIM_Base_SetConfig+0x118>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d023      	beq.n	800980e <TIM_Base_SetConfig+0xb2>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4a2b      	ldr	r2, [pc, #172]	; (8009878 <TIM_Base_SetConfig+0x11c>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d01f      	beq.n	800980e <TIM_Base_SetConfig+0xb2>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	4a2a      	ldr	r2, [pc, #168]	; (800987c <TIM_Base_SetConfig+0x120>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d01b      	beq.n	800980e <TIM_Base_SetConfig+0xb2>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	4a29      	ldr	r2, [pc, #164]	; (8009880 <TIM_Base_SetConfig+0x124>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d017      	beq.n	800980e <TIM_Base_SetConfig+0xb2>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4a28      	ldr	r2, [pc, #160]	; (8009884 <TIM_Base_SetConfig+0x128>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d013      	beq.n	800980e <TIM_Base_SetConfig+0xb2>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4a27      	ldr	r2, [pc, #156]	; (8009888 <TIM_Base_SetConfig+0x12c>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d00f      	beq.n	800980e <TIM_Base_SetConfig+0xb2>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4a26      	ldr	r2, [pc, #152]	; (800988c <TIM_Base_SetConfig+0x130>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d00b      	beq.n	800980e <TIM_Base_SetConfig+0xb2>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4a25      	ldr	r2, [pc, #148]	; (8009890 <TIM_Base_SetConfig+0x134>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d007      	beq.n	800980e <TIM_Base_SetConfig+0xb2>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4a24      	ldr	r2, [pc, #144]	; (8009894 <TIM_Base_SetConfig+0x138>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d003      	beq.n	800980e <TIM_Base_SetConfig+0xb2>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a23      	ldr	r2, [pc, #140]	; (8009898 <TIM_Base_SetConfig+0x13c>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d108      	bne.n	8009820 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	4313      	orrs	r3, r2
 800981e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	695b      	ldr	r3, [r3, #20]
 800982a:	4313      	orrs	r3, r2
 800982c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	689a      	ldr	r2, [r3, #8]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a0a      	ldr	r2, [pc, #40]	; (8009870 <TIM_Base_SetConfig+0x114>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d003      	beq.n	8009854 <TIM_Base_SetConfig+0xf8>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a0c      	ldr	r2, [pc, #48]	; (8009880 <TIM_Base_SetConfig+0x124>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d103      	bne.n	800985c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	691a      	ldr	r2, [r3, #16]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	615a      	str	r2, [r3, #20]
}
 8009862:	bf00      	nop
 8009864:	3714      	adds	r7, #20
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	40010000 	.word	0x40010000
 8009874:	40000400 	.word	0x40000400
 8009878:	40000800 	.word	0x40000800
 800987c:	40000c00 	.word	0x40000c00
 8009880:	40010400 	.word	0x40010400
 8009884:	40014000 	.word	0x40014000
 8009888:	40014400 	.word	0x40014400
 800988c:	40014800 	.word	0x40014800
 8009890:	40001800 	.word	0x40001800
 8009894:	40001c00 	.word	0x40001c00
 8009898:	40002000 	.word	0x40002000

0800989c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800989c:	b480      	push	{r7}
 800989e:	b087      	sub	sp, #28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a1b      	ldr	r3, [r3, #32]
 80098aa:	f023 0201 	bic.w	r2, r3, #1
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a1b      	ldr	r3, [r3, #32]
 80098b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f023 0303 	bic.w	r3, r3, #3
 80098d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	4313      	orrs	r3, r2
 80098dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	f023 0302 	bic.w	r3, r3, #2
 80098e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	697a      	ldr	r2, [r7, #20]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a20      	ldr	r2, [pc, #128]	; (8009974 <TIM_OC1_SetConfig+0xd8>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d003      	beq.n	8009900 <TIM_OC1_SetConfig+0x64>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a1f      	ldr	r2, [pc, #124]	; (8009978 <TIM_OC1_SetConfig+0xdc>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d10c      	bne.n	800991a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	f023 0308 	bic.w	r3, r3, #8
 8009906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	697a      	ldr	r2, [r7, #20]
 800990e:	4313      	orrs	r3, r2
 8009910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	f023 0304 	bic.w	r3, r3, #4
 8009918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a15      	ldr	r2, [pc, #84]	; (8009974 <TIM_OC1_SetConfig+0xd8>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d003      	beq.n	800992a <TIM_OC1_SetConfig+0x8e>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a14      	ldr	r2, [pc, #80]	; (8009978 <TIM_OC1_SetConfig+0xdc>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d111      	bne.n	800994e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	693a      	ldr	r2, [r7, #16]
 8009940:	4313      	orrs	r3, r2
 8009942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	693a      	ldr	r2, [r7, #16]
 800994a:	4313      	orrs	r3, r2
 800994c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	693a      	ldr	r2, [r7, #16]
 8009952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	68fa      	ldr	r2, [r7, #12]
 8009958:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	685a      	ldr	r2, [r3, #4]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	621a      	str	r2, [r3, #32]
}
 8009968:	bf00      	nop
 800996a:	371c      	adds	r7, #28
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr
 8009974:	40010000 	.word	0x40010000
 8009978:	40010400 	.word	0x40010400

0800997c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800997c:	b480      	push	{r7}
 800997e:	b087      	sub	sp, #28
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6a1b      	ldr	r3, [r3, #32]
 800998a:	f023 0210 	bic.w	r2, r3, #16
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a1b      	ldr	r3, [r3, #32]
 8009996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	021b      	lsls	r3, r3, #8
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	4313      	orrs	r3, r2
 80099be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	f023 0320 	bic.w	r3, r3, #32
 80099c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	011b      	lsls	r3, r3, #4
 80099ce:	697a      	ldr	r2, [r7, #20]
 80099d0:	4313      	orrs	r3, r2
 80099d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	4a22      	ldr	r2, [pc, #136]	; (8009a60 <TIM_OC2_SetConfig+0xe4>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d003      	beq.n	80099e4 <TIM_OC2_SetConfig+0x68>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4a21      	ldr	r2, [pc, #132]	; (8009a64 <TIM_OC2_SetConfig+0xe8>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d10d      	bne.n	8009a00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	011b      	lsls	r3, r3, #4
 80099f2:	697a      	ldr	r2, [r7, #20]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a17      	ldr	r2, [pc, #92]	; (8009a60 <TIM_OC2_SetConfig+0xe4>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d003      	beq.n	8009a10 <TIM_OC2_SetConfig+0x94>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a16      	ldr	r2, [pc, #88]	; (8009a64 <TIM_OC2_SetConfig+0xe8>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d113      	bne.n	8009a38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	695b      	ldr	r3, [r3, #20]
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	693a      	ldr	r2, [r7, #16]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	699b      	ldr	r3, [r3, #24]
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	693a      	ldr	r2, [r7, #16]
 8009a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	685a      	ldr	r2, [r3, #4]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	621a      	str	r2, [r3, #32]
}
 8009a52:	bf00      	nop
 8009a54:	371c      	adds	r7, #28
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	40010000 	.word	0x40010000
 8009a64:	40010400 	.word	0x40010400

08009a68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a1b      	ldr	r3, [r3, #32]
 8009a76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	69db      	ldr	r3, [r3, #28]
 8009a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f023 0303 	bic.w	r3, r3, #3
 8009a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	021b      	lsls	r3, r3, #8
 8009ab8:	697a      	ldr	r2, [r7, #20]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4a21      	ldr	r2, [pc, #132]	; (8009b48 <TIM_OC3_SetConfig+0xe0>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d003      	beq.n	8009ace <TIM_OC3_SetConfig+0x66>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a20      	ldr	r2, [pc, #128]	; (8009b4c <TIM_OC3_SetConfig+0xe4>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d10d      	bne.n	8009aea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	021b      	lsls	r3, r3, #8
 8009adc:	697a      	ldr	r2, [r7, #20]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a16      	ldr	r2, [pc, #88]	; (8009b48 <TIM_OC3_SetConfig+0xe0>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d003      	beq.n	8009afa <TIM_OC3_SetConfig+0x92>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a15      	ldr	r2, [pc, #84]	; (8009b4c <TIM_OC3_SetConfig+0xe4>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d113      	bne.n	8009b22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	011b      	lsls	r3, r3, #4
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	699b      	ldr	r3, [r3, #24]
 8009b1a:	011b      	lsls	r3, r3, #4
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	693a      	ldr	r2, [r7, #16]
 8009b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	685a      	ldr	r2, [r3, #4]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	697a      	ldr	r2, [r7, #20]
 8009b3a:	621a      	str	r2, [r3, #32]
}
 8009b3c:	bf00      	nop
 8009b3e:	371c      	adds	r7, #28
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr
 8009b48:	40010000 	.word	0x40010000
 8009b4c:	40010400 	.word	0x40010400

08009b50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b087      	sub	sp, #28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	69db      	ldr	r3, [r3, #28]
 8009b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	021b      	lsls	r3, r3, #8
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	031b      	lsls	r3, r3, #12
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a12      	ldr	r2, [pc, #72]	; (8009bf4 <TIM_OC4_SetConfig+0xa4>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d003      	beq.n	8009bb8 <TIM_OC4_SetConfig+0x68>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a11      	ldr	r2, [pc, #68]	; (8009bf8 <TIM_OC4_SetConfig+0xa8>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d109      	bne.n	8009bcc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	695b      	ldr	r3, [r3, #20]
 8009bc4:	019b      	lsls	r3, r3, #6
 8009bc6:	697a      	ldr	r2, [r7, #20]
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	697a      	ldr	r2, [r7, #20]
 8009bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	693a      	ldr	r2, [r7, #16]
 8009be4:	621a      	str	r2, [r3, #32]
}
 8009be6:	bf00      	nop
 8009be8:	371c      	adds	r7, #28
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	40010000 	.word	0x40010000
 8009bf8:	40010400 	.word	0x40010400

08009bfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b087      	sub	sp, #28
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6a1b      	ldr	r3, [r3, #32]
 8009c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6a1b      	ldr	r3, [r3, #32]
 8009c12:	f023 0201 	bic.w	r2, r3, #1
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	011b      	lsls	r3, r3, #4
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	f023 030a 	bic.w	r3, r3, #10
 8009c38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	693a      	ldr	r2, [r7, #16]
 8009c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	697a      	ldr	r2, [r7, #20]
 8009c4c:	621a      	str	r2, [r3, #32]
}
 8009c4e:	bf00      	nop
 8009c50:	371c      	adds	r7, #28
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	b087      	sub	sp, #28
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6a1b      	ldr	r3, [r3, #32]
 8009c6a:	f023 0210 	bic.w	r2, r3, #16
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	699b      	ldr	r3, [r3, #24]
 8009c76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6a1b      	ldr	r3, [r3, #32]
 8009c7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	031b      	lsls	r3, r3, #12
 8009c8a:	697a      	ldr	r2, [r7, #20]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	011b      	lsls	r3, r3, #4
 8009c9c:	693a      	ldr	r2, [r7, #16]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	697a      	ldr	r2, [r7, #20]
 8009ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	693a      	ldr	r2, [r7, #16]
 8009cac:	621a      	str	r2, [r3, #32]
}
 8009cae:	bf00      	nop
 8009cb0:	371c      	adds	r7, #28
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b085      	sub	sp, #20
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009cd2:	683a      	ldr	r2, [r7, #0]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	f043 0307 	orr.w	r3, r3, #7
 8009cdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	609a      	str	r2, [r3, #8]
}
 8009ce4:	bf00      	nop
 8009ce6:	3714      	adds	r7, #20
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b087      	sub	sp, #28
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
 8009cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	021a      	lsls	r2, r3, #8
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	431a      	orrs	r2, r3
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	697a      	ldr	r2, [r7, #20]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	697a      	ldr	r2, [r7, #20]
 8009d22:	609a      	str	r2, [r3, #8]
}
 8009d24:	bf00      	nop
 8009d26:	371c      	adds	r7, #28
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b087      	sub	sp, #28
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	f003 031f 	and.w	r3, r3, #31
 8009d42:	2201      	movs	r2, #1
 8009d44:	fa02 f303 	lsl.w	r3, r2, r3
 8009d48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6a1a      	ldr	r2, [r3, #32]
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	43db      	mvns	r3, r3
 8009d52:	401a      	ands	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6a1a      	ldr	r2, [r3, #32]
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	f003 031f 	and.w	r3, r3, #31
 8009d62:	6879      	ldr	r1, [r7, #4]
 8009d64:	fa01 f303 	lsl.w	r3, r1, r3
 8009d68:	431a      	orrs	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	621a      	str	r2, [r3, #32]
}
 8009d6e:	bf00      	nop
 8009d70:	371c      	adds	r7, #28
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr
	...

08009d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b085      	sub	sp, #20
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d101      	bne.n	8009d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d90:	2302      	movs	r3, #2
 8009d92:	e05a      	b.n	8009e4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2202      	movs	r2, #2
 8009da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a21      	ldr	r2, [pc, #132]	; (8009e58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d022      	beq.n	8009e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009de0:	d01d      	beq.n	8009e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a1d      	ldr	r2, [pc, #116]	; (8009e5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d018      	beq.n	8009e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a1b      	ldr	r2, [pc, #108]	; (8009e60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d013      	beq.n	8009e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a1a      	ldr	r2, [pc, #104]	; (8009e64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d00e      	beq.n	8009e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a18      	ldr	r2, [pc, #96]	; (8009e68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d009      	beq.n	8009e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a17      	ldr	r2, [pc, #92]	; (8009e6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d004      	beq.n	8009e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a15      	ldr	r2, [pc, #84]	; (8009e70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d10c      	bne.n	8009e38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	68ba      	ldr	r2, [r7, #8]
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3714      	adds	r7, #20
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr
 8009e56:	bf00      	nop
 8009e58:	40010000 	.word	0x40010000
 8009e5c:	40000400 	.word	0x40000400
 8009e60:	40000800 	.word	0x40000800
 8009e64:	40000c00 	.word	0x40000c00
 8009e68:	40010400 	.word	0x40010400
 8009e6c:	40014000 	.word	0x40014000
 8009e70:	40001800 	.word	0x40001800

08009e74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e7c:	bf00      	nop
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d101      	bne.n	8009eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e03f      	b.n	8009f2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d106      	bne.n	8009ec8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7f8 ff82 	bl	8002dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2224      	movs	r2, #36	; 0x24
 8009ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	68da      	ldr	r2, [r3, #12]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ede:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 fcdf 	bl	800a8a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	691a      	ldr	r2, [r3, #16]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ef4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	695a      	ldr	r2, [r3, #20]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68da      	ldr	r2, [r3, #12]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2220      	movs	r2, #32
 8009f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2220      	movs	r2, #32
 8009f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b084      	sub	sp, #16
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	60f8      	str	r0, [r7, #12]
 8009f3e:	60b9      	str	r1, [r7, #8]
 8009f40:	4613      	mov	r3, r2
 8009f42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	2b20      	cmp	r3, #32
 8009f4e:	d11d      	bne.n	8009f8c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d002      	beq.n	8009f5c <HAL_UART_Receive_IT+0x26>
 8009f56:	88fb      	ldrh	r3, [r7, #6]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d101      	bne.n	8009f60 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e016      	b.n	8009f8e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d101      	bne.n	8009f6e <HAL_UART_Receive_IT+0x38>
 8009f6a:	2302      	movs	r3, #2
 8009f6c:	e00f      	b.n	8009f8e <HAL_UART_Receive_IT+0x58>
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009f7c:	88fb      	ldrh	r3, [r7, #6]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	68b9      	ldr	r1, [r7, #8]
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f000 fab6 	bl	800a4f4 <UART_Start_Receive_IT>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	e000      	b.n	8009f8e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009f8c:	2302      	movs	r3, #2
  }
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
	...

08009f98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b0ba      	sub	sp, #232	; 0xe8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	695b      	ldr	r3, [r3, #20]
 8009fba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fce:	f003 030f 	and.w	r3, r3, #15
 8009fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009fd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10f      	bne.n	8009ffe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fe2:	f003 0320 	and.w	r3, r3, #32
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d009      	beq.n	8009ffe <HAL_UART_IRQHandler+0x66>
 8009fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fee:	f003 0320 	and.w	r3, r3, #32
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d003      	beq.n	8009ffe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fb99 	bl	800a72e <UART_Receive_IT>
      return;
 8009ffc:	e256      	b.n	800a4ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009ffe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a002:	2b00      	cmp	r3, #0
 800a004:	f000 80de 	beq.w	800a1c4 <HAL_UART_IRQHandler+0x22c>
 800a008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a00c:	f003 0301 	and.w	r3, r3, #1
 800a010:	2b00      	cmp	r3, #0
 800a012:	d106      	bne.n	800a022 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a018:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f000 80d1 	beq.w	800a1c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a026:	f003 0301 	and.w	r3, r3, #1
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00b      	beq.n	800a046 <HAL_UART_IRQHandler+0xae>
 800a02e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a036:	2b00      	cmp	r3, #0
 800a038:	d005      	beq.n	800a046 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03e:	f043 0201 	orr.w	r2, r3, #1
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a04a:	f003 0304 	and.w	r3, r3, #4
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00b      	beq.n	800a06a <HAL_UART_IRQHandler+0xd2>
 800a052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a056:	f003 0301 	and.w	r3, r3, #1
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d005      	beq.n	800a06a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a062:	f043 0202 	orr.w	r2, r3, #2
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a06a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a06e:	f003 0302 	and.w	r3, r3, #2
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00b      	beq.n	800a08e <HAL_UART_IRQHandler+0xf6>
 800a076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a07a:	f003 0301 	and.w	r3, r3, #1
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d005      	beq.n	800a08e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a086:	f043 0204 	orr.w	r2, r3, #4
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a08e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a092:	f003 0308 	and.w	r3, r3, #8
 800a096:	2b00      	cmp	r3, #0
 800a098:	d011      	beq.n	800a0be <HAL_UART_IRQHandler+0x126>
 800a09a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a09e:	f003 0320 	and.w	r3, r3, #32
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d105      	bne.n	800a0b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a0a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0aa:	f003 0301 	and.w	r3, r3, #1
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d005      	beq.n	800a0be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b6:	f043 0208 	orr.w	r2, r3, #8
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f000 81ed 	beq.w	800a4a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a0c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0cc:	f003 0320 	and.w	r3, r3, #32
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d008      	beq.n	800a0e6 <HAL_UART_IRQHandler+0x14e>
 800a0d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0d8:	f003 0320 	and.w	r3, r3, #32
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d002      	beq.n	800a0e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 fb24 	bl	800a72e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	695b      	ldr	r3, [r3, #20]
 800a0ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0f0:	2b40      	cmp	r3, #64	; 0x40
 800a0f2:	bf0c      	ite	eq
 800a0f4:	2301      	moveq	r3, #1
 800a0f6:	2300      	movne	r3, #0
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a102:	f003 0308 	and.w	r3, r3, #8
 800a106:	2b00      	cmp	r3, #0
 800a108:	d103      	bne.n	800a112 <HAL_UART_IRQHandler+0x17a>
 800a10a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d04f      	beq.n	800a1b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 fa2c 	bl	800a570 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	695b      	ldr	r3, [r3, #20]
 800a11e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a122:	2b40      	cmp	r3, #64	; 0x40
 800a124:	d141      	bne.n	800a1aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	3314      	adds	r3, #20
 800a12c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a130:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a134:	e853 3f00 	ldrex	r3, [r3]
 800a138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a13c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a144:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	3314      	adds	r3, #20
 800a14e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a152:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a156:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a15a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a15e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a162:	e841 2300 	strex	r3, r2, [r1]
 800a166:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a16a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d1d9      	bne.n	800a126 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a176:	2b00      	cmp	r3, #0
 800a178:	d013      	beq.n	800a1a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a17e:	4a7d      	ldr	r2, [pc, #500]	; (800a374 <HAL_UART_IRQHandler+0x3dc>)
 800a180:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a186:	4618      	mov	r0, r3
 800a188:	f7fa f8ba 	bl	8004300 <HAL_DMA_Abort_IT>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d016      	beq.n	800a1c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a19c:	4610      	mov	r0, r2
 800a19e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1a0:	e00e      	b.n	800a1c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 f990 	bl	800a4c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1a8:	e00a      	b.n	800a1c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 f98c 	bl	800a4c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1b0:	e006      	b.n	800a1c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 f988 	bl	800a4c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a1be:	e170      	b.n	800a4a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1c0:	bf00      	nop
    return;
 800a1c2:	e16e      	b.n	800a4a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	f040 814a 	bne.w	800a462 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a1ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1d2:	f003 0310 	and.w	r3, r3, #16
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f000 8143 	beq.w	800a462 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a1dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1e0:	f003 0310 	and.w	r3, r3, #16
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f000 813c 	beq.w	800a462 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	60bb      	str	r3, [r7, #8]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	60bb      	str	r3, [r7, #8]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	60bb      	str	r3, [r7, #8]
 800a1fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	695b      	ldr	r3, [r3, #20]
 800a206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a20a:	2b40      	cmp	r3, #64	; 0x40
 800a20c:	f040 80b4 	bne.w	800a378 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a21c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a220:	2b00      	cmp	r3, #0
 800a222:	f000 8140 	beq.w	800a4a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a22a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a22e:	429a      	cmp	r2, r3
 800a230:	f080 8139 	bcs.w	800a4a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a23a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a240:	69db      	ldr	r3, [r3, #28]
 800a242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a246:	f000 8088 	beq.w	800a35a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	330c      	adds	r3, #12
 800a250:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a254:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a258:	e853 3f00 	ldrex	r3, [r3]
 800a25c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a260:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a268:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	330c      	adds	r3, #12
 800a272:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a276:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a27a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a282:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a286:	e841 2300 	strex	r3, r2, [r1]
 800a28a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a28e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a292:	2b00      	cmp	r3, #0
 800a294:	d1d9      	bne.n	800a24a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	3314      	adds	r3, #20
 800a29c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2a0:	e853 3f00 	ldrex	r3, [r3]
 800a2a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a2a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a2a8:	f023 0301 	bic.w	r3, r3, #1
 800a2ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3314      	adds	r3, #20
 800a2b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a2ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a2be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a2c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a2c6:	e841 2300 	strex	r3, r2, [r1]
 800a2ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a2cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1e1      	bne.n	800a296 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	3314      	adds	r3, #20
 800a2d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2dc:	e853 3f00 	ldrex	r3, [r3]
 800a2e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a2e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	3314      	adds	r3, #20
 800a2f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a2f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a2f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a2fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a2fe:	e841 2300 	strex	r3, r2, [r1]
 800a302:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1e3      	bne.n	800a2d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2220      	movs	r2, #32
 800a30e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	330c      	adds	r3, #12
 800a31e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a322:	e853 3f00 	ldrex	r3, [r3]
 800a326:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a32a:	f023 0310 	bic.w	r3, r3, #16
 800a32e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	330c      	adds	r3, #12
 800a338:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a33c:	65ba      	str	r2, [r7, #88]	; 0x58
 800a33e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a340:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a342:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a344:	e841 2300 	strex	r3, r2, [r1]
 800a348:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a34a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1e3      	bne.n	800a318 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a354:	4618      	mov	r0, r3
 800a356:	f7f9 ff63 	bl	8004220 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a362:	b29b      	uxth	r3, r3
 800a364:	1ad3      	subs	r3, r2, r3
 800a366:	b29b      	uxth	r3, r3
 800a368:	4619      	mov	r1, r3
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 f8b6 	bl	800a4dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a370:	e099      	b.n	800a4a6 <HAL_UART_IRQHandler+0x50e>
 800a372:	bf00      	nop
 800a374:	0800a637 	.word	0x0800a637
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a380:	b29b      	uxth	r3, r3
 800a382:	1ad3      	subs	r3, r2, r3
 800a384:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f000 808b 	beq.w	800a4aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a394:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f000 8086 	beq.w	800a4aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	330c      	adds	r3, #12
 800a3a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a8:	e853 3f00 	ldrex	r3, [r3]
 800a3ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	330c      	adds	r3, #12
 800a3be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a3c2:	647a      	str	r2, [r7, #68]	; 0x44
 800a3c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a3c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3ca:	e841 2300 	strex	r3, r2, [r1]
 800a3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a3d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1e3      	bne.n	800a39e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	3314      	adds	r3, #20
 800a3dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e0:	e853 3f00 	ldrex	r3, [r3]
 800a3e4:	623b      	str	r3, [r7, #32]
   return(result);
 800a3e6:	6a3b      	ldr	r3, [r7, #32]
 800a3e8:	f023 0301 	bic.w	r3, r3, #1
 800a3ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	3314      	adds	r3, #20
 800a3f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a3fa:	633a      	str	r2, [r7, #48]	; 0x30
 800a3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a402:	e841 2300 	strex	r3, r2, [r1]
 800a406:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d1e3      	bne.n	800a3d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2220      	movs	r2, #32
 800a412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	330c      	adds	r3, #12
 800a422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	e853 3f00 	ldrex	r3, [r3]
 800a42a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f023 0310 	bic.w	r3, r3, #16
 800a432:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	330c      	adds	r3, #12
 800a43c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a440:	61fa      	str	r2, [r7, #28]
 800a442:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a444:	69b9      	ldr	r1, [r7, #24]
 800a446:	69fa      	ldr	r2, [r7, #28]
 800a448:	e841 2300 	strex	r3, r2, [r1]
 800a44c:	617b      	str	r3, [r7, #20]
   return(result);
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d1e3      	bne.n	800a41c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a454:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a458:	4619      	mov	r1, r3
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 f83e 	bl	800a4dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a460:	e023      	b.n	800a4aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d009      	beq.n	800a482 <HAL_UART_IRQHandler+0x4ea>
 800a46e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a476:	2b00      	cmp	r3, #0
 800a478:	d003      	beq.n	800a482 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f8ef 	bl	800a65e <UART_Transmit_IT>
    return;
 800a480:	e014      	b.n	800a4ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00e      	beq.n	800a4ac <HAL_UART_IRQHandler+0x514>
 800a48e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a496:	2b00      	cmp	r3, #0
 800a498:	d008      	beq.n	800a4ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 f92f 	bl	800a6fe <UART_EndTransmit_IT>
    return;
 800a4a0:	e004      	b.n	800a4ac <HAL_UART_IRQHandler+0x514>
    return;
 800a4a2:	bf00      	nop
 800a4a4:	e002      	b.n	800a4ac <HAL_UART_IRQHandler+0x514>
      return;
 800a4a6:	bf00      	nop
 800a4a8:	e000      	b.n	800a4ac <HAL_UART_IRQHandler+0x514>
      return;
 800a4aa:	bf00      	nop
  }
}
 800a4ac:	37e8      	adds	r7, #232	; 0xe8
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop

0800a4b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a4bc:	bf00      	nop
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a4d0:	bf00      	nop
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a4e8:	bf00      	nop
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b085      	sub	sp, #20
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	4613      	mov	r3, r2
 800a500:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	68ba      	ldr	r2, [r7, #8]
 800a506:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	88fa      	ldrh	r2, [r7, #6]
 800a50c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	88fa      	ldrh	r2, [r7, #6]
 800a512:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2200      	movs	r2, #0
 800a518:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2222      	movs	r2, #34	; 0x22
 800a51e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2200      	movs	r2, #0
 800a526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d007      	beq.n	800a542 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	68da      	ldr	r2, [r3, #12]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a540:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	695a      	ldr	r2, [r3, #20]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f042 0201 	orr.w	r2, r2, #1
 800a550:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	68da      	ldr	r2, [r3, #12]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f042 0220 	orr.w	r2, r2, #32
 800a560:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3714      	adds	r7, #20
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a570:	b480      	push	{r7}
 800a572:	b095      	sub	sp, #84	; 0x54
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	330c      	adds	r3, #12
 800a57e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a582:	e853 3f00 	ldrex	r3, [r3]
 800a586:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a58e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	330c      	adds	r3, #12
 800a596:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a598:	643a      	str	r2, [r7, #64]	; 0x40
 800a59a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a59c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a59e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a5a0:	e841 2300 	strex	r3, r2, [r1]
 800a5a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d1e5      	bne.n	800a578 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	3314      	adds	r3, #20
 800a5b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b4:	6a3b      	ldr	r3, [r7, #32]
 800a5b6:	e853 3f00 	ldrex	r3, [r3]
 800a5ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	f023 0301 	bic.w	r3, r3, #1
 800a5c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	3314      	adds	r3, #20
 800a5ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a5ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5d4:	e841 2300 	strex	r3, r2, [r1]
 800a5d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d1e5      	bne.n	800a5ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d119      	bne.n	800a61c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	330c      	adds	r3, #12
 800a5ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	e853 3f00 	ldrex	r3, [r3]
 800a5f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	f023 0310 	bic.w	r3, r3, #16
 800a5fe:	647b      	str	r3, [r7, #68]	; 0x44
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	330c      	adds	r3, #12
 800a606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a608:	61ba      	str	r2, [r7, #24]
 800a60a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60c:	6979      	ldr	r1, [r7, #20]
 800a60e:	69ba      	ldr	r2, [r7, #24]
 800a610:	e841 2300 	strex	r3, r2, [r1]
 800a614:	613b      	str	r3, [r7, #16]
   return(result);
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1e5      	bne.n	800a5e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2220      	movs	r2, #32
 800a620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a62a:	bf00      	nop
 800a62c:	3754      	adds	r7, #84	; 0x54
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr

0800a636 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b084      	sub	sp, #16
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a642:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2200      	movs	r2, #0
 800a64e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f7ff ff39 	bl	800a4c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a656:	bf00      	nop
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a65e:	b480      	push	{r7}
 800a660:	b085      	sub	sp, #20
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	2b21      	cmp	r3, #33	; 0x21
 800a670:	d13e      	bne.n	800a6f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a67a:	d114      	bne.n	800a6a6 <UART_Transmit_IT+0x48>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d110      	bne.n	800a6a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a1b      	ldr	r3, [r3, #32]
 800a688:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	881b      	ldrh	r3, [r3, #0]
 800a68e:	461a      	mov	r2, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a698:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a1b      	ldr	r3, [r3, #32]
 800a69e:	1c9a      	adds	r2, r3, #2
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	621a      	str	r2, [r3, #32]
 800a6a4:	e008      	b.n	800a6b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a1b      	ldr	r3, [r3, #32]
 800a6aa:	1c59      	adds	r1, r3, #1
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	6211      	str	r1, [r2, #32]
 800a6b0:	781a      	ldrb	r2, [r3, #0]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10f      	bne.n	800a6ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	68da      	ldr	r2, [r3, #12]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a6da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	68da      	ldr	r2, [r3, #12]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	e000      	b.n	800a6f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a6f0:	2302      	movs	r3, #2
  }
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3714      	adds	r7, #20
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr

0800a6fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b082      	sub	sp, #8
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68da      	ldr	r2, [r3, #12]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a714:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2220      	movs	r2, #32
 800a71a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f7ff fec8 	bl	800a4b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b08c      	sub	sp, #48	; 0x30
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	2b22      	cmp	r3, #34	; 0x22
 800a740:	f040 80ab 	bne.w	800a89a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a74c:	d117      	bne.n	800a77e <UART_Receive_IT+0x50>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	691b      	ldr	r3, [r3, #16]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d113      	bne.n	800a77e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a756:	2300      	movs	r3, #0
 800a758:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a75e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	b29b      	uxth	r3, r3
 800a768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a76c:	b29a      	uxth	r2, r3
 800a76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a770:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a776:	1c9a      	adds	r2, r3, #2
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	629a      	str	r2, [r3, #40]	; 0x28
 800a77c:	e026      	b.n	800a7cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a782:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a784:	2300      	movs	r3, #0
 800a786:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	689b      	ldr	r3, [r3, #8]
 800a78c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a790:	d007      	beq.n	800a7a2 <UART_Receive_IT+0x74>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d10a      	bne.n	800a7b0 <UART_Receive_IT+0x82>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d106      	bne.n	800a7b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	b2da      	uxtb	r2, r3
 800a7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ac:	701a      	strb	r2, [r3, #0]
 800a7ae:	e008      	b.n	800a7c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7bc:	b2da      	uxtb	r2, r3
 800a7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7c6:	1c5a      	adds	r2, r3, #1
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	3b01      	subs	r3, #1
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	4619      	mov	r1, r3
 800a7da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d15a      	bne.n	800a896 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	68da      	ldr	r2, [r3, #12]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f022 0220 	bic.w	r2, r2, #32
 800a7ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	68da      	ldr	r2, [r3, #12]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a7fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	695a      	ldr	r2, [r3, #20]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f022 0201 	bic.w	r2, r2, #1
 800a80e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2220      	movs	r2, #32
 800a814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d135      	bne.n	800a88c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	330c      	adds	r3, #12
 800a82c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	e853 3f00 	ldrex	r3, [r3]
 800a834:	613b      	str	r3, [r7, #16]
   return(result);
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	f023 0310 	bic.w	r3, r3, #16
 800a83c:	627b      	str	r3, [r7, #36]	; 0x24
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	330c      	adds	r3, #12
 800a844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a846:	623a      	str	r2, [r7, #32]
 800a848:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84a:	69f9      	ldr	r1, [r7, #28]
 800a84c:	6a3a      	ldr	r2, [r7, #32]
 800a84e:	e841 2300 	strex	r3, r2, [r1]
 800a852:	61bb      	str	r3, [r7, #24]
   return(result);
 800a854:	69bb      	ldr	r3, [r7, #24]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1e5      	bne.n	800a826 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 0310 	and.w	r3, r3, #16
 800a864:	2b10      	cmp	r3, #16
 800a866:	d10a      	bne.n	800a87e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a868:	2300      	movs	r3, #0
 800a86a:	60fb      	str	r3, [r7, #12]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	60fb      	str	r3, [r7, #12]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	60fb      	str	r3, [r7, #12]
 800a87c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a882:	4619      	mov	r1, r3
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f7ff fe29 	bl	800a4dc <HAL_UARTEx_RxEventCallback>
 800a88a:	e002      	b.n	800a892 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f7f7 fedb 	bl	8002648 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a892:	2300      	movs	r3, #0
 800a894:	e002      	b.n	800a89c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a896:	2300      	movs	r3, #0
 800a898:	e000      	b.n	800a89c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a89a:	2302      	movs	r3, #2
  }
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3730      	adds	r7, #48	; 0x30
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a8a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8a8:	b0c0      	sub	sp, #256	; 0x100
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	691b      	ldr	r3, [r3, #16]
 800a8b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a8bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8c0:	68d9      	ldr	r1, [r3, #12]
 800a8c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	ea40 0301 	orr.w	r3, r0, r1
 800a8cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a8ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8d2:	689a      	ldr	r2, [r3, #8]
 800a8d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	431a      	orrs	r2, r3
 800a8dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8e0:	695b      	ldr	r3, [r3, #20]
 800a8e2:	431a      	orrs	r2, r3
 800a8e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8e8:	69db      	ldr	r3, [r3, #28]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a8f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a8fc:	f021 010c 	bic.w	r1, r1, #12
 800a900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a90a:	430b      	orrs	r3, r1
 800a90c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a90e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	695b      	ldr	r3, [r3, #20]
 800a916:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a91a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a91e:	6999      	ldr	r1, [r3, #24]
 800a920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	ea40 0301 	orr.w	r3, r0, r1
 800a92a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a92c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	4b8f      	ldr	r3, [pc, #572]	; (800ab70 <UART_SetConfig+0x2cc>)
 800a934:	429a      	cmp	r2, r3
 800a936:	d005      	beq.n	800a944 <UART_SetConfig+0xa0>
 800a938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	4b8d      	ldr	r3, [pc, #564]	; (800ab74 <UART_SetConfig+0x2d0>)
 800a940:	429a      	cmp	r2, r3
 800a942:	d104      	bne.n	800a94e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a944:	f7fc fee2 	bl	800770c <HAL_RCC_GetPCLK2Freq>
 800a948:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a94c:	e003      	b.n	800a956 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a94e:	f7fc fec9 	bl	80076e4 <HAL_RCC_GetPCLK1Freq>
 800a952:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a95a:	69db      	ldr	r3, [r3, #28]
 800a95c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a960:	f040 810c 	bne.w	800ab7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a968:	2200      	movs	r2, #0
 800a96a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a96e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a972:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a976:	4622      	mov	r2, r4
 800a978:	462b      	mov	r3, r5
 800a97a:	1891      	adds	r1, r2, r2
 800a97c:	65b9      	str	r1, [r7, #88]	; 0x58
 800a97e:	415b      	adcs	r3, r3
 800a980:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a982:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a986:	4621      	mov	r1, r4
 800a988:	eb12 0801 	adds.w	r8, r2, r1
 800a98c:	4629      	mov	r1, r5
 800a98e:	eb43 0901 	adc.w	r9, r3, r1
 800a992:	f04f 0200 	mov.w	r2, #0
 800a996:	f04f 0300 	mov.w	r3, #0
 800a99a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a99e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a9a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a9a6:	4690      	mov	r8, r2
 800a9a8:	4699      	mov	r9, r3
 800a9aa:	4623      	mov	r3, r4
 800a9ac:	eb18 0303 	adds.w	r3, r8, r3
 800a9b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a9b4:	462b      	mov	r3, r5
 800a9b6:	eb49 0303 	adc.w	r3, r9, r3
 800a9ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a9be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a9ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a9ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	18db      	adds	r3, r3, r3
 800a9d6:	653b      	str	r3, [r7, #80]	; 0x50
 800a9d8:	4613      	mov	r3, r2
 800a9da:	eb42 0303 	adc.w	r3, r2, r3
 800a9de:	657b      	str	r3, [r7, #84]	; 0x54
 800a9e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a9e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a9e8:	f7f6 f8fe 	bl	8000be8 <__aeabi_uldivmod>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	4b61      	ldr	r3, [pc, #388]	; (800ab78 <UART_SetConfig+0x2d4>)
 800a9f2:	fba3 2302 	umull	r2, r3, r3, r2
 800a9f6:	095b      	lsrs	r3, r3, #5
 800a9f8:	011c      	lsls	r4, r3, #4
 800a9fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aa04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800aa08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800aa0c:	4642      	mov	r2, r8
 800aa0e:	464b      	mov	r3, r9
 800aa10:	1891      	adds	r1, r2, r2
 800aa12:	64b9      	str	r1, [r7, #72]	; 0x48
 800aa14:	415b      	adcs	r3, r3
 800aa16:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800aa1c:	4641      	mov	r1, r8
 800aa1e:	eb12 0a01 	adds.w	sl, r2, r1
 800aa22:	4649      	mov	r1, r9
 800aa24:	eb43 0b01 	adc.w	fp, r3, r1
 800aa28:	f04f 0200 	mov.w	r2, #0
 800aa2c:	f04f 0300 	mov.w	r3, #0
 800aa30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aa34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aa38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa3c:	4692      	mov	sl, r2
 800aa3e:	469b      	mov	fp, r3
 800aa40:	4643      	mov	r3, r8
 800aa42:	eb1a 0303 	adds.w	r3, sl, r3
 800aa46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa4a:	464b      	mov	r3, r9
 800aa4c:	eb4b 0303 	adc.w	r3, fp, r3
 800aa50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aa54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aa60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800aa64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800aa68:	460b      	mov	r3, r1
 800aa6a:	18db      	adds	r3, r3, r3
 800aa6c:	643b      	str	r3, [r7, #64]	; 0x40
 800aa6e:	4613      	mov	r3, r2
 800aa70:	eb42 0303 	adc.w	r3, r2, r3
 800aa74:	647b      	str	r3, [r7, #68]	; 0x44
 800aa76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800aa7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800aa7e:	f7f6 f8b3 	bl	8000be8 <__aeabi_uldivmod>
 800aa82:	4602      	mov	r2, r0
 800aa84:	460b      	mov	r3, r1
 800aa86:	4611      	mov	r1, r2
 800aa88:	4b3b      	ldr	r3, [pc, #236]	; (800ab78 <UART_SetConfig+0x2d4>)
 800aa8a:	fba3 2301 	umull	r2, r3, r3, r1
 800aa8e:	095b      	lsrs	r3, r3, #5
 800aa90:	2264      	movs	r2, #100	; 0x64
 800aa92:	fb02 f303 	mul.w	r3, r2, r3
 800aa96:	1acb      	subs	r3, r1, r3
 800aa98:	00db      	lsls	r3, r3, #3
 800aa9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800aa9e:	4b36      	ldr	r3, [pc, #216]	; (800ab78 <UART_SetConfig+0x2d4>)
 800aaa0:	fba3 2302 	umull	r2, r3, r3, r2
 800aaa4:	095b      	lsrs	r3, r3, #5
 800aaa6:	005b      	lsls	r3, r3, #1
 800aaa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aaac:	441c      	add	r4, r3
 800aaae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aab2:	2200      	movs	r2, #0
 800aab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aab8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800aabc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800aac0:	4642      	mov	r2, r8
 800aac2:	464b      	mov	r3, r9
 800aac4:	1891      	adds	r1, r2, r2
 800aac6:	63b9      	str	r1, [r7, #56]	; 0x38
 800aac8:	415b      	adcs	r3, r3
 800aaca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aacc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800aad0:	4641      	mov	r1, r8
 800aad2:	1851      	adds	r1, r2, r1
 800aad4:	6339      	str	r1, [r7, #48]	; 0x30
 800aad6:	4649      	mov	r1, r9
 800aad8:	414b      	adcs	r3, r1
 800aada:	637b      	str	r3, [r7, #52]	; 0x34
 800aadc:	f04f 0200 	mov.w	r2, #0
 800aae0:	f04f 0300 	mov.w	r3, #0
 800aae4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800aae8:	4659      	mov	r1, fp
 800aaea:	00cb      	lsls	r3, r1, #3
 800aaec:	4651      	mov	r1, sl
 800aaee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aaf2:	4651      	mov	r1, sl
 800aaf4:	00ca      	lsls	r2, r1, #3
 800aaf6:	4610      	mov	r0, r2
 800aaf8:	4619      	mov	r1, r3
 800aafa:	4603      	mov	r3, r0
 800aafc:	4642      	mov	r2, r8
 800aafe:	189b      	adds	r3, r3, r2
 800ab00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ab04:	464b      	mov	r3, r9
 800ab06:	460a      	mov	r2, r1
 800ab08:	eb42 0303 	adc.w	r3, r2, r3
 800ab0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ab10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ab1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ab20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ab24:	460b      	mov	r3, r1
 800ab26:	18db      	adds	r3, r3, r3
 800ab28:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab2a:	4613      	mov	r3, r2
 800ab2c:	eb42 0303 	adc.w	r3, r2, r3
 800ab30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ab36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ab3a:	f7f6 f855 	bl	8000be8 <__aeabi_uldivmod>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	460b      	mov	r3, r1
 800ab42:	4b0d      	ldr	r3, [pc, #52]	; (800ab78 <UART_SetConfig+0x2d4>)
 800ab44:	fba3 1302 	umull	r1, r3, r3, r2
 800ab48:	095b      	lsrs	r3, r3, #5
 800ab4a:	2164      	movs	r1, #100	; 0x64
 800ab4c:	fb01 f303 	mul.w	r3, r1, r3
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	00db      	lsls	r3, r3, #3
 800ab54:	3332      	adds	r3, #50	; 0x32
 800ab56:	4a08      	ldr	r2, [pc, #32]	; (800ab78 <UART_SetConfig+0x2d4>)
 800ab58:	fba2 2303 	umull	r2, r3, r2, r3
 800ab5c:	095b      	lsrs	r3, r3, #5
 800ab5e:	f003 0207 	and.w	r2, r3, #7
 800ab62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4422      	add	r2, r4
 800ab6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ab6c:	e105      	b.n	800ad7a <UART_SetConfig+0x4d6>
 800ab6e:	bf00      	nop
 800ab70:	40011000 	.word	0x40011000
 800ab74:	40011400 	.word	0x40011400
 800ab78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab80:	2200      	movs	r2, #0
 800ab82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ab86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ab8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ab8e:	4642      	mov	r2, r8
 800ab90:	464b      	mov	r3, r9
 800ab92:	1891      	adds	r1, r2, r2
 800ab94:	6239      	str	r1, [r7, #32]
 800ab96:	415b      	adcs	r3, r3
 800ab98:	627b      	str	r3, [r7, #36]	; 0x24
 800ab9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ab9e:	4641      	mov	r1, r8
 800aba0:	1854      	adds	r4, r2, r1
 800aba2:	4649      	mov	r1, r9
 800aba4:	eb43 0501 	adc.w	r5, r3, r1
 800aba8:	f04f 0200 	mov.w	r2, #0
 800abac:	f04f 0300 	mov.w	r3, #0
 800abb0:	00eb      	lsls	r3, r5, #3
 800abb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800abb6:	00e2      	lsls	r2, r4, #3
 800abb8:	4614      	mov	r4, r2
 800abba:	461d      	mov	r5, r3
 800abbc:	4643      	mov	r3, r8
 800abbe:	18e3      	adds	r3, r4, r3
 800abc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800abc4:	464b      	mov	r3, r9
 800abc6:	eb45 0303 	adc.w	r3, r5, r3
 800abca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800abce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800abda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800abde:	f04f 0200 	mov.w	r2, #0
 800abe2:	f04f 0300 	mov.w	r3, #0
 800abe6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800abea:	4629      	mov	r1, r5
 800abec:	008b      	lsls	r3, r1, #2
 800abee:	4621      	mov	r1, r4
 800abf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800abf4:	4621      	mov	r1, r4
 800abf6:	008a      	lsls	r2, r1, #2
 800abf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800abfc:	f7f5 fff4 	bl	8000be8 <__aeabi_uldivmod>
 800ac00:	4602      	mov	r2, r0
 800ac02:	460b      	mov	r3, r1
 800ac04:	4b60      	ldr	r3, [pc, #384]	; (800ad88 <UART_SetConfig+0x4e4>)
 800ac06:	fba3 2302 	umull	r2, r3, r3, r2
 800ac0a:	095b      	lsrs	r3, r3, #5
 800ac0c:	011c      	lsls	r4, r3, #4
 800ac0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac12:	2200      	movs	r2, #0
 800ac14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ac18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ac1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ac20:	4642      	mov	r2, r8
 800ac22:	464b      	mov	r3, r9
 800ac24:	1891      	adds	r1, r2, r2
 800ac26:	61b9      	str	r1, [r7, #24]
 800ac28:	415b      	adcs	r3, r3
 800ac2a:	61fb      	str	r3, [r7, #28]
 800ac2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ac30:	4641      	mov	r1, r8
 800ac32:	1851      	adds	r1, r2, r1
 800ac34:	6139      	str	r1, [r7, #16]
 800ac36:	4649      	mov	r1, r9
 800ac38:	414b      	adcs	r3, r1
 800ac3a:	617b      	str	r3, [r7, #20]
 800ac3c:	f04f 0200 	mov.w	r2, #0
 800ac40:	f04f 0300 	mov.w	r3, #0
 800ac44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ac48:	4659      	mov	r1, fp
 800ac4a:	00cb      	lsls	r3, r1, #3
 800ac4c:	4651      	mov	r1, sl
 800ac4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac52:	4651      	mov	r1, sl
 800ac54:	00ca      	lsls	r2, r1, #3
 800ac56:	4610      	mov	r0, r2
 800ac58:	4619      	mov	r1, r3
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	4642      	mov	r2, r8
 800ac5e:	189b      	adds	r3, r3, r2
 800ac60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ac64:	464b      	mov	r3, r9
 800ac66:	460a      	mov	r2, r1
 800ac68:	eb42 0303 	adc.w	r3, r2, r3
 800ac6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ac70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	67bb      	str	r3, [r7, #120]	; 0x78
 800ac7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ac7c:	f04f 0200 	mov.w	r2, #0
 800ac80:	f04f 0300 	mov.w	r3, #0
 800ac84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ac88:	4649      	mov	r1, r9
 800ac8a:	008b      	lsls	r3, r1, #2
 800ac8c:	4641      	mov	r1, r8
 800ac8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac92:	4641      	mov	r1, r8
 800ac94:	008a      	lsls	r2, r1, #2
 800ac96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ac9a:	f7f5 ffa5 	bl	8000be8 <__aeabi_uldivmod>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	460b      	mov	r3, r1
 800aca2:	4b39      	ldr	r3, [pc, #228]	; (800ad88 <UART_SetConfig+0x4e4>)
 800aca4:	fba3 1302 	umull	r1, r3, r3, r2
 800aca8:	095b      	lsrs	r3, r3, #5
 800acaa:	2164      	movs	r1, #100	; 0x64
 800acac:	fb01 f303 	mul.w	r3, r1, r3
 800acb0:	1ad3      	subs	r3, r2, r3
 800acb2:	011b      	lsls	r3, r3, #4
 800acb4:	3332      	adds	r3, #50	; 0x32
 800acb6:	4a34      	ldr	r2, [pc, #208]	; (800ad88 <UART_SetConfig+0x4e4>)
 800acb8:	fba2 2303 	umull	r2, r3, r2, r3
 800acbc:	095b      	lsrs	r3, r3, #5
 800acbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acc2:	441c      	add	r4, r3
 800acc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800acc8:	2200      	movs	r2, #0
 800acca:	673b      	str	r3, [r7, #112]	; 0x70
 800accc:	677a      	str	r2, [r7, #116]	; 0x74
 800acce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800acd2:	4642      	mov	r2, r8
 800acd4:	464b      	mov	r3, r9
 800acd6:	1891      	adds	r1, r2, r2
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	415b      	adcs	r3, r3
 800acdc:	60fb      	str	r3, [r7, #12]
 800acde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ace2:	4641      	mov	r1, r8
 800ace4:	1851      	adds	r1, r2, r1
 800ace6:	6039      	str	r1, [r7, #0]
 800ace8:	4649      	mov	r1, r9
 800acea:	414b      	adcs	r3, r1
 800acec:	607b      	str	r3, [r7, #4]
 800acee:	f04f 0200 	mov.w	r2, #0
 800acf2:	f04f 0300 	mov.w	r3, #0
 800acf6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800acfa:	4659      	mov	r1, fp
 800acfc:	00cb      	lsls	r3, r1, #3
 800acfe:	4651      	mov	r1, sl
 800ad00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad04:	4651      	mov	r1, sl
 800ad06:	00ca      	lsls	r2, r1, #3
 800ad08:	4610      	mov	r0, r2
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	4642      	mov	r2, r8
 800ad10:	189b      	adds	r3, r3, r2
 800ad12:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad14:	464b      	mov	r3, r9
 800ad16:	460a      	mov	r2, r1
 800ad18:	eb42 0303 	adc.w	r3, r2, r3
 800ad1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	663b      	str	r3, [r7, #96]	; 0x60
 800ad28:	667a      	str	r2, [r7, #100]	; 0x64
 800ad2a:	f04f 0200 	mov.w	r2, #0
 800ad2e:	f04f 0300 	mov.w	r3, #0
 800ad32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ad36:	4649      	mov	r1, r9
 800ad38:	008b      	lsls	r3, r1, #2
 800ad3a:	4641      	mov	r1, r8
 800ad3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad40:	4641      	mov	r1, r8
 800ad42:	008a      	lsls	r2, r1, #2
 800ad44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ad48:	f7f5 ff4e 	bl	8000be8 <__aeabi_uldivmod>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	4b0d      	ldr	r3, [pc, #52]	; (800ad88 <UART_SetConfig+0x4e4>)
 800ad52:	fba3 1302 	umull	r1, r3, r3, r2
 800ad56:	095b      	lsrs	r3, r3, #5
 800ad58:	2164      	movs	r1, #100	; 0x64
 800ad5a:	fb01 f303 	mul.w	r3, r1, r3
 800ad5e:	1ad3      	subs	r3, r2, r3
 800ad60:	011b      	lsls	r3, r3, #4
 800ad62:	3332      	adds	r3, #50	; 0x32
 800ad64:	4a08      	ldr	r2, [pc, #32]	; (800ad88 <UART_SetConfig+0x4e4>)
 800ad66:	fba2 2303 	umull	r2, r3, r2, r3
 800ad6a:	095b      	lsrs	r3, r3, #5
 800ad6c:	f003 020f 	and.w	r2, r3, #15
 800ad70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4422      	add	r2, r4
 800ad78:	609a      	str	r2, [r3, #8]
}
 800ad7a:	bf00      	nop
 800ad7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ad80:	46bd      	mov	sp, r7
 800ad82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad86:	bf00      	nop
 800ad88:	51eb851f 	.word	0x51eb851f

0800ad8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ad8c:	b084      	sub	sp, #16
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b084      	sub	sp, #16
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
 800ad96:	f107 001c 	add.w	r0, r7, #28
 800ad9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ad9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d122      	bne.n	800adea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800adb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800adcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adce:	2b01      	cmp	r3, #1
 800add0:	d105      	bne.n	800adde <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f001 fbe8 	bl	800c5b4 <USB_CoreReset>
 800ade4:	4603      	mov	r3, r0
 800ade6:	73fb      	strb	r3, [r7, #15]
 800ade8:	e01a      	b.n	800ae20 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f001 fbdc 	bl	800c5b4 <USB_CoreReset>
 800adfc:	4603      	mov	r3, r0
 800adfe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ae00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d106      	bne.n	800ae14 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	639a      	str	r2, [r3, #56]	; 0x38
 800ae12:	e005      	b.n	800ae20 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ae20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d10b      	bne.n	800ae3e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	f043 0206 	orr.w	r2, r3, #6
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	f043 0220 	orr.w	r2, r3, #32
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ae3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae4a:	b004      	add	sp, #16
 800ae4c:	4770      	bx	lr
	...

0800ae50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b087      	sub	sp, #28
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	4613      	mov	r3, r2
 800ae5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ae5e:	79fb      	ldrb	r3, [r7, #7]
 800ae60:	2b02      	cmp	r3, #2
 800ae62:	d165      	bne.n	800af30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	4a41      	ldr	r2, [pc, #260]	; (800af6c <USB_SetTurnaroundTime+0x11c>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d906      	bls.n	800ae7a <USB_SetTurnaroundTime+0x2a>
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	4a40      	ldr	r2, [pc, #256]	; (800af70 <USB_SetTurnaroundTime+0x120>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d202      	bcs.n	800ae7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ae74:	230f      	movs	r3, #15
 800ae76:	617b      	str	r3, [r7, #20]
 800ae78:	e062      	b.n	800af40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	4a3c      	ldr	r2, [pc, #240]	; (800af70 <USB_SetTurnaroundTime+0x120>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d306      	bcc.n	800ae90 <USB_SetTurnaroundTime+0x40>
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	4a3b      	ldr	r2, [pc, #236]	; (800af74 <USB_SetTurnaroundTime+0x124>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d202      	bcs.n	800ae90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ae8a:	230e      	movs	r3, #14
 800ae8c:	617b      	str	r3, [r7, #20]
 800ae8e:	e057      	b.n	800af40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	4a38      	ldr	r2, [pc, #224]	; (800af74 <USB_SetTurnaroundTime+0x124>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d306      	bcc.n	800aea6 <USB_SetTurnaroundTime+0x56>
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	4a37      	ldr	r2, [pc, #220]	; (800af78 <USB_SetTurnaroundTime+0x128>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d202      	bcs.n	800aea6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800aea0:	230d      	movs	r3, #13
 800aea2:	617b      	str	r3, [r7, #20]
 800aea4:	e04c      	b.n	800af40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	4a33      	ldr	r2, [pc, #204]	; (800af78 <USB_SetTurnaroundTime+0x128>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d306      	bcc.n	800aebc <USB_SetTurnaroundTime+0x6c>
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	4a32      	ldr	r2, [pc, #200]	; (800af7c <USB_SetTurnaroundTime+0x12c>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d802      	bhi.n	800aebc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800aeb6:	230c      	movs	r3, #12
 800aeb8:	617b      	str	r3, [r7, #20]
 800aeba:	e041      	b.n	800af40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	4a2f      	ldr	r2, [pc, #188]	; (800af7c <USB_SetTurnaroundTime+0x12c>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d906      	bls.n	800aed2 <USB_SetTurnaroundTime+0x82>
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	4a2e      	ldr	r2, [pc, #184]	; (800af80 <USB_SetTurnaroundTime+0x130>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d802      	bhi.n	800aed2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800aecc:	230b      	movs	r3, #11
 800aece:	617b      	str	r3, [r7, #20]
 800aed0:	e036      	b.n	800af40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	4a2a      	ldr	r2, [pc, #168]	; (800af80 <USB_SetTurnaroundTime+0x130>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d906      	bls.n	800aee8 <USB_SetTurnaroundTime+0x98>
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	4a29      	ldr	r2, [pc, #164]	; (800af84 <USB_SetTurnaroundTime+0x134>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d802      	bhi.n	800aee8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800aee2:	230a      	movs	r3, #10
 800aee4:	617b      	str	r3, [r7, #20]
 800aee6:	e02b      	b.n	800af40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	4a26      	ldr	r2, [pc, #152]	; (800af84 <USB_SetTurnaroundTime+0x134>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d906      	bls.n	800aefe <USB_SetTurnaroundTime+0xae>
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	4a25      	ldr	r2, [pc, #148]	; (800af88 <USB_SetTurnaroundTime+0x138>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d202      	bcs.n	800aefe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800aef8:	2309      	movs	r3, #9
 800aefa:	617b      	str	r3, [r7, #20]
 800aefc:	e020      	b.n	800af40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	4a21      	ldr	r2, [pc, #132]	; (800af88 <USB_SetTurnaroundTime+0x138>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d306      	bcc.n	800af14 <USB_SetTurnaroundTime+0xc4>
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	4a20      	ldr	r2, [pc, #128]	; (800af8c <USB_SetTurnaroundTime+0x13c>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d802      	bhi.n	800af14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800af0e:	2308      	movs	r3, #8
 800af10:	617b      	str	r3, [r7, #20]
 800af12:	e015      	b.n	800af40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	4a1d      	ldr	r2, [pc, #116]	; (800af8c <USB_SetTurnaroundTime+0x13c>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d906      	bls.n	800af2a <USB_SetTurnaroundTime+0xda>
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	4a1c      	ldr	r2, [pc, #112]	; (800af90 <USB_SetTurnaroundTime+0x140>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d202      	bcs.n	800af2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800af24:	2307      	movs	r3, #7
 800af26:	617b      	str	r3, [r7, #20]
 800af28:	e00a      	b.n	800af40 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800af2a:	2306      	movs	r3, #6
 800af2c:	617b      	str	r3, [r7, #20]
 800af2e:	e007      	b.n	800af40 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800af30:	79fb      	ldrb	r3, [r7, #7]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d102      	bne.n	800af3c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800af36:	2309      	movs	r3, #9
 800af38:	617b      	str	r3, [r7, #20]
 800af3a:	e001      	b.n	800af40 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800af3c:	2309      	movs	r3, #9
 800af3e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	68db      	ldr	r3, [r3, #12]
 800af44:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	68da      	ldr	r2, [r3, #12]
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	029b      	lsls	r3, r3, #10
 800af54:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800af58:	431a      	orrs	r2, r3
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800af5e:	2300      	movs	r3, #0
}
 800af60:	4618      	mov	r0, r3
 800af62:	371c      	adds	r7, #28
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr
 800af6c:	00d8acbf 	.word	0x00d8acbf
 800af70:	00e4e1c0 	.word	0x00e4e1c0
 800af74:	00f42400 	.word	0x00f42400
 800af78:	01067380 	.word	0x01067380
 800af7c:	011a499f 	.word	0x011a499f
 800af80:	01312cff 	.word	0x01312cff
 800af84:	014ca43f 	.word	0x014ca43f
 800af88:	016e3600 	.word	0x016e3600
 800af8c:	01a6ab1f 	.word	0x01a6ab1f
 800af90:	01e84800 	.word	0x01e84800

0800af94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	689b      	ldr	r3, [r3, #8]
 800afa0:	f043 0201 	orr.w	r2, r3, #1
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	370c      	adds	r7, #12
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr

0800afb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800afb6:	b480      	push	{r7}
 800afb8:	b083      	sub	sp, #12
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	f023 0201 	bic.w	r2, r3, #1
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	460b      	mov	r3, r1
 800afe2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800afe4:	2300      	movs	r3, #0
 800afe6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800aff4:	78fb      	ldrb	r3, [r7, #3]
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d115      	bne.n	800b026 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b006:	2001      	movs	r0, #1
 800b008:	f7f8 fd92 	bl	8003b30 <HAL_Delay>
      ms++;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	3301      	adds	r3, #1
 800b010:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f001 fa3f 	bl	800c496 <USB_GetMode>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d01e      	beq.n	800b05c <USB_SetCurrentMode+0x84>
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2b31      	cmp	r3, #49	; 0x31
 800b022:	d9f0      	bls.n	800b006 <USB_SetCurrentMode+0x2e>
 800b024:	e01a      	b.n	800b05c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b026:	78fb      	ldrb	r3, [r7, #3]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d115      	bne.n	800b058 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	68db      	ldr	r3, [r3, #12]
 800b030:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b038:	2001      	movs	r0, #1
 800b03a:	f7f8 fd79 	bl	8003b30 <HAL_Delay>
      ms++;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	3301      	adds	r3, #1
 800b042:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f001 fa26 	bl	800c496 <USB_GetMode>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d005      	beq.n	800b05c <USB_SetCurrentMode+0x84>
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2b31      	cmp	r3, #49	; 0x31
 800b054:	d9f0      	bls.n	800b038 <USB_SetCurrentMode+0x60>
 800b056:	e001      	b.n	800b05c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b058:	2301      	movs	r3, #1
 800b05a:	e005      	b.n	800b068 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2b32      	cmp	r3, #50	; 0x32
 800b060:	d101      	bne.n	800b066 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b062:	2301      	movs	r3, #1
 800b064:	e000      	b.n	800b068 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b070:	b084      	sub	sp, #16
 800b072:	b580      	push	{r7, lr}
 800b074:	b086      	sub	sp, #24
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
 800b07a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b07e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b082:	2300      	movs	r3, #0
 800b084:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b08a:	2300      	movs	r3, #0
 800b08c:	613b      	str	r3, [r7, #16]
 800b08e:	e009      	b.n	800b0a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	3340      	adds	r3, #64	; 0x40
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	4413      	add	r3, r2
 800b09a:	2200      	movs	r2, #0
 800b09c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	613b      	str	r3, [r7, #16]
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	2b0e      	cmp	r3, #14
 800b0a8:	d9f2      	bls.n	800b090 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b0aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d11c      	bne.n	800b0ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	68fa      	ldr	r2, [r7, #12]
 800b0ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b0be:	f043 0302 	orr.w	r3, r3, #2
 800b0c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	601a      	str	r2, [r3, #0]
 800b0e8:	e005      	b.n	800b0f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	2300      	movs	r3, #0
 800b100:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b108:	4619      	mov	r1, r3
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b110:	461a      	mov	r2, r3
 800b112:	680b      	ldr	r3, [r1, #0]
 800b114:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d10c      	bne.n	800b136 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d104      	bne.n	800b12c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b122:	2100      	movs	r1, #0
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 f965 	bl	800b3f4 <USB_SetDevSpeed>
 800b12a:	e008      	b.n	800b13e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b12c:	2101      	movs	r1, #1
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f960 	bl	800b3f4 <USB_SetDevSpeed>
 800b134:	e003      	b.n	800b13e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b136:	2103      	movs	r1, #3
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 f95b 	bl	800b3f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b13e:	2110      	movs	r1, #16
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 f8f3 	bl	800b32c <USB_FlushTxFifo>
 800b146:	4603      	mov	r3, r0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d001      	beq.n	800b150 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b14c:	2301      	movs	r3, #1
 800b14e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 f91f 	bl	800b394 <USB_FlushRxFifo>
 800b156:	4603      	mov	r3, r0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d001      	beq.n	800b160 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b15c:	2301      	movs	r3, #1
 800b15e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b166:	461a      	mov	r2, r3
 800b168:	2300      	movs	r3, #0
 800b16a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b172:	461a      	mov	r2, r3
 800b174:	2300      	movs	r3, #0
 800b176:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b17e:	461a      	mov	r2, r3
 800b180:	2300      	movs	r3, #0
 800b182:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b184:	2300      	movs	r3, #0
 800b186:	613b      	str	r3, [r7, #16]
 800b188:	e043      	b.n	800b212 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	015a      	lsls	r2, r3, #5
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	4413      	add	r3, r2
 800b192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b19c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1a0:	d118      	bne.n	800b1d4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d10a      	bne.n	800b1be <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	015a      	lsls	r2, r3, #5
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b1ba:	6013      	str	r3, [r2, #0]
 800b1bc:	e013      	b.n	800b1e6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	015a      	lsls	r2, r3, #5
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b1d0:	6013      	str	r3, [r2, #0]
 800b1d2:	e008      	b.n	800b1e6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	015a      	lsls	r2, r3, #5
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	4413      	add	r3, r2
 800b1dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	015a      	lsls	r2, r3, #5
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	015a      	lsls	r2, r3, #5
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	4413      	add	r3, r2
 800b200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b204:	461a      	mov	r2, r3
 800b206:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b20a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	3301      	adds	r3, #1
 800b210:	613b      	str	r3, [r7, #16]
 800b212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b214:	693a      	ldr	r2, [r7, #16]
 800b216:	429a      	cmp	r2, r3
 800b218:	d3b7      	bcc.n	800b18a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b21a:	2300      	movs	r3, #0
 800b21c:	613b      	str	r3, [r7, #16]
 800b21e:	e043      	b.n	800b2a8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	015a      	lsls	r2, r3, #5
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	4413      	add	r3, r2
 800b228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b236:	d118      	bne.n	800b26a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d10a      	bne.n	800b254 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	015a      	lsls	r2, r3, #5
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	4413      	add	r3, r2
 800b246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b24a:	461a      	mov	r2, r3
 800b24c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b250:	6013      	str	r3, [r2, #0]
 800b252:	e013      	b.n	800b27c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	015a      	lsls	r2, r3, #5
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	4413      	add	r3, r2
 800b25c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b260:	461a      	mov	r2, r3
 800b262:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b266:	6013      	str	r3, [r2, #0]
 800b268:	e008      	b.n	800b27c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	015a      	lsls	r2, r3, #5
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	4413      	add	r3, r2
 800b272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b276:	461a      	mov	r2, r3
 800b278:	2300      	movs	r3, #0
 800b27a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	015a      	lsls	r2, r3, #5
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	4413      	add	r3, r2
 800b284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b288:	461a      	mov	r2, r3
 800b28a:	2300      	movs	r3, #0
 800b28c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	015a      	lsls	r2, r3, #5
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	4413      	add	r3, r2
 800b296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b29a:	461a      	mov	r2, r3
 800b29c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b2a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	613b      	str	r3, [r7, #16]
 800b2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2aa:	693a      	ldr	r2, [r7, #16]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d3b7      	bcc.n	800b220 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2b6:	691b      	ldr	r3, [r3, #16]
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b2d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d105      	bne.n	800b2e4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	699b      	ldr	r3, [r3, #24]
 800b2dc:	f043 0210 	orr.w	r2, r3, #16
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	699a      	ldr	r2, [r3, #24]
 800b2e8:	4b0f      	ldr	r3, [pc, #60]	; (800b328 <USB_DevInit+0x2b8>)
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	687a      	ldr	r2, [r7, #4]
 800b2ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d005      	beq.n	800b302 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	699b      	ldr	r3, [r3, #24]
 800b2fa:	f043 0208 	orr.w	r2, r3, #8
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b304:	2b01      	cmp	r3, #1
 800b306:	d107      	bne.n	800b318 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	699b      	ldr	r3, [r3, #24]
 800b30c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b310:	f043 0304 	orr.w	r3, r3, #4
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b318:	7dfb      	ldrb	r3, [r7, #23]
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3718      	adds	r7, #24
 800b31e:	46bd      	mov	sp, r7
 800b320:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b324:	b004      	add	sp, #16
 800b326:	4770      	bx	lr
 800b328:	803c3800 	.word	0x803c3800

0800b32c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b085      	sub	sp, #20
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b336:	2300      	movs	r3, #0
 800b338:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	3301      	adds	r3, #1
 800b33e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	4a13      	ldr	r2, [pc, #76]	; (800b390 <USB_FlushTxFifo+0x64>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d901      	bls.n	800b34c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b348:	2303      	movs	r3, #3
 800b34a:	e01b      	b.n	800b384 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	691b      	ldr	r3, [r3, #16]
 800b350:	2b00      	cmp	r3, #0
 800b352:	daf2      	bge.n	800b33a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b354:	2300      	movs	r3, #0
 800b356:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	019b      	lsls	r3, r3, #6
 800b35c:	f043 0220 	orr.w	r2, r3, #32
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	3301      	adds	r3, #1
 800b368:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	4a08      	ldr	r2, [pc, #32]	; (800b390 <USB_FlushTxFifo+0x64>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d901      	bls.n	800b376 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b372:	2303      	movs	r3, #3
 800b374:	e006      	b.n	800b384 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	f003 0320 	and.w	r3, r3, #32
 800b37e:	2b20      	cmp	r3, #32
 800b380:	d0f0      	beq.n	800b364 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b382:	2300      	movs	r3, #0
}
 800b384:	4618      	mov	r0, r3
 800b386:	3714      	adds	r7, #20
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr
 800b390:	00030d40 	.word	0x00030d40

0800b394 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b394:	b480      	push	{r7}
 800b396:	b085      	sub	sp, #20
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b39c:	2300      	movs	r3, #0
 800b39e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	4a11      	ldr	r2, [pc, #68]	; (800b3f0 <USB_FlushRxFifo+0x5c>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d901      	bls.n	800b3b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b3ae:	2303      	movs	r3, #3
 800b3b0:	e018      	b.n	800b3e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	691b      	ldr	r3, [r3, #16]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	daf2      	bge.n	800b3a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2210      	movs	r2, #16
 800b3c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	4a08      	ldr	r2, [pc, #32]	; (800b3f0 <USB_FlushRxFifo+0x5c>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d901      	bls.n	800b3d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b3d2:	2303      	movs	r3, #3
 800b3d4:	e006      	b.n	800b3e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	f003 0310 	and.w	r3, r3, #16
 800b3de:	2b10      	cmp	r3, #16
 800b3e0:	d0f0      	beq.n	800b3c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3714      	adds	r7, #20
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr
 800b3f0:	00030d40 	.word	0x00030d40

0800b3f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	78fb      	ldrb	r3, [r7, #3]
 800b40e:	68f9      	ldr	r1, [r7, #12]
 800b410:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b414:	4313      	orrs	r3, r2
 800b416:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3714      	adds	r7, #20
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr

0800b426 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b426:	b480      	push	{r7}
 800b428:	b087      	sub	sp, #28
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	f003 0306 	and.w	r3, r3, #6
 800b43e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d102      	bne.n	800b44c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b446:	2300      	movs	r3, #0
 800b448:	75fb      	strb	r3, [r7, #23]
 800b44a:	e00a      	b.n	800b462 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2b02      	cmp	r3, #2
 800b450:	d002      	beq.n	800b458 <USB_GetDevSpeed+0x32>
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2b06      	cmp	r3, #6
 800b456:	d102      	bne.n	800b45e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b458:	2302      	movs	r3, #2
 800b45a:	75fb      	strb	r3, [r7, #23]
 800b45c:	e001      	b.n	800b462 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b45e:	230f      	movs	r3, #15
 800b460:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b462:	7dfb      	ldrb	r3, [r7, #23]
}
 800b464:	4618      	mov	r0, r3
 800b466:	371c      	adds	r7, #28
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	785b      	ldrb	r3, [r3, #1]
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d13a      	bne.n	800b502 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b492:	69da      	ldr	r2, [r3, #28]
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	f003 030f 	and.w	r3, r3, #15
 800b49c:	2101      	movs	r1, #1
 800b49e:	fa01 f303 	lsl.w	r3, r1, r3
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	68f9      	ldr	r1, [r7, #12]
 800b4a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	015a      	lsls	r2, r3, #5
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d155      	bne.n	800b570 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	015a      	lsls	r2, r3, #5
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	4413      	add	r3, r2
 800b4cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	68db      	ldr	r3, [r3, #12]
 800b4d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	791b      	ldrb	r3, [r3, #4]
 800b4de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b4e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	059b      	lsls	r3, r3, #22
 800b4e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	68ba      	ldr	r2, [r7, #8]
 800b4ec:	0151      	lsls	r1, r2, #5
 800b4ee:	68fa      	ldr	r2, [r7, #12]
 800b4f0:	440a      	add	r2, r1
 800b4f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4fe:	6013      	str	r3, [r2, #0]
 800b500:	e036      	b.n	800b570 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b508:	69da      	ldr	r2, [r3, #28]
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	f003 030f 	and.w	r3, r3, #15
 800b512:	2101      	movs	r1, #1
 800b514:	fa01 f303 	lsl.w	r3, r1, r3
 800b518:	041b      	lsls	r3, r3, #16
 800b51a:	68f9      	ldr	r1, [r7, #12]
 800b51c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b520:	4313      	orrs	r3, r2
 800b522:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	015a      	lsls	r2, r3, #5
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	4413      	add	r3, r2
 800b52c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b536:	2b00      	cmp	r3, #0
 800b538:	d11a      	bne.n	800b570 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	015a      	lsls	r2, r3, #5
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	4413      	add	r3, r2
 800b542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	791b      	ldrb	r3, [r3, #4]
 800b554:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b556:	430b      	orrs	r3, r1
 800b558:	4313      	orrs	r3, r2
 800b55a:	68ba      	ldr	r2, [r7, #8]
 800b55c:	0151      	lsls	r1, r2, #5
 800b55e:	68fa      	ldr	r2, [r7, #12]
 800b560:	440a      	add	r2, r1
 800b562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b56a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b56e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b570:	2300      	movs	r3, #0
}
 800b572:	4618      	mov	r0, r3
 800b574:	3714      	adds	r7, #20
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr
	...

0800b580 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b580:	b480      	push	{r7}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	785b      	ldrb	r3, [r3, #1]
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d161      	bne.n	800b660 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	015a      	lsls	r2, r3, #5
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5b2:	d11f      	bne.n	800b5f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	015a      	lsls	r2, r3, #5
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	68ba      	ldr	r2, [r7, #8]
 800b5c4:	0151      	lsls	r1, r2, #5
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	440a      	add	r2, r1
 800b5ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b5d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	015a      	lsls	r2, r3, #5
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	4413      	add	r3, r2
 800b5dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	0151      	lsls	r1, r2, #5
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	440a      	add	r2, r1
 800b5ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b5f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	f003 030f 	and.w	r3, r3, #15
 800b604:	2101      	movs	r1, #1
 800b606:	fa01 f303 	lsl.w	r3, r1, r3
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	43db      	mvns	r3, r3
 800b60e:	68f9      	ldr	r1, [r7, #12]
 800b610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b614:	4013      	ands	r3, r2
 800b616:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b61e:	69da      	ldr	r2, [r3, #28]
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	f003 030f 	and.w	r3, r3, #15
 800b628:	2101      	movs	r1, #1
 800b62a:	fa01 f303 	lsl.w	r3, r1, r3
 800b62e:	b29b      	uxth	r3, r3
 800b630:	43db      	mvns	r3, r3
 800b632:	68f9      	ldr	r1, [r7, #12]
 800b634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b638:	4013      	ands	r3, r2
 800b63a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	015a      	lsls	r2, r3, #5
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	4413      	add	r3, r2
 800b644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	0159      	lsls	r1, r3, #5
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	440b      	add	r3, r1
 800b652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b656:	4619      	mov	r1, r3
 800b658:	4b35      	ldr	r3, [pc, #212]	; (800b730 <USB_DeactivateEndpoint+0x1b0>)
 800b65a:	4013      	ands	r3, r2
 800b65c:	600b      	str	r3, [r1, #0]
 800b65e:	e060      	b.n	800b722 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	015a      	lsls	r2, r3, #5
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	4413      	add	r3, r2
 800b668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b672:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b676:	d11f      	bne.n	800b6b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	015a      	lsls	r2, r3, #5
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	4413      	add	r3, r2
 800b680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	68ba      	ldr	r2, [r7, #8]
 800b688:	0151      	lsls	r1, r2, #5
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	440a      	add	r2, r1
 800b68e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b692:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b696:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	015a      	lsls	r2, r3, #5
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	4413      	add	r3, r2
 800b6a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	68ba      	ldr	r2, [r7, #8]
 800b6a8:	0151      	lsls	r1, r2, #5
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	440a      	add	r2, r1
 800b6ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b6b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	f003 030f 	and.w	r3, r3, #15
 800b6c8:	2101      	movs	r1, #1
 800b6ca:	fa01 f303 	lsl.w	r3, r1, r3
 800b6ce:	041b      	lsls	r3, r3, #16
 800b6d0:	43db      	mvns	r3, r3
 800b6d2:	68f9      	ldr	r1, [r7, #12]
 800b6d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6d8:	4013      	ands	r3, r2
 800b6da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6e2:	69da      	ldr	r2, [r3, #28]
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	f003 030f 	and.w	r3, r3, #15
 800b6ec:	2101      	movs	r1, #1
 800b6ee:	fa01 f303 	lsl.w	r3, r1, r3
 800b6f2:	041b      	lsls	r3, r3, #16
 800b6f4:	43db      	mvns	r3, r3
 800b6f6:	68f9      	ldr	r1, [r7, #12]
 800b6f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	015a      	lsls	r2, r3, #5
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	4413      	add	r3, r2
 800b708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b70c:	681a      	ldr	r2, [r3, #0]
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	0159      	lsls	r1, r3, #5
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	440b      	add	r3, r1
 800b716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b71a:	4619      	mov	r1, r3
 800b71c:	4b05      	ldr	r3, [pc, #20]	; (800b734 <USB_DeactivateEndpoint+0x1b4>)
 800b71e:	4013      	ands	r3, r2
 800b720:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	3714      	adds	r7, #20
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr
 800b730:	ec337800 	.word	0xec337800
 800b734:	eff37800 	.word	0xeff37800

0800b738 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b08a      	sub	sp, #40	; 0x28
 800b73c:	af02      	add	r7, sp, #8
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	4613      	mov	r3, r2
 800b744:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	785b      	ldrb	r3, [r3, #1]
 800b754:	2b01      	cmp	r3, #1
 800b756:	f040 815c 	bne.w	800ba12 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d132      	bne.n	800b7c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b762:	69bb      	ldr	r3, [r7, #24]
 800b764:	015a      	lsls	r2, r3, #5
 800b766:	69fb      	ldr	r3, [r7, #28]
 800b768:	4413      	add	r3, r2
 800b76a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b76e:	691b      	ldr	r3, [r3, #16]
 800b770:	69ba      	ldr	r2, [r7, #24]
 800b772:	0151      	lsls	r1, r2, #5
 800b774:	69fa      	ldr	r2, [r7, #28]
 800b776:	440a      	add	r2, r1
 800b778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b77c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b780:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b784:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	015a      	lsls	r2, r3, #5
 800b78a:	69fb      	ldr	r3, [r7, #28]
 800b78c:	4413      	add	r3, r2
 800b78e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b792:	691b      	ldr	r3, [r3, #16]
 800b794:	69ba      	ldr	r2, [r7, #24]
 800b796:	0151      	lsls	r1, r2, #5
 800b798:	69fa      	ldr	r2, [r7, #28]
 800b79a:	440a      	add	r2, r1
 800b79c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	015a      	lsls	r2, r3, #5
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7b2:	691b      	ldr	r3, [r3, #16]
 800b7b4:	69ba      	ldr	r2, [r7, #24]
 800b7b6:	0151      	lsls	r1, r2, #5
 800b7b8:	69fa      	ldr	r2, [r7, #28]
 800b7ba:	440a      	add	r2, r1
 800b7bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7c0:	0cdb      	lsrs	r3, r3, #19
 800b7c2:	04db      	lsls	r3, r3, #19
 800b7c4:	6113      	str	r3, [r2, #16]
 800b7c6:	e074      	b.n	800b8b2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	015a      	lsls	r2, r3, #5
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7d4:	691b      	ldr	r3, [r3, #16]
 800b7d6:	69ba      	ldr	r2, [r7, #24]
 800b7d8:	0151      	lsls	r1, r2, #5
 800b7da:	69fa      	ldr	r2, [r7, #28]
 800b7dc:	440a      	add	r2, r1
 800b7de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7e2:	0cdb      	lsrs	r3, r3, #19
 800b7e4:	04db      	lsls	r3, r3, #19
 800b7e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	015a      	lsls	r2, r3, #5
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7f4:	691b      	ldr	r3, [r3, #16]
 800b7f6:	69ba      	ldr	r2, [r7, #24]
 800b7f8:	0151      	lsls	r1, r2, #5
 800b7fa:	69fa      	ldr	r2, [r7, #28]
 800b7fc:	440a      	add	r2, r1
 800b7fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b802:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b806:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b80a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	015a      	lsls	r2, r3, #5
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	4413      	add	r3, r2
 800b814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b818:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	6999      	ldr	r1, [r3, #24]
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	440b      	add	r3, r1
 800b824:	1e59      	subs	r1, r3, #1
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b82e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b830:	4b9d      	ldr	r3, [pc, #628]	; (800baa8 <USB_EPStartXfer+0x370>)
 800b832:	400b      	ands	r3, r1
 800b834:	69b9      	ldr	r1, [r7, #24]
 800b836:	0148      	lsls	r0, r1, #5
 800b838:	69f9      	ldr	r1, [r7, #28]
 800b83a:	4401      	add	r1, r0
 800b83c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b840:	4313      	orrs	r3, r2
 800b842:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b844:	69bb      	ldr	r3, [r7, #24]
 800b846:	015a      	lsls	r2, r3, #5
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	4413      	add	r3, r2
 800b84c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b850:	691a      	ldr	r2, [r3, #16]
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	699b      	ldr	r3, [r3, #24]
 800b856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b85a:	69b9      	ldr	r1, [r7, #24]
 800b85c:	0148      	lsls	r0, r1, #5
 800b85e:	69f9      	ldr	r1, [r7, #28]
 800b860:	4401      	add	r1, r0
 800b862:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b866:	4313      	orrs	r3, r2
 800b868:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	791b      	ldrb	r3, [r3, #4]
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d11f      	bne.n	800b8b2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b872:	69bb      	ldr	r3, [r7, #24]
 800b874:	015a      	lsls	r2, r3, #5
 800b876:	69fb      	ldr	r3, [r7, #28]
 800b878:	4413      	add	r3, r2
 800b87a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b87e:	691b      	ldr	r3, [r3, #16]
 800b880:	69ba      	ldr	r2, [r7, #24]
 800b882:	0151      	lsls	r1, r2, #5
 800b884:	69fa      	ldr	r2, [r7, #28]
 800b886:	440a      	add	r2, r1
 800b888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b88c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b890:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	015a      	lsls	r2, r3, #5
 800b896:	69fb      	ldr	r3, [r7, #28]
 800b898:	4413      	add	r3, r2
 800b89a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b89e:	691b      	ldr	r3, [r3, #16]
 800b8a0:	69ba      	ldr	r2, [r7, #24]
 800b8a2:	0151      	lsls	r1, r2, #5
 800b8a4:	69fa      	ldr	r2, [r7, #28]
 800b8a6:	440a      	add	r2, r1
 800b8a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b8b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b8b2:	79fb      	ldrb	r3, [r7, #7]
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d14b      	bne.n	800b950 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	695b      	ldr	r3, [r3, #20]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d009      	beq.n	800b8d4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b8c0:	69bb      	ldr	r3, [r7, #24]
 800b8c2:	015a      	lsls	r2, r3, #5
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	695b      	ldr	r3, [r3, #20]
 800b8d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	791b      	ldrb	r3, [r3, #4]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d128      	bne.n	800b92e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b8dc:	69fb      	ldr	r3, [r7, #28]
 800b8de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d110      	bne.n	800b90e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b8ec:	69bb      	ldr	r3, [r7, #24]
 800b8ee:	015a      	lsls	r2, r3, #5
 800b8f0:	69fb      	ldr	r3, [r7, #28]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	69ba      	ldr	r2, [r7, #24]
 800b8fc:	0151      	lsls	r1, r2, #5
 800b8fe:	69fa      	ldr	r2, [r7, #28]
 800b900:	440a      	add	r2, r1
 800b902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b906:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b90a:	6013      	str	r3, [r2, #0]
 800b90c:	e00f      	b.n	800b92e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b90e:	69bb      	ldr	r3, [r7, #24]
 800b910:	015a      	lsls	r2, r3, #5
 800b912:	69fb      	ldr	r3, [r7, #28]
 800b914:	4413      	add	r3, r2
 800b916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	69ba      	ldr	r2, [r7, #24]
 800b91e:	0151      	lsls	r1, r2, #5
 800b920:	69fa      	ldr	r2, [r7, #28]
 800b922:	440a      	add	r2, r1
 800b924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b92c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	015a      	lsls	r2, r3, #5
 800b932:	69fb      	ldr	r3, [r7, #28]
 800b934:	4413      	add	r3, r2
 800b936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	69ba      	ldr	r2, [r7, #24]
 800b93e:	0151      	lsls	r1, r2, #5
 800b940:	69fa      	ldr	r2, [r7, #28]
 800b942:	440a      	add	r2, r1
 800b944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b948:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b94c:	6013      	str	r3, [r2, #0]
 800b94e:	e133      	b.n	800bbb8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	015a      	lsls	r2, r3, #5
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	4413      	add	r3, r2
 800b958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	69ba      	ldr	r2, [r7, #24]
 800b960:	0151      	lsls	r1, r2, #5
 800b962:	69fa      	ldr	r2, [r7, #28]
 800b964:	440a      	add	r2, r1
 800b966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b96a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b96e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	791b      	ldrb	r3, [r3, #4]
 800b974:	2b01      	cmp	r3, #1
 800b976:	d015      	beq.n	800b9a4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	699b      	ldr	r3, [r3, #24]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	f000 811b 	beq.w	800bbb8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b982:	69fb      	ldr	r3, [r7, #28]
 800b984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	f003 030f 	and.w	r3, r3, #15
 800b992:	2101      	movs	r1, #1
 800b994:	fa01 f303 	lsl.w	r3, r1, r3
 800b998:	69f9      	ldr	r1, [r7, #28]
 800b99a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	634b      	str	r3, [r1, #52]	; 0x34
 800b9a2:	e109      	b.n	800bbb8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b9a4:	69fb      	ldr	r3, [r7, #28]
 800b9a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d110      	bne.n	800b9d6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	015a      	lsls	r2, r3, #5
 800b9b8:	69fb      	ldr	r3, [r7, #28]
 800b9ba:	4413      	add	r3, r2
 800b9bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	69ba      	ldr	r2, [r7, #24]
 800b9c4:	0151      	lsls	r1, r2, #5
 800b9c6:	69fa      	ldr	r2, [r7, #28]
 800b9c8:	440a      	add	r2, r1
 800b9ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b9d2:	6013      	str	r3, [r2, #0]
 800b9d4:	e00f      	b.n	800b9f6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	015a      	lsls	r2, r3, #5
 800b9da:	69fb      	ldr	r3, [r7, #28]
 800b9dc:	4413      	add	r3, r2
 800b9de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	69ba      	ldr	r2, [r7, #24]
 800b9e6:	0151      	lsls	r1, r2, #5
 800b9e8:	69fa      	ldr	r2, [r7, #28]
 800b9ea:	440a      	add	r2, r1
 800b9ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	6919      	ldr	r1, [r3, #16]
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	781a      	ldrb	r2, [r3, #0]
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	699b      	ldr	r3, [r3, #24]
 800ba02:	b298      	uxth	r0, r3
 800ba04:	79fb      	ldrb	r3, [r7, #7]
 800ba06:	9300      	str	r3, [sp, #0]
 800ba08:	4603      	mov	r3, r0
 800ba0a:	68f8      	ldr	r0, [r7, #12]
 800ba0c:	f000 fade 	bl	800bfcc <USB_WritePacket>
 800ba10:	e0d2      	b.n	800bbb8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	015a      	lsls	r2, r3, #5
 800ba16:	69fb      	ldr	r3, [r7, #28]
 800ba18:	4413      	add	r3, r2
 800ba1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba1e:	691b      	ldr	r3, [r3, #16]
 800ba20:	69ba      	ldr	r2, [r7, #24]
 800ba22:	0151      	lsls	r1, r2, #5
 800ba24:	69fa      	ldr	r2, [r7, #28]
 800ba26:	440a      	add	r2, r1
 800ba28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba2c:	0cdb      	lsrs	r3, r3, #19
 800ba2e:	04db      	lsls	r3, r3, #19
 800ba30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	015a      	lsls	r2, r3, #5
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	4413      	add	r3, r2
 800ba3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba3e:	691b      	ldr	r3, [r3, #16]
 800ba40:	69ba      	ldr	r2, [r7, #24]
 800ba42:	0151      	lsls	r1, r2, #5
 800ba44:	69fa      	ldr	r2, [r7, #28]
 800ba46:	440a      	add	r2, r1
 800ba48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ba50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ba54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	699b      	ldr	r3, [r3, #24]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d126      	bne.n	800baac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	015a      	lsls	r2, r3, #5
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	4413      	add	r3, r2
 800ba66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba6a:	691a      	ldr	r2, [r3, #16]
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba74:	69b9      	ldr	r1, [r7, #24]
 800ba76:	0148      	lsls	r0, r1, #5
 800ba78:	69f9      	ldr	r1, [r7, #28]
 800ba7a:	4401      	add	r1, r0
 800ba7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ba80:	4313      	orrs	r3, r2
 800ba82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba84:	69bb      	ldr	r3, [r7, #24]
 800ba86:	015a      	lsls	r2, r3, #5
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	69ba      	ldr	r2, [r7, #24]
 800ba94:	0151      	lsls	r1, r2, #5
 800ba96:	69fa      	ldr	r2, [r7, #28]
 800ba98:	440a      	add	r2, r1
 800ba9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800baa2:	6113      	str	r3, [r2, #16]
 800baa4:	e03a      	b.n	800bb1c <USB_EPStartXfer+0x3e4>
 800baa6:	bf00      	nop
 800baa8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	699a      	ldr	r2, [r3, #24]
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	4413      	add	r3, r2
 800bab6:	1e5a      	subs	r2, r3, #1
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bac0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	8afa      	ldrh	r2, [r7, #22]
 800bac8:	fb03 f202 	mul.w	r2, r3, r2
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bad0:	69bb      	ldr	r3, [r7, #24]
 800bad2:	015a      	lsls	r2, r3, #5
 800bad4:	69fb      	ldr	r3, [r7, #28]
 800bad6:	4413      	add	r3, r2
 800bad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800badc:	691a      	ldr	r2, [r3, #16]
 800bade:	8afb      	ldrh	r3, [r7, #22]
 800bae0:	04d9      	lsls	r1, r3, #19
 800bae2:	4b38      	ldr	r3, [pc, #224]	; (800bbc4 <USB_EPStartXfer+0x48c>)
 800bae4:	400b      	ands	r3, r1
 800bae6:	69b9      	ldr	r1, [r7, #24]
 800bae8:	0148      	lsls	r0, r1, #5
 800baea:	69f9      	ldr	r1, [r7, #28]
 800baec:	4401      	add	r1, r0
 800baee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800baf2:	4313      	orrs	r3, r2
 800baf4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800baf6:	69bb      	ldr	r3, [r7, #24]
 800baf8:	015a      	lsls	r2, r3, #5
 800bafa:	69fb      	ldr	r3, [r7, #28]
 800bafc:	4413      	add	r3, r2
 800bafe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb02:	691a      	ldr	r2, [r3, #16]
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	69db      	ldr	r3, [r3, #28]
 800bb08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb0c:	69b9      	ldr	r1, [r7, #24]
 800bb0e:	0148      	lsls	r0, r1, #5
 800bb10:	69f9      	ldr	r1, [r7, #28]
 800bb12:	4401      	add	r1, r0
 800bb14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bb1c:	79fb      	ldrb	r3, [r7, #7]
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	d10d      	bne.n	800bb3e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	691b      	ldr	r3, [r3, #16]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d009      	beq.n	800bb3e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	6919      	ldr	r1, [r3, #16]
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	015a      	lsls	r2, r3, #5
 800bb32:	69fb      	ldr	r3, [r7, #28]
 800bb34:	4413      	add	r3, r2
 800bb36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb3a:	460a      	mov	r2, r1
 800bb3c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	791b      	ldrb	r3, [r3, #4]
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d128      	bne.n	800bb98 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bb46:	69fb      	ldr	r3, [r7, #28]
 800bb48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d110      	bne.n	800bb78 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	015a      	lsls	r2, r3, #5
 800bb5a:	69fb      	ldr	r3, [r7, #28]
 800bb5c:	4413      	add	r3, r2
 800bb5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	69ba      	ldr	r2, [r7, #24]
 800bb66:	0151      	lsls	r1, r2, #5
 800bb68:	69fa      	ldr	r2, [r7, #28]
 800bb6a:	440a      	add	r2, r1
 800bb6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bb74:	6013      	str	r3, [r2, #0]
 800bb76:	e00f      	b.n	800bb98 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	015a      	lsls	r2, r3, #5
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	4413      	add	r3, r2
 800bb80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	69ba      	ldr	r2, [r7, #24]
 800bb88:	0151      	lsls	r1, r2, #5
 800bb8a:	69fa      	ldr	r2, [r7, #28]
 800bb8c:	440a      	add	r2, r1
 800bb8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bb98:	69bb      	ldr	r3, [r7, #24]
 800bb9a:	015a      	lsls	r2, r3, #5
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	4413      	add	r3, r2
 800bba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	69ba      	ldr	r2, [r7, #24]
 800bba8:	0151      	lsls	r1, r2, #5
 800bbaa:	69fa      	ldr	r2, [r7, #28]
 800bbac:	440a      	add	r2, r1
 800bbae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bbb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bbb8:	2300      	movs	r3, #0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3720      	adds	r7, #32
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	1ff80000 	.word	0x1ff80000

0800bbc8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b087      	sub	sp, #28
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	4613      	mov	r3, r2
 800bbd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	785b      	ldrb	r3, [r3, #1]
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	f040 80ce 	bne.w	800bd86 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	699b      	ldr	r3, [r3, #24]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d132      	bne.n	800bc58 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	015a      	lsls	r2, r3, #5
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbfe:	691b      	ldr	r3, [r3, #16]
 800bc00:	693a      	ldr	r2, [r7, #16]
 800bc02:	0151      	lsls	r1, r2, #5
 800bc04:	697a      	ldr	r2, [r7, #20]
 800bc06:	440a      	add	r2, r1
 800bc08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bc10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bc14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	015a      	lsls	r2, r3, #5
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	4413      	add	r3, r2
 800bc1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc22:	691b      	ldr	r3, [r3, #16]
 800bc24:	693a      	ldr	r2, [r7, #16]
 800bc26:	0151      	lsls	r1, r2, #5
 800bc28:	697a      	ldr	r2, [r7, #20]
 800bc2a:	440a      	add	r2, r1
 800bc2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	015a      	lsls	r2, r3, #5
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	693a      	ldr	r2, [r7, #16]
 800bc46:	0151      	lsls	r1, r2, #5
 800bc48:	697a      	ldr	r2, [r7, #20]
 800bc4a:	440a      	add	r2, r1
 800bc4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc50:	0cdb      	lsrs	r3, r3, #19
 800bc52:	04db      	lsls	r3, r3, #19
 800bc54:	6113      	str	r3, [r2, #16]
 800bc56:	e04e      	b.n	800bcf6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	015a      	lsls	r2, r3, #5
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	4413      	add	r3, r2
 800bc60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc64:	691b      	ldr	r3, [r3, #16]
 800bc66:	693a      	ldr	r2, [r7, #16]
 800bc68:	0151      	lsls	r1, r2, #5
 800bc6a:	697a      	ldr	r2, [r7, #20]
 800bc6c:	440a      	add	r2, r1
 800bc6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc72:	0cdb      	lsrs	r3, r3, #19
 800bc74:	04db      	lsls	r3, r3, #19
 800bc76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	015a      	lsls	r2, r3, #5
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	4413      	add	r3, r2
 800bc80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc84:	691b      	ldr	r3, [r3, #16]
 800bc86:	693a      	ldr	r2, [r7, #16]
 800bc88:	0151      	lsls	r1, r2, #5
 800bc8a:	697a      	ldr	r2, [r7, #20]
 800bc8c:	440a      	add	r2, r1
 800bc8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bc96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bc9a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	699a      	ldr	r2, [r3, #24]
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d903      	bls.n	800bcb0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	68da      	ldr	r2, [r3, #12]
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	015a      	lsls	r2, r3, #5
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcbc:	691b      	ldr	r3, [r3, #16]
 800bcbe:	693a      	ldr	r2, [r7, #16]
 800bcc0:	0151      	lsls	r1, r2, #5
 800bcc2:	697a      	ldr	r2, [r7, #20]
 800bcc4:	440a      	add	r2, r1
 800bcc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bcce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	015a      	lsls	r2, r3, #5
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcdc:	691a      	ldr	r2, [r3, #16]
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	699b      	ldr	r3, [r3, #24]
 800bce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bce6:	6939      	ldr	r1, [r7, #16]
 800bce8:	0148      	lsls	r0, r1, #5
 800bcea:	6979      	ldr	r1, [r7, #20]
 800bcec:	4401      	add	r1, r0
 800bcee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bcf6:	79fb      	ldrb	r3, [r7, #7]
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d11e      	bne.n	800bd3a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	695b      	ldr	r3, [r3, #20]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d009      	beq.n	800bd18 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	015a      	lsls	r2, r3, #5
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	4413      	add	r3, r2
 800bd0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd10:	461a      	mov	r2, r3
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	695b      	ldr	r3, [r3, #20]
 800bd16:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	015a      	lsls	r2, r3, #5
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	4413      	add	r3, r2
 800bd20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	693a      	ldr	r2, [r7, #16]
 800bd28:	0151      	lsls	r1, r2, #5
 800bd2a:	697a      	ldr	r2, [r7, #20]
 800bd2c:	440a      	add	r2, r1
 800bd2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd36:	6013      	str	r3, [r2, #0]
 800bd38:	e097      	b.n	800be6a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	015a      	lsls	r2, r3, #5
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	4413      	add	r3, r2
 800bd42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	693a      	ldr	r2, [r7, #16]
 800bd4a:	0151      	lsls	r1, r2, #5
 800bd4c:	697a      	ldr	r2, [r7, #20]
 800bd4e:	440a      	add	r2, r1
 800bd50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd58:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	699b      	ldr	r3, [r3, #24]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	f000 8083 	beq.w	800be6a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	f003 030f 	and.w	r3, r3, #15
 800bd74:	2101      	movs	r1, #1
 800bd76:	fa01 f303 	lsl.w	r3, r1, r3
 800bd7a:	6979      	ldr	r1, [r7, #20]
 800bd7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd80:	4313      	orrs	r3, r2
 800bd82:	634b      	str	r3, [r1, #52]	; 0x34
 800bd84:	e071      	b.n	800be6a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	015a      	lsls	r2, r3, #5
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd92:	691b      	ldr	r3, [r3, #16]
 800bd94:	693a      	ldr	r2, [r7, #16]
 800bd96:	0151      	lsls	r1, r2, #5
 800bd98:	697a      	ldr	r2, [r7, #20]
 800bd9a:	440a      	add	r2, r1
 800bd9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bda0:	0cdb      	lsrs	r3, r3, #19
 800bda2:	04db      	lsls	r3, r3, #19
 800bda4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	015a      	lsls	r2, r3, #5
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	4413      	add	r3, r2
 800bdae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdb2:	691b      	ldr	r3, [r3, #16]
 800bdb4:	693a      	ldr	r2, [r7, #16]
 800bdb6:	0151      	lsls	r1, r2, #5
 800bdb8:	697a      	ldr	r2, [r7, #20]
 800bdba:	440a      	add	r2, r1
 800bdbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bdc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bdc8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	699b      	ldr	r3, [r3, #24]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d003      	beq.n	800bdda <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	68da      	ldr	r2, [r3, #12]
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	68da      	ldr	r2, [r3, #12]
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	015a      	lsls	r2, r3, #5
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	4413      	add	r3, r2
 800bdea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdee:	691b      	ldr	r3, [r3, #16]
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	0151      	lsls	r1, r2, #5
 800bdf4:	697a      	ldr	r2, [r7, #20]
 800bdf6:	440a      	add	r2, r1
 800bdf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	015a      	lsls	r2, r3, #5
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	4413      	add	r3, r2
 800be0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be0e:	691a      	ldr	r2, [r3, #16]
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	69db      	ldr	r3, [r3, #28]
 800be14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be18:	6939      	ldr	r1, [r7, #16]
 800be1a:	0148      	lsls	r0, r1, #5
 800be1c:	6979      	ldr	r1, [r7, #20]
 800be1e:	4401      	add	r1, r0
 800be20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800be24:	4313      	orrs	r3, r2
 800be26:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800be28:	79fb      	ldrb	r3, [r7, #7]
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d10d      	bne.n	800be4a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d009      	beq.n	800be4a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	6919      	ldr	r1, [r3, #16]
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	015a      	lsls	r2, r3, #5
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	4413      	add	r3, r2
 800be42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be46:	460a      	mov	r2, r1
 800be48:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	015a      	lsls	r2, r3, #5
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	4413      	add	r3, r2
 800be52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	693a      	ldr	r2, [r7, #16]
 800be5a:	0151      	lsls	r1, r2, #5
 800be5c:	697a      	ldr	r2, [r7, #20]
 800be5e:	440a      	add	r2, r1
 800be60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be6a:	2300      	movs	r3, #0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	371c      	adds	r7, #28
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800be78:	b480      	push	{r7}
 800be7a:	b087      	sub	sp, #28
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800be82:	2300      	movs	r3, #0
 800be84:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800be86:	2300      	movs	r3, #0
 800be88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	785b      	ldrb	r3, [r3, #1]
 800be92:	2b01      	cmp	r3, #1
 800be94:	d14a      	bne.n	800bf2c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	015a      	lsls	r2, r3, #5
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	4413      	add	r3, r2
 800bea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800beaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800beae:	f040 8086 	bne.w	800bfbe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	015a      	lsls	r2, r3, #5
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	4413      	add	r3, r2
 800bebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	683a      	ldr	r2, [r7, #0]
 800bec4:	7812      	ldrb	r2, [r2, #0]
 800bec6:	0151      	lsls	r1, r2, #5
 800bec8:	693a      	ldr	r2, [r7, #16]
 800beca:	440a      	add	r2, r1
 800becc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bed0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bed4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	015a      	lsls	r2, r3, #5
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	4413      	add	r3, r2
 800bee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	683a      	ldr	r2, [r7, #0]
 800bee8:	7812      	ldrb	r2, [r2, #0]
 800beea:	0151      	lsls	r1, r2, #5
 800beec:	693a      	ldr	r2, [r7, #16]
 800beee:	440a      	add	r2, r1
 800bef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bef4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bef8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	3301      	adds	r3, #1
 800befe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f242 7210 	movw	r2, #10000	; 0x2710
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d902      	bls.n	800bf10 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	75fb      	strb	r3, [r7, #23]
          break;
 800bf0e:	e056      	b.n	800bfbe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	015a      	lsls	r2, r3, #5
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	4413      	add	r3, r2
 800bf1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf28:	d0e7      	beq.n	800befa <USB_EPStopXfer+0x82>
 800bf2a:	e048      	b.n	800bfbe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	015a      	lsls	r2, r3, #5
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	4413      	add	r3, r2
 800bf36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf44:	d13b      	bne.n	800bfbe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	015a      	lsls	r2, r3, #5
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	4413      	add	r3, r2
 800bf50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	683a      	ldr	r2, [r7, #0]
 800bf58:	7812      	ldrb	r2, [r2, #0]
 800bf5a:	0151      	lsls	r1, r2, #5
 800bf5c:	693a      	ldr	r2, [r7, #16]
 800bf5e:	440a      	add	r2, r1
 800bf60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bf68:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	015a      	lsls	r2, r3, #5
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	4413      	add	r3, r2
 800bf74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	683a      	ldr	r2, [r7, #0]
 800bf7c:	7812      	ldrb	r2, [r2, #0]
 800bf7e:	0151      	lsls	r1, r2, #5
 800bf80:	693a      	ldr	r2, [r7, #16]
 800bf82:	440a      	add	r2, r1
 800bf84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	3301      	adds	r3, #1
 800bf92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f242 7210 	movw	r2, #10000	; 0x2710
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d902      	bls.n	800bfa4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	75fb      	strb	r3, [r7, #23]
          break;
 800bfa2:	e00c      	b.n	800bfbe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	015a      	lsls	r2, r3, #5
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	4413      	add	r3, r2
 800bfae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bfb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bfbc:	d0e7      	beq.n	800bf8e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bfbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	371c      	adds	r7, #28
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b089      	sub	sp, #36	; 0x24
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	4611      	mov	r1, r2
 800bfd8:	461a      	mov	r2, r3
 800bfda:	460b      	mov	r3, r1
 800bfdc:	71fb      	strb	r3, [r7, #7]
 800bfde:	4613      	mov	r3, r2
 800bfe0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bfea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d123      	bne.n	800c03a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bff2:	88bb      	ldrh	r3, [r7, #4]
 800bff4:	3303      	adds	r3, #3
 800bff6:	089b      	lsrs	r3, r3, #2
 800bff8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bffa:	2300      	movs	r3, #0
 800bffc:	61bb      	str	r3, [r7, #24]
 800bffe:	e018      	b.n	800c032 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c000:	79fb      	ldrb	r3, [r7, #7]
 800c002:	031a      	lsls	r2, r3, #12
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	4413      	add	r3, r2
 800c008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c00c:	461a      	mov	r2, r3
 800c00e:	69fb      	ldr	r3, [r7, #28]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	3301      	adds	r3, #1
 800c018:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c01a:	69fb      	ldr	r3, [r7, #28]
 800c01c:	3301      	adds	r3, #1
 800c01e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	3301      	adds	r3, #1
 800c024:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c026:	69fb      	ldr	r3, [r7, #28]
 800c028:	3301      	adds	r3, #1
 800c02a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	3301      	adds	r3, #1
 800c030:	61bb      	str	r3, [r7, #24]
 800c032:	69ba      	ldr	r2, [r7, #24]
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	429a      	cmp	r2, r3
 800c038:	d3e2      	bcc.n	800c000 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c03a:	2300      	movs	r3, #0
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3724      	adds	r7, #36	; 0x24
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr

0800c048 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c048:	b480      	push	{r7}
 800c04a:	b08b      	sub	sp, #44	; 0x2c
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	60b9      	str	r1, [r7, #8]
 800c052:	4613      	mov	r3, r2
 800c054:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c05e:	88fb      	ldrh	r3, [r7, #6]
 800c060:	089b      	lsrs	r3, r3, #2
 800c062:	b29b      	uxth	r3, r3
 800c064:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c066:	88fb      	ldrh	r3, [r7, #6]
 800c068:	f003 0303 	and.w	r3, r3, #3
 800c06c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c06e:	2300      	movs	r3, #0
 800c070:	623b      	str	r3, [r7, #32]
 800c072:	e014      	b.n	800c09e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c07a:	681a      	ldr	r2, [r3, #0]
 800c07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07e:	601a      	str	r2, [r3, #0]
    pDest++;
 800c080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c082:	3301      	adds	r3, #1
 800c084:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c088:	3301      	adds	r3, #1
 800c08a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08e:	3301      	adds	r3, #1
 800c090:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c094:	3301      	adds	r3, #1
 800c096:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c098:	6a3b      	ldr	r3, [r7, #32]
 800c09a:	3301      	adds	r3, #1
 800c09c:	623b      	str	r3, [r7, #32]
 800c09e:	6a3a      	ldr	r2, [r7, #32]
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d3e6      	bcc.n	800c074 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c0a6:	8bfb      	ldrh	r3, [r7, #30]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d01e      	beq.n	800c0ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c0b0:	69bb      	ldr	r3, [r7, #24]
 800c0b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	f107 0310 	add.w	r3, r7, #16
 800c0bc:	6812      	ldr	r2, [r2, #0]
 800c0be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c0c0:	693a      	ldr	r2, [r7, #16]
 800c0c2:	6a3b      	ldr	r3, [r7, #32]
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	00db      	lsls	r3, r3, #3
 800c0c8:	fa22 f303 	lsr.w	r3, r2, r3
 800c0cc:	b2da      	uxtb	r2, r3
 800c0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d0:	701a      	strb	r2, [r3, #0]
      i++;
 800c0d2:	6a3b      	ldr	r3, [r7, #32]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	623b      	str	r3, [r7, #32]
      pDest++;
 800c0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0da:	3301      	adds	r3, #1
 800c0dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c0de:	8bfb      	ldrh	r3, [r7, #30]
 800c0e0:	3b01      	subs	r3, #1
 800c0e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c0e4:	8bfb      	ldrh	r3, [r7, #30]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d1ea      	bne.n	800c0c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	372c      	adds	r7, #44	; 0x2c
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b085      	sub	sp, #20
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	785b      	ldrb	r3, [r3, #1]
 800c110:	2b01      	cmp	r3, #1
 800c112:	d12c      	bne.n	800c16e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	015a      	lsls	r2, r3, #5
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	4413      	add	r3, r2
 800c11c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	db12      	blt.n	800c14c <USB_EPSetStall+0x54>
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00f      	beq.n	800c14c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	015a      	lsls	r2, r3, #5
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	4413      	add	r3, r2
 800c134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	68ba      	ldr	r2, [r7, #8]
 800c13c:	0151      	lsls	r1, r2, #5
 800c13e:	68fa      	ldr	r2, [r7, #12]
 800c140:	440a      	add	r2, r1
 800c142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c146:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c14a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	015a      	lsls	r2, r3, #5
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	4413      	add	r3, r2
 800c154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	68ba      	ldr	r2, [r7, #8]
 800c15c:	0151      	lsls	r1, r2, #5
 800c15e:	68fa      	ldr	r2, [r7, #12]
 800c160:	440a      	add	r2, r1
 800c162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c166:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c16a:	6013      	str	r3, [r2, #0]
 800c16c:	e02b      	b.n	800c1c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	015a      	lsls	r2, r3, #5
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	4413      	add	r3, r2
 800c176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	db12      	blt.n	800c1a6 <USB_EPSetStall+0xae>
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d00f      	beq.n	800c1a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	015a      	lsls	r2, r3, #5
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	4413      	add	r3, r2
 800c18e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	68ba      	ldr	r2, [r7, #8]
 800c196:	0151      	lsls	r1, r2, #5
 800c198:	68fa      	ldr	r2, [r7, #12]
 800c19a:	440a      	add	r2, r1
 800c19c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c1a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	015a      	lsls	r2, r3, #5
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	68ba      	ldr	r2, [r7, #8]
 800c1b6:	0151      	lsls	r1, r2, #5
 800c1b8:	68fa      	ldr	r2, [r7, #12]
 800c1ba:	440a      	add	r2, r1
 800c1bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c1c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c1c6:	2300      	movs	r3, #0
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3714      	adds	r7, #20
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b085      	sub	sp, #20
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	785b      	ldrb	r3, [r3, #1]
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	d128      	bne.n	800c242 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	015a      	lsls	r2, r3, #5
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	68ba      	ldr	r2, [r7, #8]
 800c200:	0151      	lsls	r1, r2, #5
 800c202:	68fa      	ldr	r2, [r7, #12]
 800c204:	440a      	add	r2, r1
 800c206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c20a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c20e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	791b      	ldrb	r3, [r3, #4]
 800c214:	2b03      	cmp	r3, #3
 800c216:	d003      	beq.n	800c220 <USB_EPClearStall+0x4c>
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	791b      	ldrb	r3, [r3, #4]
 800c21c:	2b02      	cmp	r3, #2
 800c21e:	d138      	bne.n	800c292 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	015a      	lsls	r2, r3, #5
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	4413      	add	r3, r2
 800c228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	68ba      	ldr	r2, [r7, #8]
 800c230:	0151      	lsls	r1, r2, #5
 800c232:	68fa      	ldr	r2, [r7, #12]
 800c234:	440a      	add	r2, r1
 800c236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c23a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c23e:	6013      	str	r3, [r2, #0]
 800c240:	e027      	b.n	800c292 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	015a      	lsls	r2, r3, #5
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	4413      	add	r3, r2
 800c24a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	68ba      	ldr	r2, [r7, #8]
 800c252:	0151      	lsls	r1, r2, #5
 800c254:	68fa      	ldr	r2, [r7, #12]
 800c256:	440a      	add	r2, r1
 800c258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c25c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c260:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	791b      	ldrb	r3, [r3, #4]
 800c266:	2b03      	cmp	r3, #3
 800c268:	d003      	beq.n	800c272 <USB_EPClearStall+0x9e>
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	791b      	ldrb	r3, [r3, #4]
 800c26e:	2b02      	cmp	r3, #2
 800c270:	d10f      	bne.n	800c292 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	015a      	lsls	r2, r3, #5
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	4413      	add	r3, r2
 800c27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	68ba      	ldr	r2, [r7, #8]
 800c282:	0151      	lsls	r1, r2, #5
 800c284:	68fa      	ldr	r2, [r7, #12]
 800c286:	440a      	add	r2, r1
 800c288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c28c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c290:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c292:	2300      	movs	r3, #0
}
 800c294:	4618      	mov	r0, r3
 800c296:	3714      	adds	r7, #20
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr

0800c2a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b085      	sub	sp, #20
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	68fa      	ldr	r2, [r7, #12]
 800c2ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c2be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c2c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	78fb      	ldrb	r3, [r7, #3]
 800c2ce:	011b      	lsls	r3, r3, #4
 800c2d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c2d4:	68f9      	ldr	r1, [r7, #12]
 800c2d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c2de:	2300      	movs	r3, #0
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3714      	adds	r7, #20
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr

0800c2ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b085      	sub	sp, #20
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	68fa      	ldr	r2, [r7, #12]
 800c302:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c306:	f023 0303 	bic.w	r3, r3, #3
 800c30a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	68fa      	ldr	r2, [r7, #12]
 800c316:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c31a:	f023 0302 	bic.w	r3, r3, #2
 800c31e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3714      	adds	r7, #20
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr

0800c32e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c32e:	b480      	push	{r7}
 800c330:	b085      	sub	sp, #20
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	68fa      	ldr	r2, [r7, #12]
 800c344:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c348:	f023 0303 	bic.w	r3, r3, #3
 800c34c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	68fa      	ldr	r2, [r7, #12]
 800c358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c35c:	f043 0302 	orr.w	r3, r3, #2
 800c360:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c362:	2300      	movs	r3, #0
}
 800c364:	4618      	mov	r0, r3
 800c366:	3714      	adds	r7, #20
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c370:	b480      	push	{r7}
 800c372:	b085      	sub	sp, #20
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	695b      	ldr	r3, [r3, #20]
 800c37c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	699b      	ldr	r3, [r3, #24]
 800c382:	68fa      	ldr	r2, [r7, #12]
 800c384:	4013      	ands	r3, r2
 800c386:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c388:	68fb      	ldr	r3, [r7, #12]
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3714      	adds	r7, #20
 800c38e:	46bd      	mov	sp, r7
 800c390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c394:	4770      	bx	lr

0800c396 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c396:	b480      	push	{r7}
 800c398:	b085      	sub	sp, #20
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3a8:	699b      	ldr	r3, [r3, #24]
 800c3aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3b2:	69db      	ldr	r3, [r3, #28]
 800c3b4:	68ba      	ldr	r2, [r7, #8]
 800c3b6:	4013      	ands	r3, r2
 800c3b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	0c1b      	lsrs	r3, r3, #16
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3714      	adds	r7, #20
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr

0800c3ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c3ca:	b480      	push	{r7}
 800c3cc:	b085      	sub	sp, #20
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3dc:	699b      	ldr	r3, [r3, #24]
 800c3de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3e6:	69db      	ldr	r3, [r3, #28]
 800c3e8:	68ba      	ldr	r2, [r7, #8]
 800c3ea:	4013      	ands	r3, r2
 800c3ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	b29b      	uxth	r3, r3
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3714      	adds	r7, #20
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fc:	4770      	bx	lr

0800c3fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c3fe:	b480      	push	{r7}
 800c400:	b085      	sub	sp, #20
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
 800c406:	460b      	mov	r3, r1
 800c408:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c40e:	78fb      	ldrb	r3, [r7, #3]
 800c410:	015a      	lsls	r2, r3, #5
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	4413      	add	r3, r2
 800c416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c424:	695b      	ldr	r3, [r3, #20]
 800c426:	68ba      	ldr	r2, [r7, #8]
 800c428:	4013      	ands	r3, r2
 800c42a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c42c:	68bb      	ldr	r3, [r7, #8]
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3714      	adds	r7, #20
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr

0800c43a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c43a:	b480      	push	{r7}
 800c43c:	b087      	sub	sp, #28
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
 800c442:	460b      	mov	r3, r1
 800c444:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c450:	691b      	ldr	r3, [r3, #16]
 800c452:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c45a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c45c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c45e:	78fb      	ldrb	r3, [r7, #3]
 800c460:	f003 030f 	and.w	r3, r3, #15
 800c464:	68fa      	ldr	r2, [r7, #12]
 800c466:	fa22 f303 	lsr.w	r3, r2, r3
 800c46a:	01db      	lsls	r3, r3, #7
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	693a      	ldr	r2, [r7, #16]
 800c470:	4313      	orrs	r3, r2
 800c472:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c474:	78fb      	ldrb	r3, [r7, #3]
 800c476:	015a      	lsls	r2, r3, #5
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	4413      	add	r3, r2
 800c47c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c480:	689b      	ldr	r3, [r3, #8]
 800c482:	693a      	ldr	r2, [r7, #16]
 800c484:	4013      	ands	r3, r2
 800c486:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c488:	68bb      	ldr	r3, [r7, #8]
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	371c      	adds	r7, #28
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr

0800c496 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c496:	b480      	push	{r7}
 800c498:	b083      	sub	sp, #12
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	695b      	ldr	r3, [r3, #20]
 800c4a2:	f003 0301 	and.w	r3, r3, #1
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	370c      	adds	r7, #12
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr

0800c4b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c4b2:	b480      	push	{r7}
 800c4b4:	b085      	sub	sp, #20
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	68fa      	ldr	r2, [r7, #12]
 800c4c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c4d0:	f023 0307 	bic.w	r3, r3, #7
 800c4d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	68fa      	ldr	r2, [r7, #12]
 800c4e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c4e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c4ea:	2300      	movs	r3, #0
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3714      	adds	r7, #20
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b087      	sub	sp, #28
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	60f8      	str	r0, [r7, #12]
 800c500:	460b      	mov	r3, r1
 800c502:	607a      	str	r2, [r7, #4]
 800c504:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	333c      	adds	r3, #60	; 0x3c
 800c50e:	3304      	adds	r3, #4
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	4a26      	ldr	r2, [pc, #152]	; (800c5b0 <USB_EP0_OutStart+0xb8>)
 800c518:	4293      	cmp	r3, r2
 800c51a:	d90a      	bls.n	800c532 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c52c:	d101      	bne.n	800c532 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c52e:	2300      	movs	r3, #0
 800c530:	e037      	b.n	800c5a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c538:	461a      	mov	r2, r3
 800c53a:	2300      	movs	r3, #0
 800c53c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c544:	691b      	ldr	r3, [r3, #16]
 800c546:	697a      	ldr	r2, [r7, #20]
 800c548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c54c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c550:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c558:	691b      	ldr	r3, [r3, #16]
 800c55a:	697a      	ldr	r2, [r7, #20]
 800c55c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c560:	f043 0318 	orr.w	r3, r3, #24
 800c564:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c56c:	691b      	ldr	r3, [r3, #16]
 800c56e:	697a      	ldr	r2, [r7, #20]
 800c570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c574:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c578:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c57a:	7afb      	ldrb	r3, [r7, #11]
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d10f      	bne.n	800c5a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c586:	461a      	mov	r2, r3
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	697a      	ldr	r2, [r7, #20]
 800c596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c59a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c59e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c5a0:	2300      	movs	r3, #0
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	371c      	adds	r7, #28
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr
 800c5ae:	bf00      	nop
 800c5b0:	4f54300a 	.word	0x4f54300a

0800c5b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	4a13      	ldr	r2, [pc, #76]	; (800c618 <USB_CoreReset+0x64>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d901      	bls.n	800c5d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c5ce:	2303      	movs	r3, #3
 800c5d0:	e01b      	b.n	800c60a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	691b      	ldr	r3, [r3, #16]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	daf2      	bge.n	800c5c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	691b      	ldr	r3, [r3, #16]
 800c5e2:	f043 0201 	orr.w	r2, r3, #1
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	4a09      	ldr	r2, [pc, #36]	; (800c618 <USB_CoreReset+0x64>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d901      	bls.n	800c5fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	e006      	b.n	800c60a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	691b      	ldr	r3, [r3, #16]
 800c600:	f003 0301 	and.w	r3, r3, #1
 800c604:	2b01      	cmp	r3, #1
 800c606:	d0f0      	beq.n	800c5ea <USB_CoreReset+0x36>

  return HAL_OK;
 800c608:	2300      	movs	r3, #0
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3714      	adds	r7, #20
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr
 800c616:	bf00      	nop
 800c618:	00030d40 	.word	0x00030d40

0800c61c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c620:	4904      	ldr	r1, [pc, #16]	; (800c634 <MX_FATFS_Init+0x18>)
 800c622:	4805      	ldr	r0, [pc, #20]	; (800c638 <MX_FATFS_Init+0x1c>)
 800c624:	f002 fd76 	bl	800f114 <FATFS_LinkDriver>
 800c628:	4603      	mov	r3, r0
 800c62a:	461a      	mov	r2, r3
 800c62c:	4b03      	ldr	r3, [pc, #12]	; (800c63c <MX_FATFS_Init+0x20>)
 800c62e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c630:	bf00      	nop
 800c632:	bd80      	pop	{r7, pc}
 800c634:	20000708 	.word	0x20000708
 800c638:	2000000c 	.word	0x2000000c
 800c63c:	20000704 	.word	0x20000704

0800c640 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	4603      	mov	r3, r0
 800c648:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800c64a:	4b06      	ldr	r3, [pc, #24]	; (800c664 <USER_initialize+0x24>)
 800c64c:	2201      	movs	r2, #1
 800c64e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c650:	4b04      	ldr	r3, [pc, #16]	; (800c664 <USER_initialize+0x24>)
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800c656:	4618      	mov	r0, r3
 800c658:	370c      	adds	r7, #12
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr
 800c662:	bf00      	nop
 800c664:	20000009 	.word	0x20000009

0800c668 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c668:	b480      	push	{r7}
 800c66a:	b083      	sub	sp, #12
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	4603      	mov	r3, r0
 800c670:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800c672:	4b06      	ldr	r3, [pc, #24]	; (800c68c <USER_status+0x24>)
 800c674:	2201      	movs	r2, #1
 800c676:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c678:	4b04      	ldr	r3, [pc, #16]	; (800c68c <USER_status+0x24>)
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800c67e:	4618      	mov	r0, r3
 800c680:	370c      	adds	r7, #12
 800c682:	46bd      	mov	sp, r7
 800c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c688:	4770      	bx	lr
 800c68a:	bf00      	nop
 800c68c:	20000009 	.word	0x20000009

0800c690 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c690:	b480      	push	{r7}
 800c692:	b085      	sub	sp, #20
 800c694:	af00      	add	r7, sp, #0
 800c696:	60b9      	str	r1, [r7, #8]
 800c698:	607a      	str	r2, [r7, #4]
 800c69a:	603b      	str	r3, [r7, #0]
 800c69c:	4603      	mov	r3, r0
 800c69e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800c6a0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3714      	adds	r7, #20
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr

0800c6ae <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c6ae:	b480      	push	{r7}
 800c6b0:	b085      	sub	sp, #20
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	60b9      	str	r1, [r7, #8]
 800c6b6:	607a      	str	r2, [r7, #4]
 800c6b8:	603b      	str	r3, [r7, #0]
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800c6be:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3714      	adds	r7, #20
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b085      	sub	sp, #20
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	603a      	str	r2, [r7, #0]
 800c6d6:	71fb      	strb	r3, [r7, #7]
 800c6d8:	460b      	mov	r3, r1
 800c6da:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800c6dc:	2301      	movs	r3, #1
 800c6de:	73fb      	strb	r3, [r7, #15]
    return res;
 800c6e0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3714      	adds	r7, #20
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr
	...

0800c6f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c6fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c700:	f007 fb22 	bl	8013d48 <USBD_static_malloc>
 800c704:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d109      	bne.n	800c720 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	32b0      	adds	r2, #176	; 0xb0
 800c716:	2100      	movs	r1, #0
 800c718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c71c:	2302      	movs	r3, #2
 800c71e:	e0d4      	b.n	800c8ca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c720:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c724:	2100      	movs	r1, #0
 800c726:	68f8      	ldr	r0, [r7, #12]
 800c728:	f007 fc88 	bl	801403c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	32b0      	adds	r2, #176	; 0xb0
 800c736:	68f9      	ldr	r1, [r7, #12]
 800c738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	32b0      	adds	r2, #176	; 0xb0
 800c746:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	7c1b      	ldrb	r3, [r3, #16]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d138      	bne.n	800c7ca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c758:	4b5e      	ldr	r3, [pc, #376]	; (800c8d4 <USBD_CDC_Init+0x1e4>)
 800c75a:	7819      	ldrb	r1, [r3, #0]
 800c75c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c760:	2202      	movs	r2, #2
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f007 f97f 	bl	8013a66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c768:	4b5a      	ldr	r3, [pc, #360]	; (800c8d4 <USBD_CDC_Init+0x1e4>)
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	f003 020f 	and.w	r2, r3, #15
 800c770:	6879      	ldr	r1, [r7, #4]
 800c772:	4613      	mov	r3, r2
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	4413      	add	r3, r2
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	440b      	add	r3, r1
 800c77c:	3324      	adds	r3, #36	; 0x24
 800c77e:	2201      	movs	r2, #1
 800c780:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c782:	4b55      	ldr	r3, [pc, #340]	; (800c8d8 <USBD_CDC_Init+0x1e8>)
 800c784:	7819      	ldrb	r1, [r3, #0]
 800c786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c78a:	2202      	movs	r2, #2
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f007 f96a 	bl	8013a66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c792:	4b51      	ldr	r3, [pc, #324]	; (800c8d8 <USBD_CDC_Init+0x1e8>)
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	f003 020f 	and.w	r2, r3, #15
 800c79a:	6879      	ldr	r1, [r7, #4]
 800c79c:	4613      	mov	r3, r2
 800c79e:	009b      	lsls	r3, r3, #2
 800c7a0:	4413      	add	r3, r2
 800c7a2:	009b      	lsls	r3, r3, #2
 800c7a4:	440b      	add	r3, r1
 800c7a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c7ae:	4b4b      	ldr	r3, [pc, #300]	; (800c8dc <USBD_CDC_Init+0x1ec>)
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	f003 020f 	and.w	r2, r3, #15
 800c7b6:	6879      	ldr	r1, [r7, #4]
 800c7b8:	4613      	mov	r3, r2
 800c7ba:	009b      	lsls	r3, r3, #2
 800c7bc:	4413      	add	r3, r2
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	440b      	add	r3, r1
 800c7c2:	3326      	adds	r3, #38	; 0x26
 800c7c4:	2210      	movs	r2, #16
 800c7c6:	801a      	strh	r2, [r3, #0]
 800c7c8:	e035      	b.n	800c836 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c7ca:	4b42      	ldr	r3, [pc, #264]	; (800c8d4 <USBD_CDC_Init+0x1e4>)
 800c7cc:	7819      	ldrb	r1, [r3, #0]
 800c7ce:	2340      	movs	r3, #64	; 0x40
 800c7d0:	2202      	movs	r2, #2
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f007 f947 	bl	8013a66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c7d8:	4b3e      	ldr	r3, [pc, #248]	; (800c8d4 <USBD_CDC_Init+0x1e4>)
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	f003 020f 	and.w	r2, r3, #15
 800c7e0:	6879      	ldr	r1, [r7, #4]
 800c7e2:	4613      	mov	r3, r2
 800c7e4:	009b      	lsls	r3, r3, #2
 800c7e6:	4413      	add	r3, r2
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	440b      	add	r3, r1
 800c7ec:	3324      	adds	r3, #36	; 0x24
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c7f2:	4b39      	ldr	r3, [pc, #228]	; (800c8d8 <USBD_CDC_Init+0x1e8>)
 800c7f4:	7819      	ldrb	r1, [r3, #0]
 800c7f6:	2340      	movs	r3, #64	; 0x40
 800c7f8:	2202      	movs	r2, #2
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f007 f933 	bl	8013a66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c800:	4b35      	ldr	r3, [pc, #212]	; (800c8d8 <USBD_CDC_Init+0x1e8>)
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	f003 020f 	and.w	r2, r3, #15
 800c808:	6879      	ldr	r1, [r7, #4]
 800c80a:	4613      	mov	r3, r2
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	4413      	add	r3, r2
 800c810:	009b      	lsls	r3, r3, #2
 800c812:	440b      	add	r3, r1
 800c814:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c818:	2201      	movs	r2, #1
 800c81a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c81c:	4b2f      	ldr	r3, [pc, #188]	; (800c8dc <USBD_CDC_Init+0x1ec>)
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	f003 020f 	and.w	r2, r3, #15
 800c824:	6879      	ldr	r1, [r7, #4]
 800c826:	4613      	mov	r3, r2
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	4413      	add	r3, r2
 800c82c:	009b      	lsls	r3, r3, #2
 800c82e:	440b      	add	r3, r1
 800c830:	3326      	adds	r3, #38	; 0x26
 800c832:	2210      	movs	r2, #16
 800c834:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c836:	4b29      	ldr	r3, [pc, #164]	; (800c8dc <USBD_CDC_Init+0x1ec>)
 800c838:	7819      	ldrb	r1, [r3, #0]
 800c83a:	2308      	movs	r3, #8
 800c83c:	2203      	movs	r2, #3
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f007 f911 	bl	8013a66 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c844:	4b25      	ldr	r3, [pc, #148]	; (800c8dc <USBD_CDC_Init+0x1ec>)
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	f003 020f 	and.w	r2, r3, #15
 800c84c:	6879      	ldr	r1, [r7, #4]
 800c84e:	4613      	mov	r3, r2
 800c850:	009b      	lsls	r3, r3, #2
 800c852:	4413      	add	r3, r2
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	440b      	add	r3, r1
 800c858:	3324      	adds	r3, #36	; 0x24
 800c85a:	2201      	movs	r2, #1
 800c85c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2200      	movs	r2, #0
 800c862:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	33b0      	adds	r3, #176	; 0xb0
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	4413      	add	r3, r2
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2200      	movs	r2, #0
 800c87e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2200      	movs	r2, #0
 800c886:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c890:	2b00      	cmp	r3, #0
 800c892:	d101      	bne.n	800c898 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c894:	2302      	movs	r3, #2
 800c896:	e018      	b.n	800c8ca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	7c1b      	ldrb	r3, [r3, #16]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d10a      	bne.n	800c8b6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c8a0:	4b0d      	ldr	r3, [pc, #52]	; (800c8d8 <USBD_CDC_Init+0x1e8>)
 800c8a2:	7819      	ldrb	r1, [r3, #0]
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c8aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f007 f9c8 	bl	8013c44 <USBD_LL_PrepareReceive>
 800c8b4:	e008      	b.n	800c8c8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c8b6:	4b08      	ldr	r3, [pc, #32]	; (800c8d8 <USBD_CDC_Init+0x1e8>)
 800c8b8:	7819      	ldrb	r1, [r3, #0]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c8c0:	2340      	movs	r3, #64	; 0x40
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f007 f9be 	bl	8013c44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c8c8:	2300      	movs	r3, #0
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3710      	adds	r7, #16
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	200000a7 	.word	0x200000a7
 800c8d8:	200000a8 	.word	0x200000a8
 800c8dc:	200000a9 	.word	0x200000a9

0800c8e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c8ec:	4b3a      	ldr	r3, [pc, #232]	; (800c9d8 <USBD_CDC_DeInit+0xf8>)
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f007 f8dd 	bl	8013ab2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c8f8:	4b37      	ldr	r3, [pc, #220]	; (800c9d8 <USBD_CDC_DeInit+0xf8>)
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	f003 020f 	and.w	r2, r3, #15
 800c900:	6879      	ldr	r1, [r7, #4]
 800c902:	4613      	mov	r3, r2
 800c904:	009b      	lsls	r3, r3, #2
 800c906:	4413      	add	r3, r2
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	440b      	add	r3, r1
 800c90c:	3324      	adds	r3, #36	; 0x24
 800c90e:	2200      	movs	r2, #0
 800c910:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c912:	4b32      	ldr	r3, [pc, #200]	; (800c9dc <USBD_CDC_DeInit+0xfc>)
 800c914:	781b      	ldrb	r3, [r3, #0]
 800c916:	4619      	mov	r1, r3
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f007 f8ca 	bl	8013ab2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c91e:	4b2f      	ldr	r3, [pc, #188]	; (800c9dc <USBD_CDC_DeInit+0xfc>)
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	f003 020f 	and.w	r2, r3, #15
 800c926:	6879      	ldr	r1, [r7, #4]
 800c928:	4613      	mov	r3, r2
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	4413      	add	r3, r2
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	440b      	add	r3, r1
 800c932:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c936:	2200      	movs	r2, #0
 800c938:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c93a:	4b29      	ldr	r3, [pc, #164]	; (800c9e0 <USBD_CDC_DeInit+0x100>)
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	4619      	mov	r1, r3
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f007 f8b6 	bl	8013ab2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c946:	4b26      	ldr	r3, [pc, #152]	; (800c9e0 <USBD_CDC_DeInit+0x100>)
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	f003 020f 	and.w	r2, r3, #15
 800c94e:	6879      	ldr	r1, [r7, #4]
 800c950:	4613      	mov	r3, r2
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	4413      	add	r3, r2
 800c956:	009b      	lsls	r3, r3, #2
 800c958:	440b      	add	r3, r1
 800c95a:	3324      	adds	r3, #36	; 0x24
 800c95c:	2200      	movs	r2, #0
 800c95e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c960:	4b1f      	ldr	r3, [pc, #124]	; (800c9e0 <USBD_CDC_DeInit+0x100>)
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	f003 020f 	and.w	r2, r3, #15
 800c968:	6879      	ldr	r1, [r7, #4]
 800c96a:	4613      	mov	r3, r2
 800c96c:	009b      	lsls	r3, r3, #2
 800c96e:	4413      	add	r3, r2
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	440b      	add	r3, r1
 800c974:	3326      	adds	r3, #38	; 0x26
 800c976:	2200      	movs	r2, #0
 800c978:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	32b0      	adds	r2, #176	; 0xb0
 800c984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d01f      	beq.n	800c9cc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	33b0      	adds	r3, #176	; 0xb0
 800c996:	009b      	lsls	r3, r3, #2
 800c998:	4413      	add	r3, r2
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	32b0      	adds	r2, #176	; 0xb0
 800c9aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f007 f9d8 	bl	8013d64 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	32b0      	adds	r2, #176	; 0xb0
 800c9be:	2100      	movs	r1, #0
 800c9c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c9cc:	2300      	movs	r3, #0
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3708      	adds	r7, #8
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	200000a7 	.word	0x200000a7
 800c9dc:	200000a8 	.word	0x200000a8
 800c9e0:	200000a9 	.word	0x200000a9

0800c9e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b086      	sub	sp, #24
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	32b0      	adds	r2, #176	; 0xb0
 800c9f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ca02:	2300      	movs	r3, #0
 800ca04:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca06:	2300      	movs	r3, #0
 800ca08:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d101      	bne.n	800ca14 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ca10:	2303      	movs	r3, #3
 800ca12:	e0bf      	b.n	800cb94 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d050      	beq.n	800cac2 <USBD_CDC_Setup+0xde>
 800ca20:	2b20      	cmp	r3, #32
 800ca22:	f040 80af 	bne.w	800cb84 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	88db      	ldrh	r3, [r3, #6]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d03a      	beq.n	800caa4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	b25b      	sxtb	r3, r3
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	da1b      	bge.n	800ca70 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	33b0      	adds	r3, #176	; 0xb0
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	4413      	add	r3, r2
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	683a      	ldr	r2, [r7, #0]
 800ca4c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ca4e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ca50:	683a      	ldr	r2, [r7, #0]
 800ca52:	88d2      	ldrh	r2, [r2, #6]
 800ca54:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	88db      	ldrh	r3, [r3, #6]
 800ca5a:	2b07      	cmp	r3, #7
 800ca5c:	bf28      	it	cs
 800ca5e:	2307      	movcs	r3, #7
 800ca60:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	89fa      	ldrh	r2, [r7, #14]
 800ca66:	4619      	mov	r1, r3
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f001 fdb3 	bl	800e5d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ca6e:	e090      	b.n	800cb92 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	785a      	ldrb	r2, [r3, #1]
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	88db      	ldrh	r3, [r3, #6]
 800ca7e:	2b3f      	cmp	r3, #63	; 0x3f
 800ca80:	d803      	bhi.n	800ca8a <USBD_CDC_Setup+0xa6>
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	88db      	ldrh	r3, [r3, #6]
 800ca86:	b2da      	uxtb	r2, r3
 800ca88:	e000      	b.n	800ca8c <USBD_CDC_Setup+0xa8>
 800ca8a:	2240      	movs	r2, #64	; 0x40
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ca92:	6939      	ldr	r1, [r7, #16]
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f001 fdc5 	bl	800e62c <USBD_CtlPrepareRx>
      break;
 800caa2:	e076      	b.n	800cb92 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	33b0      	adds	r3, #176	; 0xb0
 800caae:	009b      	lsls	r3, r3, #2
 800cab0:	4413      	add	r3, r2
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	683a      	ldr	r2, [r7, #0]
 800cab8:	7850      	ldrb	r0, [r2, #1]
 800caba:	2200      	movs	r2, #0
 800cabc:	6839      	ldr	r1, [r7, #0]
 800cabe:	4798      	blx	r3
      break;
 800cac0:	e067      	b.n	800cb92 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	785b      	ldrb	r3, [r3, #1]
 800cac6:	2b0b      	cmp	r3, #11
 800cac8:	d851      	bhi.n	800cb6e <USBD_CDC_Setup+0x18a>
 800caca:	a201      	add	r2, pc, #4	; (adr r2, 800cad0 <USBD_CDC_Setup+0xec>)
 800cacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cad0:	0800cb01 	.word	0x0800cb01
 800cad4:	0800cb7d 	.word	0x0800cb7d
 800cad8:	0800cb6f 	.word	0x0800cb6f
 800cadc:	0800cb6f 	.word	0x0800cb6f
 800cae0:	0800cb6f 	.word	0x0800cb6f
 800cae4:	0800cb6f 	.word	0x0800cb6f
 800cae8:	0800cb6f 	.word	0x0800cb6f
 800caec:	0800cb6f 	.word	0x0800cb6f
 800caf0:	0800cb6f 	.word	0x0800cb6f
 800caf4:	0800cb6f 	.word	0x0800cb6f
 800caf8:	0800cb2b 	.word	0x0800cb2b
 800cafc:	0800cb55 	.word	0x0800cb55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	2b03      	cmp	r3, #3
 800cb0a:	d107      	bne.n	800cb1c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cb0c:	f107 030a 	add.w	r3, r7, #10
 800cb10:	2202      	movs	r2, #2
 800cb12:	4619      	mov	r1, r3
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f001 fd5d 	bl	800e5d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cb1a:	e032      	b.n	800cb82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cb1c:	6839      	ldr	r1, [r7, #0]
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f001 fce7 	bl	800e4f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800cb24:	2303      	movs	r3, #3
 800cb26:	75fb      	strb	r3, [r7, #23]
          break;
 800cb28:	e02b      	b.n	800cb82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	2b03      	cmp	r3, #3
 800cb34:	d107      	bne.n	800cb46 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cb36:	f107 030d 	add.w	r3, r7, #13
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f001 fd48 	bl	800e5d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cb44:	e01d      	b.n	800cb82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cb46:	6839      	ldr	r1, [r7, #0]
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f001 fcd2 	bl	800e4f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800cb4e:	2303      	movs	r3, #3
 800cb50:	75fb      	strb	r3, [r7, #23]
          break;
 800cb52:	e016      	b.n	800cb82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	2b03      	cmp	r3, #3
 800cb5e:	d00f      	beq.n	800cb80 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cb60:	6839      	ldr	r1, [r7, #0]
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f001 fcc5 	bl	800e4f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800cb68:	2303      	movs	r3, #3
 800cb6a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cb6c:	e008      	b.n	800cb80 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cb6e:	6839      	ldr	r1, [r7, #0]
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f001 fcbe 	bl	800e4f2 <USBD_CtlError>
          ret = USBD_FAIL;
 800cb76:	2303      	movs	r3, #3
 800cb78:	75fb      	strb	r3, [r7, #23]
          break;
 800cb7a:	e002      	b.n	800cb82 <USBD_CDC_Setup+0x19e>
          break;
 800cb7c:	bf00      	nop
 800cb7e:	e008      	b.n	800cb92 <USBD_CDC_Setup+0x1ae>
          break;
 800cb80:	bf00      	nop
      }
      break;
 800cb82:	e006      	b.n	800cb92 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cb84:	6839      	ldr	r1, [r7, #0]
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f001 fcb3 	bl	800e4f2 <USBD_CtlError>
      ret = USBD_FAIL;
 800cb8c:	2303      	movs	r3, #3
 800cb8e:	75fb      	strb	r3, [r7, #23]
      break;
 800cb90:	bf00      	nop
  }

  return (uint8_t)ret;
 800cb92:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3718      	adds	r7, #24
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b084      	sub	sp, #16
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	460b      	mov	r3, r1
 800cba6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cbae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	32b0      	adds	r2, #176	; 0xb0
 800cbba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d101      	bne.n	800cbc6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800cbc2:	2303      	movs	r3, #3
 800cbc4:	e065      	b.n	800cc92 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	32b0      	adds	r2, #176	; 0xb0
 800cbd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbd4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cbd6:	78fb      	ldrb	r3, [r7, #3]
 800cbd8:	f003 020f 	and.w	r2, r3, #15
 800cbdc:	6879      	ldr	r1, [r7, #4]
 800cbde:	4613      	mov	r3, r2
 800cbe0:	009b      	lsls	r3, r3, #2
 800cbe2:	4413      	add	r3, r2
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	440b      	add	r3, r1
 800cbe8:	3318      	adds	r3, #24
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d02f      	beq.n	800cc50 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cbf0:	78fb      	ldrb	r3, [r7, #3]
 800cbf2:	f003 020f 	and.w	r2, r3, #15
 800cbf6:	6879      	ldr	r1, [r7, #4]
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	4413      	add	r3, r2
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	440b      	add	r3, r1
 800cc02:	3318      	adds	r3, #24
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	78fb      	ldrb	r3, [r7, #3]
 800cc08:	f003 010f 	and.w	r1, r3, #15
 800cc0c:	68f8      	ldr	r0, [r7, #12]
 800cc0e:	460b      	mov	r3, r1
 800cc10:	00db      	lsls	r3, r3, #3
 800cc12:	440b      	add	r3, r1
 800cc14:	009b      	lsls	r3, r3, #2
 800cc16:	4403      	add	r3, r0
 800cc18:	3348      	adds	r3, #72	; 0x48
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	fbb2 f1f3 	udiv	r1, r2, r3
 800cc20:	fb01 f303 	mul.w	r3, r1, r3
 800cc24:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d112      	bne.n	800cc50 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cc2a:	78fb      	ldrb	r3, [r7, #3]
 800cc2c:	f003 020f 	and.w	r2, r3, #15
 800cc30:	6879      	ldr	r1, [r7, #4]
 800cc32:	4613      	mov	r3, r2
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	4413      	add	r3, r2
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	440b      	add	r3, r1
 800cc3c:	3318      	adds	r3, #24
 800cc3e:	2200      	movs	r2, #0
 800cc40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cc42:	78f9      	ldrb	r1, [r7, #3]
 800cc44:	2300      	movs	r3, #0
 800cc46:	2200      	movs	r2, #0
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f006 ffda 	bl	8013c02 <USBD_LL_Transmit>
 800cc4e:	e01f      	b.n	800cc90 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	2200      	movs	r2, #0
 800cc54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	33b0      	adds	r3, #176	; 0xb0
 800cc62:	009b      	lsls	r3, r3, #2
 800cc64:	4413      	add	r3, r2
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	691b      	ldr	r3, [r3, #16]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d010      	beq.n	800cc90 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	33b0      	adds	r3, #176	; 0xb0
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	4413      	add	r3, r2
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	691b      	ldr	r3, [r3, #16]
 800cc80:	68ba      	ldr	r2, [r7, #8]
 800cc82:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cc86:	68ba      	ldr	r2, [r7, #8]
 800cc88:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cc8c:	78fa      	ldrb	r2, [r7, #3]
 800cc8e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cc90:	2300      	movs	r3, #0
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3710      	adds	r7, #16
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b084      	sub	sp, #16
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
 800cca2:	460b      	mov	r3, r1
 800cca4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	32b0      	adds	r2, #176	; 0xb0
 800ccb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccb4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	32b0      	adds	r2, #176	; 0xb0
 800ccc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d101      	bne.n	800cccc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ccc8:	2303      	movs	r3, #3
 800ccca:	e01a      	b.n	800cd02 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cccc:	78fb      	ldrb	r3, [r7, #3]
 800ccce:	4619      	mov	r1, r3
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f006 ffd8 	bl	8013c86 <USBD_LL_GetRxDataSize>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	33b0      	adds	r3, #176	; 0xb0
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	4413      	add	r3, r2
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ccf6:	68fa      	ldr	r2, [r7, #12]
 800ccf8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ccfc:	4611      	mov	r1, r2
 800ccfe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cd00:	2300      	movs	r3, #0
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3710      	adds	r7, #16
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}

0800cd0a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cd0a:	b580      	push	{r7, lr}
 800cd0c:	b084      	sub	sp, #16
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	32b0      	adds	r2, #176	; 0xb0
 800cd1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d101      	bne.n	800cd2c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cd28:	2303      	movs	r3, #3
 800cd2a:	e025      	b.n	800cd78 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	33b0      	adds	r3, #176	; 0xb0
 800cd36:	009b      	lsls	r3, r3, #2
 800cd38:	4413      	add	r3, r2
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d01a      	beq.n	800cd76 <USBD_CDC_EP0_RxReady+0x6c>
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cd46:	2bff      	cmp	r3, #255	; 0xff
 800cd48:	d015      	beq.n	800cd76 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	33b0      	adds	r3, #176	; 0xb0
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	4413      	add	r3, r2
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	689b      	ldr	r3, [r3, #8]
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800cd62:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800cd64:	68fa      	ldr	r2, [r7, #12]
 800cd66:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cd6a:	b292      	uxth	r2, r2
 800cd6c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	22ff      	movs	r2, #255	; 0xff
 800cd72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800cd76:	2300      	movs	r3, #0
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3710      	adds	r7, #16
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b086      	sub	sp, #24
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cd88:	2182      	movs	r1, #130	; 0x82
 800cd8a:	4818      	ldr	r0, [pc, #96]	; (800cdec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cd8c:	f000 fd4f 	bl	800d82e <USBD_GetEpDesc>
 800cd90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cd92:	2101      	movs	r1, #1
 800cd94:	4815      	ldr	r0, [pc, #84]	; (800cdec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cd96:	f000 fd4a 	bl	800d82e <USBD_GetEpDesc>
 800cd9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cd9c:	2181      	movs	r1, #129	; 0x81
 800cd9e:	4813      	ldr	r0, [pc, #76]	; (800cdec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cda0:	f000 fd45 	bl	800d82e <USBD_GetEpDesc>
 800cda4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d002      	beq.n	800cdb2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	2210      	movs	r2, #16
 800cdb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d006      	beq.n	800cdc6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cdc0:	711a      	strb	r2, [r3, #4]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d006      	beq.n	800cdda <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cdd4:	711a      	strb	r2, [r3, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2243      	movs	r2, #67	; 0x43
 800cdde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cde0:	4b02      	ldr	r3, [pc, #8]	; (800cdec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3718      	adds	r7, #24
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	bf00      	nop
 800cdec:	20000064 	.word	0x20000064

0800cdf0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b086      	sub	sp, #24
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cdf8:	2182      	movs	r1, #130	; 0x82
 800cdfa:	4818      	ldr	r0, [pc, #96]	; (800ce5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cdfc:	f000 fd17 	bl	800d82e <USBD_GetEpDesc>
 800ce00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ce02:	2101      	movs	r1, #1
 800ce04:	4815      	ldr	r0, [pc, #84]	; (800ce5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ce06:	f000 fd12 	bl	800d82e <USBD_GetEpDesc>
 800ce0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ce0c:	2181      	movs	r1, #129	; 0x81
 800ce0e:	4813      	ldr	r0, [pc, #76]	; (800ce5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ce10:	f000 fd0d 	bl	800d82e <USBD_GetEpDesc>
 800ce14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d002      	beq.n	800ce22 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	2210      	movs	r2, #16
 800ce20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d006      	beq.n	800ce36 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	711a      	strb	r2, [r3, #4]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	f042 0202 	orr.w	r2, r2, #2
 800ce34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d006      	beq.n	800ce4a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	711a      	strb	r2, [r3, #4]
 800ce42:	2200      	movs	r2, #0
 800ce44:	f042 0202 	orr.w	r2, r2, #2
 800ce48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2243      	movs	r2, #67	; 0x43
 800ce4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ce50:	4b02      	ldr	r3, [pc, #8]	; (800ce5c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3718      	adds	r7, #24
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	20000064 	.word	0x20000064

0800ce60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b086      	sub	sp, #24
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ce68:	2182      	movs	r1, #130	; 0x82
 800ce6a:	4818      	ldr	r0, [pc, #96]	; (800cecc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ce6c:	f000 fcdf 	bl	800d82e <USBD_GetEpDesc>
 800ce70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ce72:	2101      	movs	r1, #1
 800ce74:	4815      	ldr	r0, [pc, #84]	; (800cecc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ce76:	f000 fcda 	bl	800d82e <USBD_GetEpDesc>
 800ce7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ce7c:	2181      	movs	r1, #129	; 0x81
 800ce7e:	4813      	ldr	r0, [pc, #76]	; (800cecc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ce80:	f000 fcd5 	bl	800d82e <USBD_GetEpDesc>
 800ce84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d002      	beq.n	800ce92 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	2210      	movs	r2, #16
 800ce90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d006      	beq.n	800cea6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cea0:	711a      	strb	r2, [r3, #4]
 800cea2:	2200      	movs	r2, #0
 800cea4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d006      	beq.n	800ceba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ceb4:	711a      	strb	r2, [r3, #4]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2243      	movs	r2, #67	; 0x43
 800cebe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cec0:	4b02      	ldr	r3, [pc, #8]	; (800cecc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3718      	adds	r7, #24
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	20000064 	.word	0x20000064

0800ced0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b083      	sub	sp, #12
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	220a      	movs	r2, #10
 800cedc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cede:	4b03      	ldr	r3, [pc, #12]	; (800ceec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	370c      	adds	r7, #12
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr
 800ceec:	20000020 	.word	0x20000020

0800cef0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b083      	sub	sp, #12
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d101      	bne.n	800cf04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cf00:	2303      	movs	r3, #3
 800cf02:	e009      	b.n	800cf18 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	33b0      	adds	r3, #176	; 0xb0
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	4413      	add	r3, r2
 800cf12:	683a      	ldr	r2, [r7, #0]
 800cf14:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cf16:	2300      	movs	r3, #0
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	370c      	adds	r7, #12
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr

0800cf24 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b087      	sub	sp, #28
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	32b0      	adds	r2, #176	; 0xb0
 800cf3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf3e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d101      	bne.n	800cf4a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cf46:	2303      	movs	r3, #3
 800cf48:	e008      	b.n	800cf5c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	68ba      	ldr	r2, [r7, #8]
 800cf4e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cf5a:	2300      	movs	r3, #0
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	371c      	adds	r7, #28
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr

0800cf68 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b085      	sub	sp, #20
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	32b0      	adds	r2, #176	; 0xb0
 800cf7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf80:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d101      	bne.n	800cf8c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800cf88:	2303      	movs	r3, #3
 800cf8a:	e004      	b.n	800cf96 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	683a      	ldr	r2, [r7, #0]
 800cf90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cf94:	2300      	movs	r3, #0
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3714      	adds	r7, #20
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa0:	4770      	bx	lr
	...

0800cfa4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b084      	sub	sp, #16
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	32b0      	adds	r2, #176	; 0xb0
 800cfb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfba:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	32b0      	adds	r2, #176	; 0xb0
 800cfca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d101      	bne.n	800cfd6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cfd2:	2303      	movs	r3, #3
 800cfd4:	e025      	b.n	800d022 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d11f      	bne.n	800d020 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800cfe8:	4b10      	ldr	r3, [pc, #64]	; (800d02c <USBD_CDC_TransmitPacket+0x88>)
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	f003 020f 	and.w	r2, r3, #15
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	4613      	mov	r3, r2
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	4413      	add	r3, r2
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	4403      	add	r3, r0
 800d002:	3318      	adds	r3, #24
 800d004:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d006:	4b09      	ldr	r3, [pc, #36]	; (800d02c <USBD_CDC_TransmitPacket+0x88>)
 800d008:	7819      	ldrb	r1, [r3, #0]
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f006 fdf3 	bl	8013c02 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d01c:	2300      	movs	r3, #0
 800d01e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d020:	7bfb      	ldrb	r3, [r7, #15]
}
 800d022:	4618      	mov	r0, r3
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	200000a7 	.word	0x200000a7

0800d030 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	32b0      	adds	r2, #176	; 0xb0
 800d042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d046:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	32b0      	adds	r2, #176	; 0xb0
 800d052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d101      	bne.n	800d05e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d05a:	2303      	movs	r3, #3
 800d05c:	e018      	b.n	800d090 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	7c1b      	ldrb	r3, [r3, #16]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d10a      	bne.n	800d07c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d066:	4b0c      	ldr	r3, [pc, #48]	; (800d098 <USBD_CDC_ReceivePacket+0x68>)
 800d068:	7819      	ldrb	r1, [r3, #0]
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d070:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f006 fde5 	bl	8013c44 <USBD_LL_PrepareReceive>
 800d07a:	e008      	b.n	800d08e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d07c:	4b06      	ldr	r3, [pc, #24]	; (800d098 <USBD_CDC_ReceivePacket+0x68>)
 800d07e:	7819      	ldrb	r1, [r3, #0]
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d086:	2340      	movs	r3, #64	; 0x40
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f006 fddb 	bl	8013c44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d08e:	2300      	movs	r3, #0
}
 800d090:	4618      	mov	r0, r3
 800d092:	3710      	adds	r7, #16
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	200000a8 	.word	0x200000a8

0800d09c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b086      	sub	sp, #24
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	60f8      	str	r0, [r7, #12]
 800d0a4:	60b9      	str	r1, [r7, #8]
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d101      	bne.n	800d0b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d0b0:	2303      	movs	r3, #3
 800d0b2:	e01f      	b.n	800d0f4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d003      	beq.n	800d0da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	68ba      	ldr	r2, [r7, #8]
 800d0d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	2201      	movs	r2, #1
 800d0de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	79fa      	ldrb	r2, [r7, #7]
 800d0e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d0e8:	68f8      	ldr	r0, [r7, #12]
 800d0ea:	f006 fc55 	bl	8013998 <USBD_LL_Init>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d0f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3718      	adds	r7, #24
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d106:	2300      	movs	r3, #0
 800d108:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d101      	bne.n	800d114 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d110:	2303      	movs	r3, #3
 800d112:	e025      	b.n	800d160 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	683a      	ldr	r2, [r7, #0]
 800d118:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	32ae      	adds	r2, #174	; 0xae
 800d126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00f      	beq.n	800d150 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	32ae      	adds	r2, #174	; 0xae
 800d13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d140:	f107 020e 	add.w	r2, r7, #14
 800d144:	4610      	mov	r0, r2
 800d146:	4798      	blx	r3
 800d148:	4602      	mov	r2, r0
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d156:	1c5a      	adds	r2, r3, #1
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d15e:	2300      	movs	r3, #0
}
 800d160:	4618      	mov	r0, r3
 800d162:	3710      	adds	r7, #16
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f006 fc5d 	bl	8013a30 <USBD_LL_Start>
 800d176:	4603      	mov	r3, r0
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3708      	adds	r7, #8
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d180:	b480      	push	{r7}
 800d182:	b083      	sub	sp, #12
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d188:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	370c      	adds	r7, #12
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr

0800d196 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d196:	b580      	push	{r7, lr}
 800d198:	b084      	sub	sp, #16
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	6078      	str	r0, [r7, #4]
 800d19e:	460b      	mov	r3, r1
 800d1a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d009      	beq.n	800d1c4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	78fa      	ldrb	r2, [r7, #3]
 800d1ba:	4611      	mov	r1, r2
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	4798      	blx	r3
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b084      	sub	sp, #16
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
 800d1d6:	460b      	mov	r3, r1
 800d1d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	78fa      	ldrb	r2, [r7, #3]
 800d1e8:	4611      	mov	r1, r2
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	4798      	blx	r3
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d001      	beq.n	800d1f8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d1f4:	2303      	movs	r3, #3
 800d1f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3710      	adds	r7, #16
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}

0800d202 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d202:	b580      	push	{r7, lr}
 800d204:	b084      	sub	sp, #16
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
 800d20a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d212:	6839      	ldr	r1, [r7, #0]
 800d214:	4618      	mov	r0, r3
 800d216:	f001 f932 	bl	800e47e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2201      	movs	r2, #1
 800d21e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d228:	461a      	mov	r2, r3
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d236:	f003 031f 	and.w	r3, r3, #31
 800d23a:	2b02      	cmp	r3, #2
 800d23c:	d01a      	beq.n	800d274 <USBD_LL_SetupStage+0x72>
 800d23e:	2b02      	cmp	r3, #2
 800d240:	d822      	bhi.n	800d288 <USBD_LL_SetupStage+0x86>
 800d242:	2b00      	cmp	r3, #0
 800d244:	d002      	beq.n	800d24c <USBD_LL_SetupStage+0x4a>
 800d246:	2b01      	cmp	r3, #1
 800d248:	d00a      	beq.n	800d260 <USBD_LL_SetupStage+0x5e>
 800d24a:	e01d      	b.n	800d288 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d252:	4619      	mov	r1, r3
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 fb5f 	bl	800d918 <USBD_StdDevReq>
 800d25a:	4603      	mov	r3, r0
 800d25c:	73fb      	strb	r3, [r7, #15]
      break;
 800d25e:	e020      	b.n	800d2a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d266:	4619      	mov	r1, r3
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 fbc7 	bl	800d9fc <USBD_StdItfReq>
 800d26e:	4603      	mov	r3, r0
 800d270:	73fb      	strb	r3, [r7, #15]
      break;
 800d272:	e016      	b.n	800d2a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d27a:	4619      	mov	r1, r3
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f000 fc29 	bl	800dad4 <USBD_StdEPReq>
 800d282:	4603      	mov	r3, r0
 800d284:	73fb      	strb	r3, [r7, #15]
      break;
 800d286:	e00c      	b.n	800d2a2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d28e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d292:	b2db      	uxtb	r3, r3
 800d294:	4619      	mov	r1, r3
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f006 fc2a 	bl	8013af0 <USBD_LL_StallEP>
 800d29c:	4603      	mov	r3, r0
 800d29e:	73fb      	strb	r3, [r7, #15]
      break;
 800d2a0:	bf00      	nop
  }

  return ret;
 800d2a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3710      	adds	r7, #16
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b086      	sub	sp, #24
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	607a      	str	r2, [r7, #4]
 800d2b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d2be:	7afb      	ldrb	r3, [r7, #11]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d16e      	bne.n	800d3a2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d2ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d2d2:	2b03      	cmp	r3, #3
 800d2d4:	f040 8098 	bne.w	800d408 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	689a      	ldr	r2, [r3, #8]
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d913      	bls.n	800d30c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	689a      	ldr	r2, [r3, #8]
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	1ad2      	subs	r2, r2, r3
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	68da      	ldr	r2, [r3, #12]
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	689b      	ldr	r3, [r3, #8]
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	bf28      	it	cs
 800d2fe:	4613      	movcs	r3, r2
 800d300:	461a      	mov	r2, r3
 800d302:	6879      	ldr	r1, [r7, #4]
 800d304:	68f8      	ldr	r0, [r7, #12]
 800d306:	f001 f9ae 	bl	800e666 <USBD_CtlContinueRx>
 800d30a:	e07d      	b.n	800d408 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d312:	f003 031f 	and.w	r3, r3, #31
 800d316:	2b02      	cmp	r3, #2
 800d318:	d014      	beq.n	800d344 <USBD_LL_DataOutStage+0x98>
 800d31a:	2b02      	cmp	r3, #2
 800d31c:	d81d      	bhi.n	800d35a <USBD_LL_DataOutStage+0xae>
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d002      	beq.n	800d328 <USBD_LL_DataOutStage+0x7c>
 800d322:	2b01      	cmp	r3, #1
 800d324:	d003      	beq.n	800d32e <USBD_LL_DataOutStage+0x82>
 800d326:	e018      	b.n	800d35a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d328:	2300      	movs	r3, #0
 800d32a:	75bb      	strb	r3, [r7, #22]
            break;
 800d32c:	e018      	b.n	800d360 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d334:	b2db      	uxtb	r3, r3
 800d336:	4619      	mov	r1, r3
 800d338:	68f8      	ldr	r0, [r7, #12]
 800d33a:	f000 fa5e 	bl	800d7fa <USBD_CoreFindIF>
 800d33e:	4603      	mov	r3, r0
 800d340:	75bb      	strb	r3, [r7, #22]
            break;
 800d342:	e00d      	b.n	800d360 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	4619      	mov	r1, r3
 800d34e:	68f8      	ldr	r0, [r7, #12]
 800d350:	f000 fa60 	bl	800d814 <USBD_CoreFindEP>
 800d354:	4603      	mov	r3, r0
 800d356:	75bb      	strb	r3, [r7, #22]
            break;
 800d358:	e002      	b.n	800d360 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d35a:	2300      	movs	r3, #0
 800d35c:	75bb      	strb	r3, [r7, #22]
            break;
 800d35e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d360:	7dbb      	ldrb	r3, [r7, #22]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d119      	bne.n	800d39a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d36c:	b2db      	uxtb	r3, r3
 800d36e:	2b03      	cmp	r3, #3
 800d370:	d113      	bne.n	800d39a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d372:	7dba      	ldrb	r2, [r7, #22]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	32ae      	adds	r2, #174	; 0xae
 800d378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d37c:	691b      	ldr	r3, [r3, #16]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d00b      	beq.n	800d39a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d382:	7dba      	ldrb	r2, [r7, #22]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d38a:	7dba      	ldrb	r2, [r7, #22]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	32ae      	adds	r2, #174	; 0xae
 800d390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d394:	691b      	ldr	r3, [r3, #16]
 800d396:	68f8      	ldr	r0, [r7, #12]
 800d398:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d39a:	68f8      	ldr	r0, [r7, #12]
 800d39c:	f001 f974 	bl	800e688 <USBD_CtlSendStatus>
 800d3a0:	e032      	b.n	800d408 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d3a2:	7afb      	ldrb	r3, [r7, #11]
 800d3a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3a8:	b2db      	uxtb	r3, r3
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	68f8      	ldr	r0, [r7, #12]
 800d3ae:	f000 fa31 	bl	800d814 <USBD_CoreFindEP>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d3b6:	7dbb      	ldrb	r3, [r7, #22]
 800d3b8:	2bff      	cmp	r3, #255	; 0xff
 800d3ba:	d025      	beq.n	800d408 <USBD_LL_DataOutStage+0x15c>
 800d3bc:	7dbb      	ldrb	r3, [r7, #22]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d122      	bne.n	800d408 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	2b03      	cmp	r3, #3
 800d3cc:	d117      	bne.n	800d3fe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d3ce:	7dba      	ldrb	r2, [r7, #22]
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	32ae      	adds	r2, #174	; 0xae
 800d3d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3d8:	699b      	ldr	r3, [r3, #24]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d00f      	beq.n	800d3fe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d3de:	7dba      	ldrb	r2, [r7, #22]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d3e6:	7dba      	ldrb	r2, [r7, #22]
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	32ae      	adds	r2, #174	; 0xae
 800d3ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3f0:	699b      	ldr	r3, [r3, #24]
 800d3f2:	7afa      	ldrb	r2, [r7, #11]
 800d3f4:	4611      	mov	r1, r2
 800d3f6:	68f8      	ldr	r0, [r7, #12]
 800d3f8:	4798      	blx	r3
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d3fe:	7dfb      	ldrb	r3, [r7, #23]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d001      	beq.n	800d408 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d404:	7dfb      	ldrb	r3, [r7, #23]
 800d406:	e000      	b.n	800d40a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d408:	2300      	movs	r3, #0
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3718      	adds	r7, #24
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}

0800d412 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d412:	b580      	push	{r7, lr}
 800d414:	b086      	sub	sp, #24
 800d416:	af00      	add	r7, sp, #0
 800d418:	60f8      	str	r0, [r7, #12]
 800d41a:	460b      	mov	r3, r1
 800d41c:	607a      	str	r2, [r7, #4]
 800d41e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d420:	7afb      	ldrb	r3, [r7, #11]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d16f      	bne.n	800d506 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	3314      	adds	r3, #20
 800d42a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d432:	2b02      	cmp	r3, #2
 800d434:	d15a      	bne.n	800d4ec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	689a      	ldr	r2, [r3, #8]
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	68db      	ldr	r3, [r3, #12]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d914      	bls.n	800d46c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	689a      	ldr	r2, [r3, #8]
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	1ad2      	subs	r2, r2, r3
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	689b      	ldr	r3, [r3, #8]
 800d454:	461a      	mov	r2, r3
 800d456:	6879      	ldr	r1, [r7, #4]
 800d458:	68f8      	ldr	r0, [r7, #12]
 800d45a:	f001 f8d6 	bl	800e60a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d45e:	2300      	movs	r3, #0
 800d460:	2200      	movs	r2, #0
 800d462:	2100      	movs	r1, #0
 800d464:	68f8      	ldr	r0, [r7, #12]
 800d466:	f006 fbed 	bl	8013c44 <USBD_LL_PrepareReceive>
 800d46a:	e03f      	b.n	800d4ec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	68da      	ldr	r2, [r3, #12]
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	689b      	ldr	r3, [r3, #8]
 800d474:	429a      	cmp	r2, r3
 800d476:	d11c      	bne.n	800d4b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	685a      	ldr	r2, [r3, #4]
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d480:	429a      	cmp	r2, r3
 800d482:	d316      	bcc.n	800d4b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	685a      	ldr	r2, [r3, #4]
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d48e:	429a      	cmp	r2, r3
 800d490:	d20f      	bcs.n	800d4b2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d492:	2200      	movs	r2, #0
 800d494:	2100      	movs	r1, #0
 800d496:	68f8      	ldr	r0, [r7, #12]
 800d498:	f001 f8b7 	bl	800e60a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	2100      	movs	r1, #0
 800d4aa:	68f8      	ldr	r0, [r7, #12]
 800d4ac:	f006 fbca 	bl	8013c44 <USBD_LL_PrepareReceive>
 800d4b0:	e01c      	b.n	800d4ec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4b8:	b2db      	uxtb	r3, r3
 800d4ba:	2b03      	cmp	r3, #3
 800d4bc:	d10f      	bne.n	800d4de <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4c4:	68db      	ldr	r3, [r3, #12]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d009      	beq.n	800d4de <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4d8:	68db      	ldr	r3, [r3, #12]
 800d4da:	68f8      	ldr	r0, [r7, #12]
 800d4dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4de:	2180      	movs	r1, #128	; 0x80
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f006 fb05 	bl	8013af0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f001 f8e1 	bl	800e6ae <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d03a      	beq.n	800d56c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d4f6:	68f8      	ldr	r0, [r7, #12]
 800d4f8:	f7ff fe42 	bl	800d180 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2200      	movs	r2, #0
 800d500:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d504:	e032      	b.n	800d56c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d506:	7afb      	ldrb	r3, [r7, #11]
 800d508:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d50c:	b2db      	uxtb	r3, r3
 800d50e:	4619      	mov	r1, r3
 800d510:	68f8      	ldr	r0, [r7, #12]
 800d512:	f000 f97f 	bl	800d814 <USBD_CoreFindEP>
 800d516:	4603      	mov	r3, r0
 800d518:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d51a:	7dfb      	ldrb	r3, [r7, #23]
 800d51c:	2bff      	cmp	r3, #255	; 0xff
 800d51e:	d025      	beq.n	800d56c <USBD_LL_DataInStage+0x15a>
 800d520:	7dfb      	ldrb	r3, [r7, #23]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d122      	bne.n	800d56c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	2b03      	cmp	r3, #3
 800d530:	d11c      	bne.n	800d56c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d532:	7dfa      	ldrb	r2, [r7, #23]
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	32ae      	adds	r2, #174	; 0xae
 800d538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d53c:	695b      	ldr	r3, [r3, #20]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d014      	beq.n	800d56c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d542:	7dfa      	ldrb	r2, [r7, #23]
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d54a:	7dfa      	ldrb	r2, [r7, #23]
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	32ae      	adds	r2, #174	; 0xae
 800d550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d554:	695b      	ldr	r3, [r3, #20]
 800d556:	7afa      	ldrb	r2, [r7, #11]
 800d558:	4611      	mov	r1, r2
 800d55a:	68f8      	ldr	r0, [r7, #12]
 800d55c:	4798      	blx	r3
 800d55e:	4603      	mov	r3, r0
 800d560:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d562:	7dbb      	ldrb	r3, [r7, #22]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d001      	beq.n	800d56c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d568:	7dbb      	ldrb	r3, [r7, #22]
 800d56a:	e000      	b.n	800d56e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d56c:	2300      	movs	r3, #0
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3718      	adds	r7, #24
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}

0800d576 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d576:	b580      	push	{r7, lr}
 800d578:	b084      	sub	sp, #16
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d57e:	2300      	movs	r3, #0
 800d580:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2201      	movs	r2, #1
 800d586:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2200      	movs	r2, #0
 800d58e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2200      	movs	r2, #0
 800d596:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d014      	beq.n	800d5dc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d00e      	beq.n	800d5dc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	687a      	ldr	r2, [r7, #4]
 800d5c8:	6852      	ldr	r2, [r2, #4]
 800d5ca:	b2d2      	uxtb	r2, r2
 800d5cc:	4611      	mov	r1, r2
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	4798      	blx	r3
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d001      	beq.n	800d5dc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d5d8:	2303      	movs	r3, #3
 800d5da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d5dc:	2340      	movs	r3, #64	; 0x40
 800d5de:	2200      	movs	r2, #0
 800d5e0:	2100      	movs	r1, #0
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f006 fa3f 	bl	8013a66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2240      	movs	r2, #64	; 0x40
 800d5f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d5f8:	2340      	movs	r3, #64	; 0x40
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	2180      	movs	r1, #128	; 0x80
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f006 fa31 	bl	8013a66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2201      	movs	r2, #1
 800d608:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2240      	movs	r2, #64	; 0x40
 800d60e:	621a      	str	r2, [r3, #32]

  return ret;
 800d610:	7bfb      	ldrb	r3, [r7, #15]
}
 800d612:	4618      	mov	r0, r3
 800d614:	3710      	adds	r7, #16
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}

0800d61a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d61a:	b480      	push	{r7}
 800d61c:	b083      	sub	sp, #12
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
 800d622:	460b      	mov	r3, r1
 800d624:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	78fa      	ldrb	r2, [r7, #3]
 800d62a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d62c:	2300      	movs	r3, #0
}
 800d62e:	4618      	mov	r0, r3
 800d630:	370c      	adds	r7, #12
 800d632:	46bd      	mov	sp, r7
 800d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d638:	4770      	bx	lr

0800d63a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d63a:	b480      	push	{r7}
 800d63c:	b083      	sub	sp, #12
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d648:	b2da      	uxtb	r2, r3
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2204      	movs	r2, #4
 800d654:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d658:	2300      	movs	r3, #0
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	370c      	adds	r7, #12
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr

0800d666 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d666:	b480      	push	{r7}
 800d668:	b083      	sub	sp, #12
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d674:	b2db      	uxtb	r3, r3
 800d676:	2b04      	cmp	r3, #4
 800d678:	d106      	bne.n	800d688 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d680:	b2da      	uxtb	r2, r3
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d688:	2300      	movs	r3, #0
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	370c      	adds	r7, #12
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr

0800d696 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d696:	b580      	push	{r7, lr}
 800d698:	b082      	sub	sp, #8
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6a4:	b2db      	uxtb	r3, r3
 800d6a6:	2b03      	cmp	r3, #3
 800d6a8:	d110      	bne.n	800d6cc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d00b      	beq.n	800d6cc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6ba:	69db      	ldr	r3, [r3, #28]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d005      	beq.n	800d6cc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6c6:	69db      	ldr	r3, [r3, #28]
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d6cc:	2300      	movs	r3, #0
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3708      	adds	r7, #8
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}

0800d6d6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d6d6:	b580      	push	{r7, lr}
 800d6d8:	b082      	sub	sp, #8
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	6078      	str	r0, [r7, #4]
 800d6de:	460b      	mov	r3, r1
 800d6e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	32ae      	adds	r2, #174	; 0xae
 800d6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d101      	bne.n	800d6f8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d6f4:	2303      	movs	r3, #3
 800d6f6:	e01c      	b.n	800d732 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6fe:	b2db      	uxtb	r3, r3
 800d700:	2b03      	cmp	r3, #3
 800d702:	d115      	bne.n	800d730 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	32ae      	adds	r2, #174	; 0xae
 800d70e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d712:	6a1b      	ldr	r3, [r3, #32]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d00b      	beq.n	800d730 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	32ae      	adds	r2, #174	; 0xae
 800d722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d726:	6a1b      	ldr	r3, [r3, #32]
 800d728:	78fa      	ldrb	r2, [r7, #3]
 800d72a:	4611      	mov	r1, r2
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d730:	2300      	movs	r3, #0
}
 800d732:	4618      	mov	r0, r3
 800d734:	3708      	adds	r7, #8
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}

0800d73a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d73a:	b580      	push	{r7, lr}
 800d73c:	b082      	sub	sp, #8
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]
 800d742:	460b      	mov	r3, r1
 800d744:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	32ae      	adds	r2, #174	; 0xae
 800d750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d101      	bne.n	800d75c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d758:	2303      	movs	r3, #3
 800d75a:	e01c      	b.n	800d796 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d762:	b2db      	uxtb	r3, r3
 800d764:	2b03      	cmp	r3, #3
 800d766:	d115      	bne.n	800d794 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	32ae      	adds	r2, #174	; 0xae
 800d772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d00b      	beq.n	800d794 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	32ae      	adds	r2, #174	; 0xae
 800d786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d78c:	78fa      	ldrb	r2, [r7, #3]
 800d78e:	4611      	mov	r1, r2
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d794:	2300      	movs	r3, #0
}
 800d796:	4618      	mov	r0, r3
 800d798:	3708      	adds	r7, #8
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}

0800d79e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d79e:	b480      	push	{r7}
 800d7a0:	b083      	sub	sp, #12
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d7a6:	2300      	movs	r3, #0
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	370c      	adds	r7, #12
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b2:	4770      	bx	lr

0800d7b4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d00e      	beq.n	800d7f0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	6852      	ldr	r2, [r2, #4]
 800d7de:	b2d2      	uxtb	r2, r2
 800d7e0:	4611      	mov	r1, r2
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	4798      	blx	r3
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d001      	beq.n	800d7f0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d7ec:	2303      	movs	r3, #3
 800d7ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3710      	adds	r7, #16
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}

0800d7fa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d7fa:	b480      	push	{r7}
 800d7fc:	b083      	sub	sp, #12
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	6078      	str	r0, [r7, #4]
 800d802:	460b      	mov	r3, r1
 800d804:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d806:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d808:	4618      	mov	r0, r3
 800d80a:	370c      	adds	r7, #12
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	4770      	bx	lr

0800d814 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d814:	b480      	push	{r7}
 800d816:	b083      	sub	sp, #12
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	460b      	mov	r3, r1
 800d81e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d820:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d822:	4618      	mov	r0, r3
 800d824:	370c      	adds	r7, #12
 800d826:	46bd      	mov	sp, r7
 800d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82c:	4770      	bx	lr

0800d82e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d82e:	b580      	push	{r7, lr}
 800d830:	b086      	sub	sp, #24
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
 800d836:	460b      	mov	r3, r1
 800d838:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d842:	2300      	movs	r3, #0
 800d844:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	885b      	ldrh	r3, [r3, #2]
 800d84a:	b29a      	uxth	r2, r3
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	781b      	ldrb	r3, [r3, #0]
 800d850:	b29b      	uxth	r3, r3
 800d852:	429a      	cmp	r2, r3
 800d854:	d920      	bls.n	800d898 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d85e:	e013      	b.n	800d888 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d860:	f107 030a 	add.w	r3, r7, #10
 800d864:	4619      	mov	r1, r3
 800d866:	6978      	ldr	r0, [r7, #20]
 800d868:	f000 f81b 	bl	800d8a2 <USBD_GetNextDesc>
 800d86c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	785b      	ldrb	r3, [r3, #1]
 800d872:	2b05      	cmp	r3, #5
 800d874:	d108      	bne.n	800d888 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	789b      	ldrb	r3, [r3, #2]
 800d87e:	78fa      	ldrb	r2, [r7, #3]
 800d880:	429a      	cmp	r2, r3
 800d882:	d008      	beq.n	800d896 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d884:	2300      	movs	r3, #0
 800d886:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	885b      	ldrh	r3, [r3, #2]
 800d88c:	b29a      	uxth	r2, r3
 800d88e:	897b      	ldrh	r3, [r7, #10]
 800d890:	429a      	cmp	r2, r3
 800d892:	d8e5      	bhi.n	800d860 <USBD_GetEpDesc+0x32>
 800d894:	e000      	b.n	800d898 <USBD_GetEpDesc+0x6a>
          break;
 800d896:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d898:	693b      	ldr	r3, [r7, #16]
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3718      	adds	r7, #24
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}

0800d8a2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d8a2:	b480      	push	{r7}
 800d8a4:	b085      	sub	sp, #20
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
 800d8aa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	881a      	ldrh	r2, [r3, #0]
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	b29b      	uxth	r3, r3
 800d8ba:	4413      	add	r3, r2
 800d8bc:	b29a      	uxth	r2, r3
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	781b      	ldrb	r3, [r3, #0]
 800d8c6:	461a      	mov	r2, r3
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	4413      	add	r3, r2
 800d8cc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d8ce:	68fb      	ldr	r3, [r7, #12]
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3714      	adds	r7, #20
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr

0800d8dc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b087      	sub	sp, #28
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d8fa:	8a3b      	ldrh	r3, [r7, #16]
 800d8fc:	021b      	lsls	r3, r3, #8
 800d8fe:	b21a      	sxth	r2, r3
 800d900:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d904:	4313      	orrs	r3, r2
 800d906:	b21b      	sxth	r3, r3
 800d908:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d90a:	89fb      	ldrh	r3, [r7, #14]
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	371c      	adds	r7, #28
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr

0800d918 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d922:	2300      	movs	r3, #0
 800d924:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	781b      	ldrb	r3, [r3, #0]
 800d92a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d92e:	2b40      	cmp	r3, #64	; 0x40
 800d930:	d005      	beq.n	800d93e <USBD_StdDevReq+0x26>
 800d932:	2b40      	cmp	r3, #64	; 0x40
 800d934:	d857      	bhi.n	800d9e6 <USBD_StdDevReq+0xce>
 800d936:	2b00      	cmp	r3, #0
 800d938:	d00f      	beq.n	800d95a <USBD_StdDevReq+0x42>
 800d93a:	2b20      	cmp	r3, #32
 800d93c:	d153      	bne.n	800d9e6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	32ae      	adds	r2, #174	; 0xae
 800d948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d94c:	689b      	ldr	r3, [r3, #8]
 800d94e:	6839      	ldr	r1, [r7, #0]
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	4798      	blx	r3
 800d954:	4603      	mov	r3, r0
 800d956:	73fb      	strb	r3, [r7, #15]
      break;
 800d958:	e04a      	b.n	800d9f0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	785b      	ldrb	r3, [r3, #1]
 800d95e:	2b09      	cmp	r3, #9
 800d960:	d83b      	bhi.n	800d9da <USBD_StdDevReq+0xc2>
 800d962:	a201      	add	r2, pc, #4	; (adr r2, 800d968 <USBD_StdDevReq+0x50>)
 800d964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d968:	0800d9bd 	.word	0x0800d9bd
 800d96c:	0800d9d1 	.word	0x0800d9d1
 800d970:	0800d9db 	.word	0x0800d9db
 800d974:	0800d9c7 	.word	0x0800d9c7
 800d978:	0800d9db 	.word	0x0800d9db
 800d97c:	0800d99b 	.word	0x0800d99b
 800d980:	0800d991 	.word	0x0800d991
 800d984:	0800d9db 	.word	0x0800d9db
 800d988:	0800d9b3 	.word	0x0800d9b3
 800d98c:	0800d9a5 	.word	0x0800d9a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d990:	6839      	ldr	r1, [r7, #0]
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f000 fa3c 	bl	800de10 <USBD_GetDescriptor>
          break;
 800d998:	e024      	b.n	800d9e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d99a:	6839      	ldr	r1, [r7, #0]
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f000 fbcb 	bl	800e138 <USBD_SetAddress>
          break;
 800d9a2:	e01f      	b.n	800d9e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d9a4:	6839      	ldr	r1, [r7, #0]
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f000 fc0a 	bl	800e1c0 <USBD_SetConfig>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	73fb      	strb	r3, [r7, #15]
          break;
 800d9b0:	e018      	b.n	800d9e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d9b2:	6839      	ldr	r1, [r7, #0]
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f000 fcad 	bl	800e314 <USBD_GetConfig>
          break;
 800d9ba:	e013      	b.n	800d9e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d9bc:	6839      	ldr	r1, [r7, #0]
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f000 fcde 	bl	800e380 <USBD_GetStatus>
          break;
 800d9c4:	e00e      	b.n	800d9e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d9c6:	6839      	ldr	r1, [r7, #0]
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f000 fd0d 	bl	800e3e8 <USBD_SetFeature>
          break;
 800d9ce:	e009      	b.n	800d9e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d9d0:	6839      	ldr	r1, [r7, #0]
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f000 fd31 	bl	800e43a <USBD_ClrFeature>
          break;
 800d9d8:	e004      	b.n	800d9e4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d9da:	6839      	ldr	r1, [r7, #0]
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f000 fd88 	bl	800e4f2 <USBD_CtlError>
          break;
 800d9e2:	bf00      	nop
      }
      break;
 800d9e4:	e004      	b.n	800d9f0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d9e6:	6839      	ldr	r1, [r7, #0]
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f000 fd82 	bl	800e4f2 <USBD_CtlError>
      break;
 800d9ee:	bf00      	nop
  }

  return ret;
 800d9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3710      	adds	r7, #16
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop

0800d9fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da06:	2300      	movs	r3, #0
 800da08:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800da12:	2b40      	cmp	r3, #64	; 0x40
 800da14:	d005      	beq.n	800da22 <USBD_StdItfReq+0x26>
 800da16:	2b40      	cmp	r3, #64	; 0x40
 800da18:	d852      	bhi.n	800dac0 <USBD_StdItfReq+0xc4>
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d001      	beq.n	800da22 <USBD_StdItfReq+0x26>
 800da1e:	2b20      	cmp	r3, #32
 800da20:	d14e      	bne.n	800dac0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da28:	b2db      	uxtb	r3, r3
 800da2a:	3b01      	subs	r3, #1
 800da2c:	2b02      	cmp	r3, #2
 800da2e:	d840      	bhi.n	800dab2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	889b      	ldrh	r3, [r3, #4]
 800da34:	b2db      	uxtb	r3, r3
 800da36:	2b01      	cmp	r3, #1
 800da38:	d836      	bhi.n	800daa8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	889b      	ldrh	r3, [r3, #4]
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	4619      	mov	r1, r3
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f7ff fed9 	bl	800d7fa <USBD_CoreFindIF>
 800da48:	4603      	mov	r3, r0
 800da4a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800da4c:	7bbb      	ldrb	r3, [r7, #14]
 800da4e:	2bff      	cmp	r3, #255	; 0xff
 800da50:	d01d      	beq.n	800da8e <USBD_StdItfReq+0x92>
 800da52:	7bbb      	ldrb	r3, [r7, #14]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d11a      	bne.n	800da8e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800da58:	7bba      	ldrb	r2, [r7, #14]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	32ae      	adds	r2, #174	; 0xae
 800da5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da62:	689b      	ldr	r3, [r3, #8]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d00f      	beq.n	800da88 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800da68:	7bba      	ldrb	r2, [r7, #14]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800da70:	7bba      	ldrb	r2, [r7, #14]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	32ae      	adds	r2, #174	; 0xae
 800da76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da7a:	689b      	ldr	r3, [r3, #8]
 800da7c:	6839      	ldr	r1, [r7, #0]
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	4798      	blx	r3
 800da82:	4603      	mov	r3, r0
 800da84:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800da86:	e004      	b.n	800da92 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800da88:	2303      	movs	r3, #3
 800da8a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800da8c:	e001      	b.n	800da92 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800da8e:	2303      	movs	r3, #3
 800da90:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	88db      	ldrh	r3, [r3, #6]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d110      	bne.n	800dabc <USBD_StdItfReq+0xc0>
 800da9a:	7bfb      	ldrb	r3, [r7, #15]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d10d      	bne.n	800dabc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 fdf1 	bl	800e688 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800daa6:	e009      	b.n	800dabc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800daa8:	6839      	ldr	r1, [r7, #0]
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f000 fd21 	bl	800e4f2 <USBD_CtlError>
          break;
 800dab0:	e004      	b.n	800dabc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dab2:	6839      	ldr	r1, [r7, #0]
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 fd1c 	bl	800e4f2 <USBD_CtlError>
          break;
 800daba:	e000      	b.n	800dabe <USBD_StdItfReq+0xc2>
          break;
 800dabc:	bf00      	nop
      }
      break;
 800dabe:	e004      	b.n	800daca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800dac0:	6839      	ldr	r1, [r7, #0]
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 fd15 	bl	800e4f2 <USBD_CtlError>
      break;
 800dac8:	bf00      	nop
  }

  return ret;
 800daca:	7bfb      	ldrb	r3, [r7, #15]
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3710      	adds	r7, #16
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800dade:	2300      	movs	r3, #0
 800dae0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	889b      	ldrh	r3, [r3, #4]
 800dae6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800daf0:	2b40      	cmp	r3, #64	; 0x40
 800daf2:	d007      	beq.n	800db04 <USBD_StdEPReq+0x30>
 800daf4:	2b40      	cmp	r3, #64	; 0x40
 800daf6:	f200 817f 	bhi.w	800ddf8 <USBD_StdEPReq+0x324>
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d02a      	beq.n	800db54 <USBD_StdEPReq+0x80>
 800dafe:	2b20      	cmp	r3, #32
 800db00:	f040 817a 	bne.w	800ddf8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800db04:	7bbb      	ldrb	r3, [r7, #14]
 800db06:	4619      	mov	r1, r3
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f7ff fe83 	bl	800d814 <USBD_CoreFindEP>
 800db0e:	4603      	mov	r3, r0
 800db10:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db12:	7b7b      	ldrb	r3, [r7, #13]
 800db14:	2bff      	cmp	r3, #255	; 0xff
 800db16:	f000 8174 	beq.w	800de02 <USBD_StdEPReq+0x32e>
 800db1a:	7b7b      	ldrb	r3, [r7, #13]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	f040 8170 	bne.w	800de02 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800db22:	7b7a      	ldrb	r2, [r7, #13]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800db2a:	7b7a      	ldrb	r2, [r7, #13]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	32ae      	adds	r2, #174	; 0xae
 800db30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db34:	689b      	ldr	r3, [r3, #8]
 800db36:	2b00      	cmp	r3, #0
 800db38:	f000 8163 	beq.w	800de02 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800db3c:	7b7a      	ldrb	r2, [r7, #13]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	32ae      	adds	r2, #174	; 0xae
 800db42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db46:	689b      	ldr	r3, [r3, #8]
 800db48:	6839      	ldr	r1, [r7, #0]
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	4798      	blx	r3
 800db4e:	4603      	mov	r3, r0
 800db50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800db52:	e156      	b.n	800de02 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	785b      	ldrb	r3, [r3, #1]
 800db58:	2b03      	cmp	r3, #3
 800db5a:	d008      	beq.n	800db6e <USBD_StdEPReq+0x9a>
 800db5c:	2b03      	cmp	r3, #3
 800db5e:	f300 8145 	bgt.w	800ddec <USBD_StdEPReq+0x318>
 800db62:	2b00      	cmp	r3, #0
 800db64:	f000 809b 	beq.w	800dc9e <USBD_StdEPReq+0x1ca>
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d03c      	beq.n	800dbe6 <USBD_StdEPReq+0x112>
 800db6c:	e13e      	b.n	800ddec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db74:	b2db      	uxtb	r3, r3
 800db76:	2b02      	cmp	r3, #2
 800db78:	d002      	beq.n	800db80 <USBD_StdEPReq+0xac>
 800db7a:	2b03      	cmp	r3, #3
 800db7c:	d016      	beq.n	800dbac <USBD_StdEPReq+0xd8>
 800db7e:	e02c      	b.n	800dbda <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800db80:	7bbb      	ldrb	r3, [r7, #14]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d00d      	beq.n	800dba2 <USBD_StdEPReq+0xce>
 800db86:	7bbb      	ldrb	r3, [r7, #14]
 800db88:	2b80      	cmp	r3, #128	; 0x80
 800db8a:	d00a      	beq.n	800dba2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800db8c:	7bbb      	ldrb	r3, [r7, #14]
 800db8e:	4619      	mov	r1, r3
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f005 ffad 	bl	8013af0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800db96:	2180      	movs	r1, #128	; 0x80
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f005 ffa9 	bl	8013af0 <USBD_LL_StallEP>
 800db9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dba0:	e020      	b.n	800dbe4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800dba2:	6839      	ldr	r1, [r7, #0]
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f000 fca4 	bl	800e4f2 <USBD_CtlError>
              break;
 800dbaa:	e01b      	b.n	800dbe4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	885b      	ldrh	r3, [r3, #2]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d10e      	bne.n	800dbd2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dbb4:	7bbb      	ldrb	r3, [r7, #14]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d00b      	beq.n	800dbd2 <USBD_StdEPReq+0xfe>
 800dbba:	7bbb      	ldrb	r3, [r7, #14]
 800dbbc:	2b80      	cmp	r3, #128	; 0x80
 800dbbe:	d008      	beq.n	800dbd2 <USBD_StdEPReq+0xfe>
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	88db      	ldrh	r3, [r3, #6]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d104      	bne.n	800dbd2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dbc8:	7bbb      	ldrb	r3, [r7, #14]
 800dbca:	4619      	mov	r1, r3
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f005 ff8f 	bl	8013af0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f000 fd58 	bl	800e688 <USBD_CtlSendStatus>

              break;
 800dbd8:	e004      	b.n	800dbe4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800dbda:	6839      	ldr	r1, [r7, #0]
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 fc88 	bl	800e4f2 <USBD_CtlError>
              break;
 800dbe2:	bf00      	nop
          }
          break;
 800dbe4:	e107      	b.n	800ddf6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbec:	b2db      	uxtb	r3, r3
 800dbee:	2b02      	cmp	r3, #2
 800dbf0:	d002      	beq.n	800dbf8 <USBD_StdEPReq+0x124>
 800dbf2:	2b03      	cmp	r3, #3
 800dbf4:	d016      	beq.n	800dc24 <USBD_StdEPReq+0x150>
 800dbf6:	e04b      	b.n	800dc90 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dbf8:	7bbb      	ldrb	r3, [r7, #14]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d00d      	beq.n	800dc1a <USBD_StdEPReq+0x146>
 800dbfe:	7bbb      	ldrb	r3, [r7, #14]
 800dc00:	2b80      	cmp	r3, #128	; 0x80
 800dc02:	d00a      	beq.n	800dc1a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc04:	7bbb      	ldrb	r3, [r7, #14]
 800dc06:	4619      	mov	r1, r3
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f005 ff71 	bl	8013af0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc0e:	2180      	movs	r1, #128	; 0x80
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f005 ff6d 	bl	8013af0 <USBD_LL_StallEP>
 800dc16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dc18:	e040      	b.n	800dc9c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800dc1a:	6839      	ldr	r1, [r7, #0]
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 fc68 	bl	800e4f2 <USBD_CtlError>
              break;
 800dc22:	e03b      	b.n	800dc9c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	885b      	ldrh	r3, [r3, #2]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d136      	bne.n	800dc9a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dc2c:	7bbb      	ldrb	r3, [r7, #14]
 800dc2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d004      	beq.n	800dc40 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dc36:	7bbb      	ldrb	r3, [r7, #14]
 800dc38:	4619      	mov	r1, r3
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f005 ff77 	bl	8013b2e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f000 fd21 	bl	800e688 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800dc46:	7bbb      	ldrb	r3, [r7, #14]
 800dc48:	4619      	mov	r1, r3
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f7ff fde2 	bl	800d814 <USBD_CoreFindEP>
 800dc50:	4603      	mov	r3, r0
 800dc52:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dc54:	7b7b      	ldrb	r3, [r7, #13]
 800dc56:	2bff      	cmp	r3, #255	; 0xff
 800dc58:	d01f      	beq.n	800dc9a <USBD_StdEPReq+0x1c6>
 800dc5a:	7b7b      	ldrb	r3, [r7, #13]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d11c      	bne.n	800dc9a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800dc60:	7b7a      	ldrb	r2, [r7, #13]
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800dc68:	7b7a      	ldrb	r2, [r7, #13]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	32ae      	adds	r2, #174	; 0xae
 800dc6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc72:	689b      	ldr	r3, [r3, #8]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d010      	beq.n	800dc9a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dc78:	7b7a      	ldrb	r2, [r7, #13]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	32ae      	adds	r2, #174	; 0xae
 800dc7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc82:	689b      	ldr	r3, [r3, #8]
 800dc84:	6839      	ldr	r1, [r7, #0]
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	4798      	blx	r3
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800dc8e:	e004      	b.n	800dc9a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800dc90:	6839      	ldr	r1, [r7, #0]
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f000 fc2d 	bl	800e4f2 <USBD_CtlError>
              break;
 800dc98:	e000      	b.n	800dc9c <USBD_StdEPReq+0x1c8>
              break;
 800dc9a:	bf00      	nop
          }
          break;
 800dc9c:	e0ab      	b.n	800ddf6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dca4:	b2db      	uxtb	r3, r3
 800dca6:	2b02      	cmp	r3, #2
 800dca8:	d002      	beq.n	800dcb0 <USBD_StdEPReq+0x1dc>
 800dcaa:	2b03      	cmp	r3, #3
 800dcac:	d032      	beq.n	800dd14 <USBD_StdEPReq+0x240>
 800dcae:	e097      	b.n	800dde0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dcb0:	7bbb      	ldrb	r3, [r7, #14]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d007      	beq.n	800dcc6 <USBD_StdEPReq+0x1f2>
 800dcb6:	7bbb      	ldrb	r3, [r7, #14]
 800dcb8:	2b80      	cmp	r3, #128	; 0x80
 800dcba:	d004      	beq.n	800dcc6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800dcbc:	6839      	ldr	r1, [r7, #0]
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 fc17 	bl	800e4f2 <USBD_CtlError>
                break;
 800dcc4:	e091      	b.n	800ddea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dcc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	da0b      	bge.n	800dce6 <USBD_StdEPReq+0x212>
 800dcce:	7bbb      	ldrb	r3, [r7, #14]
 800dcd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dcd4:	4613      	mov	r3, r2
 800dcd6:	009b      	lsls	r3, r3, #2
 800dcd8:	4413      	add	r3, r2
 800dcda:	009b      	lsls	r3, r3, #2
 800dcdc:	3310      	adds	r3, #16
 800dcde:	687a      	ldr	r2, [r7, #4]
 800dce0:	4413      	add	r3, r2
 800dce2:	3304      	adds	r3, #4
 800dce4:	e00b      	b.n	800dcfe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dce6:	7bbb      	ldrb	r3, [r7, #14]
 800dce8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dcec:	4613      	mov	r3, r2
 800dcee:	009b      	lsls	r3, r3, #2
 800dcf0:	4413      	add	r3, r2
 800dcf2:	009b      	lsls	r3, r3, #2
 800dcf4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dcf8:	687a      	ldr	r2, [r7, #4]
 800dcfa:	4413      	add	r3, r2
 800dcfc:	3304      	adds	r3, #4
 800dcfe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	2200      	movs	r2, #0
 800dd04:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	2202      	movs	r2, #2
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f000 fc61 	bl	800e5d4 <USBD_CtlSendData>
              break;
 800dd12:	e06a      	b.n	800ddea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dd14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	da11      	bge.n	800dd40 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dd1c:	7bbb      	ldrb	r3, [r7, #14]
 800dd1e:	f003 020f 	and.w	r2, r3, #15
 800dd22:	6879      	ldr	r1, [r7, #4]
 800dd24:	4613      	mov	r3, r2
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	4413      	add	r3, r2
 800dd2a:	009b      	lsls	r3, r3, #2
 800dd2c:	440b      	add	r3, r1
 800dd2e:	3324      	adds	r3, #36	; 0x24
 800dd30:	881b      	ldrh	r3, [r3, #0]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d117      	bne.n	800dd66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dd36:	6839      	ldr	r1, [r7, #0]
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f000 fbda 	bl	800e4f2 <USBD_CtlError>
                  break;
 800dd3e:	e054      	b.n	800ddea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dd40:	7bbb      	ldrb	r3, [r7, #14]
 800dd42:	f003 020f 	and.w	r2, r3, #15
 800dd46:	6879      	ldr	r1, [r7, #4]
 800dd48:	4613      	mov	r3, r2
 800dd4a:	009b      	lsls	r3, r3, #2
 800dd4c:	4413      	add	r3, r2
 800dd4e:	009b      	lsls	r3, r3, #2
 800dd50:	440b      	add	r3, r1
 800dd52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dd56:	881b      	ldrh	r3, [r3, #0]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d104      	bne.n	800dd66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dd5c:	6839      	ldr	r1, [r7, #0]
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 fbc7 	bl	800e4f2 <USBD_CtlError>
                  break;
 800dd64:	e041      	b.n	800ddea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	da0b      	bge.n	800dd86 <USBD_StdEPReq+0x2b2>
 800dd6e:	7bbb      	ldrb	r3, [r7, #14]
 800dd70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd74:	4613      	mov	r3, r2
 800dd76:	009b      	lsls	r3, r3, #2
 800dd78:	4413      	add	r3, r2
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	3310      	adds	r3, #16
 800dd7e:	687a      	ldr	r2, [r7, #4]
 800dd80:	4413      	add	r3, r2
 800dd82:	3304      	adds	r3, #4
 800dd84:	e00b      	b.n	800dd9e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dd86:	7bbb      	ldrb	r3, [r7, #14]
 800dd88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd8c:	4613      	mov	r3, r2
 800dd8e:	009b      	lsls	r3, r3, #2
 800dd90:	4413      	add	r3, r2
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	4413      	add	r3, r2
 800dd9c:	3304      	adds	r3, #4
 800dd9e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dda0:	7bbb      	ldrb	r3, [r7, #14]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d002      	beq.n	800ddac <USBD_StdEPReq+0x2d8>
 800dda6:	7bbb      	ldrb	r3, [r7, #14]
 800dda8:	2b80      	cmp	r3, #128	; 0x80
 800ddaa:	d103      	bne.n	800ddb4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	2200      	movs	r2, #0
 800ddb0:	601a      	str	r2, [r3, #0]
 800ddb2:	e00e      	b.n	800ddd2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ddb4:	7bbb      	ldrb	r3, [r7, #14]
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f005 fed7 	bl	8013b6c <USBD_LL_IsStallEP>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d003      	beq.n	800ddcc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	601a      	str	r2, [r3, #0]
 800ddca:	e002      	b.n	800ddd2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	2202      	movs	r2, #2
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f000 fbfb 	bl	800e5d4 <USBD_CtlSendData>
              break;
 800ddde:	e004      	b.n	800ddea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800dde0:	6839      	ldr	r1, [r7, #0]
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f000 fb85 	bl	800e4f2 <USBD_CtlError>
              break;
 800dde8:	bf00      	nop
          }
          break;
 800ddea:	e004      	b.n	800ddf6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ddec:	6839      	ldr	r1, [r7, #0]
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 fb7f 	bl	800e4f2 <USBD_CtlError>
          break;
 800ddf4:	bf00      	nop
      }
      break;
 800ddf6:	e005      	b.n	800de04 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ddf8:	6839      	ldr	r1, [r7, #0]
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f000 fb79 	bl	800e4f2 <USBD_CtlError>
      break;
 800de00:	e000      	b.n	800de04 <USBD_StdEPReq+0x330>
      break;
 800de02:	bf00      	nop
  }

  return ret;
 800de04:	7bfb      	ldrb	r3, [r7, #15]
}
 800de06:	4618      	mov	r0, r3
 800de08:	3710      	adds	r7, #16
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
	...

0800de10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800de1a:	2300      	movs	r3, #0
 800de1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800de1e:	2300      	movs	r3, #0
 800de20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800de22:	2300      	movs	r3, #0
 800de24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	885b      	ldrh	r3, [r3, #2]
 800de2a:	0a1b      	lsrs	r3, r3, #8
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	3b01      	subs	r3, #1
 800de30:	2b0e      	cmp	r3, #14
 800de32:	f200 8152 	bhi.w	800e0da <USBD_GetDescriptor+0x2ca>
 800de36:	a201      	add	r2, pc, #4	; (adr r2, 800de3c <USBD_GetDescriptor+0x2c>)
 800de38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de3c:	0800dead 	.word	0x0800dead
 800de40:	0800dec5 	.word	0x0800dec5
 800de44:	0800df05 	.word	0x0800df05
 800de48:	0800e0db 	.word	0x0800e0db
 800de4c:	0800e0db 	.word	0x0800e0db
 800de50:	0800e07b 	.word	0x0800e07b
 800de54:	0800e0a7 	.word	0x0800e0a7
 800de58:	0800e0db 	.word	0x0800e0db
 800de5c:	0800e0db 	.word	0x0800e0db
 800de60:	0800e0db 	.word	0x0800e0db
 800de64:	0800e0db 	.word	0x0800e0db
 800de68:	0800e0db 	.word	0x0800e0db
 800de6c:	0800e0db 	.word	0x0800e0db
 800de70:	0800e0db 	.word	0x0800e0db
 800de74:	0800de79 	.word	0x0800de79
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de7e:	69db      	ldr	r3, [r3, #28]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d00b      	beq.n	800de9c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de8a:	69db      	ldr	r3, [r3, #28]
 800de8c:	687a      	ldr	r2, [r7, #4]
 800de8e:	7c12      	ldrb	r2, [r2, #16]
 800de90:	f107 0108 	add.w	r1, r7, #8
 800de94:	4610      	mov	r0, r2
 800de96:	4798      	blx	r3
 800de98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800de9a:	e126      	b.n	800e0ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800de9c:	6839      	ldr	r1, [r7, #0]
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f000 fb27 	bl	800e4f2 <USBD_CtlError>
        err++;
 800dea4:	7afb      	ldrb	r3, [r7, #11]
 800dea6:	3301      	adds	r3, #1
 800dea8:	72fb      	strb	r3, [r7, #11]
      break;
 800deaa:	e11e      	b.n	800e0ea <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	687a      	ldr	r2, [r7, #4]
 800deb6:	7c12      	ldrb	r2, [r2, #16]
 800deb8:	f107 0108 	add.w	r1, r7, #8
 800debc:	4610      	mov	r0, r2
 800debe:	4798      	blx	r3
 800dec0:	60f8      	str	r0, [r7, #12]
      break;
 800dec2:	e112      	b.n	800e0ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	7c1b      	ldrb	r3, [r3, #16]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d10d      	bne.n	800dee8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ded2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ded4:	f107 0208 	add.w	r2, r7, #8
 800ded8:	4610      	mov	r0, r2
 800deda:	4798      	blx	r3
 800dedc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	3301      	adds	r3, #1
 800dee2:	2202      	movs	r2, #2
 800dee4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dee6:	e100      	b.n	800e0ea <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800deee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800def0:	f107 0208 	add.w	r2, r7, #8
 800def4:	4610      	mov	r0, r2
 800def6:	4798      	blx	r3
 800def8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	3301      	adds	r3, #1
 800defe:	2202      	movs	r2, #2
 800df00:	701a      	strb	r2, [r3, #0]
      break;
 800df02:	e0f2      	b.n	800e0ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	885b      	ldrh	r3, [r3, #2]
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	2b05      	cmp	r3, #5
 800df0c:	f200 80ac 	bhi.w	800e068 <USBD_GetDescriptor+0x258>
 800df10:	a201      	add	r2, pc, #4	; (adr r2, 800df18 <USBD_GetDescriptor+0x108>)
 800df12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df16:	bf00      	nop
 800df18:	0800df31 	.word	0x0800df31
 800df1c:	0800df65 	.word	0x0800df65
 800df20:	0800df99 	.word	0x0800df99
 800df24:	0800dfcd 	.word	0x0800dfcd
 800df28:	0800e001 	.word	0x0800e001
 800df2c:	0800e035 	.word	0x0800e035
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df36:	685b      	ldr	r3, [r3, #4]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d00b      	beq.n	800df54 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	687a      	ldr	r2, [r7, #4]
 800df46:	7c12      	ldrb	r2, [r2, #16]
 800df48:	f107 0108 	add.w	r1, r7, #8
 800df4c:	4610      	mov	r0, r2
 800df4e:	4798      	blx	r3
 800df50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df52:	e091      	b.n	800e078 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800df54:	6839      	ldr	r1, [r7, #0]
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f000 facb 	bl	800e4f2 <USBD_CtlError>
            err++;
 800df5c:	7afb      	ldrb	r3, [r7, #11]
 800df5e:	3301      	adds	r3, #1
 800df60:	72fb      	strb	r3, [r7, #11]
          break;
 800df62:	e089      	b.n	800e078 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df6a:	689b      	ldr	r3, [r3, #8]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d00b      	beq.n	800df88 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df76:	689b      	ldr	r3, [r3, #8]
 800df78:	687a      	ldr	r2, [r7, #4]
 800df7a:	7c12      	ldrb	r2, [r2, #16]
 800df7c:	f107 0108 	add.w	r1, r7, #8
 800df80:	4610      	mov	r0, r2
 800df82:	4798      	blx	r3
 800df84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df86:	e077      	b.n	800e078 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800df88:	6839      	ldr	r1, [r7, #0]
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f000 fab1 	bl	800e4f2 <USBD_CtlError>
            err++;
 800df90:	7afb      	ldrb	r3, [r7, #11]
 800df92:	3301      	adds	r3, #1
 800df94:	72fb      	strb	r3, [r7, #11]
          break;
 800df96:	e06f      	b.n	800e078 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df9e:	68db      	ldr	r3, [r3, #12]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d00b      	beq.n	800dfbc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfaa:	68db      	ldr	r3, [r3, #12]
 800dfac:	687a      	ldr	r2, [r7, #4]
 800dfae:	7c12      	ldrb	r2, [r2, #16]
 800dfb0:	f107 0108 	add.w	r1, r7, #8
 800dfb4:	4610      	mov	r0, r2
 800dfb6:	4798      	blx	r3
 800dfb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dfba:	e05d      	b.n	800e078 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dfbc:	6839      	ldr	r1, [r7, #0]
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f000 fa97 	bl	800e4f2 <USBD_CtlError>
            err++;
 800dfc4:	7afb      	ldrb	r3, [r7, #11]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	72fb      	strb	r3, [r7, #11]
          break;
 800dfca:	e055      	b.n	800e078 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfd2:	691b      	ldr	r3, [r3, #16]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d00b      	beq.n	800dff0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfde:	691b      	ldr	r3, [r3, #16]
 800dfe0:	687a      	ldr	r2, [r7, #4]
 800dfe2:	7c12      	ldrb	r2, [r2, #16]
 800dfe4:	f107 0108 	add.w	r1, r7, #8
 800dfe8:	4610      	mov	r0, r2
 800dfea:	4798      	blx	r3
 800dfec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dfee:	e043      	b.n	800e078 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dff0:	6839      	ldr	r1, [r7, #0]
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f000 fa7d 	bl	800e4f2 <USBD_CtlError>
            err++;
 800dff8:	7afb      	ldrb	r3, [r7, #11]
 800dffa:	3301      	adds	r3, #1
 800dffc:	72fb      	strb	r3, [r7, #11]
          break;
 800dffe:	e03b      	b.n	800e078 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e006:	695b      	ldr	r3, [r3, #20]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d00b      	beq.n	800e024 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e012:	695b      	ldr	r3, [r3, #20]
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	7c12      	ldrb	r2, [r2, #16]
 800e018:	f107 0108 	add.w	r1, r7, #8
 800e01c:	4610      	mov	r0, r2
 800e01e:	4798      	blx	r3
 800e020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e022:	e029      	b.n	800e078 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e024:	6839      	ldr	r1, [r7, #0]
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f000 fa63 	bl	800e4f2 <USBD_CtlError>
            err++;
 800e02c:	7afb      	ldrb	r3, [r7, #11]
 800e02e:	3301      	adds	r3, #1
 800e030:	72fb      	strb	r3, [r7, #11]
          break;
 800e032:	e021      	b.n	800e078 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e03a:	699b      	ldr	r3, [r3, #24]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d00b      	beq.n	800e058 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e046:	699b      	ldr	r3, [r3, #24]
 800e048:	687a      	ldr	r2, [r7, #4]
 800e04a:	7c12      	ldrb	r2, [r2, #16]
 800e04c:	f107 0108 	add.w	r1, r7, #8
 800e050:	4610      	mov	r0, r2
 800e052:	4798      	blx	r3
 800e054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e056:	e00f      	b.n	800e078 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e058:	6839      	ldr	r1, [r7, #0]
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 fa49 	bl	800e4f2 <USBD_CtlError>
            err++;
 800e060:	7afb      	ldrb	r3, [r7, #11]
 800e062:	3301      	adds	r3, #1
 800e064:	72fb      	strb	r3, [r7, #11]
          break;
 800e066:	e007      	b.n	800e078 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e068:	6839      	ldr	r1, [r7, #0]
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 fa41 	bl	800e4f2 <USBD_CtlError>
          err++;
 800e070:	7afb      	ldrb	r3, [r7, #11]
 800e072:	3301      	adds	r3, #1
 800e074:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e076:	bf00      	nop
      }
      break;
 800e078:	e037      	b.n	800e0ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	7c1b      	ldrb	r3, [r3, #16]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d109      	bne.n	800e096 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e08a:	f107 0208 	add.w	r2, r7, #8
 800e08e:	4610      	mov	r0, r2
 800e090:	4798      	blx	r3
 800e092:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e094:	e029      	b.n	800e0ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e096:	6839      	ldr	r1, [r7, #0]
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f000 fa2a 	bl	800e4f2 <USBD_CtlError>
        err++;
 800e09e:	7afb      	ldrb	r3, [r7, #11]
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	72fb      	strb	r3, [r7, #11]
      break;
 800e0a4:	e021      	b.n	800e0ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	7c1b      	ldrb	r3, [r3, #16]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d10d      	bne.n	800e0ca <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0b6:	f107 0208 	add.w	r2, r7, #8
 800e0ba:	4610      	mov	r0, r2
 800e0bc:	4798      	blx	r3
 800e0be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	2207      	movs	r2, #7
 800e0c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e0c8:	e00f      	b.n	800e0ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e0ca:	6839      	ldr	r1, [r7, #0]
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f000 fa10 	bl	800e4f2 <USBD_CtlError>
        err++;
 800e0d2:	7afb      	ldrb	r3, [r7, #11]
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	72fb      	strb	r3, [r7, #11]
      break;
 800e0d8:	e007      	b.n	800e0ea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e0da:	6839      	ldr	r1, [r7, #0]
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f000 fa08 	bl	800e4f2 <USBD_CtlError>
      err++;
 800e0e2:	7afb      	ldrb	r3, [r7, #11]
 800e0e4:	3301      	adds	r3, #1
 800e0e6:	72fb      	strb	r3, [r7, #11]
      break;
 800e0e8:	bf00      	nop
  }

  if (err != 0U)
 800e0ea:	7afb      	ldrb	r3, [r7, #11]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d11e      	bne.n	800e12e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	88db      	ldrh	r3, [r3, #6]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d016      	beq.n	800e126 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e0f8:	893b      	ldrh	r3, [r7, #8]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d00e      	beq.n	800e11c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	88da      	ldrh	r2, [r3, #6]
 800e102:	893b      	ldrh	r3, [r7, #8]
 800e104:	4293      	cmp	r3, r2
 800e106:	bf28      	it	cs
 800e108:	4613      	movcs	r3, r2
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e10e:	893b      	ldrh	r3, [r7, #8]
 800e110:	461a      	mov	r2, r3
 800e112:	68f9      	ldr	r1, [r7, #12]
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f000 fa5d 	bl	800e5d4 <USBD_CtlSendData>
 800e11a:	e009      	b.n	800e130 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e11c:	6839      	ldr	r1, [r7, #0]
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f000 f9e7 	bl	800e4f2 <USBD_CtlError>
 800e124:	e004      	b.n	800e130 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f000 faae 	bl	800e688 <USBD_CtlSendStatus>
 800e12c:	e000      	b.n	800e130 <USBD_GetDescriptor+0x320>
    return;
 800e12e:	bf00      	nop
  }
}
 800e130:	3710      	adds	r7, #16
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}
 800e136:	bf00      	nop

0800e138 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b084      	sub	sp, #16
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	889b      	ldrh	r3, [r3, #4]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d131      	bne.n	800e1ae <USBD_SetAddress+0x76>
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	88db      	ldrh	r3, [r3, #6]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d12d      	bne.n	800e1ae <USBD_SetAddress+0x76>
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	885b      	ldrh	r3, [r3, #2]
 800e156:	2b7f      	cmp	r3, #127	; 0x7f
 800e158:	d829      	bhi.n	800e1ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	885b      	ldrh	r3, [r3, #2]
 800e15e:	b2db      	uxtb	r3, r3
 800e160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e164:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	2b03      	cmp	r3, #3
 800e170:	d104      	bne.n	800e17c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e172:	6839      	ldr	r1, [r7, #0]
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f000 f9bc 	bl	800e4f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e17a:	e01d      	b.n	800e1b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	7bfa      	ldrb	r2, [r7, #15]
 800e180:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e184:	7bfb      	ldrb	r3, [r7, #15]
 800e186:	4619      	mov	r1, r3
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f005 fd1b 	bl	8013bc4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f000 fa7a 	bl	800e688 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e194:	7bfb      	ldrb	r3, [r7, #15]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d004      	beq.n	800e1a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2202      	movs	r2, #2
 800e19e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1a2:	e009      	b.n	800e1b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1ac:	e004      	b.n	800e1b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e1ae:	6839      	ldr	r1, [r7, #0]
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f000 f99e 	bl	800e4f2 <USBD_CtlError>
  }
}
 800e1b6:	bf00      	nop
 800e1b8:	bf00      	nop
 800e1ba:	3710      	adds	r7, #16
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}

0800e1c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b084      	sub	sp, #16
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	885b      	ldrh	r3, [r3, #2]
 800e1d2:	b2da      	uxtb	r2, r3
 800e1d4:	4b4e      	ldr	r3, [pc, #312]	; (800e310 <USBD_SetConfig+0x150>)
 800e1d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e1d8:	4b4d      	ldr	r3, [pc, #308]	; (800e310 <USBD_SetConfig+0x150>)
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d905      	bls.n	800e1ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e1e0:	6839      	ldr	r1, [r7, #0]
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f000 f985 	bl	800e4f2 <USBD_CtlError>
    return USBD_FAIL;
 800e1e8:	2303      	movs	r3, #3
 800e1ea:	e08c      	b.n	800e306 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	2b02      	cmp	r3, #2
 800e1f6:	d002      	beq.n	800e1fe <USBD_SetConfig+0x3e>
 800e1f8:	2b03      	cmp	r3, #3
 800e1fa:	d029      	beq.n	800e250 <USBD_SetConfig+0x90>
 800e1fc:	e075      	b.n	800e2ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e1fe:	4b44      	ldr	r3, [pc, #272]	; (800e310 <USBD_SetConfig+0x150>)
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d020      	beq.n	800e248 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e206:	4b42      	ldr	r3, [pc, #264]	; (800e310 <USBD_SetConfig+0x150>)
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	461a      	mov	r2, r3
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e210:	4b3f      	ldr	r3, [pc, #252]	; (800e310 <USBD_SetConfig+0x150>)
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	4619      	mov	r1, r3
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f7fe ffbd 	bl	800d196 <USBD_SetClassConfig>
 800e21c:	4603      	mov	r3, r0
 800e21e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e220:	7bfb      	ldrb	r3, [r7, #15]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d008      	beq.n	800e238 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e226:	6839      	ldr	r1, [r7, #0]
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f000 f962 	bl	800e4f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2202      	movs	r2, #2
 800e232:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e236:	e065      	b.n	800e304 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f000 fa25 	bl	800e688 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2203      	movs	r2, #3
 800e242:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e246:	e05d      	b.n	800e304 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f000 fa1d 	bl	800e688 <USBD_CtlSendStatus>
      break;
 800e24e:	e059      	b.n	800e304 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e250:	4b2f      	ldr	r3, [pc, #188]	; (800e310 <USBD_SetConfig+0x150>)
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d112      	bne.n	800e27e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2202      	movs	r2, #2
 800e25c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e260:	4b2b      	ldr	r3, [pc, #172]	; (800e310 <USBD_SetConfig+0x150>)
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	461a      	mov	r2, r3
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e26a:	4b29      	ldr	r3, [pc, #164]	; (800e310 <USBD_SetConfig+0x150>)
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	4619      	mov	r1, r3
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f7fe ffac 	bl	800d1ce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 fa06 	bl	800e688 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e27c:	e042      	b.n	800e304 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e27e:	4b24      	ldr	r3, [pc, #144]	; (800e310 <USBD_SetConfig+0x150>)
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	461a      	mov	r2, r3
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	685b      	ldr	r3, [r3, #4]
 800e288:	429a      	cmp	r2, r3
 800e28a:	d02a      	beq.n	800e2e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	685b      	ldr	r3, [r3, #4]
 800e290:	b2db      	uxtb	r3, r3
 800e292:	4619      	mov	r1, r3
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f7fe ff9a 	bl	800d1ce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e29a:	4b1d      	ldr	r3, [pc, #116]	; (800e310 <USBD_SetConfig+0x150>)
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	461a      	mov	r2, r3
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e2a4:	4b1a      	ldr	r3, [pc, #104]	; (800e310 <USBD_SetConfig+0x150>)
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f7fe ff73 	bl	800d196 <USBD_SetClassConfig>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e2b4:	7bfb      	ldrb	r3, [r7, #15]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d00f      	beq.n	800e2da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e2ba:	6839      	ldr	r1, [r7, #0]
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f000 f918 	bl	800e4f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	685b      	ldr	r3, [r3, #4]
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f7fe ff7f 	bl	800d1ce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2202      	movs	r2, #2
 800e2d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e2d8:	e014      	b.n	800e304 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f000 f9d4 	bl	800e688 <USBD_CtlSendStatus>
      break;
 800e2e0:	e010      	b.n	800e304 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f000 f9d0 	bl	800e688 <USBD_CtlSendStatus>
      break;
 800e2e8:	e00c      	b.n	800e304 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e2ea:	6839      	ldr	r1, [r7, #0]
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f000 f900 	bl	800e4f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e2f2:	4b07      	ldr	r3, [pc, #28]	; (800e310 <USBD_SetConfig+0x150>)
 800e2f4:	781b      	ldrb	r3, [r3, #0]
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f7fe ff68 	bl	800d1ce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e2fe:	2303      	movs	r3, #3
 800e300:	73fb      	strb	r3, [r7, #15]
      break;
 800e302:	bf00      	nop
  }

  return ret;
 800e304:	7bfb      	ldrb	r3, [r7, #15]
}
 800e306:	4618      	mov	r0, r3
 800e308:	3710      	adds	r7, #16
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	bf00      	nop
 800e310:	20000940 	.word	0x20000940

0800e314 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b082      	sub	sp, #8
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	88db      	ldrh	r3, [r3, #6]
 800e322:	2b01      	cmp	r3, #1
 800e324:	d004      	beq.n	800e330 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e326:	6839      	ldr	r1, [r7, #0]
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f000 f8e2 	bl	800e4f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e32e:	e023      	b.n	800e378 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e336:	b2db      	uxtb	r3, r3
 800e338:	2b02      	cmp	r3, #2
 800e33a:	dc02      	bgt.n	800e342 <USBD_GetConfig+0x2e>
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	dc03      	bgt.n	800e348 <USBD_GetConfig+0x34>
 800e340:	e015      	b.n	800e36e <USBD_GetConfig+0x5a>
 800e342:	2b03      	cmp	r3, #3
 800e344:	d00b      	beq.n	800e35e <USBD_GetConfig+0x4a>
 800e346:	e012      	b.n	800e36e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2200      	movs	r2, #0
 800e34c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	3308      	adds	r3, #8
 800e352:	2201      	movs	r2, #1
 800e354:	4619      	mov	r1, r3
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f000 f93c 	bl	800e5d4 <USBD_CtlSendData>
        break;
 800e35c:	e00c      	b.n	800e378 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	3304      	adds	r3, #4
 800e362:	2201      	movs	r2, #1
 800e364:	4619      	mov	r1, r3
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f000 f934 	bl	800e5d4 <USBD_CtlSendData>
        break;
 800e36c:	e004      	b.n	800e378 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e36e:	6839      	ldr	r1, [r7, #0]
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f000 f8be 	bl	800e4f2 <USBD_CtlError>
        break;
 800e376:	bf00      	nop
}
 800e378:	bf00      	nop
 800e37a:	3708      	adds	r7, #8
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e390:	b2db      	uxtb	r3, r3
 800e392:	3b01      	subs	r3, #1
 800e394:	2b02      	cmp	r3, #2
 800e396:	d81e      	bhi.n	800e3d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	88db      	ldrh	r3, [r3, #6]
 800e39c:	2b02      	cmp	r3, #2
 800e39e:	d004      	beq.n	800e3aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e3a0:	6839      	ldr	r1, [r7, #0]
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 f8a5 	bl	800e4f2 <USBD_CtlError>
        break;
 800e3a8:	e01a      	b.n	800e3e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2201      	movs	r2, #1
 800e3ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d005      	beq.n	800e3c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	68db      	ldr	r3, [r3, #12]
 800e3be:	f043 0202 	orr.w	r2, r3, #2
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	330c      	adds	r3, #12
 800e3ca:	2202      	movs	r2, #2
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f000 f900 	bl	800e5d4 <USBD_CtlSendData>
      break;
 800e3d4:	e004      	b.n	800e3e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e3d6:	6839      	ldr	r1, [r7, #0]
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f000 f88a 	bl	800e4f2 <USBD_CtlError>
      break;
 800e3de:	bf00      	nop
  }
}
 800e3e0:	bf00      	nop
 800e3e2:	3708      	adds	r7, #8
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b082      	sub	sp, #8
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	885b      	ldrh	r3, [r3, #2]
 800e3f6:	2b01      	cmp	r3, #1
 800e3f8:	d107      	bne.n	800e40a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f000 f940 	bl	800e688 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e408:	e013      	b.n	800e432 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	885b      	ldrh	r3, [r3, #2]
 800e40e:	2b02      	cmp	r3, #2
 800e410:	d10b      	bne.n	800e42a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	889b      	ldrh	r3, [r3, #4]
 800e416:	0a1b      	lsrs	r3, r3, #8
 800e418:	b29b      	uxth	r3, r3
 800e41a:	b2da      	uxtb	r2, r3
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f000 f930 	bl	800e688 <USBD_CtlSendStatus>
}
 800e428:	e003      	b.n	800e432 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e42a:	6839      	ldr	r1, [r7, #0]
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f000 f860 	bl	800e4f2 <USBD_CtlError>
}
 800e432:	bf00      	nop
 800e434:	3708      	adds	r7, #8
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}

0800e43a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e43a:	b580      	push	{r7, lr}
 800e43c:	b082      	sub	sp, #8
 800e43e:	af00      	add	r7, sp, #0
 800e440:	6078      	str	r0, [r7, #4]
 800e442:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e44a:	b2db      	uxtb	r3, r3
 800e44c:	3b01      	subs	r3, #1
 800e44e:	2b02      	cmp	r3, #2
 800e450:	d80b      	bhi.n	800e46a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	885b      	ldrh	r3, [r3, #2]
 800e456:	2b01      	cmp	r3, #1
 800e458:	d10c      	bne.n	800e474 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2200      	movs	r2, #0
 800e45e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 f910 	bl	800e688 <USBD_CtlSendStatus>
      }
      break;
 800e468:	e004      	b.n	800e474 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e46a:	6839      	ldr	r1, [r7, #0]
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f000 f840 	bl	800e4f2 <USBD_CtlError>
      break;
 800e472:	e000      	b.n	800e476 <USBD_ClrFeature+0x3c>
      break;
 800e474:	bf00      	nop
  }
}
 800e476:	bf00      	nop
 800e478:	3708      	adds	r7, #8
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}

0800e47e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e47e:	b580      	push	{r7, lr}
 800e480:	b084      	sub	sp, #16
 800e482:	af00      	add	r7, sp, #0
 800e484:	6078      	str	r0, [r7, #4]
 800e486:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	781a      	ldrb	r2, [r3, #0]
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	3301      	adds	r3, #1
 800e498:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	781a      	ldrb	r2, [r3, #0]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e4a8:	68f8      	ldr	r0, [r7, #12]
 800e4aa:	f7ff fa17 	bl	800d8dc <SWAPBYTE>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	3301      	adds	r3, #1
 800e4ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	3301      	adds	r3, #1
 800e4c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e4c2:	68f8      	ldr	r0, [r7, #12]
 800e4c4:	f7ff fa0a 	bl	800d8dc <SWAPBYTE>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	3301      	adds	r3, #1
 800e4da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e4dc:	68f8      	ldr	r0, [r7, #12]
 800e4de:	f7ff f9fd 	bl	800d8dc <SWAPBYTE>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	461a      	mov	r2, r3
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	80da      	strh	r2, [r3, #6]
}
 800e4ea:	bf00      	nop
 800e4ec:	3710      	adds	r7, #16
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}

0800e4f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4f2:	b580      	push	{r7, lr}
 800e4f4:	b082      	sub	sp, #8
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	6078      	str	r0, [r7, #4]
 800e4fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e4fc:	2180      	movs	r1, #128	; 0x80
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f005 faf6 	bl	8013af0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e504:	2100      	movs	r1, #0
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f005 faf2 	bl	8013af0 <USBD_LL_StallEP>
}
 800e50c:	bf00      	nop
 800e50e:	3708      	adds	r7, #8
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b086      	sub	sp, #24
 800e518:	af00      	add	r7, sp, #0
 800e51a:	60f8      	str	r0, [r7, #12]
 800e51c:	60b9      	str	r1, [r7, #8]
 800e51e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e520:	2300      	movs	r3, #0
 800e522:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d036      	beq.n	800e598 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e52e:	6938      	ldr	r0, [r7, #16]
 800e530:	f000 f836 	bl	800e5a0 <USBD_GetLen>
 800e534:	4603      	mov	r3, r0
 800e536:	3301      	adds	r3, #1
 800e538:	b29b      	uxth	r3, r3
 800e53a:	005b      	lsls	r3, r3, #1
 800e53c:	b29a      	uxth	r2, r3
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e542:	7dfb      	ldrb	r3, [r7, #23]
 800e544:	68ba      	ldr	r2, [r7, #8]
 800e546:	4413      	add	r3, r2
 800e548:	687a      	ldr	r2, [r7, #4]
 800e54a:	7812      	ldrb	r2, [r2, #0]
 800e54c:	701a      	strb	r2, [r3, #0]
  idx++;
 800e54e:	7dfb      	ldrb	r3, [r7, #23]
 800e550:	3301      	adds	r3, #1
 800e552:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e554:	7dfb      	ldrb	r3, [r7, #23]
 800e556:	68ba      	ldr	r2, [r7, #8]
 800e558:	4413      	add	r3, r2
 800e55a:	2203      	movs	r2, #3
 800e55c:	701a      	strb	r2, [r3, #0]
  idx++;
 800e55e:	7dfb      	ldrb	r3, [r7, #23]
 800e560:	3301      	adds	r3, #1
 800e562:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e564:	e013      	b.n	800e58e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e566:	7dfb      	ldrb	r3, [r7, #23]
 800e568:	68ba      	ldr	r2, [r7, #8]
 800e56a:	4413      	add	r3, r2
 800e56c:	693a      	ldr	r2, [r7, #16]
 800e56e:	7812      	ldrb	r2, [r2, #0]
 800e570:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	3301      	adds	r3, #1
 800e576:	613b      	str	r3, [r7, #16]
    idx++;
 800e578:	7dfb      	ldrb	r3, [r7, #23]
 800e57a:	3301      	adds	r3, #1
 800e57c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e57e:	7dfb      	ldrb	r3, [r7, #23]
 800e580:	68ba      	ldr	r2, [r7, #8]
 800e582:	4413      	add	r3, r2
 800e584:	2200      	movs	r2, #0
 800e586:	701a      	strb	r2, [r3, #0]
    idx++;
 800e588:	7dfb      	ldrb	r3, [r7, #23]
 800e58a:	3301      	adds	r3, #1
 800e58c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d1e7      	bne.n	800e566 <USBD_GetString+0x52>
 800e596:	e000      	b.n	800e59a <USBD_GetString+0x86>
    return;
 800e598:	bf00      	nop
  }
}
 800e59a:	3718      	adds	r7, #24
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}

0800e5a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b085      	sub	sp, #20
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e5b0:	e005      	b.n	800e5be <USBD_GetLen+0x1e>
  {
    len++;
 800e5b2:	7bfb      	ldrb	r3, [r7, #15]
 800e5b4:	3301      	adds	r3, #1
 800e5b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d1f5      	bne.n	800e5b2 <USBD_GetLen+0x12>
  }

  return len;
 800e5c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	3714      	adds	r7, #20
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr

0800e5d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b084      	sub	sp, #16
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	60b9      	str	r1, [r7, #8]
 800e5de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2202      	movs	r2, #2
 800e5e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	687a      	ldr	r2, [r7, #4]
 800e5f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	68ba      	ldr	r2, [r7, #8]
 800e5f8:	2100      	movs	r1, #0
 800e5fa:	68f8      	ldr	r0, [r7, #12]
 800e5fc:	f005 fb01 	bl	8013c02 <USBD_LL_Transmit>

  return USBD_OK;
 800e600:	2300      	movs	r3, #0
}
 800e602:	4618      	mov	r0, r3
 800e604:	3710      	adds	r7, #16
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}

0800e60a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b084      	sub	sp, #16
 800e60e:	af00      	add	r7, sp, #0
 800e610:	60f8      	str	r0, [r7, #12]
 800e612:	60b9      	str	r1, [r7, #8]
 800e614:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	68ba      	ldr	r2, [r7, #8]
 800e61a:	2100      	movs	r1, #0
 800e61c:	68f8      	ldr	r0, [r7, #12]
 800e61e:	f005 faf0 	bl	8013c02 <USBD_LL_Transmit>

  return USBD_OK;
 800e622:	2300      	movs	r3, #0
}
 800e624:	4618      	mov	r0, r3
 800e626:	3710      	adds	r7, #16
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}

0800e62c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b084      	sub	sp, #16
 800e630:	af00      	add	r7, sp, #0
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2203      	movs	r2, #3
 800e63c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	687a      	ldr	r2, [r7, #4]
 800e64c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	68ba      	ldr	r2, [r7, #8]
 800e654:	2100      	movs	r1, #0
 800e656:	68f8      	ldr	r0, [r7, #12]
 800e658:	f005 faf4 	bl	8013c44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e65c:	2300      	movs	r3, #0
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3710      	adds	r7, #16
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}

0800e666 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e666:	b580      	push	{r7, lr}
 800e668:	b084      	sub	sp, #16
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	60f8      	str	r0, [r7, #12]
 800e66e:	60b9      	str	r1, [r7, #8]
 800e670:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	68ba      	ldr	r2, [r7, #8]
 800e676:	2100      	movs	r1, #0
 800e678:	68f8      	ldr	r0, [r7, #12]
 800e67a:	f005 fae3 	bl	8013c44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e67e:	2300      	movs	r3, #0
}
 800e680:	4618      	mov	r0, r3
 800e682:	3710      	adds	r7, #16
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2204      	movs	r2, #4
 800e694:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e698:	2300      	movs	r3, #0
 800e69a:	2200      	movs	r2, #0
 800e69c:	2100      	movs	r1, #0
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f005 faaf 	bl	8013c02 <USBD_LL_Transmit>

  return USBD_OK;
 800e6a4:	2300      	movs	r3, #0
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3708      	adds	r7, #8
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}

0800e6ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e6ae:	b580      	push	{r7, lr}
 800e6b0:	b082      	sub	sp, #8
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2205      	movs	r2, #5
 800e6ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e6be:	2300      	movs	r3, #0
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	2100      	movs	r1, #0
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f005 fabd 	bl	8013c44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e6ca:	2300      	movs	r3, #0
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3708      	adds	r7, #8
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	4603      	mov	r3, r0
 800e6dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e6de:	79fb      	ldrb	r3, [r7, #7]
 800e6e0:	4a08      	ldr	r2, [pc, #32]	; (800e704 <disk_status+0x30>)
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	4413      	add	r3, r2
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	685b      	ldr	r3, [r3, #4]
 800e6ea:	79fa      	ldrb	r2, [r7, #7]
 800e6ec:	4905      	ldr	r1, [pc, #20]	; (800e704 <disk_status+0x30>)
 800e6ee:	440a      	add	r2, r1
 800e6f0:	7a12      	ldrb	r2, [r2, #8]
 800e6f2:	4610      	mov	r0, r2
 800e6f4:	4798      	blx	r3
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e6fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3710      	adds	r7, #16
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}
 800e704:	2000096c 	.word	0x2000096c

0800e708 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b084      	sub	sp, #16
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	4603      	mov	r3, r0
 800e710:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e712:	2300      	movs	r3, #0
 800e714:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e716:	79fb      	ldrb	r3, [r7, #7]
 800e718:	4a0d      	ldr	r2, [pc, #52]	; (800e750 <disk_initialize+0x48>)
 800e71a:	5cd3      	ldrb	r3, [r2, r3]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d111      	bne.n	800e744 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e720:	79fb      	ldrb	r3, [r7, #7]
 800e722:	4a0b      	ldr	r2, [pc, #44]	; (800e750 <disk_initialize+0x48>)
 800e724:	2101      	movs	r1, #1
 800e726:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e728:	79fb      	ldrb	r3, [r7, #7]
 800e72a:	4a09      	ldr	r2, [pc, #36]	; (800e750 <disk_initialize+0x48>)
 800e72c:	009b      	lsls	r3, r3, #2
 800e72e:	4413      	add	r3, r2
 800e730:	685b      	ldr	r3, [r3, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	79fa      	ldrb	r2, [r7, #7]
 800e736:	4906      	ldr	r1, [pc, #24]	; (800e750 <disk_initialize+0x48>)
 800e738:	440a      	add	r2, r1
 800e73a:	7a12      	ldrb	r2, [r2, #8]
 800e73c:	4610      	mov	r0, r2
 800e73e:	4798      	blx	r3
 800e740:	4603      	mov	r3, r0
 800e742:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e744:	7bfb      	ldrb	r3, [r7, #15]
}
 800e746:	4618      	mov	r0, r3
 800e748:	3710      	adds	r7, #16
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}
 800e74e:	bf00      	nop
 800e750:	2000096c 	.word	0x2000096c

0800e754 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e754:	b590      	push	{r4, r7, lr}
 800e756:	b087      	sub	sp, #28
 800e758:	af00      	add	r7, sp, #0
 800e75a:	60b9      	str	r1, [r7, #8]
 800e75c:	607a      	str	r2, [r7, #4]
 800e75e:	603b      	str	r3, [r7, #0]
 800e760:	4603      	mov	r3, r0
 800e762:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e764:	7bfb      	ldrb	r3, [r7, #15]
 800e766:	4a0a      	ldr	r2, [pc, #40]	; (800e790 <disk_read+0x3c>)
 800e768:	009b      	lsls	r3, r3, #2
 800e76a:	4413      	add	r3, r2
 800e76c:	685b      	ldr	r3, [r3, #4]
 800e76e:	689c      	ldr	r4, [r3, #8]
 800e770:	7bfb      	ldrb	r3, [r7, #15]
 800e772:	4a07      	ldr	r2, [pc, #28]	; (800e790 <disk_read+0x3c>)
 800e774:	4413      	add	r3, r2
 800e776:	7a18      	ldrb	r0, [r3, #8]
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	68b9      	ldr	r1, [r7, #8]
 800e77e:	47a0      	blx	r4
 800e780:	4603      	mov	r3, r0
 800e782:	75fb      	strb	r3, [r7, #23]
  return res;
 800e784:	7dfb      	ldrb	r3, [r7, #23]
}
 800e786:	4618      	mov	r0, r3
 800e788:	371c      	adds	r7, #28
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd90      	pop	{r4, r7, pc}
 800e78e:	bf00      	nop
 800e790:	2000096c 	.word	0x2000096c

0800e794 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e794:	b590      	push	{r4, r7, lr}
 800e796:	b087      	sub	sp, #28
 800e798:	af00      	add	r7, sp, #0
 800e79a:	60b9      	str	r1, [r7, #8]
 800e79c:	607a      	str	r2, [r7, #4]
 800e79e:	603b      	str	r3, [r7, #0]
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e7a4:	7bfb      	ldrb	r3, [r7, #15]
 800e7a6:	4a0a      	ldr	r2, [pc, #40]	; (800e7d0 <disk_write+0x3c>)
 800e7a8:	009b      	lsls	r3, r3, #2
 800e7aa:	4413      	add	r3, r2
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	68dc      	ldr	r4, [r3, #12]
 800e7b0:	7bfb      	ldrb	r3, [r7, #15]
 800e7b2:	4a07      	ldr	r2, [pc, #28]	; (800e7d0 <disk_write+0x3c>)
 800e7b4:	4413      	add	r3, r2
 800e7b6:	7a18      	ldrb	r0, [r3, #8]
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	687a      	ldr	r2, [r7, #4]
 800e7bc:	68b9      	ldr	r1, [r7, #8]
 800e7be:	47a0      	blx	r4
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	75fb      	strb	r3, [r7, #23]
  return res;
 800e7c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	371c      	adds	r7, #28
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd90      	pop	{r4, r7, pc}
 800e7ce:	bf00      	nop
 800e7d0:	2000096c 	.word	0x2000096c

0800e7d4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b085      	sub	sp, #20
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	3301      	adds	r3, #1
 800e7e0:	781b      	ldrb	r3, [r3, #0]
 800e7e2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e7e4:	89fb      	ldrh	r3, [r7, #14]
 800e7e6:	021b      	lsls	r3, r3, #8
 800e7e8:	b21a      	sxth	r2, r3
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	781b      	ldrb	r3, [r3, #0]
 800e7ee:	b21b      	sxth	r3, r3
 800e7f0:	4313      	orrs	r3, r2
 800e7f2:	b21b      	sxth	r3, r3
 800e7f4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e7f6:	89fb      	ldrh	r3, [r7, #14]
}
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	3714      	adds	r7, #20
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e802:	4770      	bx	lr

0800e804 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e804:	b480      	push	{r7}
 800e806:	b085      	sub	sp, #20
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	3303      	adds	r3, #3
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	021b      	lsls	r3, r3, #8
 800e818:	687a      	ldr	r2, [r7, #4]
 800e81a:	3202      	adds	r2, #2
 800e81c:	7812      	ldrb	r2, [r2, #0]
 800e81e:	4313      	orrs	r3, r2
 800e820:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	021b      	lsls	r3, r3, #8
 800e826:	687a      	ldr	r2, [r7, #4]
 800e828:	3201      	adds	r2, #1
 800e82a:	7812      	ldrb	r2, [r2, #0]
 800e82c:	4313      	orrs	r3, r2
 800e82e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	021b      	lsls	r3, r3, #8
 800e834:	687a      	ldr	r2, [r7, #4]
 800e836:	7812      	ldrb	r2, [r2, #0]
 800e838:	4313      	orrs	r3, r2
 800e83a:	60fb      	str	r3, [r7, #12]
	return rv;
 800e83c:	68fb      	ldr	r3, [r7, #12]
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3714      	adds	r7, #20
 800e842:	46bd      	mov	sp, r7
 800e844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e848:	4770      	bx	lr

0800e84a <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800e84a:	b580      	push	{r7, lr}
 800e84c:	b082      	sub	sp, #8
 800e84e:	af00      	add	r7, sp, #0
 800e850:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d009      	beq.n	800e86c <lock_fs+0x22>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	68db      	ldr	r3, [r3, #12]
 800e85c:	4618      	mov	r0, r3
 800e85e:	f000 fc8f 	bl	800f180 <ff_req_grant>
 800e862:	4603      	mov	r3, r0
 800e864:	2b00      	cmp	r3, #0
 800e866:	d001      	beq.n	800e86c <lock_fs+0x22>
 800e868:	2301      	movs	r3, #1
 800e86a:	e000      	b.n	800e86e <lock_fs+0x24>
 800e86c:	2300      	movs	r3, #0
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3708      	adds	r7, #8
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800e876:	b580      	push	{r7, lr}
 800e878:	b082      	sub	sp, #8
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
 800e87e:	460b      	mov	r3, r1
 800e880:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d00d      	beq.n	800e8a4 <unlock_fs+0x2e>
 800e888:	78fb      	ldrb	r3, [r7, #3]
 800e88a:	2b0c      	cmp	r3, #12
 800e88c:	d00a      	beq.n	800e8a4 <unlock_fs+0x2e>
 800e88e:	78fb      	ldrb	r3, [r7, #3]
 800e890:	2b0b      	cmp	r3, #11
 800e892:	d007      	beq.n	800e8a4 <unlock_fs+0x2e>
 800e894:	78fb      	ldrb	r3, [r7, #3]
 800e896:	2b0f      	cmp	r3, #15
 800e898:	d004      	beq.n	800e8a4 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	68db      	ldr	r3, [r3, #12]
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f000 fc83 	bl	800f1aa <ff_rel_grant>
	}
}
 800e8a4:	bf00      	nop
 800e8a6:	3708      	adds	r7, #8
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b085      	sub	sp, #20
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	60fb      	str	r3, [r7, #12]
 800e8b8:	e010      	b.n	800e8dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e8ba:	4a0d      	ldr	r2, [pc, #52]	; (800e8f0 <clear_lock+0x44>)
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	011b      	lsls	r3, r3, #4
 800e8c0:	4413      	add	r3, r2
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	687a      	ldr	r2, [r7, #4]
 800e8c6:	429a      	cmp	r2, r3
 800e8c8:	d105      	bne.n	800e8d6 <clear_lock+0x2a>
 800e8ca:	4a09      	ldr	r2, [pc, #36]	; (800e8f0 <clear_lock+0x44>)
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	011b      	lsls	r3, r3, #4
 800e8d0:	4413      	add	r3, r2
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	3301      	adds	r3, #1
 800e8da:	60fb      	str	r3, [r7, #12]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	2b01      	cmp	r3, #1
 800e8e0:	d9eb      	bls.n	800e8ba <clear_lock+0xe>
	}
}
 800e8e2:	bf00      	nop
 800e8e4:	bf00      	nop
 800e8e6:	3714      	adds	r7, #20
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr
 800e8f0:	2000094c 	.word	0x2000094c

0800e8f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b086      	sub	sp, #24
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	78db      	ldrb	r3, [r3, #3]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d034      	beq.n	800e972 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e90c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	7858      	ldrb	r0, [r3, #1]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e918:	2301      	movs	r3, #1
 800e91a:	697a      	ldr	r2, [r7, #20]
 800e91c:	f7ff ff3a 	bl	800e794 <disk_write>
 800e920:	4603      	mov	r3, r0
 800e922:	2b00      	cmp	r3, #0
 800e924:	d002      	beq.n	800e92c <sync_window+0x38>
			res = FR_DISK_ERR;
 800e926:	2301      	movs	r3, #1
 800e928:	73fb      	strb	r3, [r7, #15]
 800e92a:	e022      	b.n	800e972 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2200      	movs	r2, #0
 800e930:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e936:	697a      	ldr	r2, [r7, #20]
 800e938:	1ad2      	subs	r2, r2, r3
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	69db      	ldr	r3, [r3, #28]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d217      	bcs.n	800e972 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	789b      	ldrb	r3, [r3, #2]
 800e946:	613b      	str	r3, [r7, #16]
 800e948:	e010      	b.n	800e96c <sync_window+0x78>
					wsect += fs->fsize;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	69db      	ldr	r3, [r3, #28]
 800e94e:	697a      	ldr	r2, [r7, #20]
 800e950:	4413      	add	r3, r2
 800e952:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	7858      	ldrb	r0, [r3, #1]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e95e:	2301      	movs	r3, #1
 800e960:	697a      	ldr	r2, [r7, #20]
 800e962:	f7ff ff17 	bl	800e794 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	3b01      	subs	r3, #1
 800e96a:	613b      	str	r3, [r7, #16]
 800e96c:	693b      	ldr	r3, [r7, #16]
 800e96e:	2b01      	cmp	r3, #1
 800e970:	d8eb      	bhi.n	800e94a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e972:	7bfb      	ldrb	r3, [r7, #15]
}
 800e974:	4618      	mov	r0, r3
 800e976:	3718      	adds	r7, #24
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b084      	sub	sp, #16
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e986:	2300      	movs	r3, #0
 800e988:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e98e:	683a      	ldr	r2, [r7, #0]
 800e990:	429a      	cmp	r2, r3
 800e992:	d01b      	beq.n	800e9cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f7ff ffad 	bl	800e8f4 <sync_window>
 800e99a:	4603      	mov	r3, r0
 800e99c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e99e:	7bfb      	ldrb	r3, [r7, #15]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d113      	bne.n	800e9cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	7858      	ldrb	r0, [r3, #1]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	683a      	ldr	r2, [r7, #0]
 800e9b2:	f7ff fecf 	bl	800e754 <disk_read>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d004      	beq.n	800e9c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e9bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e9c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	683a      	ldr	r2, [r7, #0]
 800e9ca:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800e9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3710      	adds	r7, #16
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}

0800e9d6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e9d6:	b480      	push	{r7}
 800e9d8:	b087      	sub	sp, #28
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e9de:	f04f 33ff 	mov.w	r3, #4294967295
 800e9e2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d031      	beq.n	800ea50 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	617b      	str	r3, [r7, #20]
 800e9f2:	e002      	b.n	800e9fa <get_ldnumber+0x24>
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	617b      	str	r3, [r7, #20]
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	2b20      	cmp	r3, #32
 800ea00:	d903      	bls.n	800ea0a <get_ldnumber+0x34>
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	2b3a      	cmp	r3, #58	; 0x3a
 800ea08:	d1f4      	bne.n	800e9f4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	781b      	ldrb	r3, [r3, #0]
 800ea0e:	2b3a      	cmp	r3, #58	; 0x3a
 800ea10:	d11c      	bne.n	800ea4c <get_ldnumber+0x76>
			tp = *path;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	1c5a      	adds	r2, r3, #1
 800ea1c:	60fa      	str	r2, [r7, #12]
 800ea1e:	781b      	ldrb	r3, [r3, #0]
 800ea20:	3b30      	subs	r3, #48	; 0x30
 800ea22:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	2b09      	cmp	r3, #9
 800ea28:	d80e      	bhi.n	800ea48 <get_ldnumber+0x72>
 800ea2a:	68fa      	ldr	r2, [r7, #12]
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	d10a      	bne.n	800ea48 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d107      	bne.n	800ea48 <get_ldnumber+0x72>
					vol = (int)i;
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	3301      	adds	r3, #1
 800ea40:	617b      	str	r3, [r7, #20]
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	697a      	ldr	r2, [r7, #20]
 800ea46:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	e002      	b.n	800ea52 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ea50:	693b      	ldr	r3, [r7, #16]
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	371c      	adds	r7, #28
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr
	...

0800ea60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	70da      	strb	r2, [r3, #3]
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f04f 32ff 	mov.w	r2, #4294967295
 800ea76:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ea78:	6839      	ldr	r1, [r7, #0]
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f7ff ff7e 	bl	800e97c <move_window>
 800ea80:	4603      	mov	r3, r0
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d001      	beq.n	800ea8a <check_fs+0x2a>
 800ea86:	2304      	movs	r3, #4
 800ea88:	e038      	b.n	800eafc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	3334      	adds	r3, #52	; 0x34
 800ea8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7ff fe9e 	bl	800e7d4 <ld_word>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d001      	beq.n	800eaa8 <check_fs+0x48>
 800eaa4:	2303      	movs	r3, #3
 800eaa6:	e029      	b.n	800eafc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eaae:	2be9      	cmp	r3, #233	; 0xe9
 800eab0:	d009      	beq.n	800eac6 <check_fs+0x66>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eab8:	2beb      	cmp	r3, #235	; 0xeb
 800eaba:	d11e      	bne.n	800eafa <check_fs+0x9a>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800eac2:	2b90      	cmp	r3, #144	; 0x90
 800eac4:	d119      	bne.n	800eafa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	3334      	adds	r3, #52	; 0x34
 800eaca:	3336      	adds	r3, #54	; 0x36
 800eacc:	4618      	mov	r0, r3
 800eace:	f7ff fe99 	bl	800e804 <ld_dword>
 800ead2:	4603      	mov	r3, r0
 800ead4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ead8:	4a0a      	ldr	r2, [pc, #40]	; (800eb04 <check_fs+0xa4>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d101      	bne.n	800eae2 <check_fs+0x82>
 800eade:	2300      	movs	r3, #0
 800eae0:	e00c      	b.n	800eafc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	3334      	adds	r3, #52	; 0x34
 800eae6:	3352      	adds	r3, #82	; 0x52
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7ff fe8b 	bl	800e804 <ld_dword>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	4a05      	ldr	r2, [pc, #20]	; (800eb08 <check_fs+0xa8>)
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	d101      	bne.n	800eafa <check_fs+0x9a>
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	e000      	b.n	800eafc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800eafa:	2302      	movs	r3, #2
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3708      	adds	r7, #8
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	00544146 	.word	0x00544146
 800eb08:	33544146 	.word	0x33544146

0800eb0c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b096      	sub	sp, #88	; 0x58
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	60b9      	str	r1, [r7, #8]
 800eb16:	4613      	mov	r3, r2
 800eb18:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800eb20:	68f8      	ldr	r0, [r7, #12]
 800eb22:	f7ff ff58 	bl	800e9d6 <get_ldnumber>
 800eb26:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800eb28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	da01      	bge.n	800eb32 <find_volume+0x26>
 800eb2e:	230b      	movs	r3, #11
 800eb30:	e235      	b.n	800ef9e <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800eb32:	4aa5      	ldr	r2, [pc, #660]	; (800edc8 <find_volume+0x2bc>)
 800eb34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb3a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800eb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d101      	bne.n	800eb46 <find_volume+0x3a>
 800eb42:	230c      	movs	r3, #12
 800eb44:	e22b      	b.n	800ef9e <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800eb46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eb48:	f7ff fe7f 	bl	800e84a <lock_fs>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d101      	bne.n	800eb56 <find_volume+0x4a>
 800eb52:	230f      	movs	r3, #15
 800eb54:	e223      	b.n	800ef9e <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb5a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800eb5c:	79fb      	ldrb	r3, [r7, #7]
 800eb5e:	f023 0301 	bic.w	r3, r3, #1
 800eb62:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800eb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb66:	781b      	ldrb	r3, [r3, #0]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d01a      	beq.n	800eba2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800eb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb6e:	785b      	ldrb	r3, [r3, #1]
 800eb70:	4618      	mov	r0, r3
 800eb72:	f7ff fdaf 	bl	800e6d4 <disk_status>
 800eb76:	4603      	mov	r3, r0
 800eb78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800eb7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eb80:	f003 0301 	and.w	r3, r3, #1
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d10c      	bne.n	800eba2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800eb88:	79fb      	ldrb	r3, [r7, #7]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d007      	beq.n	800eb9e <find_volume+0x92>
 800eb8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eb92:	f003 0304 	and.w	r3, r3, #4
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d001      	beq.n	800eb9e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800eb9a:	230a      	movs	r3, #10
 800eb9c:	e1ff      	b.n	800ef9e <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800eb9e:	2300      	movs	r3, #0
 800eba0:	e1fd      	b.n	800ef9e <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800eba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba4:	2200      	movs	r2, #0
 800eba6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800eba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebaa:	b2da      	uxtb	r2, r3
 800ebac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ebb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb2:	785b      	ldrb	r3, [r3, #1]
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f7ff fda7 	bl	800e708 <disk_initialize>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ebc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ebc4:	f003 0301 	and.w	r3, r3, #1
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d001      	beq.n	800ebd0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ebcc:	2303      	movs	r3, #3
 800ebce:	e1e6      	b.n	800ef9e <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ebd0:	79fb      	ldrb	r3, [r7, #7]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d007      	beq.n	800ebe6 <find_volume+0xda>
 800ebd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ebda:	f003 0304 	and.w	r3, r3, #4
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d001      	beq.n	800ebe6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800ebe2:	230a      	movs	r3, #10
 800ebe4:	e1db      	b.n	800ef9e <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ebea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ebec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ebee:	f7ff ff37 	bl	800ea60 <check_fs>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ebf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ebfc:	2b02      	cmp	r3, #2
 800ebfe:	d149      	bne.n	800ec94 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ec00:	2300      	movs	r3, #0
 800ec02:	643b      	str	r3, [r7, #64]	; 0x40
 800ec04:	e01e      	b.n	800ec44 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ec06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec08:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ec0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec0e:	011b      	lsls	r3, r3, #4
 800ec10:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ec14:	4413      	add	r3, r2
 800ec16:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ec18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec1a:	3304      	adds	r3, #4
 800ec1c:	781b      	ldrb	r3, [r3, #0]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d006      	beq.n	800ec30 <find_volume+0x124>
 800ec22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec24:	3308      	adds	r3, #8
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7ff fdec 	bl	800e804 <ld_dword>
 800ec2c:	4602      	mov	r2, r0
 800ec2e:	e000      	b.n	800ec32 <find_volume+0x126>
 800ec30:	2200      	movs	r2, #0
 800ec32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec34:	009b      	lsls	r3, r3, #2
 800ec36:	3358      	adds	r3, #88	; 0x58
 800ec38:	443b      	add	r3, r7
 800ec3a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ec3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec40:	3301      	adds	r3, #1
 800ec42:	643b      	str	r3, [r7, #64]	; 0x40
 800ec44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec46:	2b03      	cmp	r3, #3
 800ec48:	d9dd      	bls.n	800ec06 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ec4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d002      	beq.n	800ec5a <find_volume+0x14e>
 800ec54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec56:	3b01      	subs	r3, #1
 800ec58:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ec5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	3358      	adds	r3, #88	; 0x58
 800ec60:	443b      	add	r3, r7
 800ec62:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ec66:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ec68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d005      	beq.n	800ec7a <find_volume+0x16e>
 800ec6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ec70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec72:	f7ff fef5 	bl	800ea60 <check_fs>
 800ec76:	4603      	mov	r3, r0
 800ec78:	e000      	b.n	800ec7c <find_volume+0x170>
 800ec7a:	2303      	movs	r3, #3
 800ec7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ec80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d905      	bls.n	800ec94 <find_volume+0x188>
 800ec88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	643b      	str	r3, [r7, #64]	; 0x40
 800ec8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec90:	2b03      	cmp	r3, #3
 800ec92:	d9e2      	bls.n	800ec5a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ec94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ec98:	2b04      	cmp	r3, #4
 800ec9a:	d101      	bne.n	800eca0 <find_volume+0x194>
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	e17e      	b.n	800ef9e <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800eca0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	d901      	bls.n	800ecac <find_volume+0x1a0>
 800eca8:	230d      	movs	r3, #13
 800ecaa:	e178      	b.n	800ef9e <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ecac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecae:	3334      	adds	r3, #52	; 0x34
 800ecb0:	330b      	adds	r3, #11
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7ff fd8e 	bl	800e7d4 <ld_word>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecbe:	d001      	beq.n	800ecc4 <find_volume+0x1b8>
 800ecc0:	230d      	movs	r3, #13
 800ecc2:	e16c      	b.n	800ef9e <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ecc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc6:	3334      	adds	r3, #52	; 0x34
 800ecc8:	3316      	adds	r3, #22
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7ff fd82 	bl	800e7d4 <ld_word>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ecd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d106      	bne.n	800ece8 <find_volume+0x1dc>
 800ecda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecdc:	3334      	adds	r3, #52	; 0x34
 800ecde:	3324      	adds	r3, #36	; 0x24
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7ff fd8f 	bl	800e804 <ld_dword>
 800ece6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ece8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ecec:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ecee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ecf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ecf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecfa:	789b      	ldrb	r3, [r3, #2]
 800ecfc:	2b01      	cmp	r3, #1
 800ecfe:	d005      	beq.n	800ed0c <find_volume+0x200>
 800ed00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed02:	789b      	ldrb	r3, [r3, #2]
 800ed04:	2b02      	cmp	r3, #2
 800ed06:	d001      	beq.n	800ed0c <find_volume+0x200>
 800ed08:	230d      	movs	r3, #13
 800ed0a:	e148      	b.n	800ef9e <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ed0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed0e:	789b      	ldrb	r3, [r3, #2]
 800ed10:	461a      	mov	r2, r3
 800ed12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed14:	fb02 f303 	mul.w	r3, r2, r3
 800ed18:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ed1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ed20:	b29a      	uxth	r2, r3
 800ed22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed24:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ed26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed28:	895b      	ldrh	r3, [r3, #10]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d008      	beq.n	800ed40 <find_volume+0x234>
 800ed2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed30:	895b      	ldrh	r3, [r3, #10]
 800ed32:	461a      	mov	r2, r3
 800ed34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed36:	895b      	ldrh	r3, [r3, #10]
 800ed38:	3b01      	subs	r3, #1
 800ed3a:	4013      	ands	r3, r2
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d001      	beq.n	800ed44 <find_volume+0x238>
 800ed40:	230d      	movs	r3, #13
 800ed42:	e12c      	b.n	800ef9e <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ed44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed46:	3334      	adds	r3, #52	; 0x34
 800ed48:	3311      	adds	r3, #17
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7ff fd42 	bl	800e7d4 <ld_word>
 800ed50:	4603      	mov	r3, r0
 800ed52:	461a      	mov	r2, r3
 800ed54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed56:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ed58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed5a:	891b      	ldrh	r3, [r3, #8]
 800ed5c:	f003 030f 	and.w	r3, r3, #15
 800ed60:	b29b      	uxth	r3, r3
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d001      	beq.n	800ed6a <find_volume+0x25e>
 800ed66:	230d      	movs	r3, #13
 800ed68:	e119      	b.n	800ef9e <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ed6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed6c:	3334      	adds	r3, #52	; 0x34
 800ed6e:	3313      	adds	r3, #19
 800ed70:	4618      	mov	r0, r3
 800ed72:	f7ff fd2f 	bl	800e7d4 <ld_word>
 800ed76:	4603      	mov	r3, r0
 800ed78:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ed7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d106      	bne.n	800ed8e <find_volume+0x282>
 800ed80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed82:	3334      	adds	r3, #52	; 0x34
 800ed84:	3320      	adds	r3, #32
 800ed86:	4618      	mov	r0, r3
 800ed88:	f7ff fd3c 	bl	800e804 <ld_dword>
 800ed8c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ed8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed90:	3334      	adds	r3, #52	; 0x34
 800ed92:	330e      	adds	r3, #14
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7ff fd1d 	bl	800e7d4 <ld_word>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ed9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d101      	bne.n	800eda8 <find_volume+0x29c>
 800eda4:	230d      	movs	r3, #13
 800eda6:	e0fa      	b.n	800ef9e <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800eda8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800edaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edac:	4413      	add	r3, r2
 800edae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edb0:	8912      	ldrh	r2, [r2, #8]
 800edb2:	0912      	lsrs	r2, r2, #4
 800edb4:	b292      	uxth	r2, r2
 800edb6:	4413      	add	r3, r2
 800edb8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800edba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800edbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d204      	bcs.n	800edcc <find_volume+0x2c0>
 800edc2:	230d      	movs	r3, #13
 800edc4:	e0eb      	b.n	800ef9e <find_volume+0x492>
 800edc6:	bf00      	nop
 800edc8:	20000944 	.word	0x20000944
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800edcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800edce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd0:	1ad3      	subs	r3, r2, r3
 800edd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edd4:	8952      	ldrh	r2, [r2, #10]
 800edd6:	fbb3 f3f2 	udiv	r3, r3, r2
 800edda:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800eddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d101      	bne.n	800ede6 <find_volume+0x2da>
 800ede2:	230d      	movs	r3, #13
 800ede4:	e0db      	b.n	800ef9e <find_volume+0x492>
		fmt = FS_FAT32;
 800ede6:	2303      	movs	r3, #3
 800ede8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800edec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edee:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d802      	bhi.n	800edfc <find_volume+0x2f0>
 800edf6:	2302      	movs	r3, #2
 800edf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800edfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfe:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d802      	bhi.n	800ee0c <find_volume+0x300>
 800ee06:	2301      	movs	r3, #1
 800ee08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ee0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0e:	1c9a      	adds	r2, r3, #2
 800ee10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee12:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ee14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee18:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ee1a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ee1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee1e:	441a      	add	r2, r3
 800ee20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee22:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ee24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee28:	441a      	add	r2, r3
 800ee2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ee2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee32:	2b03      	cmp	r3, #3
 800ee34:	d11e      	bne.n	800ee74 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ee36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee38:	3334      	adds	r3, #52	; 0x34
 800ee3a:	332a      	adds	r3, #42	; 0x2a
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7ff fcc9 	bl	800e7d4 <ld_word>
 800ee42:	4603      	mov	r3, r0
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d001      	beq.n	800ee4c <find_volume+0x340>
 800ee48:	230d      	movs	r3, #13
 800ee4a:	e0a8      	b.n	800ef9e <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ee4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee4e:	891b      	ldrh	r3, [r3, #8]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d001      	beq.n	800ee58 <find_volume+0x34c>
 800ee54:	230d      	movs	r3, #13
 800ee56:	e0a2      	b.n	800ef9e <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ee58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5a:	3334      	adds	r3, #52	; 0x34
 800ee5c:	332c      	adds	r3, #44	; 0x2c
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7ff fcd0 	bl	800e804 <ld_dword>
 800ee64:	4602      	mov	r2, r0
 800ee66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee68:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ee6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6c:	699b      	ldr	r3, [r3, #24]
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	647b      	str	r3, [r7, #68]	; 0x44
 800ee72:	e01f      	b.n	800eeb4 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ee74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee76:	891b      	ldrh	r3, [r3, #8]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d101      	bne.n	800ee80 <find_volume+0x374>
 800ee7c:	230d      	movs	r3, #13
 800ee7e:	e08e      	b.n	800ef9e <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ee80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee86:	441a      	add	r2, r3
 800ee88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee8a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ee8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee90:	2b02      	cmp	r3, #2
 800ee92:	d103      	bne.n	800ee9c <find_volume+0x390>
 800ee94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee96:	699b      	ldr	r3, [r3, #24]
 800ee98:	005b      	lsls	r3, r3, #1
 800ee9a:	e00a      	b.n	800eeb2 <find_volume+0x3a6>
 800ee9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee9e:	699a      	ldr	r2, [r3, #24]
 800eea0:	4613      	mov	r3, r2
 800eea2:	005b      	lsls	r3, r3, #1
 800eea4:	4413      	add	r3, r2
 800eea6:	085a      	lsrs	r2, r3, #1
 800eea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeaa:	699b      	ldr	r3, [r3, #24]
 800eeac:	f003 0301 	and.w	r3, r3, #1
 800eeb0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800eeb2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800eeb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb6:	69da      	ldr	r2, [r3, #28]
 800eeb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eeba:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800eebe:	0a5b      	lsrs	r3, r3, #9
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d201      	bcs.n	800eec8 <find_volume+0x3bc>
 800eec4:	230d      	movs	r3, #13
 800eec6:	e06a      	b.n	800ef9e <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800eec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeca:	f04f 32ff 	mov.w	r2, #4294967295
 800eece:	615a      	str	r2, [r3, #20]
 800eed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed2:	695a      	ldr	r2, [r3, #20]
 800eed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800eed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeda:	2280      	movs	r2, #128	; 0x80
 800eedc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800eede:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eee2:	2b03      	cmp	r3, #3
 800eee4:	d149      	bne.n	800ef7a <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800eee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee8:	3334      	adds	r3, #52	; 0x34
 800eeea:	3330      	adds	r3, #48	; 0x30
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7ff fc71 	bl	800e7d4 <ld_word>
 800eef2:	4603      	mov	r3, r0
 800eef4:	2b01      	cmp	r3, #1
 800eef6:	d140      	bne.n	800ef7a <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800eef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eefa:	3301      	adds	r3, #1
 800eefc:	4619      	mov	r1, r3
 800eefe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ef00:	f7ff fd3c 	bl	800e97c <move_window>
 800ef04:	4603      	mov	r3, r0
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d137      	bne.n	800ef7a <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800ef0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ef10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef12:	3334      	adds	r3, #52	; 0x34
 800ef14:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7ff fc5b 	bl	800e7d4 <ld_word>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	461a      	mov	r2, r3
 800ef22:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d127      	bne.n	800ef7a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ef2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef2c:	3334      	adds	r3, #52	; 0x34
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7ff fc68 	bl	800e804 <ld_dword>
 800ef34:	4603      	mov	r3, r0
 800ef36:	4a1c      	ldr	r2, [pc, #112]	; (800efa8 <find_volume+0x49c>)
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d11e      	bne.n	800ef7a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ef3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef3e:	3334      	adds	r3, #52	; 0x34
 800ef40:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7ff fc5d 	bl	800e804 <ld_dword>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	4a17      	ldr	r2, [pc, #92]	; (800efac <find_volume+0x4a0>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d113      	bne.n	800ef7a <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ef52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef54:	3334      	adds	r3, #52	; 0x34
 800ef56:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7ff fc52 	bl	800e804 <ld_dword>
 800ef60:	4602      	mov	r2, r0
 800ef62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef64:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ef66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef68:	3334      	adds	r3, #52	; 0x34
 800ef6a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7ff fc48 	bl	800e804 <ld_dword>
 800ef74:	4602      	mov	r2, r0
 800ef76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef78:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ef7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef7c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ef80:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ef82:	4b0b      	ldr	r3, [pc, #44]	; (800efb0 <find_volume+0x4a4>)
 800ef84:	881b      	ldrh	r3, [r3, #0]
 800ef86:	3301      	adds	r3, #1
 800ef88:	b29a      	uxth	r2, r3
 800ef8a:	4b09      	ldr	r3, [pc, #36]	; (800efb0 <find_volume+0x4a4>)
 800ef8c:	801a      	strh	r2, [r3, #0]
 800ef8e:	4b08      	ldr	r3, [pc, #32]	; (800efb0 <find_volume+0x4a4>)
 800ef90:	881a      	ldrh	r2, [r3, #0]
 800ef92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef94:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ef96:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ef98:	f7ff fc88 	bl	800e8ac <clear_lock>
#endif
	return FR_OK;
 800ef9c:	2300      	movs	r3, #0
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3758      	adds	r7, #88	; 0x58
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}
 800efa6:	bf00      	nop
 800efa8:	41615252 	.word	0x41615252
 800efac:	61417272 	.word	0x61417272
 800efb0:	20000948 	.word	0x20000948

0800efb4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b088      	sub	sp, #32
 800efb8:	af00      	add	r7, sp, #0
 800efba:	60f8      	str	r0, [r7, #12]
 800efbc:	60b9      	str	r1, [r7, #8]
 800efbe:	4613      	mov	r3, r2
 800efc0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800efc6:	f107 0310 	add.w	r3, r7, #16
 800efca:	4618      	mov	r0, r3
 800efcc:	f7ff fd03 	bl	800e9d6 <get_ldnumber>
 800efd0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800efd2:	69fb      	ldr	r3, [r7, #28]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	da01      	bge.n	800efdc <f_mount+0x28>
 800efd8:	230b      	movs	r3, #11
 800efda:	e048      	b.n	800f06e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800efdc:	4a26      	ldr	r2, [pc, #152]	; (800f078 <f_mount+0xc4>)
 800efde:	69fb      	ldr	r3, [r7, #28]
 800efe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efe4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800efe6:	69bb      	ldr	r3, [r7, #24]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d00f      	beq.n	800f00c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800efec:	69b8      	ldr	r0, [r7, #24]
 800efee:	f7ff fc5d 	bl	800e8ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800eff2:	69bb      	ldr	r3, [r7, #24]
 800eff4:	68db      	ldr	r3, [r3, #12]
 800eff6:	4618      	mov	r0, r3
 800eff8:	f000 f8b6 	bl	800f168 <ff_del_syncobj>
 800effc:	4603      	mov	r3, r0
 800effe:	2b00      	cmp	r3, #0
 800f000:	d101      	bne.n	800f006 <f_mount+0x52>
 800f002:	2302      	movs	r3, #2
 800f004:	e033      	b.n	800f06e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f006:	69bb      	ldr	r3, [r7, #24]
 800f008:	2200      	movs	r2, #0
 800f00a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d00f      	beq.n	800f032 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	2200      	movs	r2, #0
 800f016:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800f018:	69fb      	ldr	r3, [r7, #28]
 800f01a:	b2da      	uxtb	r2, r3
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	330c      	adds	r3, #12
 800f020:	4619      	mov	r1, r3
 800f022:	4610      	mov	r0, r2
 800f024:	f000 f885 	bl	800f132 <ff_cre_syncobj>
 800f028:	4603      	mov	r3, r0
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d101      	bne.n	800f032 <f_mount+0x7e>
 800f02e:	2302      	movs	r3, #2
 800f030:	e01d      	b.n	800f06e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f032:	68fa      	ldr	r2, [r7, #12]
 800f034:	4910      	ldr	r1, [pc, #64]	; (800f078 <f_mount+0xc4>)
 800f036:	69fb      	ldr	r3, [r7, #28]
 800f038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d002      	beq.n	800f048 <f_mount+0x94>
 800f042:	79fb      	ldrb	r3, [r7, #7]
 800f044:	2b01      	cmp	r3, #1
 800f046:	d001      	beq.n	800f04c <f_mount+0x98>
 800f048:	2300      	movs	r3, #0
 800f04a:	e010      	b.n	800f06e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f04c:	f107 010c 	add.w	r1, r7, #12
 800f050:	f107 0308 	add.w	r3, r7, #8
 800f054:	2200      	movs	r2, #0
 800f056:	4618      	mov	r0, r3
 800f058:	f7ff fd58 	bl	800eb0c <find_volume>
 800f05c:	4603      	mov	r3, r0
 800f05e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	7dfa      	ldrb	r2, [r7, #23]
 800f064:	4611      	mov	r1, r2
 800f066:	4618      	mov	r0, r3
 800f068:	f7ff fc05 	bl	800e876 <unlock_fs>
 800f06c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3720      	adds	r7, #32
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}
 800f076:	bf00      	nop
 800f078:	20000944 	.word	0x20000944

0800f07c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f07c:	b480      	push	{r7}
 800f07e:	b087      	sub	sp, #28
 800f080:	af00      	add	r7, sp, #0
 800f082:	60f8      	str	r0, [r7, #12]
 800f084:	60b9      	str	r1, [r7, #8]
 800f086:	4613      	mov	r3, r2
 800f088:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f08a:	2301      	movs	r3, #1
 800f08c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f08e:	2300      	movs	r3, #0
 800f090:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f092:	4b1f      	ldr	r3, [pc, #124]	; (800f110 <FATFS_LinkDriverEx+0x94>)
 800f094:	7a5b      	ldrb	r3, [r3, #9]
 800f096:	b2db      	uxtb	r3, r3
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d131      	bne.n	800f100 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f09c:	4b1c      	ldr	r3, [pc, #112]	; (800f110 <FATFS_LinkDriverEx+0x94>)
 800f09e:	7a5b      	ldrb	r3, [r3, #9]
 800f0a0:	b2db      	uxtb	r3, r3
 800f0a2:	461a      	mov	r2, r3
 800f0a4:	4b1a      	ldr	r3, [pc, #104]	; (800f110 <FATFS_LinkDriverEx+0x94>)
 800f0a6:	2100      	movs	r1, #0
 800f0a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f0aa:	4b19      	ldr	r3, [pc, #100]	; (800f110 <FATFS_LinkDriverEx+0x94>)
 800f0ac:	7a5b      	ldrb	r3, [r3, #9]
 800f0ae:	b2db      	uxtb	r3, r3
 800f0b0:	4a17      	ldr	r2, [pc, #92]	; (800f110 <FATFS_LinkDriverEx+0x94>)
 800f0b2:	009b      	lsls	r3, r3, #2
 800f0b4:	4413      	add	r3, r2
 800f0b6:	68fa      	ldr	r2, [r7, #12]
 800f0b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f0ba:	4b15      	ldr	r3, [pc, #84]	; (800f110 <FATFS_LinkDriverEx+0x94>)
 800f0bc:	7a5b      	ldrb	r3, [r3, #9]
 800f0be:	b2db      	uxtb	r3, r3
 800f0c0:	461a      	mov	r2, r3
 800f0c2:	4b13      	ldr	r3, [pc, #76]	; (800f110 <FATFS_LinkDriverEx+0x94>)
 800f0c4:	4413      	add	r3, r2
 800f0c6:	79fa      	ldrb	r2, [r7, #7]
 800f0c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f0ca:	4b11      	ldr	r3, [pc, #68]	; (800f110 <FATFS_LinkDriverEx+0x94>)
 800f0cc:	7a5b      	ldrb	r3, [r3, #9]
 800f0ce:	b2db      	uxtb	r3, r3
 800f0d0:	1c5a      	adds	r2, r3, #1
 800f0d2:	b2d1      	uxtb	r1, r2
 800f0d4:	4a0e      	ldr	r2, [pc, #56]	; (800f110 <FATFS_LinkDriverEx+0x94>)
 800f0d6:	7251      	strb	r1, [r2, #9]
 800f0d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f0da:	7dbb      	ldrb	r3, [r7, #22]
 800f0dc:	3330      	adds	r3, #48	; 0x30
 800f0de:	b2da      	uxtb	r2, r3
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	3301      	adds	r3, #1
 800f0e8:	223a      	movs	r2, #58	; 0x3a
 800f0ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	3302      	adds	r3, #2
 800f0f0:	222f      	movs	r2, #47	; 0x2f
 800f0f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	3303      	adds	r3, #3
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f100:	7dfb      	ldrb	r3, [r7, #23]
}
 800f102:	4618      	mov	r0, r3
 800f104:	371c      	adds	r7, #28
 800f106:	46bd      	mov	sp, r7
 800f108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10c:	4770      	bx	lr
 800f10e:	bf00      	nop
 800f110:	2000096c 	.word	0x2000096c

0800f114 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b082      	sub	sp, #8
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f11e:	2200      	movs	r2, #0
 800f120:	6839      	ldr	r1, [r7, #0]
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f7ff ffaa 	bl	800f07c <FATFS_LinkDriverEx>
 800f128:	4603      	mov	r3, r0
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3708      	adds	r7, #8
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}

0800f132 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800f132:	b580      	push	{r7, lr}
 800f134:	b084      	sub	sp, #16
 800f136:	af00      	add	r7, sp, #0
 800f138:	4603      	mov	r3, r0
 800f13a:	6039      	str	r1, [r7, #0]
 800f13c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800f13e:	2200      	movs	r2, #0
 800f140:	2101      	movs	r1, #1
 800f142:	2001      	movs	r0, #1
 800f144:	f000 fb20 	bl	800f788 <osSemaphoreNew>
 800f148:	4602      	mov	r2, r0
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	bf14      	ite	ne
 800f156:	2301      	movne	r3, #1
 800f158:	2300      	moveq	r3, #0
 800f15a:	b2db      	uxtb	r3, r3
 800f15c:	60fb      	str	r3, [r7, #12]

    return ret;
 800f15e:	68fb      	ldr	r3, [r7, #12]
}
 800f160:	4618      	mov	r0, r3
 800f162:	3710      	adds	r7, #16
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}

0800f168 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b082      	sub	sp, #8
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800f170:	6878      	ldr	r0, [r7, #4]
 800f172:	f000 fc29 	bl	800f9c8 <osSemaphoreDelete>
#endif
    return 1;
 800f176:	2301      	movs	r3, #1
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3708      	adds	r7, #8
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}

0800f180 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f188:	2300      	movs	r3, #0
 800f18a:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800f18c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f000 fb83 	bl	800f89c <osSemaphoreAcquire>
 800f196:	4603      	mov	r3, r0
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d101      	bne.n	800f1a0 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800f19c:	2301      	movs	r3, #1
 800f19e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3710      	adds	r7, #16
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}

0800f1aa <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f1aa:	b580      	push	{r7, lr}
 800f1ac:	b082      	sub	sp, #8
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f000 fbc4 	bl	800f940 <osSemaphoreRelease>
#endif
}
 800f1b8:	bf00      	nop
 800f1ba:	3708      	adds	r7, #8
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}

0800f1c0 <__NVIC_SetPriority>:
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b083      	sub	sp, #12
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	6039      	str	r1, [r7, #0]
 800f1ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f1cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	db0a      	blt.n	800f1ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	b2da      	uxtb	r2, r3
 800f1d8:	490c      	ldr	r1, [pc, #48]	; (800f20c <__NVIC_SetPriority+0x4c>)
 800f1da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1de:	0112      	lsls	r2, r2, #4
 800f1e0:	b2d2      	uxtb	r2, r2
 800f1e2:	440b      	add	r3, r1
 800f1e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f1e8:	e00a      	b.n	800f200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	b2da      	uxtb	r2, r3
 800f1ee:	4908      	ldr	r1, [pc, #32]	; (800f210 <__NVIC_SetPriority+0x50>)
 800f1f0:	79fb      	ldrb	r3, [r7, #7]
 800f1f2:	f003 030f 	and.w	r3, r3, #15
 800f1f6:	3b04      	subs	r3, #4
 800f1f8:	0112      	lsls	r2, r2, #4
 800f1fa:	b2d2      	uxtb	r2, r2
 800f1fc:	440b      	add	r3, r1
 800f1fe:	761a      	strb	r2, [r3, #24]
}
 800f200:	bf00      	nop
 800f202:	370c      	adds	r7, #12
 800f204:	46bd      	mov	sp, r7
 800f206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20a:	4770      	bx	lr
 800f20c:	e000e100 	.word	0xe000e100
 800f210:	e000ed00 	.word	0xe000ed00

0800f214 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f214:	b580      	push	{r7, lr}
 800f216:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f218:	4b05      	ldr	r3, [pc, #20]	; (800f230 <SysTick_Handler+0x1c>)
 800f21a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f21c:	f002 fdc2 	bl	8011da4 <xTaskGetSchedulerState>
 800f220:	4603      	mov	r3, r0
 800f222:	2b01      	cmp	r3, #1
 800f224:	d001      	beq.n	800f22a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f226:	f003 fd97 	bl	8012d58 <xPortSysTickHandler>
  }
}
 800f22a:	bf00      	nop
 800f22c:	bd80      	pop	{r7, pc}
 800f22e:	bf00      	nop
 800f230:	e000e010 	.word	0xe000e010

0800f234 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f234:	b580      	push	{r7, lr}
 800f236:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f238:	2100      	movs	r1, #0
 800f23a:	f06f 0004 	mvn.w	r0, #4
 800f23e:	f7ff ffbf 	bl	800f1c0 <__NVIC_SetPriority>
#endif
}
 800f242:	bf00      	nop
 800f244:	bd80      	pop	{r7, pc}
	...

0800f248 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f248:	b480      	push	{r7}
 800f24a:	b083      	sub	sp, #12
 800f24c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f24e:	f3ef 8305 	mrs	r3, IPSR
 800f252:	603b      	str	r3, [r7, #0]
  return(result);
 800f254:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f256:	2b00      	cmp	r3, #0
 800f258:	d003      	beq.n	800f262 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f25a:	f06f 0305 	mvn.w	r3, #5
 800f25e:	607b      	str	r3, [r7, #4]
 800f260:	e00c      	b.n	800f27c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f262:	4b0a      	ldr	r3, [pc, #40]	; (800f28c <osKernelInitialize+0x44>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d105      	bne.n	800f276 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f26a:	4b08      	ldr	r3, [pc, #32]	; (800f28c <osKernelInitialize+0x44>)
 800f26c:	2201      	movs	r2, #1
 800f26e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f270:	2300      	movs	r3, #0
 800f272:	607b      	str	r3, [r7, #4]
 800f274:	e002      	b.n	800f27c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f276:	f04f 33ff 	mov.w	r3, #4294967295
 800f27a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f27c:	687b      	ldr	r3, [r7, #4]
}
 800f27e:	4618      	mov	r0, r3
 800f280:	370c      	adds	r7, #12
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr
 800f28a:	bf00      	nop
 800f28c:	20000978 	.word	0x20000978

0800f290 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f290:	b580      	push	{r7, lr}
 800f292:	b082      	sub	sp, #8
 800f294:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f296:	f3ef 8305 	mrs	r3, IPSR
 800f29a:	603b      	str	r3, [r7, #0]
  return(result);
 800f29c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d003      	beq.n	800f2aa <osKernelStart+0x1a>
    stat = osErrorISR;
 800f2a2:	f06f 0305 	mvn.w	r3, #5
 800f2a6:	607b      	str	r3, [r7, #4]
 800f2a8:	e010      	b.n	800f2cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f2aa:	4b0b      	ldr	r3, [pc, #44]	; (800f2d8 <osKernelStart+0x48>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	2b01      	cmp	r3, #1
 800f2b0:	d109      	bne.n	800f2c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f2b2:	f7ff ffbf 	bl	800f234 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f2b6:	4b08      	ldr	r3, [pc, #32]	; (800f2d8 <osKernelStart+0x48>)
 800f2b8:	2202      	movs	r2, #2
 800f2ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f2bc:	f002 f878 	bl	80113b0 <vTaskStartScheduler>
      stat = osOK;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	607b      	str	r3, [r7, #4]
 800f2c4:	e002      	b.n	800f2cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800f2ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f2cc:	687b      	ldr	r3, [r7, #4]
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3708      	adds	r7, #8
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	20000978 	.word	0x20000978

0800f2dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b08e      	sub	sp, #56	; 0x38
 800f2e0:	af04      	add	r7, sp, #16
 800f2e2:	60f8      	str	r0, [r7, #12]
 800f2e4:	60b9      	str	r1, [r7, #8]
 800f2e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2ec:	f3ef 8305 	mrs	r3, IPSR
 800f2f0:	617b      	str	r3, [r7, #20]
  return(result);
 800f2f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d17e      	bne.n	800f3f6 <osThreadNew+0x11a>
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d07b      	beq.n	800f3f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f2fe:	2380      	movs	r3, #128	; 0x80
 800f300:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f302:	2318      	movs	r3, #24
 800f304:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f306:	2300      	movs	r3, #0
 800f308:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f30a:	f04f 33ff 	mov.w	r3, #4294967295
 800f30e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d045      	beq.n	800f3a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d002      	beq.n	800f324 <osThreadNew+0x48>
        name = attr->name;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	699b      	ldr	r3, [r3, #24]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d002      	beq.n	800f332 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	699b      	ldr	r3, [r3, #24]
 800f330:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f332:	69fb      	ldr	r3, [r7, #28]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d008      	beq.n	800f34a <osThreadNew+0x6e>
 800f338:	69fb      	ldr	r3, [r7, #28]
 800f33a:	2b38      	cmp	r3, #56	; 0x38
 800f33c:	d805      	bhi.n	800f34a <osThreadNew+0x6e>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	685b      	ldr	r3, [r3, #4]
 800f342:	f003 0301 	and.w	r3, r3, #1
 800f346:	2b00      	cmp	r3, #0
 800f348:	d001      	beq.n	800f34e <osThreadNew+0x72>
        return (NULL);
 800f34a:	2300      	movs	r3, #0
 800f34c:	e054      	b.n	800f3f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	695b      	ldr	r3, [r3, #20]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d003      	beq.n	800f35e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	695b      	ldr	r3, [r3, #20]
 800f35a:	089b      	lsrs	r3, r3, #2
 800f35c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	689b      	ldr	r3, [r3, #8]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d00e      	beq.n	800f384 <osThreadNew+0xa8>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	68db      	ldr	r3, [r3, #12]
 800f36a:	2bbb      	cmp	r3, #187	; 0xbb
 800f36c:	d90a      	bls.n	800f384 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f372:	2b00      	cmp	r3, #0
 800f374:	d006      	beq.n	800f384 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	695b      	ldr	r3, [r3, #20]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d002      	beq.n	800f384 <osThreadNew+0xa8>
        mem = 1;
 800f37e:	2301      	movs	r3, #1
 800f380:	61bb      	str	r3, [r7, #24]
 800f382:	e010      	b.n	800f3a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	689b      	ldr	r3, [r3, #8]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d10c      	bne.n	800f3a6 <osThreadNew+0xca>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	68db      	ldr	r3, [r3, #12]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d108      	bne.n	800f3a6 <osThreadNew+0xca>
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	691b      	ldr	r3, [r3, #16]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d104      	bne.n	800f3a6 <osThreadNew+0xca>
          mem = 0;
 800f39c:	2300      	movs	r3, #0
 800f39e:	61bb      	str	r3, [r7, #24]
 800f3a0:	e001      	b.n	800f3a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f3a6:	69bb      	ldr	r3, [r7, #24]
 800f3a8:	2b01      	cmp	r3, #1
 800f3aa:	d110      	bne.n	800f3ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f3b0:	687a      	ldr	r2, [r7, #4]
 800f3b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f3b4:	9202      	str	r2, [sp, #8]
 800f3b6:	9301      	str	r3, [sp, #4]
 800f3b8:	69fb      	ldr	r3, [r7, #28]
 800f3ba:	9300      	str	r3, [sp, #0]
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	6a3a      	ldr	r2, [r7, #32]
 800f3c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f3c2:	68f8      	ldr	r0, [r7, #12]
 800f3c4:	f001 fe08 	bl	8010fd8 <xTaskCreateStatic>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	613b      	str	r3, [r7, #16]
 800f3cc:	e013      	b.n	800f3f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f3ce:	69bb      	ldr	r3, [r7, #24]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d110      	bne.n	800f3f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f3d4:	6a3b      	ldr	r3, [r7, #32]
 800f3d6:	b29a      	uxth	r2, r3
 800f3d8:	f107 0310 	add.w	r3, r7, #16
 800f3dc:	9301      	str	r3, [sp, #4]
 800f3de:	69fb      	ldr	r3, [r7, #28]
 800f3e0:	9300      	str	r3, [sp, #0]
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f3e6:	68f8      	ldr	r0, [r7, #12]
 800f3e8:	f001 fe53 	bl	8011092 <xTaskCreate>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	2b01      	cmp	r3, #1
 800f3f0:	d001      	beq.n	800f3f6 <osThreadNew+0x11a>
            hTask = NULL;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f3f6:	693b      	ldr	r3, [r7, #16]
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	3728      	adds	r7, #40	; 0x28
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}

0800f400 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f400:	b580      	push	{r7, lr}
 800f402:	b084      	sub	sp, #16
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f408:	f3ef 8305 	mrs	r3, IPSR
 800f40c:	60bb      	str	r3, [r7, #8]
  return(result);
 800f40e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f410:	2b00      	cmp	r3, #0
 800f412:	d003      	beq.n	800f41c <osDelay+0x1c>
    stat = osErrorISR;
 800f414:	f06f 0305 	mvn.w	r3, #5
 800f418:	60fb      	str	r3, [r7, #12]
 800f41a:	e007      	b.n	800f42c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f41c:	2300      	movs	r3, #0
 800f41e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d002      	beq.n	800f42c <osDelay+0x2c>
      vTaskDelay(ticks);
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f001 ff8e 	bl	8011348 <vTaskDelay>
    }
  }

  return (stat);
 800f42c:	68fb      	ldr	r3, [r7, #12]
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3710      	adds	r7, #16
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}

0800f436 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800f436:	b580      	push	{r7, lr}
 800f438:	b084      	sub	sp, #16
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f003 fa8e 	bl	8012960 <pvTimerGetTimerID>
 800f444:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d005      	beq.n	800f458 <TimerCallback+0x22>
    callb->func (callb->arg);
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	68fa      	ldr	r2, [r7, #12]
 800f452:	6852      	ldr	r2, [r2, #4]
 800f454:	4610      	mov	r0, r2
 800f456:	4798      	blx	r3
  }
}
 800f458:	bf00      	nop
 800f45a:	3710      	adds	r7, #16
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}

0800f460 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800f460:	b580      	push	{r7, lr}
 800f462:	b08c      	sub	sp, #48	; 0x30
 800f464:	af02      	add	r7, sp, #8
 800f466:	60f8      	str	r0, [r7, #12]
 800f468:	607a      	str	r2, [r7, #4]
 800f46a:	603b      	str	r3, [r7, #0]
 800f46c:	460b      	mov	r3, r1
 800f46e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800f470:	2300      	movs	r3, #0
 800f472:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f474:	f3ef 8305 	mrs	r3, IPSR
 800f478:	613b      	str	r3, [r7, #16]
  return(result);
 800f47a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d163      	bne.n	800f548 <osTimerNew+0xe8>
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d060      	beq.n	800f548 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800f486:	2008      	movs	r0, #8
 800f488:	f003 fcf6 	bl	8012e78 <pvPortMalloc>
 800f48c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d059      	beq.n	800f548 <osTimerNew+0xe8>
      callb->func = func;
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	68fa      	ldr	r2, [r7, #12]
 800f498:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800f4a0:	7afb      	ldrb	r3, [r7, #11]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d102      	bne.n	800f4ac <osTimerNew+0x4c>
        reload = pdFALSE;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	61fb      	str	r3, [r7, #28]
 800f4aa:	e001      	b.n	800f4b0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800f4b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f4b4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d01c      	beq.n	800f4fa <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d002      	beq.n	800f4ce <osTimerNew+0x6e>
          name = attr->name;
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	689b      	ldr	r3, [r3, #8]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d006      	beq.n	800f4e4 <osTimerNew+0x84>
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	68db      	ldr	r3, [r3, #12]
 800f4da:	2b2b      	cmp	r3, #43	; 0x2b
 800f4dc:	d902      	bls.n	800f4e4 <osTimerNew+0x84>
          mem = 1;
 800f4de:	2301      	movs	r3, #1
 800f4e0:	61bb      	str	r3, [r7, #24]
 800f4e2:	e00c      	b.n	800f4fe <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	689b      	ldr	r3, [r3, #8]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d108      	bne.n	800f4fe <osTimerNew+0x9e>
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	68db      	ldr	r3, [r3, #12]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d104      	bne.n	800f4fe <osTimerNew+0x9e>
            mem = 0;
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	61bb      	str	r3, [r7, #24]
 800f4f8:	e001      	b.n	800f4fe <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800f4fe:	69bb      	ldr	r3, [r7, #24]
 800f500:	2b01      	cmp	r3, #1
 800f502:	d10c      	bne.n	800f51e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	689b      	ldr	r3, [r3, #8]
 800f508:	9301      	str	r3, [sp, #4]
 800f50a:	4b12      	ldr	r3, [pc, #72]	; (800f554 <osTimerNew+0xf4>)
 800f50c:	9300      	str	r3, [sp, #0]
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	69fa      	ldr	r2, [r7, #28]
 800f512:	2101      	movs	r1, #1
 800f514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f516:	f002 fea4 	bl	8012262 <xTimerCreateStatic>
 800f51a:	6238      	str	r0, [r7, #32]
 800f51c:	e00b      	b.n	800f536 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800f51e:	69bb      	ldr	r3, [r7, #24]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d108      	bne.n	800f536 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800f524:	4b0b      	ldr	r3, [pc, #44]	; (800f554 <osTimerNew+0xf4>)
 800f526:	9300      	str	r3, [sp, #0]
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	69fa      	ldr	r2, [r7, #28]
 800f52c:	2101      	movs	r1, #1
 800f52e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f530:	f002 fe76 	bl	8012220 <xTimerCreate>
 800f534:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800f536:	6a3b      	ldr	r3, [r7, #32]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d105      	bne.n	800f548 <osTimerNew+0xe8>
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d002      	beq.n	800f548 <osTimerNew+0xe8>
        vPortFree (callb);
 800f542:	6978      	ldr	r0, [r7, #20]
 800f544:	f003 fd64 	bl	8013010 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800f548:	6a3b      	ldr	r3, [r7, #32]
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3728      	adds	r7, #40	; 0x28
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
 800f552:	bf00      	nop
 800f554:	0800f437 	.word	0x0800f437

0800f558 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800f558:	b580      	push	{r7, lr}
 800f55a:	b088      	sub	sp, #32
 800f55c:	af02      	add	r7, sp, #8
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f566:	f3ef 8305 	mrs	r3, IPSR
 800f56a:	60fb      	str	r3, [r7, #12]
  return(result);
 800f56c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d003      	beq.n	800f57a <osTimerStart+0x22>
    stat = osErrorISR;
 800f572:	f06f 0305 	mvn.w	r3, #5
 800f576:	617b      	str	r3, [r7, #20]
 800f578:	e017      	b.n	800f5aa <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800f57a:	693b      	ldr	r3, [r7, #16]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d103      	bne.n	800f588 <osTimerStart+0x30>
    stat = osErrorParameter;
 800f580:	f06f 0303 	mvn.w	r3, #3
 800f584:	617b      	str	r3, [r7, #20]
 800f586:	e010      	b.n	800f5aa <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800f588:	2300      	movs	r3, #0
 800f58a:	9300      	str	r3, [sp, #0]
 800f58c:	2300      	movs	r3, #0
 800f58e:	683a      	ldr	r2, [r7, #0]
 800f590:	2104      	movs	r1, #4
 800f592:	6938      	ldr	r0, [r7, #16]
 800f594:	f002 fede 	bl	8012354 <xTimerGenericCommand>
 800f598:	4603      	mov	r3, r0
 800f59a:	2b01      	cmp	r3, #1
 800f59c:	d102      	bne.n	800f5a4 <osTimerStart+0x4c>
      stat = osOK;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	617b      	str	r3, [r7, #20]
 800f5a2:	e002      	b.n	800f5aa <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800f5a4:	f06f 0302 	mvn.w	r3, #2
 800f5a8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f5aa:	697b      	ldr	r3, [r7, #20]
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3718      	adds	r7, #24
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}

0800f5b4 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b086      	sub	sp, #24
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5c0:	f3ef 8305 	mrs	r3, IPSR
 800f5c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800f5c6:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d12d      	bne.n	800f628 <osEventFlagsNew+0x74>
    mem = -1;
 800f5cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f5d0:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d015      	beq.n	800f604 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	689b      	ldr	r3, [r3, #8]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d006      	beq.n	800f5ee <osEventFlagsNew+0x3a>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	68db      	ldr	r3, [r3, #12]
 800f5e4:	2b1f      	cmp	r3, #31
 800f5e6:	d902      	bls.n	800f5ee <osEventFlagsNew+0x3a>
        mem = 1;
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	613b      	str	r3, [r7, #16]
 800f5ec:	e00c      	b.n	800f608 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	689b      	ldr	r3, [r3, #8]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d108      	bne.n	800f608 <osEventFlagsNew+0x54>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	68db      	ldr	r3, [r3, #12]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d104      	bne.n	800f608 <osEventFlagsNew+0x54>
          mem = 0;
 800f5fe:	2300      	movs	r3, #0
 800f600:	613b      	str	r3, [r7, #16]
 800f602:	e001      	b.n	800f608 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800f604:	2300      	movs	r3, #0
 800f606:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	2b01      	cmp	r3, #1
 800f60c:	d106      	bne.n	800f61c <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	689b      	ldr	r3, [r3, #8]
 800f612:	4618      	mov	r0, r3
 800f614:	f000 fa30 	bl	800fa78 <xEventGroupCreateStatic>
 800f618:	6178      	str	r0, [r7, #20]
 800f61a:	e005      	b.n	800f628 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d102      	bne.n	800f628 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800f622:	f000 fa60 	bl	800fae6 <xEventGroupCreate>
 800f626:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800f628:	697b      	ldr	r3, [r7, #20]
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3718      	adds	r7, #24
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
	...

0800f634 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800f634:	b580      	push	{r7, lr}
 800f636:	b086      	sub	sp, #24
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800f642:	693b      	ldr	r3, [r7, #16]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d004      	beq.n	800f652 <osEventFlagsSet+0x1e>
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d003      	beq.n	800f65a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800f652:	f06f 0303 	mvn.w	r3, #3
 800f656:	617b      	str	r3, [r7, #20]
 800f658:	e028      	b.n	800f6ac <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f65a:	f3ef 8305 	mrs	r3, IPSR
 800f65e:	60fb      	str	r3, [r7, #12]
  return(result);
 800f660:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f662:	2b00      	cmp	r3, #0
 800f664:	d01d      	beq.n	800f6a2 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800f666:	2300      	movs	r3, #0
 800f668:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800f66a:	f107 0308 	add.w	r3, r7, #8
 800f66e:	461a      	mov	r2, r3
 800f670:	6839      	ldr	r1, [r7, #0]
 800f672:	6938      	ldr	r0, [r7, #16]
 800f674:	f000 fbda 	bl	800fe2c <xEventGroupSetBitsFromISR>
 800f678:	4603      	mov	r3, r0
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d103      	bne.n	800f686 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800f67e:	f06f 0302 	mvn.w	r3, #2
 800f682:	617b      	str	r3, [r7, #20]
 800f684:	e012      	b.n	800f6ac <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d00d      	beq.n	800f6ac <osEventFlagsSet+0x78>
 800f690:	4b09      	ldr	r3, [pc, #36]	; (800f6b8 <osEventFlagsSet+0x84>)
 800f692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f696:	601a      	str	r2, [r3, #0]
 800f698:	f3bf 8f4f 	dsb	sy
 800f69c:	f3bf 8f6f 	isb	sy
 800f6a0:	e004      	b.n	800f6ac <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800f6a2:	6839      	ldr	r1, [r7, #0]
 800f6a4:	6938      	ldr	r0, [r7, #16]
 800f6a6:	f000 fb07 	bl	800fcb8 <xEventGroupSetBits>
 800f6aa:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800f6ac:	697b      	ldr	r3, [r7, #20]
}
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	3718      	adds	r7, #24
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
 800f6b6:	bf00      	nop
 800f6b8:	e000ed04 	.word	0xe000ed04

0800f6bc <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b08c      	sub	sp, #48	; 0x30
 800f6c0:	af02      	add	r7, sp, #8
 800f6c2:	60f8      	str	r0, [r7, #12]
 800f6c4:	60b9      	str	r1, [r7, #8]
 800f6c6:	607a      	str	r2, [r7, #4]
 800f6c8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800f6ce:	69bb      	ldr	r3, [r7, #24]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d004      	beq.n	800f6de <osEventFlagsWait+0x22>
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d003      	beq.n	800f6e6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800f6de:	f06f 0303 	mvn.w	r3, #3
 800f6e2:	61fb      	str	r3, [r7, #28]
 800f6e4:	e04b      	b.n	800f77e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6e6:	f3ef 8305 	mrs	r3, IPSR
 800f6ea:	617b      	str	r3, [r7, #20]
  return(result);
 800f6ec:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d003      	beq.n	800f6fa <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800f6f2:	f06f 0305 	mvn.w	r3, #5
 800f6f6:	61fb      	str	r3, [r7, #28]
 800f6f8:	e041      	b.n	800f77e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f003 0301 	and.w	r3, r3, #1
 800f700:	2b00      	cmp	r3, #0
 800f702:	d002      	beq.n	800f70a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800f704:	2301      	movs	r3, #1
 800f706:	627b      	str	r3, [r7, #36]	; 0x24
 800f708:	e001      	b.n	800f70e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800f70a:	2300      	movs	r3, #0
 800f70c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f003 0302 	and.w	r3, r3, #2
 800f714:	2b00      	cmp	r3, #0
 800f716:	d002      	beq.n	800f71e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800f718:	2300      	movs	r3, #0
 800f71a:	623b      	str	r3, [r7, #32]
 800f71c:	e001      	b.n	800f722 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800f71e:	2301      	movs	r3, #1
 800f720:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	9300      	str	r3, [sp, #0]
 800f726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f728:	6a3a      	ldr	r2, [r7, #32]
 800f72a:	68b9      	ldr	r1, [r7, #8]
 800f72c:	69b8      	ldr	r0, [r7, #24]
 800f72e:	f000 f9f5 	bl	800fb1c <xEventGroupWaitBits>
 800f732:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f003 0301 	and.w	r3, r3, #1
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d010      	beq.n	800f760 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800f73e:	68ba      	ldr	r2, [r7, #8]
 800f740:	69fb      	ldr	r3, [r7, #28]
 800f742:	4013      	ands	r3, r2
 800f744:	68ba      	ldr	r2, [r7, #8]
 800f746:	429a      	cmp	r2, r3
 800f748:	d019      	beq.n	800f77e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d003      	beq.n	800f758 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800f750:	f06f 0301 	mvn.w	r3, #1
 800f754:	61fb      	str	r3, [r7, #28]
 800f756:	e012      	b.n	800f77e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800f758:	f06f 0302 	mvn.w	r3, #2
 800f75c:	61fb      	str	r3, [r7, #28]
 800f75e:	e00e      	b.n	800f77e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800f760:	68ba      	ldr	r2, [r7, #8]
 800f762:	69fb      	ldr	r3, [r7, #28]
 800f764:	4013      	ands	r3, r2
 800f766:	2b00      	cmp	r3, #0
 800f768:	d109      	bne.n	800f77e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d003      	beq.n	800f778 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800f770:	f06f 0301 	mvn.w	r3, #1
 800f774:	61fb      	str	r3, [r7, #28]
 800f776:	e002      	b.n	800f77e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800f778:	f06f 0302 	mvn.w	r3, #2
 800f77c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800f77e:	69fb      	ldr	r3, [r7, #28]
}
 800f780:	4618      	mov	r0, r3
 800f782:	3728      	adds	r7, #40	; 0x28
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}

0800f788 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f788:	b580      	push	{r7, lr}
 800f78a:	b08a      	sub	sp, #40	; 0x28
 800f78c:	af02      	add	r7, sp, #8
 800f78e:	60f8      	str	r0, [r7, #12]
 800f790:	60b9      	str	r1, [r7, #8]
 800f792:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f794:	2300      	movs	r3, #0
 800f796:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f798:	f3ef 8305 	mrs	r3, IPSR
 800f79c:	613b      	str	r3, [r7, #16]
  return(result);
 800f79e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d175      	bne.n	800f890 <osSemaphoreNew+0x108>
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d072      	beq.n	800f890 <osSemaphoreNew+0x108>
 800f7aa:	68ba      	ldr	r2, [r7, #8]
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	d86e      	bhi.n	800f890 <osSemaphoreNew+0x108>
    mem = -1;
 800f7b2:	f04f 33ff 	mov.w	r3, #4294967295
 800f7b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d015      	beq.n	800f7ea <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	689b      	ldr	r3, [r3, #8]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d006      	beq.n	800f7d4 <osSemaphoreNew+0x4c>
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	68db      	ldr	r3, [r3, #12]
 800f7ca:	2b4f      	cmp	r3, #79	; 0x4f
 800f7cc:	d902      	bls.n	800f7d4 <osSemaphoreNew+0x4c>
        mem = 1;
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	61bb      	str	r3, [r7, #24]
 800f7d2:	e00c      	b.n	800f7ee <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	689b      	ldr	r3, [r3, #8]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d108      	bne.n	800f7ee <osSemaphoreNew+0x66>
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	68db      	ldr	r3, [r3, #12]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d104      	bne.n	800f7ee <osSemaphoreNew+0x66>
          mem = 0;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	61bb      	str	r3, [r7, #24]
 800f7e8:	e001      	b.n	800f7ee <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800f7ee:	69bb      	ldr	r3, [r7, #24]
 800f7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7f4:	d04c      	beq.n	800f890 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2b01      	cmp	r3, #1
 800f7fa:	d128      	bne.n	800f84e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800f7fc:	69bb      	ldr	r3, [r7, #24]
 800f7fe:	2b01      	cmp	r3, #1
 800f800:	d10a      	bne.n	800f818 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	689b      	ldr	r3, [r3, #8]
 800f806:	2203      	movs	r2, #3
 800f808:	9200      	str	r2, [sp, #0]
 800f80a:	2200      	movs	r2, #0
 800f80c:	2100      	movs	r1, #0
 800f80e:	2001      	movs	r0, #1
 800f810:	f000 fc3c 	bl	801008c <xQueueGenericCreateStatic>
 800f814:	61f8      	str	r0, [r7, #28]
 800f816:	e005      	b.n	800f824 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800f818:	2203      	movs	r2, #3
 800f81a:	2100      	movs	r1, #0
 800f81c:	2001      	movs	r0, #1
 800f81e:	f000 fcad 	bl	801017c <xQueueGenericCreate>
 800f822:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f824:	69fb      	ldr	r3, [r7, #28]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d022      	beq.n	800f870 <osSemaphoreNew+0xe8>
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d01f      	beq.n	800f870 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f830:	2300      	movs	r3, #0
 800f832:	2200      	movs	r2, #0
 800f834:	2100      	movs	r1, #0
 800f836:	69f8      	ldr	r0, [r7, #28]
 800f838:	f000 fd68 	bl	801030c <xQueueGenericSend>
 800f83c:	4603      	mov	r3, r0
 800f83e:	2b01      	cmp	r3, #1
 800f840:	d016      	beq.n	800f870 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800f842:	69f8      	ldr	r0, [r7, #28]
 800f844:	f001 f9f4 	bl	8010c30 <vQueueDelete>
            hSemaphore = NULL;
 800f848:	2300      	movs	r3, #0
 800f84a:	61fb      	str	r3, [r7, #28]
 800f84c:	e010      	b.n	800f870 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800f84e:	69bb      	ldr	r3, [r7, #24]
 800f850:	2b01      	cmp	r3, #1
 800f852:	d108      	bne.n	800f866 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	689b      	ldr	r3, [r3, #8]
 800f858:	461a      	mov	r2, r3
 800f85a:	68b9      	ldr	r1, [r7, #8]
 800f85c:	68f8      	ldr	r0, [r7, #12]
 800f85e:	f000 fcea 	bl	8010236 <xQueueCreateCountingSemaphoreStatic>
 800f862:	61f8      	str	r0, [r7, #28]
 800f864:	e004      	b.n	800f870 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f866:	68b9      	ldr	r1, [r7, #8]
 800f868:	68f8      	ldr	r0, [r7, #12]
 800f86a:	f000 fd1b 	bl	80102a4 <xQueueCreateCountingSemaphore>
 800f86e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f870:	69fb      	ldr	r3, [r7, #28]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d00c      	beq.n	800f890 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d003      	beq.n	800f884 <osSemaphoreNew+0xfc>
          name = attr->name;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	617b      	str	r3, [r7, #20]
 800f882:	e001      	b.n	800f888 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800f884:	2300      	movs	r3, #0
 800f886:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f888:	6979      	ldr	r1, [r7, #20]
 800f88a:	69f8      	ldr	r0, [r7, #28]
 800f88c:	f001 fb1c 	bl	8010ec8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f890:	69fb      	ldr	r3, [r7, #28]
}
 800f892:	4618      	mov	r0, r3
 800f894:	3720      	adds	r7, #32
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
	...

0800f89c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b086      	sub	sp, #24
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d103      	bne.n	800f8bc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f8b4:	f06f 0303 	mvn.w	r3, #3
 800f8b8:	617b      	str	r3, [r7, #20]
 800f8ba:	e039      	b.n	800f930 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8bc:	f3ef 8305 	mrs	r3, IPSR
 800f8c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800f8c2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d022      	beq.n	800f90e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d003      	beq.n	800f8d6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800f8ce:	f06f 0303 	mvn.w	r3, #3
 800f8d2:	617b      	str	r3, [r7, #20]
 800f8d4:	e02c      	b.n	800f930 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f8da:	f107 0308 	add.w	r3, r7, #8
 800f8de:	461a      	mov	r2, r3
 800f8e0:	2100      	movs	r1, #0
 800f8e2:	6938      	ldr	r0, [r7, #16]
 800f8e4:	f001 f924 	bl	8010b30 <xQueueReceiveFromISR>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	2b01      	cmp	r3, #1
 800f8ec:	d003      	beq.n	800f8f6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800f8ee:	f06f 0302 	mvn.w	r3, #2
 800f8f2:	617b      	str	r3, [r7, #20]
 800f8f4:	e01c      	b.n	800f930 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d019      	beq.n	800f930 <osSemaphoreAcquire+0x94>
 800f8fc:	4b0f      	ldr	r3, [pc, #60]	; (800f93c <osSemaphoreAcquire+0xa0>)
 800f8fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f902:	601a      	str	r2, [r3, #0]
 800f904:	f3bf 8f4f 	dsb	sy
 800f908:	f3bf 8f6f 	isb	sy
 800f90c:	e010      	b.n	800f930 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f90e:	6839      	ldr	r1, [r7, #0]
 800f910:	6938      	ldr	r0, [r7, #16]
 800f912:	f001 f801 	bl	8010918 <xQueueSemaphoreTake>
 800f916:	4603      	mov	r3, r0
 800f918:	2b01      	cmp	r3, #1
 800f91a:	d009      	beq.n	800f930 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d003      	beq.n	800f92a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800f922:	f06f 0301 	mvn.w	r3, #1
 800f926:	617b      	str	r3, [r7, #20]
 800f928:	e002      	b.n	800f930 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800f92a:	f06f 0302 	mvn.w	r3, #2
 800f92e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f930:	697b      	ldr	r3, [r7, #20]
}
 800f932:	4618      	mov	r0, r3
 800f934:	3718      	adds	r7, #24
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	bf00      	nop
 800f93c:	e000ed04 	.word	0xe000ed04

0800f940 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f940:	b580      	push	{r7, lr}
 800f942:	b086      	sub	sp, #24
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f94c:	2300      	movs	r3, #0
 800f94e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f950:	693b      	ldr	r3, [r7, #16]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d103      	bne.n	800f95e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f956:	f06f 0303 	mvn.w	r3, #3
 800f95a:	617b      	str	r3, [r7, #20]
 800f95c:	e02c      	b.n	800f9b8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f95e:	f3ef 8305 	mrs	r3, IPSR
 800f962:	60fb      	str	r3, [r7, #12]
  return(result);
 800f964:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f966:	2b00      	cmp	r3, #0
 800f968:	d01a      	beq.n	800f9a0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800f96a:	2300      	movs	r3, #0
 800f96c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f96e:	f107 0308 	add.w	r3, r7, #8
 800f972:	4619      	mov	r1, r3
 800f974:	6938      	ldr	r0, [r7, #16]
 800f976:	f000 fe62 	bl	801063e <xQueueGiveFromISR>
 800f97a:	4603      	mov	r3, r0
 800f97c:	2b01      	cmp	r3, #1
 800f97e:	d003      	beq.n	800f988 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800f980:	f06f 0302 	mvn.w	r3, #2
 800f984:	617b      	str	r3, [r7, #20]
 800f986:	e017      	b.n	800f9b8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d014      	beq.n	800f9b8 <osSemaphoreRelease+0x78>
 800f98e:	4b0d      	ldr	r3, [pc, #52]	; (800f9c4 <osSemaphoreRelease+0x84>)
 800f990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f994:	601a      	str	r2, [r3, #0]
 800f996:	f3bf 8f4f 	dsb	sy
 800f99a:	f3bf 8f6f 	isb	sy
 800f99e:	e00b      	b.n	800f9b8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	2100      	movs	r1, #0
 800f9a6:	6938      	ldr	r0, [r7, #16]
 800f9a8:	f000 fcb0 	bl	801030c <xQueueGenericSend>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	2b01      	cmp	r3, #1
 800f9b0:	d002      	beq.n	800f9b8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800f9b2:	f06f 0302 	mvn.w	r3, #2
 800f9b6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f9b8:	697b      	ldr	r3, [r7, #20]
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	3718      	adds	r7, #24
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}
 800f9c2:	bf00      	nop
 800f9c4:	e000ed04 	.word	0xe000ed04

0800f9c8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b086      	sub	sp, #24
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9d4:	f3ef 8305 	mrs	r3, IPSR
 800f9d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800f9da:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d003      	beq.n	800f9e8 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800f9e0:	f06f 0305 	mvn.w	r3, #5
 800f9e4:	617b      	str	r3, [r7, #20]
 800f9e6:	e00e      	b.n	800fa06 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800f9e8:	693b      	ldr	r3, [r7, #16]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d103      	bne.n	800f9f6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800f9ee:	f06f 0303 	mvn.w	r3, #3
 800f9f2:	617b      	str	r3, [r7, #20]
 800f9f4:	e007      	b.n	800fa06 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800f9f6:	6938      	ldr	r0, [r7, #16]
 800f9f8:	f001 fa90 	bl	8010f1c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800fa00:	6938      	ldr	r0, [r7, #16]
 800fa02:	f001 f915 	bl	8010c30 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800fa06:	697b      	ldr	r3, [r7, #20]
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3718      	adds	r7, #24
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}

0800fa10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fa10:	b480      	push	{r7}
 800fa12:	b085      	sub	sp, #20
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	60f8      	str	r0, [r7, #12]
 800fa18:	60b9      	str	r1, [r7, #8]
 800fa1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	4a07      	ldr	r2, [pc, #28]	; (800fa3c <vApplicationGetIdleTaskMemory+0x2c>)
 800fa20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	4a06      	ldr	r2, [pc, #24]	; (800fa40 <vApplicationGetIdleTaskMemory+0x30>)
 800fa26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2280      	movs	r2, #128	; 0x80
 800fa2c:	601a      	str	r2, [r3, #0]
}
 800fa2e:	bf00      	nop
 800fa30:	3714      	adds	r7, #20
 800fa32:	46bd      	mov	sp, r7
 800fa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa38:	4770      	bx	lr
 800fa3a:	bf00      	nop
 800fa3c:	2000097c 	.word	0x2000097c
 800fa40:	20000a38 	.word	0x20000a38

0800fa44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fa44:	b480      	push	{r7}
 800fa46:	b085      	sub	sp, #20
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	60f8      	str	r0, [r7, #12]
 800fa4c:	60b9      	str	r1, [r7, #8]
 800fa4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	4a07      	ldr	r2, [pc, #28]	; (800fa70 <vApplicationGetTimerTaskMemory+0x2c>)
 800fa54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	4a06      	ldr	r2, [pc, #24]	; (800fa74 <vApplicationGetTimerTaskMemory+0x30>)
 800fa5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fa62:	601a      	str	r2, [r3, #0]
}
 800fa64:	bf00      	nop
 800fa66:	3714      	adds	r7, #20
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr
 800fa70:	20000c38 	.word	0x20000c38
 800fa74:	20000cf4 	.word	0x20000cf4

0800fa78 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b086      	sub	sp, #24
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d10a      	bne.n	800fa9c <xEventGroupCreateStatic+0x24>
	__asm volatile
 800fa86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa8a:	f383 8811 	msr	BASEPRI, r3
 800fa8e:	f3bf 8f6f 	isb	sy
 800fa92:	f3bf 8f4f 	dsb	sy
 800fa96:	613b      	str	r3, [r7, #16]
}
 800fa98:	bf00      	nop
 800fa9a:	e7fe      	b.n	800fa9a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800fa9c:	2320      	movs	r3, #32
 800fa9e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	2b20      	cmp	r3, #32
 800faa4:	d00a      	beq.n	800fabc <xEventGroupCreateStatic+0x44>
	__asm volatile
 800faa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faaa:	f383 8811 	msr	BASEPRI, r3
 800faae:	f3bf 8f6f 	isb	sy
 800fab2:	f3bf 8f4f 	dsb	sy
 800fab6:	60fb      	str	r3, [r7, #12]
}
 800fab8:	bf00      	nop
 800faba:	e7fe      	b.n	800faba <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d00a      	beq.n	800fadc <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	2200      	movs	r2, #0
 800faca:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	3304      	adds	r3, #4
 800fad0:	4618      	mov	r0, r3
 800fad2:	f000 f9bf 	bl	800fe54 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800fad6:	697b      	ldr	r3, [r7, #20]
 800fad8:	2201      	movs	r2, #1
 800fada:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800fadc:	697b      	ldr	r3, [r7, #20]
	}
 800fade:	4618      	mov	r0, r3
 800fae0:	3718      	adds	r7, #24
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}

0800fae6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800fae6:	b580      	push	{r7, lr}
 800fae8:	b082      	sub	sp, #8
 800faea:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800faec:	2020      	movs	r0, #32
 800faee:	f003 f9c3 	bl	8012e78 <pvPortMalloc>
 800faf2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d00a      	beq.n	800fb10 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2200      	movs	r2, #0
 800fafe:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	3304      	adds	r3, #4
 800fb04:	4618      	mov	r0, r3
 800fb06:	f000 f9a5 	bl	800fe54 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800fb10:	687b      	ldr	r3, [r7, #4]
	}
 800fb12:	4618      	mov	r0, r3
 800fb14:	3708      	adds	r7, #8
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}
	...

0800fb1c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b090      	sub	sp, #64	; 0x40
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	60f8      	str	r0, [r7, #12]
 800fb24:	60b9      	str	r1, [r7, #8]
 800fb26:	607a      	str	r2, [r7, #4]
 800fb28:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800fb32:	2300      	movs	r3, #0
 800fb34:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d10a      	bne.n	800fb52 <xEventGroupWaitBits+0x36>
	__asm volatile
 800fb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb40:	f383 8811 	msr	BASEPRI, r3
 800fb44:	f3bf 8f6f 	isb	sy
 800fb48:	f3bf 8f4f 	dsb	sy
 800fb4c:	623b      	str	r3, [r7, #32]
}
 800fb4e:	bf00      	nop
 800fb50:	e7fe      	b.n	800fb50 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d00a      	beq.n	800fb72 <xEventGroupWaitBits+0x56>
	__asm volatile
 800fb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb60:	f383 8811 	msr	BASEPRI, r3
 800fb64:	f3bf 8f6f 	isb	sy
 800fb68:	f3bf 8f4f 	dsb	sy
 800fb6c:	61fb      	str	r3, [r7, #28]
}
 800fb6e:	bf00      	nop
 800fb70:	e7fe      	b.n	800fb70 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d10a      	bne.n	800fb8e <xEventGroupWaitBits+0x72>
	__asm volatile
 800fb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb7c:	f383 8811 	msr	BASEPRI, r3
 800fb80:	f3bf 8f6f 	isb	sy
 800fb84:	f3bf 8f4f 	dsb	sy
 800fb88:	61bb      	str	r3, [r7, #24]
}
 800fb8a:	bf00      	nop
 800fb8c:	e7fe      	b.n	800fb8c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fb8e:	f002 f909 	bl	8011da4 <xTaskGetSchedulerState>
 800fb92:	4603      	mov	r3, r0
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d102      	bne.n	800fb9e <xEventGroupWaitBits+0x82>
 800fb98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d101      	bne.n	800fba2 <xEventGroupWaitBits+0x86>
 800fb9e:	2301      	movs	r3, #1
 800fba0:	e000      	b.n	800fba4 <xEventGroupWaitBits+0x88>
 800fba2:	2300      	movs	r3, #0
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d10a      	bne.n	800fbbe <xEventGroupWaitBits+0xa2>
	__asm volatile
 800fba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbac:	f383 8811 	msr	BASEPRI, r3
 800fbb0:	f3bf 8f6f 	isb	sy
 800fbb4:	f3bf 8f4f 	dsb	sy
 800fbb8:	617b      	str	r3, [r7, #20]
}
 800fbba:	bf00      	nop
 800fbbc:	e7fe      	b.n	800fbbc <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800fbbe:	f001 fc67 	bl	8011490 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800fbc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800fbc8:	683a      	ldr	r2, [r7, #0]
 800fbca:	68b9      	ldr	r1, [r7, #8]
 800fbcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbce:	f000 f90b 	bl	800fde8 <prvTestWaitCondition>
 800fbd2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800fbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d00e      	beq.n	800fbf8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800fbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbdc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d028      	beq.n	800fc3a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800fbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbea:	681a      	ldr	r2, [r3, #0]
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	43db      	mvns	r3, r3
 800fbf0:	401a      	ands	r2, r3
 800fbf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbf4:	601a      	str	r2, [r3, #0]
 800fbf6:	e020      	b.n	800fc3a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800fbf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d104      	bne.n	800fc08 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800fbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc00:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800fc02:	2301      	movs	r3, #1
 800fc04:	633b      	str	r3, [r7, #48]	; 0x30
 800fc06:	e018      	b.n	800fc3a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d003      	beq.n	800fc16 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800fc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fc14:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d003      	beq.n	800fc24 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800fc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fc22:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800fc24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc26:	1d18      	adds	r0, r3, #4
 800fc28:	68ba      	ldr	r2, [r7, #8]
 800fc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc2c:	4313      	orrs	r3, r2
 800fc2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc30:	4619      	mov	r1, r3
 800fc32:	f001 fe2b 	bl	801188c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800fc36:	2300      	movs	r3, #0
 800fc38:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800fc3a:	f001 fc37 	bl	80114ac <xTaskResumeAll>
 800fc3e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800fc40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d031      	beq.n	800fcaa <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800fc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d107      	bne.n	800fc5c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800fc4c:	4b19      	ldr	r3, [pc, #100]	; (800fcb4 <xEventGroupWaitBits+0x198>)
 800fc4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc52:	601a      	str	r2, [r3, #0]
 800fc54:	f3bf 8f4f 	dsb	sy
 800fc58:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800fc5c:	f002 fa18 	bl	8012090 <uxTaskResetEventItemValue>
 800fc60:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800fc62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d11a      	bne.n	800fca2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800fc6c:	f002 ffe2 	bl	8012c34 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800fc70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800fc76:	683a      	ldr	r2, [r7, #0]
 800fc78:	68b9      	ldr	r1, [r7, #8]
 800fc7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fc7c:	f000 f8b4 	bl	800fde8 <prvTestWaitCondition>
 800fc80:	4603      	mov	r3, r0
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d009      	beq.n	800fc9a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d006      	beq.n	800fc9a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800fc8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc8e:	681a      	ldr	r2, [r3, #0]
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	43db      	mvns	r3, r3
 800fc94:	401a      	ands	r2, r3
 800fc96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc98:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800fc9e:	f002 fff9 	bl	8012c94 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800fca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fca4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fca8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800fcaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	3740      	adds	r7, #64	; 0x40
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}
 800fcb4:	e000ed04 	.word	0xe000ed04

0800fcb8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b08e      	sub	sp, #56	; 0x38
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800fcca:	2300      	movs	r3, #0
 800fccc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d10a      	bne.n	800fcea <xEventGroupSetBits+0x32>
	__asm volatile
 800fcd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd8:	f383 8811 	msr	BASEPRI, r3
 800fcdc:	f3bf 8f6f 	isb	sy
 800fce0:	f3bf 8f4f 	dsb	sy
 800fce4:	613b      	str	r3, [r7, #16]
}
 800fce6:	bf00      	nop
 800fce8:	e7fe      	b.n	800fce8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d00a      	beq.n	800fd0a <xEventGroupSetBits+0x52>
	__asm volatile
 800fcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf8:	f383 8811 	msr	BASEPRI, r3
 800fcfc:	f3bf 8f6f 	isb	sy
 800fd00:	f3bf 8f4f 	dsb	sy
 800fd04:	60fb      	str	r3, [r7, #12]
}
 800fd06:	bf00      	nop
 800fd08:	e7fe      	b.n	800fd08 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800fd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd0c:	3304      	adds	r3, #4
 800fd0e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd12:	3308      	adds	r3, #8
 800fd14:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800fd16:	f001 fbbb 	bl	8011490 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800fd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1c:	68db      	ldr	r3, [r3, #12]
 800fd1e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800fd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd22:	681a      	ldr	r2, [r3, #0]
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	431a      	orrs	r2, r3
 800fd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd2a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800fd2c:	e03c      	b.n	800fda8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800fd2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd30:	685b      	ldr	r3, [r3, #4]
 800fd32:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800fd34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800fd3e:	69bb      	ldr	r3, [r7, #24]
 800fd40:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800fd44:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800fd46:	69bb      	ldr	r3, [r7, #24]
 800fd48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fd4c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d108      	bne.n	800fd6a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800fd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	69bb      	ldr	r3, [r7, #24]
 800fd5e:	4013      	ands	r3, r2
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d00b      	beq.n	800fd7c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800fd64:	2301      	movs	r3, #1
 800fd66:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd68:	e008      	b.n	800fd7c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800fd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd6c:	681a      	ldr	r2, [r3, #0]
 800fd6e:	69bb      	ldr	r3, [r7, #24]
 800fd70:	4013      	ands	r3, r2
 800fd72:	69ba      	ldr	r2, [r7, #24]
 800fd74:	429a      	cmp	r2, r3
 800fd76:	d101      	bne.n	800fd7c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800fd78:	2301      	movs	r3, #1
 800fd7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800fd7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d010      	beq.n	800fda4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800fd82:	697b      	ldr	r3, [r7, #20]
 800fd84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d003      	beq.n	800fd94 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800fd8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd8e:	69bb      	ldr	r3, [r7, #24]
 800fd90:	4313      	orrs	r3, r2
 800fd92:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800fd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fda0:	f001 fe40 	bl	8011a24 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800fda4:	69fb      	ldr	r3, [r7, #28]
 800fda6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800fda8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fdaa:	6a3b      	ldr	r3, [r7, #32]
 800fdac:	429a      	cmp	r2, r3
 800fdae:	d1be      	bne.n	800fd2e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800fdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb2:	681a      	ldr	r2, [r3, #0]
 800fdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb6:	43db      	mvns	r3, r3
 800fdb8:	401a      	ands	r2, r3
 800fdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdbc:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800fdbe:	f001 fb75 	bl	80114ac <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800fdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc4:	681b      	ldr	r3, [r3, #0]
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3738      	adds	r7, #56	; 0x38
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}

0800fdce <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800fdce:	b580      	push	{r7, lr}
 800fdd0:	b082      	sub	sp, #8
 800fdd2:	af00      	add	r7, sp, #0
 800fdd4:	6078      	str	r0, [r7, #4]
 800fdd6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800fdd8:	6839      	ldr	r1, [r7, #0]
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f7ff ff6c 	bl	800fcb8 <xEventGroupSetBits>
}
 800fde0:	bf00      	nop
 800fde2:	3708      	adds	r7, #8
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}

0800fde8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800fde8:	b480      	push	{r7}
 800fdea:	b087      	sub	sp, #28
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	60f8      	str	r0, [r7, #12]
 800fdf0:	60b9      	str	r1, [r7, #8]
 800fdf2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d107      	bne.n	800fe0e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800fdfe:	68fa      	ldr	r2, [r7, #12]
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	4013      	ands	r3, r2
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d00a      	beq.n	800fe1e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800fe08:	2301      	movs	r3, #1
 800fe0a:	617b      	str	r3, [r7, #20]
 800fe0c:	e007      	b.n	800fe1e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800fe0e:	68fa      	ldr	r2, [r7, #12]
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	4013      	ands	r3, r2
 800fe14:	68ba      	ldr	r2, [r7, #8]
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d101      	bne.n	800fe1e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800fe1e:	697b      	ldr	r3, [r7, #20]
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	371c      	adds	r7, #28
 800fe24:	46bd      	mov	sp, r7
 800fe26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2a:	4770      	bx	lr

0800fe2c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b086      	sub	sp, #24
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	60f8      	str	r0, [r7, #12]
 800fe34:	60b9      	str	r1, [r7, #8]
 800fe36:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	68ba      	ldr	r2, [r7, #8]
 800fe3c:	68f9      	ldr	r1, [r7, #12]
 800fe3e:	4804      	ldr	r0, [pc, #16]	; (800fe50 <xEventGroupSetBitsFromISR+0x24>)
 800fe40:	f002 fdae 	bl	80129a0 <xTimerPendFunctionCallFromISR>
 800fe44:	6178      	str	r0, [r7, #20]

		return xReturn;
 800fe46:	697b      	ldr	r3, [r7, #20]
	}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3718      	adds	r7, #24
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}
 800fe50:	0800fdcf 	.word	0x0800fdcf

0800fe54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fe54:	b480      	push	{r7}
 800fe56:	b083      	sub	sp, #12
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f103 0208 	add.w	r2, r3, #8
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f04f 32ff 	mov.w	r2, #4294967295
 800fe6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f103 0208 	add.w	r2, r3, #8
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f103 0208 	add.w	r2, r3, #8
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2200      	movs	r2, #0
 800fe86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fe88:	bf00      	nop
 800fe8a:	370c      	adds	r7, #12
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe92:	4770      	bx	lr

0800fe94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fe94:	b480      	push	{r7}
 800fe96:	b083      	sub	sp, #12
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fea2:	bf00      	nop
 800fea4:	370c      	adds	r7, #12
 800fea6:	46bd      	mov	sp, r7
 800fea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feac:	4770      	bx	lr

0800feae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800feae:	b480      	push	{r7}
 800feb0:	b085      	sub	sp, #20
 800feb2:	af00      	add	r7, sp, #0
 800feb4:	6078      	str	r0, [r7, #4]
 800feb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	68fa      	ldr	r2, [r7, #12]
 800fec2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	689a      	ldr	r2, [r3, #8]
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	689b      	ldr	r3, [r3, #8]
 800fed0:	683a      	ldr	r2, [r7, #0]
 800fed2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	683a      	ldr	r2, [r7, #0]
 800fed8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	687a      	ldr	r2, [r7, #4]
 800fede:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	1c5a      	adds	r2, r3, #1
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	601a      	str	r2, [r3, #0]
}
 800feea:	bf00      	nop
 800feec:	3714      	adds	r7, #20
 800feee:	46bd      	mov	sp, r7
 800fef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef4:	4770      	bx	lr

0800fef6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fef6:	b480      	push	{r7}
 800fef8:	b085      	sub	sp, #20
 800fefa:	af00      	add	r7, sp, #0
 800fefc:	6078      	str	r0, [r7, #4]
 800fefe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff0c:	d103      	bne.n	800ff16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	691b      	ldr	r3, [r3, #16]
 800ff12:	60fb      	str	r3, [r7, #12]
 800ff14:	e00c      	b.n	800ff30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	3308      	adds	r3, #8
 800ff1a:	60fb      	str	r3, [r7, #12]
 800ff1c:	e002      	b.n	800ff24 <vListInsert+0x2e>
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	685b      	ldr	r3, [r3, #4]
 800ff22:	60fb      	str	r3, [r7, #12]
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	685b      	ldr	r3, [r3, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	68ba      	ldr	r2, [r7, #8]
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d2f6      	bcs.n	800ff1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	685a      	ldr	r2, [r3, #4]
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	685b      	ldr	r3, [r3, #4]
 800ff3c:	683a      	ldr	r2, [r7, #0]
 800ff3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	68fa      	ldr	r2, [r7, #12]
 800ff44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	683a      	ldr	r2, [r7, #0]
 800ff4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	687a      	ldr	r2, [r7, #4]
 800ff50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	1c5a      	adds	r2, r3, #1
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	601a      	str	r2, [r3, #0]
}
 800ff5c:	bf00      	nop
 800ff5e:	3714      	adds	r7, #20
 800ff60:	46bd      	mov	sp, r7
 800ff62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff66:	4770      	bx	lr

0800ff68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ff68:	b480      	push	{r7}
 800ff6a:	b085      	sub	sp, #20
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	691b      	ldr	r3, [r3, #16]
 800ff74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	685b      	ldr	r3, [r3, #4]
 800ff7a:	687a      	ldr	r2, [r7, #4]
 800ff7c:	6892      	ldr	r2, [r2, #8]
 800ff7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	689b      	ldr	r3, [r3, #8]
 800ff84:	687a      	ldr	r2, [r7, #4]
 800ff86:	6852      	ldr	r2, [r2, #4]
 800ff88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	685b      	ldr	r3, [r3, #4]
 800ff8e:	687a      	ldr	r2, [r7, #4]
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d103      	bne.n	800ff9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	689a      	ldr	r2, [r3, #8]
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	1e5a      	subs	r2, r3, #1
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
}
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	3714      	adds	r7, #20
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffba:	4770      	bx	lr

0800ffbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b084      	sub	sp, #16
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
 800ffc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d10a      	bne.n	800ffe6 <xQueueGenericReset+0x2a>
	__asm volatile
 800ffd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffd4:	f383 8811 	msr	BASEPRI, r3
 800ffd8:	f3bf 8f6f 	isb	sy
 800ffdc:	f3bf 8f4f 	dsb	sy
 800ffe0:	60bb      	str	r3, [r7, #8]
}
 800ffe2:	bf00      	nop
 800ffe4:	e7fe      	b.n	800ffe4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ffe6:	f002 fe25 	bl	8012c34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	681a      	ldr	r2, [r3, #0]
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fff2:	68f9      	ldr	r1, [r7, #12]
 800fff4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fff6:	fb01 f303 	mul.w	r3, r1, r3
 800fffa:	441a      	add	r2, r3
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	2200      	movs	r2, #0
 8010004:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	681a      	ldr	r2, [r3, #0]
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	681a      	ldr	r2, [r3, #0]
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010016:	3b01      	subs	r3, #1
 8010018:	68f9      	ldr	r1, [r7, #12]
 801001a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801001c:	fb01 f303 	mul.w	r3, r1, r3
 8010020:	441a      	add	r2, r3
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	22ff      	movs	r2, #255	; 0xff
 801002a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	22ff      	movs	r2, #255	; 0xff
 8010032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d114      	bne.n	8010066 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	691b      	ldr	r3, [r3, #16]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d01a      	beq.n	801007a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	3310      	adds	r3, #16
 8010048:	4618      	mov	r0, r3
 801004a:	f001 fc87 	bl	801195c <xTaskRemoveFromEventList>
 801004e:	4603      	mov	r3, r0
 8010050:	2b00      	cmp	r3, #0
 8010052:	d012      	beq.n	801007a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010054:	4b0c      	ldr	r3, [pc, #48]	; (8010088 <xQueueGenericReset+0xcc>)
 8010056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801005a:	601a      	str	r2, [r3, #0]
 801005c:	f3bf 8f4f 	dsb	sy
 8010060:	f3bf 8f6f 	isb	sy
 8010064:	e009      	b.n	801007a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	3310      	adds	r3, #16
 801006a:	4618      	mov	r0, r3
 801006c:	f7ff fef2 	bl	800fe54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	3324      	adds	r3, #36	; 0x24
 8010074:	4618      	mov	r0, r3
 8010076:	f7ff feed 	bl	800fe54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801007a:	f002 fe0b 	bl	8012c94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801007e:	2301      	movs	r3, #1
}
 8010080:	4618      	mov	r0, r3
 8010082:	3710      	adds	r7, #16
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}
 8010088:	e000ed04 	.word	0xe000ed04

0801008c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801008c:	b580      	push	{r7, lr}
 801008e:	b08e      	sub	sp, #56	; 0x38
 8010090:	af02      	add	r7, sp, #8
 8010092:	60f8      	str	r0, [r7, #12]
 8010094:	60b9      	str	r1, [r7, #8]
 8010096:	607a      	str	r2, [r7, #4]
 8010098:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d10a      	bne.n	80100b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80100a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a4:	f383 8811 	msr	BASEPRI, r3
 80100a8:	f3bf 8f6f 	isb	sy
 80100ac:	f3bf 8f4f 	dsb	sy
 80100b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80100b2:	bf00      	nop
 80100b4:	e7fe      	b.n	80100b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d10a      	bne.n	80100d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80100bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100c0:	f383 8811 	msr	BASEPRI, r3
 80100c4:	f3bf 8f6f 	isb	sy
 80100c8:	f3bf 8f4f 	dsb	sy
 80100cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80100ce:	bf00      	nop
 80100d0:	e7fe      	b.n	80100d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d002      	beq.n	80100de <xQueueGenericCreateStatic+0x52>
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d001      	beq.n	80100e2 <xQueueGenericCreateStatic+0x56>
 80100de:	2301      	movs	r3, #1
 80100e0:	e000      	b.n	80100e4 <xQueueGenericCreateStatic+0x58>
 80100e2:	2300      	movs	r3, #0
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d10a      	bne.n	80100fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80100e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ec:	f383 8811 	msr	BASEPRI, r3
 80100f0:	f3bf 8f6f 	isb	sy
 80100f4:	f3bf 8f4f 	dsb	sy
 80100f8:	623b      	str	r3, [r7, #32]
}
 80100fa:	bf00      	nop
 80100fc:	e7fe      	b.n	80100fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d102      	bne.n	801010a <xQueueGenericCreateStatic+0x7e>
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d101      	bne.n	801010e <xQueueGenericCreateStatic+0x82>
 801010a:	2301      	movs	r3, #1
 801010c:	e000      	b.n	8010110 <xQueueGenericCreateStatic+0x84>
 801010e:	2300      	movs	r3, #0
 8010110:	2b00      	cmp	r3, #0
 8010112:	d10a      	bne.n	801012a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010118:	f383 8811 	msr	BASEPRI, r3
 801011c:	f3bf 8f6f 	isb	sy
 8010120:	f3bf 8f4f 	dsb	sy
 8010124:	61fb      	str	r3, [r7, #28]
}
 8010126:	bf00      	nop
 8010128:	e7fe      	b.n	8010128 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801012a:	2350      	movs	r3, #80	; 0x50
 801012c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	2b50      	cmp	r3, #80	; 0x50
 8010132:	d00a      	beq.n	801014a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010138:	f383 8811 	msr	BASEPRI, r3
 801013c:	f3bf 8f6f 	isb	sy
 8010140:	f3bf 8f4f 	dsb	sy
 8010144:	61bb      	str	r3, [r7, #24]
}
 8010146:	bf00      	nop
 8010148:	e7fe      	b.n	8010148 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801014a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010152:	2b00      	cmp	r3, #0
 8010154:	d00d      	beq.n	8010172 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010158:	2201      	movs	r2, #1
 801015a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801015e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010164:	9300      	str	r3, [sp, #0]
 8010166:	4613      	mov	r3, r2
 8010168:	687a      	ldr	r2, [r7, #4]
 801016a:	68b9      	ldr	r1, [r7, #8]
 801016c:	68f8      	ldr	r0, [r7, #12]
 801016e:	f000 f83f 	bl	80101f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010174:	4618      	mov	r0, r3
 8010176:	3730      	adds	r7, #48	; 0x30
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}

0801017c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801017c:	b580      	push	{r7, lr}
 801017e:	b08a      	sub	sp, #40	; 0x28
 8010180:	af02      	add	r7, sp, #8
 8010182:	60f8      	str	r0, [r7, #12]
 8010184:	60b9      	str	r1, [r7, #8]
 8010186:	4613      	mov	r3, r2
 8010188:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d10a      	bne.n	80101a6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8010190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010194:	f383 8811 	msr	BASEPRI, r3
 8010198:	f3bf 8f6f 	isb	sy
 801019c:	f3bf 8f4f 	dsb	sy
 80101a0:	613b      	str	r3, [r7, #16]
}
 80101a2:	bf00      	nop
 80101a4:	e7fe      	b.n	80101a4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	68ba      	ldr	r2, [r7, #8]
 80101aa:	fb02 f303 	mul.w	r3, r2, r3
 80101ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80101b0:	69fb      	ldr	r3, [r7, #28]
 80101b2:	3350      	adds	r3, #80	; 0x50
 80101b4:	4618      	mov	r0, r3
 80101b6:	f002 fe5f 	bl	8012e78 <pvPortMalloc>
 80101ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80101bc:	69bb      	ldr	r3, [r7, #24]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d011      	beq.n	80101e6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80101c2:	69bb      	ldr	r3, [r7, #24]
 80101c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80101c6:	697b      	ldr	r3, [r7, #20]
 80101c8:	3350      	adds	r3, #80	; 0x50
 80101ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80101cc:	69bb      	ldr	r3, [r7, #24]
 80101ce:	2200      	movs	r2, #0
 80101d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80101d4:	79fa      	ldrb	r2, [r7, #7]
 80101d6:	69bb      	ldr	r3, [r7, #24]
 80101d8:	9300      	str	r3, [sp, #0]
 80101da:	4613      	mov	r3, r2
 80101dc:	697a      	ldr	r2, [r7, #20]
 80101de:	68b9      	ldr	r1, [r7, #8]
 80101e0:	68f8      	ldr	r0, [r7, #12]
 80101e2:	f000 f805 	bl	80101f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80101e6:	69bb      	ldr	r3, [r7, #24]
	}
 80101e8:	4618      	mov	r0, r3
 80101ea:	3720      	adds	r7, #32
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b084      	sub	sp, #16
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	60f8      	str	r0, [r7, #12]
 80101f8:	60b9      	str	r1, [r7, #8]
 80101fa:	607a      	str	r2, [r7, #4]
 80101fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d103      	bne.n	801020c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010204:	69bb      	ldr	r3, [r7, #24]
 8010206:	69ba      	ldr	r2, [r7, #24]
 8010208:	601a      	str	r2, [r3, #0]
 801020a:	e002      	b.n	8010212 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801020c:	69bb      	ldr	r3, [r7, #24]
 801020e:	687a      	ldr	r2, [r7, #4]
 8010210:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010212:	69bb      	ldr	r3, [r7, #24]
 8010214:	68fa      	ldr	r2, [r7, #12]
 8010216:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010218:	69bb      	ldr	r3, [r7, #24]
 801021a:	68ba      	ldr	r2, [r7, #8]
 801021c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801021e:	2101      	movs	r1, #1
 8010220:	69b8      	ldr	r0, [r7, #24]
 8010222:	f7ff fecb 	bl	800ffbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010226:	69bb      	ldr	r3, [r7, #24]
 8010228:	78fa      	ldrb	r2, [r7, #3]
 801022a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801022e:	bf00      	nop
 8010230:	3710      	adds	r7, #16
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}

08010236 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010236:	b580      	push	{r7, lr}
 8010238:	b08a      	sub	sp, #40	; 0x28
 801023a:	af02      	add	r7, sp, #8
 801023c:	60f8      	str	r0, [r7, #12]
 801023e:	60b9      	str	r1, [r7, #8]
 8010240:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d10a      	bne.n	801025e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8010248:	f04f 0350 	mov.w	r3, #80	; 0x50
 801024c:	f383 8811 	msr	BASEPRI, r3
 8010250:	f3bf 8f6f 	isb	sy
 8010254:	f3bf 8f4f 	dsb	sy
 8010258:	61bb      	str	r3, [r7, #24]
}
 801025a:	bf00      	nop
 801025c:	e7fe      	b.n	801025c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801025e:	68ba      	ldr	r2, [r7, #8]
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	429a      	cmp	r2, r3
 8010264:	d90a      	bls.n	801027c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8010266:	f04f 0350 	mov.w	r3, #80	; 0x50
 801026a:	f383 8811 	msr	BASEPRI, r3
 801026e:	f3bf 8f6f 	isb	sy
 8010272:	f3bf 8f4f 	dsb	sy
 8010276:	617b      	str	r3, [r7, #20]
}
 8010278:	bf00      	nop
 801027a:	e7fe      	b.n	801027a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801027c:	2302      	movs	r3, #2
 801027e:	9300      	str	r3, [sp, #0]
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2200      	movs	r2, #0
 8010284:	2100      	movs	r1, #0
 8010286:	68f8      	ldr	r0, [r7, #12]
 8010288:	f7ff ff00 	bl	801008c <xQueueGenericCreateStatic>
 801028c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801028e:	69fb      	ldr	r3, [r7, #28]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d002      	beq.n	801029a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010294:	69fb      	ldr	r3, [r7, #28]
 8010296:	68ba      	ldr	r2, [r7, #8]
 8010298:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801029a:	69fb      	ldr	r3, [r7, #28]
	}
 801029c:	4618      	mov	r0, r3
 801029e:	3720      	adds	r7, #32
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b086      	sub	sp, #24
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
 80102ac:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d10a      	bne.n	80102ca <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80102b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b8:	f383 8811 	msr	BASEPRI, r3
 80102bc:	f3bf 8f6f 	isb	sy
 80102c0:	f3bf 8f4f 	dsb	sy
 80102c4:	613b      	str	r3, [r7, #16]
}
 80102c6:	bf00      	nop
 80102c8:	e7fe      	b.n	80102c8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80102ca:	683a      	ldr	r2, [r7, #0]
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d90a      	bls.n	80102e8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80102d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d6:	f383 8811 	msr	BASEPRI, r3
 80102da:	f3bf 8f6f 	isb	sy
 80102de:	f3bf 8f4f 	dsb	sy
 80102e2:	60fb      	str	r3, [r7, #12]
}
 80102e4:	bf00      	nop
 80102e6:	e7fe      	b.n	80102e6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80102e8:	2202      	movs	r2, #2
 80102ea:	2100      	movs	r1, #0
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	f7ff ff45 	bl	801017c <xQueueGenericCreate>
 80102f2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80102f4:	697b      	ldr	r3, [r7, #20]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d002      	beq.n	8010300 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	683a      	ldr	r2, [r7, #0]
 80102fe:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010300:	697b      	ldr	r3, [r7, #20]
	}
 8010302:	4618      	mov	r0, r3
 8010304:	3718      	adds	r7, #24
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
	...

0801030c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b08e      	sub	sp, #56	; 0x38
 8010310:	af00      	add	r7, sp, #0
 8010312:	60f8      	str	r0, [r7, #12]
 8010314:	60b9      	str	r1, [r7, #8]
 8010316:	607a      	str	r2, [r7, #4]
 8010318:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801031a:	2300      	movs	r3, #0
 801031c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010324:	2b00      	cmp	r3, #0
 8010326:	d10a      	bne.n	801033e <xQueueGenericSend+0x32>
	__asm volatile
 8010328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801032c:	f383 8811 	msr	BASEPRI, r3
 8010330:	f3bf 8f6f 	isb	sy
 8010334:	f3bf 8f4f 	dsb	sy
 8010338:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801033a:	bf00      	nop
 801033c:	e7fe      	b.n	801033c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d103      	bne.n	801034c <xQueueGenericSend+0x40>
 8010344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010348:	2b00      	cmp	r3, #0
 801034a:	d101      	bne.n	8010350 <xQueueGenericSend+0x44>
 801034c:	2301      	movs	r3, #1
 801034e:	e000      	b.n	8010352 <xQueueGenericSend+0x46>
 8010350:	2300      	movs	r3, #0
 8010352:	2b00      	cmp	r3, #0
 8010354:	d10a      	bne.n	801036c <xQueueGenericSend+0x60>
	__asm volatile
 8010356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801035a:	f383 8811 	msr	BASEPRI, r3
 801035e:	f3bf 8f6f 	isb	sy
 8010362:	f3bf 8f4f 	dsb	sy
 8010366:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010368:	bf00      	nop
 801036a:	e7fe      	b.n	801036a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	2b02      	cmp	r3, #2
 8010370:	d103      	bne.n	801037a <xQueueGenericSend+0x6e>
 8010372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010376:	2b01      	cmp	r3, #1
 8010378:	d101      	bne.n	801037e <xQueueGenericSend+0x72>
 801037a:	2301      	movs	r3, #1
 801037c:	e000      	b.n	8010380 <xQueueGenericSend+0x74>
 801037e:	2300      	movs	r3, #0
 8010380:	2b00      	cmp	r3, #0
 8010382:	d10a      	bne.n	801039a <xQueueGenericSend+0x8e>
	__asm volatile
 8010384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010388:	f383 8811 	msr	BASEPRI, r3
 801038c:	f3bf 8f6f 	isb	sy
 8010390:	f3bf 8f4f 	dsb	sy
 8010394:	623b      	str	r3, [r7, #32]
}
 8010396:	bf00      	nop
 8010398:	e7fe      	b.n	8010398 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801039a:	f001 fd03 	bl	8011da4 <xTaskGetSchedulerState>
 801039e:	4603      	mov	r3, r0
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d102      	bne.n	80103aa <xQueueGenericSend+0x9e>
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d101      	bne.n	80103ae <xQueueGenericSend+0xa2>
 80103aa:	2301      	movs	r3, #1
 80103ac:	e000      	b.n	80103b0 <xQueueGenericSend+0xa4>
 80103ae:	2300      	movs	r3, #0
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d10a      	bne.n	80103ca <xQueueGenericSend+0xbe>
	__asm volatile
 80103b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103b8:	f383 8811 	msr	BASEPRI, r3
 80103bc:	f3bf 8f6f 	isb	sy
 80103c0:	f3bf 8f4f 	dsb	sy
 80103c4:	61fb      	str	r3, [r7, #28]
}
 80103c6:	bf00      	nop
 80103c8:	e7fe      	b.n	80103c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80103ca:	f002 fc33 	bl	8012c34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80103ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80103d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103d6:	429a      	cmp	r2, r3
 80103d8:	d302      	bcc.n	80103e0 <xQueueGenericSend+0xd4>
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	2b02      	cmp	r3, #2
 80103de:	d129      	bne.n	8010434 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80103e0:	683a      	ldr	r2, [r7, #0]
 80103e2:	68b9      	ldr	r1, [r7, #8]
 80103e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103e6:	f000 fc5e 	bl	8010ca6 <prvCopyDataToQueue>
 80103ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80103ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d010      	beq.n	8010416 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80103f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f6:	3324      	adds	r3, #36	; 0x24
 80103f8:	4618      	mov	r0, r3
 80103fa:	f001 faaf 	bl	801195c <xTaskRemoveFromEventList>
 80103fe:	4603      	mov	r3, r0
 8010400:	2b00      	cmp	r3, #0
 8010402:	d013      	beq.n	801042c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010404:	4b3f      	ldr	r3, [pc, #252]	; (8010504 <xQueueGenericSend+0x1f8>)
 8010406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801040a:	601a      	str	r2, [r3, #0]
 801040c:	f3bf 8f4f 	dsb	sy
 8010410:	f3bf 8f6f 	isb	sy
 8010414:	e00a      	b.n	801042c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010418:	2b00      	cmp	r3, #0
 801041a:	d007      	beq.n	801042c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801041c:	4b39      	ldr	r3, [pc, #228]	; (8010504 <xQueueGenericSend+0x1f8>)
 801041e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010422:	601a      	str	r2, [r3, #0]
 8010424:	f3bf 8f4f 	dsb	sy
 8010428:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801042c:	f002 fc32 	bl	8012c94 <vPortExitCritical>
				return pdPASS;
 8010430:	2301      	movs	r3, #1
 8010432:	e063      	b.n	80104fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d103      	bne.n	8010442 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801043a:	f002 fc2b 	bl	8012c94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801043e:	2300      	movs	r3, #0
 8010440:	e05c      	b.n	80104fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010444:	2b00      	cmp	r3, #0
 8010446:	d106      	bne.n	8010456 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010448:	f107 0314 	add.w	r3, r7, #20
 801044c:	4618      	mov	r0, r3
 801044e:	f001 fb4b 	bl	8011ae8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010452:	2301      	movs	r3, #1
 8010454:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010456:	f002 fc1d 	bl	8012c94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801045a:	f001 f819 	bl	8011490 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801045e:	f002 fbe9 	bl	8012c34 <vPortEnterCritical>
 8010462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010464:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010468:	b25b      	sxtb	r3, r3
 801046a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801046e:	d103      	bne.n	8010478 <xQueueGenericSend+0x16c>
 8010470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010472:	2200      	movs	r2, #0
 8010474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801047a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801047e:	b25b      	sxtb	r3, r3
 8010480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010484:	d103      	bne.n	801048e <xQueueGenericSend+0x182>
 8010486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010488:	2200      	movs	r2, #0
 801048a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801048e:	f002 fc01 	bl	8012c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010492:	1d3a      	adds	r2, r7, #4
 8010494:	f107 0314 	add.w	r3, r7, #20
 8010498:	4611      	mov	r1, r2
 801049a:	4618      	mov	r0, r3
 801049c:	f001 fb3a 	bl	8011b14 <xTaskCheckForTimeOut>
 80104a0:	4603      	mov	r3, r0
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d124      	bne.n	80104f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80104a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104a8:	f000 fcf5 	bl	8010e96 <prvIsQueueFull>
 80104ac:	4603      	mov	r3, r0
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d018      	beq.n	80104e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80104b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104b4:	3310      	adds	r3, #16
 80104b6:	687a      	ldr	r2, [r7, #4]
 80104b8:	4611      	mov	r1, r2
 80104ba:	4618      	mov	r0, r3
 80104bc:	f001 f9c2 	bl	8011844 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80104c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104c2:	f000 fc80 	bl	8010dc6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80104c6:	f000 fff1 	bl	80114ac <xTaskResumeAll>
 80104ca:	4603      	mov	r3, r0
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	f47f af7c 	bne.w	80103ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80104d2:	4b0c      	ldr	r3, [pc, #48]	; (8010504 <xQueueGenericSend+0x1f8>)
 80104d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104d8:	601a      	str	r2, [r3, #0]
 80104da:	f3bf 8f4f 	dsb	sy
 80104de:	f3bf 8f6f 	isb	sy
 80104e2:	e772      	b.n	80103ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80104e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104e6:	f000 fc6e 	bl	8010dc6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80104ea:	f000 ffdf 	bl	80114ac <xTaskResumeAll>
 80104ee:	e76c      	b.n	80103ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80104f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104f2:	f000 fc68 	bl	8010dc6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80104f6:	f000 ffd9 	bl	80114ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80104fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3738      	adds	r7, #56	; 0x38
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}
 8010504:	e000ed04 	.word	0xe000ed04

08010508 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b090      	sub	sp, #64	; 0x40
 801050c:	af00      	add	r7, sp, #0
 801050e:	60f8      	str	r0, [r7, #12]
 8010510:	60b9      	str	r1, [r7, #8]
 8010512:	607a      	str	r2, [r7, #4]
 8010514:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801051a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801051c:	2b00      	cmp	r3, #0
 801051e:	d10a      	bne.n	8010536 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010524:	f383 8811 	msr	BASEPRI, r3
 8010528:	f3bf 8f6f 	isb	sy
 801052c:	f3bf 8f4f 	dsb	sy
 8010530:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010532:	bf00      	nop
 8010534:	e7fe      	b.n	8010534 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d103      	bne.n	8010544 <xQueueGenericSendFromISR+0x3c>
 801053c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010540:	2b00      	cmp	r3, #0
 8010542:	d101      	bne.n	8010548 <xQueueGenericSendFromISR+0x40>
 8010544:	2301      	movs	r3, #1
 8010546:	e000      	b.n	801054a <xQueueGenericSendFromISR+0x42>
 8010548:	2300      	movs	r3, #0
 801054a:	2b00      	cmp	r3, #0
 801054c:	d10a      	bne.n	8010564 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801054e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010552:	f383 8811 	msr	BASEPRI, r3
 8010556:	f3bf 8f6f 	isb	sy
 801055a:	f3bf 8f4f 	dsb	sy
 801055e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010560:	bf00      	nop
 8010562:	e7fe      	b.n	8010562 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	2b02      	cmp	r3, #2
 8010568:	d103      	bne.n	8010572 <xQueueGenericSendFromISR+0x6a>
 801056a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801056c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801056e:	2b01      	cmp	r3, #1
 8010570:	d101      	bne.n	8010576 <xQueueGenericSendFromISR+0x6e>
 8010572:	2301      	movs	r3, #1
 8010574:	e000      	b.n	8010578 <xQueueGenericSendFromISR+0x70>
 8010576:	2300      	movs	r3, #0
 8010578:	2b00      	cmp	r3, #0
 801057a:	d10a      	bne.n	8010592 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801057c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010580:	f383 8811 	msr	BASEPRI, r3
 8010584:	f3bf 8f6f 	isb	sy
 8010588:	f3bf 8f4f 	dsb	sy
 801058c:	623b      	str	r3, [r7, #32]
}
 801058e:	bf00      	nop
 8010590:	e7fe      	b.n	8010590 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010592:	f002 fc31 	bl	8012df8 <vPortValidateInterruptPriority>
	__asm volatile
 8010596:	f3ef 8211 	mrs	r2, BASEPRI
 801059a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801059e:	f383 8811 	msr	BASEPRI, r3
 80105a2:	f3bf 8f6f 	isb	sy
 80105a6:	f3bf 8f4f 	dsb	sy
 80105aa:	61fa      	str	r2, [r7, #28]
 80105ac:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80105ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80105b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80105b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80105b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105ba:	429a      	cmp	r2, r3
 80105bc:	d302      	bcc.n	80105c4 <xQueueGenericSendFromISR+0xbc>
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	2b02      	cmp	r3, #2
 80105c2:	d12f      	bne.n	8010624 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80105c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80105ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80105ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80105d4:	683a      	ldr	r2, [r7, #0]
 80105d6:	68b9      	ldr	r1, [r7, #8]
 80105d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80105da:	f000 fb64 	bl	8010ca6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80105de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80105e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105e6:	d112      	bne.n	801060e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80105e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d016      	beq.n	801061e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80105f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105f2:	3324      	adds	r3, #36	; 0x24
 80105f4:	4618      	mov	r0, r3
 80105f6:	f001 f9b1 	bl	801195c <xTaskRemoveFromEventList>
 80105fa:	4603      	mov	r3, r0
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00e      	beq.n	801061e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d00b      	beq.n	801061e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2201      	movs	r2, #1
 801060a:	601a      	str	r2, [r3, #0]
 801060c:	e007      	b.n	801061e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801060e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010612:	3301      	adds	r3, #1
 8010614:	b2db      	uxtb	r3, r3
 8010616:	b25a      	sxtb	r2, r3
 8010618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801061a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801061e:	2301      	movs	r3, #1
 8010620:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010622:	e001      	b.n	8010628 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010624:	2300      	movs	r3, #0
 8010626:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801062a:	617b      	str	r3, [r7, #20]
	__asm volatile
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	f383 8811 	msr	BASEPRI, r3
}
 8010632:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010636:	4618      	mov	r0, r3
 8010638:	3740      	adds	r7, #64	; 0x40
 801063a:	46bd      	mov	sp, r7
 801063c:	bd80      	pop	{r7, pc}

0801063e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801063e:	b580      	push	{r7, lr}
 8010640:	b08e      	sub	sp, #56	; 0x38
 8010642:	af00      	add	r7, sp, #0
 8010644:	6078      	str	r0, [r7, #4]
 8010646:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801064c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801064e:	2b00      	cmp	r3, #0
 8010650:	d10a      	bne.n	8010668 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8010652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010656:	f383 8811 	msr	BASEPRI, r3
 801065a:	f3bf 8f6f 	isb	sy
 801065e:	f3bf 8f4f 	dsb	sy
 8010662:	623b      	str	r3, [r7, #32]
}
 8010664:	bf00      	nop
 8010666:	e7fe      	b.n	8010666 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801066c:	2b00      	cmp	r3, #0
 801066e:	d00a      	beq.n	8010686 <xQueueGiveFromISR+0x48>
	__asm volatile
 8010670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010674:	f383 8811 	msr	BASEPRI, r3
 8010678:	f3bf 8f6f 	isb	sy
 801067c:	f3bf 8f4f 	dsb	sy
 8010680:	61fb      	str	r3, [r7, #28]
}
 8010682:	bf00      	nop
 8010684:	e7fe      	b.n	8010684 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d103      	bne.n	8010696 <xQueueGiveFromISR+0x58>
 801068e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010690:	689b      	ldr	r3, [r3, #8]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d101      	bne.n	801069a <xQueueGiveFromISR+0x5c>
 8010696:	2301      	movs	r3, #1
 8010698:	e000      	b.n	801069c <xQueueGiveFromISR+0x5e>
 801069a:	2300      	movs	r3, #0
 801069c:	2b00      	cmp	r3, #0
 801069e:	d10a      	bne.n	80106b6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80106a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a4:	f383 8811 	msr	BASEPRI, r3
 80106a8:	f3bf 8f6f 	isb	sy
 80106ac:	f3bf 8f4f 	dsb	sy
 80106b0:	61bb      	str	r3, [r7, #24]
}
 80106b2:	bf00      	nop
 80106b4:	e7fe      	b.n	80106b4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80106b6:	f002 fb9f 	bl	8012df8 <vPortValidateInterruptPriority>
	__asm volatile
 80106ba:	f3ef 8211 	mrs	r2, BASEPRI
 80106be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c2:	f383 8811 	msr	BASEPRI, r3
 80106c6:	f3bf 8f6f 	isb	sy
 80106ca:	f3bf 8f4f 	dsb	sy
 80106ce:	617a      	str	r2, [r7, #20]
 80106d0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80106d2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80106d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80106d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80106dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d22b      	bcs.n	801073e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80106e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80106ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80106f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f2:	1c5a      	adds	r2, r3, #1
 80106f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80106f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80106fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010700:	d112      	bne.n	8010728 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010706:	2b00      	cmp	r3, #0
 8010708:	d016      	beq.n	8010738 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801070a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801070c:	3324      	adds	r3, #36	; 0x24
 801070e:	4618      	mov	r0, r3
 8010710:	f001 f924 	bl	801195c <xTaskRemoveFromEventList>
 8010714:	4603      	mov	r3, r0
 8010716:	2b00      	cmp	r3, #0
 8010718:	d00e      	beq.n	8010738 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d00b      	beq.n	8010738 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	2201      	movs	r2, #1
 8010724:	601a      	str	r2, [r3, #0]
 8010726:	e007      	b.n	8010738 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801072c:	3301      	adds	r3, #1
 801072e:	b2db      	uxtb	r3, r3
 8010730:	b25a      	sxtb	r2, r3
 8010732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010738:	2301      	movs	r3, #1
 801073a:	637b      	str	r3, [r7, #52]	; 0x34
 801073c:	e001      	b.n	8010742 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801073e:	2300      	movs	r3, #0
 8010740:	637b      	str	r3, [r7, #52]	; 0x34
 8010742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010744:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	f383 8811 	msr	BASEPRI, r3
}
 801074c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801074e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010750:	4618      	mov	r0, r3
 8010752:	3738      	adds	r7, #56	; 0x38
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}

08010758 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b08c      	sub	sp, #48	; 0x30
 801075c:	af00      	add	r7, sp, #0
 801075e:	60f8      	str	r0, [r7, #12]
 8010760:	60b9      	str	r1, [r7, #8]
 8010762:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010764:	2300      	movs	r3, #0
 8010766:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801076c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801076e:	2b00      	cmp	r3, #0
 8010770:	d10a      	bne.n	8010788 <xQueueReceive+0x30>
	__asm volatile
 8010772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010776:	f383 8811 	msr	BASEPRI, r3
 801077a:	f3bf 8f6f 	isb	sy
 801077e:	f3bf 8f4f 	dsb	sy
 8010782:	623b      	str	r3, [r7, #32]
}
 8010784:	bf00      	nop
 8010786:	e7fe      	b.n	8010786 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d103      	bne.n	8010796 <xQueueReceive+0x3e>
 801078e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010792:	2b00      	cmp	r3, #0
 8010794:	d101      	bne.n	801079a <xQueueReceive+0x42>
 8010796:	2301      	movs	r3, #1
 8010798:	e000      	b.n	801079c <xQueueReceive+0x44>
 801079a:	2300      	movs	r3, #0
 801079c:	2b00      	cmp	r3, #0
 801079e:	d10a      	bne.n	80107b6 <xQueueReceive+0x5e>
	__asm volatile
 80107a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a4:	f383 8811 	msr	BASEPRI, r3
 80107a8:	f3bf 8f6f 	isb	sy
 80107ac:	f3bf 8f4f 	dsb	sy
 80107b0:	61fb      	str	r3, [r7, #28]
}
 80107b2:	bf00      	nop
 80107b4:	e7fe      	b.n	80107b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80107b6:	f001 faf5 	bl	8011da4 <xTaskGetSchedulerState>
 80107ba:	4603      	mov	r3, r0
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d102      	bne.n	80107c6 <xQueueReceive+0x6e>
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d101      	bne.n	80107ca <xQueueReceive+0x72>
 80107c6:	2301      	movs	r3, #1
 80107c8:	e000      	b.n	80107cc <xQueueReceive+0x74>
 80107ca:	2300      	movs	r3, #0
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d10a      	bne.n	80107e6 <xQueueReceive+0x8e>
	__asm volatile
 80107d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107d4:	f383 8811 	msr	BASEPRI, r3
 80107d8:	f3bf 8f6f 	isb	sy
 80107dc:	f3bf 8f4f 	dsb	sy
 80107e0:	61bb      	str	r3, [r7, #24]
}
 80107e2:	bf00      	nop
 80107e4:	e7fe      	b.n	80107e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80107e6:	f002 fa25 	bl	8012c34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80107ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80107f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d01f      	beq.n	8010836 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80107f6:	68b9      	ldr	r1, [r7, #8]
 80107f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107fa:	f000 fabe 	bl	8010d7a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80107fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010800:	1e5a      	subs	r2, r3, #1
 8010802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010804:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010808:	691b      	ldr	r3, [r3, #16]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d00f      	beq.n	801082e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801080e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010810:	3310      	adds	r3, #16
 8010812:	4618      	mov	r0, r3
 8010814:	f001 f8a2 	bl	801195c <xTaskRemoveFromEventList>
 8010818:	4603      	mov	r3, r0
 801081a:	2b00      	cmp	r3, #0
 801081c:	d007      	beq.n	801082e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801081e:	4b3d      	ldr	r3, [pc, #244]	; (8010914 <xQueueReceive+0x1bc>)
 8010820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010824:	601a      	str	r2, [r3, #0]
 8010826:	f3bf 8f4f 	dsb	sy
 801082a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801082e:	f002 fa31 	bl	8012c94 <vPortExitCritical>
				return pdPASS;
 8010832:	2301      	movs	r3, #1
 8010834:	e069      	b.n	801090a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d103      	bne.n	8010844 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801083c:	f002 fa2a 	bl	8012c94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010840:	2300      	movs	r3, #0
 8010842:	e062      	b.n	801090a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010846:	2b00      	cmp	r3, #0
 8010848:	d106      	bne.n	8010858 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801084a:	f107 0310 	add.w	r3, r7, #16
 801084e:	4618      	mov	r0, r3
 8010850:	f001 f94a 	bl	8011ae8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010854:	2301      	movs	r3, #1
 8010856:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010858:	f002 fa1c 	bl	8012c94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801085c:	f000 fe18 	bl	8011490 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010860:	f002 f9e8 	bl	8012c34 <vPortEnterCritical>
 8010864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010866:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801086a:	b25b      	sxtb	r3, r3
 801086c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010870:	d103      	bne.n	801087a <xQueueReceive+0x122>
 8010872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010874:	2200      	movs	r2, #0
 8010876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801087a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801087c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010880:	b25b      	sxtb	r3, r3
 8010882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010886:	d103      	bne.n	8010890 <xQueueReceive+0x138>
 8010888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801088a:	2200      	movs	r2, #0
 801088c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010890:	f002 fa00 	bl	8012c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010894:	1d3a      	adds	r2, r7, #4
 8010896:	f107 0310 	add.w	r3, r7, #16
 801089a:	4611      	mov	r1, r2
 801089c:	4618      	mov	r0, r3
 801089e:	f001 f939 	bl	8011b14 <xTaskCheckForTimeOut>
 80108a2:	4603      	mov	r3, r0
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d123      	bne.n	80108f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80108a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108aa:	f000 fade 	bl	8010e6a <prvIsQueueEmpty>
 80108ae:	4603      	mov	r3, r0
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d017      	beq.n	80108e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80108b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108b6:	3324      	adds	r3, #36	; 0x24
 80108b8:	687a      	ldr	r2, [r7, #4]
 80108ba:	4611      	mov	r1, r2
 80108bc:	4618      	mov	r0, r3
 80108be:	f000 ffc1 	bl	8011844 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80108c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108c4:	f000 fa7f 	bl	8010dc6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80108c8:	f000 fdf0 	bl	80114ac <xTaskResumeAll>
 80108cc:	4603      	mov	r3, r0
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d189      	bne.n	80107e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80108d2:	4b10      	ldr	r3, [pc, #64]	; (8010914 <xQueueReceive+0x1bc>)
 80108d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108d8:	601a      	str	r2, [r3, #0]
 80108da:	f3bf 8f4f 	dsb	sy
 80108de:	f3bf 8f6f 	isb	sy
 80108e2:	e780      	b.n	80107e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80108e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108e6:	f000 fa6e 	bl	8010dc6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80108ea:	f000 fddf 	bl	80114ac <xTaskResumeAll>
 80108ee:	e77a      	b.n	80107e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80108f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108f2:	f000 fa68 	bl	8010dc6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80108f6:	f000 fdd9 	bl	80114ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80108fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108fc:	f000 fab5 	bl	8010e6a <prvIsQueueEmpty>
 8010900:	4603      	mov	r3, r0
 8010902:	2b00      	cmp	r3, #0
 8010904:	f43f af6f 	beq.w	80107e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010908:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801090a:	4618      	mov	r0, r3
 801090c:	3730      	adds	r7, #48	; 0x30
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}
 8010912:	bf00      	nop
 8010914:	e000ed04 	.word	0xe000ed04

08010918 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b08e      	sub	sp, #56	; 0x38
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
 8010920:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010922:	2300      	movs	r3, #0
 8010924:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801092a:	2300      	movs	r3, #0
 801092c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801092e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010930:	2b00      	cmp	r3, #0
 8010932:	d10a      	bne.n	801094a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010938:	f383 8811 	msr	BASEPRI, r3
 801093c:	f3bf 8f6f 	isb	sy
 8010940:	f3bf 8f4f 	dsb	sy
 8010944:	623b      	str	r3, [r7, #32]
}
 8010946:	bf00      	nop
 8010948:	e7fe      	b.n	8010948 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801094a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801094e:	2b00      	cmp	r3, #0
 8010950:	d00a      	beq.n	8010968 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8010952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010956:	f383 8811 	msr	BASEPRI, r3
 801095a:	f3bf 8f6f 	isb	sy
 801095e:	f3bf 8f4f 	dsb	sy
 8010962:	61fb      	str	r3, [r7, #28]
}
 8010964:	bf00      	nop
 8010966:	e7fe      	b.n	8010966 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010968:	f001 fa1c 	bl	8011da4 <xTaskGetSchedulerState>
 801096c:	4603      	mov	r3, r0
 801096e:	2b00      	cmp	r3, #0
 8010970:	d102      	bne.n	8010978 <xQueueSemaphoreTake+0x60>
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d101      	bne.n	801097c <xQueueSemaphoreTake+0x64>
 8010978:	2301      	movs	r3, #1
 801097a:	e000      	b.n	801097e <xQueueSemaphoreTake+0x66>
 801097c:	2300      	movs	r3, #0
 801097e:	2b00      	cmp	r3, #0
 8010980:	d10a      	bne.n	8010998 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8010982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010986:	f383 8811 	msr	BASEPRI, r3
 801098a:	f3bf 8f6f 	isb	sy
 801098e:	f3bf 8f4f 	dsb	sy
 8010992:	61bb      	str	r3, [r7, #24]
}
 8010994:	bf00      	nop
 8010996:	e7fe      	b.n	8010996 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010998:	f002 f94c 	bl	8012c34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801099c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801099e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109a0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80109a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d024      	beq.n	80109f2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80109a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109aa:	1e5a      	subs	r2, r3, #1
 80109ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80109b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d104      	bne.n	80109c2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80109b8:	f001 fb82 	bl	80120c0 <pvTaskIncrementMutexHeldCount>
 80109bc:	4602      	mov	r2, r0
 80109be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109c0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80109c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109c4:	691b      	ldr	r3, [r3, #16]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d00f      	beq.n	80109ea <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80109ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109cc:	3310      	adds	r3, #16
 80109ce:	4618      	mov	r0, r3
 80109d0:	f000 ffc4 	bl	801195c <xTaskRemoveFromEventList>
 80109d4:	4603      	mov	r3, r0
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d007      	beq.n	80109ea <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80109da:	4b54      	ldr	r3, [pc, #336]	; (8010b2c <xQueueSemaphoreTake+0x214>)
 80109dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109e0:	601a      	str	r2, [r3, #0]
 80109e2:	f3bf 8f4f 	dsb	sy
 80109e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80109ea:	f002 f953 	bl	8012c94 <vPortExitCritical>
				return pdPASS;
 80109ee:	2301      	movs	r3, #1
 80109f0:	e097      	b.n	8010b22 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d111      	bne.n	8010a1c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80109f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d00a      	beq.n	8010a14 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80109fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a02:	f383 8811 	msr	BASEPRI, r3
 8010a06:	f3bf 8f6f 	isb	sy
 8010a0a:	f3bf 8f4f 	dsb	sy
 8010a0e:	617b      	str	r3, [r7, #20]
}
 8010a10:	bf00      	nop
 8010a12:	e7fe      	b.n	8010a12 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010a14:	f002 f93e 	bl	8012c94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010a18:	2300      	movs	r3, #0
 8010a1a:	e082      	b.n	8010b22 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d106      	bne.n	8010a30 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010a22:	f107 030c 	add.w	r3, r7, #12
 8010a26:	4618      	mov	r0, r3
 8010a28:	f001 f85e 	bl	8011ae8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010a30:	f002 f930 	bl	8012c94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010a34:	f000 fd2c 	bl	8011490 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010a38:	f002 f8fc 	bl	8012c34 <vPortEnterCritical>
 8010a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a42:	b25b      	sxtb	r3, r3
 8010a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a48:	d103      	bne.n	8010a52 <xQueueSemaphoreTake+0x13a>
 8010a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a58:	b25b      	sxtb	r3, r3
 8010a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a5e:	d103      	bne.n	8010a68 <xQueueSemaphoreTake+0x150>
 8010a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a62:	2200      	movs	r2, #0
 8010a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010a68:	f002 f914 	bl	8012c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010a6c:	463a      	mov	r2, r7
 8010a6e:	f107 030c 	add.w	r3, r7, #12
 8010a72:	4611      	mov	r1, r2
 8010a74:	4618      	mov	r0, r3
 8010a76:	f001 f84d 	bl	8011b14 <xTaskCheckForTimeOut>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d132      	bne.n	8010ae6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010a80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a82:	f000 f9f2 	bl	8010e6a <prvIsQueueEmpty>
 8010a86:	4603      	mov	r3, r0
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d026      	beq.n	8010ada <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d109      	bne.n	8010aa8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010a94:	f002 f8ce 	bl	8012c34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a9a:	689b      	ldr	r3, [r3, #8]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f001 f99f 	bl	8011de0 <xTaskPriorityInherit>
 8010aa2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010aa4:	f002 f8f6 	bl	8012c94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aaa:	3324      	adds	r3, #36	; 0x24
 8010aac:	683a      	ldr	r2, [r7, #0]
 8010aae:	4611      	mov	r1, r2
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f000 fec7 	bl	8011844 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010ab6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ab8:	f000 f985 	bl	8010dc6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010abc:	f000 fcf6 	bl	80114ac <xTaskResumeAll>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	f47f af68 	bne.w	8010998 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010ac8:	4b18      	ldr	r3, [pc, #96]	; (8010b2c <xQueueSemaphoreTake+0x214>)
 8010aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ace:	601a      	str	r2, [r3, #0]
 8010ad0:	f3bf 8f4f 	dsb	sy
 8010ad4:	f3bf 8f6f 	isb	sy
 8010ad8:	e75e      	b.n	8010998 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010ada:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010adc:	f000 f973 	bl	8010dc6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010ae0:	f000 fce4 	bl	80114ac <xTaskResumeAll>
 8010ae4:	e758      	b.n	8010998 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010ae6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ae8:	f000 f96d 	bl	8010dc6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010aec:	f000 fcde 	bl	80114ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010af0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010af2:	f000 f9ba 	bl	8010e6a <prvIsQueueEmpty>
 8010af6:	4603      	mov	r3, r0
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	f43f af4d 	beq.w	8010998 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d00d      	beq.n	8010b20 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010b04:	f002 f896 	bl	8012c34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010b08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b0a:	f000 f8b4 	bl	8010c76 <prvGetDisinheritPriorityAfterTimeout>
 8010b0e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b12:	689b      	ldr	r3, [r3, #8]
 8010b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010b16:	4618      	mov	r0, r3
 8010b18:	f001 fa38 	bl	8011f8c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010b1c:	f002 f8ba 	bl	8012c94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010b20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3738      	adds	r7, #56	; 0x38
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}
 8010b2a:	bf00      	nop
 8010b2c:	e000ed04 	.word	0xe000ed04

08010b30 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b08e      	sub	sp, #56	; 0x38
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	60f8      	str	r0, [r7, #12]
 8010b38:	60b9      	str	r1, [r7, #8]
 8010b3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d10a      	bne.n	8010b5c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b4a:	f383 8811 	msr	BASEPRI, r3
 8010b4e:	f3bf 8f6f 	isb	sy
 8010b52:	f3bf 8f4f 	dsb	sy
 8010b56:	623b      	str	r3, [r7, #32]
}
 8010b58:	bf00      	nop
 8010b5a:	e7fe      	b.n	8010b5a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b5c:	68bb      	ldr	r3, [r7, #8]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d103      	bne.n	8010b6a <xQueueReceiveFromISR+0x3a>
 8010b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d101      	bne.n	8010b6e <xQueueReceiveFromISR+0x3e>
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	e000      	b.n	8010b70 <xQueueReceiveFromISR+0x40>
 8010b6e:	2300      	movs	r3, #0
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d10a      	bne.n	8010b8a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b78:	f383 8811 	msr	BASEPRI, r3
 8010b7c:	f3bf 8f6f 	isb	sy
 8010b80:	f3bf 8f4f 	dsb	sy
 8010b84:	61fb      	str	r3, [r7, #28]
}
 8010b86:	bf00      	nop
 8010b88:	e7fe      	b.n	8010b88 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010b8a:	f002 f935 	bl	8012df8 <vPortValidateInterruptPriority>
	__asm volatile
 8010b8e:	f3ef 8211 	mrs	r2, BASEPRI
 8010b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b96:	f383 8811 	msr	BASEPRI, r3
 8010b9a:	f3bf 8f6f 	isb	sy
 8010b9e:	f3bf 8f4f 	dsb	sy
 8010ba2:	61ba      	str	r2, [r7, #24]
 8010ba4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010ba6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d02f      	beq.n	8010c16 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010bc0:	68b9      	ldr	r1, [r7, #8]
 8010bc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bc4:	f000 f8d9 	bl	8010d7a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bca:	1e5a      	subs	r2, r3, #1
 8010bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010bd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bd8:	d112      	bne.n	8010c00 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bdc:	691b      	ldr	r3, [r3, #16]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d016      	beq.n	8010c10 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be4:	3310      	adds	r3, #16
 8010be6:	4618      	mov	r0, r3
 8010be8:	f000 feb8 	bl	801195c <xTaskRemoveFromEventList>
 8010bec:	4603      	mov	r3, r0
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d00e      	beq.n	8010c10 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d00b      	beq.n	8010c10 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2201      	movs	r2, #1
 8010bfc:	601a      	str	r2, [r3, #0]
 8010bfe:	e007      	b.n	8010c10 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c04:	3301      	adds	r3, #1
 8010c06:	b2db      	uxtb	r3, r3
 8010c08:	b25a      	sxtb	r2, r3
 8010c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010c10:	2301      	movs	r3, #1
 8010c12:	637b      	str	r3, [r7, #52]	; 0x34
 8010c14:	e001      	b.n	8010c1a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010c16:	2300      	movs	r3, #0
 8010c18:	637b      	str	r3, [r7, #52]	; 0x34
 8010c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c1c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010c1e:	693b      	ldr	r3, [r7, #16]
 8010c20:	f383 8811 	msr	BASEPRI, r3
}
 8010c24:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3738      	adds	r7, #56	; 0x38
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}

08010c30 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b084      	sub	sp, #16
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d10a      	bne.n	8010c58 <vQueueDelete+0x28>
	__asm volatile
 8010c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c46:	f383 8811 	msr	BASEPRI, r3
 8010c4a:	f3bf 8f6f 	isb	sy
 8010c4e:	f3bf 8f4f 	dsb	sy
 8010c52:	60bb      	str	r3, [r7, #8]
}
 8010c54:	bf00      	nop
 8010c56:	e7fe      	b.n	8010c56 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010c58:	68f8      	ldr	r0, [r7, #12]
 8010c5a:	f000 f95f 	bl	8010f1c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d102      	bne.n	8010c6e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010c68:	68f8      	ldr	r0, [r7, #12]
 8010c6a:	f002 f9d1 	bl	8013010 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010c6e:	bf00      	nop
 8010c70:	3710      	adds	r7, #16
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}

08010c76 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010c76:	b480      	push	{r7}
 8010c78:	b085      	sub	sp, #20
 8010c7a:	af00      	add	r7, sp, #0
 8010c7c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d006      	beq.n	8010c94 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8010c90:	60fb      	str	r3, [r7, #12]
 8010c92:	e001      	b.n	8010c98 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010c94:	2300      	movs	r3, #0
 8010c96:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010c98:	68fb      	ldr	r3, [r7, #12]
	}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3714      	adds	r7, #20
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca4:	4770      	bx	lr

08010ca6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010ca6:	b580      	push	{r7, lr}
 8010ca8:	b086      	sub	sp, #24
 8010caa:	af00      	add	r7, sp, #0
 8010cac:	60f8      	str	r0, [r7, #12]
 8010cae:	60b9      	str	r1, [r7, #8]
 8010cb0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d10d      	bne.n	8010ce0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d14d      	bne.n	8010d68 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	689b      	ldr	r3, [r3, #8]
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f001 f8ed 	bl	8011eb0 <xTaskPriorityDisinherit>
 8010cd6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	2200      	movs	r2, #0
 8010cdc:	609a      	str	r2, [r3, #8]
 8010cde:	e043      	b.n	8010d68 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d119      	bne.n	8010d1a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	6858      	ldr	r0, [r3, #4]
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cee:	461a      	mov	r2, r3
 8010cf0:	68b9      	ldr	r1, [r7, #8]
 8010cf2:	f003 f995 	bl	8014020 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	685a      	ldr	r2, [r3, #4]
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cfe:	441a      	add	r2, r3
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	685a      	ldr	r2, [r3, #4]
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	689b      	ldr	r3, [r3, #8]
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	d32b      	bcc.n	8010d68 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	681a      	ldr	r2, [r3, #0]
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	605a      	str	r2, [r3, #4]
 8010d18:	e026      	b.n	8010d68 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	68d8      	ldr	r0, [r3, #12]
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d22:	461a      	mov	r2, r3
 8010d24:	68b9      	ldr	r1, [r7, #8]
 8010d26:	f003 f97b 	bl	8014020 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	68da      	ldr	r2, [r3, #12]
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d32:	425b      	negs	r3, r3
 8010d34:	441a      	add	r2, r3
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	68da      	ldr	r2, [r3, #12]
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d207      	bcs.n	8010d56 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	689a      	ldr	r2, [r3, #8]
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d4e:	425b      	negs	r3, r3
 8010d50:	441a      	add	r2, r3
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2b02      	cmp	r3, #2
 8010d5a:	d105      	bne.n	8010d68 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d002      	beq.n	8010d68 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010d62:	693b      	ldr	r3, [r7, #16]
 8010d64:	3b01      	subs	r3, #1
 8010d66:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010d68:	693b      	ldr	r3, [r7, #16]
 8010d6a:	1c5a      	adds	r2, r3, #1
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010d70:	697b      	ldr	r3, [r7, #20]
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	3718      	adds	r7, #24
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}

08010d7a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010d7a:	b580      	push	{r7, lr}
 8010d7c:	b082      	sub	sp, #8
 8010d7e:	af00      	add	r7, sp, #0
 8010d80:	6078      	str	r0, [r7, #4]
 8010d82:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d018      	beq.n	8010dbe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	68da      	ldr	r2, [r3, #12]
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d94:	441a      	add	r2, r3
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	68da      	ldr	r2, [r3, #12]
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	689b      	ldr	r3, [r3, #8]
 8010da2:	429a      	cmp	r2, r3
 8010da4:	d303      	bcc.n	8010dae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681a      	ldr	r2, [r3, #0]
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	68d9      	ldr	r1, [r3, #12]
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010db6:	461a      	mov	r2, r3
 8010db8:	6838      	ldr	r0, [r7, #0]
 8010dba:	f003 f931 	bl	8014020 <memcpy>
	}
}
 8010dbe:	bf00      	nop
 8010dc0:	3708      	adds	r7, #8
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}

08010dc6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010dc6:	b580      	push	{r7, lr}
 8010dc8:	b084      	sub	sp, #16
 8010dca:	af00      	add	r7, sp, #0
 8010dcc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010dce:	f001 ff31 	bl	8012c34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010dd8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010dda:	e011      	b.n	8010e00 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d012      	beq.n	8010e0a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	3324      	adds	r3, #36	; 0x24
 8010de8:	4618      	mov	r0, r3
 8010dea:	f000 fdb7 	bl	801195c <xTaskRemoveFromEventList>
 8010dee:	4603      	mov	r3, r0
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d001      	beq.n	8010df8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010df4:	f000 fef0 	bl	8011bd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010df8:	7bfb      	ldrb	r3, [r7, #15]
 8010dfa:	3b01      	subs	r3, #1
 8010dfc:	b2db      	uxtb	r3, r3
 8010dfe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	dce9      	bgt.n	8010ddc <prvUnlockQueue+0x16>
 8010e08:	e000      	b.n	8010e0c <prvUnlockQueue+0x46>
					break;
 8010e0a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	22ff      	movs	r2, #255	; 0xff
 8010e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010e14:	f001 ff3e 	bl	8012c94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010e18:	f001 ff0c 	bl	8012c34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e22:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010e24:	e011      	b.n	8010e4a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	691b      	ldr	r3, [r3, #16]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d012      	beq.n	8010e54 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	3310      	adds	r3, #16
 8010e32:	4618      	mov	r0, r3
 8010e34:	f000 fd92 	bl	801195c <xTaskRemoveFromEventList>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d001      	beq.n	8010e42 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010e3e:	f000 fecb 	bl	8011bd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010e42:	7bbb      	ldrb	r3, [r7, #14]
 8010e44:	3b01      	subs	r3, #1
 8010e46:	b2db      	uxtb	r3, r3
 8010e48:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010e4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	dce9      	bgt.n	8010e26 <prvUnlockQueue+0x60>
 8010e52:	e000      	b.n	8010e56 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010e54:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	22ff      	movs	r2, #255	; 0xff
 8010e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010e5e:	f001 ff19 	bl	8012c94 <vPortExitCritical>
}
 8010e62:	bf00      	nop
 8010e64:	3710      	adds	r7, #16
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}

08010e6a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010e6a:	b580      	push	{r7, lr}
 8010e6c:	b084      	sub	sp, #16
 8010e6e:	af00      	add	r7, sp, #0
 8010e70:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010e72:	f001 fedf 	bl	8012c34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d102      	bne.n	8010e84 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010e7e:	2301      	movs	r3, #1
 8010e80:	60fb      	str	r3, [r7, #12]
 8010e82:	e001      	b.n	8010e88 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010e84:	2300      	movs	r3, #0
 8010e86:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010e88:	f001 ff04 	bl	8012c94 <vPortExitCritical>

	return xReturn;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	3710      	adds	r7, #16
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}

08010e96 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010e96:	b580      	push	{r7, lr}
 8010e98:	b084      	sub	sp, #16
 8010e9a:	af00      	add	r7, sp, #0
 8010e9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010e9e:	f001 fec9 	bl	8012c34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010eaa:	429a      	cmp	r2, r3
 8010eac:	d102      	bne.n	8010eb4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010eae:	2301      	movs	r3, #1
 8010eb0:	60fb      	str	r3, [r7, #12]
 8010eb2:	e001      	b.n	8010eb8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010eb8:	f001 feec 	bl	8012c94 <vPortExitCritical>

	return xReturn;
 8010ebc:	68fb      	ldr	r3, [r7, #12]
}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	3710      	adds	r7, #16
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd80      	pop	{r7, pc}
	...

08010ec8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010ec8:	b480      	push	{r7}
 8010eca:	b085      	sub	sp, #20
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
 8010ed0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	60fb      	str	r3, [r7, #12]
 8010ed6:	e014      	b.n	8010f02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010ed8:	4a0f      	ldr	r2, [pc, #60]	; (8010f18 <vQueueAddToRegistry+0x50>)
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d10b      	bne.n	8010efc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010ee4:	490c      	ldr	r1, [pc, #48]	; (8010f18 <vQueueAddToRegistry+0x50>)
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	683a      	ldr	r2, [r7, #0]
 8010eea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010eee:	4a0a      	ldr	r2, [pc, #40]	; (8010f18 <vQueueAddToRegistry+0x50>)
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	00db      	lsls	r3, r3, #3
 8010ef4:	4413      	add	r3, r2
 8010ef6:	687a      	ldr	r2, [r7, #4]
 8010ef8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010efa:	e006      	b.n	8010f0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	3301      	adds	r3, #1
 8010f00:	60fb      	str	r3, [r7, #12]
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	2b07      	cmp	r3, #7
 8010f06:	d9e7      	bls.n	8010ed8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010f08:	bf00      	nop
 8010f0a:	bf00      	nop
 8010f0c:	3714      	adds	r7, #20
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f14:	4770      	bx	lr
 8010f16:	bf00      	nop
 8010f18:	200010f4 	.word	0x200010f4

08010f1c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010f1c:	b480      	push	{r7}
 8010f1e:	b085      	sub	sp, #20
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010f24:	2300      	movs	r3, #0
 8010f26:	60fb      	str	r3, [r7, #12]
 8010f28:	e016      	b.n	8010f58 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010f2a:	4a10      	ldr	r2, [pc, #64]	; (8010f6c <vQueueUnregisterQueue+0x50>)
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	00db      	lsls	r3, r3, #3
 8010f30:	4413      	add	r3, r2
 8010f32:	685b      	ldr	r3, [r3, #4]
 8010f34:	687a      	ldr	r2, [r7, #4]
 8010f36:	429a      	cmp	r2, r3
 8010f38:	d10b      	bne.n	8010f52 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010f3a:	4a0c      	ldr	r2, [pc, #48]	; (8010f6c <vQueueUnregisterQueue+0x50>)
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	2100      	movs	r1, #0
 8010f40:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010f44:	4a09      	ldr	r2, [pc, #36]	; (8010f6c <vQueueUnregisterQueue+0x50>)
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	00db      	lsls	r3, r3, #3
 8010f4a:	4413      	add	r3, r2
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	605a      	str	r2, [r3, #4]
				break;
 8010f50:	e006      	b.n	8010f60 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	3301      	adds	r3, #1
 8010f56:	60fb      	str	r3, [r7, #12]
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	2b07      	cmp	r3, #7
 8010f5c:	d9e5      	bls.n	8010f2a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010f5e:	bf00      	nop
 8010f60:	bf00      	nop
 8010f62:	3714      	adds	r7, #20
 8010f64:	46bd      	mov	sp, r7
 8010f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6a:	4770      	bx	lr
 8010f6c:	200010f4 	.word	0x200010f4

08010f70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b086      	sub	sp, #24
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	60f8      	str	r0, [r7, #12]
 8010f78:	60b9      	str	r1, [r7, #8]
 8010f7a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010f80:	f001 fe58 	bl	8012c34 <vPortEnterCritical>
 8010f84:	697b      	ldr	r3, [r7, #20]
 8010f86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f8a:	b25b      	sxtb	r3, r3
 8010f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f90:	d103      	bne.n	8010f9a <vQueueWaitForMessageRestricted+0x2a>
 8010f92:	697b      	ldr	r3, [r7, #20]
 8010f94:	2200      	movs	r2, #0
 8010f96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010fa0:	b25b      	sxtb	r3, r3
 8010fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fa6:	d103      	bne.n	8010fb0 <vQueueWaitForMessageRestricted+0x40>
 8010fa8:	697b      	ldr	r3, [r7, #20]
 8010faa:	2200      	movs	r2, #0
 8010fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010fb0:	f001 fe70 	bl	8012c94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d106      	bne.n	8010fca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	3324      	adds	r3, #36	; 0x24
 8010fc0:	687a      	ldr	r2, [r7, #4]
 8010fc2:	68b9      	ldr	r1, [r7, #8]
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f000 fc9d 	bl	8011904 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010fca:	6978      	ldr	r0, [r7, #20]
 8010fcc:	f7ff fefb 	bl	8010dc6 <prvUnlockQueue>
	}
 8010fd0:	bf00      	nop
 8010fd2:	3718      	adds	r7, #24
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}

08010fd8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b08e      	sub	sp, #56	; 0x38
 8010fdc:	af04      	add	r7, sp, #16
 8010fde:	60f8      	str	r0, [r7, #12]
 8010fe0:	60b9      	str	r1, [r7, #8]
 8010fe2:	607a      	str	r2, [r7, #4]
 8010fe4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d10a      	bne.n	8011002 <xTaskCreateStatic+0x2a>
	__asm volatile
 8010fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ff0:	f383 8811 	msr	BASEPRI, r3
 8010ff4:	f3bf 8f6f 	isb	sy
 8010ff8:	f3bf 8f4f 	dsb	sy
 8010ffc:	623b      	str	r3, [r7, #32]
}
 8010ffe:	bf00      	nop
 8011000:	e7fe      	b.n	8011000 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011004:	2b00      	cmp	r3, #0
 8011006:	d10a      	bne.n	801101e <xTaskCreateStatic+0x46>
	__asm volatile
 8011008:	f04f 0350 	mov.w	r3, #80	; 0x50
 801100c:	f383 8811 	msr	BASEPRI, r3
 8011010:	f3bf 8f6f 	isb	sy
 8011014:	f3bf 8f4f 	dsb	sy
 8011018:	61fb      	str	r3, [r7, #28]
}
 801101a:	bf00      	nop
 801101c:	e7fe      	b.n	801101c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801101e:	23bc      	movs	r3, #188	; 0xbc
 8011020:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	2bbc      	cmp	r3, #188	; 0xbc
 8011026:	d00a      	beq.n	801103e <xTaskCreateStatic+0x66>
	__asm volatile
 8011028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801102c:	f383 8811 	msr	BASEPRI, r3
 8011030:	f3bf 8f6f 	isb	sy
 8011034:	f3bf 8f4f 	dsb	sy
 8011038:	61bb      	str	r3, [r7, #24]
}
 801103a:	bf00      	nop
 801103c:	e7fe      	b.n	801103c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801103e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011042:	2b00      	cmp	r3, #0
 8011044:	d01e      	beq.n	8011084 <xTaskCreateStatic+0xac>
 8011046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011048:	2b00      	cmp	r3, #0
 801104a:	d01b      	beq.n	8011084 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801104c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801104e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011052:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011054:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011058:	2202      	movs	r2, #2
 801105a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801105e:	2300      	movs	r3, #0
 8011060:	9303      	str	r3, [sp, #12]
 8011062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011064:	9302      	str	r3, [sp, #8]
 8011066:	f107 0314 	add.w	r3, r7, #20
 801106a:	9301      	str	r3, [sp, #4]
 801106c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801106e:	9300      	str	r3, [sp, #0]
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	687a      	ldr	r2, [r7, #4]
 8011074:	68b9      	ldr	r1, [r7, #8]
 8011076:	68f8      	ldr	r0, [r7, #12]
 8011078:	f000 f850 	bl	801111c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801107c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801107e:	f000 f8f3 	bl	8011268 <prvAddNewTaskToReadyList>
 8011082:	e001      	b.n	8011088 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011084:	2300      	movs	r3, #0
 8011086:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011088:	697b      	ldr	r3, [r7, #20]
	}
 801108a:	4618      	mov	r0, r3
 801108c:	3728      	adds	r7, #40	; 0x28
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}

08011092 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011092:	b580      	push	{r7, lr}
 8011094:	b08c      	sub	sp, #48	; 0x30
 8011096:	af04      	add	r7, sp, #16
 8011098:	60f8      	str	r0, [r7, #12]
 801109a:	60b9      	str	r1, [r7, #8]
 801109c:	603b      	str	r3, [r7, #0]
 801109e:	4613      	mov	r3, r2
 80110a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80110a2:	88fb      	ldrh	r3, [r7, #6]
 80110a4:	009b      	lsls	r3, r3, #2
 80110a6:	4618      	mov	r0, r3
 80110a8:	f001 fee6 	bl	8012e78 <pvPortMalloc>
 80110ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d00e      	beq.n	80110d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80110b4:	20bc      	movs	r0, #188	; 0xbc
 80110b6:	f001 fedf 	bl	8012e78 <pvPortMalloc>
 80110ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80110bc:	69fb      	ldr	r3, [r7, #28]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d003      	beq.n	80110ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80110c2:	69fb      	ldr	r3, [r7, #28]
 80110c4:	697a      	ldr	r2, [r7, #20]
 80110c6:	631a      	str	r2, [r3, #48]	; 0x30
 80110c8:	e005      	b.n	80110d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80110ca:	6978      	ldr	r0, [r7, #20]
 80110cc:	f001 ffa0 	bl	8013010 <vPortFree>
 80110d0:	e001      	b.n	80110d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80110d2:	2300      	movs	r3, #0
 80110d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80110d6:	69fb      	ldr	r3, [r7, #28]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d017      	beq.n	801110c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80110dc:	69fb      	ldr	r3, [r7, #28]
 80110de:	2200      	movs	r2, #0
 80110e0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80110e4:	88fa      	ldrh	r2, [r7, #6]
 80110e6:	2300      	movs	r3, #0
 80110e8:	9303      	str	r3, [sp, #12]
 80110ea:	69fb      	ldr	r3, [r7, #28]
 80110ec:	9302      	str	r3, [sp, #8]
 80110ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f0:	9301      	str	r3, [sp, #4]
 80110f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110f4:	9300      	str	r3, [sp, #0]
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	68b9      	ldr	r1, [r7, #8]
 80110fa:	68f8      	ldr	r0, [r7, #12]
 80110fc:	f000 f80e 	bl	801111c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011100:	69f8      	ldr	r0, [r7, #28]
 8011102:	f000 f8b1 	bl	8011268 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011106:	2301      	movs	r3, #1
 8011108:	61bb      	str	r3, [r7, #24]
 801110a:	e002      	b.n	8011112 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801110c:	f04f 33ff 	mov.w	r3, #4294967295
 8011110:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011112:	69bb      	ldr	r3, [r7, #24]
	}
 8011114:	4618      	mov	r0, r3
 8011116:	3720      	adds	r7, #32
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}

0801111c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b088      	sub	sp, #32
 8011120:	af00      	add	r7, sp, #0
 8011122:	60f8      	str	r0, [r7, #12]
 8011124:	60b9      	str	r1, [r7, #8]
 8011126:	607a      	str	r2, [r7, #4]
 8011128:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801112a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801112c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	009b      	lsls	r3, r3, #2
 8011132:	461a      	mov	r2, r3
 8011134:	21a5      	movs	r1, #165	; 0xa5
 8011136:	f002 ff81 	bl	801403c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801113a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801113c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011144:	3b01      	subs	r3, #1
 8011146:	009b      	lsls	r3, r3, #2
 8011148:	4413      	add	r3, r2
 801114a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801114c:	69bb      	ldr	r3, [r7, #24]
 801114e:	f023 0307 	bic.w	r3, r3, #7
 8011152:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011154:	69bb      	ldr	r3, [r7, #24]
 8011156:	f003 0307 	and.w	r3, r3, #7
 801115a:	2b00      	cmp	r3, #0
 801115c:	d00a      	beq.n	8011174 <prvInitialiseNewTask+0x58>
	__asm volatile
 801115e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011162:	f383 8811 	msr	BASEPRI, r3
 8011166:	f3bf 8f6f 	isb	sy
 801116a:	f3bf 8f4f 	dsb	sy
 801116e:	617b      	str	r3, [r7, #20]
}
 8011170:	bf00      	nop
 8011172:	e7fe      	b.n	8011172 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d01f      	beq.n	80111ba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801117a:	2300      	movs	r3, #0
 801117c:	61fb      	str	r3, [r7, #28]
 801117e:	e012      	b.n	80111a6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011180:	68ba      	ldr	r2, [r7, #8]
 8011182:	69fb      	ldr	r3, [r7, #28]
 8011184:	4413      	add	r3, r2
 8011186:	7819      	ldrb	r1, [r3, #0]
 8011188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801118a:	69fb      	ldr	r3, [r7, #28]
 801118c:	4413      	add	r3, r2
 801118e:	3334      	adds	r3, #52	; 0x34
 8011190:	460a      	mov	r2, r1
 8011192:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011194:	68ba      	ldr	r2, [r7, #8]
 8011196:	69fb      	ldr	r3, [r7, #28]
 8011198:	4413      	add	r3, r2
 801119a:	781b      	ldrb	r3, [r3, #0]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d006      	beq.n	80111ae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80111a0:	69fb      	ldr	r3, [r7, #28]
 80111a2:	3301      	adds	r3, #1
 80111a4:	61fb      	str	r3, [r7, #28]
 80111a6:	69fb      	ldr	r3, [r7, #28]
 80111a8:	2b0f      	cmp	r3, #15
 80111aa:	d9e9      	bls.n	8011180 <prvInitialiseNewTask+0x64>
 80111ac:	e000      	b.n	80111b0 <prvInitialiseNewTask+0x94>
			{
				break;
 80111ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80111b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b2:	2200      	movs	r2, #0
 80111b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80111b8:	e003      	b.n	80111c2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80111ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111bc:	2200      	movs	r2, #0
 80111be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80111c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111c4:	2b37      	cmp	r3, #55	; 0x37
 80111c6:	d901      	bls.n	80111cc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80111c8:	2337      	movs	r3, #55	; 0x37
 80111ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80111cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80111d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80111d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111da:	2200      	movs	r2, #0
 80111dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80111de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e0:	3304      	adds	r3, #4
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7fe fe56 	bl	800fe94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80111e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ea:	3318      	adds	r3, #24
 80111ec:	4618      	mov	r0, r3
 80111ee:	f7fe fe51 	bl	800fe94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80111f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80111f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80111fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011200:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011206:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801120a:	2200      	movs	r2, #0
 801120c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011212:	2200      	movs	r2, #0
 8011214:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801121a:	3354      	adds	r3, #84	; 0x54
 801121c:	2260      	movs	r2, #96	; 0x60
 801121e:	2100      	movs	r1, #0
 8011220:	4618      	mov	r0, r3
 8011222:	f002 ff0b 	bl	801403c <memset>
 8011226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011228:	4a0c      	ldr	r2, [pc, #48]	; (801125c <prvInitialiseNewTask+0x140>)
 801122a:	659a      	str	r2, [r3, #88]	; 0x58
 801122c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801122e:	4a0c      	ldr	r2, [pc, #48]	; (8011260 <prvInitialiseNewTask+0x144>)
 8011230:	65da      	str	r2, [r3, #92]	; 0x5c
 8011232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011234:	4a0b      	ldr	r2, [pc, #44]	; (8011264 <prvInitialiseNewTask+0x148>)
 8011236:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011238:	683a      	ldr	r2, [r7, #0]
 801123a:	68f9      	ldr	r1, [r7, #12]
 801123c:	69b8      	ldr	r0, [r7, #24]
 801123e:	f001 fbcf 	bl	80129e0 <pxPortInitialiseStack>
 8011242:	4602      	mov	r2, r0
 8011244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011246:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801124a:	2b00      	cmp	r3, #0
 801124c:	d002      	beq.n	8011254 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801124e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011252:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011254:	bf00      	nop
 8011256:	3720      	adds	r7, #32
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}
 801125c:	08016fe8 	.word	0x08016fe8
 8011260:	08017008 	.word	0x08017008
 8011264:	08016fc8 	.word	0x08016fc8

08011268 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b082      	sub	sp, #8
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011270:	f001 fce0 	bl	8012c34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011274:	4b2d      	ldr	r3, [pc, #180]	; (801132c <prvAddNewTaskToReadyList+0xc4>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	3301      	adds	r3, #1
 801127a:	4a2c      	ldr	r2, [pc, #176]	; (801132c <prvAddNewTaskToReadyList+0xc4>)
 801127c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801127e:	4b2c      	ldr	r3, [pc, #176]	; (8011330 <prvAddNewTaskToReadyList+0xc8>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d109      	bne.n	801129a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011286:	4a2a      	ldr	r2, [pc, #168]	; (8011330 <prvAddNewTaskToReadyList+0xc8>)
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801128c:	4b27      	ldr	r3, [pc, #156]	; (801132c <prvAddNewTaskToReadyList+0xc4>)
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	2b01      	cmp	r3, #1
 8011292:	d110      	bne.n	80112b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011294:	f000 fcc4 	bl	8011c20 <prvInitialiseTaskLists>
 8011298:	e00d      	b.n	80112b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801129a:	4b26      	ldr	r3, [pc, #152]	; (8011334 <prvAddNewTaskToReadyList+0xcc>)
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d109      	bne.n	80112b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80112a2:	4b23      	ldr	r3, [pc, #140]	; (8011330 <prvAddNewTaskToReadyList+0xc8>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112ac:	429a      	cmp	r2, r3
 80112ae:	d802      	bhi.n	80112b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80112b0:	4a1f      	ldr	r2, [pc, #124]	; (8011330 <prvAddNewTaskToReadyList+0xc8>)
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80112b6:	4b20      	ldr	r3, [pc, #128]	; (8011338 <prvAddNewTaskToReadyList+0xd0>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	3301      	adds	r3, #1
 80112bc:	4a1e      	ldr	r2, [pc, #120]	; (8011338 <prvAddNewTaskToReadyList+0xd0>)
 80112be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80112c0:	4b1d      	ldr	r3, [pc, #116]	; (8011338 <prvAddNewTaskToReadyList+0xd0>)
 80112c2:	681a      	ldr	r2, [r3, #0]
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112cc:	4b1b      	ldr	r3, [pc, #108]	; (801133c <prvAddNewTaskToReadyList+0xd4>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d903      	bls.n	80112dc <prvAddNewTaskToReadyList+0x74>
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112d8:	4a18      	ldr	r2, [pc, #96]	; (801133c <prvAddNewTaskToReadyList+0xd4>)
 80112da:	6013      	str	r3, [r2, #0]
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112e0:	4613      	mov	r3, r2
 80112e2:	009b      	lsls	r3, r3, #2
 80112e4:	4413      	add	r3, r2
 80112e6:	009b      	lsls	r3, r3, #2
 80112e8:	4a15      	ldr	r2, [pc, #84]	; (8011340 <prvAddNewTaskToReadyList+0xd8>)
 80112ea:	441a      	add	r2, r3
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	3304      	adds	r3, #4
 80112f0:	4619      	mov	r1, r3
 80112f2:	4610      	mov	r0, r2
 80112f4:	f7fe fddb 	bl	800feae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80112f8:	f001 fccc 	bl	8012c94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80112fc:	4b0d      	ldr	r3, [pc, #52]	; (8011334 <prvAddNewTaskToReadyList+0xcc>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d00e      	beq.n	8011322 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011304:	4b0a      	ldr	r3, [pc, #40]	; (8011330 <prvAddNewTaskToReadyList+0xc8>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801130e:	429a      	cmp	r2, r3
 8011310:	d207      	bcs.n	8011322 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011312:	4b0c      	ldr	r3, [pc, #48]	; (8011344 <prvAddNewTaskToReadyList+0xdc>)
 8011314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011318:	601a      	str	r2, [r3, #0]
 801131a:	f3bf 8f4f 	dsb	sy
 801131e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011322:	bf00      	nop
 8011324:	3708      	adds	r7, #8
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}
 801132a:	bf00      	nop
 801132c:	20001608 	.word	0x20001608
 8011330:	20001134 	.word	0x20001134
 8011334:	20001614 	.word	0x20001614
 8011338:	20001624 	.word	0x20001624
 801133c:	20001610 	.word	0x20001610
 8011340:	20001138 	.word	0x20001138
 8011344:	e000ed04 	.word	0xe000ed04

08011348 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011348:	b580      	push	{r7, lr}
 801134a:	b084      	sub	sp, #16
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011350:	2300      	movs	r3, #0
 8011352:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d017      	beq.n	801138a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801135a:	4b13      	ldr	r3, [pc, #76]	; (80113a8 <vTaskDelay+0x60>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d00a      	beq.n	8011378 <vTaskDelay+0x30>
	__asm volatile
 8011362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011366:	f383 8811 	msr	BASEPRI, r3
 801136a:	f3bf 8f6f 	isb	sy
 801136e:	f3bf 8f4f 	dsb	sy
 8011372:	60bb      	str	r3, [r7, #8]
}
 8011374:	bf00      	nop
 8011376:	e7fe      	b.n	8011376 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011378:	f000 f88a 	bl	8011490 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801137c:	2100      	movs	r1, #0
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	f000 feb2 	bl	80120e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011384:	f000 f892 	bl	80114ac <xTaskResumeAll>
 8011388:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d107      	bne.n	80113a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011390:	4b06      	ldr	r3, [pc, #24]	; (80113ac <vTaskDelay+0x64>)
 8011392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011396:	601a      	str	r2, [r3, #0]
 8011398:	f3bf 8f4f 	dsb	sy
 801139c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80113a0:	bf00      	nop
 80113a2:	3710      	adds	r7, #16
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}
 80113a8:	20001630 	.word	0x20001630
 80113ac:	e000ed04 	.word	0xe000ed04

080113b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b08a      	sub	sp, #40	; 0x28
 80113b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80113b6:	2300      	movs	r3, #0
 80113b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80113ba:	2300      	movs	r3, #0
 80113bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80113be:	463a      	mov	r2, r7
 80113c0:	1d39      	adds	r1, r7, #4
 80113c2:	f107 0308 	add.w	r3, r7, #8
 80113c6:	4618      	mov	r0, r3
 80113c8:	f7fe fb22 	bl	800fa10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80113cc:	6839      	ldr	r1, [r7, #0]
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	68ba      	ldr	r2, [r7, #8]
 80113d2:	9202      	str	r2, [sp, #8]
 80113d4:	9301      	str	r3, [sp, #4]
 80113d6:	2300      	movs	r3, #0
 80113d8:	9300      	str	r3, [sp, #0]
 80113da:	2300      	movs	r3, #0
 80113dc:	460a      	mov	r2, r1
 80113de:	4924      	ldr	r1, [pc, #144]	; (8011470 <vTaskStartScheduler+0xc0>)
 80113e0:	4824      	ldr	r0, [pc, #144]	; (8011474 <vTaskStartScheduler+0xc4>)
 80113e2:	f7ff fdf9 	bl	8010fd8 <xTaskCreateStatic>
 80113e6:	4603      	mov	r3, r0
 80113e8:	4a23      	ldr	r2, [pc, #140]	; (8011478 <vTaskStartScheduler+0xc8>)
 80113ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80113ec:	4b22      	ldr	r3, [pc, #136]	; (8011478 <vTaskStartScheduler+0xc8>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d002      	beq.n	80113fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80113f4:	2301      	movs	r3, #1
 80113f6:	617b      	str	r3, [r7, #20]
 80113f8:	e001      	b.n	80113fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80113fa:	2300      	movs	r3, #0
 80113fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80113fe:	697b      	ldr	r3, [r7, #20]
 8011400:	2b01      	cmp	r3, #1
 8011402:	d102      	bne.n	801140a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011404:	f000 fec4 	bl	8012190 <xTimerCreateTimerTask>
 8011408:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	2b01      	cmp	r3, #1
 801140e:	d11b      	bne.n	8011448 <vTaskStartScheduler+0x98>
	__asm volatile
 8011410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011414:	f383 8811 	msr	BASEPRI, r3
 8011418:	f3bf 8f6f 	isb	sy
 801141c:	f3bf 8f4f 	dsb	sy
 8011420:	613b      	str	r3, [r7, #16]
}
 8011422:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011424:	4b15      	ldr	r3, [pc, #84]	; (801147c <vTaskStartScheduler+0xcc>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	3354      	adds	r3, #84	; 0x54
 801142a:	4a15      	ldr	r2, [pc, #84]	; (8011480 <vTaskStartScheduler+0xd0>)
 801142c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801142e:	4b15      	ldr	r3, [pc, #84]	; (8011484 <vTaskStartScheduler+0xd4>)
 8011430:	f04f 32ff 	mov.w	r2, #4294967295
 8011434:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011436:	4b14      	ldr	r3, [pc, #80]	; (8011488 <vTaskStartScheduler+0xd8>)
 8011438:	2201      	movs	r2, #1
 801143a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801143c:	4b13      	ldr	r3, [pc, #76]	; (801148c <vTaskStartScheduler+0xdc>)
 801143e:	2200      	movs	r2, #0
 8011440:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011442:	f001 fb55 	bl	8012af0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011446:	e00e      	b.n	8011466 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801144e:	d10a      	bne.n	8011466 <vTaskStartScheduler+0xb6>
	__asm volatile
 8011450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011454:	f383 8811 	msr	BASEPRI, r3
 8011458:	f3bf 8f6f 	isb	sy
 801145c:	f3bf 8f4f 	dsb	sy
 8011460:	60fb      	str	r3, [r7, #12]
}
 8011462:	bf00      	nop
 8011464:	e7fe      	b.n	8011464 <vTaskStartScheduler+0xb4>
}
 8011466:	bf00      	nop
 8011468:	3718      	adds	r7, #24
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}
 801146e:	bf00      	nop
 8011470:	08016e3c 	.word	0x08016e3c
 8011474:	08011bf1 	.word	0x08011bf1
 8011478:	2000162c 	.word	0x2000162c
 801147c:	20001134 	.word	0x20001134
 8011480:	20000124 	.word	0x20000124
 8011484:	20001628 	.word	0x20001628
 8011488:	20001614 	.word	0x20001614
 801148c:	2000160c 	.word	0x2000160c

08011490 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011490:	b480      	push	{r7}
 8011492:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011494:	4b04      	ldr	r3, [pc, #16]	; (80114a8 <vTaskSuspendAll+0x18>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	3301      	adds	r3, #1
 801149a:	4a03      	ldr	r2, [pc, #12]	; (80114a8 <vTaskSuspendAll+0x18>)
 801149c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801149e:	bf00      	nop
 80114a0:	46bd      	mov	sp, r7
 80114a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a6:	4770      	bx	lr
 80114a8:	20001630 	.word	0x20001630

080114ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b084      	sub	sp, #16
 80114b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80114b2:	2300      	movs	r3, #0
 80114b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80114b6:	2300      	movs	r3, #0
 80114b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80114ba:	4b42      	ldr	r3, [pc, #264]	; (80115c4 <xTaskResumeAll+0x118>)
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d10a      	bne.n	80114d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80114c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114c6:	f383 8811 	msr	BASEPRI, r3
 80114ca:	f3bf 8f6f 	isb	sy
 80114ce:	f3bf 8f4f 	dsb	sy
 80114d2:	603b      	str	r3, [r7, #0]
}
 80114d4:	bf00      	nop
 80114d6:	e7fe      	b.n	80114d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80114d8:	f001 fbac 	bl	8012c34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80114dc:	4b39      	ldr	r3, [pc, #228]	; (80115c4 <xTaskResumeAll+0x118>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	3b01      	subs	r3, #1
 80114e2:	4a38      	ldr	r2, [pc, #224]	; (80115c4 <xTaskResumeAll+0x118>)
 80114e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114e6:	4b37      	ldr	r3, [pc, #220]	; (80115c4 <xTaskResumeAll+0x118>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d162      	bne.n	80115b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80114ee:	4b36      	ldr	r3, [pc, #216]	; (80115c8 <xTaskResumeAll+0x11c>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d05e      	beq.n	80115b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80114f6:	e02f      	b.n	8011558 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114f8:	4b34      	ldr	r3, [pc, #208]	; (80115cc <xTaskResumeAll+0x120>)
 80114fa:	68db      	ldr	r3, [r3, #12]
 80114fc:	68db      	ldr	r3, [r3, #12]
 80114fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	3318      	adds	r3, #24
 8011504:	4618      	mov	r0, r3
 8011506:	f7fe fd2f 	bl	800ff68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	3304      	adds	r3, #4
 801150e:	4618      	mov	r0, r3
 8011510:	f7fe fd2a 	bl	800ff68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011518:	4b2d      	ldr	r3, [pc, #180]	; (80115d0 <xTaskResumeAll+0x124>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	429a      	cmp	r2, r3
 801151e:	d903      	bls.n	8011528 <xTaskResumeAll+0x7c>
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011524:	4a2a      	ldr	r2, [pc, #168]	; (80115d0 <xTaskResumeAll+0x124>)
 8011526:	6013      	str	r3, [r2, #0]
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801152c:	4613      	mov	r3, r2
 801152e:	009b      	lsls	r3, r3, #2
 8011530:	4413      	add	r3, r2
 8011532:	009b      	lsls	r3, r3, #2
 8011534:	4a27      	ldr	r2, [pc, #156]	; (80115d4 <xTaskResumeAll+0x128>)
 8011536:	441a      	add	r2, r3
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	3304      	adds	r3, #4
 801153c:	4619      	mov	r1, r3
 801153e:	4610      	mov	r0, r2
 8011540:	f7fe fcb5 	bl	800feae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011548:	4b23      	ldr	r3, [pc, #140]	; (80115d8 <xTaskResumeAll+0x12c>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801154e:	429a      	cmp	r2, r3
 8011550:	d302      	bcc.n	8011558 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011552:	4b22      	ldr	r3, [pc, #136]	; (80115dc <xTaskResumeAll+0x130>)
 8011554:	2201      	movs	r2, #1
 8011556:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011558:	4b1c      	ldr	r3, [pc, #112]	; (80115cc <xTaskResumeAll+0x120>)
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d1cb      	bne.n	80114f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d001      	beq.n	801156a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011566:	f000 fbfd 	bl	8011d64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801156a:	4b1d      	ldr	r3, [pc, #116]	; (80115e0 <xTaskResumeAll+0x134>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d010      	beq.n	8011598 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011576:	f000 f847 	bl	8011608 <xTaskIncrementTick>
 801157a:	4603      	mov	r3, r0
 801157c:	2b00      	cmp	r3, #0
 801157e:	d002      	beq.n	8011586 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011580:	4b16      	ldr	r3, [pc, #88]	; (80115dc <xTaskResumeAll+0x130>)
 8011582:	2201      	movs	r2, #1
 8011584:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	3b01      	subs	r3, #1
 801158a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d1f1      	bne.n	8011576 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011592:	4b13      	ldr	r3, [pc, #76]	; (80115e0 <xTaskResumeAll+0x134>)
 8011594:	2200      	movs	r2, #0
 8011596:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011598:	4b10      	ldr	r3, [pc, #64]	; (80115dc <xTaskResumeAll+0x130>)
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d009      	beq.n	80115b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80115a0:	2301      	movs	r3, #1
 80115a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80115a4:	4b0f      	ldr	r3, [pc, #60]	; (80115e4 <xTaskResumeAll+0x138>)
 80115a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115aa:	601a      	str	r2, [r3, #0]
 80115ac:	f3bf 8f4f 	dsb	sy
 80115b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80115b4:	f001 fb6e 	bl	8012c94 <vPortExitCritical>

	return xAlreadyYielded;
 80115b8:	68bb      	ldr	r3, [r7, #8]
}
 80115ba:	4618      	mov	r0, r3
 80115bc:	3710      	adds	r7, #16
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd80      	pop	{r7, pc}
 80115c2:	bf00      	nop
 80115c4:	20001630 	.word	0x20001630
 80115c8:	20001608 	.word	0x20001608
 80115cc:	200015c8 	.word	0x200015c8
 80115d0:	20001610 	.word	0x20001610
 80115d4:	20001138 	.word	0x20001138
 80115d8:	20001134 	.word	0x20001134
 80115dc:	2000161c 	.word	0x2000161c
 80115e0:	20001618 	.word	0x20001618
 80115e4:	e000ed04 	.word	0xe000ed04

080115e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80115e8:	b480      	push	{r7}
 80115ea:	b083      	sub	sp, #12
 80115ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80115ee:	4b05      	ldr	r3, [pc, #20]	; (8011604 <xTaskGetTickCount+0x1c>)
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80115f4:	687b      	ldr	r3, [r7, #4]
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	370c      	adds	r7, #12
 80115fa:	46bd      	mov	sp, r7
 80115fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011600:	4770      	bx	lr
 8011602:	bf00      	nop
 8011604:	2000160c 	.word	0x2000160c

08011608 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b086      	sub	sp, #24
 801160c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801160e:	2300      	movs	r3, #0
 8011610:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011612:	4b4f      	ldr	r3, [pc, #316]	; (8011750 <xTaskIncrementTick+0x148>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	2b00      	cmp	r3, #0
 8011618:	f040 808f 	bne.w	801173a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801161c:	4b4d      	ldr	r3, [pc, #308]	; (8011754 <xTaskIncrementTick+0x14c>)
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	3301      	adds	r3, #1
 8011622:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011624:	4a4b      	ldr	r2, [pc, #300]	; (8011754 <xTaskIncrementTick+0x14c>)
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801162a:	693b      	ldr	r3, [r7, #16]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d120      	bne.n	8011672 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011630:	4b49      	ldr	r3, [pc, #292]	; (8011758 <xTaskIncrementTick+0x150>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d00a      	beq.n	8011650 <xTaskIncrementTick+0x48>
	__asm volatile
 801163a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801163e:	f383 8811 	msr	BASEPRI, r3
 8011642:	f3bf 8f6f 	isb	sy
 8011646:	f3bf 8f4f 	dsb	sy
 801164a:	603b      	str	r3, [r7, #0]
}
 801164c:	bf00      	nop
 801164e:	e7fe      	b.n	801164e <xTaskIncrementTick+0x46>
 8011650:	4b41      	ldr	r3, [pc, #260]	; (8011758 <xTaskIncrementTick+0x150>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	60fb      	str	r3, [r7, #12]
 8011656:	4b41      	ldr	r3, [pc, #260]	; (801175c <xTaskIncrementTick+0x154>)
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	4a3f      	ldr	r2, [pc, #252]	; (8011758 <xTaskIncrementTick+0x150>)
 801165c:	6013      	str	r3, [r2, #0]
 801165e:	4a3f      	ldr	r2, [pc, #252]	; (801175c <xTaskIncrementTick+0x154>)
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	6013      	str	r3, [r2, #0]
 8011664:	4b3e      	ldr	r3, [pc, #248]	; (8011760 <xTaskIncrementTick+0x158>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	3301      	adds	r3, #1
 801166a:	4a3d      	ldr	r2, [pc, #244]	; (8011760 <xTaskIncrementTick+0x158>)
 801166c:	6013      	str	r3, [r2, #0]
 801166e:	f000 fb79 	bl	8011d64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011672:	4b3c      	ldr	r3, [pc, #240]	; (8011764 <xTaskIncrementTick+0x15c>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	693a      	ldr	r2, [r7, #16]
 8011678:	429a      	cmp	r2, r3
 801167a:	d349      	bcc.n	8011710 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801167c:	4b36      	ldr	r3, [pc, #216]	; (8011758 <xTaskIncrementTick+0x150>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d104      	bne.n	8011690 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011686:	4b37      	ldr	r3, [pc, #220]	; (8011764 <xTaskIncrementTick+0x15c>)
 8011688:	f04f 32ff 	mov.w	r2, #4294967295
 801168c:	601a      	str	r2, [r3, #0]
					break;
 801168e:	e03f      	b.n	8011710 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011690:	4b31      	ldr	r3, [pc, #196]	; (8011758 <xTaskIncrementTick+0x150>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	68db      	ldr	r3, [r3, #12]
 8011696:	68db      	ldr	r3, [r3, #12]
 8011698:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801169a:	68bb      	ldr	r3, [r7, #8]
 801169c:	685b      	ldr	r3, [r3, #4]
 801169e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80116a0:	693a      	ldr	r2, [r7, #16]
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d203      	bcs.n	80116b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80116a8:	4a2e      	ldr	r2, [pc, #184]	; (8011764 <xTaskIncrementTick+0x15c>)
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80116ae:	e02f      	b.n	8011710 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80116b0:	68bb      	ldr	r3, [r7, #8]
 80116b2:	3304      	adds	r3, #4
 80116b4:	4618      	mov	r0, r3
 80116b6:	f7fe fc57 	bl	800ff68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80116ba:	68bb      	ldr	r3, [r7, #8]
 80116bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d004      	beq.n	80116cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80116c2:	68bb      	ldr	r3, [r7, #8]
 80116c4:	3318      	adds	r3, #24
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7fe fc4e 	bl	800ff68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80116cc:	68bb      	ldr	r3, [r7, #8]
 80116ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116d0:	4b25      	ldr	r3, [pc, #148]	; (8011768 <xTaskIncrementTick+0x160>)
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d903      	bls.n	80116e0 <xTaskIncrementTick+0xd8>
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116dc:	4a22      	ldr	r2, [pc, #136]	; (8011768 <xTaskIncrementTick+0x160>)
 80116de:	6013      	str	r3, [r2, #0]
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116e4:	4613      	mov	r3, r2
 80116e6:	009b      	lsls	r3, r3, #2
 80116e8:	4413      	add	r3, r2
 80116ea:	009b      	lsls	r3, r3, #2
 80116ec:	4a1f      	ldr	r2, [pc, #124]	; (801176c <xTaskIncrementTick+0x164>)
 80116ee:	441a      	add	r2, r3
 80116f0:	68bb      	ldr	r3, [r7, #8]
 80116f2:	3304      	adds	r3, #4
 80116f4:	4619      	mov	r1, r3
 80116f6:	4610      	mov	r0, r2
 80116f8:	f7fe fbd9 	bl	800feae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80116fc:	68bb      	ldr	r3, [r7, #8]
 80116fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011700:	4b1b      	ldr	r3, [pc, #108]	; (8011770 <xTaskIncrementTick+0x168>)
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011706:	429a      	cmp	r2, r3
 8011708:	d3b8      	bcc.n	801167c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801170a:	2301      	movs	r3, #1
 801170c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801170e:	e7b5      	b.n	801167c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011710:	4b17      	ldr	r3, [pc, #92]	; (8011770 <xTaskIncrementTick+0x168>)
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011716:	4915      	ldr	r1, [pc, #84]	; (801176c <xTaskIncrementTick+0x164>)
 8011718:	4613      	mov	r3, r2
 801171a:	009b      	lsls	r3, r3, #2
 801171c:	4413      	add	r3, r2
 801171e:	009b      	lsls	r3, r3, #2
 8011720:	440b      	add	r3, r1
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	2b01      	cmp	r3, #1
 8011726:	d901      	bls.n	801172c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011728:	2301      	movs	r3, #1
 801172a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801172c:	4b11      	ldr	r3, [pc, #68]	; (8011774 <xTaskIncrementTick+0x16c>)
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d007      	beq.n	8011744 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011734:	2301      	movs	r3, #1
 8011736:	617b      	str	r3, [r7, #20]
 8011738:	e004      	b.n	8011744 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801173a:	4b0f      	ldr	r3, [pc, #60]	; (8011778 <xTaskIncrementTick+0x170>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	3301      	adds	r3, #1
 8011740:	4a0d      	ldr	r2, [pc, #52]	; (8011778 <xTaskIncrementTick+0x170>)
 8011742:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011744:	697b      	ldr	r3, [r7, #20]
}
 8011746:	4618      	mov	r0, r3
 8011748:	3718      	adds	r7, #24
 801174a:	46bd      	mov	sp, r7
 801174c:	bd80      	pop	{r7, pc}
 801174e:	bf00      	nop
 8011750:	20001630 	.word	0x20001630
 8011754:	2000160c 	.word	0x2000160c
 8011758:	200015c0 	.word	0x200015c0
 801175c:	200015c4 	.word	0x200015c4
 8011760:	20001620 	.word	0x20001620
 8011764:	20001628 	.word	0x20001628
 8011768:	20001610 	.word	0x20001610
 801176c:	20001138 	.word	0x20001138
 8011770:	20001134 	.word	0x20001134
 8011774:	2000161c 	.word	0x2000161c
 8011778:	20001618 	.word	0x20001618

0801177c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801177c:	b480      	push	{r7}
 801177e:	b085      	sub	sp, #20
 8011780:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011782:	4b2a      	ldr	r3, [pc, #168]	; (801182c <vTaskSwitchContext+0xb0>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d003      	beq.n	8011792 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801178a:	4b29      	ldr	r3, [pc, #164]	; (8011830 <vTaskSwitchContext+0xb4>)
 801178c:	2201      	movs	r2, #1
 801178e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011790:	e046      	b.n	8011820 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8011792:	4b27      	ldr	r3, [pc, #156]	; (8011830 <vTaskSwitchContext+0xb4>)
 8011794:	2200      	movs	r2, #0
 8011796:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011798:	4b26      	ldr	r3, [pc, #152]	; (8011834 <vTaskSwitchContext+0xb8>)
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	60fb      	str	r3, [r7, #12]
 801179e:	e010      	b.n	80117c2 <vTaskSwitchContext+0x46>
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d10a      	bne.n	80117bc <vTaskSwitchContext+0x40>
	__asm volatile
 80117a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117aa:	f383 8811 	msr	BASEPRI, r3
 80117ae:	f3bf 8f6f 	isb	sy
 80117b2:	f3bf 8f4f 	dsb	sy
 80117b6:	607b      	str	r3, [r7, #4]
}
 80117b8:	bf00      	nop
 80117ba:	e7fe      	b.n	80117ba <vTaskSwitchContext+0x3e>
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	3b01      	subs	r3, #1
 80117c0:	60fb      	str	r3, [r7, #12]
 80117c2:	491d      	ldr	r1, [pc, #116]	; (8011838 <vTaskSwitchContext+0xbc>)
 80117c4:	68fa      	ldr	r2, [r7, #12]
 80117c6:	4613      	mov	r3, r2
 80117c8:	009b      	lsls	r3, r3, #2
 80117ca:	4413      	add	r3, r2
 80117cc:	009b      	lsls	r3, r3, #2
 80117ce:	440b      	add	r3, r1
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d0e4      	beq.n	80117a0 <vTaskSwitchContext+0x24>
 80117d6:	68fa      	ldr	r2, [r7, #12]
 80117d8:	4613      	mov	r3, r2
 80117da:	009b      	lsls	r3, r3, #2
 80117dc:	4413      	add	r3, r2
 80117de:	009b      	lsls	r3, r3, #2
 80117e0:	4a15      	ldr	r2, [pc, #84]	; (8011838 <vTaskSwitchContext+0xbc>)
 80117e2:	4413      	add	r3, r2
 80117e4:	60bb      	str	r3, [r7, #8]
 80117e6:	68bb      	ldr	r3, [r7, #8]
 80117e8:	685b      	ldr	r3, [r3, #4]
 80117ea:	685a      	ldr	r2, [r3, #4]
 80117ec:	68bb      	ldr	r3, [r7, #8]
 80117ee:	605a      	str	r2, [r3, #4]
 80117f0:	68bb      	ldr	r3, [r7, #8]
 80117f2:	685a      	ldr	r2, [r3, #4]
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	3308      	adds	r3, #8
 80117f8:	429a      	cmp	r2, r3
 80117fa:	d104      	bne.n	8011806 <vTaskSwitchContext+0x8a>
 80117fc:	68bb      	ldr	r3, [r7, #8]
 80117fe:	685b      	ldr	r3, [r3, #4]
 8011800:	685a      	ldr	r2, [r3, #4]
 8011802:	68bb      	ldr	r3, [r7, #8]
 8011804:	605a      	str	r2, [r3, #4]
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	685b      	ldr	r3, [r3, #4]
 801180a:	68db      	ldr	r3, [r3, #12]
 801180c:	4a0b      	ldr	r2, [pc, #44]	; (801183c <vTaskSwitchContext+0xc0>)
 801180e:	6013      	str	r3, [r2, #0]
 8011810:	4a08      	ldr	r2, [pc, #32]	; (8011834 <vTaskSwitchContext+0xb8>)
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011816:	4b09      	ldr	r3, [pc, #36]	; (801183c <vTaskSwitchContext+0xc0>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	3354      	adds	r3, #84	; 0x54
 801181c:	4a08      	ldr	r2, [pc, #32]	; (8011840 <vTaskSwitchContext+0xc4>)
 801181e:	6013      	str	r3, [r2, #0]
}
 8011820:	bf00      	nop
 8011822:	3714      	adds	r7, #20
 8011824:	46bd      	mov	sp, r7
 8011826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182a:	4770      	bx	lr
 801182c:	20001630 	.word	0x20001630
 8011830:	2000161c 	.word	0x2000161c
 8011834:	20001610 	.word	0x20001610
 8011838:	20001138 	.word	0x20001138
 801183c:	20001134 	.word	0x20001134
 8011840:	20000124 	.word	0x20000124

08011844 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b084      	sub	sp, #16
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
 801184c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d10a      	bne.n	801186a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011858:	f383 8811 	msr	BASEPRI, r3
 801185c:	f3bf 8f6f 	isb	sy
 8011860:	f3bf 8f4f 	dsb	sy
 8011864:	60fb      	str	r3, [r7, #12]
}
 8011866:	bf00      	nop
 8011868:	e7fe      	b.n	8011868 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801186a:	4b07      	ldr	r3, [pc, #28]	; (8011888 <vTaskPlaceOnEventList+0x44>)
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	3318      	adds	r3, #24
 8011870:	4619      	mov	r1, r3
 8011872:	6878      	ldr	r0, [r7, #4]
 8011874:	f7fe fb3f 	bl	800fef6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011878:	2101      	movs	r1, #1
 801187a:	6838      	ldr	r0, [r7, #0]
 801187c:	f000 fc34 	bl	80120e8 <prvAddCurrentTaskToDelayedList>
}
 8011880:	bf00      	nop
 8011882:	3710      	adds	r7, #16
 8011884:	46bd      	mov	sp, r7
 8011886:	bd80      	pop	{r7, pc}
 8011888:	20001134 	.word	0x20001134

0801188c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b086      	sub	sp, #24
 8011890:	af00      	add	r7, sp, #0
 8011892:	60f8      	str	r0, [r7, #12]
 8011894:	60b9      	str	r1, [r7, #8]
 8011896:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d10a      	bne.n	80118b4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801189e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a2:	f383 8811 	msr	BASEPRI, r3
 80118a6:	f3bf 8f6f 	isb	sy
 80118aa:	f3bf 8f4f 	dsb	sy
 80118ae:	617b      	str	r3, [r7, #20]
}
 80118b0:	bf00      	nop
 80118b2:	e7fe      	b.n	80118b2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80118b4:	4b11      	ldr	r3, [pc, #68]	; (80118fc <vTaskPlaceOnUnorderedEventList+0x70>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d10a      	bne.n	80118d2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80118bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118c0:	f383 8811 	msr	BASEPRI, r3
 80118c4:	f3bf 8f6f 	isb	sy
 80118c8:	f3bf 8f4f 	dsb	sy
 80118cc:	613b      	str	r3, [r7, #16]
}
 80118ce:	bf00      	nop
 80118d0:	e7fe      	b.n	80118d0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80118d2:	4b0b      	ldr	r3, [pc, #44]	; (8011900 <vTaskPlaceOnUnorderedEventList+0x74>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	68ba      	ldr	r2, [r7, #8]
 80118d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80118dc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80118de:	4b08      	ldr	r3, [pc, #32]	; (8011900 <vTaskPlaceOnUnorderedEventList+0x74>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	3318      	adds	r3, #24
 80118e4:	4619      	mov	r1, r3
 80118e6:	68f8      	ldr	r0, [r7, #12]
 80118e8:	f7fe fae1 	bl	800feae <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80118ec:	2101      	movs	r1, #1
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f000 fbfa 	bl	80120e8 <prvAddCurrentTaskToDelayedList>
}
 80118f4:	bf00      	nop
 80118f6:	3718      	adds	r7, #24
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}
 80118fc:	20001630 	.word	0x20001630
 8011900:	20001134 	.word	0x20001134

08011904 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011904:	b580      	push	{r7, lr}
 8011906:	b086      	sub	sp, #24
 8011908:	af00      	add	r7, sp, #0
 801190a:	60f8      	str	r0, [r7, #12]
 801190c:	60b9      	str	r1, [r7, #8]
 801190e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d10a      	bne.n	801192c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011916:	f04f 0350 	mov.w	r3, #80	; 0x50
 801191a:	f383 8811 	msr	BASEPRI, r3
 801191e:	f3bf 8f6f 	isb	sy
 8011922:	f3bf 8f4f 	dsb	sy
 8011926:	617b      	str	r3, [r7, #20]
}
 8011928:	bf00      	nop
 801192a:	e7fe      	b.n	801192a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801192c:	4b0a      	ldr	r3, [pc, #40]	; (8011958 <vTaskPlaceOnEventListRestricted+0x54>)
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	3318      	adds	r3, #24
 8011932:	4619      	mov	r1, r3
 8011934:	68f8      	ldr	r0, [r7, #12]
 8011936:	f7fe faba 	bl	800feae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d002      	beq.n	8011946 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011940:	f04f 33ff 	mov.w	r3, #4294967295
 8011944:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011946:	6879      	ldr	r1, [r7, #4]
 8011948:	68b8      	ldr	r0, [r7, #8]
 801194a:	f000 fbcd 	bl	80120e8 <prvAddCurrentTaskToDelayedList>
	}
 801194e:	bf00      	nop
 8011950:	3718      	adds	r7, #24
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
 8011956:	bf00      	nop
 8011958:	20001134 	.word	0x20001134

0801195c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b086      	sub	sp, #24
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	68db      	ldr	r3, [r3, #12]
 8011968:	68db      	ldr	r3, [r3, #12]
 801196a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801196c:	693b      	ldr	r3, [r7, #16]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d10a      	bne.n	8011988 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011976:	f383 8811 	msr	BASEPRI, r3
 801197a:	f3bf 8f6f 	isb	sy
 801197e:	f3bf 8f4f 	dsb	sy
 8011982:	60fb      	str	r3, [r7, #12]
}
 8011984:	bf00      	nop
 8011986:	e7fe      	b.n	8011986 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011988:	693b      	ldr	r3, [r7, #16]
 801198a:	3318      	adds	r3, #24
 801198c:	4618      	mov	r0, r3
 801198e:	f7fe faeb 	bl	800ff68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011992:	4b1e      	ldr	r3, [pc, #120]	; (8011a0c <xTaskRemoveFromEventList+0xb0>)
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d11d      	bne.n	80119d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801199a:	693b      	ldr	r3, [r7, #16]
 801199c:	3304      	adds	r3, #4
 801199e:	4618      	mov	r0, r3
 80119a0:	f7fe fae2 	bl	800ff68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80119a4:	693b      	ldr	r3, [r7, #16]
 80119a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119a8:	4b19      	ldr	r3, [pc, #100]	; (8011a10 <xTaskRemoveFromEventList+0xb4>)
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	429a      	cmp	r2, r3
 80119ae:	d903      	bls.n	80119b8 <xTaskRemoveFromEventList+0x5c>
 80119b0:	693b      	ldr	r3, [r7, #16]
 80119b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119b4:	4a16      	ldr	r2, [pc, #88]	; (8011a10 <xTaskRemoveFromEventList+0xb4>)
 80119b6:	6013      	str	r3, [r2, #0]
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119bc:	4613      	mov	r3, r2
 80119be:	009b      	lsls	r3, r3, #2
 80119c0:	4413      	add	r3, r2
 80119c2:	009b      	lsls	r3, r3, #2
 80119c4:	4a13      	ldr	r2, [pc, #76]	; (8011a14 <xTaskRemoveFromEventList+0xb8>)
 80119c6:	441a      	add	r2, r3
 80119c8:	693b      	ldr	r3, [r7, #16]
 80119ca:	3304      	adds	r3, #4
 80119cc:	4619      	mov	r1, r3
 80119ce:	4610      	mov	r0, r2
 80119d0:	f7fe fa6d 	bl	800feae <vListInsertEnd>
 80119d4:	e005      	b.n	80119e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80119d6:	693b      	ldr	r3, [r7, #16]
 80119d8:	3318      	adds	r3, #24
 80119da:	4619      	mov	r1, r3
 80119dc:	480e      	ldr	r0, [pc, #56]	; (8011a18 <xTaskRemoveFromEventList+0xbc>)
 80119de:	f7fe fa66 	bl	800feae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80119e2:	693b      	ldr	r3, [r7, #16]
 80119e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119e6:	4b0d      	ldr	r3, [pc, #52]	; (8011a1c <xTaskRemoveFromEventList+0xc0>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119ec:	429a      	cmp	r2, r3
 80119ee:	d905      	bls.n	80119fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80119f0:	2301      	movs	r3, #1
 80119f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80119f4:	4b0a      	ldr	r3, [pc, #40]	; (8011a20 <xTaskRemoveFromEventList+0xc4>)
 80119f6:	2201      	movs	r2, #1
 80119f8:	601a      	str	r2, [r3, #0]
 80119fa:	e001      	b.n	8011a00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80119fc:	2300      	movs	r3, #0
 80119fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011a00:	697b      	ldr	r3, [r7, #20]
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	3718      	adds	r7, #24
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}
 8011a0a:	bf00      	nop
 8011a0c:	20001630 	.word	0x20001630
 8011a10:	20001610 	.word	0x20001610
 8011a14:	20001138 	.word	0x20001138
 8011a18:	200015c8 	.word	0x200015c8
 8011a1c:	20001134 	.word	0x20001134
 8011a20:	2000161c 	.word	0x2000161c

08011a24 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b086      	sub	sp, #24
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
 8011a2c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8011a2e:	4b29      	ldr	r3, [pc, #164]	; (8011ad4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d10a      	bne.n	8011a4c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8011a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a3a:	f383 8811 	msr	BASEPRI, r3
 8011a3e:	f3bf 8f6f 	isb	sy
 8011a42:	f3bf 8f4f 	dsb	sy
 8011a46:	613b      	str	r3, [r7, #16]
}
 8011a48:	bf00      	nop
 8011a4a:	e7fe      	b.n	8011a4a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	68db      	ldr	r3, [r3, #12]
 8011a5a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8011a5c:	697b      	ldr	r3, [r7, #20]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d10a      	bne.n	8011a78 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8011a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a66:	f383 8811 	msr	BASEPRI, r3
 8011a6a:	f3bf 8f6f 	isb	sy
 8011a6e:	f3bf 8f4f 	dsb	sy
 8011a72:	60fb      	str	r3, [r7, #12]
}
 8011a74:	bf00      	nop
 8011a76:	e7fe      	b.n	8011a76 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8011a78:	6878      	ldr	r0, [r7, #4]
 8011a7a:	f7fe fa75 	bl	800ff68 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011a7e:	697b      	ldr	r3, [r7, #20]
 8011a80:	3304      	adds	r3, #4
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7fe fa70 	bl	800ff68 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8011a88:	697b      	ldr	r3, [r7, #20]
 8011a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a8c:	4b12      	ldr	r3, [pc, #72]	; (8011ad8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	429a      	cmp	r2, r3
 8011a92:	d903      	bls.n	8011a9c <vTaskRemoveFromUnorderedEventList+0x78>
 8011a94:	697b      	ldr	r3, [r7, #20]
 8011a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a98:	4a0f      	ldr	r2, [pc, #60]	; (8011ad8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8011a9a:	6013      	str	r3, [r2, #0]
 8011a9c:	697b      	ldr	r3, [r7, #20]
 8011a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aa0:	4613      	mov	r3, r2
 8011aa2:	009b      	lsls	r3, r3, #2
 8011aa4:	4413      	add	r3, r2
 8011aa6:	009b      	lsls	r3, r3, #2
 8011aa8:	4a0c      	ldr	r2, [pc, #48]	; (8011adc <vTaskRemoveFromUnorderedEventList+0xb8>)
 8011aaa:	441a      	add	r2, r3
 8011aac:	697b      	ldr	r3, [r7, #20]
 8011aae:	3304      	adds	r3, #4
 8011ab0:	4619      	mov	r1, r3
 8011ab2:	4610      	mov	r0, r2
 8011ab4:	f7fe f9fb 	bl	800feae <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011ab8:	697b      	ldr	r3, [r7, #20]
 8011aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011abc:	4b08      	ldr	r3, [pc, #32]	; (8011ae0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d902      	bls.n	8011acc <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8011ac6:	4b07      	ldr	r3, [pc, #28]	; (8011ae4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8011ac8:	2201      	movs	r2, #1
 8011aca:	601a      	str	r2, [r3, #0]
	}
}
 8011acc:	bf00      	nop
 8011ace:	3718      	adds	r7, #24
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}
 8011ad4:	20001630 	.word	0x20001630
 8011ad8:	20001610 	.word	0x20001610
 8011adc:	20001138 	.word	0x20001138
 8011ae0:	20001134 	.word	0x20001134
 8011ae4:	2000161c 	.word	0x2000161c

08011ae8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011ae8:	b480      	push	{r7}
 8011aea:	b083      	sub	sp, #12
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011af0:	4b06      	ldr	r3, [pc, #24]	; (8011b0c <vTaskInternalSetTimeOutState+0x24>)
 8011af2:	681a      	ldr	r2, [r3, #0]
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011af8:	4b05      	ldr	r3, [pc, #20]	; (8011b10 <vTaskInternalSetTimeOutState+0x28>)
 8011afa:	681a      	ldr	r2, [r3, #0]
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	605a      	str	r2, [r3, #4]
}
 8011b00:	bf00      	nop
 8011b02:	370c      	adds	r7, #12
 8011b04:	46bd      	mov	sp, r7
 8011b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0a:	4770      	bx	lr
 8011b0c:	20001620 	.word	0x20001620
 8011b10:	2000160c 	.word	0x2000160c

08011b14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b088      	sub	sp, #32
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d10a      	bne.n	8011b3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b28:	f383 8811 	msr	BASEPRI, r3
 8011b2c:	f3bf 8f6f 	isb	sy
 8011b30:	f3bf 8f4f 	dsb	sy
 8011b34:	613b      	str	r3, [r7, #16]
}
 8011b36:	bf00      	nop
 8011b38:	e7fe      	b.n	8011b38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d10a      	bne.n	8011b56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b44:	f383 8811 	msr	BASEPRI, r3
 8011b48:	f3bf 8f6f 	isb	sy
 8011b4c:	f3bf 8f4f 	dsb	sy
 8011b50:	60fb      	str	r3, [r7, #12]
}
 8011b52:	bf00      	nop
 8011b54:	e7fe      	b.n	8011b54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011b56:	f001 f86d 	bl	8012c34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011b5a:	4b1d      	ldr	r3, [pc, #116]	; (8011bd0 <xTaskCheckForTimeOut+0xbc>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	685b      	ldr	r3, [r3, #4]
 8011b64:	69ba      	ldr	r2, [r7, #24]
 8011b66:	1ad3      	subs	r3, r2, r3
 8011b68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b72:	d102      	bne.n	8011b7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011b74:	2300      	movs	r3, #0
 8011b76:	61fb      	str	r3, [r7, #28]
 8011b78:	e023      	b.n	8011bc2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	681a      	ldr	r2, [r3, #0]
 8011b7e:	4b15      	ldr	r3, [pc, #84]	; (8011bd4 <xTaskCheckForTimeOut+0xc0>)
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	429a      	cmp	r2, r3
 8011b84:	d007      	beq.n	8011b96 <xTaskCheckForTimeOut+0x82>
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	685b      	ldr	r3, [r3, #4]
 8011b8a:	69ba      	ldr	r2, [r7, #24]
 8011b8c:	429a      	cmp	r2, r3
 8011b8e:	d302      	bcc.n	8011b96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011b90:	2301      	movs	r3, #1
 8011b92:	61fb      	str	r3, [r7, #28]
 8011b94:	e015      	b.n	8011bc2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	697a      	ldr	r2, [r7, #20]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d20b      	bcs.n	8011bb8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	681a      	ldr	r2, [r3, #0]
 8011ba4:	697b      	ldr	r3, [r7, #20]
 8011ba6:	1ad2      	subs	r2, r2, r3
 8011ba8:	683b      	ldr	r3, [r7, #0]
 8011baa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011bac:	6878      	ldr	r0, [r7, #4]
 8011bae:	f7ff ff9b 	bl	8011ae8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	61fb      	str	r3, [r7, #28]
 8011bb6:	e004      	b.n	8011bc2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011bb8:	683b      	ldr	r3, [r7, #0]
 8011bba:	2200      	movs	r2, #0
 8011bbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011bbe:	2301      	movs	r3, #1
 8011bc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011bc2:	f001 f867 	bl	8012c94 <vPortExitCritical>

	return xReturn;
 8011bc6:	69fb      	ldr	r3, [r7, #28]
}
 8011bc8:	4618      	mov	r0, r3
 8011bca:	3720      	adds	r7, #32
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd80      	pop	{r7, pc}
 8011bd0:	2000160c 	.word	0x2000160c
 8011bd4:	20001620 	.word	0x20001620

08011bd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011bd8:	b480      	push	{r7}
 8011bda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011bdc:	4b03      	ldr	r3, [pc, #12]	; (8011bec <vTaskMissedYield+0x14>)
 8011bde:	2201      	movs	r2, #1
 8011be0:	601a      	str	r2, [r3, #0]
}
 8011be2:	bf00      	nop
 8011be4:	46bd      	mov	sp, r7
 8011be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bea:	4770      	bx	lr
 8011bec:	2000161c 	.word	0x2000161c

08011bf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b082      	sub	sp, #8
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011bf8:	f000 f852 	bl	8011ca0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011bfc:	4b06      	ldr	r3, [pc, #24]	; (8011c18 <prvIdleTask+0x28>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	2b01      	cmp	r3, #1
 8011c02:	d9f9      	bls.n	8011bf8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011c04:	4b05      	ldr	r3, [pc, #20]	; (8011c1c <prvIdleTask+0x2c>)
 8011c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c0a:	601a      	str	r2, [r3, #0]
 8011c0c:	f3bf 8f4f 	dsb	sy
 8011c10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011c14:	e7f0      	b.n	8011bf8 <prvIdleTask+0x8>
 8011c16:	bf00      	nop
 8011c18:	20001138 	.word	0x20001138
 8011c1c:	e000ed04 	.word	0xe000ed04

08011c20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b082      	sub	sp, #8
 8011c24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011c26:	2300      	movs	r3, #0
 8011c28:	607b      	str	r3, [r7, #4]
 8011c2a:	e00c      	b.n	8011c46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011c2c:	687a      	ldr	r2, [r7, #4]
 8011c2e:	4613      	mov	r3, r2
 8011c30:	009b      	lsls	r3, r3, #2
 8011c32:	4413      	add	r3, r2
 8011c34:	009b      	lsls	r3, r3, #2
 8011c36:	4a12      	ldr	r2, [pc, #72]	; (8011c80 <prvInitialiseTaskLists+0x60>)
 8011c38:	4413      	add	r3, r2
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	f7fe f90a 	bl	800fe54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	3301      	adds	r3, #1
 8011c44:	607b      	str	r3, [r7, #4]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2b37      	cmp	r3, #55	; 0x37
 8011c4a:	d9ef      	bls.n	8011c2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011c4c:	480d      	ldr	r0, [pc, #52]	; (8011c84 <prvInitialiseTaskLists+0x64>)
 8011c4e:	f7fe f901 	bl	800fe54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011c52:	480d      	ldr	r0, [pc, #52]	; (8011c88 <prvInitialiseTaskLists+0x68>)
 8011c54:	f7fe f8fe 	bl	800fe54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011c58:	480c      	ldr	r0, [pc, #48]	; (8011c8c <prvInitialiseTaskLists+0x6c>)
 8011c5a:	f7fe f8fb 	bl	800fe54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011c5e:	480c      	ldr	r0, [pc, #48]	; (8011c90 <prvInitialiseTaskLists+0x70>)
 8011c60:	f7fe f8f8 	bl	800fe54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011c64:	480b      	ldr	r0, [pc, #44]	; (8011c94 <prvInitialiseTaskLists+0x74>)
 8011c66:	f7fe f8f5 	bl	800fe54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011c6a:	4b0b      	ldr	r3, [pc, #44]	; (8011c98 <prvInitialiseTaskLists+0x78>)
 8011c6c:	4a05      	ldr	r2, [pc, #20]	; (8011c84 <prvInitialiseTaskLists+0x64>)
 8011c6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011c70:	4b0a      	ldr	r3, [pc, #40]	; (8011c9c <prvInitialiseTaskLists+0x7c>)
 8011c72:	4a05      	ldr	r2, [pc, #20]	; (8011c88 <prvInitialiseTaskLists+0x68>)
 8011c74:	601a      	str	r2, [r3, #0]
}
 8011c76:	bf00      	nop
 8011c78:	3708      	adds	r7, #8
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}
 8011c7e:	bf00      	nop
 8011c80:	20001138 	.word	0x20001138
 8011c84:	20001598 	.word	0x20001598
 8011c88:	200015ac 	.word	0x200015ac
 8011c8c:	200015c8 	.word	0x200015c8
 8011c90:	200015dc 	.word	0x200015dc
 8011c94:	200015f4 	.word	0x200015f4
 8011c98:	200015c0 	.word	0x200015c0
 8011c9c:	200015c4 	.word	0x200015c4

08011ca0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b082      	sub	sp, #8
 8011ca4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011ca6:	e019      	b.n	8011cdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011ca8:	f000 ffc4 	bl	8012c34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011cac:	4b10      	ldr	r3, [pc, #64]	; (8011cf0 <prvCheckTasksWaitingTermination+0x50>)
 8011cae:	68db      	ldr	r3, [r3, #12]
 8011cb0:	68db      	ldr	r3, [r3, #12]
 8011cb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	3304      	adds	r3, #4
 8011cb8:	4618      	mov	r0, r3
 8011cba:	f7fe f955 	bl	800ff68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011cbe:	4b0d      	ldr	r3, [pc, #52]	; (8011cf4 <prvCheckTasksWaitingTermination+0x54>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	3b01      	subs	r3, #1
 8011cc4:	4a0b      	ldr	r2, [pc, #44]	; (8011cf4 <prvCheckTasksWaitingTermination+0x54>)
 8011cc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011cc8:	4b0b      	ldr	r3, [pc, #44]	; (8011cf8 <prvCheckTasksWaitingTermination+0x58>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	3b01      	subs	r3, #1
 8011cce:	4a0a      	ldr	r2, [pc, #40]	; (8011cf8 <prvCheckTasksWaitingTermination+0x58>)
 8011cd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011cd2:	f000 ffdf 	bl	8012c94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011cd6:	6878      	ldr	r0, [r7, #4]
 8011cd8:	f000 f810 	bl	8011cfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011cdc:	4b06      	ldr	r3, [pc, #24]	; (8011cf8 <prvCheckTasksWaitingTermination+0x58>)
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d1e1      	bne.n	8011ca8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011ce4:	bf00      	nop
 8011ce6:	bf00      	nop
 8011ce8:	3708      	adds	r7, #8
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}
 8011cee:	bf00      	nop
 8011cf0:	200015dc 	.word	0x200015dc
 8011cf4:	20001608 	.word	0x20001608
 8011cf8:	200015f0 	.word	0x200015f0

08011cfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b084      	sub	sp, #16
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	3354      	adds	r3, #84	; 0x54
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f002 ff85 	bl	8014c18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d108      	bne.n	8011d2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f001 f977 	bl	8013010 <vPortFree>
				vPortFree( pxTCB );
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	f001 f974 	bl	8013010 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011d28:	e018      	b.n	8011d5c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011d30:	2b01      	cmp	r3, #1
 8011d32:	d103      	bne.n	8011d3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f001 f96b 	bl	8013010 <vPortFree>
	}
 8011d3a:	e00f      	b.n	8011d5c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011d42:	2b02      	cmp	r3, #2
 8011d44:	d00a      	beq.n	8011d5c <prvDeleteTCB+0x60>
	__asm volatile
 8011d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d4a:	f383 8811 	msr	BASEPRI, r3
 8011d4e:	f3bf 8f6f 	isb	sy
 8011d52:	f3bf 8f4f 	dsb	sy
 8011d56:	60fb      	str	r3, [r7, #12]
}
 8011d58:	bf00      	nop
 8011d5a:	e7fe      	b.n	8011d5a <prvDeleteTCB+0x5e>
	}
 8011d5c:	bf00      	nop
 8011d5e:	3710      	adds	r7, #16
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd80      	pop	{r7, pc}

08011d64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011d64:	b480      	push	{r7}
 8011d66:	b083      	sub	sp, #12
 8011d68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011d6a:	4b0c      	ldr	r3, [pc, #48]	; (8011d9c <prvResetNextTaskUnblockTime+0x38>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d104      	bne.n	8011d7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011d74:	4b0a      	ldr	r3, [pc, #40]	; (8011da0 <prvResetNextTaskUnblockTime+0x3c>)
 8011d76:	f04f 32ff 	mov.w	r2, #4294967295
 8011d7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011d7c:	e008      	b.n	8011d90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d7e:	4b07      	ldr	r3, [pc, #28]	; (8011d9c <prvResetNextTaskUnblockTime+0x38>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	68db      	ldr	r3, [r3, #12]
 8011d84:	68db      	ldr	r3, [r3, #12]
 8011d86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	685b      	ldr	r3, [r3, #4]
 8011d8c:	4a04      	ldr	r2, [pc, #16]	; (8011da0 <prvResetNextTaskUnblockTime+0x3c>)
 8011d8e:	6013      	str	r3, [r2, #0]
}
 8011d90:	bf00      	nop
 8011d92:	370c      	adds	r7, #12
 8011d94:	46bd      	mov	sp, r7
 8011d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9a:	4770      	bx	lr
 8011d9c:	200015c0 	.word	0x200015c0
 8011da0:	20001628 	.word	0x20001628

08011da4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011da4:	b480      	push	{r7}
 8011da6:	b083      	sub	sp, #12
 8011da8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011daa:	4b0b      	ldr	r3, [pc, #44]	; (8011dd8 <xTaskGetSchedulerState+0x34>)
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d102      	bne.n	8011db8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011db2:	2301      	movs	r3, #1
 8011db4:	607b      	str	r3, [r7, #4]
 8011db6:	e008      	b.n	8011dca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011db8:	4b08      	ldr	r3, [pc, #32]	; (8011ddc <xTaskGetSchedulerState+0x38>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d102      	bne.n	8011dc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011dc0:	2302      	movs	r3, #2
 8011dc2:	607b      	str	r3, [r7, #4]
 8011dc4:	e001      	b.n	8011dca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011dca:	687b      	ldr	r3, [r7, #4]
	}
 8011dcc:	4618      	mov	r0, r3
 8011dce:	370c      	adds	r7, #12
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd6:	4770      	bx	lr
 8011dd8:	20001614 	.word	0x20001614
 8011ddc:	20001630 	.word	0x20001630

08011de0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b084      	sub	sp, #16
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011dec:	2300      	movs	r3, #0
 8011dee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d051      	beq.n	8011e9a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011df6:	68bb      	ldr	r3, [r7, #8]
 8011df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dfa:	4b2a      	ldr	r3, [pc, #168]	; (8011ea4 <xTaskPriorityInherit+0xc4>)
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e00:	429a      	cmp	r2, r3
 8011e02:	d241      	bcs.n	8011e88 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011e04:	68bb      	ldr	r3, [r7, #8]
 8011e06:	699b      	ldr	r3, [r3, #24]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	db06      	blt.n	8011e1a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e0c:	4b25      	ldr	r3, [pc, #148]	; (8011ea4 <xTaskPriorityInherit+0xc4>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011e1a:	68bb      	ldr	r3, [r7, #8]
 8011e1c:	6959      	ldr	r1, [r3, #20]
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e22:	4613      	mov	r3, r2
 8011e24:	009b      	lsls	r3, r3, #2
 8011e26:	4413      	add	r3, r2
 8011e28:	009b      	lsls	r3, r3, #2
 8011e2a:	4a1f      	ldr	r2, [pc, #124]	; (8011ea8 <xTaskPriorityInherit+0xc8>)
 8011e2c:	4413      	add	r3, r2
 8011e2e:	4299      	cmp	r1, r3
 8011e30:	d122      	bne.n	8011e78 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	3304      	adds	r3, #4
 8011e36:	4618      	mov	r0, r3
 8011e38:	f7fe f896 	bl	800ff68 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011e3c:	4b19      	ldr	r3, [pc, #100]	; (8011ea4 <xTaskPriorityInherit+0xc4>)
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e42:	68bb      	ldr	r3, [r7, #8]
 8011e44:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011e46:	68bb      	ldr	r3, [r7, #8]
 8011e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e4a:	4b18      	ldr	r3, [pc, #96]	; (8011eac <xTaskPriorityInherit+0xcc>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	d903      	bls.n	8011e5a <xTaskPriorityInherit+0x7a>
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e56:	4a15      	ldr	r2, [pc, #84]	; (8011eac <xTaskPriorityInherit+0xcc>)
 8011e58:	6013      	str	r3, [r2, #0]
 8011e5a:	68bb      	ldr	r3, [r7, #8]
 8011e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e5e:	4613      	mov	r3, r2
 8011e60:	009b      	lsls	r3, r3, #2
 8011e62:	4413      	add	r3, r2
 8011e64:	009b      	lsls	r3, r3, #2
 8011e66:	4a10      	ldr	r2, [pc, #64]	; (8011ea8 <xTaskPriorityInherit+0xc8>)
 8011e68:	441a      	add	r2, r3
 8011e6a:	68bb      	ldr	r3, [r7, #8]
 8011e6c:	3304      	adds	r3, #4
 8011e6e:	4619      	mov	r1, r3
 8011e70:	4610      	mov	r0, r2
 8011e72:	f7fe f81c 	bl	800feae <vListInsertEnd>
 8011e76:	e004      	b.n	8011e82 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011e78:	4b0a      	ldr	r3, [pc, #40]	; (8011ea4 <xTaskPriorityInherit+0xc4>)
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e7e:	68bb      	ldr	r3, [r7, #8]
 8011e80:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011e82:	2301      	movs	r3, #1
 8011e84:	60fb      	str	r3, [r7, #12]
 8011e86:	e008      	b.n	8011e9a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011e88:	68bb      	ldr	r3, [r7, #8]
 8011e8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011e8c:	4b05      	ldr	r3, [pc, #20]	; (8011ea4 <xTaskPriorityInherit+0xc4>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e92:	429a      	cmp	r2, r3
 8011e94:	d201      	bcs.n	8011e9a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011e96:	2301      	movs	r3, #1
 8011e98:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011e9a:	68fb      	ldr	r3, [r7, #12]
	}
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	3710      	adds	r7, #16
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}
 8011ea4:	20001134 	.word	0x20001134
 8011ea8:	20001138 	.word	0x20001138
 8011eac:	20001610 	.word	0x20001610

08011eb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b086      	sub	sp, #24
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d056      	beq.n	8011f74 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011ec6:	4b2e      	ldr	r3, [pc, #184]	; (8011f80 <xTaskPriorityDisinherit+0xd0>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	693a      	ldr	r2, [r7, #16]
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d00a      	beq.n	8011ee6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ed4:	f383 8811 	msr	BASEPRI, r3
 8011ed8:	f3bf 8f6f 	isb	sy
 8011edc:	f3bf 8f4f 	dsb	sy
 8011ee0:	60fb      	str	r3, [r7, #12]
}
 8011ee2:	bf00      	nop
 8011ee4:	e7fe      	b.n	8011ee4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011ee6:	693b      	ldr	r3, [r7, #16]
 8011ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d10a      	bne.n	8011f04 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ef2:	f383 8811 	msr	BASEPRI, r3
 8011ef6:	f3bf 8f6f 	isb	sy
 8011efa:	f3bf 8f4f 	dsb	sy
 8011efe:	60bb      	str	r3, [r7, #8]
}
 8011f00:	bf00      	nop
 8011f02:	e7fe      	b.n	8011f02 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011f04:	693b      	ldr	r3, [r7, #16]
 8011f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f08:	1e5a      	subs	r2, r3, #1
 8011f0a:	693b      	ldr	r3, [r7, #16]
 8011f0c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011f0e:	693b      	ldr	r3, [r7, #16]
 8011f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f12:	693b      	ldr	r3, [r7, #16]
 8011f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f16:	429a      	cmp	r2, r3
 8011f18:	d02c      	beq.n	8011f74 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011f1a:	693b      	ldr	r3, [r7, #16]
 8011f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d128      	bne.n	8011f74 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f22:	693b      	ldr	r3, [r7, #16]
 8011f24:	3304      	adds	r3, #4
 8011f26:	4618      	mov	r0, r3
 8011f28:	f7fe f81e 	bl	800ff68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011f2c:	693b      	ldr	r3, [r7, #16]
 8011f2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011f30:	693b      	ldr	r3, [r7, #16]
 8011f32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f34:	693b      	ldr	r3, [r7, #16]
 8011f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011f3c:	693b      	ldr	r3, [r7, #16]
 8011f3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011f40:	693b      	ldr	r3, [r7, #16]
 8011f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f44:	4b0f      	ldr	r3, [pc, #60]	; (8011f84 <xTaskPriorityDisinherit+0xd4>)
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	429a      	cmp	r2, r3
 8011f4a:	d903      	bls.n	8011f54 <xTaskPriorityDisinherit+0xa4>
 8011f4c:	693b      	ldr	r3, [r7, #16]
 8011f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f50:	4a0c      	ldr	r2, [pc, #48]	; (8011f84 <xTaskPriorityDisinherit+0xd4>)
 8011f52:	6013      	str	r3, [r2, #0]
 8011f54:	693b      	ldr	r3, [r7, #16]
 8011f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f58:	4613      	mov	r3, r2
 8011f5a:	009b      	lsls	r3, r3, #2
 8011f5c:	4413      	add	r3, r2
 8011f5e:	009b      	lsls	r3, r3, #2
 8011f60:	4a09      	ldr	r2, [pc, #36]	; (8011f88 <xTaskPriorityDisinherit+0xd8>)
 8011f62:	441a      	add	r2, r3
 8011f64:	693b      	ldr	r3, [r7, #16]
 8011f66:	3304      	adds	r3, #4
 8011f68:	4619      	mov	r1, r3
 8011f6a:	4610      	mov	r0, r2
 8011f6c:	f7fd ff9f 	bl	800feae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011f70:	2301      	movs	r3, #1
 8011f72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011f74:	697b      	ldr	r3, [r7, #20]
	}
 8011f76:	4618      	mov	r0, r3
 8011f78:	3718      	adds	r7, #24
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bd80      	pop	{r7, pc}
 8011f7e:	bf00      	nop
 8011f80:	20001134 	.word	0x20001134
 8011f84:	20001610 	.word	0x20001610
 8011f88:	20001138 	.word	0x20001138

08011f8c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b088      	sub	sp, #32
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
 8011f94:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011f9a:	2301      	movs	r3, #1
 8011f9c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d06a      	beq.n	801207a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011fa4:	69bb      	ldr	r3, [r7, #24]
 8011fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d10a      	bne.n	8011fc2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fb0:	f383 8811 	msr	BASEPRI, r3
 8011fb4:	f3bf 8f6f 	isb	sy
 8011fb8:	f3bf 8f4f 	dsb	sy
 8011fbc:	60fb      	str	r3, [r7, #12]
}
 8011fbe:	bf00      	nop
 8011fc0:	e7fe      	b.n	8011fc0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011fc2:	69bb      	ldr	r3, [r7, #24]
 8011fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011fc6:	683a      	ldr	r2, [r7, #0]
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	d902      	bls.n	8011fd2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011fcc:	683b      	ldr	r3, [r7, #0]
 8011fce:	61fb      	str	r3, [r7, #28]
 8011fd0:	e002      	b.n	8011fd8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011fd2:	69bb      	ldr	r3, [r7, #24]
 8011fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011fd6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011fd8:	69bb      	ldr	r3, [r7, #24]
 8011fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fdc:	69fa      	ldr	r2, [r7, #28]
 8011fde:	429a      	cmp	r2, r3
 8011fe0:	d04b      	beq.n	801207a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011fe2:	69bb      	ldr	r3, [r7, #24]
 8011fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011fe6:	697a      	ldr	r2, [r7, #20]
 8011fe8:	429a      	cmp	r2, r3
 8011fea:	d146      	bne.n	801207a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011fec:	4b25      	ldr	r3, [pc, #148]	; (8012084 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	69ba      	ldr	r2, [r7, #24]
 8011ff2:	429a      	cmp	r2, r3
 8011ff4:	d10a      	bne.n	801200c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ffa:	f383 8811 	msr	BASEPRI, r3
 8011ffe:	f3bf 8f6f 	isb	sy
 8012002:	f3bf 8f4f 	dsb	sy
 8012006:	60bb      	str	r3, [r7, #8]
}
 8012008:	bf00      	nop
 801200a:	e7fe      	b.n	801200a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801200c:	69bb      	ldr	r3, [r7, #24]
 801200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012010:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012012:	69bb      	ldr	r3, [r7, #24]
 8012014:	69fa      	ldr	r2, [r7, #28]
 8012016:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012018:	69bb      	ldr	r3, [r7, #24]
 801201a:	699b      	ldr	r3, [r3, #24]
 801201c:	2b00      	cmp	r3, #0
 801201e:	db04      	blt.n	801202a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012020:	69fb      	ldr	r3, [r7, #28]
 8012022:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012026:	69bb      	ldr	r3, [r7, #24]
 8012028:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801202a:	69bb      	ldr	r3, [r7, #24]
 801202c:	6959      	ldr	r1, [r3, #20]
 801202e:	693a      	ldr	r2, [r7, #16]
 8012030:	4613      	mov	r3, r2
 8012032:	009b      	lsls	r3, r3, #2
 8012034:	4413      	add	r3, r2
 8012036:	009b      	lsls	r3, r3, #2
 8012038:	4a13      	ldr	r2, [pc, #76]	; (8012088 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801203a:	4413      	add	r3, r2
 801203c:	4299      	cmp	r1, r3
 801203e:	d11c      	bne.n	801207a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012040:	69bb      	ldr	r3, [r7, #24]
 8012042:	3304      	adds	r3, #4
 8012044:	4618      	mov	r0, r3
 8012046:	f7fd ff8f 	bl	800ff68 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801204a:	69bb      	ldr	r3, [r7, #24]
 801204c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801204e:	4b0f      	ldr	r3, [pc, #60]	; (801208c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	429a      	cmp	r2, r3
 8012054:	d903      	bls.n	801205e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8012056:	69bb      	ldr	r3, [r7, #24]
 8012058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801205a:	4a0c      	ldr	r2, [pc, #48]	; (801208c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801205c:	6013      	str	r3, [r2, #0]
 801205e:	69bb      	ldr	r3, [r7, #24]
 8012060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012062:	4613      	mov	r3, r2
 8012064:	009b      	lsls	r3, r3, #2
 8012066:	4413      	add	r3, r2
 8012068:	009b      	lsls	r3, r3, #2
 801206a:	4a07      	ldr	r2, [pc, #28]	; (8012088 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801206c:	441a      	add	r2, r3
 801206e:	69bb      	ldr	r3, [r7, #24]
 8012070:	3304      	adds	r3, #4
 8012072:	4619      	mov	r1, r3
 8012074:	4610      	mov	r0, r2
 8012076:	f7fd ff1a 	bl	800feae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801207a:	bf00      	nop
 801207c:	3720      	adds	r7, #32
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}
 8012082:	bf00      	nop
 8012084:	20001134 	.word	0x20001134
 8012088:	20001138 	.word	0x20001138
 801208c:	20001610 	.word	0x20001610

08012090 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8012090:	b480      	push	{r7}
 8012092:	b083      	sub	sp, #12
 8012094:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8012096:	4b09      	ldr	r3, [pc, #36]	; (80120bc <uxTaskResetEventItemValue+0x2c>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	699b      	ldr	r3, [r3, #24]
 801209c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801209e:	4b07      	ldr	r3, [pc, #28]	; (80120bc <uxTaskResetEventItemValue+0x2c>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120a4:	4b05      	ldr	r3, [pc, #20]	; (80120bc <uxTaskResetEventItemValue+0x2c>)
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80120ac:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80120ae:	687b      	ldr	r3, [r7, #4]
}
 80120b0:	4618      	mov	r0, r3
 80120b2:	370c      	adds	r7, #12
 80120b4:	46bd      	mov	sp, r7
 80120b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ba:	4770      	bx	lr
 80120bc:	20001134 	.word	0x20001134

080120c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80120c0:	b480      	push	{r7}
 80120c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80120c4:	4b07      	ldr	r3, [pc, #28]	; (80120e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d004      	beq.n	80120d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80120cc:	4b05      	ldr	r3, [pc, #20]	; (80120e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80120d2:	3201      	adds	r2, #1
 80120d4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80120d6:	4b03      	ldr	r3, [pc, #12]	; (80120e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80120d8:	681b      	ldr	r3, [r3, #0]
	}
 80120da:	4618      	mov	r0, r3
 80120dc:	46bd      	mov	sp, r7
 80120de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e2:	4770      	bx	lr
 80120e4:	20001134 	.word	0x20001134

080120e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b084      	sub	sp, #16
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
 80120f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80120f2:	4b21      	ldr	r3, [pc, #132]	; (8012178 <prvAddCurrentTaskToDelayedList+0x90>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80120f8:	4b20      	ldr	r3, [pc, #128]	; (801217c <prvAddCurrentTaskToDelayedList+0x94>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	3304      	adds	r3, #4
 80120fe:	4618      	mov	r0, r3
 8012100:	f7fd ff32 	bl	800ff68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f1b3 3fff 	cmp.w	r3, #4294967295
 801210a:	d10a      	bne.n	8012122 <prvAddCurrentTaskToDelayedList+0x3a>
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d007      	beq.n	8012122 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012112:	4b1a      	ldr	r3, [pc, #104]	; (801217c <prvAddCurrentTaskToDelayedList+0x94>)
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	3304      	adds	r3, #4
 8012118:	4619      	mov	r1, r3
 801211a:	4819      	ldr	r0, [pc, #100]	; (8012180 <prvAddCurrentTaskToDelayedList+0x98>)
 801211c:	f7fd fec7 	bl	800feae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012120:	e026      	b.n	8012170 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012122:	68fa      	ldr	r2, [r7, #12]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	4413      	add	r3, r2
 8012128:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801212a:	4b14      	ldr	r3, [pc, #80]	; (801217c <prvAddCurrentTaskToDelayedList+0x94>)
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	68ba      	ldr	r2, [r7, #8]
 8012130:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012132:	68ba      	ldr	r2, [r7, #8]
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	429a      	cmp	r2, r3
 8012138:	d209      	bcs.n	801214e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801213a:	4b12      	ldr	r3, [pc, #72]	; (8012184 <prvAddCurrentTaskToDelayedList+0x9c>)
 801213c:	681a      	ldr	r2, [r3, #0]
 801213e:	4b0f      	ldr	r3, [pc, #60]	; (801217c <prvAddCurrentTaskToDelayedList+0x94>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	3304      	adds	r3, #4
 8012144:	4619      	mov	r1, r3
 8012146:	4610      	mov	r0, r2
 8012148:	f7fd fed5 	bl	800fef6 <vListInsert>
}
 801214c:	e010      	b.n	8012170 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801214e:	4b0e      	ldr	r3, [pc, #56]	; (8012188 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012150:	681a      	ldr	r2, [r3, #0]
 8012152:	4b0a      	ldr	r3, [pc, #40]	; (801217c <prvAddCurrentTaskToDelayedList+0x94>)
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	3304      	adds	r3, #4
 8012158:	4619      	mov	r1, r3
 801215a:	4610      	mov	r0, r2
 801215c:	f7fd fecb 	bl	800fef6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012160:	4b0a      	ldr	r3, [pc, #40]	; (801218c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	68ba      	ldr	r2, [r7, #8]
 8012166:	429a      	cmp	r2, r3
 8012168:	d202      	bcs.n	8012170 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801216a:	4a08      	ldr	r2, [pc, #32]	; (801218c <prvAddCurrentTaskToDelayedList+0xa4>)
 801216c:	68bb      	ldr	r3, [r7, #8]
 801216e:	6013      	str	r3, [r2, #0]
}
 8012170:	bf00      	nop
 8012172:	3710      	adds	r7, #16
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}
 8012178:	2000160c 	.word	0x2000160c
 801217c:	20001134 	.word	0x20001134
 8012180:	200015f4 	.word	0x200015f4
 8012184:	200015c4 	.word	0x200015c4
 8012188:	200015c0 	.word	0x200015c0
 801218c:	20001628 	.word	0x20001628

08012190 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b08a      	sub	sp, #40	; 0x28
 8012194:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012196:	2300      	movs	r3, #0
 8012198:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801219a:	f000 fba1 	bl	80128e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801219e:	4b1c      	ldr	r3, [pc, #112]	; (8012210 <xTimerCreateTimerTask+0x80>)
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d021      	beq.n	80121ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80121a6:	2300      	movs	r3, #0
 80121a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80121aa:	2300      	movs	r3, #0
 80121ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80121ae:	1d3a      	adds	r2, r7, #4
 80121b0:	f107 0108 	add.w	r1, r7, #8
 80121b4:	f107 030c 	add.w	r3, r7, #12
 80121b8:	4618      	mov	r0, r3
 80121ba:	f7fd fc43 	bl	800fa44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80121be:	6879      	ldr	r1, [r7, #4]
 80121c0:	68bb      	ldr	r3, [r7, #8]
 80121c2:	68fa      	ldr	r2, [r7, #12]
 80121c4:	9202      	str	r2, [sp, #8]
 80121c6:	9301      	str	r3, [sp, #4]
 80121c8:	2302      	movs	r3, #2
 80121ca:	9300      	str	r3, [sp, #0]
 80121cc:	2300      	movs	r3, #0
 80121ce:	460a      	mov	r2, r1
 80121d0:	4910      	ldr	r1, [pc, #64]	; (8012214 <xTimerCreateTimerTask+0x84>)
 80121d2:	4811      	ldr	r0, [pc, #68]	; (8012218 <xTimerCreateTimerTask+0x88>)
 80121d4:	f7fe ff00 	bl	8010fd8 <xTaskCreateStatic>
 80121d8:	4603      	mov	r3, r0
 80121da:	4a10      	ldr	r2, [pc, #64]	; (801221c <xTimerCreateTimerTask+0x8c>)
 80121dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80121de:	4b0f      	ldr	r3, [pc, #60]	; (801221c <xTimerCreateTimerTask+0x8c>)
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d001      	beq.n	80121ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80121e6:	2301      	movs	r3, #1
 80121e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80121ea:	697b      	ldr	r3, [r7, #20]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d10a      	bne.n	8012206 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80121f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121f4:	f383 8811 	msr	BASEPRI, r3
 80121f8:	f3bf 8f6f 	isb	sy
 80121fc:	f3bf 8f4f 	dsb	sy
 8012200:	613b      	str	r3, [r7, #16]
}
 8012202:	bf00      	nop
 8012204:	e7fe      	b.n	8012204 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012206:	697b      	ldr	r3, [r7, #20]
}
 8012208:	4618      	mov	r0, r3
 801220a:	3718      	adds	r7, #24
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}
 8012210:	20001664 	.word	0x20001664
 8012214:	08016e44 	.word	0x08016e44
 8012218:	08012489 	.word	0x08012489
 801221c:	20001668 	.word	0x20001668

08012220 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8012220:	b580      	push	{r7, lr}
 8012222:	b088      	sub	sp, #32
 8012224:	af02      	add	r7, sp, #8
 8012226:	60f8      	str	r0, [r7, #12]
 8012228:	60b9      	str	r1, [r7, #8]
 801222a:	607a      	str	r2, [r7, #4]
 801222c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801222e:	202c      	movs	r0, #44	; 0x2c
 8012230:	f000 fe22 	bl	8012e78 <pvPortMalloc>
 8012234:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8012236:	697b      	ldr	r3, [r7, #20]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d00d      	beq.n	8012258 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 801223c:	697b      	ldr	r3, [r7, #20]
 801223e:	2200      	movs	r2, #0
 8012240:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	9301      	str	r3, [sp, #4]
 8012248:	6a3b      	ldr	r3, [r7, #32]
 801224a:	9300      	str	r3, [sp, #0]
 801224c:	683b      	ldr	r3, [r7, #0]
 801224e:	687a      	ldr	r2, [r7, #4]
 8012250:	68b9      	ldr	r1, [r7, #8]
 8012252:	68f8      	ldr	r0, [r7, #12]
 8012254:	f000 f843 	bl	80122de <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8012258:	697b      	ldr	r3, [r7, #20]
	}
 801225a:	4618      	mov	r0, r3
 801225c:	3718      	adds	r7, #24
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}

08012262 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8012262:	b580      	push	{r7, lr}
 8012264:	b08a      	sub	sp, #40	; 0x28
 8012266:	af02      	add	r7, sp, #8
 8012268:	60f8      	str	r0, [r7, #12]
 801226a:	60b9      	str	r1, [r7, #8]
 801226c:	607a      	str	r2, [r7, #4]
 801226e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8012270:	232c      	movs	r3, #44	; 0x2c
 8012272:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8012274:	693b      	ldr	r3, [r7, #16]
 8012276:	2b2c      	cmp	r3, #44	; 0x2c
 8012278:	d00a      	beq.n	8012290 <xTimerCreateStatic+0x2e>
	__asm volatile
 801227a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801227e:	f383 8811 	msr	BASEPRI, r3
 8012282:	f3bf 8f6f 	isb	sy
 8012286:	f3bf 8f4f 	dsb	sy
 801228a:	61bb      	str	r3, [r7, #24]
}
 801228c:	bf00      	nop
 801228e:	e7fe      	b.n	801228e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012290:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8012292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012294:	2b00      	cmp	r3, #0
 8012296:	d10a      	bne.n	80122ae <xTimerCreateStatic+0x4c>
	__asm volatile
 8012298:	f04f 0350 	mov.w	r3, #80	; 0x50
 801229c:	f383 8811 	msr	BASEPRI, r3
 80122a0:	f3bf 8f6f 	isb	sy
 80122a4:	f3bf 8f4f 	dsb	sy
 80122a8:	617b      	str	r3, [r7, #20]
}
 80122aa:	bf00      	nop
 80122ac:	e7fe      	b.n	80122ac <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80122ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122b0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80122b2:	69fb      	ldr	r3, [r7, #28]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d00d      	beq.n	80122d4 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80122b8:	69fb      	ldr	r3, [r7, #28]
 80122ba:	2202      	movs	r2, #2
 80122bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80122c0:	69fb      	ldr	r3, [r7, #28]
 80122c2:	9301      	str	r3, [sp, #4]
 80122c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122c6:	9300      	str	r3, [sp, #0]
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	687a      	ldr	r2, [r7, #4]
 80122cc:	68b9      	ldr	r1, [r7, #8]
 80122ce:	68f8      	ldr	r0, [r7, #12]
 80122d0:	f000 f805 	bl	80122de <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80122d4:	69fb      	ldr	r3, [r7, #28]
	}
 80122d6:	4618      	mov	r0, r3
 80122d8:	3720      	adds	r7, #32
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}

080122de <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80122de:	b580      	push	{r7, lr}
 80122e0:	b086      	sub	sp, #24
 80122e2:	af00      	add	r7, sp, #0
 80122e4:	60f8      	str	r0, [r7, #12]
 80122e6:	60b9      	str	r1, [r7, #8]
 80122e8:	607a      	str	r2, [r7, #4]
 80122ea:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80122ec:	68bb      	ldr	r3, [r7, #8]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d10a      	bne.n	8012308 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80122f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f6:	f383 8811 	msr	BASEPRI, r3
 80122fa:	f3bf 8f6f 	isb	sy
 80122fe:	f3bf 8f4f 	dsb	sy
 8012302:	617b      	str	r3, [r7, #20]
}
 8012304:	bf00      	nop
 8012306:	e7fe      	b.n	8012306 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8012308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801230a:	2b00      	cmp	r3, #0
 801230c:	d01e      	beq.n	801234c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 801230e:	f000 fae7 	bl	80128e0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8012312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012314:	68fa      	ldr	r2, [r7, #12]
 8012316:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8012318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801231a:	68ba      	ldr	r2, [r7, #8]
 801231c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 801231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012320:	683a      	ldr	r2, [r7, #0]
 8012322:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8012324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012326:	6a3a      	ldr	r2, [r7, #32]
 8012328:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801232c:	3304      	adds	r3, #4
 801232e:	4618      	mov	r0, r3
 8012330:	f7fd fdb0 	bl	800fe94 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d008      	beq.n	801234c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 801233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801233c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012340:	f043 0304 	orr.w	r3, r3, #4
 8012344:	b2da      	uxtb	r2, r3
 8012346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012348:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 801234c:	bf00      	nop
 801234e:	3718      	adds	r7, #24
 8012350:	46bd      	mov	sp, r7
 8012352:	bd80      	pop	{r7, pc}

08012354 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b08a      	sub	sp, #40	; 0x28
 8012358:	af00      	add	r7, sp, #0
 801235a:	60f8      	str	r0, [r7, #12]
 801235c:	60b9      	str	r1, [r7, #8]
 801235e:	607a      	str	r2, [r7, #4]
 8012360:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012362:	2300      	movs	r3, #0
 8012364:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d10a      	bne.n	8012382 <xTimerGenericCommand+0x2e>
	__asm volatile
 801236c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012370:	f383 8811 	msr	BASEPRI, r3
 8012374:	f3bf 8f6f 	isb	sy
 8012378:	f3bf 8f4f 	dsb	sy
 801237c:	623b      	str	r3, [r7, #32]
}
 801237e:	bf00      	nop
 8012380:	e7fe      	b.n	8012380 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012382:	4b1a      	ldr	r3, [pc, #104]	; (80123ec <xTimerGenericCommand+0x98>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d02a      	beq.n	80123e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801238a:	68bb      	ldr	r3, [r7, #8]
 801238c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012396:	68bb      	ldr	r3, [r7, #8]
 8012398:	2b05      	cmp	r3, #5
 801239a:	dc18      	bgt.n	80123ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801239c:	f7ff fd02 	bl	8011da4 <xTaskGetSchedulerState>
 80123a0:	4603      	mov	r3, r0
 80123a2:	2b02      	cmp	r3, #2
 80123a4:	d109      	bne.n	80123ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80123a6:	4b11      	ldr	r3, [pc, #68]	; (80123ec <xTimerGenericCommand+0x98>)
 80123a8:	6818      	ldr	r0, [r3, #0]
 80123aa:	f107 0110 	add.w	r1, r7, #16
 80123ae:	2300      	movs	r3, #0
 80123b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123b2:	f7fd ffab 	bl	801030c <xQueueGenericSend>
 80123b6:	6278      	str	r0, [r7, #36]	; 0x24
 80123b8:	e012      	b.n	80123e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80123ba:	4b0c      	ldr	r3, [pc, #48]	; (80123ec <xTimerGenericCommand+0x98>)
 80123bc:	6818      	ldr	r0, [r3, #0]
 80123be:	f107 0110 	add.w	r1, r7, #16
 80123c2:	2300      	movs	r3, #0
 80123c4:	2200      	movs	r2, #0
 80123c6:	f7fd ffa1 	bl	801030c <xQueueGenericSend>
 80123ca:	6278      	str	r0, [r7, #36]	; 0x24
 80123cc:	e008      	b.n	80123e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80123ce:	4b07      	ldr	r3, [pc, #28]	; (80123ec <xTimerGenericCommand+0x98>)
 80123d0:	6818      	ldr	r0, [r3, #0]
 80123d2:	f107 0110 	add.w	r1, r7, #16
 80123d6:	2300      	movs	r3, #0
 80123d8:	683a      	ldr	r2, [r7, #0]
 80123da:	f7fe f895 	bl	8010508 <xQueueGenericSendFromISR>
 80123de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80123e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80123e2:	4618      	mov	r0, r3
 80123e4:	3728      	adds	r7, #40	; 0x28
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}
 80123ea:	bf00      	nop
 80123ec:	20001664 	.word	0x20001664

080123f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b088      	sub	sp, #32
 80123f4:	af02      	add	r7, sp, #8
 80123f6:	6078      	str	r0, [r7, #4]
 80123f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80123fa:	4b22      	ldr	r3, [pc, #136]	; (8012484 <prvProcessExpiredTimer+0x94>)
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	68db      	ldr	r3, [r3, #12]
 8012400:	68db      	ldr	r3, [r3, #12]
 8012402:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012404:	697b      	ldr	r3, [r7, #20]
 8012406:	3304      	adds	r3, #4
 8012408:	4618      	mov	r0, r3
 801240a:	f7fd fdad 	bl	800ff68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801240e:	697b      	ldr	r3, [r7, #20]
 8012410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012414:	f003 0304 	and.w	r3, r3, #4
 8012418:	2b00      	cmp	r3, #0
 801241a:	d022      	beq.n	8012462 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801241c:	697b      	ldr	r3, [r7, #20]
 801241e:	699a      	ldr	r2, [r3, #24]
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	18d1      	adds	r1, r2, r3
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	683a      	ldr	r2, [r7, #0]
 8012428:	6978      	ldr	r0, [r7, #20]
 801242a:	f000 f8d1 	bl	80125d0 <prvInsertTimerInActiveList>
 801242e:	4603      	mov	r3, r0
 8012430:	2b00      	cmp	r3, #0
 8012432:	d01f      	beq.n	8012474 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012434:	2300      	movs	r3, #0
 8012436:	9300      	str	r3, [sp, #0]
 8012438:	2300      	movs	r3, #0
 801243a:	687a      	ldr	r2, [r7, #4]
 801243c:	2100      	movs	r1, #0
 801243e:	6978      	ldr	r0, [r7, #20]
 8012440:	f7ff ff88 	bl	8012354 <xTimerGenericCommand>
 8012444:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012446:	693b      	ldr	r3, [r7, #16]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d113      	bne.n	8012474 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801244c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012450:	f383 8811 	msr	BASEPRI, r3
 8012454:	f3bf 8f6f 	isb	sy
 8012458:	f3bf 8f4f 	dsb	sy
 801245c:	60fb      	str	r3, [r7, #12]
}
 801245e:	bf00      	nop
 8012460:	e7fe      	b.n	8012460 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012462:	697b      	ldr	r3, [r7, #20]
 8012464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012468:	f023 0301 	bic.w	r3, r3, #1
 801246c:	b2da      	uxtb	r2, r3
 801246e:	697b      	ldr	r3, [r7, #20]
 8012470:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012474:	697b      	ldr	r3, [r7, #20]
 8012476:	6a1b      	ldr	r3, [r3, #32]
 8012478:	6978      	ldr	r0, [r7, #20]
 801247a:	4798      	blx	r3
}
 801247c:	bf00      	nop
 801247e:	3718      	adds	r7, #24
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}
 8012484:	2000165c 	.word	0x2000165c

08012488 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b084      	sub	sp, #16
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012490:	f107 0308 	add.w	r3, r7, #8
 8012494:	4618      	mov	r0, r3
 8012496:	f000 f857 	bl	8012548 <prvGetNextExpireTime>
 801249a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801249c:	68bb      	ldr	r3, [r7, #8]
 801249e:	4619      	mov	r1, r3
 80124a0:	68f8      	ldr	r0, [r7, #12]
 80124a2:	f000 f803 	bl	80124ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80124a6:	f000 f8d5 	bl	8012654 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80124aa:	e7f1      	b.n	8012490 <prvTimerTask+0x8>

080124ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b084      	sub	sp, #16
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
 80124b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80124b6:	f7fe ffeb 	bl	8011490 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80124ba:	f107 0308 	add.w	r3, r7, #8
 80124be:	4618      	mov	r0, r3
 80124c0:	f000 f866 	bl	8012590 <prvSampleTimeNow>
 80124c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80124c6:	68bb      	ldr	r3, [r7, #8]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d130      	bne.n	801252e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d10a      	bne.n	80124e8 <prvProcessTimerOrBlockTask+0x3c>
 80124d2:	687a      	ldr	r2, [r7, #4]
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	429a      	cmp	r2, r3
 80124d8:	d806      	bhi.n	80124e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80124da:	f7fe ffe7 	bl	80114ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80124de:	68f9      	ldr	r1, [r7, #12]
 80124e0:	6878      	ldr	r0, [r7, #4]
 80124e2:	f7ff ff85 	bl	80123f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80124e6:	e024      	b.n	8012532 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d008      	beq.n	8012500 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80124ee:	4b13      	ldr	r3, [pc, #76]	; (801253c <prvProcessTimerOrBlockTask+0x90>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d101      	bne.n	80124fc <prvProcessTimerOrBlockTask+0x50>
 80124f8:	2301      	movs	r3, #1
 80124fa:	e000      	b.n	80124fe <prvProcessTimerOrBlockTask+0x52>
 80124fc:	2300      	movs	r3, #0
 80124fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012500:	4b0f      	ldr	r3, [pc, #60]	; (8012540 <prvProcessTimerOrBlockTask+0x94>)
 8012502:	6818      	ldr	r0, [r3, #0]
 8012504:	687a      	ldr	r2, [r7, #4]
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	1ad3      	subs	r3, r2, r3
 801250a:	683a      	ldr	r2, [r7, #0]
 801250c:	4619      	mov	r1, r3
 801250e:	f7fe fd2f 	bl	8010f70 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012512:	f7fe ffcb 	bl	80114ac <xTaskResumeAll>
 8012516:	4603      	mov	r3, r0
 8012518:	2b00      	cmp	r3, #0
 801251a:	d10a      	bne.n	8012532 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801251c:	4b09      	ldr	r3, [pc, #36]	; (8012544 <prvProcessTimerOrBlockTask+0x98>)
 801251e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012522:	601a      	str	r2, [r3, #0]
 8012524:	f3bf 8f4f 	dsb	sy
 8012528:	f3bf 8f6f 	isb	sy
}
 801252c:	e001      	b.n	8012532 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801252e:	f7fe ffbd 	bl	80114ac <xTaskResumeAll>
}
 8012532:	bf00      	nop
 8012534:	3710      	adds	r7, #16
 8012536:	46bd      	mov	sp, r7
 8012538:	bd80      	pop	{r7, pc}
 801253a:	bf00      	nop
 801253c:	20001660 	.word	0x20001660
 8012540:	20001664 	.word	0x20001664
 8012544:	e000ed04 	.word	0xe000ed04

08012548 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012548:	b480      	push	{r7}
 801254a:	b085      	sub	sp, #20
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012550:	4b0e      	ldr	r3, [pc, #56]	; (801258c <prvGetNextExpireTime+0x44>)
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d101      	bne.n	801255e <prvGetNextExpireTime+0x16>
 801255a:	2201      	movs	r2, #1
 801255c:	e000      	b.n	8012560 <prvGetNextExpireTime+0x18>
 801255e:	2200      	movs	r2, #0
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d105      	bne.n	8012578 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801256c:	4b07      	ldr	r3, [pc, #28]	; (801258c <prvGetNextExpireTime+0x44>)
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	68db      	ldr	r3, [r3, #12]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	60fb      	str	r3, [r7, #12]
 8012576:	e001      	b.n	801257c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012578:	2300      	movs	r3, #0
 801257a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801257c:	68fb      	ldr	r3, [r7, #12]
}
 801257e:	4618      	mov	r0, r3
 8012580:	3714      	adds	r7, #20
 8012582:	46bd      	mov	sp, r7
 8012584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012588:	4770      	bx	lr
 801258a:	bf00      	nop
 801258c:	2000165c 	.word	0x2000165c

08012590 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b084      	sub	sp, #16
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012598:	f7ff f826 	bl	80115e8 <xTaskGetTickCount>
 801259c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801259e:	4b0b      	ldr	r3, [pc, #44]	; (80125cc <prvSampleTimeNow+0x3c>)
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	68fa      	ldr	r2, [r7, #12]
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d205      	bcs.n	80125b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80125a8:	f000 f936 	bl	8012818 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	2201      	movs	r2, #1
 80125b0:	601a      	str	r2, [r3, #0]
 80125b2:	e002      	b.n	80125ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2200      	movs	r2, #0
 80125b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80125ba:	4a04      	ldr	r2, [pc, #16]	; (80125cc <prvSampleTimeNow+0x3c>)
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80125c0:	68fb      	ldr	r3, [r7, #12]
}
 80125c2:	4618      	mov	r0, r3
 80125c4:	3710      	adds	r7, #16
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd80      	pop	{r7, pc}
 80125ca:	bf00      	nop
 80125cc:	2000166c 	.word	0x2000166c

080125d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b086      	sub	sp, #24
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	60f8      	str	r0, [r7, #12]
 80125d8:	60b9      	str	r1, [r7, #8]
 80125da:	607a      	str	r2, [r7, #4]
 80125dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80125de:	2300      	movs	r3, #0
 80125e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	68ba      	ldr	r2, [r7, #8]
 80125e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	68fa      	ldr	r2, [r7, #12]
 80125ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80125ee:	68ba      	ldr	r2, [r7, #8]
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	429a      	cmp	r2, r3
 80125f4:	d812      	bhi.n	801261c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80125f6:	687a      	ldr	r2, [r7, #4]
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	1ad2      	subs	r2, r2, r3
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	699b      	ldr	r3, [r3, #24]
 8012600:	429a      	cmp	r2, r3
 8012602:	d302      	bcc.n	801260a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012604:	2301      	movs	r3, #1
 8012606:	617b      	str	r3, [r7, #20]
 8012608:	e01b      	b.n	8012642 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801260a:	4b10      	ldr	r3, [pc, #64]	; (801264c <prvInsertTimerInActiveList+0x7c>)
 801260c:	681a      	ldr	r2, [r3, #0]
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	3304      	adds	r3, #4
 8012612:	4619      	mov	r1, r3
 8012614:	4610      	mov	r0, r2
 8012616:	f7fd fc6e 	bl	800fef6 <vListInsert>
 801261a:	e012      	b.n	8012642 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801261c:	687a      	ldr	r2, [r7, #4]
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	429a      	cmp	r2, r3
 8012622:	d206      	bcs.n	8012632 <prvInsertTimerInActiveList+0x62>
 8012624:	68ba      	ldr	r2, [r7, #8]
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	429a      	cmp	r2, r3
 801262a:	d302      	bcc.n	8012632 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801262c:	2301      	movs	r3, #1
 801262e:	617b      	str	r3, [r7, #20]
 8012630:	e007      	b.n	8012642 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012632:	4b07      	ldr	r3, [pc, #28]	; (8012650 <prvInsertTimerInActiveList+0x80>)
 8012634:	681a      	ldr	r2, [r3, #0]
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	3304      	adds	r3, #4
 801263a:	4619      	mov	r1, r3
 801263c:	4610      	mov	r0, r2
 801263e:	f7fd fc5a 	bl	800fef6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012642:	697b      	ldr	r3, [r7, #20]
}
 8012644:	4618      	mov	r0, r3
 8012646:	3718      	adds	r7, #24
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}
 801264c:	20001660 	.word	0x20001660
 8012650:	2000165c 	.word	0x2000165c

08012654 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b08e      	sub	sp, #56	; 0x38
 8012658:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801265a:	e0ca      	b.n	80127f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	2b00      	cmp	r3, #0
 8012660:	da18      	bge.n	8012694 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012662:	1d3b      	adds	r3, r7, #4
 8012664:	3304      	adds	r3, #4
 8012666:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801266a:	2b00      	cmp	r3, #0
 801266c:	d10a      	bne.n	8012684 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801266e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012672:	f383 8811 	msr	BASEPRI, r3
 8012676:	f3bf 8f6f 	isb	sy
 801267a:	f3bf 8f4f 	dsb	sy
 801267e:	61fb      	str	r3, [r7, #28]
}
 8012680:	bf00      	nop
 8012682:	e7fe      	b.n	8012682 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801268a:	6850      	ldr	r0, [r2, #4]
 801268c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801268e:	6892      	ldr	r2, [r2, #8]
 8012690:	4611      	mov	r1, r2
 8012692:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	2b00      	cmp	r3, #0
 8012698:	f2c0 80aa 	blt.w	80127f0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80126a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126a2:	695b      	ldr	r3, [r3, #20]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d004      	beq.n	80126b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80126a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126aa:	3304      	adds	r3, #4
 80126ac:	4618      	mov	r0, r3
 80126ae:	f7fd fc5b 	bl	800ff68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80126b2:	463b      	mov	r3, r7
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7ff ff6b 	bl	8012590 <prvSampleTimeNow>
 80126ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2b09      	cmp	r3, #9
 80126c0:	f200 8097 	bhi.w	80127f2 <prvProcessReceivedCommands+0x19e>
 80126c4:	a201      	add	r2, pc, #4	; (adr r2, 80126cc <prvProcessReceivedCommands+0x78>)
 80126c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126ca:	bf00      	nop
 80126cc:	080126f5 	.word	0x080126f5
 80126d0:	080126f5 	.word	0x080126f5
 80126d4:	080126f5 	.word	0x080126f5
 80126d8:	08012769 	.word	0x08012769
 80126dc:	0801277d 	.word	0x0801277d
 80126e0:	080127c7 	.word	0x080127c7
 80126e4:	080126f5 	.word	0x080126f5
 80126e8:	080126f5 	.word	0x080126f5
 80126ec:	08012769 	.word	0x08012769
 80126f0:	0801277d 	.word	0x0801277d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80126f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126fa:	f043 0301 	orr.w	r3, r3, #1
 80126fe:	b2da      	uxtb	r2, r3
 8012700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012702:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012706:	68ba      	ldr	r2, [r7, #8]
 8012708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801270a:	699b      	ldr	r3, [r3, #24]
 801270c:	18d1      	adds	r1, r2, r3
 801270e:	68bb      	ldr	r3, [r7, #8]
 8012710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012714:	f7ff ff5c 	bl	80125d0 <prvInsertTimerInActiveList>
 8012718:	4603      	mov	r3, r0
 801271a:	2b00      	cmp	r3, #0
 801271c:	d069      	beq.n	80127f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801271e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012720:	6a1b      	ldr	r3, [r3, #32]
 8012722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012724:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801272c:	f003 0304 	and.w	r3, r3, #4
 8012730:	2b00      	cmp	r3, #0
 8012732:	d05e      	beq.n	80127f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012734:	68ba      	ldr	r2, [r7, #8]
 8012736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012738:	699b      	ldr	r3, [r3, #24]
 801273a:	441a      	add	r2, r3
 801273c:	2300      	movs	r3, #0
 801273e:	9300      	str	r3, [sp, #0]
 8012740:	2300      	movs	r3, #0
 8012742:	2100      	movs	r1, #0
 8012744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012746:	f7ff fe05 	bl	8012354 <xTimerGenericCommand>
 801274a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801274c:	6a3b      	ldr	r3, [r7, #32]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d14f      	bne.n	80127f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8012752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012756:	f383 8811 	msr	BASEPRI, r3
 801275a:	f3bf 8f6f 	isb	sy
 801275e:	f3bf 8f4f 	dsb	sy
 8012762:	61bb      	str	r3, [r7, #24]
}
 8012764:	bf00      	nop
 8012766:	e7fe      	b.n	8012766 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801276a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801276e:	f023 0301 	bic.w	r3, r3, #1
 8012772:	b2da      	uxtb	r2, r3
 8012774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801277a:	e03a      	b.n	80127f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801277c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801277e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012782:	f043 0301 	orr.w	r3, r3, #1
 8012786:	b2da      	uxtb	r2, r3
 8012788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801278a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801278e:	68ba      	ldr	r2, [r7, #8]
 8012790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012792:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012796:	699b      	ldr	r3, [r3, #24]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d10a      	bne.n	80127b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801279c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127a0:	f383 8811 	msr	BASEPRI, r3
 80127a4:	f3bf 8f6f 	isb	sy
 80127a8:	f3bf 8f4f 	dsb	sy
 80127ac:	617b      	str	r3, [r7, #20]
}
 80127ae:	bf00      	nop
 80127b0:	e7fe      	b.n	80127b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80127b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b4:	699a      	ldr	r2, [r3, #24]
 80127b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127b8:	18d1      	adds	r1, r2, r3
 80127ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127c0:	f7ff ff06 	bl	80125d0 <prvInsertTimerInActiveList>
					break;
 80127c4:	e015      	b.n	80127f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80127c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80127cc:	f003 0302 	and.w	r3, r3, #2
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d103      	bne.n	80127dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80127d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127d6:	f000 fc1b 	bl	8013010 <vPortFree>
 80127da:	e00a      	b.n	80127f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80127dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80127e2:	f023 0301 	bic.w	r3, r3, #1
 80127e6:	b2da      	uxtb	r2, r3
 80127e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80127ee:	e000      	b.n	80127f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80127f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80127f2:	4b08      	ldr	r3, [pc, #32]	; (8012814 <prvProcessReceivedCommands+0x1c0>)
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	1d39      	adds	r1, r7, #4
 80127f8:	2200      	movs	r2, #0
 80127fa:	4618      	mov	r0, r3
 80127fc:	f7fd ffac 	bl	8010758 <xQueueReceive>
 8012800:	4603      	mov	r3, r0
 8012802:	2b00      	cmp	r3, #0
 8012804:	f47f af2a 	bne.w	801265c <prvProcessReceivedCommands+0x8>
	}
}
 8012808:	bf00      	nop
 801280a:	bf00      	nop
 801280c:	3730      	adds	r7, #48	; 0x30
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}
 8012812:	bf00      	nop
 8012814:	20001664 	.word	0x20001664

08012818 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b088      	sub	sp, #32
 801281c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801281e:	e048      	b.n	80128b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012820:	4b2d      	ldr	r3, [pc, #180]	; (80128d8 <prvSwitchTimerLists+0xc0>)
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	68db      	ldr	r3, [r3, #12]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801282a:	4b2b      	ldr	r3, [pc, #172]	; (80128d8 <prvSwitchTimerLists+0xc0>)
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	68db      	ldr	r3, [r3, #12]
 8012830:	68db      	ldr	r3, [r3, #12]
 8012832:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	3304      	adds	r3, #4
 8012838:	4618      	mov	r0, r3
 801283a:	f7fd fb95 	bl	800ff68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	6a1b      	ldr	r3, [r3, #32]
 8012842:	68f8      	ldr	r0, [r7, #12]
 8012844:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801284c:	f003 0304 	and.w	r3, r3, #4
 8012850:	2b00      	cmp	r3, #0
 8012852:	d02e      	beq.n	80128b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	699b      	ldr	r3, [r3, #24]
 8012858:	693a      	ldr	r2, [r7, #16]
 801285a:	4413      	add	r3, r2
 801285c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801285e:	68ba      	ldr	r2, [r7, #8]
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	429a      	cmp	r2, r3
 8012864:	d90e      	bls.n	8012884 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	68ba      	ldr	r2, [r7, #8]
 801286a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	68fa      	ldr	r2, [r7, #12]
 8012870:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012872:	4b19      	ldr	r3, [pc, #100]	; (80128d8 <prvSwitchTimerLists+0xc0>)
 8012874:	681a      	ldr	r2, [r3, #0]
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	3304      	adds	r3, #4
 801287a:	4619      	mov	r1, r3
 801287c:	4610      	mov	r0, r2
 801287e:	f7fd fb3a 	bl	800fef6 <vListInsert>
 8012882:	e016      	b.n	80128b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012884:	2300      	movs	r3, #0
 8012886:	9300      	str	r3, [sp, #0]
 8012888:	2300      	movs	r3, #0
 801288a:	693a      	ldr	r2, [r7, #16]
 801288c:	2100      	movs	r1, #0
 801288e:	68f8      	ldr	r0, [r7, #12]
 8012890:	f7ff fd60 	bl	8012354 <xTimerGenericCommand>
 8012894:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d10a      	bne.n	80128b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801289c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128a0:	f383 8811 	msr	BASEPRI, r3
 80128a4:	f3bf 8f6f 	isb	sy
 80128a8:	f3bf 8f4f 	dsb	sy
 80128ac:	603b      	str	r3, [r7, #0]
}
 80128ae:	bf00      	nop
 80128b0:	e7fe      	b.n	80128b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80128b2:	4b09      	ldr	r3, [pc, #36]	; (80128d8 <prvSwitchTimerLists+0xc0>)
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d1b1      	bne.n	8012820 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80128bc:	4b06      	ldr	r3, [pc, #24]	; (80128d8 <prvSwitchTimerLists+0xc0>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80128c2:	4b06      	ldr	r3, [pc, #24]	; (80128dc <prvSwitchTimerLists+0xc4>)
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	4a04      	ldr	r2, [pc, #16]	; (80128d8 <prvSwitchTimerLists+0xc0>)
 80128c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80128ca:	4a04      	ldr	r2, [pc, #16]	; (80128dc <prvSwitchTimerLists+0xc4>)
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	6013      	str	r3, [r2, #0]
}
 80128d0:	bf00      	nop
 80128d2:	3718      	adds	r7, #24
 80128d4:	46bd      	mov	sp, r7
 80128d6:	bd80      	pop	{r7, pc}
 80128d8:	2000165c 	.word	0x2000165c
 80128dc:	20001660 	.word	0x20001660

080128e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b082      	sub	sp, #8
 80128e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80128e6:	f000 f9a5 	bl	8012c34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80128ea:	4b15      	ldr	r3, [pc, #84]	; (8012940 <prvCheckForValidListAndQueue+0x60>)
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d120      	bne.n	8012934 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80128f2:	4814      	ldr	r0, [pc, #80]	; (8012944 <prvCheckForValidListAndQueue+0x64>)
 80128f4:	f7fd faae 	bl	800fe54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80128f8:	4813      	ldr	r0, [pc, #76]	; (8012948 <prvCheckForValidListAndQueue+0x68>)
 80128fa:	f7fd faab 	bl	800fe54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80128fe:	4b13      	ldr	r3, [pc, #76]	; (801294c <prvCheckForValidListAndQueue+0x6c>)
 8012900:	4a10      	ldr	r2, [pc, #64]	; (8012944 <prvCheckForValidListAndQueue+0x64>)
 8012902:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012904:	4b12      	ldr	r3, [pc, #72]	; (8012950 <prvCheckForValidListAndQueue+0x70>)
 8012906:	4a10      	ldr	r2, [pc, #64]	; (8012948 <prvCheckForValidListAndQueue+0x68>)
 8012908:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801290a:	2300      	movs	r3, #0
 801290c:	9300      	str	r3, [sp, #0]
 801290e:	4b11      	ldr	r3, [pc, #68]	; (8012954 <prvCheckForValidListAndQueue+0x74>)
 8012910:	4a11      	ldr	r2, [pc, #68]	; (8012958 <prvCheckForValidListAndQueue+0x78>)
 8012912:	2110      	movs	r1, #16
 8012914:	200a      	movs	r0, #10
 8012916:	f7fd fbb9 	bl	801008c <xQueueGenericCreateStatic>
 801291a:	4603      	mov	r3, r0
 801291c:	4a08      	ldr	r2, [pc, #32]	; (8012940 <prvCheckForValidListAndQueue+0x60>)
 801291e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012920:	4b07      	ldr	r3, [pc, #28]	; (8012940 <prvCheckForValidListAndQueue+0x60>)
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d005      	beq.n	8012934 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012928:	4b05      	ldr	r3, [pc, #20]	; (8012940 <prvCheckForValidListAndQueue+0x60>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	490b      	ldr	r1, [pc, #44]	; (801295c <prvCheckForValidListAndQueue+0x7c>)
 801292e:	4618      	mov	r0, r3
 8012930:	f7fe faca 	bl	8010ec8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012934:	f000 f9ae 	bl	8012c94 <vPortExitCritical>
}
 8012938:	bf00      	nop
 801293a:	46bd      	mov	sp, r7
 801293c:	bd80      	pop	{r7, pc}
 801293e:	bf00      	nop
 8012940:	20001664 	.word	0x20001664
 8012944:	20001634 	.word	0x20001634
 8012948:	20001648 	.word	0x20001648
 801294c:	2000165c 	.word	0x2000165c
 8012950:	20001660 	.word	0x20001660
 8012954:	20001710 	.word	0x20001710
 8012958:	20001670 	.word	0x20001670
 801295c:	08016e4c 	.word	0x08016e4c

08012960 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b086      	sub	sp, #24
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d10a      	bne.n	8012988 <pvTimerGetTimerID+0x28>
	__asm volatile
 8012972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012976:	f383 8811 	msr	BASEPRI, r3
 801297a:	f3bf 8f6f 	isb	sy
 801297e:	f3bf 8f4f 	dsb	sy
 8012982:	60fb      	str	r3, [r7, #12]
}
 8012984:	bf00      	nop
 8012986:	e7fe      	b.n	8012986 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8012988:	f000 f954 	bl	8012c34 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 801298c:	697b      	ldr	r3, [r7, #20]
 801298e:	69db      	ldr	r3, [r3, #28]
 8012990:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8012992:	f000 f97f 	bl	8012c94 <vPortExitCritical>

	return pvReturn;
 8012996:	693b      	ldr	r3, [r7, #16]
}
 8012998:	4618      	mov	r0, r3
 801299a:	3718      	adds	r7, #24
 801299c:	46bd      	mov	sp, r7
 801299e:	bd80      	pop	{r7, pc}

080129a0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b08a      	sub	sp, #40	; 0x28
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	60f8      	str	r0, [r7, #12]
 80129a8:	60b9      	str	r1, [r7, #8]
 80129aa:	607a      	str	r2, [r7, #4]
 80129ac:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80129ae:	f06f 0301 	mvn.w	r3, #1
 80129b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80129b8:	68bb      	ldr	r3, [r7, #8]
 80129ba:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80129c0:	4b06      	ldr	r3, [pc, #24]	; (80129dc <xTimerPendFunctionCallFromISR+0x3c>)
 80129c2:	6818      	ldr	r0, [r3, #0]
 80129c4:	f107 0114 	add.w	r1, r7, #20
 80129c8:	2300      	movs	r3, #0
 80129ca:	683a      	ldr	r2, [r7, #0]
 80129cc:	f7fd fd9c 	bl	8010508 <xQueueGenericSendFromISR>
 80129d0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80129d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80129d4:	4618      	mov	r0, r3
 80129d6:	3728      	adds	r7, #40	; 0x28
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}
 80129dc:	20001664 	.word	0x20001664

080129e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80129e0:	b480      	push	{r7}
 80129e2:	b085      	sub	sp, #20
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	60f8      	str	r0, [r7, #12]
 80129e8:	60b9      	str	r1, [r7, #8]
 80129ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	3b04      	subs	r3, #4
 80129f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80129f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	3b04      	subs	r3, #4
 80129fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012a00:	68bb      	ldr	r3, [r7, #8]
 8012a02:	f023 0201 	bic.w	r2, r3, #1
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	3b04      	subs	r3, #4
 8012a0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012a10:	4a0c      	ldr	r2, [pc, #48]	; (8012a44 <pxPortInitialiseStack+0x64>)
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	3b14      	subs	r3, #20
 8012a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012a1c:	687a      	ldr	r2, [r7, #4]
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	3b04      	subs	r3, #4
 8012a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	f06f 0202 	mvn.w	r2, #2
 8012a2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	3b20      	subs	r3, #32
 8012a34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012a36:	68fb      	ldr	r3, [r7, #12]
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	3714      	adds	r7, #20
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a42:	4770      	bx	lr
 8012a44:	08012a49 	.word	0x08012a49

08012a48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012a48:	b480      	push	{r7}
 8012a4a:	b085      	sub	sp, #20
 8012a4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012a4e:	2300      	movs	r3, #0
 8012a50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012a52:	4b12      	ldr	r3, [pc, #72]	; (8012a9c <prvTaskExitError+0x54>)
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a5a:	d00a      	beq.n	8012a72 <prvTaskExitError+0x2a>
	__asm volatile
 8012a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a60:	f383 8811 	msr	BASEPRI, r3
 8012a64:	f3bf 8f6f 	isb	sy
 8012a68:	f3bf 8f4f 	dsb	sy
 8012a6c:	60fb      	str	r3, [r7, #12]
}
 8012a6e:	bf00      	nop
 8012a70:	e7fe      	b.n	8012a70 <prvTaskExitError+0x28>
	__asm volatile
 8012a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a76:	f383 8811 	msr	BASEPRI, r3
 8012a7a:	f3bf 8f6f 	isb	sy
 8012a7e:	f3bf 8f4f 	dsb	sy
 8012a82:	60bb      	str	r3, [r7, #8]
}
 8012a84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012a86:	bf00      	nop
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d0fc      	beq.n	8012a88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012a8e:	bf00      	nop
 8012a90:	bf00      	nop
 8012a92:	3714      	adds	r7, #20
 8012a94:	46bd      	mov	sp, r7
 8012a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9a:	4770      	bx	lr
 8012a9c:	200000ac 	.word	0x200000ac

08012aa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012aa0:	4b07      	ldr	r3, [pc, #28]	; (8012ac0 <pxCurrentTCBConst2>)
 8012aa2:	6819      	ldr	r1, [r3, #0]
 8012aa4:	6808      	ldr	r0, [r1, #0]
 8012aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aaa:	f380 8809 	msr	PSP, r0
 8012aae:	f3bf 8f6f 	isb	sy
 8012ab2:	f04f 0000 	mov.w	r0, #0
 8012ab6:	f380 8811 	msr	BASEPRI, r0
 8012aba:	4770      	bx	lr
 8012abc:	f3af 8000 	nop.w

08012ac0 <pxCurrentTCBConst2>:
 8012ac0:	20001134 	.word	0x20001134
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012ac4:	bf00      	nop
 8012ac6:	bf00      	nop

08012ac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012ac8:	4808      	ldr	r0, [pc, #32]	; (8012aec <prvPortStartFirstTask+0x24>)
 8012aca:	6800      	ldr	r0, [r0, #0]
 8012acc:	6800      	ldr	r0, [r0, #0]
 8012ace:	f380 8808 	msr	MSP, r0
 8012ad2:	f04f 0000 	mov.w	r0, #0
 8012ad6:	f380 8814 	msr	CONTROL, r0
 8012ada:	b662      	cpsie	i
 8012adc:	b661      	cpsie	f
 8012ade:	f3bf 8f4f 	dsb	sy
 8012ae2:	f3bf 8f6f 	isb	sy
 8012ae6:	df00      	svc	0
 8012ae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012aea:	bf00      	nop
 8012aec:	e000ed08 	.word	0xe000ed08

08012af0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b086      	sub	sp, #24
 8012af4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012af6:	4b46      	ldr	r3, [pc, #280]	; (8012c10 <xPortStartScheduler+0x120>)
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	4a46      	ldr	r2, [pc, #280]	; (8012c14 <xPortStartScheduler+0x124>)
 8012afc:	4293      	cmp	r3, r2
 8012afe:	d10a      	bne.n	8012b16 <xPortStartScheduler+0x26>
	__asm volatile
 8012b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b04:	f383 8811 	msr	BASEPRI, r3
 8012b08:	f3bf 8f6f 	isb	sy
 8012b0c:	f3bf 8f4f 	dsb	sy
 8012b10:	613b      	str	r3, [r7, #16]
}
 8012b12:	bf00      	nop
 8012b14:	e7fe      	b.n	8012b14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012b16:	4b3e      	ldr	r3, [pc, #248]	; (8012c10 <xPortStartScheduler+0x120>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	4a3f      	ldr	r2, [pc, #252]	; (8012c18 <xPortStartScheduler+0x128>)
 8012b1c:	4293      	cmp	r3, r2
 8012b1e:	d10a      	bne.n	8012b36 <xPortStartScheduler+0x46>
	__asm volatile
 8012b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b24:	f383 8811 	msr	BASEPRI, r3
 8012b28:	f3bf 8f6f 	isb	sy
 8012b2c:	f3bf 8f4f 	dsb	sy
 8012b30:	60fb      	str	r3, [r7, #12]
}
 8012b32:	bf00      	nop
 8012b34:	e7fe      	b.n	8012b34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012b36:	4b39      	ldr	r3, [pc, #228]	; (8012c1c <xPortStartScheduler+0x12c>)
 8012b38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012b3a:	697b      	ldr	r3, [r7, #20]
 8012b3c:	781b      	ldrb	r3, [r3, #0]
 8012b3e:	b2db      	uxtb	r3, r3
 8012b40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012b42:	697b      	ldr	r3, [r7, #20]
 8012b44:	22ff      	movs	r2, #255	; 0xff
 8012b46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	b2db      	uxtb	r3, r3
 8012b4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012b50:	78fb      	ldrb	r3, [r7, #3]
 8012b52:	b2db      	uxtb	r3, r3
 8012b54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012b58:	b2da      	uxtb	r2, r3
 8012b5a:	4b31      	ldr	r3, [pc, #196]	; (8012c20 <xPortStartScheduler+0x130>)
 8012b5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012b5e:	4b31      	ldr	r3, [pc, #196]	; (8012c24 <xPortStartScheduler+0x134>)
 8012b60:	2207      	movs	r2, #7
 8012b62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012b64:	e009      	b.n	8012b7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012b66:	4b2f      	ldr	r3, [pc, #188]	; (8012c24 <xPortStartScheduler+0x134>)
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	3b01      	subs	r3, #1
 8012b6c:	4a2d      	ldr	r2, [pc, #180]	; (8012c24 <xPortStartScheduler+0x134>)
 8012b6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012b70:	78fb      	ldrb	r3, [r7, #3]
 8012b72:	b2db      	uxtb	r3, r3
 8012b74:	005b      	lsls	r3, r3, #1
 8012b76:	b2db      	uxtb	r3, r3
 8012b78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012b7a:	78fb      	ldrb	r3, [r7, #3]
 8012b7c:	b2db      	uxtb	r3, r3
 8012b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012b82:	2b80      	cmp	r3, #128	; 0x80
 8012b84:	d0ef      	beq.n	8012b66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012b86:	4b27      	ldr	r3, [pc, #156]	; (8012c24 <xPortStartScheduler+0x134>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	f1c3 0307 	rsb	r3, r3, #7
 8012b8e:	2b04      	cmp	r3, #4
 8012b90:	d00a      	beq.n	8012ba8 <xPortStartScheduler+0xb8>
	__asm volatile
 8012b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b96:	f383 8811 	msr	BASEPRI, r3
 8012b9a:	f3bf 8f6f 	isb	sy
 8012b9e:	f3bf 8f4f 	dsb	sy
 8012ba2:	60bb      	str	r3, [r7, #8]
}
 8012ba4:	bf00      	nop
 8012ba6:	e7fe      	b.n	8012ba6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012ba8:	4b1e      	ldr	r3, [pc, #120]	; (8012c24 <xPortStartScheduler+0x134>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	021b      	lsls	r3, r3, #8
 8012bae:	4a1d      	ldr	r2, [pc, #116]	; (8012c24 <xPortStartScheduler+0x134>)
 8012bb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012bb2:	4b1c      	ldr	r3, [pc, #112]	; (8012c24 <xPortStartScheduler+0x134>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012bba:	4a1a      	ldr	r2, [pc, #104]	; (8012c24 <xPortStartScheduler+0x134>)
 8012bbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	b2da      	uxtb	r2, r3
 8012bc2:	697b      	ldr	r3, [r7, #20]
 8012bc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012bc6:	4b18      	ldr	r3, [pc, #96]	; (8012c28 <xPortStartScheduler+0x138>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	4a17      	ldr	r2, [pc, #92]	; (8012c28 <xPortStartScheduler+0x138>)
 8012bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012bd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012bd2:	4b15      	ldr	r3, [pc, #84]	; (8012c28 <xPortStartScheduler+0x138>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	4a14      	ldr	r2, [pc, #80]	; (8012c28 <xPortStartScheduler+0x138>)
 8012bd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012bdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012bde:	f000 f8dd 	bl	8012d9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012be2:	4b12      	ldr	r3, [pc, #72]	; (8012c2c <xPortStartScheduler+0x13c>)
 8012be4:	2200      	movs	r2, #0
 8012be6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012be8:	f000 f8fc 	bl	8012de4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012bec:	4b10      	ldr	r3, [pc, #64]	; (8012c30 <xPortStartScheduler+0x140>)
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	4a0f      	ldr	r2, [pc, #60]	; (8012c30 <xPortStartScheduler+0x140>)
 8012bf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012bf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012bf8:	f7ff ff66 	bl	8012ac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012bfc:	f7fe fdbe 	bl	801177c <vTaskSwitchContext>
	prvTaskExitError();
 8012c00:	f7ff ff22 	bl	8012a48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012c04:	2300      	movs	r3, #0
}
 8012c06:	4618      	mov	r0, r3
 8012c08:	3718      	adds	r7, #24
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	bd80      	pop	{r7, pc}
 8012c0e:	bf00      	nop
 8012c10:	e000ed00 	.word	0xe000ed00
 8012c14:	410fc271 	.word	0x410fc271
 8012c18:	410fc270 	.word	0x410fc270
 8012c1c:	e000e400 	.word	0xe000e400
 8012c20:	20001760 	.word	0x20001760
 8012c24:	20001764 	.word	0x20001764
 8012c28:	e000ed20 	.word	0xe000ed20
 8012c2c:	200000ac 	.word	0x200000ac
 8012c30:	e000ef34 	.word	0xe000ef34

08012c34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012c34:	b480      	push	{r7}
 8012c36:	b083      	sub	sp, #12
 8012c38:	af00      	add	r7, sp, #0
	__asm volatile
 8012c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c3e:	f383 8811 	msr	BASEPRI, r3
 8012c42:	f3bf 8f6f 	isb	sy
 8012c46:	f3bf 8f4f 	dsb	sy
 8012c4a:	607b      	str	r3, [r7, #4]
}
 8012c4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012c4e:	4b0f      	ldr	r3, [pc, #60]	; (8012c8c <vPortEnterCritical+0x58>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	3301      	adds	r3, #1
 8012c54:	4a0d      	ldr	r2, [pc, #52]	; (8012c8c <vPortEnterCritical+0x58>)
 8012c56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012c58:	4b0c      	ldr	r3, [pc, #48]	; (8012c8c <vPortEnterCritical+0x58>)
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	2b01      	cmp	r3, #1
 8012c5e:	d10f      	bne.n	8012c80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012c60:	4b0b      	ldr	r3, [pc, #44]	; (8012c90 <vPortEnterCritical+0x5c>)
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	b2db      	uxtb	r3, r3
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d00a      	beq.n	8012c80 <vPortEnterCritical+0x4c>
	__asm volatile
 8012c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c6e:	f383 8811 	msr	BASEPRI, r3
 8012c72:	f3bf 8f6f 	isb	sy
 8012c76:	f3bf 8f4f 	dsb	sy
 8012c7a:	603b      	str	r3, [r7, #0]
}
 8012c7c:	bf00      	nop
 8012c7e:	e7fe      	b.n	8012c7e <vPortEnterCritical+0x4a>
	}
}
 8012c80:	bf00      	nop
 8012c82:	370c      	adds	r7, #12
 8012c84:	46bd      	mov	sp, r7
 8012c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8a:	4770      	bx	lr
 8012c8c:	200000ac 	.word	0x200000ac
 8012c90:	e000ed04 	.word	0xe000ed04

08012c94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012c94:	b480      	push	{r7}
 8012c96:	b083      	sub	sp, #12
 8012c98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012c9a:	4b12      	ldr	r3, [pc, #72]	; (8012ce4 <vPortExitCritical+0x50>)
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d10a      	bne.n	8012cb8 <vPortExitCritical+0x24>
	__asm volatile
 8012ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ca6:	f383 8811 	msr	BASEPRI, r3
 8012caa:	f3bf 8f6f 	isb	sy
 8012cae:	f3bf 8f4f 	dsb	sy
 8012cb2:	607b      	str	r3, [r7, #4]
}
 8012cb4:	bf00      	nop
 8012cb6:	e7fe      	b.n	8012cb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012cb8:	4b0a      	ldr	r3, [pc, #40]	; (8012ce4 <vPortExitCritical+0x50>)
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	3b01      	subs	r3, #1
 8012cbe:	4a09      	ldr	r2, [pc, #36]	; (8012ce4 <vPortExitCritical+0x50>)
 8012cc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012cc2:	4b08      	ldr	r3, [pc, #32]	; (8012ce4 <vPortExitCritical+0x50>)
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d105      	bne.n	8012cd6 <vPortExitCritical+0x42>
 8012cca:	2300      	movs	r3, #0
 8012ccc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012cce:	683b      	ldr	r3, [r7, #0]
 8012cd0:	f383 8811 	msr	BASEPRI, r3
}
 8012cd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012cd6:	bf00      	nop
 8012cd8:	370c      	adds	r7, #12
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce0:	4770      	bx	lr
 8012ce2:	bf00      	nop
 8012ce4:	200000ac 	.word	0x200000ac
	...

08012cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012cf0:	f3ef 8009 	mrs	r0, PSP
 8012cf4:	f3bf 8f6f 	isb	sy
 8012cf8:	4b15      	ldr	r3, [pc, #84]	; (8012d50 <pxCurrentTCBConst>)
 8012cfa:	681a      	ldr	r2, [r3, #0]
 8012cfc:	f01e 0f10 	tst.w	lr, #16
 8012d00:	bf08      	it	eq
 8012d02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012d06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d0a:	6010      	str	r0, [r2, #0]
 8012d0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012d10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012d14:	f380 8811 	msr	BASEPRI, r0
 8012d18:	f3bf 8f4f 	dsb	sy
 8012d1c:	f3bf 8f6f 	isb	sy
 8012d20:	f7fe fd2c 	bl	801177c <vTaskSwitchContext>
 8012d24:	f04f 0000 	mov.w	r0, #0
 8012d28:	f380 8811 	msr	BASEPRI, r0
 8012d2c:	bc09      	pop	{r0, r3}
 8012d2e:	6819      	ldr	r1, [r3, #0]
 8012d30:	6808      	ldr	r0, [r1, #0]
 8012d32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d36:	f01e 0f10 	tst.w	lr, #16
 8012d3a:	bf08      	it	eq
 8012d3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012d40:	f380 8809 	msr	PSP, r0
 8012d44:	f3bf 8f6f 	isb	sy
 8012d48:	4770      	bx	lr
 8012d4a:	bf00      	nop
 8012d4c:	f3af 8000 	nop.w

08012d50 <pxCurrentTCBConst>:
 8012d50:	20001134 	.word	0x20001134
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012d54:	bf00      	nop
 8012d56:	bf00      	nop

08012d58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b082      	sub	sp, #8
 8012d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8012d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d62:	f383 8811 	msr	BASEPRI, r3
 8012d66:	f3bf 8f6f 	isb	sy
 8012d6a:	f3bf 8f4f 	dsb	sy
 8012d6e:	607b      	str	r3, [r7, #4]
}
 8012d70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012d72:	f7fe fc49 	bl	8011608 <xTaskIncrementTick>
 8012d76:	4603      	mov	r3, r0
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d003      	beq.n	8012d84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012d7c:	4b06      	ldr	r3, [pc, #24]	; (8012d98 <xPortSysTickHandler+0x40>)
 8012d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d82:	601a      	str	r2, [r3, #0]
 8012d84:	2300      	movs	r3, #0
 8012d86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	f383 8811 	msr	BASEPRI, r3
}
 8012d8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012d90:	bf00      	nop
 8012d92:	3708      	adds	r7, #8
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd80      	pop	{r7, pc}
 8012d98:	e000ed04 	.word	0xe000ed04

08012d9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012d9c:	b480      	push	{r7}
 8012d9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012da0:	4b0b      	ldr	r3, [pc, #44]	; (8012dd0 <vPortSetupTimerInterrupt+0x34>)
 8012da2:	2200      	movs	r2, #0
 8012da4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012da6:	4b0b      	ldr	r3, [pc, #44]	; (8012dd4 <vPortSetupTimerInterrupt+0x38>)
 8012da8:	2200      	movs	r2, #0
 8012daa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012dac:	4b0a      	ldr	r3, [pc, #40]	; (8012dd8 <vPortSetupTimerInterrupt+0x3c>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	4a0a      	ldr	r2, [pc, #40]	; (8012ddc <vPortSetupTimerInterrupt+0x40>)
 8012db2:	fba2 2303 	umull	r2, r3, r2, r3
 8012db6:	099b      	lsrs	r3, r3, #6
 8012db8:	4a09      	ldr	r2, [pc, #36]	; (8012de0 <vPortSetupTimerInterrupt+0x44>)
 8012dba:	3b01      	subs	r3, #1
 8012dbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012dbe:	4b04      	ldr	r3, [pc, #16]	; (8012dd0 <vPortSetupTimerInterrupt+0x34>)
 8012dc0:	2207      	movs	r2, #7
 8012dc2:	601a      	str	r2, [r3, #0]
}
 8012dc4:	bf00      	nop
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dcc:	4770      	bx	lr
 8012dce:	bf00      	nop
 8012dd0:	e000e010 	.word	0xe000e010
 8012dd4:	e000e018 	.word	0xe000e018
 8012dd8:	20000000 	.word	0x20000000
 8012ddc:	10624dd3 	.word	0x10624dd3
 8012de0:	e000e014 	.word	0xe000e014

08012de4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012de4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012df4 <vPortEnableVFP+0x10>
 8012de8:	6801      	ldr	r1, [r0, #0]
 8012dea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012dee:	6001      	str	r1, [r0, #0]
 8012df0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012df2:	bf00      	nop
 8012df4:	e000ed88 	.word	0xe000ed88

08012df8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012df8:	b480      	push	{r7}
 8012dfa:	b085      	sub	sp, #20
 8012dfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012dfe:	f3ef 8305 	mrs	r3, IPSR
 8012e02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	2b0f      	cmp	r3, #15
 8012e08:	d914      	bls.n	8012e34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012e0a:	4a17      	ldr	r2, [pc, #92]	; (8012e68 <vPortValidateInterruptPriority+0x70>)
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	4413      	add	r3, r2
 8012e10:	781b      	ldrb	r3, [r3, #0]
 8012e12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012e14:	4b15      	ldr	r3, [pc, #84]	; (8012e6c <vPortValidateInterruptPriority+0x74>)
 8012e16:	781b      	ldrb	r3, [r3, #0]
 8012e18:	7afa      	ldrb	r2, [r7, #11]
 8012e1a:	429a      	cmp	r2, r3
 8012e1c:	d20a      	bcs.n	8012e34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e22:	f383 8811 	msr	BASEPRI, r3
 8012e26:	f3bf 8f6f 	isb	sy
 8012e2a:	f3bf 8f4f 	dsb	sy
 8012e2e:	607b      	str	r3, [r7, #4]
}
 8012e30:	bf00      	nop
 8012e32:	e7fe      	b.n	8012e32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012e34:	4b0e      	ldr	r3, [pc, #56]	; (8012e70 <vPortValidateInterruptPriority+0x78>)
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012e3c:	4b0d      	ldr	r3, [pc, #52]	; (8012e74 <vPortValidateInterruptPriority+0x7c>)
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	429a      	cmp	r2, r3
 8012e42:	d90a      	bls.n	8012e5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e48:	f383 8811 	msr	BASEPRI, r3
 8012e4c:	f3bf 8f6f 	isb	sy
 8012e50:	f3bf 8f4f 	dsb	sy
 8012e54:	603b      	str	r3, [r7, #0]
}
 8012e56:	bf00      	nop
 8012e58:	e7fe      	b.n	8012e58 <vPortValidateInterruptPriority+0x60>
	}
 8012e5a:	bf00      	nop
 8012e5c:	3714      	adds	r7, #20
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e64:	4770      	bx	lr
 8012e66:	bf00      	nop
 8012e68:	e000e3f0 	.word	0xe000e3f0
 8012e6c:	20001760 	.word	0x20001760
 8012e70:	e000ed0c 	.word	0xe000ed0c
 8012e74:	20001764 	.word	0x20001764

08012e78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b08a      	sub	sp, #40	; 0x28
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012e80:	2300      	movs	r3, #0
 8012e82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012e84:	f7fe fb04 	bl	8011490 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012e88:	4b5b      	ldr	r3, [pc, #364]	; (8012ff8 <pvPortMalloc+0x180>)
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d101      	bne.n	8012e94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012e90:	f000 f920 	bl	80130d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012e94:	4b59      	ldr	r3, [pc, #356]	; (8012ffc <pvPortMalloc+0x184>)
 8012e96:	681a      	ldr	r2, [r3, #0]
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	4013      	ands	r3, r2
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	f040 8093 	bne.w	8012fc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d01d      	beq.n	8012ee4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012ea8:	2208      	movs	r2, #8
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	4413      	add	r3, r2
 8012eae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	f003 0307 	and.w	r3, r3, #7
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d014      	beq.n	8012ee4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	f023 0307 	bic.w	r3, r3, #7
 8012ec0:	3308      	adds	r3, #8
 8012ec2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	f003 0307 	and.w	r3, r3, #7
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d00a      	beq.n	8012ee4 <pvPortMalloc+0x6c>
	__asm volatile
 8012ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ed2:	f383 8811 	msr	BASEPRI, r3
 8012ed6:	f3bf 8f6f 	isb	sy
 8012eda:	f3bf 8f4f 	dsb	sy
 8012ede:	617b      	str	r3, [r7, #20]
}
 8012ee0:	bf00      	nop
 8012ee2:	e7fe      	b.n	8012ee2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d06e      	beq.n	8012fc8 <pvPortMalloc+0x150>
 8012eea:	4b45      	ldr	r3, [pc, #276]	; (8013000 <pvPortMalloc+0x188>)
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	687a      	ldr	r2, [r7, #4]
 8012ef0:	429a      	cmp	r2, r3
 8012ef2:	d869      	bhi.n	8012fc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012ef4:	4b43      	ldr	r3, [pc, #268]	; (8013004 <pvPortMalloc+0x18c>)
 8012ef6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012ef8:	4b42      	ldr	r3, [pc, #264]	; (8013004 <pvPortMalloc+0x18c>)
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012efe:	e004      	b.n	8012f0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f0c:	685b      	ldr	r3, [r3, #4]
 8012f0e:	687a      	ldr	r2, [r7, #4]
 8012f10:	429a      	cmp	r2, r3
 8012f12:	d903      	bls.n	8012f1c <pvPortMalloc+0xa4>
 8012f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d1f1      	bne.n	8012f00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012f1c:	4b36      	ldr	r3, [pc, #216]	; (8012ff8 <pvPortMalloc+0x180>)
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f22:	429a      	cmp	r2, r3
 8012f24:	d050      	beq.n	8012fc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012f26:	6a3b      	ldr	r3, [r7, #32]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	2208      	movs	r2, #8
 8012f2c:	4413      	add	r3, r2
 8012f2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f32:	681a      	ldr	r2, [r3, #0]
 8012f34:	6a3b      	ldr	r3, [r7, #32]
 8012f36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f3a:	685a      	ldr	r2, [r3, #4]
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	1ad2      	subs	r2, r2, r3
 8012f40:	2308      	movs	r3, #8
 8012f42:	005b      	lsls	r3, r3, #1
 8012f44:	429a      	cmp	r2, r3
 8012f46:	d91f      	bls.n	8012f88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	4413      	add	r3, r2
 8012f4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012f50:	69bb      	ldr	r3, [r7, #24]
 8012f52:	f003 0307 	and.w	r3, r3, #7
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d00a      	beq.n	8012f70 <pvPortMalloc+0xf8>
	__asm volatile
 8012f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f5e:	f383 8811 	msr	BASEPRI, r3
 8012f62:	f3bf 8f6f 	isb	sy
 8012f66:	f3bf 8f4f 	dsb	sy
 8012f6a:	613b      	str	r3, [r7, #16]
}
 8012f6c:	bf00      	nop
 8012f6e:	e7fe      	b.n	8012f6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f72:	685a      	ldr	r2, [r3, #4]
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	1ad2      	subs	r2, r2, r3
 8012f78:	69bb      	ldr	r3, [r7, #24]
 8012f7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f7e:	687a      	ldr	r2, [r7, #4]
 8012f80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012f82:	69b8      	ldr	r0, [r7, #24]
 8012f84:	f000 f908 	bl	8013198 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012f88:	4b1d      	ldr	r3, [pc, #116]	; (8013000 <pvPortMalloc+0x188>)
 8012f8a:	681a      	ldr	r2, [r3, #0]
 8012f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f8e:	685b      	ldr	r3, [r3, #4]
 8012f90:	1ad3      	subs	r3, r2, r3
 8012f92:	4a1b      	ldr	r2, [pc, #108]	; (8013000 <pvPortMalloc+0x188>)
 8012f94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012f96:	4b1a      	ldr	r3, [pc, #104]	; (8013000 <pvPortMalloc+0x188>)
 8012f98:	681a      	ldr	r2, [r3, #0]
 8012f9a:	4b1b      	ldr	r3, [pc, #108]	; (8013008 <pvPortMalloc+0x190>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d203      	bcs.n	8012faa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012fa2:	4b17      	ldr	r3, [pc, #92]	; (8013000 <pvPortMalloc+0x188>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	4a18      	ldr	r2, [pc, #96]	; (8013008 <pvPortMalloc+0x190>)
 8012fa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fac:	685a      	ldr	r2, [r3, #4]
 8012fae:	4b13      	ldr	r3, [pc, #76]	; (8012ffc <pvPortMalloc+0x184>)
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	431a      	orrs	r2, r3
 8012fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fba:	2200      	movs	r2, #0
 8012fbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012fbe:	4b13      	ldr	r3, [pc, #76]	; (801300c <pvPortMalloc+0x194>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	3301      	adds	r3, #1
 8012fc4:	4a11      	ldr	r2, [pc, #68]	; (801300c <pvPortMalloc+0x194>)
 8012fc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012fc8:	f7fe fa70 	bl	80114ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012fcc:	69fb      	ldr	r3, [r7, #28]
 8012fce:	f003 0307 	and.w	r3, r3, #7
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d00a      	beq.n	8012fec <pvPortMalloc+0x174>
	__asm volatile
 8012fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fda:	f383 8811 	msr	BASEPRI, r3
 8012fde:	f3bf 8f6f 	isb	sy
 8012fe2:	f3bf 8f4f 	dsb	sy
 8012fe6:	60fb      	str	r3, [r7, #12]
}
 8012fe8:	bf00      	nop
 8012fea:	e7fe      	b.n	8012fea <pvPortMalloc+0x172>
	return pvReturn;
 8012fec:	69fb      	ldr	r3, [r7, #28]
}
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3728      	adds	r7, #40	; 0x28
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}
 8012ff6:	bf00      	nop
 8012ff8:	20005370 	.word	0x20005370
 8012ffc:	20005384 	.word	0x20005384
 8013000:	20005374 	.word	0x20005374
 8013004:	20005368 	.word	0x20005368
 8013008:	20005378 	.word	0x20005378
 801300c:	2000537c 	.word	0x2000537c

08013010 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b086      	sub	sp, #24
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d04d      	beq.n	80130be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013022:	2308      	movs	r3, #8
 8013024:	425b      	negs	r3, r3
 8013026:	697a      	ldr	r2, [r7, #20]
 8013028:	4413      	add	r3, r2
 801302a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801302c:	697b      	ldr	r3, [r7, #20]
 801302e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013030:	693b      	ldr	r3, [r7, #16]
 8013032:	685a      	ldr	r2, [r3, #4]
 8013034:	4b24      	ldr	r3, [pc, #144]	; (80130c8 <vPortFree+0xb8>)
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	4013      	ands	r3, r2
 801303a:	2b00      	cmp	r3, #0
 801303c:	d10a      	bne.n	8013054 <vPortFree+0x44>
	__asm volatile
 801303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013042:	f383 8811 	msr	BASEPRI, r3
 8013046:	f3bf 8f6f 	isb	sy
 801304a:	f3bf 8f4f 	dsb	sy
 801304e:	60fb      	str	r3, [r7, #12]
}
 8013050:	bf00      	nop
 8013052:	e7fe      	b.n	8013052 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013054:	693b      	ldr	r3, [r7, #16]
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d00a      	beq.n	8013072 <vPortFree+0x62>
	__asm volatile
 801305c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013060:	f383 8811 	msr	BASEPRI, r3
 8013064:	f3bf 8f6f 	isb	sy
 8013068:	f3bf 8f4f 	dsb	sy
 801306c:	60bb      	str	r3, [r7, #8]
}
 801306e:	bf00      	nop
 8013070:	e7fe      	b.n	8013070 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013072:	693b      	ldr	r3, [r7, #16]
 8013074:	685a      	ldr	r2, [r3, #4]
 8013076:	4b14      	ldr	r3, [pc, #80]	; (80130c8 <vPortFree+0xb8>)
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	4013      	ands	r3, r2
 801307c:	2b00      	cmp	r3, #0
 801307e:	d01e      	beq.n	80130be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013080:	693b      	ldr	r3, [r7, #16]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d11a      	bne.n	80130be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013088:	693b      	ldr	r3, [r7, #16]
 801308a:	685a      	ldr	r2, [r3, #4]
 801308c:	4b0e      	ldr	r3, [pc, #56]	; (80130c8 <vPortFree+0xb8>)
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	43db      	mvns	r3, r3
 8013092:	401a      	ands	r2, r3
 8013094:	693b      	ldr	r3, [r7, #16]
 8013096:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013098:	f7fe f9fa 	bl	8011490 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801309c:	693b      	ldr	r3, [r7, #16]
 801309e:	685a      	ldr	r2, [r3, #4]
 80130a0:	4b0a      	ldr	r3, [pc, #40]	; (80130cc <vPortFree+0xbc>)
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	4413      	add	r3, r2
 80130a6:	4a09      	ldr	r2, [pc, #36]	; (80130cc <vPortFree+0xbc>)
 80130a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80130aa:	6938      	ldr	r0, [r7, #16]
 80130ac:	f000 f874 	bl	8013198 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80130b0:	4b07      	ldr	r3, [pc, #28]	; (80130d0 <vPortFree+0xc0>)
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	3301      	adds	r3, #1
 80130b6:	4a06      	ldr	r2, [pc, #24]	; (80130d0 <vPortFree+0xc0>)
 80130b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80130ba:	f7fe f9f7 	bl	80114ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80130be:	bf00      	nop
 80130c0:	3718      	adds	r7, #24
 80130c2:	46bd      	mov	sp, r7
 80130c4:	bd80      	pop	{r7, pc}
 80130c6:	bf00      	nop
 80130c8:	20005384 	.word	0x20005384
 80130cc:	20005374 	.word	0x20005374
 80130d0:	20005380 	.word	0x20005380

080130d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80130d4:	b480      	push	{r7}
 80130d6:	b085      	sub	sp, #20
 80130d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80130da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80130de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80130e0:	4b27      	ldr	r3, [pc, #156]	; (8013180 <prvHeapInit+0xac>)
 80130e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	f003 0307 	and.w	r3, r3, #7
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d00c      	beq.n	8013108 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	3307      	adds	r3, #7
 80130f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	f023 0307 	bic.w	r3, r3, #7
 80130fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80130fc:	68ba      	ldr	r2, [r7, #8]
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	1ad3      	subs	r3, r2, r3
 8013102:	4a1f      	ldr	r2, [pc, #124]	; (8013180 <prvHeapInit+0xac>)
 8013104:	4413      	add	r3, r2
 8013106:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801310c:	4a1d      	ldr	r2, [pc, #116]	; (8013184 <prvHeapInit+0xb0>)
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013112:	4b1c      	ldr	r3, [pc, #112]	; (8013184 <prvHeapInit+0xb0>)
 8013114:	2200      	movs	r2, #0
 8013116:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	68ba      	ldr	r2, [r7, #8]
 801311c:	4413      	add	r3, r2
 801311e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013120:	2208      	movs	r2, #8
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	1a9b      	subs	r3, r3, r2
 8013126:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	f023 0307 	bic.w	r3, r3, #7
 801312e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	4a15      	ldr	r2, [pc, #84]	; (8013188 <prvHeapInit+0xb4>)
 8013134:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013136:	4b14      	ldr	r3, [pc, #80]	; (8013188 <prvHeapInit+0xb4>)
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	2200      	movs	r2, #0
 801313c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801313e:	4b12      	ldr	r3, [pc, #72]	; (8013188 <prvHeapInit+0xb4>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	2200      	movs	r2, #0
 8013144:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801314a:	683b      	ldr	r3, [r7, #0]
 801314c:	68fa      	ldr	r2, [r7, #12]
 801314e:	1ad2      	subs	r2, r2, r3
 8013150:	683b      	ldr	r3, [r7, #0]
 8013152:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013154:	4b0c      	ldr	r3, [pc, #48]	; (8013188 <prvHeapInit+0xb4>)
 8013156:	681a      	ldr	r2, [r3, #0]
 8013158:	683b      	ldr	r3, [r7, #0]
 801315a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801315c:	683b      	ldr	r3, [r7, #0]
 801315e:	685b      	ldr	r3, [r3, #4]
 8013160:	4a0a      	ldr	r2, [pc, #40]	; (801318c <prvHeapInit+0xb8>)
 8013162:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	685b      	ldr	r3, [r3, #4]
 8013168:	4a09      	ldr	r2, [pc, #36]	; (8013190 <prvHeapInit+0xbc>)
 801316a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801316c:	4b09      	ldr	r3, [pc, #36]	; (8013194 <prvHeapInit+0xc0>)
 801316e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013172:	601a      	str	r2, [r3, #0]
}
 8013174:	bf00      	nop
 8013176:	3714      	adds	r7, #20
 8013178:	46bd      	mov	sp, r7
 801317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317e:	4770      	bx	lr
 8013180:	20001768 	.word	0x20001768
 8013184:	20005368 	.word	0x20005368
 8013188:	20005370 	.word	0x20005370
 801318c:	20005378 	.word	0x20005378
 8013190:	20005374 	.word	0x20005374
 8013194:	20005384 	.word	0x20005384

08013198 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013198:	b480      	push	{r7}
 801319a:	b085      	sub	sp, #20
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80131a0:	4b28      	ldr	r3, [pc, #160]	; (8013244 <prvInsertBlockIntoFreeList+0xac>)
 80131a2:	60fb      	str	r3, [r7, #12]
 80131a4:	e002      	b.n	80131ac <prvInsertBlockIntoFreeList+0x14>
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	60fb      	str	r3, [r7, #12]
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	687a      	ldr	r2, [r7, #4]
 80131b2:	429a      	cmp	r2, r3
 80131b4:	d8f7      	bhi.n	80131a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	685b      	ldr	r3, [r3, #4]
 80131be:	68ba      	ldr	r2, [r7, #8]
 80131c0:	4413      	add	r3, r2
 80131c2:	687a      	ldr	r2, [r7, #4]
 80131c4:	429a      	cmp	r2, r3
 80131c6:	d108      	bne.n	80131da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	685a      	ldr	r2, [r3, #4]
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	685b      	ldr	r3, [r3, #4]
 80131d0:	441a      	add	r2, r3
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	685b      	ldr	r3, [r3, #4]
 80131e2:	68ba      	ldr	r2, [r7, #8]
 80131e4:	441a      	add	r2, r3
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	429a      	cmp	r2, r3
 80131ec:	d118      	bne.n	8013220 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	681a      	ldr	r2, [r3, #0]
 80131f2:	4b15      	ldr	r3, [pc, #84]	; (8013248 <prvInsertBlockIntoFreeList+0xb0>)
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	429a      	cmp	r2, r3
 80131f8:	d00d      	beq.n	8013216 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	685a      	ldr	r2, [r3, #4]
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	685b      	ldr	r3, [r3, #4]
 8013204:	441a      	add	r2, r3
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	681a      	ldr	r2, [r3, #0]
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	601a      	str	r2, [r3, #0]
 8013214:	e008      	b.n	8013228 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013216:	4b0c      	ldr	r3, [pc, #48]	; (8013248 <prvInsertBlockIntoFreeList+0xb0>)
 8013218:	681a      	ldr	r2, [r3, #0]
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	601a      	str	r2, [r3, #0]
 801321e:	e003      	b.n	8013228 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	681a      	ldr	r2, [r3, #0]
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013228:	68fa      	ldr	r2, [r7, #12]
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	429a      	cmp	r2, r3
 801322e:	d002      	beq.n	8013236 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	687a      	ldr	r2, [r7, #4]
 8013234:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013236:	bf00      	nop
 8013238:	3714      	adds	r7, #20
 801323a:	46bd      	mov	sp, r7
 801323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013240:	4770      	bx	lr
 8013242:	bf00      	nop
 8013244:	20005368 	.word	0x20005368
 8013248:	20005370 	.word	0x20005370

0801324c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801324c:	b580      	push	{r7, lr}
 801324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013250:	2200      	movs	r2, #0
 8013252:	4912      	ldr	r1, [pc, #72]	; (801329c <MX_USB_DEVICE_Init+0x50>)
 8013254:	4812      	ldr	r0, [pc, #72]	; (80132a0 <MX_USB_DEVICE_Init+0x54>)
 8013256:	f7f9 ff21 	bl	800d09c <USBD_Init>
 801325a:	4603      	mov	r3, r0
 801325c:	2b00      	cmp	r3, #0
 801325e:	d001      	beq.n	8013264 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013260:	f7ef fc22 	bl	8002aa8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8013264:	490f      	ldr	r1, [pc, #60]	; (80132a4 <MX_USB_DEVICE_Init+0x58>)
 8013266:	480e      	ldr	r0, [pc, #56]	; (80132a0 <MX_USB_DEVICE_Init+0x54>)
 8013268:	f7f9 ff48 	bl	800d0fc <USBD_RegisterClass>
 801326c:	4603      	mov	r3, r0
 801326e:	2b00      	cmp	r3, #0
 8013270:	d001      	beq.n	8013276 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013272:	f7ef fc19 	bl	8002aa8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8013276:	490c      	ldr	r1, [pc, #48]	; (80132a8 <MX_USB_DEVICE_Init+0x5c>)
 8013278:	4809      	ldr	r0, [pc, #36]	; (80132a0 <MX_USB_DEVICE_Init+0x54>)
 801327a:	f7f9 fe39 	bl	800cef0 <USBD_CDC_RegisterInterface>
 801327e:	4603      	mov	r3, r0
 8013280:	2b00      	cmp	r3, #0
 8013282:	d001      	beq.n	8013288 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013284:	f7ef fc10 	bl	8002aa8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013288:	4805      	ldr	r0, [pc, #20]	; (80132a0 <MX_USB_DEVICE_Init+0x54>)
 801328a:	f7f9 ff6d 	bl	800d168 <USBD_Start>
 801328e:	4603      	mov	r3, r0
 8013290:	2b00      	cmp	r3, #0
 8013292:	d001      	beq.n	8013298 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013294:	f7ef fc08 	bl	8002aa8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013298:	bf00      	nop
 801329a:	bd80      	pop	{r7, pc}
 801329c:	200000c4 	.word	0x200000c4
 80132a0:	20005388 	.word	0x20005388
 80132a4:	2000002c 	.word	0x2000002c
 80132a8:	200000b0 	.word	0x200000b0

080132ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80132b0:	2200      	movs	r2, #0
 80132b2:	4905      	ldr	r1, [pc, #20]	; (80132c8 <CDC_Init_FS+0x1c>)
 80132b4:	4805      	ldr	r0, [pc, #20]	; (80132cc <CDC_Init_FS+0x20>)
 80132b6:	f7f9 fe35 	bl	800cf24 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80132ba:	4905      	ldr	r1, [pc, #20]	; (80132d0 <CDC_Init_FS+0x24>)
 80132bc:	4803      	ldr	r0, [pc, #12]	; (80132cc <CDC_Init_FS+0x20>)
 80132be:	f7f9 fe53 	bl	800cf68 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80132c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80132c4:	4618      	mov	r0, r3
 80132c6:	bd80      	pop	{r7, pc}
 80132c8:	20005e70 	.word	0x20005e70
 80132cc:	20005388 	.word	0x20005388
 80132d0:	20005670 	.word	0x20005670

080132d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80132d4:	b480      	push	{r7}
 80132d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80132d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80132da:	4618      	mov	r0, r3
 80132dc:	46bd      	mov	sp, r7
 80132de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e2:	4770      	bx	lr

080132e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80132e4:	b480      	push	{r7}
 80132e6:	b083      	sub	sp, #12
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	4603      	mov	r3, r0
 80132ec:	6039      	str	r1, [r7, #0]
 80132ee:	71fb      	strb	r3, [r7, #7]
 80132f0:	4613      	mov	r3, r2
 80132f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80132f4:	79fb      	ldrb	r3, [r7, #7]
 80132f6:	2b23      	cmp	r3, #35	; 0x23
 80132f8:	d84a      	bhi.n	8013390 <CDC_Control_FS+0xac>
 80132fa:	a201      	add	r2, pc, #4	; (adr r2, 8013300 <CDC_Control_FS+0x1c>)
 80132fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013300:	08013391 	.word	0x08013391
 8013304:	08013391 	.word	0x08013391
 8013308:	08013391 	.word	0x08013391
 801330c:	08013391 	.word	0x08013391
 8013310:	08013391 	.word	0x08013391
 8013314:	08013391 	.word	0x08013391
 8013318:	08013391 	.word	0x08013391
 801331c:	08013391 	.word	0x08013391
 8013320:	08013391 	.word	0x08013391
 8013324:	08013391 	.word	0x08013391
 8013328:	08013391 	.word	0x08013391
 801332c:	08013391 	.word	0x08013391
 8013330:	08013391 	.word	0x08013391
 8013334:	08013391 	.word	0x08013391
 8013338:	08013391 	.word	0x08013391
 801333c:	08013391 	.word	0x08013391
 8013340:	08013391 	.word	0x08013391
 8013344:	08013391 	.word	0x08013391
 8013348:	08013391 	.word	0x08013391
 801334c:	08013391 	.word	0x08013391
 8013350:	08013391 	.word	0x08013391
 8013354:	08013391 	.word	0x08013391
 8013358:	08013391 	.word	0x08013391
 801335c:	08013391 	.word	0x08013391
 8013360:	08013391 	.word	0x08013391
 8013364:	08013391 	.word	0x08013391
 8013368:	08013391 	.word	0x08013391
 801336c:	08013391 	.word	0x08013391
 8013370:	08013391 	.word	0x08013391
 8013374:	08013391 	.word	0x08013391
 8013378:	08013391 	.word	0x08013391
 801337c:	08013391 	.word	0x08013391
 8013380:	08013391 	.word	0x08013391
 8013384:	08013391 	.word	0x08013391
 8013388:	08013391 	.word	0x08013391
 801338c:	08013391 	.word	0x08013391
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013390:	bf00      	nop
  }

  return (USBD_OK);
 8013392:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013394:	4618      	mov	r0, r3
 8013396:	370c      	adds	r7, #12
 8013398:	46bd      	mov	sp, r7
 801339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339e:	4770      	bx	lr

080133a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b082      	sub	sp, #8
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
 80133a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80133aa:	6879      	ldr	r1, [r7, #4]
 80133ac:	481b      	ldr	r0, [pc, #108]	; (801341c <CDC_Receive_FS+0x7c>)
 80133ae:	f7f9 fddb 	bl	800cf68 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80133b2:	481a      	ldr	r0, [pc, #104]	; (801341c <CDC_Receive_FS+0x7c>)
 80133b4:	f7f9 fe3c 	bl	800d030 <USBD_CDC_ReceivePacket>

	if (Buf[0] == '\r') {
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	781b      	ldrb	r3, [r3, #0]
 80133bc:	2b0d      	cmp	r3, #13
 80133be:	d114      	bne.n	80133ea <CDC_Receive_FS+0x4a>
		memcpy(usb_rx_buffer.buffer, _buffer.buffer, sizeof(usb_rx_buffer.buffer));
 80133c0:	4a17      	ldr	r2, [pc, #92]	; (8013420 <CDC_Receive_FS+0x80>)
 80133c2:	4b18      	ldr	r3, [pc, #96]	; (8013424 <CDC_Receive_FS+0x84>)
 80133c4:	cb03      	ldmia	r3!, {r0, r1}
 80133c6:	6010      	str	r0, [r2, #0]
 80133c8:	6051      	str	r1, [r2, #4]
		memset(_buffer.buffer, 0, EVENT_RECEIVE_USB);
 80133ca:	2204      	movs	r2, #4
 80133cc:	2100      	movs	r1, #0
 80133ce:	4815      	ldr	r0, [pc, #84]	; (8013424 <CDC_Receive_FS+0x84>)
 80133d0:	f000 fe34 	bl	801403c <memset>
		_buffer.pos = 0;
 80133d4:	4b13      	ldr	r3, [pc, #76]	; (8013424 <CDC_Receive_FS+0x84>)
 80133d6:	2200      	movs	r2, #0
 80133d8:	811a      	strh	r2, [r3, #8]
		osEventFlagsSet(EventReceiveHandle, EVENT_RECEIVE_USB);
 80133da:	4b13      	ldr	r3, [pc, #76]	; (8013428 <CDC_Receive_FS+0x88>)
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	2104      	movs	r1, #4
 80133e0:	4618      	mov	r0, r3
 80133e2:	f7fc f927 	bl	800f634 <osEventFlagsSet>
		return (USBD_OK);
 80133e6:	2300      	movs	r3, #0
 80133e8:	e014      	b.n	8013414 <CDC_Receive_FS+0x74>
	}

	_buffer.buffer[_buffer.pos++] = Buf[0];
 80133ea:	4b0e      	ldr	r3, [pc, #56]	; (8013424 <CDC_Receive_FS+0x84>)
 80133ec:	891b      	ldrh	r3, [r3, #8]
 80133ee:	b29b      	uxth	r3, r3
 80133f0:	1c5a      	adds	r2, r3, #1
 80133f2:	b291      	uxth	r1, r2
 80133f4:	4a0b      	ldr	r2, [pc, #44]	; (8013424 <CDC_Receive_FS+0x84>)
 80133f6:	8111      	strh	r1, [r2, #8]
 80133f8:	461a      	mov	r2, r3
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	7819      	ldrb	r1, [r3, #0]
 80133fe:	4b09      	ldr	r3, [pc, #36]	; (8013424 <CDC_Receive_FS+0x84>)
 8013400:	5499      	strb	r1, [r3, r2]
	if (_buffer.pos > USB_BUFFER_SIZE) {
 8013402:	4b08      	ldr	r3, [pc, #32]	; (8013424 <CDC_Receive_FS+0x84>)
 8013404:	891b      	ldrh	r3, [r3, #8]
 8013406:	b29b      	uxth	r3, r3
 8013408:	2b08      	cmp	r3, #8
 801340a:	d902      	bls.n	8013412 <CDC_Receive_FS+0x72>

		_buffer.pos = 0;
 801340c:	4b05      	ldr	r3, [pc, #20]	; (8013424 <CDC_Receive_FS+0x84>)
 801340e:	2200      	movs	r2, #0
 8013410:	811a      	strh	r2, [r3, #8]
	}

	return (USBD_OK);
 8013412:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013414:	4618      	mov	r0, r3
 8013416:	3708      	adds	r7, #8
 8013418:	46bd      	mov	sp, r7
 801341a:	bd80      	pop	{r7, pc}
 801341c:	20005388 	.word	0x20005388
 8013420:	200003cc 	.word	0x200003cc
 8013424:	20005664 	.word	0x20005664
 8013428:	200003b0 	.word	0x200003b0

0801342c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b084      	sub	sp, #16
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
 8013434:	460b      	mov	r3, r1
 8013436:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8013438:	2300      	movs	r3, #0
 801343a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801343c:	4b0d      	ldr	r3, [pc, #52]	; (8013474 <CDC_Transmit_FS+0x48>)
 801343e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013442:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013444:	68bb      	ldr	r3, [r7, #8]
 8013446:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801344a:	2b00      	cmp	r3, #0
 801344c:	d001      	beq.n	8013452 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801344e:	2301      	movs	r3, #1
 8013450:	e00b      	b.n	801346a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8013452:	887b      	ldrh	r3, [r7, #2]
 8013454:	461a      	mov	r2, r3
 8013456:	6879      	ldr	r1, [r7, #4]
 8013458:	4806      	ldr	r0, [pc, #24]	; (8013474 <CDC_Transmit_FS+0x48>)
 801345a:	f7f9 fd63 	bl	800cf24 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801345e:	4805      	ldr	r0, [pc, #20]	; (8013474 <CDC_Transmit_FS+0x48>)
 8013460:	f7f9 fda0 	bl	800cfa4 <USBD_CDC_TransmitPacket>
 8013464:	4603      	mov	r3, r0
 8013466:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8013468:	7bfb      	ldrb	r3, [r7, #15]
}
 801346a:	4618      	mov	r0, r3
 801346c:	3710      	adds	r7, #16
 801346e:	46bd      	mov	sp, r7
 8013470:	bd80      	pop	{r7, pc}
 8013472:	bf00      	nop
 8013474:	20005388 	.word	0x20005388

08013478 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013478:	b480      	push	{r7}
 801347a:	b087      	sub	sp, #28
 801347c:	af00      	add	r7, sp, #0
 801347e:	60f8      	str	r0, [r7, #12]
 8013480:	60b9      	str	r1, [r7, #8]
 8013482:	4613      	mov	r3, r2
 8013484:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013486:	2300      	movs	r3, #0
 8013488:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801348a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801348e:	4618      	mov	r0, r3
 8013490:	371c      	adds	r7, #28
 8013492:	46bd      	mov	sp, r7
 8013494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013498:	4770      	bx	lr
	...

0801349c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801349c:	b480      	push	{r7}
 801349e:	b083      	sub	sp, #12
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	4603      	mov	r3, r0
 80134a4:	6039      	str	r1, [r7, #0]
 80134a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80134a8:	683b      	ldr	r3, [r7, #0]
 80134aa:	2212      	movs	r2, #18
 80134ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80134ae:	4b03      	ldr	r3, [pc, #12]	; (80134bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80134b0:	4618      	mov	r0, r3
 80134b2:	370c      	adds	r7, #12
 80134b4:	46bd      	mov	sp, r7
 80134b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ba:	4770      	bx	lr
 80134bc:	200000e4 	.word	0x200000e4

080134c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80134c0:	b480      	push	{r7}
 80134c2:	b083      	sub	sp, #12
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	4603      	mov	r3, r0
 80134c8:	6039      	str	r1, [r7, #0]
 80134ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80134cc:	683b      	ldr	r3, [r7, #0]
 80134ce:	2204      	movs	r2, #4
 80134d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80134d2:	4b03      	ldr	r3, [pc, #12]	; (80134e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80134d4:	4618      	mov	r0, r3
 80134d6:	370c      	adds	r7, #12
 80134d8:	46bd      	mov	sp, r7
 80134da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134de:	4770      	bx	lr
 80134e0:	20000104 	.word	0x20000104

080134e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b082      	sub	sp, #8
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	4603      	mov	r3, r0
 80134ec:	6039      	str	r1, [r7, #0]
 80134ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80134f0:	79fb      	ldrb	r3, [r7, #7]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d105      	bne.n	8013502 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80134f6:	683a      	ldr	r2, [r7, #0]
 80134f8:	4907      	ldr	r1, [pc, #28]	; (8013518 <USBD_FS_ProductStrDescriptor+0x34>)
 80134fa:	4808      	ldr	r0, [pc, #32]	; (801351c <USBD_FS_ProductStrDescriptor+0x38>)
 80134fc:	f7fb f80a 	bl	800e514 <USBD_GetString>
 8013500:	e004      	b.n	801350c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013502:	683a      	ldr	r2, [r7, #0]
 8013504:	4904      	ldr	r1, [pc, #16]	; (8013518 <USBD_FS_ProductStrDescriptor+0x34>)
 8013506:	4805      	ldr	r0, [pc, #20]	; (801351c <USBD_FS_ProductStrDescriptor+0x38>)
 8013508:	f7fb f804 	bl	800e514 <USBD_GetString>
  }
  return USBD_StrDesc;
 801350c:	4b02      	ldr	r3, [pc, #8]	; (8013518 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801350e:	4618      	mov	r0, r3
 8013510:	3708      	adds	r7, #8
 8013512:	46bd      	mov	sp, r7
 8013514:	bd80      	pop	{r7, pc}
 8013516:	bf00      	nop
 8013518:	20006670 	.word	0x20006670
 801351c:	08016e54 	.word	0x08016e54

08013520 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b082      	sub	sp, #8
 8013524:	af00      	add	r7, sp, #0
 8013526:	4603      	mov	r3, r0
 8013528:	6039      	str	r1, [r7, #0]
 801352a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801352c:	683a      	ldr	r2, [r7, #0]
 801352e:	4904      	ldr	r1, [pc, #16]	; (8013540 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013530:	4804      	ldr	r0, [pc, #16]	; (8013544 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8013532:	f7fa ffef 	bl	800e514 <USBD_GetString>
  return USBD_StrDesc;
 8013536:	4b02      	ldr	r3, [pc, #8]	; (8013540 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013538:	4618      	mov	r0, r3
 801353a:	3708      	adds	r7, #8
 801353c:	46bd      	mov	sp, r7
 801353e:	bd80      	pop	{r7, pc}
 8013540:	20006670 	.word	0x20006670
 8013544:	08016e6c 	.word	0x08016e6c

08013548 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013548:	b580      	push	{r7, lr}
 801354a:	b082      	sub	sp, #8
 801354c:	af00      	add	r7, sp, #0
 801354e:	4603      	mov	r3, r0
 8013550:	6039      	str	r1, [r7, #0]
 8013552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013554:	683b      	ldr	r3, [r7, #0]
 8013556:	221a      	movs	r2, #26
 8013558:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801355a:	f000 f855 	bl	8013608 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801355e:	4b02      	ldr	r3, [pc, #8]	; (8013568 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013560:	4618      	mov	r0, r3
 8013562:	3708      	adds	r7, #8
 8013564:	46bd      	mov	sp, r7
 8013566:	bd80      	pop	{r7, pc}
 8013568:	20000108 	.word	0x20000108

0801356c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801356c:	b580      	push	{r7, lr}
 801356e:	b082      	sub	sp, #8
 8013570:	af00      	add	r7, sp, #0
 8013572:	4603      	mov	r3, r0
 8013574:	6039      	str	r1, [r7, #0]
 8013576:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013578:	79fb      	ldrb	r3, [r7, #7]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d105      	bne.n	801358a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801357e:	683a      	ldr	r2, [r7, #0]
 8013580:	4907      	ldr	r1, [pc, #28]	; (80135a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013582:	4808      	ldr	r0, [pc, #32]	; (80135a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013584:	f7fa ffc6 	bl	800e514 <USBD_GetString>
 8013588:	e004      	b.n	8013594 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801358a:	683a      	ldr	r2, [r7, #0]
 801358c:	4904      	ldr	r1, [pc, #16]	; (80135a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801358e:	4805      	ldr	r0, [pc, #20]	; (80135a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013590:	f7fa ffc0 	bl	800e514 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013594:	4b02      	ldr	r3, [pc, #8]	; (80135a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013596:	4618      	mov	r0, r3
 8013598:	3708      	adds	r7, #8
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}
 801359e:	bf00      	nop
 80135a0:	20006670 	.word	0x20006670
 80135a4:	08016e80 	.word	0x08016e80

080135a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b082      	sub	sp, #8
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	4603      	mov	r3, r0
 80135b0:	6039      	str	r1, [r7, #0]
 80135b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80135b4:	79fb      	ldrb	r3, [r7, #7]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d105      	bne.n	80135c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80135ba:	683a      	ldr	r2, [r7, #0]
 80135bc:	4907      	ldr	r1, [pc, #28]	; (80135dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80135be:	4808      	ldr	r0, [pc, #32]	; (80135e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80135c0:	f7fa ffa8 	bl	800e514 <USBD_GetString>
 80135c4:	e004      	b.n	80135d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80135c6:	683a      	ldr	r2, [r7, #0]
 80135c8:	4904      	ldr	r1, [pc, #16]	; (80135dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80135ca:	4805      	ldr	r0, [pc, #20]	; (80135e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80135cc:	f7fa ffa2 	bl	800e514 <USBD_GetString>
  }
  return USBD_StrDesc;
 80135d0:	4b02      	ldr	r3, [pc, #8]	; (80135dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80135d2:	4618      	mov	r0, r3
 80135d4:	3708      	adds	r7, #8
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bd80      	pop	{r7, pc}
 80135da:	bf00      	nop
 80135dc:	20006670 	.word	0x20006670
 80135e0:	08016e8c 	.word	0x08016e8c

080135e4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80135e4:	b480      	push	{r7}
 80135e6:	b083      	sub	sp, #12
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	4603      	mov	r3, r0
 80135ec:	6039      	str	r1, [r7, #0]
 80135ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80135f0:	683b      	ldr	r3, [r7, #0]
 80135f2:	220c      	movs	r2, #12
 80135f4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80135f6:	4b03      	ldr	r3, [pc, #12]	; (8013604 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80135f8:	4618      	mov	r0, r3
 80135fa:	370c      	adds	r7, #12
 80135fc:	46bd      	mov	sp, r7
 80135fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013602:	4770      	bx	lr
 8013604:	200000f8 	.word	0x200000f8

08013608 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013608:	b580      	push	{r7, lr}
 801360a:	b084      	sub	sp, #16
 801360c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801360e:	4b0f      	ldr	r3, [pc, #60]	; (801364c <Get_SerialNum+0x44>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013614:	4b0e      	ldr	r3, [pc, #56]	; (8013650 <Get_SerialNum+0x48>)
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801361a:	4b0e      	ldr	r3, [pc, #56]	; (8013654 <Get_SerialNum+0x4c>)
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013620:	68fa      	ldr	r2, [r7, #12]
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	4413      	add	r3, r2
 8013626:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d009      	beq.n	8013642 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801362e:	2208      	movs	r2, #8
 8013630:	4909      	ldr	r1, [pc, #36]	; (8013658 <Get_SerialNum+0x50>)
 8013632:	68f8      	ldr	r0, [r7, #12]
 8013634:	f000 f814 	bl	8013660 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013638:	2204      	movs	r2, #4
 801363a:	4908      	ldr	r1, [pc, #32]	; (801365c <Get_SerialNum+0x54>)
 801363c:	68b8      	ldr	r0, [r7, #8]
 801363e:	f000 f80f 	bl	8013660 <IntToUnicode>
  }
}
 8013642:	bf00      	nop
 8013644:	3710      	adds	r7, #16
 8013646:	46bd      	mov	sp, r7
 8013648:	bd80      	pop	{r7, pc}
 801364a:	bf00      	nop
 801364c:	1fff7a10 	.word	0x1fff7a10
 8013650:	1fff7a14 	.word	0x1fff7a14
 8013654:	1fff7a18 	.word	0x1fff7a18
 8013658:	2000010a 	.word	0x2000010a
 801365c:	2000011a 	.word	0x2000011a

08013660 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013660:	b480      	push	{r7}
 8013662:	b087      	sub	sp, #28
 8013664:	af00      	add	r7, sp, #0
 8013666:	60f8      	str	r0, [r7, #12]
 8013668:	60b9      	str	r1, [r7, #8]
 801366a:	4613      	mov	r3, r2
 801366c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801366e:	2300      	movs	r3, #0
 8013670:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013672:	2300      	movs	r3, #0
 8013674:	75fb      	strb	r3, [r7, #23]
 8013676:	e027      	b.n	80136c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	0f1b      	lsrs	r3, r3, #28
 801367c:	2b09      	cmp	r3, #9
 801367e:	d80b      	bhi.n	8013698 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	0f1b      	lsrs	r3, r3, #28
 8013684:	b2da      	uxtb	r2, r3
 8013686:	7dfb      	ldrb	r3, [r7, #23]
 8013688:	005b      	lsls	r3, r3, #1
 801368a:	4619      	mov	r1, r3
 801368c:	68bb      	ldr	r3, [r7, #8]
 801368e:	440b      	add	r3, r1
 8013690:	3230      	adds	r2, #48	; 0x30
 8013692:	b2d2      	uxtb	r2, r2
 8013694:	701a      	strb	r2, [r3, #0]
 8013696:	e00a      	b.n	80136ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	0f1b      	lsrs	r3, r3, #28
 801369c:	b2da      	uxtb	r2, r3
 801369e:	7dfb      	ldrb	r3, [r7, #23]
 80136a0:	005b      	lsls	r3, r3, #1
 80136a2:	4619      	mov	r1, r3
 80136a4:	68bb      	ldr	r3, [r7, #8]
 80136a6:	440b      	add	r3, r1
 80136a8:	3237      	adds	r2, #55	; 0x37
 80136aa:	b2d2      	uxtb	r2, r2
 80136ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	011b      	lsls	r3, r3, #4
 80136b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80136b4:	7dfb      	ldrb	r3, [r7, #23]
 80136b6:	005b      	lsls	r3, r3, #1
 80136b8:	3301      	adds	r3, #1
 80136ba:	68ba      	ldr	r2, [r7, #8]
 80136bc:	4413      	add	r3, r2
 80136be:	2200      	movs	r2, #0
 80136c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80136c2:	7dfb      	ldrb	r3, [r7, #23]
 80136c4:	3301      	adds	r3, #1
 80136c6:	75fb      	strb	r3, [r7, #23]
 80136c8:	7dfa      	ldrb	r2, [r7, #23]
 80136ca:	79fb      	ldrb	r3, [r7, #7]
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d3d3      	bcc.n	8013678 <IntToUnicode+0x18>
  }
}
 80136d0:	bf00      	nop
 80136d2:	bf00      	nop
 80136d4:	371c      	adds	r7, #28
 80136d6:	46bd      	mov	sp, r7
 80136d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136dc:	4770      	bx	lr
	...

080136e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b0a0      	sub	sp, #128	; 0x80
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80136e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80136ec:	2200      	movs	r2, #0
 80136ee:	601a      	str	r2, [r3, #0]
 80136f0:	605a      	str	r2, [r3, #4]
 80136f2:	609a      	str	r2, [r3, #8]
 80136f4:	60da      	str	r2, [r3, #12]
 80136f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80136f8:	f107 0310 	add.w	r3, r7, #16
 80136fc:	225c      	movs	r2, #92	; 0x5c
 80136fe:	2100      	movs	r1, #0
 8013700:	4618      	mov	r0, r3
 8013702:	f000 fc9b 	bl	801403c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801370e:	d149      	bne.n	80137a4 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8013710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013714:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8013716:	2300      	movs	r3, #0
 8013718:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801371a:	f107 0310 	add.w	r3, r7, #16
 801371e:	4618      	mov	r0, r3
 8013720:	f7f4 f83a 	bl	8007798 <HAL_RCCEx_PeriphCLKConfig>
 8013724:	4603      	mov	r3, r0
 8013726:	2b00      	cmp	r3, #0
 8013728:	d001      	beq.n	801372e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 801372a:	f7ef f9bd 	bl	8002aa8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801372e:	2300      	movs	r3, #0
 8013730:	60fb      	str	r3, [r7, #12]
 8013732:	4b1e      	ldr	r3, [pc, #120]	; (80137ac <HAL_PCD_MspInit+0xcc>)
 8013734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013736:	4a1d      	ldr	r2, [pc, #116]	; (80137ac <HAL_PCD_MspInit+0xcc>)
 8013738:	f043 0301 	orr.w	r3, r3, #1
 801373c:	6313      	str	r3, [r2, #48]	; 0x30
 801373e:	4b1b      	ldr	r3, [pc, #108]	; (80137ac <HAL_PCD_MspInit+0xcc>)
 8013740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013742:	f003 0301 	and.w	r3, r3, #1
 8013746:	60fb      	str	r3, [r7, #12]
 8013748:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801374a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801374e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013750:	2302      	movs	r3, #2
 8013752:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013754:	2300      	movs	r3, #0
 8013756:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013758:	2303      	movs	r3, #3
 801375a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801375c:	230a      	movs	r3, #10
 801375e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013760:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013764:	4619      	mov	r1, r3
 8013766:	4812      	ldr	r0, [pc, #72]	; (80137b0 <HAL_PCD_MspInit+0xd0>)
 8013768:	f7f0 fdec 	bl	8004344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801376c:	4b0f      	ldr	r3, [pc, #60]	; (80137ac <HAL_PCD_MspInit+0xcc>)
 801376e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013770:	4a0e      	ldr	r2, [pc, #56]	; (80137ac <HAL_PCD_MspInit+0xcc>)
 8013772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013776:	6353      	str	r3, [r2, #52]	; 0x34
 8013778:	2300      	movs	r3, #0
 801377a:	60bb      	str	r3, [r7, #8]
 801377c:	4b0b      	ldr	r3, [pc, #44]	; (80137ac <HAL_PCD_MspInit+0xcc>)
 801377e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013780:	4a0a      	ldr	r2, [pc, #40]	; (80137ac <HAL_PCD_MspInit+0xcc>)
 8013782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013786:	6453      	str	r3, [r2, #68]	; 0x44
 8013788:	4b08      	ldr	r3, [pc, #32]	; (80137ac <HAL_PCD_MspInit+0xcc>)
 801378a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801378c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013790:	60bb      	str	r3, [r7, #8]
 8013792:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013794:	2200      	movs	r2, #0
 8013796:	2105      	movs	r1, #5
 8013798:	2043      	movs	r0, #67	; 0x43
 801379a:	f7f0 fd17 	bl	80041cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801379e:	2043      	movs	r0, #67	; 0x43
 80137a0:	f7f0 fd30 	bl	8004204 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80137a4:	bf00      	nop
 80137a6:	3780      	adds	r7, #128	; 0x80
 80137a8:	46bd      	mov	sp, r7
 80137aa:	bd80      	pop	{r7, pc}
 80137ac:	40023800 	.word	0x40023800
 80137b0:	40020000 	.word	0x40020000

080137b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b082      	sub	sp, #8
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80137c8:	4619      	mov	r1, r3
 80137ca:	4610      	mov	r0, r2
 80137cc:	f7f9 fd19 	bl	800d202 <USBD_LL_SetupStage>
}
 80137d0:	bf00      	nop
 80137d2:	3708      	adds	r7, #8
 80137d4:	46bd      	mov	sp, r7
 80137d6:	bd80      	pop	{r7, pc}

080137d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b082      	sub	sp, #8
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
 80137e0:	460b      	mov	r3, r1
 80137e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80137ea:	78fa      	ldrb	r2, [r7, #3]
 80137ec:	6879      	ldr	r1, [r7, #4]
 80137ee:	4613      	mov	r3, r2
 80137f0:	00db      	lsls	r3, r3, #3
 80137f2:	4413      	add	r3, r2
 80137f4:	009b      	lsls	r3, r3, #2
 80137f6:	440b      	add	r3, r1
 80137f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80137fc:	681a      	ldr	r2, [r3, #0]
 80137fe:	78fb      	ldrb	r3, [r7, #3]
 8013800:	4619      	mov	r1, r3
 8013802:	f7f9 fd53 	bl	800d2ac <USBD_LL_DataOutStage>
}
 8013806:	bf00      	nop
 8013808:	3708      	adds	r7, #8
 801380a:	46bd      	mov	sp, r7
 801380c:	bd80      	pop	{r7, pc}

0801380e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801380e:	b580      	push	{r7, lr}
 8013810:	b082      	sub	sp, #8
 8013812:	af00      	add	r7, sp, #0
 8013814:	6078      	str	r0, [r7, #4]
 8013816:	460b      	mov	r3, r1
 8013818:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013820:	78fa      	ldrb	r2, [r7, #3]
 8013822:	6879      	ldr	r1, [r7, #4]
 8013824:	4613      	mov	r3, r2
 8013826:	00db      	lsls	r3, r3, #3
 8013828:	4413      	add	r3, r2
 801382a:	009b      	lsls	r3, r3, #2
 801382c:	440b      	add	r3, r1
 801382e:	334c      	adds	r3, #76	; 0x4c
 8013830:	681a      	ldr	r2, [r3, #0]
 8013832:	78fb      	ldrb	r3, [r7, #3]
 8013834:	4619      	mov	r1, r3
 8013836:	f7f9 fdec 	bl	800d412 <USBD_LL_DataInStage>
}
 801383a:	bf00      	nop
 801383c:	3708      	adds	r7, #8
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}

08013842 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013842:	b580      	push	{r7, lr}
 8013844:	b082      	sub	sp, #8
 8013846:	af00      	add	r7, sp, #0
 8013848:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013850:	4618      	mov	r0, r3
 8013852:	f7f9 ff20 	bl	800d696 <USBD_LL_SOF>
}
 8013856:	bf00      	nop
 8013858:	3708      	adds	r7, #8
 801385a:	46bd      	mov	sp, r7
 801385c:	bd80      	pop	{r7, pc}

0801385e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801385e:	b580      	push	{r7, lr}
 8013860:	b084      	sub	sp, #16
 8013862:	af00      	add	r7, sp, #0
 8013864:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013866:	2301      	movs	r3, #1
 8013868:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	68db      	ldr	r3, [r3, #12]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d102      	bne.n	8013878 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8013872:	2300      	movs	r3, #0
 8013874:	73fb      	strb	r3, [r7, #15]
 8013876:	e008      	b.n	801388a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	68db      	ldr	r3, [r3, #12]
 801387c:	2b02      	cmp	r3, #2
 801387e:	d102      	bne.n	8013886 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8013880:	2301      	movs	r3, #1
 8013882:	73fb      	strb	r3, [r7, #15]
 8013884:	e001      	b.n	801388a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8013886:	f7ef f90f 	bl	8002aa8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013890:	7bfa      	ldrb	r2, [r7, #15]
 8013892:	4611      	mov	r1, r2
 8013894:	4618      	mov	r0, r3
 8013896:	f7f9 fec0 	bl	800d61a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80138a0:	4618      	mov	r0, r3
 80138a2:	f7f9 fe68 	bl	800d576 <USBD_LL_Reset>
}
 80138a6:	bf00      	nop
 80138a8:	3710      	adds	r7, #16
 80138aa:	46bd      	mov	sp, r7
 80138ac:	bd80      	pop	{r7, pc}
	...

080138b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b082      	sub	sp, #8
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80138be:	4618      	mov	r0, r3
 80138c0:	f7f9 febb 	bl	800d63a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	687a      	ldr	r2, [r7, #4]
 80138d0:	6812      	ldr	r2, [r2, #0]
 80138d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80138d6:	f043 0301 	orr.w	r3, r3, #1
 80138da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	6a1b      	ldr	r3, [r3, #32]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d005      	beq.n	80138f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80138e4:	4b04      	ldr	r3, [pc, #16]	; (80138f8 <HAL_PCD_SuspendCallback+0x48>)
 80138e6:	691b      	ldr	r3, [r3, #16]
 80138e8:	4a03      	ldr	r2, [pc, #12]	; (80138f8 <HAL_PCD_SuspendCallback+0x48>)
 80138ea:	f043 0306 	orr.w	r3, r3, #6
 80138ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80138f0:	bf00      	nop
 80138f2:	3708      	adds	r7, #8
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bd80      	pop	{r7, pc}
 80138f8:	e000ed00 	.word	0xe000ed00

080138fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b082      	sub	sp, #8
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801390a:	4618      	mov	r0, r3
 801390c:	f7f9 feab 	bl	800d666 <USBD_LL_Resume>
}
 8013910:	bf00      	nop
 8013912:	3708      	adds	r7, #8
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}

08013918 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013918:	b580      	push	{r7, lr}
 801391a:	b082      	sub	sp, #8
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
 8013920:	460b      	mov	r3, r1
 8013922:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801392a:	78fa      	ldrb	r2, [r7, #3]
 801392c:	4611      	mov	r1, r2
 801392e:	4618      	mov	r0, r3
 8013930:	f7f9 ff03 	bl	800d73a <USBD_LL_IsoOUTIncomplete>
}
 8013934:	bf00      	nop
 8013936:	3708      	adds	r7, #8
 8013938:	46bd      	mov	sp, r7
 801393a:	bd80      	pop	{r7, pc}

0801393c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b082      	sub	sp, #8
 8013940:	af00      	add	r7, sp, #0
 8013942:	6078      	str	r0, [r7, #4]
 8013944:	460b      	mov	r3, r1
 8013946:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801394e:	78fa      	ldrb	r2, [r7, #3]
 8013950:	4611      	mov	r1, r2
 8013952:	4618      	mov	r0, r3
 8013954:	f7f9 febf 	bl	800d6d6 <USBD_LL_IsoINIncomplete>
}
 8013958:	bf00      	nop
 801395a:	3708      	adds	r7, #8
 801395c:	46bd      	mov	sp, r7
 801395e:	bd80      	pop	{r7, pc}

08013960 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b082      	sub	sp, #8
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801396e:	4618      	mov	r0, r3
 8013970:	f7f9 ff15 	bl	800d79e <USBD_LL_DevConnected>
}
 8013974:	bf00      	nop
 8013976:	3708      	adds	r7, #8
 8013978:	46bd      	mov	sp, r7
 801397a:	bd80      	pop	{r7, pc}

0801397c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b082      	sub	sp, #8
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801398a:	4618      	mov	r0, r3
 801398c:	f7f9 ff12 	bl	800d7b4 <USBD_LL_DevDisconnected>
}
 8013990:	bf00      	nop
 8013992:	3708      	adds	r7, #8
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}

08013998 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013998:	b580      	push	{r7, lr}
 801399a:	b082      	sub	sp, #8
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	781b      	ldrb	r3, [r3, #0]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d13c      	bne.n	8013a22 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80139a8:	4a20      	ldr	r2, [pc, #128]	; (8013a2c <USBD_LL_Init+0x94>)
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	4a1e      	ldr	r2, [pc, #120]	; (8013a2c <USBD_LL_Init+0x94>)
 80139b4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80139b8:	4b1c      	ldr	r3, [pc, #112]	; (8013a2c <USBD_LL_Init+0x94>)
 80139ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80139be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80139c0:	4b1a      	ldr	r3, [pc, #104]	; (8013a2c <USBD_LL_Init+0x94>)
 80139c2:	2206      	movs	r2, #6
 80139c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80139c6:	4b19      	ldr	r3, [pc, #100]	; (8013a2c <USBD_LL_Init+0x94>)
 80139c8:	2202      	movs	r2, #2
 80139ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80139cc:	4b17      	ldr	r3, [pc, #92]	; (8013a2c <USBD_LL_Init+0x94>)
 80139ce:	2200      	movs	r2, #0
 80139d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80139d2:	4b16      	ldr	r3, [pc, #88]	; (8013a2c <USBD_LL_Init+0x94>)
 80139d4:	2202      	movs	r2, #2
 80139d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80139d8:	4b14      	ldr	r3, [pc, #80]	; (8013a2c <USBD_LL_Init+0x94>)
 80139da:	2200      	movs	r2, #0
 80139dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80139de:	4b13      	ldr	r3, [pc, #76]	; (8013a2c <USBD_LL_Init+0x94>)
 80139e0:	2200      	movs	r2, #0
 80139e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80139e4:	4b11      	ldr	r3, [pc, #68]	; (8013a2c <USBD_LL_Init+0x94>)
 80139e6:	2200      	movs	r2, #0
 80139e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80139ea:	4b10      	ldr	r3, [pc, #64]	; (8013a2c <USBD_LL_Init+0x94>)
 80139ec:	2200      	movs	r2, #0
 80139ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80139f0:	4b0e      	ldr	r3, [pc, #56]	; (8013a2c <USBD_LL_Init+0x94>)
 80139f2:	2200      	movs	r2, #0
 80139f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80139f6:	480d      	ldr	r0, [pc, #52]	; (8013a2c <USBD_LL_Init+0x94>)
 80139f8:	f7f2 fab9 	bl	8005f6e <HAL_PCD_Init>
 80139fc:	4603      	mov	r3, r0
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d001      	beq.n	8013a06 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8013a02:	f7ef f851 	bl	8002aa8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013a06:	2180      	movs	r1, #128	; 0x80
 8013a08:	4808      	ldr	r0, [pc, #32]	; (8013a2c <USBD_LL_Init+0x94>)
 8013a0a:	f7f3 fd44 	bl	8007496 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8013a0e:	2240      	movs	r2, #64	; 0x40
 8013a10:	2100      	movs	r1, #0
 8013a12:	4806      	ldr	r0, [pc, #24]	; (8013a2c <USBD_LL_Init+0x94>)
 8013a14:	f7f3 fcf8 	bl	8007408 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013a18:	2280      	movs	r2, #128	; 0x80
 8013a1a:	2101      	movs	r1, #1
 8013a1c:	4803      	ldr	r0, [pc, #12]	; (8013a2c <USBD_LL_Init+0x94>)
 8013a1e:	f7f3 fcf3 	bl	8007408 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013a22:	2300      	movs	r3, #0
}
 8013a24:	4618      	mov	r0, r3
 8013a26:	3708      	adds	r7, #8
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}
 8013a2c:	20006870 	.word	0x20006870

08013a30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013a30:	b580      	push	{r7, lr}
 8013a32:	b084      	sub	sp, #16
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a38:	2300      	movs	r3, #0
 8013a3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013a46:	4618      	mov	r0, r3
 8013a48:	f7f2 fbb5 	bl	80061b6 <HAL_PCD_Start>
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013a50:	7bfb      	ldrb	r3, [r7, #15]
 8013a52:	4618      	mov	r0, r3
 8013a54:	f000 f990 	bl	8013d78 <USBD_Get_USB_Status>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013a5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a5e:	4618      	mov	r0, r3
 8013a60:	3710      	adds	r7, #16
 8013a62:	46bd      	mov	sp, r7
 8013a64:	bd80      	pop	{r7, pc}

08013a66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013a66:	b580      	push	{r7, lr}
 8013a68:	b084      	sub	sp, #16
 8013a6a:	af00      	add	r7, sp, #0
 8013a6c:	6078      	str	r0, [r7, #4]
 8013a6e:	4608      	mov	r0, r1
 8013a70:	4611      	mov	r1, r2
 8013a72:	461a      	mov	r2, r3
 8013a74:	4603      	mov	r3, r0
 8013a76:	70fb      	strb	r3, [r7, #3]
 8013a78:	460b      	mov	r3, r1
 8013a7a:	70bb      	strb	r3, [r7, #2]
 8013a7c:	4613      	mov	r3, r2
 8013a7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a80:	2300      	movs	r3, #0
 8013a82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a84:	2300      	movs	r3, #0
 8013a86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013a8e:	78bb      	ldrb	r3, [r7, #2]
 8013a90:	883a      	ldrh	r2, [r7, #0]
 8013a92:	78f9      	ldrb	r1, [r7, #3]
 8013a94:	f7f3 f8b3 	bl	8006bfe <HAL_PCD_EP_Open>
 8013a98:	4603      	mov	r3, r0
 8013a9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013a9c:	7bfb      	ldrb	r3, [r7, #15]
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f000 f96a 	bl	8013d78 <USBD_Get_USB_Status>
 8013aa4:	4603      	mov	r3, r0
 8013aa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013aa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	3710      	adds	r7, #16
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	bd80      	pop	{r7, pc}

08013ab2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013ab2:	b580      	push	{r7, lr}
 8013ab4:	b084      	sub	sp, #16
 8013ab6:	af00      	add	r7, sp, #0
 8013ab8:	6078      	str	r0, [r7, #4]
 8013aba:	460b      	mov	r3, r1
 8013abc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013abe:	2300      	movs	r3, #0
 8013ac0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013acc:	78fa      	ldrb	r2, [r7, #3]
 8013ace:	4611      	mov	r1, r2
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f7f3 f8fc 	bl	8006cce <HAL_PCD_EP_Close>
 8013ad6:	4603      	mov	r3, r0
 8013ad8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013ada:	7bfb      	ldrb	r3, [r7, #15]
 8013adc:	4618      	mov	r0, r3
 8013ade:	f000 f94b 	bl	8013d78 <USBD_Get_USB_Status>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013ae6:	7bbb      	ldrb	r3, [r7, #14]
}
 8013ae8:	4618      	mov	r0, r3
 8013aea:	3710      	adds	r7, #16
 8013aec:	46bd      	mov	sp, r7
 8013aee:	bd80      	pop	{r7, pc}

08013af0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b084      	sub	sp, #16
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	460b      	mov	r3, r1
 8013afa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013afc:	2300      	movs	r3, #0
 8013afe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b00:	2300      	movs	r3, #0
 8013b02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013b0a:	78fa      	ldrb	r2, [r7, #3]
 8013b0c:	4611      	mov	r1, r2
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f7f3 f9d4 	bl	8006ebc <HAL_PCD_EP_SetStall>
 8013b14:	4603      	mov	r3, r0
 8013b16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b18:	7bfb      	ldrb	r3, [r7, #15]
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	f000 f92c 	bl	8013d78 <USBD_Get_USB_Status>
 8013b20:	4603      	mov	r3, r0
 8013b22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013b24:	7bbb      	ldrb	r3, [r7, #14]
}
 8013b26:	4618      	mov	r0, r3
 8013b28:	3710      	adds	r7, #16
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	bd80      	pop	{r7, pc}

08013b2e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013b2e:	b580      	push	{r7, lr}
 8013b30:	b084      	sub	sp, #16
 8013b32:	af00      	add	r7, sp, #0
 8013b34:	6078      	str	r0, [r7, #4]
 8013b36:	460b      	mov	r3, r1
 8013b38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b3e:	2300      	movs	r3, #0
 8013b40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013b48:	78fa      	ldrb	r2, [r7, #3]
 8013b4a:	4611      	mov	r1, r2
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f7f3 fa19 	bl	8006f84 <HAL_PCD_EP_ClrStall>
 8013b52:	4603      	mov	r3, r0
 8013b54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b56:	7bfb      	ldrb	r3, [r7, #15]
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f000 f90d 	bl	8013d78 <USBD_Get_USB_Status>
 8013b5e:	4603      	mov	r3, r0
 8013b60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013b62:	7bbb      	ldrb	r3, [r7, #14]
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	3710      	adds	r7, #16
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}

08013b6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013b6c:	b480      	push	{r7}
 8013b6e:	b085      	sub	sp, #20
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
 8013b74:	460b      	mov	r3, r1
 8013b76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013b7e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013b80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	da0b      	bge.n	8013ba0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013b88:	78fb      	ldrb	r3, [r7, #3]
 8013b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013b8e:	68f9      	ldr	r1, [r7, #12]
 8013b90:	4613      	mov	r3, r2
 8013b92:	00db      	lsls	r3, r3, #3
 8013b94:	4413      	add	r3, r2
 8013b96:	009b      	lsls	r3, r3, #2
 8013b98:	440b      	add	r3, r1
 8013b9a:	333e      	adds	r3, #62	; 0x3e
 8013b9c:	781b      	ldrb	r3, [r3, #0]
 8013b9e:	e00b      	b.n	8013bb8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013ba0:	78fb      	ldrb	r3, [r7, #3]
 8013ba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013ba6:	68f9      	ldr	r1, [r7, #12]
 8013ba8:	4613      	mov	r3, r2
 8013baa:	00db      	lsls	r3, r3, #3
 8013bac:	4413      	add	r3, r2
 8013bae:	009b      	lsls	r3, r3, #2
 8013bb0:	440b      	add	r3, r1
 8013bb2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8013bb6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013bb8:	4618      	mov	r0, r3
 8013bba:	3714      	adds	r7, #20
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc2:	4770      	bx	lr

08013bc4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b084      	sub	sp, #16
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
 8013bcc:	460b      	mov	r3, r1
 8013bce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013bde:	78fa      	ldrb	r2, [r7, #3]
 8013be0:	4611      	mov	r1, r2
 8013be2:	4618      	mov	r0, r3
 8013be4:	f7f2 ffe6 	bl	8006bb4 <HAL_PCD_SetAddress>
 8013be8:	4603      	mov	r3, r0
 8013bea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013bec:	7bfb      	ldrb	r3, [r7, #15]
 8013bee:	4618      	mov	r0, r3
 8013bf0:	f000 f8c2 	bl	8013d78 <USBD_Get_USB_Status>
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013bf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	3710      	adds	r7, #16
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd80      	pop	{r7, pc}

08013c02 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013c02:	b580      	push	{r7, lr}
 8013c04:	b086      	sub	sp, #24
 8013c06:	af00      	add	r7, sp, #0
 8013c08:	60f8      	str	r0, [r7, #12]
 8013c0a:	607a      	str	r2, [r7, #4]
 8013c0c:	603b      	str	r3, [r7, #0]
 8013c0e:	460b      	mov	r3, r1
 8013c10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c12:	2300      	movs	r3, #0
 8013c14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c16:	2300      	movs	r3, #0
 8013c18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013c20:	7af9      	ldrb	r1, [r7, #11]
 8013c22:	683b      	ldr	r3, [r7, #0]
 8013c24:	687a      	ldr	r2, [r7, #4]
 8013c26:	f7f3 f8ff 	bl	8006e28 <HAL_PCD_EP_Transmit>
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c2e:	7dfb      	ldrb	r3, [r7, #23]
 8013c30:	4618      	mov	r0, r3
 8013c32:	f000 f8a1 	bl	8013d78 <USBD_Get_USB_Status>
 8013c36:	4603      	mov	r3, r0
 8013c38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013c3a:	7dbb      	ldrb	r3, [r7, #22]
}
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	3718      	adds	r7, #24
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bd80      	pop	{r7, pc}

08013c44 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b086      	sub	sp, #24
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	60f8      	str	r0, [r7, #12]
 8013c4c:	607a      	str	r2, [r7, #4]
 8013c4e:	603b      	str	r3, [r7, #0]
 8013c50:	460b      	mov	r3, r1
 8013c52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c54:	2300      	movs	r3, #0
 8013c56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c58:	2300      	movs	r3, #0
 8013c5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013c62:	7af9      	ldrb	r1, [r7, #11]
 8013c64:	683b      	ldr	r3, [r7, #0]
 8013c66:	687a      	ldr	r2, [r7, #4]
 8013c68:	f7f3 f87b 	bl	8006d62 <HAL_PCD_EP_Receive>
 8013c6c:	4603      	mov	r3, r0
 8013c6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c70:	7dfb      	ldrb	r3, [r7, #23]
 8013c72:	4618      	mov	r0, r3
 8013c74:	f000 f880 	bl	8013d78 <USBD_Get_USB_Status>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013c7c:	7dbb      	ldrb	r3, [r7, #22]
}
 8013c7e:	4618      	mov	r0, r3
 8013c80:	3718      	adds	r7, #24
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}

08013c86 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013c86:	b580      	push	{r7, lr}
 8013c88:	b082      	sub	sp, #8
 8013c8a:	af00      	add	r7, sp, #0
 8013c8c:	6078      	str	r0, [r7, #4]
 8013c8e:	460b      	mov	r3, r1
 8013c90:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013c98:	78fa      	ldrb	r2, [r7, #3]
 8013c9a:	4611      	mov	r1, r2
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f7f3 f8ab 	bl	8006df8 <HAL_PCD_EP_GetRxCount>
 8013ca2:	4603      	mov	r3, r0
}
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	3708      	adds	r7, #8
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}

08013cac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b082      	sub	sp, #8
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
 8013cb4:	460b      	mov	r3, r1
 8013cb6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8013cb8:	78fb      	ldrb	r3, [r7, #3]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d002      	beq.n	8013cc4 <HAL_PCDEx_LPM_Callback+0x18>
 8013cbe:	2b01      	cmp	r3, #1
 8013cc0:	d01f      	beq.n	8013d02 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8013cc2:	e03b      	b.n	8013d3c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	6a1b      	ldr	r3, [r3, #32]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d007      	beq.n	8013cdc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8013ccc:	f7ef fb10 	bl	80032f0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013cd0:	4b1c      	ldr	r3, [pc, #112]	; (8013d44 <HAL_PCDEx_LPM_Callback+0x98>)
 8013cd2:	691b      	ldr	r3, [r3, #16]
 8013cd4:	4a1b      	ldr	r2, [pc, #108]	; (8013d44 <HAL_PCDEx_LPM_Callback+0x98>)
 8013cd6:	f023 0306 	bic.w	r3, r3, #6
 8013cda:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	687a      	ldr	r2, [r7, #4]
 8013ce8:	6812      	ldr	r2, [r2, #0]
 8013cea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013cee:	f023 0301 	bic.w	r3, r3, #1
 8013cf2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f7f9 fcb3 	bl	800d666 <USBD_LL_Resume>
    break;
 8013d00:	e01c      	b.n	8013d3c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	687a      	ldr	r2, [r7, #4]
 8013d0e:	6812      	ldr	r2, [r2, #0]
 8013d10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013d14:	f043 0301 	orr.w	r3, r3, #1
 8013d18:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7f9 fc8a 	bl	800d63a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	6a1b      	ldr	r3, [r3, #32]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d005      	beq.n	8013d3a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013d2e:	4b05      	ldr	r3, [pc, #20]	; (8013d44 <HAL_PCDEx_LPM_Callback+0x98>)
 8013d30:	691b      	ldr	r3, [r3, #16]
 8013d32:	4a04      	ldr	r2, [pc, #16]	; (8013d44 <HAL_PCDEx_LPM_Callback+0x98>)
 8013d34:	f043 0306 	orr.w	r3, r3, #6
 8013d38:	6113      	str	r3, [r2, #16]
    break;
 8013d3a:	bf00      	nop
}
 8013d3c:	bf00      	nop
 8013d3e:	3708      	adds	r7, #8
 8013d40:	46bd      	mov	sp, r7
 8013d42:	bd80      	pop	{r7, pc}
 8013d44:	e000ed00 	.word	0xe000ed00

08013d48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013d48:	b480      	push	{r7}
 8013d4a:	b083      	sub	sp, #12
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013d50:	4b03      	ldr	r3, [pc, #12]	; (8013d60 <USBD_static_malloc+0x18>)
}
 8013d52:	4618      	mov	r0, r3
 8013d54:	370c      	adds	r7, #12
 8013d56:	46bd      	mov	sp, r7
 8013d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d5c:	4770      	bx	lr
 8013d5e:	bf00      	nop
 8013d60:	20006d7c 	.word	0x20006d7c

08013d64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013d64:	b480      	push	{r7}
 8013d66:	b083      	sub	sp, #12
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]

}
 8013d6c:	bf00      	nop
 8013d6e:	370c      	adds	r7, #12
 8013d70:	46bd      	mov	sp, r7
 8013d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d76:	4770      	bx	lr

08013d78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013d78:	b480      	push	{r7}
 8013d7a:	b085      	sub	sp, #20
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	4603      	mov	r3, r0
 8013d80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d82:	2300      	movs	r3, #0
 8013d84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013d86:	79fb      	ldrb	r3, [r7, #7]
 8013d88:	2b03      	cmp	r3, #3
 8013d8a:	d817      	bhi.n	8013dbc <USBD_Get_USB_Status+0x44>
 8013d8c:	a201      	add	r2, pc, #4	; (adr r2, 8013d94 <USBD_Get_USB_Status+0x1c>)
 8013d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d92:	bf00      	nop
 8013d94:	08013da5 	.word	0x08013da5
 8013d98:	08013dab 	.word	0x08013dab
 8013d9c:	08013db1 	.word	0x08013db1
 8013da0:	08013db7 	.word	0x08013db7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013da4:	2300      	movs	r3, #0
 8013da6:	73fb      	strb	r3, [r7, #15]
    break;
 8013da8:	e00b      	b.n	8013dc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013daa:	2303      	movs	r3, #3
 8013dac:	73fb      	strb	r3, [r7, #15]
    break;
 8013dae:	e008      	b.n	8013dc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013db0:	2301      	movs	r3, #1
 8013db2:	73fb      	strb	r3, [r7, #15]
    break;
 8013db4:	e005      	b.n	8013dc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013db6:	2303      	movs	r3, #3
 8013db8:	73fb      	strb	r3, [r7, #15]
    break;
 8013dba:	e002      	b.n	8013dc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013dbc:	2303      	movs	r3, #3
 8013dbe:	73fb      	strb	r3, [r7, #15]
    break;
 8013dc0:	bf00      	nop
  }
  return usb_status;
 8013dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3714      	adds	r7, #20
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dce:	4770      	bx	lr

08013dd0 <__errno>:
 8013dd0:	4b01      	ldr	r3, [pc, #4]	; (8013dd8 <__errno+0x8>)
 8013dd2:	6818      	ldr	r0, [r3, #0]
 8013dd4:	4770      	bx	lr
 8013dd6:	bf00      	nop
 8013dd8:	20000124 	.word	0x20000124

08013ddc <std>:
 8013ddc:	2300      	movs	r3, #0
 8013dde:	b510      	push	{r4, lr}
 8013de0:	4604      	mov	r4, r0
 8013de2:	e9c0 3300 	strd	r3, r3, [r0]
 8013de6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013dea:	6083      	str	r3, [r0, #8]
 8013dec:	8181      	strh	r1, [r0, #12]
 8013dee:	6643      	str	r3, [r0, #100]	; 0x64
 8013df0:	81c2      	strh	r2, [r0, #14]
 8013df2:	6183      	str	r3, [r0, #24]
 8013df4:	4619      	mov	r1, r3
 8013df6:	2208      	movs	r2, #8
 8013df8:	305c      	adds	r0, #92	; 0x5c
 8013dfa:	f000 f91f 	bl	801403c <memset>
 8013dfe:	4b05      	ldr	r3, [pc, #20]	; (8013e14 <std+0x38>)
 8013e00:	6263      	str	r3, [r4, #36]	; 0x24
 8013e02:	4b05      	ldr	r3, [pc, #20]	; (8013e18 <std+0x3c>)
 8013e04:	62a3      	str	r3, [r4, #40]	; 0x28
 8013e06:	4b05      	ldr	r3, [pc, #20]	; (8013e1c <std+0x40>)
 8013e08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013e0a:	4b05      	ldr	r3, [pc, #20]	; (8013e20 <std+0x44>)
 8013e0c:	6224      	str	r4, [r4, #32]
 8013e0e:	6323      	str	r3, [r4, #48]	; 0x30
 8013e10:	bd10      	pop	{r4, pc}
 8013e12:	bf00      	nop
 8013e14:	08014cf1 	.word	0x08014cf1
 8013e18:	08014d13 	.word	0x08014d13
 8013e1c:	08014d4b 	.word	0x08014d4b
 8013e20:	08014d6f 	.word	0x08014d6f

08013e24 <_cleanup_r>:
 8013e24:	4901      	ldr	r1, [pc, #4]	; (8013e2c <_cleanup_r+0x8>)
 8013e26:	f000 b8af 	b.w	8013f88 <_fwalk_reent>
 8013e2a:	bf00      	nop
 8013e2c:	08015d71 	.word	0x08015d71

08013e30 <__sfmoreglue>:
 8013e30:	b570      	push	{r4, r5, r6, lr}
 8013e32:	2268      	movs	r2, #104	; 0x68
 8013e34:	1e4d      	subs	r5, r1, #1
 8013e36:	4355      	muls	r5, r2
 8013e38:	460e      	mov	r6, r1
 8013e3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013e3e:	f000 f971 	bl	8014124 <_malloc_r>
 8013e42:	4604      	mov	r4, r0
 8013e44:	b140      	cbz	r0, 8013e58 <__sfmoreglue+0x28>
 8013e46:	2100      	movs	r1, #0
 8013e48:	e9c0 1600 	strd	r1, r6, [r0]
 8013e4c:	300c      	adds	r0, #12
 8013e4e:	60a0      	str	r0, [r4, #8]
 8013e50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013e54:	f000 f8f2 	bl	801403c <memset>
 8013e58:	4620      	mov	r0, r4
 8013e5a:	bd70      	pop	{r4, r5, r6, pc}

08013e5c <__sfp_lock_acquire>:
 8013e5c:	4801      	ldr	r0, [pc, #4]	; (8013e64 <__sfp_lock_acquire+0x8>)
 8013e5e:	f7ef bdfd 	b.w	8003a5c <__retarget_lock_acquire_recursive>
 8013e62:	bf00      	nop
 8013e64:	200006e8 	.word	0x200006e8

08013e68 <__sfp_lock_release>:
 8013e68:	4801      	ldr	r0, [pc, #4]	; (8013e70 <__sfp_lock_release+0x8>)
 8013e6a:	f7ef be0b 	b.w	8003a84 <__retarget_lock_release_recursive>
 8013e6e:	bf00      	nop
 8013e70:	200006e8 	.word	0x200006e8

08013e74 <__sinit_lock_acquire>:
 8013e74:	4801      	ldr	r0, [pc, #4]	; (8013e7c <__sinit_lock_acquire+0x8>)
 8013e76:	f7ef bdf1 	b.w	8003a5c <__retarget_lock_acquire_recursive>
 8013e7a:	bf00      	nop
 8013e7c:	200006dc 	.word	0x200006dc

08013e80 <__sinit_lock_release>:
 8013e80:	4801      	ldr	r0, [pc, #4]	; (8013e88 <__sinit_lock_release+0x8>)
 8013e82:	f7ef bdff 	b.w	8003a84 <__retarget_lock_release_recursive>
 8013e86:	bf00      	nop
 8013e88:	200006dc 	.word	0x200006dc

08013e8c <__sinit>:
 8013e8c:	b510      	push	{r4, lr}
 8013e8e:	4604      	mov	r4, r0
 8013e90:	f7ff fff0 	bl	8013e74 <__sinit_lock_acquire>
 8013e94:	69a3      	ldr	r3, [r4, #24]
 8013e96:	b11b      	cbz	r3, 8013ea0 <__sinit+0x14>
 8013e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e9c:	f7ff bff0 	b.w	8013e80 <__sinit_lock_release>
 8013ea0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013ea4:	6523      	str	r3, [r4, #80]	; 0x50
 8013ea6:	4b13      	ldr	r3, [pc, #76]	; (8013ef4 <__sinit+0x68>)
 8013ea8:	4a13      	ldr	r2, [pc, #76]	; (8013ef8 <__sinit+0x6c>)
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	62a2      	str	r2, [r4, #40]	; 0x28
 8013eae:	42a3      	cmp	r3, r4
 8013eb0:	bf04      	itt	eq
 8013eb2:	2301      	moveq	r3, #1
 8013eb4:	61a3      	streq	r3, [r4, #24]
 8013eb6:	4620      	mov	r0, r4
 8013eb8:	f000 f820 	bl	8013efc <__sfp>
 8013ebc:	6060      	str	r0, [r4, #4]
 8013ebe:	4620      	mov	r0, r4
 8013ec0:	f000 f81c 	bl	8013efc <__sfp>
 8013ec4:	60a0      	str	r0, [r4, #8]
 8013ec6:	4620      	mov	r0, r4
 8013ec8:	f000 f818 	bl	8013efc <__sfp>
 8013ecc:	2200      	movs	r2, #0
 8013ece:	60e0      	str	r0, [r4, #12]
 8013ed0:	2104      	movs	r1, #4
 8013ed2:	6860      	ldr	r0, [r4, #4]
 8013ed4:	f7ff ff82 	bl	8013ddc <std>
 8013ed8:	68a0      	ldr	r0, [r4, #8]
 8013eda:	2201      	movs	r2, #1
 8013edc:	2109      	movs	r1, #9
 8013ede:	f7ff ff7d 	bl	8013ddc <std>
 8013ee2:	68e0      	ldr	r0, [r4, #12]
 8013ee4:	2202      	movs	r2, #2
 8013ee6:	2112      	movs	r1, #18
 8013ee8:	f7ff ff78 	bl	8013ddc <std>
 8013eec:	2301      	movs	r3, #1
 8013eee:	61a3      	str	r3, [r4, #24]
 8013ef0:	e7d2      	b.n	8013e98 <__sinit+0xc>
 8013ef2:	bf00      	nop
 8013ef4:	08017028 	.word	0x08017028
 8013ef8:	08013e25 	.word	0x08013e25

08013efc <__sfp>:
 8013efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013efe:	4607      	mov	r7, r0
 8013f00:	f7ff ffac 	bl	8013e5c <__sfp_lock_acquire>
 8013f04:	4b1e      	ldr	r3, [pc, #120]	; (8013f80 <__sfp+0x84>)
 8013f06:	681e      	ldr	r6, [r3, #0]
 8013f08:	69b3      	ldr	r3, [r6, #24]
 8013f0a:	b913      	cbnz	r3, 8013f12 <__sfp+0x16>
 8013f0c:	4630      	mov	r0, r6
 8013f0e:	f7ff ffbd 	bl	8013e8c <__sinit>
 8013f12:	3648      	adds	r6, #72	; 0x48
 8013f14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013f18:	3b01      	subs	r3, #1
 8013f1a:	d503      	bpl.n	8013f24 <__sfp+0x28>
 8013f1c:	6833      	ldr	r3, [r6, #0]
 8013f1e:	b30b      	cbz	r3, 8013f64 <__sfp+0x68>
 8013f20:	6836      	ldr	r6, [r6, #0]
 8013f22:	e7f7      	b.n	8013f14 <__sfp+0x18>
 8013f24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013f28:	b9d5      	cbnz	r5, 8013f60 <__sfp+0x64>
 8013f2a:	4b16      	ldr	r3, [pc, #88]	; (8013f84 <__sfp+0x88>)
 8013f2c:	60e3      	str	r3, [r4, #12]
 8013f2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013f32:	6665      	str	r5, [r4, #100]	; 0x64
 8013f34:	f7ef fd6c 	bl	8003a10 <__retarget_lock_init_recursive>
 8013f38:	f7ff ff96 	bl	8013e68 <__sfp_lock_release>
 8013f3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013f40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013f44:	6025      	str	r5, [r4, #0]
 8013f46:	61a5      	str	r5, [r4, #24]
 8013f48:	2208      	movs	r2, #8
 8013f4a:	4629      	mov	r1, r5
 8013f4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013f50:	f000 f874 	bl	801403c <memset>
 8013f54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013f58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013f5c:	4620      	mov	r0, r4
 8013f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f60:	3468      	adds	r4, #104	; 0x68
 8013f62:	e7d9      	b.n	8013f18 <__sfp+0x1c>
 8013f64:	2104      	movs	r1, #4
 8013f66:	4638      	mov	r0, r7
 8013f68:	f7ff ff62 	bl	8013e30 <__sfmoreglue>
 8013f6c:	4604      	mov	r4, r0
 8013f6e:	6030      	str	r0, [r6, #0]
 8013f70:	2800      	cmp	r0, #0
 8013f72:	d1d5      	bne.n	8013f20 <__sfp+0x24>
 8013f74:	f7ff ff78 	bl	8013e68 <__sfp_lock_release>
 8013f78:	230c      	movs	r3, #12
 8013f7a:	603b      	str	r3, [r7, #0]
 8013f7c:	e7ee      	b.n	8013f5c <__sfp+0x60>
 8013f7e:	bf00      	nop
 8013f80:	08017028 	.word	0x08017028
 8013f84:	ffff0001 	.word	0xffff0001

08013f88 <_fwalk_reent>:
 8013f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f8c:	4606      	mov	r6, r0
 8013f8e:	4688      	mov	r8, r1
 8013f90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013f94:	2700      	movs	r7, #0
 8013f96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013f9a:	f1b9 0901 	subs.w	r9, r9, #1
 8013f9e:	d505      	bpl.n	8013fac <_fwalk_reent+0x24>
 8013fa0:	6824      	ldr	r4, [r4, #0]
 8013fa2:	2c00      	cmp	r4, #0
 8013fa4:	d1f7      	bne.n	8013f96 <_fwalk_reent+0xe>
 8013fa6:	4638      	mov	r0, r7
 8013fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fac:	89ab      	ldrh	r3, [r5, #12]
 8013fae:	2b01      	cmp	r3, #1
 8013fb0:	d907      	bls.n	8013fc2 <_fwalk_reent+0x3a>
 8013fb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013fb6:	3301      	adds	r3, #1
 8013fb8:	d003      	beq.n	8013fc2 <_fwalk_reent+0x3a>
 8013fba:	4629      	mov	r1, r5
 8013fbc:	4630      	mov	r0, r6
 8013fbe:	47c0      	blx	r8
 8013fc0:	4307      	orrs	r7, r0
 8013fc2:	3568      	adds	r5, #104	; 0x68
 8013fc4:	e7e9      	b.n	8013f9a <_fwalk_reent+0x12>
	...

08013fc8 <__libc_init_array>:
 8013fc8:	b570      	push	{r4, r5, r6, lr}
 8013fca:	4d0d      	ldr	r5, [pc, #52]	; (8014000 <__libc_init_array+0x38>)
 8013fcc:	4c0d      	ldr	r4, [pc, #52]	; (8014004 <__libc_init_array+0x3c>)
 8013fce:	1b64      	subs	r4, r4, r5
 8013fd0:	10a4      	asrs	r4, r4, #2
 8013fd2:	2600      	movs	r6, #0
 8013fd4:	42a6      	cmp	r6, r4
 8013fd6:	d109      	bne.n	8013fec <__libc_init_array+0x24>
 8013fd8:	4d0b      	ldr	r5, [pc, #44]	; (8014008 <__libc_init_array+0x40>)
 8013fda:	4c0c      	ldr	r4, [pc, #48]	; (801400c <__libc_init_array+0x44>)
 8013fdc:	f002 fd50 	bl	8016a80 <_init>
 8013fe0:	1b64      	subs	r4, r4, r5
 8013fe2:	10a4      	asrs	r4, r4, #2
 8013fe4:	2600      	movs	r6, #0
 8013fe6:	42a6      	cmp	r6, r4
 8013fe8:	d105      	bne.n	8013ff6 <__libc_init_array+0x2e>
 8013fea:	bd70      	pop	{r4, r5, r6, pc}
 8013fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ff0:	4798      	blx	r3
 8013ff2:	3601      	adds	r6, #1
 8013ff4:	e7ee      	b.n	8013fd4 <__libc_init_array+0xc>
 8013ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ffa:	4798      	blx	r3
 8013ffc:	3601      	adds	r6, #1
 8013ffe:	e7f2      	b.n	8013fe6 <__libc_init_array+0x1e>
 8014000:	080173ac 	.word	0x080173ac
 8014004:	080173ac 	.word	0x080173ac
 8014008:	080173ac 	.word	0x080173ac
 801400c:	080173b0 	.word	0x080173b0

08014010 <malloc>:
 8014010:	4b02      	ldr	r3, [pc, #8]	; (801401c <malloc+0xc>)
 8014012:	4601      	mov	r1, r0
 8014014:	6818      	ldr	r0, [r3, #0]
 8014016:	f000 b885 	b.w	8014124 <_malloc_r>
 801401a:	bf00      	nop
 801401c:	20000124 	.word	0x20000124

08014020 <memcpy>:
 8014020:	440a      	add	r2, r1
 8014022:	4291      	cmp	r1, r2
 8014024:	f100 33ff 	add.w	r3, r0, #4294967295
 8014028:	d100      	bne.n	801402c <memcpy+0xc>
 801402a:	4770      	bx	lr
 801402c:	b510      	push	{r4, lr}
 801402e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014032:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014036:	4291      	cmp	r1, r2
 8014038:	d1f9      	bne.n	801402e <memcpy+0xe>
 801403a:	bd10      	pop	{r4, pc}

0801403c <memset>:
 801403c:	4402      	add	r2, r0
 801403e:	4603      	mov	r3, r0
 8014040:	4293      	cmp	r3, r2
 8014042:	d100      	bne.n	8014046 <memset+0xa>
 8014044:	4770      	bx	lr
 8014046:	f803 1b01 	strb.w	r1, [r3], #1
 801404a:	e7f9      	b.n	8014040 <memset+0x4>

0801404c <_free_r>:
 801404c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801404e:	2900      	cmp	r1, #0
 8014050:	d044      	beq.n	80140dc <_free_r+0x90>
 8014052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014056:	9001      	str	r0, [sp, #4]
 8014058:	2b00      	cmp	r3, #0
 801405a:	f1a1 0404 	sub.w	r4, r1, #4
 801405e:	bfb8      	it	lt
 8014060:	18e4      	addlt	r4, r4, r3
 8014062:	f001 ff4f 	bl	8015f04 <__malloc_lock>
 8014066:	4a1e      	ldr	r2, [pc, #120]	; (80140e0 <_free_r+0x94>)
 8014068:	9801      	ldr	r0, [sp, #4]
 801406a:	6813      	ldr	r3, [r2, #0]
 801406c:	b933      	cbnz	r3, 801407c <_free_r+0x30>
 801406e:	6063      	str	r3, [r4, #4]
 8014070:	6014      	str	r4, [r2, #0]
 8014072:	b003      	add	sp, #12
 8014074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014078:	f001 bf4a 	b.w	8015f10 <__malloc_unlock>
 801407c:	42a3      	cmp	r3, r4
 801407e:	d908      	bls.n	8014092 <_free_r+0x46>
 8014080:	6825      	ldr	r5, [r4, #0]
 8014082:	1961      	adds	r1, r4, r5
 8014084:	428b      	cmp	r3, r1
 8014086:	bf01      	itttt	eq
 8014088:	6819      	ldreq	r1, [r3, #0]
 801408a:	685b      	ldreq	r3, [r3, #4]
 801408c:	1949      	addeq	r1, r1, r5
 801408e:	6021      	streq	r1, [r4, #0]
 8014090:	e7ed      	b.n	801406e <_free_r+0x22>
 8014092:	461a      	mov	r2, r3
 8014094:	685b      	ldr	r3, [r3, #4]
 8014096:	b10b      	cbz	r3, 801409c <_free_r+0x50>
 8014098:	42a3      	cmp	r3, r4
 801409a:	d9fa      	bls.n	8014092 <_free_r+0x46>
 801409c:	6811      	ldr	r1, [r2, #0]
 801409e:	1855      	adds	r5, r2, r1
 80140a0:	42a5      	cmp	r5, r4
 80140a2:	d10b      	bne.n	80140bc <_free_r+0x70>
 80140a4:	6824      	ldr	r4, [r4, #0]
 80140a6:	4421      	add	r1, r4
 80140a8:	1854      	adds	r4, r2, r1
 80140aa:	42a3      	cmp	r3, r4
 80140ac:	6011      	str	r1, [r2, #0]
 80140ae:	d1e0      	bne.n	8014072 <_free_r+0x26>
 80140b0:	681c      	ldr	r4, [r3, #0]
 80140b2:	685b      	ldr	r3, [r3, #4]
 80140b4:	6053      	str	r3, [r2, #4]
 80140b6:	4421      	add	r1, r4
 80140b8:	6011      	str	r1, [r2, #0]
 80140ba:	e7da      	b.n	8014072 <_free_r+0x26>
 80140bc:	d902      	bls.n	80140c4 <_free_r+0x78>
 80140be:	230c      	movs	r3, #12
 80140c0:	6003      	str	r3, [r0, #0]
 80140c2:	e7d6      	b.n	8014072 <_free_r+0x26>
 80140c4:	6825      	ldr	r5, [r4, #0]
 80140c6:	1961      	adds	r1, r4, r5
 80140c8:	428b      	cmp	r3, r1
 80140ca:	bf04      	itt	eq
 80140cc:	6819      	ldreq	r1, [r3, #0]
 80140ce:	685b      	ldreq	r3, [r3, #4]
 80140d0:	6063      	str	r3, [r4, #4]
 80140d2:	bf04      	itt	eq
 80140d4:	1949      	addeq	r1, r1, r5
 80140d6:	6021      	streq	r1, [r4, #0]
 80140d8:	6054      	str	r4, [r2, #4]
 80140da:	e7ca      	b.n	8014072 <_free_r+0x26>
 80140dc:	b003      	add	sp, #12
 80140de:	bd30      	pop	{r4, r5, pc}
 80140e0:	20006f9c 	.word	0x20006f9c

080140e4 <sbrk_aligned>:
 80140e4:	b570      	push	{r4, r5, r6, lr}
 80140e6:	4e0e      	ldr	r6, [pc, #56]	; (8014120 <sbrk_aligned+0x3c>)
 80140e8:	460c      	mov	r4, r1
 80140ea:	6831      	ldr	r1, [r6, #0]
 80140ec:	4605      	mov	r5, r0
 80140ee:	b911      	cbnz	r1, 80140f6 <sbrk_aligned+0x12>
 80140f0:	f000 fdee 	bl	8014cd0 <_sbrk_r>
 80140f4:	6030      	str	r0, [r6, #0]
 80140f6:	4621      	mov	r1, r4
 80140f8:	4628      	mov	r0, r5
 80140fa:	f000 fde9 	bl	8014cd0 <_sbrk_r>
 80140fe:	1c43      	adds	r3, r0, #1
 8014100:	d00a      	beq.n	8014118 <sbrk_aligned+0x34>
 8014102:	1cc4      	adds	r4, r0, #3
 8014104:	f024 0403 	bic.w	r4, r4, #3
 8014108:	42a0      	cmp	r0, r4
 801410a:	d007      	beq.n	801411c <sbrk_aligned+0x38>
 801410c:	1a21      	subs	r1, r4, r0
 801410e:	4628      	mov	r0, r5
 8014110:	f000 fdde 	bl	8014cd0 <_sbrk_r>
 8014114:	3001      	adds	r0, #1
 8014116:	d101      	bne.n	801411c <sbrk_aligned+0x38>
 8014118:	f04f 34ff 	mov.w	r4, #4294967295
 801411c:	4620      	mov	r0, r4
 801411e:	bd70      	pop	{r4, r5, r6, pc}
 8014120:	20006fa0 	.word	0x20006fa0

08014124 <_malloc_r>:
 8014124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014128:	1ccd      	adds	r5, r1, #3
 801412a:	f025 0503 	bic.w	r5, r5, #3
 801412e:	3508      	adds	r5, #8
 8014130:	2d0c      	cmp	r5, #12
 8014132:	bf38      	it	cc
 8014134:	250c      	movcc	r5, #12
 8014136:	2d00      	cmp	r5, #0
 8014138:	4607      	mov	r7, r0
 801413a:	db01      	blt.n	8014140 <_malloc_r+0x1c>
 801413c:	42a9      	cmp	r1, r5
 801413e:	d905      	bls.n	801414c <_malloc_r+0x28>
 8014140:	230c      	movs	r3, #12
 8014142:	603b      	str	r3, [r7, #0]
 8014144:	2600      	movs	r6, #0
 8014146:	4630      	mov	r0, r6
 8014148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801414c:	4e2e      	ldr	r6, [pc, #184]	; (8014208 <_malloc_r+0xe4>)
 801414e:	f001 fed9 	bl	8015f04 <__malloc_lock>
 8014152:	6833      	ldr	r3, [r6, #0]
 8014154:	461c      	mov	r4, r3
 8014156:	bb34      	cbnz	r4, 80141a6 <_malloc_r+0x82>
 8014158:	4629      	mov	r1, r5
 801415a:	4638      	mov	r0, r7
 801415c:	f7ff ffc2 	bl	80140e4 <sbrk_aligned>
 8014160:	1c43      	adds	r3, r0, #1
 8014162:	4604      	mov	r4, r0
 8014164:	d14d      	bne.n	8014202 <_malloc_r+0xde>
 8014166:	6834      	ldr	r4, [r6, #0]
 8014168:	4626      	mov	r6, r4
 801416a:	2e00      	cmp	r6, #0
 801416c:	d140      	bne.n	80141f0 <_malloc_r+0xcc>
 801416e:	6823      	ldr	r3, [r4, #0]
 8014170:	4631      	mov	r1, r6
 8014172:	4638      	mov	r0, r7
 8014174:	eb04 0803 	add.w	r8, r4, r3
 8014178:	f000 fdaa 	bl	8014cd0 <_sbrk_r>
 801417c:	4580      	cmp	r8, r0
 801417e:	d13a      	bne.n	80141f6 <_malloc_r+0xd2>
 8014180:	6821      	ldr	r1, [r4, #0]
 8014182:	3503      	adds	r5, #3
 8014184:	1a6d      	subs	r5, r5, r1
 8014186:	f025 0503 	bic.w	r5, r5, #3
 801418a:	3508      	adds	r5, #8
 801418c:	2d0c      	cmp	r5, #12
 801418e:	bf38      	it	cc
 8014190:	250c      	movcc	r5, #12
 8014192:	4629      	mov	r1, r5
 8014194:	4638      	mov	r0, r7
 8014196:	f7ff ffa5 	bl	80140e4 <sbrk_aligned>
 801419a:	3001      	adds	r0, #1
 801419c:	d02b      	beq.n	80141f6 <_malloc_r+0xd2>
 801419e:	6823      	ldr	r3, [r4, #0]
 80141a0:	442b      	add	r3, r5
 80141a2:	6023      	str	r3, [r4, #0]
 80141a4:	e00e      	b.n	80141c4 <_malloc_r+0xa0>
 80141a6:	6822      	ldr	r2, [r4, #0]
 80141a8:	1b52      	subs	r2, r2, r5
 80141aa:	d41e      	bmi.n	80141ea <_malloc_r+0xc6>
 80141ac:	2a0b      	cmp	r2, #11
 80141ae:	d916      	bls.n	80141de <_malloc_r+0xba>
 80141b0:	1961      	adds	r1, r4, r5
 80141b2:	42a3      	cmp	r3, r4
 80141b4:	6025      	str	r5, [r4, #0]
 80141b6:	bf18      	it	ne
 80141b8:	6059      	strne	r1, [r3, #4]
 80141ba:	6863      	ldr	r3, [r4, #4]
 80141bc:	bf08      	it	eq
 80141be:	6031      	streq	r1, [r6, #0]
 80141c0:	5162      	str	r2, [r4, r5]
 80141c2:	604b      	str	r3, [r1, #4]
 80141c4:	4638      	mov	r0, r7
 80141c6:	f104 060b 	add.w	r6, r4, #11
 80141ca:	f001 fea1 	bl	8015f10 <__malloc_unlock>
 80141ce:	f026 0607 	bic.w	r6, r6, #7
 80141d2:	1d23      	adds	r3, r4, #4
 80141d4:	1af2      	subs	r2, r6, r3
 80141d6:	d0b6      	beq.n	8014146 <_malloc_r+0x22>
 80141d8:	1b9b      	subs	r3, r3, r6
 80141da:	50a3      	str	r3, [r4, r2]
 80141dc:	e7b3      	b.n	8014146 <_malloc_r+0x22>
 80141de:	6862      	ldr	r2, [r4, #4]
 80141e0:	42a3      	cmp	r3, r4
 80141e2:	bf0c      	ite	eq
 80141e4:	6032      	streq	r2, [r6, #0]
 80141e6:	605a      	strne	r2, [r3, #4]
 80141e8:	e7ec      	b.n	80141c4 <_malloc_r+0xa0>
 80141ea:	4623      	mov	r3, r4
 80141ec:	6864      	ldr	r4, [r4, #4]
 80141ee:	e7b2      	b.n	8014156 <_malloc_r+0x32>
 80141f0:	4634      	mov	r4, r6
 80141f2:	6876      	ldr	r6, [r6, #4]
 80141f4:	e7b9      	b.n	801416a <_malloc_r+0x46>
 80141f6:	230c      	movs	r3, #12
 80141f8:	603b      	str	r3, [r7, #0]
 80141fa:	4638      	mov	r0, r7
 80141fc:	f001 fe88 	bl	8015f10 <__malloc_unlock>
 8014200:	e7a1      	b.n	8014146 <_malloc_r+0x22>
 8014202:	6025      	str	r5, [r4, #0]
 8014204:	e7de      	b.n	80141c4 <_malloc_r+0xa0>
 8014206:	bf00      	nop
 8014208:	20006f9c 	.word	0x20006f9c

0801420c <__cvt>:
 801420c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014210:	ec55 4b10 	vmov	r4, r5, d0
 8014214:	2d00      	cmp	r5, #0
 8014216:	460e      	mov	r6, r1
 8014218:	4619      	mov	r1, r3
 801421a:	462b      	mov	r3, r5
 801421c:	bfbb      	ittet	lt
 801421e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014222:	461d      	movlt	r5, r3
 8014224:	2300      	movge	r3, #0
 8014226:	232d      	movlt	r3, #45	; 0x2d
 8014228:	700b      	strb	r3, [r1, #0]
 801422a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801422c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014230:	4691      	mov	r9, r2
 8014232:	f023 0820 	bic.w	r8, r3, #32
 8014236:	bfbc      	itt	lt
 8014238:	4622      	movlt	r2, r4
 801423a:	4614      	movlt	r4, r2
 801423c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014240:	d005      	beq.n	801424e <__cvt+0x42>
 8014242:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014246:	d100      	bne.n	801424a <__cvt+0x3e>
 8014248:	3601      	adds	r6, #1
 801424a:	2102      	movs	r1, #2
 801424c:	e000      	b.n	8014250 <__cvt+0x44>
 801424e:	2103      	movs	r1, #3
 8014250:	ab03      	add	r3, sp, #12
 8014252:	9301      	str	r3, [sp, #4]
 8014254:	ab02      	add	r3, sp, #8
 8014256:	9300      	str	r3, [sp, #0]
 8014258:	ec45 4b10 	vmov	d0, r4, r5
 801425c:	4653      	mov	r3, sl
 801425e:	4632      	mov	r2, r6
 8014260:	f000 ff12 	bl	8015088 <_dtoa_r>
 8014264:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014268:	4607      	mov	r7, r0
 801426a:	d102      	bne.n	8014272 <__cvt+0x66>
 801426c:	f019 0f01 	tst.w	r9, #1
 8014270:	d022      	beq.n	80142b8 <__cvt+0xac>
 8014272:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014276:	eb07 0906 	add.w	r9, r7, r6
 801427a:	d110      	bne.n	801429e <__cvt+0x92>
 801427c:	783b      	ldrb	r3, [r7, #0]
 801427e:	2b30      	cmp	r3, #48	; 0x30
 8014280:	d10a      	bne.n	8014298 <__cvt+0x8c>
 8014282:	2200      	movs	r2, #0
 8014284:	2300      	movs	r3, #0
 8014286:	4620      	mov	r0, r4
 8014288:	4629      	mov	r1, r5
 801428a:	f7ec fc3d 	bl	8000b08 <__aeabi_dcmpeq>
 801428e:	b918      	cbnz	r0, 8014298 <__cvt+0x8c>
 8014290:	f1c6 0601 	rsb	r6, r6, #1
 8014294:	f8ca 6000 	str.w	r6, [sl]
 8014298:	f8da 3000 	ldr.w	r3, [sl]
 801429c:	4499      	add	r9, r3
 801429e:	2200      	movs	r2, #0
 80142a0:	2300      	movs	r3, #0
 80142a2:	4620      	mov	r0, r4
 80142a4:	4629      	mov	r1, r5
 80142a6:	f7ec fc2f 	bl	8000b08 <__aeabi_dcmpeq>
 80142aa:	b108      	cbz	r0, 80142b0 <__cvt+0xa4>
 80142ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80142b0:	2230      	movs	r2, #48	; 0x30
 80142b2:	9b03      	ldr	r3, [sp, #12]
 80142b4:	454b      	cmp	r3, r9
 80142b6:	d307      	bcc.n	80142c8 <__cvt+0xbc>
 80142b8:	9b03      	ldr	r3, [sp, #12]
 80142ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80142bc:	1bdb      	subs	r3, r3, r7
 80142be:	4638      	mov	r0, r7
 80142c0:	6013      	str	r3, [r2, #0]
 80142c2:	b004      	add	sp, #16
 80142c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142c8:	1c59      	adds	r1, r3, #1
 80142ca:	9103      	str	r1, [sp, #12]
 80142cc:	701a      	strb	r2, [r3, #0]
 80142ce:	e7f0      	b.n	80142b2 <__cvt+0xa6>

080142d0 <__exponent>:
 80142d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80142d2:	4603      	mov	r3, r0
 80142d4:	2900      	cmp	r1, #0
 80142d6:	bfb8      	it	lt
 80142d8:	4249      	neglt	r1, r1
 80142da:	f803 2b02 	strb.w	r2, [r3], #2
 80142de:	bfb4      	ite	lt
 80142e0:	222d      	movlt	r2, #45	; 0x2d
 80142e2:	222b      	movge	r2, #43	; 0x2b
 80142e4:	2909      	cmp	r1, #9
 80142e6:	7042      	strb	r2, [r0, #1]
 80142e8:	dd2a      	ble.n	8014340 <__exponent+0x70>
 80142ea:	f10d 0407 	add.w	r4, sp, #7
 80142ee:	46a4      	mov	ip, r4
 80142f0:	270a      	movs	r7, #10
 80142f2:	46a6      	mov	lr, r4
 80142f4:	460a      	mov	r2, r1
 80142f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80142fa:	fb07 1516 	mls	r5, r7, r6, r1
 80142fe:	3530      	adds	r5, #48	; 0x30
 8014300:	2a63      	cmp	r2, #99	; 0x63
 8014302:	f104 34ff 	add.w	r4, r4, #4294967295
 8014306:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801430a:	4631      	mov	r1, r6
 801430c:	dcf1      	bgt.n	80142f2 <__exponent+0x22>
 801430e:	3130      	adds	r1, #48	; 0x30
 8014310:	f1ae 0502 	sub.w	r5, lr, #2
 8014314:	f804 1c01 	strb.w	r1, [r4, #-1]
 8014318:	1c44      	adds	r4, r0, #1
 801431a:	4629      	mov	r1, r5
 801431c:	4561      	cmp	r1, ip
 801431e:	d30a      	bcc.n	8014336 <__exponent+0x66>
 8014320:	f10d 0209 	add.w	r2, sp, #9
 8014324:	eba2 020e 	sub.w	r2, r2, lr
 8014328:	4565      	cmp	r5, ip
 801432a:	bf88      	it	hi
 801432c:	2200      	movhi	r2, #0
 801432e:	4413      	add	r3, r2
 8014330:	1a18      	subs	r0, r3, r0
 8014332:	b003      	add	sp, #12
 8014334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014336:	f811 2b01 	ldrb.w	r2, [r1], #1
 801433a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801433e:	e7ed      	b.n	801431c <__exponent+0x4c>
 8014340:	2330      	movs	r3, #48	; 0x30
 8014342:	3130      	adds	r1, #48	; 0x30
 8014344:	7083      	strb	r3, [r0, #2]
 8014346:	70c1      	strb	r1, [r0, #3]
 8014348:	1d03      	adds	r3, r0, #4
 801434a:	e7f1      	b.n	8014330 <__exponent+0x60>

0801434c <_printf_float>:
 801434c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014350:	ed2d 8b02 	vpush	{d8}
 8014354:	b08d      	sub	sp, #52	; 0x34
 8014356:	460c      	mov	r4, r1
 8014358:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801435c:	4616      	mov	r6, r2
 801435e:	461f      	mov	r7, r3
 8014360:	4605      	mov	r5, r0
 8014362:	f001 fd41 	bl	8015de8 <_localeconv_r>
 8014366:	f8d0 a000 	ldr.w	sl, [r0]
 801436a:	4650      	mov	r0, sl
 801436c:	f7eb ff50 	bl	8000210 <strlen>
 8014370:	2300      	movs	r3, #0
 8014372:	930a      	str	r3, [sp, #40]	; 0x28
 8014374:	6823      	ldr	r3, [r4, #0]
 8014376:	9305      	str	r3, [sp, #20]
 8014378:	f8d8 3000 	ldr.w	r3, [r8]
 801437c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014380:	3307      	adds	r3, #7
 8014382:	f023 0307 	bic.w	r3, r3, #7
 8014386:	f103 0208 	add.w	r2, r3, #8
 801438a:	f8c8 2000 	str.w	r2, [r8]
 801438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014392:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014396:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801439a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801439e:	9307      	str	r3, [sp, #28]
 80143a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80143a4:	ee08 0a10 	vmov	s16, r0
 80143a8:	4b9f      	ldr	r3, [pc, #636]	; (8014628 <_printf_float+0x2dc>)
 80143aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80143ae:	f04f 32ff 	mov.w	r2, #4294967295
 80143b2:	f7ec fbdb 	bl	8000b6c <__aeabi_dcmpun>
 80143b6:	bb88      	cbnz	r0, 801441c <_printf_float+0xd0>
 80143b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80143bc:	4b9a      	ldr	r3, [pc, #616]	; (8014628 <_printf_float+0x2dc>)
 80143be:	f04f 32ff 	mov.w	r2, #4294967295
 80143c2:	f7ec fbb5 	bl	8000b30 <__aeabi_dcmple>
 80143c6:	bb48      	cbnz	r0, 801441c <_printf_float+0xd0>
 80143c8:	2200      	movs	r2, #0
 80143ca:	2300      	movs	r3, #0
 80143cc:	4640      	mov	r0, r8
 80143ce:	4649      	mov	r1, r9
 80143d0:	f7ec fba4 	bl	8000b1c <__aeabi_dcmplt>
 80143d4:	b110      	cbz	r0, 80143dc <_printf_float+0x90>
 80143d6:	232d      	movs	r3, #45	; 0x2d
 80143d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80143dc:	4b93      	ldr	r3, [pc, #588]	; (801462c <_printf_float+0x2e0>)
 80143de:	4894      	ldr	r0, [pc, #592]	; (8014630 <_printf_float+0x2e4>)
 80143e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80143e4:	bf94      	ite	ls
 80143e6:	4698      	movls	r8, r3
 80143e8:	4680      	movhi	r8, r0
 80143ea:	2303      	movs	r3, #3
 80143ec:	6123      	str	r3, [r4, #16]
 80143ee:	9b05      	ldr	r3, [sp, #20]
 80143f0:	f023 0204 	bic.w	r2, r3, #4
 80143f4:	6022      	str	r2, [r4, #0]
 80143f6:	f04f 0900 	mov.w	r9, #0
 80143fa:	9700      	str	r7, [sp, #0]
 80143fc:	4633      	mov	r3, r6
 80143fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8014400:	4621      	mov	r1, r4
 8014402:	4628      	mov	r0, r5
 8014404:	f000 f9d8 	bl	80147b8 <_printf_common>
 8014408:	3001      	adds	r0, #1
 801440a:	f040 8090 	bne.w	801452e <_printf_float+0x1e2>
 801440e:	f04f 30ff 	mov.w	r0, #4294967295
 8014412:	b00d      	add	sp, #52	; 0x34
 8014414:	ecbd 8b02 	vpop	{d8}
 8014418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801441c:	4642      	mov	r2, r8
 801441e:	464b      	mov	r3, r9
 8014420:	4640      	mov	r0, r8
 8014422:	4649      	mov	r1, r9
 8014424:	f7ec fba2 	bl	8000b6c <__aeabi_dcmpun>
 8014428:	b140      	cbz	r0, 801443c <_printf_float+0xf0>
 801442a:	464b      	mov	r3, r9
 801442c:	2b00      	cmp	r3, #0
 801442e:	bfbc      	itt	lt
 8014430:	232d      	movlt	r3, #45	; 0x2d
 8014432:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014436:	487f      	ldr	r0, [pc, #508]	; (8014634 <_printf_float+0x2e8>)
 8014438:	4b7f      	ldr	r3, [pc, #508]	; (8014638 <_printf_float+0x2ec>)
 801443a:	e7d1      	b.n	80143e0 <_printf_float+0x94>
 801443c:	6863      	ldr	r3, [r4, #4]
 801443e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8014442:	9206      	str	r2, [sp, #24]
 8014444:	1c5a      	adds	r2, r3, #1
 8014446:	d13f      	bne.n	80144c8 <_printf_float+0x17c>
 8014448:	2306      	movs	r3, #6
 801444a:	6063      	str	r3, [r4, #4]
 801444c:	9b05      	ldr	r3, [sp, #20]
 801444e:	6861      	ldr	r1, [r4, #4]
 8014450:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014454:	2300      	movs	r3, #0
 8014456:	9303      	str	r3, [sp, #12]
 8014458:	ab0a      	add	r3, sp, #40	; 0x28
 801445a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801445e:	ab09      	add	r3, sp, #36	; 0x24
 8014460:	ec49 8b10 	vmov	d0, r8, r9
 8014464:	9300      	str	r3, [sp, #0]
 8014466:	6022      	str	r2, [r4, #0]
 8014468:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801446c:	4628      	mov	r0, r5
 801446e:	f7ff fecd 	bl	801420c <__cvt>
 8014472:	9b06      	ldr	r3, [sp, #24]
 8014474:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014476:	2b47      	cmp	r3, #71	; 0x47
 8014478:	4680      	mov	r8, r0
 801447a:	d108      	bne.n	801448e <_printf_float+0x142>
 801447c:	1cc8      	adds	r0, r1, #3
 801447e:	db02      	blt.n	8014486 <_printf_float+0x13a>
 8014480:	6863      	ldr	r3, [r4, #4]
 8014482:	4299      	cmp	r1, r3
 8014484:	dd41      	ble.n	801450a <_printf_float+0x1be>
 8014486:	f1ab 0b02 	sub.w	fp, fp, #2
 801448a:	fa5f fb8b 	uxtb.w	fp, fp
 801448e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014492:	d820      	bhi.n	80144d6 <_printf_float+0x18a>
 8014494:	3901      	subs	r1, #1
 8014496:	465a      	mov	r2, fp
 8014498:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801449c:	9109      	str	r1, [sp, #36]	; 0x24
 801449e:	f7ff ff17 	bl	80142d0 <__exponent>
 80144a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144a4:	1813      	adds	r3, r2, r0
 80144a6:	2a01      	cmp	r2, #1
 80144a8:	4681      	mov	r9, r0
 80144aa:	6123      	str	r3, [r4, #16]
 80144ac:	dc02      	bgt.n	80144b4 <_printf_float+0x168>
 80144ae:	6822      	ldr	r2, [r4, #0]
 80144b0:	07d2      	lsls	r2, r2, #31
 80144b2:	d501      	bpl.n	80144b8 <_printf_float+0x16c>
 80144b4:	3301      	adds	r3, #1
 80144b6:	6123      	str	r3, [r4, #16]
 80144b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d09c      	beq.n	80143fa <_printf_float+0xae>
 80144c0:	232d      	movs	r3, #45	; 0x2d
 80144c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80144c6:	e798      	b.n	80143fa <_printf_float+0xae>
 80144c8:	9a06      	ldr	r2, [sp, #24]
 80144ca:	2a47      	cmp	r2, #71	; 0x47
 80144cc:	d1be      	bne.n	801444c <_printf_float+0x100>
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d1bc      	bne.n	801444c <_printf_float+0x100>
 80144d2:	2301      	movs	r3, #1
 80144d4:	e7b9      	b.n	801444a <_printf_float+0xfe>
 80144d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80144da:	d118      	bne.n	801450e <_printf_float+0x1c2>
 80144dc:	2900      	cmp	r1, #0
 80144de:	6863      	ldr	r3, [r4, #4]
 80144e0:	dd0b      	ble.n	80144fa <_printf_float+0x1ae>
 80144e2:	6121      	str	r1, [r4, #16]
 80144e4:	b913      	cbnz	r3, 80144ec <_printf_float+0x1a0>
 80144e6:	6822      	ldr	r2, [r4, #0]
 80144e8:	07d0      	lsls	r0, r2, #31
 80144ea:	d502      	bpl.n	80144f2 <_printf_float+0x1a6>
 80144ec:	3301      	adds	r3, #1
 80144ee:	440b      	add	r3, r1
 80144f0:	6123      	str	r3, [r4, #16]
 80144f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80144f4:	f04f 0900 	mov.w	r9, #0
 80144f8:	e7de      	b.n	80144b8 <_printf_float+0x16c>
 80144fa:	b913      	cbnz	r3, 8014502 <_printf_float+0x1b6>
 80144fc:	6822      	ldr	r2, [r4, #0]
 80144fe:	07d2      	lsls	r2, r2, #31
 8014500:	d501      	bpl.n	8014506 <_printf_float+0x1ba>
 8014502:	3302      	adds	r3, #2
 8014504:	e7f4      	b.n	80144f0 <_printf_float+0x1a4>
 8014506:	2301      	movs	r3, #1
 8014508:	e7f2      	b.n	80144f0 <_printf_float+0x1a4>
 801450a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801450e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014510:	4299      	cmp	r1, r3
 8014512:	db05      	blt.n	8014520 <_printf_float+0x1d4>
 8014514:	6823      	ldr	r3, [r4, #0]
 8014516:	6121      	str	r1, [r4, #16]
 8014518:	07d8      	lsls	r0, r3, #31
 801451a:	d5ea      	bpl.n	80144f2 <_printf_float+0x1a6>
 801451c:	1c4b      	adds	r3, r1, #1
 801451e:	e7e7      	b.n	80144f0 <_printf_float+0x1a4>
 8014520:	2900      	cmp	r1, #0
 8014522:	bfd4      	ite	le
 8014524:	f1c1 0202 	rsble	r2, r1, #2
 8014528:	2201      	movgt	r2, #1
 801452a:	4413      	add	r3, r2
 801452c:	e7e0      	b.n	80144f0 <_printf_float+0x1a4>
 801452e:	6823      	ldr	r3, [r4, #0]
 8014530:	055a      	lsls	r2, r3, #21
 8014532:	d407      	bmi.n	8014544 <_printf_float+0x1f8>
 8014534:	6923      	ldr	r3, [r4, #16]
 8014536:	4642      	mov	r2, r8
 8014538:	4631      	mov	r1, r6
 801453a:	4628      	mov	r0, r5
 801453c:	47b8      	blx	r7
 801453e:	3001      	adds	r0, #1
 8014540:	d12c      	bne.n	801459c <_printf_float+0x250>
 8014542:	e764      	b.n	801440e <_printf_float+0xc2>
 8014544:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014548:	f240 80e0 	bls.w	801470c <_printf_float+0x3c0>
 801454c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014550:	2200      	movs	r2, #0
 8014552:	2300      	movs	r3, #0
 8014554:	f7ec fad8 	bl	8000b08 <__aeabi_dcmpeq>
 8014558:	2800      	cmp	r0, #0
 801455a:	d034      	beq.n	80145c6 <_printf_float+0x27a>
 801455c:	4a37      	ldr	r2, [pc, #220]	; (801463c <_printf_float+0x2f0>)
 801455e:	2301      	movs	r3, #1
 8014560:	4631      	mov	r1, r6
 8014562:	4628      	mov	r0, r5
 8014564:	47b8      	blx	r7
 8014566:	3001      	adds	r0, #1
 8014568:	f43f af51 	beq.w	801440e <_printf_float+0xc2>
 801456c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014570:	429a      	cmp	r2, r3
 8014572:	db02      	blt.n	801457a <_printf_float+0x22e>
 8014574:	6823      	ldr	r3, [r4, #0]
 8014576:	07d8      	lsls	r0, r3, #31
 8014578:	d510      	bpl.n	801459c <_printf_float+0x250>
 801457a:	ee18 3a10 	vmov	r3, s16
 801457e:	4652      	mov	r2, sl
 8014580:	4631      	mov	r1, r6
 8014582:	4628      	mov	r0, r5
 8014584:	47b8      	blx	r7
 8014586:	3001      	adds	r0, #1
 8014588:	f43f af41 	beq.w	801440e <_printf_float+0xc2>
 801458c:	f04f 0800 	mov.w	r8, #0
 8014590:	f104 091a 	add.w	r9, r4, #26
 8014594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014596:	3b01      	subs	r3, #1
 8014598:	4543      	cmp	r3, r8
 801459a:	dc09      	bgt.n	80145b0 <_printf_float+0x264>
 801459c:	6823      	ldr	r3, [r4, #0]
 801459e:	079b      	lsls	r3, r3, #30
 80145a0:	f100 8105 	bmi.w	80147ae <_printf_float+0x462>
 80145a4:	68e0      	ldr	r0, [r4, #12]
 80145a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80145a8:	4298      	cmp	r0, r3
 80145aa:	bfb8      	it	lt
 80145ac:	4618      	movlt	r0, r3
 80145ae:	e730      	b.n	8014412 <_printf_float+0xc6>
 80145b0:	2301      	movs	r3, #1
 80145b2:	464a      	mov	r2, r9
 80145b4:	4631      	mov	r1, r6
 80145b6:	4628      	mov	r0, r5
 80145b8:	47b8      	blx	r7
 80145ba:	3001      	adds	r0, #1
 80145bc:	f43f af27 	beq.w	801440e <_printf_float+0xc2>
 80145c0:	f108 0801 	add.w	r8, r8, #1
 80145c4:	e7e6      	b.n	8014594 <_printf_float+0x248>
 80145c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	dc39      	bgt.n	8014640 <_printf_float+0x2f4>
 80145cc:	4a1b      	ldr	r2, [pc, #108]	; (801463c <_printf_float+0x2f0>)
 80145ce:	2301      	movs	r3, #1
 80145d0:	4631      	mov	r1, r6
 80145d2:	4628      	mov	r0, r5
 80145d4:	47b8      	blx	r7
 80145d6:	3001      	adds	r0, #1
 80145d8:	f43f af19 	beq.w	801440e <_printf_float+0xc2>
 80145dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80145e0:	4313      	orrs	r3, r2
 80145e2:	d102      	bne.n	80145ea <_printf_float+0x29e>
 80145e4:	6823      	ldr	r3, [r4, #0]
 80145e6:	07d9      	lsls	r1, r3, #31
 80145e8:	d5d8      	bpl.n	801459c <_printf_float+0x250>
 80145ea:	ee18 3a10 	vmov	r3, s16
 80145ee:	4652      	mov	r2, sl
 80145f0:	4631      	mov	r1, r6
 80145f2:	4628      	mov	r0, r5
 80145f4:	47b8      	blx	r7
 80145f6:	3001      	adds	r0, #1
 80145f8:	f43f af09 	beq.w	801440e <_printf_float+0xc2>
 80145fc:	f04f 0900 	mov.w	r9, #0
 8014600:	f104 0a1a 	add.w	sl, r4, #26
 8014604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014606:	425b      	negs	r3, r3
 8014608:	454b      	cmp	r3, r9
 801460a:	dc01      	bgt.n	8014610 <_printf_float+0x2c4>
 801460c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801460e:	e792      	b.n	8014536 <_printf_float+0x1ea>
 8014610:	2301      	movs	r3, #1
 8014612:	4652      	mov	r2, sl
 8014614:	4631      	mov	r1, r6
 8014616:	4628      	mov	r0, r5
 8014618:	47b8      	blx	r7
 801461a:	3001      	adds	r0, #1
 801461c:	f43f aef7 	beq.w	801440e <_printf_float+0xc2>
 8014620:	f109 0901 	add.w	r9, r9, #1
 8014624:	e7ee      	b.n	8014604 <_printf_float+0x2b8>
 8014626:	bf00      	nop
 8014628:	7fefffff 	.word	0x7fefffff
 801462c:	0801702c 	.word	0x0801702c
 8014630:	08017030 	.word	0x08017030
 8014634:	08017038 	.word	0x08017038
 8014638:	08017034 	.word	0x08017034
 801463c:	0801703c 	.word	0x0801703c
 8014640:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014642:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014644:	429a      	cmp	r2, r3
 8014646:	bfa8      	it	ge
 8014648:	461a      	movge	r2, r3
 801464a:	2a00      	cmp	r2, #0
 801464c:	4691      	mov	r9, r2
 801464e:	dc37      	bgt.n	80146c0 <_printf_float+0x374>
 8014650:	f04f 0b00 	mov.w	fp, #0
 8014654:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014658:	f104 021a 	add.w	r2, r4, #26
 801465c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801465e:	9305      	str	r3, [sp, #20]
 8014660:	eba3 0309 	sub.w	r3, r3, r9
 8014664:	455b      	cmp	r3, fp
 8014666:	dc33      	bgt.n	80146d0 <_printf_float+0x384>
 8014668:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801466c:	429a      	cmp	r2, r3
 801466e:	db3b      	blt.n	80146e8 <_printf_float+0x39c>
 8014670:	6823      	ldr	r3, [r4, #0]
 8014672:	07da      	lsls	r2, r3, #31
 8014674:	d438      	bmi.n	80146e8 <_printf_float+0x39c>
 8014676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014678:	9a05      	ldr	r2, [sp, #20]
 801467a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801467c:	1a9a      	subs	r2, r3, r2
 801467e:	eba3 0901 	sub.w	r9, r3, r1
 8014682:	4591      	cmp	r9, r2
 8014684:	bfa8      	it	ge
 8014686:	4691      	movge	r9, r2
 8014688:	f1b9 0f00 	cmp.w	r9, #0
 801468c:	dc35      	bgt.n	80146fa <_printf_float+0x3ae>
 801468e:	f04f 0800 	mov.w	r8, #0
 8014692:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014696:	f104 0a1a 	add.w	sl, r4, #26
 801469a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801469e:	1a9b      	subs	r3, r3, r2
 80146a0:	eba3 0309 	sub.w	r3, r3, r9
 80146a4:	4543      	cmp	r3, r8
 80146a6:	f77f af79 	ble.w	801459c <_printf_float+0x250>
 80146aa:	2301      	movs	r3, #1
 80146ac:	4652      	mov	r2, sl
 80146ae:	4631      	mov	r1, r6
 80146b0:	4628      	mov	r0, r5
 80146b2:	47b8      	blx	r7
 80146b4:	3001      	adds	r0, #1
 80146b6:	f43f aeaa 	beq.w	801440e <_printf_float+0xc2>
 80146ba:	f108 0801 	add.w	r8, r8, #1
 80146be:	e7ec      	b.n	801469a <_printf_float+0x34e>
 80146c0:	4613      	mov	r3, r2
 80146c2:	4631      	mov	r1, r6
 80146c4:	4642      	mov	r2, r8
 80146c6:	4628      	mov	r0, r5
 80146c8:	47b8      	blx	r7
 80146ca:	3001      	adds	r0, #1
 80146cc:	d1c0      	bne.n	8014650 <_printf_float+0x304>
 80146ce:	e69e      	b.n	801440e <_printf_float+0xc2>
 80146d0:	2301      	movs	r3, #1
 80146d2:	4631      	mov	r1, r6
 80146d4:	4628      	mov	r0, r5
 80146d6:	9205      	str	r2, [sp, #20]
 80146d8:	47b8      	blx	r7
 80146da:	3001      	adds	r0, #1
 80146dc:	f43f ae97 	beq.w	801440e <_printf_float+0xc2>
 80146e0:	9a05      	ldr	r2, [sp, #20]
 80146e2:	f10b 0b01 	add.w	fp, fp, #1
 80146e6:	e7b9      	b.n	801465c <_printf_float+0x310>
 80146e8:	ee18 3a10 	vmov	r3, s16
 80146ec:	4652      	mov	r2, sl
 80146ee:	4631      	mov	r1, r6
 80146f0:	4628      	mov	r0, r5
 80146f2:	47b8      	blx	r7
 80146f4:	3001      	adds	r0, #1
 80146f6:	d1be      	bne.n	8014676 <_printf_float+0x32a>
 80146f8:	e689      	b.n	801440e <_printf_float+0xc2>
 80146fa:	9a05      	ldr	r2, [sp, #20]
 80146fc:	464b      	mov	r3, r9
 80146fe:	4442      	add	r2, r8
 8014700:	4631      	mov	r1, r6
 8014702:	4628      	mov	r0, r5
 8014704:	47b8      	blx	r7
 8014706:	3001      	adds	r0, #1
 8014708:	d1c1      	bne.n	801468e <_printf_float+0x342>
 801470a:	e680      	b.n	801440e <_printf_float+0xc2>
 801470c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801470e:	2a01      	cmp	r2, #1
 8014710:	dc01      	bgt.n	8014716 <_printf_float+0x3ca>
 8014712:	07db      	lsls	r3, r3, #31
 8014714:	d538      	bpl.n	8014788 <_printf_float+0x43c>
 8014716:	2301      	movs	r3, #1
 8014718:	4642      	mov	r2, r8
 801471a:	4631      	mov	r1, r6
 801471c:	4628      	mov	r0, r5
 801471e:	47b8      	blx	r7
 8014720:	3001      	adds	r0, #1
 8014722:	f43f ae74 	beq.w	801440e <_printf_float+0xc2>
 8014726:	ee18 3a10 	vmov	r3, s16
 801472a:	4652      	mov	r2, sl
 801472c:	4631      	mov	r1, r6
 801472e:	4628      	mov	r0, r5
 8014730:	47b8      	blx	r7
 8014732:	3001      	adds	r0, #1
 8014734:	f43f ae6b 	beq.w	801440e <_printf_float+0xc2>
 8014738:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801473c:	2200      	movs	r2, #0
 801473e:	2300      	movs	r3, #0
 8014740:	f7ec f9e2 	bl	8000b08 <__aeabi_dcmpeq>
 8014744:	b9d8      	cbnz	r0, 801477e <_printf_float+0x432>
 8014746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014748:	f108 0201 	add.w	r2, r8, #1
 801474c:	3b01      	subs	r3, #1
 801474e:	4631      	mov	r1, r6
 8014750:	4628      	mov	r0, r5
 8014752:	47b8      	blx	r7
 8014754:	3001      	adds	r0, #1
 8014756:	d10e      	bne.n	8014776 <_printf_float+0x42a>
 8014758:	e659      	b.n	801440e <_printf_float+0xc2>
 801475a:	2301      	movs	r3, #1
 801475c:	4652      	mov	r2, sl
 801475e:	4631      	mov	r1, r6
 8014760:	4628      	mov	r0, r5
 8014762:	47b8      	blx	r7
 8014764:	3001      	adds	r0, #1
 8014766:	f43f ae52 	beq.w	801440e <_printf_float+0xc2>
 801476a:	f108 0801 	add.w	r8, r8, #1
 801476e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014770:	3b01      	subs	r3, #1
 8014772:	4543      	cmp	r3, r8
 8014774:	dcf1      	bgt.n	801475a <_printf_float+0x40e>
 8014776:	464b      	mov	r3, r9
 8014778:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801477c:	e6dc      	b.n	8014538 <_printf_float+0x1ec>
 801477e:	f04f 0800 	mov.w	r8, #0
 8014782:	f104 0a1a 	add.w	sl, r4, #26
 8014786:	e7f2      	b.n	801476e <_printf_float+0x422>
 8014788:	2301      	movs	r3, #1
 801478a:	4642      	mov	r2, r8
 801478c:	e7df      	b.n	801474e <_printf_float+0x402>
 801478e:	2301      	movs	r3, #1
 8014790:	464a      	mov	r2, r9
 8014792:	4631      	mov	r1, r6
 8014794:	4628      	mov	r0, r5
 8014796:	47b8      	blx	r7
 8014798:	3001      	adds	r0, #1
 801479a:	f43f ae38 	beq.w	801440e <_printf_float+0xc2>
 801479e:	f108 0801 	add.w	r8, r8, #1
 80147a2:	68e3      	ldr	r3, [r4, #12]
 80147a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80147a6:	1a5b      	subs	r3, r3, r1
 80147a8:	4543      	cmp	r3, r8
 80147aa:	dcf0      	bgt.n	801478e <_printf_float+0x442>
 80147ac:	e6fa      	b.n	80145a4 <_printf_float+0x258>
 80147ae:	f04f 0800 	mov.w	r8, #0
 80147b2:	f104 0919 	add.w	r9, r4, #25
 80147b6:	e7f4      	b.n	80147a2 <_printf_float+0x456>

080147b8 <_printf_common>:
 80147b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147bc:	4616      	mov	r6, r2
 80147be:	4699      	mov	r9, r3
 80147c0:	688a      	ldr	r2, [r1, #8]
 80147c2:	690b      	ldr	r3, [r1, #16]
 80147c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80147c8:	4293      	cmp	r3, r2
 80147ca:	bfb8      	it	lt
 80147cc:	4613      	movlt	r3, r2
 80147ce:	6033      	str	r3, [r6, #0]
 80147d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80147d4:	4607      	mov	r7, r0
 80147d6:	460c      	mov	r4, r1
 80147d8:	b10a      	cbz	r2, 80147de <_printf_common+0x26>
 80147da:	3301      	adds	r3, #1
 80147dc:	6033      	str	r3, [r6, #0]
 80147de:	6823      	ldr	r3, [r4, #0]
 80147e0:	0699      	lsls	r1, r3, #26
 80147e2:	bf42      	ittt	mi
 80147e4:	6833      	ldrmi	r3, [r6, #0]
 80147e6:	3302      	addmi	r3, #2
 80147e8:	6033      	strmi	r3, [r6, #0]
 80147ea:	6825      	ldr	r5, [r4, #0]
 80147ec:	f015 0506 	ands.w	r5, r5, #6
 80147f0:	d106      	bne.n	8014800 <_printf_common+0x48>
 80147f2:	f104 0a19 	add.w	sl, r4, #25
 80147f6:	68e3      	ldr	r3, [r4, #12]
 80147f8:	6832      	ldr	r2, [r6, #0]
 80147fa:	1a9b      	subs	r3, r3, r2
 80147fc:	42ab      	cmp	r3, r5
 80147fe:	dc26      	bgt.n	801484e <_printf_common+0x96>
 8014800:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014804:	1e13      	subs	r3, r2, #0
 8014806:	6822      	ldr	r2, [r4, #0]
 8014808:	bf18      	it	ne
 801480a:	2301      	movne	r3, #1
 801480c:	0692      	lsls	r2, r2, #26
 801480e:	d42b      	bmi.n	8014868 <_printf_common+0xb0>
 8014810:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014814:	4649      	mov	r1, r9
 8014816:	4638      	mov	r0, r7
 8014818:	47c0      	blx	r8
 801481a:	3001      	adds	r0, #1
 801481c:	d01e      	beq.n	801485c <_printf_common+0xa4>
 801481e:	6823      	ldr	r3, [r4, #0]
 8014820:	68e5      	ldr	r5, [r4, #12]
 8014822:	6832      	ldr	r2, [r6, #0]
 8014824:	f003 0306 	and.w	r3, r3, #6
 8014828:	2b04      	cmp	r3, #4
 801482a:	bf08      	it	eq
 801482c:	1aad      	subeq	r5, r5, r2
 801482e:	68a3      	ldr	r3, [r4, #8]
 8014830:	6922      	ldr	r2, [r4, #16]
 8014832:	bf0c      	ite	eq
 8014834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014838:	2500      	movne	r5, #0
 801483a:	4293      	cmp	r3, r2
 801483c:	bfc4      	itt	gt
 801483e:	1a9b      	subgt	r3, r3, r2
 8014840:	18ed      	addgt	r5, r5, r3
 8014842:	2600      	movs	r6, #0
 8014844:	341a      	adds	r4, #26
 8014846:	42b5      	cmp	r5, r6
 8014848:	d11a      	bne.n	8014880 <_printf_common+0xc8>
 801484a:	2000      	movs	r0, #0
 801484c:	e008      	b.n	8014860 <_printf_common+0xa8>
 801484e:	2301      	movs	r3, #1
 8014850:	4652      	mov	r2, sl
 8014852:	4649      	mov	r1, r9
 8014854:	4638      	mov	r0, r7
 8014856:	47c0      	blx	r8
 8014858:	3001      	adds	r0, #1
 801485a:	d103      	bne.n	8014864 <_printf_common+0xac>
 801485c:	f04f 30ff 	mov.w	r0, #4294967295
 8014860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014864:	3501      	adds	r5, #1
 8014866:	e7c6      	b.n	80147f6 <_printf_common+0x3e>
 8014868:	18e1      	adds	r1, r4, r3
 801486a:	1c5a      	adds	r2, r3, #1
 801486c:	2030      	movs	r0, #48	; 0x30
 801486e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014872:	4422      	add	r2, r4
 8014874:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014878:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801487c:	3302      	adds	r3, #2
 801487e:	e7c7      	b.n	8014810 <_printf_common+0x58>
 8014880:	2301      	movs	r3, #1
 8014882:	4622      	mov	r2, r4
 8014884:	4649      	mov	r1, r9
 8014886:	4638      	mov	r0, r7
 8014888:	47c0      	blx	r8
 801488a:	3001      	adds	r0, #1
 801488c:	d0e6      	beq.n	801485c <_printf_common+0xa4>
 801488e:	3601      	adds	r6, #1
 8014890:	e7d9      	b.n	8014846 <_printf_common+0x8e>
	...

08014894 <_printf_i>:
 8014894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014898:	7e0f      	ldrb	r7, [r1, #24]
 801489a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801489c:	2f78      	cmp	r7, #120	; 0x78
 801489e:	4691      	mov	r9, r2
 80148a0:	4680      	mov	r8, r0
 80148a2:	460c      	mov	r4, r1
 80148a4:	469a      	mov	sl, r3
 80148a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80148aa:	d807      	bhi.n	80148bc <_printf_i+0x28>
 80148ac:	2f62      	cmp	r7, #98	; 0x62
 80148ae:	d80a      	bhi.n	80148c6 <_printf_i+0x32>
 80148b0:	2f00      	cmp	r7, #0
 80148b2:	f000 80d8 	beq.w	8014a66 <_printf_i+0x1d2>
 80148b6:	2f58      	cmp	r7, #88	; 0x58
 80148b8:	f000 80a3 	beq.w	8014a02 <_printf_i+0x16e>
 80148bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80148c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80148c4:	e03a      	b.n	801493c <_printf_i+0xa8>
 80148c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80148ca:	2b15      	cmp	r3, #21
 80148cc:	d8f6      	bhi.n	80148bc <_printf_i+0x28>
 80148ce:	a101      	add	r1, pc, #4	; (adr r1, 80148d4 <_printf_i+0x40>)
 80148d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80148d4:	0801492d 	.word	0x0801492d
 80148d8:	08014941 	.word	0x08014941
 80148dc:	080148bd 	.word	0x080148bd
 80148e0:	080148bd 	.word	0x080148bd
 80148e4:	080148bd 	.word	0x080148bd
 80148e8:	080148bd 	.word	0x080148bd
 80148ec:	08014941 	.word	0x08014941
 80148f0:	080148bd 	.word	0x080148bd
 80148f4:	080148bd 	.word	0x080148bd
 80148f8:	080148bd 	.word	0x080148bd
 80148fc:	080148bd 	.word	0x080148bd
 8014900:	08014a4d 	.word	0x08014a4d
 8014904:	08014971 	.word	0x08014971
 8014908:	08014a2f 	.word	0x08014a2f
 801490c:	080148bd 	.word	0x080148bd
 8014910:	080148bd 	.word	0x080148bd
 8014914:	08014a6f 	.word	0x08014a6f
 8014918:	080148bd 	.word	0x080148bd
 801491c:	08014971 	.word	0x08014971
 8014920:	080148bd 	.word	0x080148bd
 8014924:	080148bd 	.word	0x080148bd
 8014928:	08014a37 	.word	0x08014a37
 801492c:	682b      	ldr	r3, [r5, #0]
 801492e:	1d1a      	adds	r2, r3, #4
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	602a      	str	r2, [r5, #0]
 8014934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801493c:	2301      	movs	r3, #1
 801493e:	e0a3      	b.n	8014a88 <_printf_i+0x1f4>
 8014940:	6820      	ldr	r0, [r4, #0]
 8014942:	6829      	ldr	r1, [r5, #0]
 8014944:	0606      	lsls	r6, r0, #24
 8014946:	f101 0304 	add.w	r3, r1, #4
 801494a:	d50a      	bpl.n	8014962 <_printf_i+0xce>
 801494c:	680e      	ldr	r6, [r1, #0]
 801494e:	602b      	str	r3, [r5, #0]
 8014950:	2e00      	cmp	r6, #0
 8014952:	da03      	bge.n	801495c <_printf_i+0xc8>
 8014954:	232d      	movs	r3, #45	; 0x2d
 8014956:	4276      	negs	r6, r6
 8014958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801495c:	485e      	ldr	r0, [pc, #376]	; (8014ad8 <_printf_i+0x244>)
 801495e:	230a      	movs	r3, #10
 8014960:	e019      	b.n	8014996 <_printf_i+0x102>
 8014962:	680e      	ldr	r6, [r1, #0]
 8014964:	602b      	str	r3, [r5, #0]
 8014966:	f010 0f40 	tst.w	r0, #64	; 0x40
 801496a:	bf18      	it	ne
 801496c:	b236      	sxthne	r6, r6
 801496e:	e7ef      	b.n	8014950 <_printf_i+0xbc>
 8014970:	682b      	ldr	r3, [r5, #0]
 8014972:	6820      	ldr	r0, [r4, #0]
 8014974:	1d19      	adds	r1, r3, #4
 8014976:	6029      	str	r1, [r5, #0]
 8014978:	0601      	lsls	r1, r0, #24
 801497a:	d501      	bpl.n	8014980 <_printf_i+0xec>
 801497c:	681e      	ldr	r6, [r3, #0]
 801497e:	e002      	b.n	8014986 <_printf_i+0xf2>
 8014980:	0646      	lsls	r6, r0, #25
 8014982:	d5fb      	bpl.n	801497c <_printf_i+0xe8>
 8014984:	881e      	ldrh	r6, [r3, #0]
 8014986:	4854      	ldr	r0, [pc, #336]	; (8014ad8 <_printf_i+0x244>)
 8014988:	2f6f      	cmp	r7, #111	; 0x6f
 801498a:	bf0c      	ite	eq
 801498c:	2308      	moveq	r3, #8
 801498e:	230a      	movne	r3, #10
 8014990:	2100      	movs	r1, #0
 8014992:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014996:	6865      	ldr	r5, [r4, #4]
 8014998:	60a5      	str	r5, [r4, #8]
 801499a:	2d00      	cmp	r5, #0
 801499c:	bfa2      	ittt	ge
 801499e:	6821      	ldrge	r1, [r4, #0]
 80149a0:	f021 0104 	bicge.w	r1, r1, #4
 80149a4:	6021      	strge	r1, [r4, #0]
 80149a6:	b90e      	cbnz	r6, 80149ac <_printf_i+0x118>
 80149a8:	2d00      	cmp	r5, #0
 80149aa:	d04d      	beq.n	8014a48 <_printf_i+0x1b4>
 80149ac:	4615      	mov	r5, r2
 80149ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80149b2:	fb03 6711 	mls	r7, r3, r1, r6
 80149b6:	5dc7      	ldrb	r7, [r0, r7]
 80149b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80149bc:	4637      	mov	r7, r6
 80149be:	42bb      	cmp	r3, r7
 80149c0:	460e      	mov	r6, r1
 80149c2:	d9f4      	bls.n	80149ae <_printf_i+0x11a>
 80149c4:	2b08      	cmp	r3, #8
 80149c6:	d10b      	bne.n	80149e0 <_printf_i+0x14c>
 80149c8:	6823      	ldr	r3, [r4, #0]
 80149ca:	07de      	lsls	r6, r3, #31
 80149cc:	d508      	bpl.n	80149e0 <_printf_i+0x14c>
 80149ce:	6923      	ldr	r3, [r4, #16]
 80149d0:	6861      	ldr	r1, [r4, #4]
 80149d2:	4299      	cmp	r1, r3
 80149d4:	bfde      	ittt	le
 80149d6:	2330      	movle	r3, #48	; 0x30
 80149d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80149dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80149e0:	1b52      	subs	r2, r2, r5
 80149e2:	6122      	str	r2, [r4, #16]
 80149e4:	f8cd a000 	str.w	sl, [sp]
 80149e8:	464b      	mov	r3, r9
 80149ea:	aa03      	add	r2, sp, #12
 80149ec:	4621      	mov	r1, r4
 80149ee:	4640      	mov	r0, r8
 80149f0:	f7ff fee2 	bl	80147b8 <_printf_common>
 80149f4:	3001      	adds	r0, #1
 80149f6:	d14c      	bne.n	8014a92 <_printf_i+0x1fe>
 80149f8:	f04f 30ff 	mov.w	r0, #4294967295
 80149fc:	b004      	add	sp, #16
 80149fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a02:	4835      	ldr	r0, [pc, #212]	; (8014ad8 <_printf_i+0x244>)
 8014a04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014a08:	6829      	ldr	r1, [r5, #0]
 8014a0a:	6823      	ldr	r3, [r4, #0]
 8014a0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8014a10:	6029      	str	r1, [r5, #0]
 8014a12:	061d      	lsls	r5, r3, #24
 8014a14:	d514      	bpl.n	8014a40 <_printf_i+0x1ac>
 8014a16:	07df      	lsls	r7, r3, #31
 8014a18:	bf44      	itt	mi
 8014a1a:	f043 0320 	orrmi.w	r3, r3, #32
 8014a1e:	6023      	strmi	r3, [r4, #0]
 8014a20:	b91e      	cbnz	r6, 8014a2a <_printf_i+0x196>
 8014a22:	6823      	ldr	r3, [r4, #0]
 8014a24:	f023 0320 	bic.w	r3, r3, #32
 8014a28:	6023      	str	r3, [r4, #0]
 8014a2a:	2310      	movs	r3, #16
 8014a2c:	e7b0      	b.n	8014990 <_printf_i+0xfc>
 8014a2e:	6823      	ldr	r3, [r4, #0]
 8014a30:	f043 0320 	orr.w	r3, r3, #32
 8014a34:	6023      	str	r3, [r4, #0]
 8014a36:	2378      	movs	r3, #120	; 0x78
 8014a38:	4828      	ldr	r0, [pc, #160]	; (8014adc <_printf_i+0x248>)
 8014a3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014a3e:	e7e3      	b.n	8014a08 <_printf_i+0x174>
 8014a40:	0659      	lsls	r1, r3, #25
 8014a42:	bf48      	it	mi
 8014a44:	b2b6      	uxthmi	r6, r6
 8014a46:	e7e6      	b.n	8014a16 <_printf_i+0x182>
 8014a48:	4615      	mov	r5, r2
 8014a4a:	e7bb      	b.n	80149c4 <_printf_i+0x130>
 8014a4c:	682b      	ldr	r3, [r5, #0]
 8014a4e:	6826      	ldr	r6, [r4, #0]
 8014a50:	6961      	ldr	r1, [r4, #20]
 8014a52:	1d18      	adds	r0, r3, #4
 8014a54:	6028      	str	r0, [r5, #0]
 8014a56:	0635      	lsls	r5, r6, #24
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	d501      	bpl.n	8014a60 <_printf_i+0x1cc>
 8014a5c:	6019      	str	r1, [r3, #0]
 8014a5e:	e002      	b.n	8014a66 <_printf_i+0x1d2>
 8014a60:	0670      	lsls	r0, r6, #25
 8014a62:	d5fb      	bpl.n	8014a5c <_printf_i+0x1c8>
 8014a64:	8019      	strh	r1, [r3, #0]
 8014a66:	2300      	movs	r3, #0
 8014a68:	6123      	str	r3, [r4, #16]
 8014a6a:	4615      	mov	r5, r2
 8014a6c:	e7ba      	b.n	80149e4 <_printf_i+0x150>
 8014a6e:	682b      	ldr	r3, [r5, #0]
 8014a70:	1d1a      	adds	r2, r3, #4
 8014a72:	602a      	str	r2, [r5, #0]
 8014a74:	681d      	ldr	r5, [r3, #0]
 8014a76:	6862      	ldr	r2, [r4, #4]
 8014a78:	2100      	movs	r1, #0
 8014a7a:	4628      	mov	r0, r5
 8014a7c:	f7eb fbd0 	bl	8000220 <memchr>
 8014a80:	b108      	cbz	r0, 8014a86 <_printf_i+0x1f2>
 8014a82:	1b40      	subs	r0, r0, r5
 8014a84:	6060      	str	r0, [r4, #4]
 8014a86:	6863      	ldr	r3, [r4, #4]
 8014a88:	6123      	str	r3, [r4, #16]
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a90:	e7a8      	b.n	80149e4 <_printf_i+0x150>
 8014a92:	6923      	ldr	r3, [r4, #16]
 8014a94:	462a      	mov	r2, r5
 8014a96:	4649      	mov	r1, r9
 8014a98:	4640      	mov	r0, r8
 8014a9a:	47d0      	blx	sl
 8014a9c:	3001      	adds	r0, #1
 8014a9e:	d0ab      	beq.n	80149f8 <_printf_i+0x164>
 8014aa0:	6823      	ldr	r3, [r4, #0]
 8014aa2:	079b      	lsls	r3, r3, #30
 8014aa4:	d413      	bmi.n	8014ace <_printf_i+0x23a>
 8014aa6:	68e0      	ldr	r0, [r4, #12]
 8014aa8:	9b03      	ldr	r3, [sp, #12]
 8014aaa:	4298      	cmp	r0, r3
 8014aac:	bfb8      	it	lt
 8014aae:	4618      	movlt	r0, r3
 8014ab0:	e7a4      	b.n	80149fc <_printf_i+0x168>
 8014ab2:	2301      	movs	r3, #1
 8014ab4:	4632      	mov	r2, r6
 8014ab6:	4649      	mov	r1, r9
 8014ab8:	4640      	mov	r0, r8
 8014aba:	47d0      	blx	sl
 8014abc:	3001      	adds	r0, #1
 8014abe:	d09b      	beq.n	80149f8 <_printf_i+0x164>
 8014ac0:	3501      	adds	r5, #1
 8014ac2:	68e3      	ldr	r3, [r4, #12]
 8014ac4:	9903      	ldr	r1, [sp, #12]
 8014ac6:	1a5b      	subs	r3, r3, r1
 8014ac8:	42ab      	cmp	r3, r5
 8014aca:	dcf2      	bgt.n	8014ab2 <_printf_i+0x21e>
 8014acc:	e7eb      	b.n	8014aa6 <_printf_i+0x212>
 8014ace:	2500      	movs	r5, #0
 8014ad0:	f104 0619 	add.w	r6, r4, #25
 8014ad4:	e7f5      	b.n	8014ac2 <_printf_i+0x22e>
 8014ad6:	bf00      	nop
 8014ad8:	0801703e 	.word	0x0801703e
 8014adc:	0801704f 	.word	0x0801704f

08014ae0 <iprintf>:
 8014ae0:	b40f      	push	{r0, r1, r2, r3}
 8014ae2:	4b0a      	ldr	r3, [pc, #40]	; (8014b0c <iprintf+0x2c>)
 8014ae4:	b513      	push	{r0, r1, r4, lr}
 8014ae6:	681c      	ldr	r4, [r3, #0]
 8014ae8:	b124      	cbz	r4, 8014af4 <iprintf+0x14>
 8014aea:	69a3      	ldr	r3, [r4, #24]
 8014aec:	b913      	cbnz	r3, 8014af4 <iprintf+0x14>
 8014aee:	4620      	mov	r0, r4
 8014af0:	f7ff f9cc 	bl	8013e8c <__sinit>
 8014af4:	ab05      	add	r3, sp, #20
 8014af6:	9a04      	ldr	r2, [sp, #16]
 8014af8:	68a1      	ldr	r1, [r4, #8]
 8014afa:	9301      	str	r3, [sp, #4]
 8014afc:	4620      	mov	r0, r4
 8014afe:	f001 fdd1 	bl	80166a4 <_vfiprintf_r>
 8014b02:	b002      	add	sp, #8
 8014b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b08:	b004      	add	sp, #16
 8014b0a:	4770      	bx	lr
 8014b0c:	20000124 	.word	0x20000124

08014b10 <_puts_r>:
 8014b10:	b570      	push	{r4, r5, r6, lr}
 8014b12:	460e      	mov	r6, r1
 8014b14:	4605      	mov	r5, r0
 8014b16:	b118      	cbz	r0, 8014b20 <_puts_r+0x10>
 8014b18:	6983      	ldr	r3, [r0, #24]
 8014b1a:	b90b      	cbnz	r3, 8014b20 <_puts_r+0x10>
 8014b1c:	f7ff f9b6 	bl	8013e8c <__sinit>
 8014b20:	69ab      	ldr	r3, [r5, #24]
 8014b22:	68ac      	ldr	r4, [r5, #8]
 8014b24:	b913      	cbnz	r3, 8014b2c <_puts_r+0x1c>
 8014b26:	4628      	mov	r0, r5
 8014b28:	f7ff f9b0 	bl	8013e8c <__sinit>
 8014b2c:	4b2c      	ldr	r3, [pc, #176]	; (8014be0 <_puts_r+0xd0>)
 8014b2e:	429c      	cmp	r4, r3
 8014b30:	d120      	bne.n	8014b74 <_puts_r+0x64>
 8014b32:	686c      	ldr	r4, [r5, #4]
 8014b34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014b36:	07db      	lsls	r3, r3, #31
 8014b38:	d405      	bmi.n	8014b46 <_puts_r+0x36>
 8014b3a:	89a3      	ldrh	r3, [r4, #12]
 8014b3c:	0598      	lsls	r0, r3, #22
 8014b3e:	d402      	bmi.n	8014b46 <_puts_r+0x36>
 8014b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b42:	f7ee ff8b 	bl	8003a5c <__retarget_lock_acquire_recursive>
 8014b46:	89a3      	ldrh	r3, [r4, #12]
 8014b48:	0719      	lsls	r1, r3, #28
 8014b4a:	d51d      	bpl.n	8014b88 <_puts_r+0x78>
 8014b4c:	6923      	ldr	r3, [r4, #16]
 8014b4e:	b1db      	cbz	r3, 8014b88 <_puts_r+0x78>
 8014b50:	3e01      	subs	r6, #1
 8014b52:	68a3      	ldr	r3, [r4, #8]
 8014b54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014b58:	3b01      	subs	r3, #1
 8014b5a:	60a3      	str	r3, [r4, #8]
 8014b5c:	bb39      	cbnz	r1, 8014bae <_puts_r+0x9e>
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	da38      	bge.n	8014bd4 <_puts_r+0xc4>
 8014b62:	4622      	mov	r2, r4
 8014b64:	210a      	movs	r1, #10
 8014b66:	4628      	mov	r0, r5
 8014b68:	f000 f91e 	bl	8014da8 <__swbuf_r>
 8014b6c:	3001      	adds	r0, #1
 8014b6e:	d011      	beq.n	8014b94 <_puts_r+0x84>
 8014b70:	250a      	movs	r5, #10
 8014b72:	e011      	b.n	8014b98 <_puts_r+0x88>
 8014b74:	4b1b      	ldr	r3, [pc, #108]	; (8014be4 <_puts_r+0xd4>)
 8014b76:	429c      	cmp	r4, r3
 8014b78:	d101      	bne.n	8014b7e <_puts_r+0x6e>
 8014b7a:	68ac      	ldr	r4, [r5, #8]
 8014b7c:	e7da      	b.n	8014b34 <_puts_r+0x24>
 8014b7e:	4b1a      	ldr	r3, [pc, #104]	; (8014be8 <_puts_r+0xd8>)
 8014b80:	429c      	cmp	r4, r3
 8014b82:	bf08      	it	eq
 8014b84:	68ec      	ldreq	r4, [r5, #12]
 8014b86:	e7d5      	b.n	8014b34 <_puts_r+0x24>
 8014b88:	4621      	mov	r1, r4
 8014b8a:	4628      	mov	r0, r5
 8014b8c:	f000 f970 	bl	8014e70 <__swsetup_r>
 8014b90:	2800      	cmp	r0, #0
 8014b92:	d0dd      	beq.n	8014b50 <_puts_r+0x40>
 8014b94:	f04f 35ff 	mov.w	r5, #4294967295
 8014b98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014b9a:	07da      	lsls	r2, r3, #31
 8014b9c:	d405      	bmi.n	8014baa <_puts_r+0x9a>
 8014b9e:	89a3      	ldrh	r3, [r4, #12]
 8014ba0:	059b      	lsls	r3, r3, #22
 8014ba2:	d402      	bmi.n	8014baa <_puts_r+0x9a>
 8014ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014ba6:	f7ee ff6d 	bl	8003a84 <__retarget_lock_release_recursive>
 8014baa:	4628      	mov	r0, r5
 8014bac:	bd70      	pop	{r4, r5, r6, pc}
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	da04      	bge.n	8014bbc <_puts_r+0xac>
 8014bb2:	69a2      	ldr	r2, [r4, #24]
 8014bb4:	429a      	cmp	r2, r3
 8014bb6:	dc06      	bgt.n	8014bc6 <_puts_r+0xb6>
 8014bb8:	290a      	cmp	r1, #10
 8014bba:	d004      	beq.n	8014bc6 <_puts_r+0xb6>
 8014bbc:	6823      	ldr	r3, [r4, #0]
 8014bbe:	1c5a      	adds	r2, r3, #1
 8014bc0:	6022      	str	r2, [r4, #0]
 8014bc2:	7019      	strb	r1, [r3, #0]
 8014bc4:	e7c5      	b.n	8014b52 <_puts_r+0x42>
 8014bc6:	4622      	mov	r2, r4
 8014bc8:	4628      	mov	r0, r5
 8014bca:	f000 f8ed 	bl	8014da8 <__swbuf_r>
 8014bce:	3001      	adds	r0, #1
 8014bd0:	d1bf      	bne.n	8014b52 <_puts_r+0x42>
 8014bd2:	e7df      	b.n	8014b94 <_puts_r+0x84>
 8014bd4:	6823      	ldr	r3, [r4, #0]
 8014bd6:	250a      	movs	r5, #10
 8014bd8:	1c5a      	adds	r2, r3, #1
 8014bda:	6022      	str	r2, [r4, #0]
 8014bdc:	701d      	strb	r5, [r3, #0]
 8014bde:	e7db      	b.n	8014b98 <_puts_r+0x88>
 8014be0:	08016fe8 	.word	0x08016fe8
 8014be4:	08017008 	.word	0x08017008
 8014be8:	08016fc8 	.word	0x08016fc8

08014bec <puts>:
 8014bec:	4b02      	ldr	r3, [pc, #8]	; (8014bf8 <puts+0xc>)
 8014bee:	4601      	mov	r1, r0
 8014bf0:	6818      	ldr	r0, [r3, #0]
 8014bf2:	f7ff bf8d 	b.w	8014b10 <_puts_r>
 8014bf6:	bf00      	nop
 8014bf8:	20000124 	.word	0x20000124

08014bfc <cleanup_glue>:
 8014bfc:	b538      	push	{r3, r4, r5, lr}
 8014bfe:	460c      	mov	r4, r1
 8014c00:	6809      	ldr	r1, [r1, #0]
 8014c02:	4605      	mov	r5, r0
 8014c04:	b109      	cbz	r1, 8014c0a <cleanup_glue+0xe>
 8014c06:	f7ff fff9 	bl	8014bfc <cleanup_glue>
 8014c0a:	4621      	mov	r1, r4
 8014c0c:	4628      	mov	r0, r5
 8014c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c12:	f7ff ba1b 	b.w	801404c <_free_r>
	...

08014c18 <_reclaim_reent>:
 8014c18:	4b2c      	ldr	r3, [pc, #176]	; (8014ccc <_reclaim_reent+0xb4>)
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	4283      	cmp	r3, r0
 8014c1e:	b570      	push	{r4, r5, r6, lr}
 8014c20:	4604      	mov	r4, r0
 8014c22:	d051      	beq.n	8014cc8 <_reclaim_reent+0xb0>
 8014c24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014c26:	b143      	cbz	r3, 8014c3a <_reclaim_reent+0x22>
 8014c28:	68db      	ldr	r3, [r3, #12]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d14a      	bne.n	8014cc4 <_reclaim_reent+0xac>
 8014c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014c30:	6819      	ldr	r1, [r3, #0]
 8014c32:	b111      	cbz	r1, 8014c3a <_reclaim_reent+0x22>
 8014c34:	4620      	mov	r0, r4
 8014c36:	f7ff fa09 	bl	801404c <_free_r>
 8014c3a:	6961      	ldr	r1, [r4, #20]
 8014c3c:	b111      	cbz	r1, 8014c44 <_reclaim_reent+0x2c>
 8014c3e:	4620      	mov	r0, r4
 8014c40:	f7ff fa04 	bl	801404c <_free_r>
 8014c44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014c46:	b111      	cbz	r1, 8014c4e <_reclaim_reent+0x36>
 8014c48:	4620      	mov	r0, r4
 8014c4a:	f7ff f9ff 	bl	801404c <_free_r>
 8014c4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014c50:	b111      	cbz	r1, 8014c58 <_reclaim_reent+0x40>
 8014c52:	4620      	mov	r0, r4
 8014c54:	f7ff f9fa 	bl	801404c <_free_r>
 8014c58:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014c5a:	b111      	cbz	r1, 8014c62 <_reclaim_reent+0x4a>
 8014c5c:	4620      	mov	r0, r4
 8014c5e:	f7ff f9f5 	bl	801404c <_free_r>
 8014c62:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014c64:	b111      	cbz	r1, 8014c6c <_reclaim_reent+0x54>
 8014c66:	4620      	mov	r0, r4
 8014c68:	f7ff f9f0 	bl	801404c <_free_r>
 8014c6c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8014c6e:	b111      	cbz	r1, 8014c76 <_reclaim_reent+0x5e>
 8014c70:	4620      	mov	r0, r4
 8014c72:	f7ff f9eb 	bl	801404c <_free_r>
 8014c76:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014c78:	b111      	cbz	r1, 8014c80 <_reclaim_reent+0x68>
 8014c7a:	4620      	mov	r0, r4
 8014c7c:	f7ff f9e6 	bl	801404c <_free_r>
 8014c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014c82:	b111      	cbz	r1, 8014c8a <_reclaim_reent+0x72>
 8014c84:	4620      	mov	r0, r4
 8014c86:	f7ff f9e1 	bl	801404c <_free_r>
 8014c8a:	69a3      	ldr	r3, [r4, #24]
 8014c8c:	b1e3      	cbz	r3, 8014cc8 <_reclaim_reent+0xb0>
 8014c8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014c90:	4620      	mov	r0, r4
 8014c92:	4798      	blx	r3
 8014c94:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014c96:	b1b9      	cbz	r1, 8014cc8 <_reclaim_reent+0xb0>
 8014c98:	4620      	mov	r0, r4
 8014c9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c9e:	f7ff bfad 	b.w	8014bfc <cleanup_glue>
 8014ca2:	5949      	ldr	r1, [r1, r5]
 8014ca4:	b941      	cbnz	r1, 8014cb8 <_reclaim_reent+0xa0>
 8014ca6:	3504      	adds	r5, #4
 8014ca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014caa:	2d80      	cmp	r5, #128	; 0x80
 8014cac:	68d9      	ldr	r1, [r3, #12]
 8014cae:	d1f8      	bne.n	8014ca2 <_reclaim_reent+0x8a>
 8014cb0:	4620      	mov	r0, r4
 8014cb2:	f7ff f9cb 	bl	801404c <_free_r>
 8014cb6:	e7ba      	b.n	8014c2e <_reclaim_reent+0x16>
 8014cb8:	680e      	ldr	r6, [r1, #0]
 8014cba:	4620      	mov	r0, r4
 8014cbc:	f7ff f9c6 	bl	801404c <_free_r>
 8014cc0:	4631      	mov	r1, r6
 8014cc2:	e7ef      	b.n	8014ca4 <_reclaim_reent+0x8c>
 8014cc4:	2500      	movs	r5, #0
 8014cc6:	e7ef      	b.n	8014ca8 <_reclaim_reent+0x90>
 8014cc8:	bd70      	pop	{r4, r5, r6, pc}
 8014cca:	bf00      	nop
 8014ccc:	20000124 	.word	0x20000124

08014cd0 <_sbrk_r>:
 8014cd0:	b538      	push	{r3, r4, r5, lr}
 8014cd2:	4d06      	ldr	r5, [pc, #24]	; (8014cec <_sbrk_r+0x1c>)
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	4604      	mov	r4, r0
 8014cd8:	4608      	mov	r0, r1
 8014cda:	602b      	str	r3, [r5, #0]
 8014cdc:	f7ee fa5e 	bl	800319c <_sbrk>
 8014ce0:	1c43      	adds	r3, r0, #1
 8014ce2:	d102      	bne.n	8014cea <_sbrk_r+0x1a>
 8014ce4:	682b      	ldr	r3, [r5, #0]
 8014ce6:	b103      	cbz	r3, 8014cea <_sbrk_r+0x1a>
 8014ce8:	6023      	str	r3, [r4, #0]
 8014cea:	bd38      	pop	{r3, r4, r5, pc}
 8014cec:	20006fa4 	.word	0x20006fa4

08014cf0 <__sread>:
 8014cf0:	b510      	push	{r4, lr}
 8014cf2:	460c      	mov	r4, r1
 8014cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cf8:	f001 fe04 	bl	8016904 <_read_r>
 8014cfc:	2800      	cmp	r0, #0
 8014cfe:	bfab      	itete	ge
 8014d00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014d02:	89a3      	ldrhlt	r3, [r4, #12]
 8014d04:	181b      	addge	r3, r3, r0
 8014d06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014d0a:	bfac      	ite	ge
 8014d0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8014d0e:	81a3      	strhlt	r3, [r4, #12]
 8014d10:	bd10      	pop	{r4, pc}

08014d12 <__swrite>:
 8014d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d16:	461f      	mov	r7, r3
 8014d18:	898b      	ldrh	r3, [r1, #12]
 8014d1a:	05db      	lsls	r3, r3, #23
 8014d1c:	4605      	mov	r5, r0
 8014d1e:	460c      	mov	r4, r1
 8014d20:	4616      	mov	r6, r2
 8014d22:	d505      	bpl.n	8014d30 <__swrite+0x1e>
 8014d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d28:	2302      	movs	r3, #2
 8014d2a:	2200      	movs	r2, #0
 8014d2c:	f001 f860 	bl	8015df0 <_lseek_r>
 8014d30:	89a3      	ldrh	r3, [r4, #12]
 8014d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014d3a:	81a3      	strh	r3, [r4, #12]
 8014d3c:	4632      	mov	r2, r6
 8014d3e:	463b      	mov	r3, r7
 8014d40:	4628      	mov	r0, r5
 8014d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014d46:	f000 b881 	b.w	8014e4c <_write_r>

08014d4a <__sseek>:
 8014d4a:	b510      	push	{r4, lr}
 8014d4c:	460c      	mov	r4, r1
 8014d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d52:	f001 f84d 	bl	8015df0 <_lseek_r>
 8014d56:	1c43      	adds	r3, r0, #1
 8014d58:	89a3      	ldrh	r3, [r4, #12]
 8014d5a:	bf15      	itete	ne
 8014d5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8014d5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014d62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014d66:	81a3      	strheq	r3, [r4, #12]
 8014d68:	bf18      	it	ne
 8014d6a:	81a3      	strhne	r3, [r4, #12]
 8014d6c:	bd10      	pop	{r4, pc}

08014d6e <__sclose>:
 8014d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d72:	f000 b8eb 	b.w	8014f4c <_close_r>
	...

08014d78 <viprintf>:
 8014d78:	b513      	push	{r0, r1, r4, lr}
 8014d7a:	460b      	mov	r3, r1
 8014d7c:	4909      	ldr	r1, [pc, #36]	; (8014da4 <viprintf+0x2c>)
 8014d7e:	680c      	ldr	r4, [r1, #0]
 8014d80:	4602      	mov	r2, r0
 8014d82:	b144      	cbz	r4, 8014d96 <viprintf+0x1e>
 8014d84:	69a1      	ldr	r1, [r4, #24]
 8014d86:	b931      	cbnz	r1, 8014d96 <viprintf+0x1e>
 8014d88:	e9cd 0300 	strd	r0, r3, [sp]
 8014d8c:	4620      	mov	r0, r4
 8014d8e:	f7ff f87d 	bl	8013e8c <__sinit>
 8014d92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d96:	68a1      	ldr	r1, [r4, #8]
 8014d98:	4620      	mov	r0, r4
 8014d9a:	b002      	add	sp, #8
 8014d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014da0:	f001 bc80 	b.w	80166a4 <_vfiprintf_r>
 8014da4:	20000124 	.word	0x20000124

08014da8 <__swbuf_r>:
 8014da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014daa:	460e      	mov	r6, r1
 8014dac:	4614      	mov	r4, r2
 8014dae:	4605      	mov	r5, r0
 8014db0:	b118      	cbz	r0, 8014dba <__swbuf_r+0x12>
 8014db2:	6983      	ldr	r3, [r0, #24]
 8014db4:	b90b      	cbnz	r3, 8014dba <__swbuf_r+0x12>
 8014db6:	f7ff f869 	bl	8013e8c <__sinit>
 8014dba:	4b21      	ldr	r3, [pc, #132]	; (8014e40 <__swbuf_r+0x98>)
 8014dbc:	429c      	cmp	r4, r3
 8014dbe:	d12b      	bne.n	8014e18 <__swbuf_r+0x70>
 8014dc0:	686c      	ldr	r4, [r5, #4]
 8014dc2:	69a3      	ldr	r3, [r4, #24]
 8014dc4:	60a3      	str	r3, [r4, #8]
 8014dc6:	89a3      	ldrh	r3, [r4, #12]
 8014dc8:	071a      	lsls	r2, r3, #28
 8014dca:	d52f      	bpl.n	8014e2c <__swbuf_r+0x84>
 8014dcc:	6923      	ldr	r3, [r4, #16]
 8014dce:	b36b      	cbz	r3, 8014e2c <__swbuf_r+0x84>
 8014dd0:	6923      	ldr	r3, [r4, #16]
 8014dd2:	6820      	ldr	r0, [r4, #0]
 8014dd4:	1ac0      	subs	r0, r0, r3
 8014dd6:	6963      	ldr	r3, [r4, #20]
 8014dd8:	b2f6      	uxtb	r6, r6
 8014dda:	4283      	cmp	r3, r0
 8014ddc:	4637      	mov	r7, r6
 8014dde:	dc04      	bgt.n	8014dea <__swbuf_r+0x42>
 8014de0:	4621      	mov	r1, r4
 8014de2:	4628      	mov	r0, r5
 8014de4:	f000 ffc4 	bl	8015d70 <_fflush_r>
 8014de8:	bb30      	cbnz	r0, 8014e38 <__swbuf_r+0x90>
 8014dea:	68a3      	ldr	r3, [r4, #8]
 8014dec:	3b01      	subs	r3, #1
 8014dee:	60a3      	str	r3, [r4, #8]
 8014df0:	6823      	ldr	r3, [r4, #0]
 8014df2:	1c5a      	adds	r2, r3, #1
 8014df4:	6022      	str	r2, [r4, #0]
 8014df6:	701e      	strb	r6, [r3, #0]
 8014df8:	6963      	ldr	r3, [r4, #20]
 8014dfa:	3001      	adds	r0, #1
 8014dfc:	4283      	cmp	r3, r0
 8014dfe:	d004      	beq.n	8014e0a <__swbuf_r+0x62>
 8014e00:	89a3      	ldrh	r3, [r4, #12]
 8014e02:	07db      	lsls	r3, r3, #31
 8014e04:	d506      	bpl.n	8014e14 <__swbuf_r+0x6c>
 8014e06:	2e0a      	cmp	r6, #10
 8014e08:	d104      	bne.n	8014e14 <__swbuf_r+0x6c>
 8014e0a:	4621      	mov	r1, r4
 8014e0c:	4628      	mov	r0, r5
 8014e0e:	f000 ffaf 	bl	8015d70 <_fflush_r>
 8014e12:	b988      	cbnz	r0, 8014e38 <__swbuf_r+0x90>
 8014e14:	4638      	mov	r0, r7
 8014e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e18:	4b0a      	ldr	r3, [pc, #40]	; (8014e44 <__swbuf_r+0x9c>)
 8014e1a:	429c      	cmp	r4, r3
 8014e1c:	d101      	bne.n	8014e22 <__swbuf_r+0x7a>
 8014e1e:	68ac      	ldr	r4, [r5, #8]
 8014e20:	e7cf      	b.n	8014dc2 <__swbuf_r+0x1a>
 8014e22:	4b09      	ldr	r3, [pc, #36]	; (8014e48 <__swbuf_r+0xa0>)
 8014e24:	429c      	cmp	r4, r3
 8014e26:	bf08      	it	eq
 8014e28:	68ec      	ldreq	r4, [r5, #12]
 8014e2a:	e7ca      	b.n	8014dc2 <__swbuf_r+0x1a>
 8014e2c:	4621      	mov	r1, r4
 8014e2e:	4628      	mov	r0, r5
 8014e30:	f000 f81e 	bl	8014e70 <__swsetup_r>
 8014e34:	2800      	cmp	r0, #0
 8014e36:	d0cb      	beq.n	8014dd0 <__swbuf_r+0x28>
 8014e38:	f04f 37ff 	mov.w	r7, #4294967295
 8014e3c:	e7ea      	b.n	8014e14 <__swbuf_r+0x6c>
 8014e3e:	bf00      	nop
 8014e40:	08016fe8 	.word	0x08016fe8
 8014e44:	08017008 	.word	0x08017008
 8014e48:	08016fc8 	.word	0x08016fc8

08014e4c <_write_r>:
 8014e4c:	b538      	push	{r3, r4, r5, lr}
 8014e4e:	4d07      	ldr	r5, [pc, #28]	; (8014e6c <_write_r+0x20>)
 8014e50:	4604      	mov	r4, r0
 8014e52:	4608      	mov	r0, r1
 8014e54:	4611      	mov	r1, r2
 8014e56:	2200      	movs	r2, #0
 8014e58:	602a      	str	r2, [r5, #0]
 8014e5a:	461a      	mov	r2, r3
 8014e5c:	f7ed fa79 	bl	8002352 <_write>
 8014e60:	1c43      	adds	r3, r0, #1
 8014e62:	d102      	bne.n	8014e6a <_write_r+0x1e>
 8014e64:	682b      	ldr	r3, [r5, #0]
 8014e66:	b103      	cbz	r3, 8014e6a <_write_r+0x1e>
 8014e68:	6023      	str	r3, [r4, #0]
 8014e6a:	bd38      	pop	{r3, r4, r5, pc}
 8014e6c:	20006fa4 	.word	0x20006fa4

08014e70 <__swsetup_r>:
 8014e70:	4b32      	ldr	r3, [pc, #200]	; (8014f3c <__swsetup_r+0xcc>)
 8014e72:	b570      	push	{r4, r5, r6, lr}
 8014e74:	681d      	ldr	r5, [r3, #0]
 8014e76:	4606      	mov	r6, r0
 8014e78:	460c      	mov	r4, r1
 8014e7a:	b125      	cbz	r5, 8014e86 <__swsetup_r+0x16>
 8014e7c:	69ab      	ldr	r3, [r5, #24]
 8014e7e:	b913      	cbnz	r3, 8014e86 <__swsetup_r+0x16>
 8014e80:	4628      	mov	r0, r5
 8014e82:	f7ff f803 	bl	8013e8c <__sinit>
 8014e86:	4b2e      	ldr	r3, [pc, #184]	; (8014f40 <__swsetup_r+0xd0>)
 8014e88:	429c      	cmp	r4, r3
 8014e8a:	d10f      	bne.n	8014eac <__swsetup_r+0x3c>
 8014e8c:	686c      	ldr	r4, [r5, #4]
 8014e8e:	89a3      	ldrh	r3, [r4, #12]
 8014e90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014e94:	0719      	lsls	r1, r3, #28
 8014e96:	d42c      	bmi.n	8014ef2 <__swsetup_r+0x82>
 8014e98:	06dd      	lsls	r5, r3, #27
 8014e9a:	d411      	bmi.n	8014ec0 <__swsetup_r+0x50>
 8014e9c:	2309      	movs	r3, #9
 8014e9e:	6033      	str	r3, [r6, #0]
 8014ea0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014ea4:	81a3      	strh	r3, [r4, #12]
 8014ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8014eaa:	e03e      	b.n	8014f2a <__swsetup_r+0xba>
 8014eac:	4b25      	ldr	r3, [pc, #148]	; (8014f44 <__swsetup_r+0xd4>)
 8014eae:	429c      	cmp	r4, r3
 8014eb0:	d101      	bne.n	8014eb6 <__swsetup_r+0x46>
 8014eb2:	68ac      	ldr	r4, [r5, #8]
 8014eb4:	e7eb      	b.n	8014e8e <__swsetup_r+0x1e>
 8014eb6:	4b24      	ldr	r3, [pc, #144]	; (8014f48 <__swsetup_r+0xd8>)
 8014eb8:	429c      	cmp	r4, r3
 8014eba:	bf08      	it	eq
 8014ebc:	68ec      	ldreq	r4, [r5, #12]
 8014ebe:	e7e6      	b.n	8014e8e <__swsetup_r+0x1e>
 8014ec0:	0758      	lsls	r0, r3, #29
 8014ec2:	d512      	bpl.n	8014eea <__swsetup_r+0x7a>
 8014ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ec6:	b141      	cbz	r1, 8014eda <__swsetup_r+0x6a>
 8014ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ecc:	4299      	cmp	r1, r3
 8014ece:	d002      	beq.n	8014ed6 <__swsetup_r+0x66>
 8014ed0:	4630      	mov	r0, r6
 8014ed2:	f7ff f8bb 	bl	801404c <_free_r>
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	6363      	str	r3, [r4, #52]	; 0x34
 8014eda:	89a3      	ldrh	r3, [r4, #12]
 8014edc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014ee0:	81a3      	strh	r3, [r4, #12]
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	6063      	str	r3, [r4, #4]
 8014ee6:	6923      	ldr	r3, [r4, #16]
 8014ee8:	6023      	str	r3, [r4, #0]
 8014eea:	89a3      	ldrh	r3, [r4, #12]
 8014eec:	f043 0308 	orr.w	r3, r3, #8
 8014ef0:	81a3      	strh	r3, [r4, #12]
 8014ef2:	6923      	ldr	r3, [r4, #16]
 8014ef4:	b94b      	cbnz	r3, 8014f0a <__swsetup_r+0x9a>
 8014ef6:	89a3      	ldrh	r3, [r4, #12]
 8014ef8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014f00:	d003      	beq.n	8014f0a <__swsetup_r+0x9a>
 8014f02:	4621      	mov	r1, r4
 8014f04:	4630      	mov	r0, r6
 8014f06:	f000 ffab 	bl	8015e60 <__smakebuf_r>
 8014f0a:	89a0      	ldrh	r0, [r4, #12]
 8014f0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014f10:	f010 0301 	ands.w	r3, r0, #1
 8014f14:	d00a      	beq.n	8014f2c <__swsetup_r+0xbc>
 8014f16:	2300      	movs	r3, #0
 8014f18:	60a3      	str	r3, [r4, #8]
 8014f1a:	6963      	ldr	r3, [r4, #20]
 8014f1c:	425b      	negs	r3, r3
 8014f1e:	61a3      	str	r3, [r4, #24]
 8014f20:	6923      	ldr	r3, [r4, #16]
 8014f22:	b943      	cbnz	r3, 8014f36 <__swsetup_r+0xc6>
 8014f24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014f28:	d1ba      	bne.n	8014ea0 <__swsetup_r+0x30>
 8014f2a:	bd70      	pop	{r4, r5, r6, pc}
 8014f2c:	0781      	lsls	r1, r0, #30
 8014f2e:	bf58      	it	pl
 8014f30:	6963      	ldrpl	r3, [r4, #20]
 8014f32:	60a3      	str	r3, [r4, #8]
 8014f34:	e7f4      	b.n	8014f20 <__swsetup_r+0xb0>
 8014f36:	2000      	movs	r0, #0
 8014f38:	e7f7      	b.n	8014f2a <__swsetup_r+0xba>
 8014f3a:	bf00      	nop
 8014f3c:	20000124 	.word	0x20000124
 8014f40:	08016fe8 	.word	0x08016fe8
 8014f44:	08017008 	.word	0x08017008
 8014f48:	08016fc8 	.word	0x08016fc8

08014f4c <_close_r>:
 8014f4c:	b538      	push	{r3, r4, r5, lr}
 8014f4e:	4d06      	ldr	r5, [pc, #24]	; (8014f68 <_close_r+0x1c>)
 8014f50:	2300      	movs	r3, #0
 8014f52:	4604      	mov	r4, r0
 8014f54:	4608      	mov	r0, r1
 8014f56:	602b      	str	r3, [r5, #0]
 8014f58:	f7ee f8eb 	bl	8003132 <_close>
 8014f5c:	1c43      	adds	r3, r0, #1
 8014f5e:	d102      	bne.n	8014f66 <_close_r+0x1a>
 8014f60:	682b      	ldr	r3, [r5, #0]
 8014f62:	b103      	cbz	r3, 8014f66 <_close_r+0x1a>
 8014f64:	6023      	str	r3, [r4, #0]
 8014f66:	bd38      	pop	{r3, r4, r5, pc}
 8014f68:	20006fa4 	.word	0x20006fa4

08014f6c <quorem>:
 8014f6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f70:	6903      	ldr	r3, [r0, #16]
 8014f72:	690c      	ldr	r4, [r1, #16]
 8014f74:	42a3      	cmp	r3, r4
 8014f76:	4607      	mov	r7, r0
 8014f78:	f2c0 8081 	blt.w	801507e <quorem+0x112>
 8014f7c:	3c01      	subs	r4, #1
 8014f7e:	f101 0814 	add.w	r8, r1, #20
 8014f82:	f100 0514 	add.w	r5, r0, #20
 8014f86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014f8a:	9301      	str	r3, [sp, #4]
 8014f8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014f90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014f94:	3301      	adds	r3, #1
 8014f96:	429a      	cmp	r2, r3
 8014f98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014f9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014fa0:	fbb2 f6f3 	udiv	r6, r2, r3
 8014fa4:	d331      	bcc.n	801500a <quorem+0x9e>
 8014fa6:	f04f 0e00 	mov.w	lr, #0
 8014faa:	4640      	mov	r0, r8
 8014fac:	46ac      	mov	ip, r5
 8014fae:	46f2      	mov	sl, lr
 8014fb0:	f850 2b04 	ldr.w	r2, [r0], #4
 8014fb4:	b293      	uxth	r3, r2
 8014fb6:	fb06 e303 	mla	r3, r6, r3, lr
 8014fba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014fbe:	b29b      	uxth	r3, r3
 8014fc0:	ebaa 0303 	sub.w	r3, sl, r3
 8014fc4:	f8dc a000 	ldr.w	sl, [ip]
 8014fc8:	0c12      	lsrs	r2, r2, #16
 8014fca:	fa13 f38a 	uxtah	r3, r3, sl
 8014fce:	fb06 e202 	mla	r2, r6, r2, lr
 8014fd2:	9300      	str	r3, [sp, #0]
 8014fd4:	9b00      	ldr	r3, [sp, #0]
 8014fd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014fda:	b292      	uxth	r2, r2
 8014fdc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014fe0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014fe4:	f8bd 3000 	ldrh.w	r3, [sp]
 8014fe8:	4581      	cmp	r9, r0
 8014fea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014fee:	f84c 3b04 	str.w	r3, [ip], #4
 8014ff2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014ff6:	d2db      	bcs.n	8014fb0 <quorem+0x44>
 8014ff8:	f855 300b 	ldr.w	r3, [r5, fp]
 8014ffc:	b92b      	cbnz	r3, 801500a <quorem+0x9e>
 8014ffe:	9b01      	ldr	r3, [sp, #4]
 8015000:	3b04      	subs	r3, #4
 8015002:	429d      	cmp	r5, r3
 8015004:	461a      	mov	r2, r3
 8015006:	d32e      	bcc.n	8015066 <quorem+0xfa>
 8015008:	613c      	str	r4, [r7, #16]
 801500a:	4638      	mov	r0, r7
 801500c:	f001 fa08 	bl	8016420 <__mcmp>
 8015010:	2800      	cmp	r0, #0
 8015012:	db24      	blt.n	801505e <quorem+0xf2>
 8015014:	3601      	adds	r6, #1
 8015016:	4628      	mov	r0, r5
 8015018:	f04f 0c00 	mov.w	ip, #0
 801501c:	f858 2b04 	ldr.w	r2, [r8], #4
 8015020:	f8d0 e000 	ldr.w	lr, [r0]
 8015024:	b293      	uxth	r3, r2
 8015026:	ebac 0303 	sub.w	r3, ip, r3
 801502a:	0c12      	lsrs	r2, r2, #16
 801502c:	fa13 f38e 	uxtah	r3, r3, lr
 8015030:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015034:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015038:	b29b      	uxth	r3, r3
 801503a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801503e:	45c1      	cmp	r9, r8
 8015040:	f840 3b04 	str.w	r3, [r0], #4
 8015044:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015048:	d2e8      	bcs.n	801501c <quorem+0xb0>
 801504a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801504e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015052:	b922      	cbnz	r2, 801505e <quorem+0xf2>
 8015054:	3b04      	subs	r3, #4
 8015056:	429d      	cmp	r5, r3
 8015058:	461a      	mov	r2, r3
 801505a:	d30a      	bcc.n	8015072 <quorem+0x106>
 801505c:	613c      	str	r4, [r7, #16]
 801505e:	4630      	mov	r0, r6
 8015060:	b003      	add	sp, #12
 8015062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015066:	6812      	ldr	r2, [r2, #0]
 8015068:	3b04      	subs	r3, #4
 801506a:	2a00      	cmp	r2, #0
 801506c:	d1cc      	bne.n	8015008 <quorem+0x9c>
 801506e:	3c01      	subs	r4, #1
 8015070:	e7c7      	b.n	8015002 <quorem+0x96>
 8015072:	6812      	ldr	r2, [r2, #0]
 8015074:	3b04      	subs	r3, #4
 8015076:	2a00      	cmp	r2, #0
 8015078:	d1f0      	bne.n	801505c <quorem+0xf0>
 801507a:	3c01      	subs	r4, #1
 801507c:	e7eb      	b.n	8015056 <quorem+0xea>
 801507e:	2000      	movs	r0, #0
 8015080:	e7ee      	b.n	8015060 <quorem+0xf4>
 8015082:	0000      	movs	r0, r0
 8015084:	0000      	movs	r0, r0
	...

08015088 <_dtoa_r>:
 8015088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801508c:	ed2d 8b04 	vpush	{d8-d9}
 8015090:	ec57 6b10 	vmov	r6, r7, d0
 8015094:	b093      	sub	sp, #76	; 0x4c
 8015096:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015098:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801509c:	9106      	str	r1, [sp, #24]
 801509e:	ee10 aa10 	vmov	sl, s0
 80150a2:	4604      	mov	r4, r0
 80150a4:	9209      	str	r2, [sp, #36]	; 0x24
 80150a6:	930c      	str	r3, [sp, #48]	; 0x30
 80150a8:	46bb      	mov	fp, r7
 80150aa:	b975      	cbnz	r5, 80150ca <_dtoa_r+0x42>
 80150ac:	2010      	movs	r0, #16
 80150ae:	f7fe ffaf 	bl	8014010 <malloc>
 80150b2:	4602      	mov	r2, r0
 80150b4:	6260      	str	r0, [r4, #36]	; 0x24
 80150b6:	b920      	cbnz	r0, 80150c2 <_dtoa_r+0x3a>
 80150b8:	4ba7      	ldr	r3, [pc, #668]	; (8015358 <_dtoa_r+0x2d0>)
 80150ba:	21ea      	movs	r1, #234	; 0xea
 80150bc:	48a7      	ldr	r0, [pc, #668]	; (801535c <_dtoa_r+0x2d4>)
 80150be:	f001 fc41 	bl	8016944 <__assert_func>
 80150c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80150c6:	6005      	str	r5, [r0, #0]
 80150c8:	60c5      	str	r5, [r0, #12]
 80150ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80150cc:	6819      	ldr	r1, [r3, #0]
 80150ce:	b151      	cbz	r1, 80150e6 <_dtoa_r+0x5e>
 80150d0:	685a      	ldr	r2, [r3, #4]
 80150d2:	604a      	str	r2, [r1, #4]
 80150d4:	2301      	movs	r3, #1
 80150d6:	4093      	lsls	r3, r2
 80150d8:	608b      	str	r3, [r1, #8]
 80150da:	4620      	mov	r0, r4
 80150dc:	f000 ff5e 	bl	8015f9c <_Bfree>
 80150e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80150e2:	2200      	movs	r2, #0
 80150e4:	601a      	str	r2, [r3, #0]
 80150e6:	1e3b      	subs	r3, r7, #0
 80150e8:	bfaa      	itet	ge
 80150ea:	2300      	movge	r3, #0
 80150ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80150f0:	f8c8 3000 	strge.w	r3, [r8]
 80150f4:	4b9a      	ldr	r3, [pc, #616]	; (8015360 <_dtoa_r+0x2d8>)
 80150f6:	bfbc      	itt	lt
 80150f8:	2201      	movlt	r2, #1
 80150fa:	f8c8 2000 	strlt.w	r2, [r8]
 80150fe:	ea33 030b 	bics.w	r3, r3, fp
 8015102:	d11b      	bne.n	801513c <_dtoa_r+0xb4>
 8015104:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015106:	f242 730f 	movw	r3, #9999	; 0x270f
 801510a:	6013      	str	r3, [r2, #0]
 801510c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015110:	4333      	orrs	r3, r6
 8015112:	f000 8592 	beq.w	8015c3a <_dtoa_r+0xbb2>
 8015116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015118:	b963      	cbnz	r3, 8015134 <_dtoa_r+0xac>
 801511a:	4b92      	ldr	r3, [pc, #584]	; (8015364 <_dtoa_r+0x2dc>)
 801511c:	e022      	b.n	8015164 <_dtoa_r+0xdc>
 801511e:	4b92      	ldr	r3, [pc, #584]	; (8015368 <_dtoa_r+0x2e0>)
 8015120:	9301      	str	r3, [sp, #4]
 8015122:	3308      	adds	r3, #8
 8015124:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015126:	6013      	str	r3, [r2, #0]
 8015128:	9801      	ldr	r0, [sp, #4]
 801512a:	b013      	add	sp, #76	; 0x4c
 801512c:	ecbd 8b04 	vpop	{d8-d9}
 8015130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015134:	4b8b      	ldr	r3, [pc, #556]	; (8015364 <_dtoa_r+0x2dc>)
 8015136:	9301      	str	r3, [sp, #4]
 8015138:	3303      	adds	r3, #3
 801513a:	e7f3      	b.n	8015124 <_dtoa_r+0x9c>
 801513c:	2200      	movs	r2, #0
 801513e:	2300      	movs	r3, #0
 8015140:	4650      	mov	r0, sl
 8015142:	4659      	mov	r1, fp
 8015144:	f7eb fce0 	bl	8000b08 <__aeabi_dcmpeq>
 8015148:	ec4b ab19 	vmov	d9, sl, fp
 801514c:	4680      	mov	r8, r0
 801514e:	b158      	cbz	r0, 8015168 <_dtoa_r+0xe0>
 8015150:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015152:	2301      	movs	r3, #1
 8015154:	6013      	str	r3, [r2, #0]
 8015156:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015158:	2b00      	cmp	r3, #0
 801515a:	f000 856b 	beq.w	8015c34 <_dtoa_r+0xbac>
 801515e:	4883      	ldr	r0, [pc, #524]	; (801536c <_dtoa_r+0x2e4>)
 8015160:	6018      	str	r0, [r3, #0]
 8015162:	1e43      	subs	r3, r0, #1
 8015164:	9301      	str	r3, [sp, #4]
 8015166:	e7df      	b.n	8015128 <_dtoa_r+0xa0>
 8015168:	ec4b ab10 	vmov	d0, sl, fp
 801516c:	aa10      	add	r2, sp, #64	; 0x40
 801516e:	a911      	add	r1, sp, #68	; 0x44
 8015170:	4620      	mov	r0, r4
 8015172:	f001 f9fb 	bl	801656c <__d2b>
 8015176:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801517a:	ee08 0a10 	vmov	s16, r0
 801517e:	2d00      	cmp	r5, #0
 8015180:	f000 8084 	beq.w	801528c <_dtoa_r+0x204>
 8015184:	ee19 3a90 	vmov	r3, s19
 8015188:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801518c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8015190:	4656      	mov	r6, sl
 8015192:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8015196:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801519a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801519e:	4b74      	ldr	r3, [pc, #464]	; (8015370 <_dtoa_r+0x2e8>)
 80151a0:	2200      	movs	r2, #0
 80151a2:	4630      	mov	r0, r6
 80151a4:	4639      	mov	r1, r7
 80151a6:	f7eb f88f 	bl	80002c8 <__aeabi_dsub>
 80151aa:	a365      	add	r3, pc, #404	; (adr r3, 8015340 <_dtoa_r+0x2b8>)
 80151ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151b0:	f7eb fa42 	bl	8000638 <__aeabi_dmul>
 80151b4:	a364      	add	r3, pc, #400	; (adr r3, 8015348 <_dtoa_r+0x2c0>)
 80151b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ba:	f7eb f887 	bl	80002cc <__adddf3>
 80151be:	4606      	mov	r6, r0
 80151c0:	4628      	mov	r0, r5
 80151c2:	460f      	mov	r7, r1
 80151c4:	f7eb f9ce 	bl	8000564 <__aeabi_i2d>
 80151c8:	a361      	add	r3, pc, #388	; (adr r3, 8015350 <_dtoa_r+0x2c8>)
 80151ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ce:	f7eb fa33 	bl	8000638 <__aeabi_dmul>
 80151d2:	4602      	mov	r2, r0
 80151d4:	460b      	mov	r3, r1
 80151d6:	4630      	mov	r0, r6
 80151d8:	4639      	mov	r1, r7
 80151da:	f7eb f877 	bl	80002cc <__adddf3>
 80151de:	4606      	mov	r6, r0
 80151e0:	460f      	mov	r7, r1
 80151e2:	f7eb fcd9 	bl	8000b98 <__aeabi_d2iz>
 80151e6:	2200      	movs	r2, #0
 80151e8:	9000      	str	r0, [sp, #0]
 80151ea:	2300      	movs	r3, #0
 80151ec:	4630      	mov	r0, r6
 80151ee:	4639      	mov	r1, r7
 80151f0:	f7eb fc94 	bl	8000b1c <__aeabi_dcmplt>
 80151f4:	b150      	cbz	r0, 801520c <_dtoa_r+0x184>
 80151f6:	9800      	ldr	r0, [sp, #0]
 80151f8:	f7eb f9b4 	bl	8000564 <__aeabi_i2d>
 80151fc:	4632      	mov	r2, r6
 80151fe:	463b      	mov	r3, r7
 8015200:	f7eb fc82 	bl	8000b08 <__aeabi_dcmpeq>
 8015204:	b910      	cbnz	r0, 801520c <_dtoa_r+0x184>
 8015206:	9b00      	ldr	r3, [sp, #0]
 8015208:	3b01      	subs	r3, #1
 801520a:	9300      	str	r3, [sp, #0]
 801520c:	9b00      	ldr	r3, [sp, #0]
 801520e:	2b16      	cmp	r3, #22
 8015210:	d85a      	bhi.n	80152c8 <_dtoa_r+0x240>
 8015212:	9a00      	ldr	r2, [sp, #0]
 8015214:	4b57      	ldr	r3, [pc, #348]	; (8015374 <_dtoa_r+0x2ec>)
 8015216:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801521e:	ec51 0b19 	vmov	r0, r1, d9
 8015222:	f7eb fc7b 	bl	8000b1c <__aeabi_dcmplt>
 8015226:	2800      	cmp	r0, #0
 8015228:	d050      	beq.n	80152cc <_dtoa_r+0x244>
 801522a:	9b00      	ldr	r3, [sp, #0]
 801522c:	3b01      	subs	r3, #1
 801522e:	9300      	str	r3, [sp, #0]
 8015230:	2300      	movs	r3, #0
 8015232:	930b      	str	r3, [sp, #44]	; 0x2c
 8015234:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015236:	1b5d      	subs	r5, r3, r5
 8015238:	1e6b      	subs	r3, r5, #1
 801523a:	9305      	str	r3, [sp, #20]
 801523c:	bf45      	ittet	mi
 801523e:	f1c5 0301 	rsbmi	r3, r5, #1
 8015242:	9304      	strmi	r3, [sp, #16]
 8015244:	2300      	movpl	r3, #0
 8015246:	2300      	movmi	r3, #0
 8015248:	bf4c      	ite	mi
 801524a:	9305      	strmi	r3, [sp, #20]
 801524c:	9304      	strpl	r3, [sp, #16]
 801524e:	9b00      	ldr	r3, [sp, #0]
 8015250:	2b00      	cmp	r3, #0
 8015252:	db3d      	blt.n	80152d0 <_dtoa_r+0x248>
 8015254:	9b05      	ldr	r3, [sp, #20]
 8015256:	9a00      	ldr	r2, [sp, #0]
 8015258:	920a      	str	r2, [sp, #40]	; 0x28
 801525a:	4413      	add	r3, r2
 801525c:	9305      	str	r3, [sp, #20]
 801525e:	2300      	movs	r3, #0
 8015260:	9307      	str	r3, [sp, #28]
 8015262:	9b06      	ldr	r3, [sp, #24]
 8015264:	2b09      	cmp	r3, #9
 8015266:	f200 8089 	bhi.w	801537c <_dtoa_r+0x2f4>
 801526a:	2b05      	cmp	r3, #5
 801526c:	bfc4      	itt	gt
 801526e:	3b04      	subgt	r3, #4
 8015270:	9306      	strgt	r3, [sp, #24]
 8015272:	9b06      	ldr	r3, [sp, #24]
 8015274:	f1a3 0302 	sub.w	r3, r3, #2
 8015278:	bfcc      	ite	gt
 801527a:	2500      	movgt	r5, #0
 801527c:	2501      	movle	r5, #1
 801527e:	2b03      	cmp	r3, #3
 8015280:	f200 8087 	bhi.w	8015392 <_dtoa_r+0x30a>
 8015284:	e8df f003 	tbb	[pc, r3]
 8015288:	59383a2d 	.word	0x59383a2d
 801528c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8015290:	441d      	add	r5, r3
 8015292:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015296:	2b20      	cmp	r3, #32
 8015298:	bfc1      	itttt	gt
 801529a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801529e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80152a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80152a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80152aa:	bfda      	itte	le
 80152ac:	f1c3 0320 	rsble	r3, r3, #32
 80152b0:	fa06 f003 	lslle.w	r0, r6, r3
 80152b4:	4318      	orrgt	r0, r3
 80152b6:	f7eb f945 	bl	8000544 <__aeabi_ui2d>
 80152ba:	2301      	movs	r3, #1
 80152bc:	4606      	mov	r6, r0
 80152be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80152c2:	3d01      	subs	r5, #1
 80152c4:	930e      	str	r3, [sp, #56]	; 0x38
 80152c6:	e76a      	b.n	801519e <_dtoa_r+0x116>
 80152c8:	2301      	movs	r3, #1
 80152ca:	e7b2      	b.n	8015232 <_dtoa_r+0x1aa>
 80152cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80152ce:	e7b1      	b.n	8015234 <_dtoa_r+0x1ac>
 80152d0:	9b04      	ldr	r3, [sp, #16]
 80152d2:	9a00      	ldr	r2, [sp, #0]
 80152d4:	1a9b      	subs	r3, r3, r2
 80152d6:	9304      	str	r3, [sp, #16]
 80152d8:	4253      	negs	r3, r2
 80152da:	9307      	str	r3, [sp, #28]
 80152dc:	2300      	movs	r3, #0
 80152de:	930a      	str	r3, [sp, #40]	; 0x28
 80152e0:	e7bf      	b.n	8015262 <_dtoa_r+0x1da>
 80152e2:	2300      	movs	r3, #0
 80152e4:	9308      	str	r3, [sp, #32]
 80152e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	dc55      	bgt.n	8015398 <_dtoa_r+0x310>
 80152ec:	2301      	movs	r3, #1
 80152ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80152f2:	461a      	mov	r2, r3
 80152f4:	9209      	str	r2, [sp, #36]	; 0x24
 80152f6:	e00c      	b.n	8015312 <_dtoa_r+0x28a>
 80152f8:	2301      	movs	r3, #1
 80152fa:	e7f3      	b.n	80152e4 <_dtoa_r+0x25c>
 80152fc:	2300      	movs	r3, #0
 80152fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015300:	9308      	str	r3, [sp, #32]
 8015302:	9b00      	ldr	r3, [sp, #0]
 8015304:	4413      	add	r3, r2
 8015306:	9302      	str	r3, [sp, #8]
 8015308:	3301      	adds	r3, #1
 801530a:	2b01      	cmp	r3, #1
 801530c:	9303      	str	r3, [sp, #12]
 801530e:	bfb8      	it	lt
 8015310:	2301      	movlt	r3, #1
 8015312:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015314:	2200      	movs	r2, #0
 8015316:	6042      	str	r2, [r0, #4]
 8015318:	2204      	movs	r2, #4
 801531a:	f102 0614 	add.w	r6, r2, #20
 801531e:	429e      	cmp	r6, r3
 8015320:	6841      	ldr	r1, [r0, #4]
 8015322:	d93d      	bls.n	80153a0 <_dtoa_r+0x318>
 8015324:	4620      	mov	r0, r4
 8015326:	f000 fdf9 	bl	8015f1c <_Balloc>
 801532a:	9001      	str	r0, [sp, #4]
 801532c:	2800      	cmp	r0, #0
 801532e:	d13b      	bne.n	80153a8 <_dtoa_r+0x320>
 8015330:	4b11      	ldr	r3, [pc, #68]	; (8015378 <_dtoa_r+0x2f0>)
 8015332:	4602      	mov	r2, r0
 8015334:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015338:	e6c0      	b.n	80150bc <_dtoa_r+0x34>
 801533a:	2301      	movs	r3, #1
 801533c:	e7df      	b.n	80152fe <_dtoa_r+0x276>
 801533e:	bf00      	nop
 8015340:	636f4361 	.word	0x636f4361
 8015344:	3fd287a7 	.word	0x3fd287a7
 8015348:	8b60c8b3 	.word	0x8b60c8b3
 801534c:	3fc68a28 	.word	0x3fc68a28
 8015350:	509f79fb 	.word	0x509f79fb
 8015354:	3fd34413 	.word	0x3fd34413
 8015358:	0801716e 	.word	0x0801716e
 801535c:	08017185 	.word	0x08017185
 8015360:	7ff00000 	.word	0x7ff00000
 8015364:	0801716a 	.word	0x0801716a
 8015368:	08017161 	.word	0x08017161
 801536c:	0801703d 	.word	0x0801703d
 8015370:	3ff80000 	.word	0x3ff80000
 8015374:	08017280 	.word	0x08017280
 8015378:	080171e0 	.word	0x080171e0
 801537c:	2501      	movs	r5, #1
 801537e:	2300      	movs	r3, #0
 8015380:	9306      	str	r3, [sp, #24]
 8015382:	9508      	str	r5, [sp, #32]
 8015384:	f04f 33ff 	mov.w	r3, #4294967295
 8015388:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801538c:	2200      	movs	r2, #0
 801538e:	2312      	movs	r3, #18
 8015390:	e7b0      	b.n	80152f4 <_dtoa_r+0x26c>
 8015392:	2301      	movs	r3, #1
 8015394:	9308      	str	r3, [sp, #32]
 8015396:	e7f5      	b.n	8015384 <_dtoa_r+0x2fc>
 8015398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801539a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801539e:	e7b8      	b.n	8015312 <_dtoa_r+0x28a>
 80153a0:	3101      	adds	r1, #1
 80153a2:	6041      	str	r1, [r0, #4]
 80153a4:	0052      	lsls	r2, r2, #1
 80153a6:	e7b8      	b.n	801531a <_dtoa_r+0x292>
 80153a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80153aa:	9a01      	ldr	r2, [sp, #4]
 80153ac:	601a      	str	r2, [r3, #0]
 80153ae:	9b03      	ldr	r3, [sp, #12]
 80153b0:	2b0e      	cmp	r3, #14
 80153b2:	f200 809d 	bhi.w	80154f0 <_dtoa_r+0x468>
 80153b6:	2d00      	cmp	r5, #0
 80153b8:	f000 809a 	beq.w	80154f0 <_dtoa_r+0x468>
 80153bc:	9b00      	ldr	r3, [sp, #0]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	dd32      	ble.n	8015428 <_dtoa_r+0x3a0>
 80153c2:	4ab7      	ldr	r2, [pc, #732]	; (80156a0 <_dtoa_r+0x618>)
 80153c4:	f003 030f 	and.w	r3, r3, #15
 80153c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80153cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80153d0:	9b00      	ldr	r3, [sp, #0]
 80153d2:	05d8      	lsls	r0, r3, #23
 80153d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80153d8:	d516      	bpl.n	8015408 <_dtoa_r+0x380>
 80153da:	4bb2      	ldr	r3, [pc, #712]	; (80156a4 <_dtoa_r+0x61c>)
 80153dc:	ec51 0b19 	vmov	r0, r1, d9
 80153e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80153e4:	f7eb fa52 	bl	800088c <__aeabi_ddiv>
 80153e8:	f007 070f 	and.w	r7, r7, #15
 80153ec:	4682      	mov	sl, r0
 80153ee:	468b      	mov	fp, r1
 80153f0:	2503      	movs	r5, #3
 80153f2:	4eac      	ldr	r6, [pc, #688]	; (80156a4 <_dtoa_r+0x61c>)
 80153f4:	b957      	cbnz	r7, 801540c <_dtoa_r+0x384>
 80153f6:	4642      	mov	r2, r8
 80153f8:	464b      	mov	r3, r9
 80153fa:	4650      	mov	r0, sl
 80153fc:	4659      	mov	r1, fp
 80153fe:	f7eb fa45 	bl	800088c <__aeabi_ddiv>
 8015402:	4682      	mov	sl, r0
 8015404:	468b      	mov	fp, r1
 8015406:	e028      	b.n	801545a <_dtoa_r+0x3d2>
 8015408:	2502      	movs	r5, #2
 801540a:	e7f2      	b.n	80153f2 <_dtoa_r+0x36a>
 801540c:	07f9      	lsls	r1, r7, #31
 801540e:	d508      	bpl.n	8015422 <_dtoa_r+0x39a>
 8015410:	4640      	mov	r0, r8
 8015412:	4649      	mov	r1, r9
 8015414:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015418:	f7eb f90e 	bl	8000638 <__aeabi_dmul>
 801541c:	3501      	adds	r5, #1
 801541e:	4680      	mov	r8, r0
 8015420:	4689      	mov	r9, r1
 8015422:	107f      	asrs	r7, r7, #1
 8015424:	3608      	adds	r6, #8
 8015426:	e7e5      	b.n	80153f4 <_dtoa_r+0x36c>
 8015428:	f000 809b 	beq.w	8015562 <_dtoa_r+0x4da>
 801542c:	9b00      	ldr	r3, [sp, #0]
 801542e:	4f9d      	ldr	r7, [pc, #628]	; (80156a4 <_dtoa_r+0x61c>)
 8015430:	425e      	negs	r6, r3
 8015432:	4b9b      	ldr	r3, [pc, #620]	; (80156a0 <_dtoa_r+0x618>)
 8015434:	f006 020f 	and.w	r2, r6, #15
 8015438:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801543c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015440:	ec51 0b19 	vmov	r0, r1, d9
 8015444:	f7eb f8f8 	bl	8000638 <__aeabi_dmul>
 8015448:	1136      	asrs	r6, r6, #4
 801544a:	4682      	mov	sl, r0
 801544c:	468b      	mov	fp, r1
 801544e:	2300      	movs	r3, #0
 8015450:	2502      	movs	r5, #2
 8015452:	2e00      	cmp	r6, #0
 8015454:	d17a      	bne.n	801554c <_dtoa_r+0x4c4>
 8015456:	2b00      	cmp	r3, #0
 8015458:	d1d3      	bne.n	8015402 <_dtoa_r+0x37a>
 801545a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801545c:	2b00      	cmp	r3, #0
 801545e:	f000 8082 	beq.w	8015566 <_dtoa_r+0x4de>
 8015462:	4b91      	ldr	r3, [pc, #580]	; (80156a8 <_dtoa_r+0x620>)
 8015464:	2200      	movs	r2, #0
 8015466:	4650      	mov	r0, sl
 8015468:	4659      	mov	r1, fp
 801546a:	f7eb fb57 	bl	8000b1c <__aeabi_dcmplt>
 801546e:	2800      	cmp	r0, #0
 8015470:	d079      	beq.n	8015566 <_dtoa_r+0x4de>
 8015472:	9b03      	ldr	r3, [sp, #12]
 8015474:	2b00      	cmp	r3, #0
 8015476:	d076      	beq.n	8015566 <_dtoa_r+0x4de>
 8015478:	9b02      	ldr	r3, [sp, #8]
 801547a:	2b00      	cmp	r3, #0
 801547c:	dd36      	ble.n	80154ec <_dtoa_r+0x464>
 801547e:	9b00      	ldr	r3, [sp, #0]
 8015480:	4650      	mov	r0, sl
 8015482:	4659      	mov	r1, fp
 8015484:	1e5f      	subs	r7, r3, #1
 8015486:	2200      	movs	r2, #0
 8015488:	4b88      	ldr	r3, [pc, #544]	; (80156ac <_dtoa_r+0x624>)
 801548a:	f7eb f8d5 	bl	8000638 <__aeabi_dmul>
 801548e:	9e02      	ldr	r6, [sp, #8]
 8015490:	4682      	mov	sl, r0
 8015492:	468b      	mov	fp, r1
 8015494:	3501      	adds	r5, #1
 8015496:	4628      	mov	r0, r5
 8015498:	f7eb f864 	bl	8000564 <__aeabi_i2d>
 801549c:	4652      	mov	r2, sl
 801549e:	465b      	mov	r3, fp
 80154a0:	f7eb f8ca 	bl	8000638 <__aeabi_dmul>
 80154a4:	4b82      	ldr	r3, [pc, #520]	; (80156b0 <_dtoa_r+0x628>)
 80154a6:	2200      	movs	r2, #0
 80154a8:	f7ea ff10 	bl	80002cc <__adddf3>
 80154ac:	46d0      	mov	r8, sl
 80154ae:	46d9      	mov	r9, fp
 80154b0:	4682      	mov	sl, r0
 80154b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80154b6:	2e00      	cmp	r6, #0
 80154b8:	d158      	bne.n	801556c <_dtoa_r+0x4e4>
 80154ba:	4b7e      	ldr	r3, [pc, #504]	; (80156b4 <_dtoa_r+0x62c>)
 80154bc:	2200      	movs	r2, #0
 80154be:	4640      	mov	r0, r8
 80154c0:	4649      	mov	r1, r9
 80154c2:	f7ea ff01 	bl	80002c8 <__aeabi_dsub>
 80154c6:	4652      	mov	r2, sl
 80154c8:	465b      	mov	r3, fp
 80154ca:	4680      	mov	r8, r0
 80154cc:	4689      	mov	r9, r1
 80154ce:	f7eb fb43 	bl	8000b58 <__aeabi_dcmpgt>
 80154d2:	2800      	cmp	r0, #0
 80154d4:	f040 8295 	bne.w	8015a02 <_dtoa_r+0x97a>
 80154d8:	4652      	mov	r2, sl
 80154da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80154de:	4640      	mov	r0, r8
 80154e0:	4649      	mov	r1, r9
 80154e2:	f7eb fb1b 	bl	8000b1c <__aeabi_dcmplt>
 80154e6:	2800      	cmp	r0, #0
 80154e8:	f040 8289 	bne.w	80159fe <_dtoa_r+0x976>
 80154ec:	ec5b ab19 	vmov	sl, fp, d9
 80154f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	f2c0 8148 	blt.w	8015788 <_dtoa_r+0x700>
 80154f8:	9a00      	ldr	r2, [sp, #0]
 80154fa:	2a0e      	cmp	r2, #14
 80154fc:	f300 8144 	bgt.w	8015788 <_dtoa_r+0x700>
 8015500:	4b67      	ldr	r3, [pc, #412]	; (80156a0 <_dtoa_r+0x618>)
 8015502:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015506:	e9d3 8900 	ldrd	r8, r9, [r3]
 801550a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801550c:	2b00      	cmp	r3, #0
 801550e:	f280 80d5 	bge.w	80156bc <_dtoa_r+0x634>
 8015512:	9b03      	ldr	r3, [sp, #12]
 8015514:	2b00      	cmp	r3, #0
 8015516:	f300 80d1 	bgt.w	80156bc <_dtoa_r+0x634>
 801551a:	f040 826f 	bne.w	80159fc <_dtoa_r+0x974>
 801551e:	4b65      	ldr	r3, [pc, #404]	; (80156b4 <_dtoa_r+0x62c>)
 8015520:	2200      	movs	r2, #0
 8015522:	4640      	mov	r0, r8
 8015524:	4649      	mov	r1, r9
 8015526:	f7eb f887 	bl	8000638 <__aeabi_dmul>
 801552a:	4652      	mov	r2, sl
 801552c:	465b      	mov	r3, fp
 801552e:	f7eb fb09 	bl	8000b44 <__aeabi_dcmpge>
 8015532:	9e03      	ldr	r6, [sp, #12]
 8015534:	4637      	mov	r7, r6
 8015536:	2800      	cmp	r0, #0
 8015538:	f040 8245 	bne.w	80159c6 <_dtoa_r+0x93e>
 801553c:	9d01      	ldr	r5, [sp, #4]
 801553e:	2331      	movs	r3, #49	; 0x31
 8015540:	f805 3b01 	strb.w	r3, [r5], #1
 8015544:	9b00      	ldr	r3, [sp, #0]
 8015546:	3301      	adds	r3, #1
 8015548:	9300      	str	r3, [sp, #0]
 801554a:	e240      	b.n	80159ce <_dtoa_r+0x946>
 801554c:	07f2      	lsls	r2, r6, #31
 801554e:	d505      	bpl.n	801555c <_dtoa_r+0x4d4>
 8015550:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015554:	f7eb f870 	bl	8000638 <__aeabi_dmul>
 8015558:	3501      	adds	r5, #1
 801555a:	2301      	movs	r3, #1
 801555c:	1076      	asrs	r6, r6, #1
 801555e:	3708      	adds	r7, #8
 8015560:	e777      	b.n	8015452 <_dtoa_r+0x3ca>
 8015562:	2502      	movs	r5, #2
 8015564:	e779      	b.n	801545a <_dtoa_r+0x3d2>
 8015566:	9f00      	ldr	r7, [sp, #0]
 8015568:	9e03      	ldr	r6, [sp, #12]
 801556a:	e794      	b.n	8015496 <_dtoa_r+0x40e>
 801556c:	9901      	ldr	r1, [sp, #4]
 801556e:	4b4c      	ldr	r3, [pc, #304]	; (80156a0 <_dtoa_r+0x618>)
 8015570:	4431      	add	r1, r6
 8015572:	910d      	str	r1, [sp, #52]	; 0x34
 8015574:	9908      	ldr	r1, [sp, #32]
 8015576:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801557a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801557e:	2900      	cmp	r1, #0
 8015580:	d043      	beq.n	801560a <_dtoa_r+0x582>
 8015582:	494d      	ldr	r1, [pc, #308]	; (80156b8 <_dtoa_r+0x630>)
 8015584:	2000      	movs	r0, #0
 8015586:	f7eb f981 	bl	800088c <__aeabi_ddiv>
 801558a:	4652      	mov	r2, sl
 801558c:	465b      	mov	r3, fp
 801558e:	f7ea fe9b 	bl	80002c8 <__aeabi_dsub>
 8015592:	9d01      	ldr	r5, [sp, #4]
 8015594:	4682      	mov	sl, r0
 8015596:	468b      	mov	fp, r1
 8015598:	4649      	mov	r1, r9
 801559a:	4640      	mov	r0, r8
 801559c:	f7eb fafc 	bl	8000b98 <__aeabi_d2iz>
 80155a0:	4606      	mov	r6, r0
 80155a2:	f7ea ffdf 	bl	8000564 <__aeabi_i2d>
 80155a6:	4602      	mov	r2, r0
 80155a8:	460b      	mov	r3, r1
 80155aa:	4640      	mov	r0, r8
 80155ac:	4649      	mov	r1, r9
 80155ae:	f7ea fe8b 	bl	80002c8 <__aeabi_dsub>
 80155b2:	3630      	adds	r6, #48	; 0x30
 80155b4:	f805 6b01 	strb.w	r6, [r5], #1
 80155b8:	4652      	mov	r2, sl
 80155ba:	465b      	mov	r3, fp
 80155bc:	4680      	mov	r8, r0
 80155be:	4689      	mov	r9, r1
 80155c0:	f7eb faac 	bl	8000b1c <__aeabi_dcmplt>
 80155c4:	2800      	cmp	r0, #0
 80155c6:	d163      	bne.n	8015690 <_dtoa_r+0x608>
 80155c8:	4642      	mov	r2, r8
 80155ca:	464b      	mov	r3, r9
 80155cc:	4936      	ldr	r1, [pc, #216]	; (80156a8 <_dtoa_r+0x620>)
 80155ce:	2000      	movs	r0, #0
 80155d0:	f7ea fe7a 	bl	80002c8 <__aeabi_dsub>
 80155d4:	4652      	mov	r2, sl
 80155d6:	465b      	mov	r3, fp
 80155d8:	f7eb faa0 	bl	8000b1c <__aeabi_dcmplt>
 80155dc:	2800      	cmp	r0, #0
 80155de:	f040 80b5 	bne.w	801574c <_dtoa_r+0x6c4>
 80155e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155e4:	429d      	cmp	r5, r3
 80155e6:	d081      	beq.n	80154ec <_dtoa_r+0x464>
 80155e8:	4b30      	ldr	r3, [pc, #192]	; (80156ac <_dtoa_r+0x624>)
 80155ea:	2200      	movs	r2, #0
 80155ec:	4650      	mov	r0, sl
 80155ee:	4659      	mov	r1, fp
 80155f0:	f7eb f822 	bl	8000638 <__aeabi_dmul>
 80155f4:	4b2d      	ldr	r3, [pc, #180]	; (80156ac <_dtoa_r+0x624>)
 80155f6:	4682      	mov	sl, r0
 80155f8:	468b      	mov	fp, r1
 80155fa:	4640      	mov	r0, r8
 80155fc:	4649      	mov	r1, r9
 80155fe:	2200      	movs	r2, #0
 8015600:	f7eb f81a 	bl	8000638 <__aeabi_dmul>
 8015604:	4680      	mov	r8, r0
 8015606:	4689      	mov	r9, r1
 8015608:	e7c6      	b.n	8015598 <_dtoa_r+0x510>
 801560a:	4650      	mov	r0, sl
 801560c:	4659      	mov	r1, fp
 801560e:	f7eb f813 	bl	8000638 <__aeabi_dmul>
 8015612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015614:	9d01      	ldr	r5, [sp, #4]
 8015616:	930f      	str	r3, [sp, #60]	; 0x3c
 8015618:	4682      	mov	sl, r0
 801561a:	468b      	mov	fp, r1
 801561c:	4649      	mov	r1, r9
 801561e:	4640      	mov	r0, r8
 8015620:	f7eb faba 	bl	8000b98 <__aeabi_d2iz>
 8015624:	4606      	mov	r6, r0
 8015626:	f7ea ff9d 	bl	8000564 <__aeabi_i2d>
 801562a:	3630      	adds	r6, #48	; 0x30
 801562c:	4602      	mov	r2, r0
 801562e:	460b      	mov	r3, r1
 8015630:	4640      	mov	r0, r8
 8015632:	4649      	mov	r1, r9
 8015634:	f7ea fe48 	bl	80002c8 <__aeabi_dsub>
 8015638:	f805 6b01 	strb.w	r6, [r5], #1
 801563c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801563e:	429d      	cmp	r5, r3
 8015640:	4680      	mov	r8, r0
 8015642:	4689      	mov	r9, r1
 8015644:	f04f 0200 	mov.w	r2, #0
 8015648:	d124      	bne.n	8015694 <_dtoa_r+0x60c>
 801564a:	4b1b      	ldr	r3, [pc, #108]	; (80156b8 <_dtoa_r+0x630>)
 801564c:	4650      	mov	r0, sl
 801564e:	4659      	mov	r1, fp
 8015650:	f7ea fe3c 	bl	80002cc <__adddf3>
 8015654:	4602      	mov	r2, r0
 8015656:	460b      	mov	r3, r1
 8015658:	4640      	mov	r0, r8
 801565a:	4649      	mov	r1, r9
 801565c:	f7eb fa7c 	bl	8000b58 <__aeabi_dcmpgt>
 8015660:	2800      	cmp	r0, #0
 8015662:	d173      	bne.n	801574c <_dtoa_r+0x6c4>
 8015664:	4652      	mov	r2, sl
 8015666:	465b      	mov	r3, fp
 8015668:	4913      	ldr	r1, [pc, #76]	; (80156b8 <_dtoa_r+0x630>)
 801566a:	2000      	movs	r0, #0
 801566c:	f7ea fe2c 	bl	80002c8 <__aeabi_dsub>
 8015670:	4602      	mov	r2, r0
 8015672:	460b      	mov	r3, r1
 8015674:	4640      	mov	r0, r8
 8015676:	4649      	mov	r1, r9
 8015678:	f7eb fa50 	bl	8000b1c <__aeabi_dcmplt>
 801567c:	2800      	cmp	r0, #0
 801567e:	f43f af35 	beq.w	80154ec <_dtoa_r+0x464>
 8015682:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015684:	1e6b      	subs	r3, r5, #1
 8015686:	930f      	str	r3, [sp, #60]	; 0x3c
 8015688:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801568c:	2b30      	cmp	r3, #48	; 0x30
 801568e:	d0f8      	beq.n	8015682 <_dtoa_r+0x5fa>
 8015690:	9700      	str	r7, [sp, #0]
 8015692:	e049      	b.n	8015728 <_dtoa_r+0x6a0>
 8015694:	4b05      	ldr	r3, [pc, #20]	; (80156ac <_dtoa_r+0x624>)
 8015696:	f7ea ffcf 	bl	8000638 <__aeabi_dmul>
 801569a:	4680      	mov	r8, r0
 801569c:	4689      	mov	r9, r1
 801569e:	e7bd      	b.n	801561c <_dtoa_r+0x594>
 80156a0:	08017280 	.word	0x08017280
 80156a4:	08017258 	.word	0x08017258
 80156a8:	3ff00000 	.word	0x3ff00000
 80156ac:	40240000 	.word	0x40240000
 80156b0:	401c0000 	.word	0x401c0000
 80156b4:	40140000 	.word	0x40140000
 80156b8:	3fe00000 	.word	0x3fe00000
 80156bc:	9d01      	ldr	r5, [sp, #4]
 80156be:	4656      	mov	r6, sl
 80156c0:	465f      	mov	r7, fp
 80156c2:	4642      	mov	r2, r8
 80156c4:	464b      	mov	r3, r9
 80156c6:	4630      	mov	r0, r6
 80156c8:	4639      	mov	r1, r7
 80156ca:	f7eb f8df 	bl	800088c <__aeabi_ddiv>
 80156ce:	f7eb fa63 	bl	8000b98 <__aeabi_d2iz>
 80156d2:	4682      	mov	sl, r0
 80156d4:	f7ea ff46 	bl	8000564 <__aeabi_i2d>
 80156d8:	4642      	mov	r2, r8
 80156da:	464b      	mov	r3, r9
 80156dc:	f7ea ffac 	bl	8000638 <__aeabi_dmul>
 80156e0:	4602      	mov	r2, r0
 80156e2:	460b      	mov	r3, r1
 80156e4:	4630      	mov	r0, r6
 80156e6:	4639      	mov	r1, r7
 80156e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80156ec:	f7ea fdec 	bl	80002c8 <__aeabi_dsub>
 80156f0:	f805 6b01 	strb.w	r6, [r5], #1
 80156f4:	9e01      	ldr	r6, [sp, #4]
 80156f6:	9f03      	ldr	r7, [sp, #12]
 80156f8:	1bae      	subs	r6, r5, r6
 80156fa:	42b7      	cmp	r7, r6
 80156fc:	4602      	mov	r2, r0
 80156fe:	460b      	mov	r3, r1
 8015700:	d135      	bne.n	801576e <_dtoa_r+0x6e6>
 8015702:	f7ea fde3 	bl	80002cc <__adddf3>
 8015706:	4642      	mov	r2, r8
 8015708:	464b      	mov	r3, r9
 801570a:	4606      	mov	r6, r0
 801570c:	460f      	mov	r7, r1
 801570e:	f7eb fa23 	bl	8000b58 <__aeabi_dcmpgt>
 8015712:	b9d0      	cbnz	r0, 801574a <_dtoa_r+0x6c2>
 8015714:	4642      	mov	r2, r8
 8015716:	464b      	mov	r3, r9
 8015718:	4630      	mov	r0, r6
 801571a:	4639      	mov	r1, r7
 801571c:	f7eb f9f4 	bl	8000b08 <__aeabi_dcmpeq>
 8015720:	b110      	cbz	r0, 8015728 <_dtoa_r+0x6a0>
 8015722:	f01a 0f01 	tst.w	sl, #1
 8015726:	d110      	bne.n	801574a <_dtoa_r+0x6c2>
 8015728:	4620      	mov	r0, r4
 801572a:	ee18 1a10 	vmov	r1, s16
 801572e:	f000 fc35 	bl	8015f9c <_Bfree>
 8015732:	2300      	movs	r3, #0
 8015734:	9800      	ldr	r0, [sp, #0]
 8015736:	702b      	strb	r3, [r5, #0]
 8015738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801573a:	3001      	adds	r0, #1
 801573c:	6018      	str	r0, [r3, #0]
 801573e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015740:	2b00      	cmp	r3, #0
 8015742:	f43f acf1 	beq.w	8015128 <_dtoa_r+0xa0>
 8015746:	601d      	str	r5, [r3, #0]
 8015748:	e4ee      	b.n	8015128 <_dtoa_r+0xa0>
 801574a:	9f00      	ldr	r7, [sp, #0]
 801574c:	462b      	mov	r3, r5
 801574e:	461d      	mov	r5, r3
 8015750:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015754:	2a39      	cmp	r2, #57	; 0x39
 8015756:	d106      	bne.n	8015766 <_dtoa_r+0x6de>
 8015758:	9a01      	ldr	r2, [sp, #4]
 801575a:	429a      	cmp	r2, r3
 801575c:	d1f7      	bne.n	801574e <_dtoa_r+0x6c6>
 801575e:	9901      	ldr	r1, [sp, #4]
 8015760:	2230      	movs	r2, #48	; 0x30
 8015762:	3701      	adds	r7, #1
 8015764:	700a      	strb	r2, [r1, #0]
 8015766:	781a      	ldrb	r2, [r3, #0]
 8015768:	3201      	adds	r2, #1
 801576a:	701a      	strb	r2, [r3, #0]
 801576c:	e790      	b.n	8015690 <_dtoa_r+0x608>
 801576e:	4ba6      	ldr	r3, [pc, #664]	; (8015a08 <_dtoa_r+0x980>)
 8015770:	2200      	movs	r2, #0
 8015772:	f7ea ff61 	bl	8000638 <__aeabi_dmul>
 8015776:	2200      	movs	r2, #0
 8015778:	2300      	movs	r3, #0
 801577a:	4606      	mov	r6, r0
 801577c:	460f      	mov	r7, r1
 801577e:	f7eb f9c3 	bl	8000b08 <__aeabi_dcmpeq>
 8015782:	2800      	cmp	r0, #0
 8015784:	d09d      	beq.n	80156c2 <_dtoa_r+0x63a>
 8015786:	e7cf      	b.n	8015728 <_dtoa_r+0x6a0>
 8015788:	9a08      	ldr	r2, [sp, #32]
 801578a:	2a00      	cmp	r2, #0
 801578c:	f000 80d7 	beq.w	801593e <_dtoa_r+0x8b6>
 8015790:	9a06      	ldr	r2, [sp, #24]
 8015792:	2a01      	cmp	r2, #1
 8015794:	f300 80ba 	bgt.w	801590c <_dtoa_r+0x884>
 8015798:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801579a:	2a00      	cmp	r2, #0
 801579c:	f000 80b2 	beq.w	8015904 <_dtoa_r+0x87c>
 80157a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80157a4:	9e07      	ldr	r6, [sp, #28]
 80157a6:	9d04      	ldr	r5, [sp, #16]
 80157a8:	9a04      	ldr	r2, [sp, #16]
 80157aa:	441a      	add	r2, r3
 80157ac:	9204      	str	r2, [sp, #16]
 80157ae:	9a05      	ldr	r2, [sp, #20]
 80157b0:	2101      	movs	r1, #1
 80157b2:	441a      	add	r2, r3
 80157b4:	4620      	mov	r0, r4
 80157b6:	9205      	str	r2, [sp, #20]
 80157b8:	f000 fca8 	bl	801610c <__i2b>
 80157bc:	4607      	mov	r7, r0
 80157be:	2d00      	cmp	r5, #0
 80157c0:	dd0c      	ble.n	80157dc <_dtoa_r+0x754>
 80157c2:	9b05      	ldr	r3, [sp, #20]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	dd09      	ble.n	80157dc <_dtoa_r+0x754>
 80157c8:	42ab      	cmp	r3, r5
 80157ca:	9a04      	ldr	r2, [sp, #16]
 80157cc:	bfa8      	it	ge
 80157ce:	462b      	movge	r3, r5
 80157d0:	1ad2      	subs	r2, r2, r3
 80157d2:	9204      	str	r2, [sp, #16]
 80157d4:	9a05      	ldr	r2, [sp, #20]
 80157d6:	1aed      	subs	r5, r5, r3
 80157d8:	1ad3      	subs	r3, r2, r3
 80157da:	9305      	str	r3, [sp, #20]
 80157dc:	9b07      	ldr	r3, [sp, #28]
 80157de:	b31b      	cbz	r3, 8015828 <_dtoa_r+0x7a0>
 80157e0:	9b08      	ldr	r3, [sp, #32]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	f000 80af 	beq.w	8015946 <_dtoa_r+0x8be>
 80157e8:	2e00      	cmp	r6, #0
 80157ea:	dd13      	ble.n	8015814 <_dtoa_r+0x78c>
 80157ec:	4639      	mov	r1, r7
 80157ee:	4632      	mov	r2, r6
 80157f0:	4620      	mov	r0, r4
 80157f2:	f000 fd4b 	bl	801628c <__pow5mult>
 80157f6:	ee18 2a10 	vmov	r2, s16
 80157fa:	4601      	mov	r1, r0
 80157fc:	4607      	mov	r7, r0
 80157fe:	4620      	mov	r0, r4
 8015800:	f000 fc9a 	bl	8016138 <__multiply>
 8015804:	ee18 1a10 	vmov	r1, s16
 8015808:	4680      	mov	r8, r0
 801580a:	4620      	mov	r0, r4
 801580c:	f000 fbc6 	bl	8015f9c <_Bfree>
 8015810:	ee08 8a10 	vmov	s16, r8
 8015814:	9b07      	ldr	r3, [sp, #28]
 8015816:	1b9a      	subs	r2, r3, r6
 8015818:	d006      	beq.n	8015828 <_dtoa_r+0x7a0>
 801581a:	ee18 1a10 	vmov	r1, s16
 801581e:	4620      	mov	r0, r4
 8015820:	f000 fd34 	bl	801628c <__pow5mult>
 8015824:	ee08 0a10 	vmov	s16, r0
 8015828:	2101      	movs	r1, #1
 801582a:	4620      	mov	r0, r4
 801582c:	f000 fc6e 	bl	801610c <__i2b>
 8015830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015832:	2b00      	cmp	r3, #0
 8015834:	4606      	mov	r6, r0
 8015836:	f340 8088 	ble.w	801594a <_dtoa_r+0x8c2>
 801583a:	461a      	mov	r2, r3
 801583c:	4601      	mov	r1, r0
 801583e:	4620      	mov	r0, r4
 8015840:	f000 fd24 	bl	801628c <__pow5mult>
 8015844:	9b06      	ldr	r3, [sp, #24]
 8015846:	2b01      	cmp	r3, #1
 8015848:	4606      	mov	r6, r0
 801584a:	f340 8081 	ble.w	8015950 <_dtoa_r+0x8c8>
 801584e:	f04f 0800 	mov.w	r8, #0
 8015852:	6933      	ldr	r3, [r6, #16]
 8015854:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015858:	6918      	ldr	r0, [r3, #16]
 801585a:	f000 fc07 	bl	801606c <__hi0bits>
 801585e:	f1c0 0020 	rsb	r0, r0, #32
 8015862:	9b05      	ldr	r3, [sp, #20]
 8015864:	4418      	add	r0, r3
 8015866:	f010 001f 	ands.w	r0, r0, #31
 801586a:	f000 8092 	beq.w	8015992 <_dtoa_r+0x90a>
 801586e:	f1c0 0320 	rsb	r3, r0, #32
 8015872:	2b04      	cmp	r3, #4
 8015874:	f340 808a 	ble.w	801598c <_dtoa_r+0x904>
 8015878:	f1c0 001c 	rsb	r0, r0, #28
 801587c:	9b04      	ldr	r3, [sp, #16]
 801587e:	4403      	add	r3, r0
 8015880:	9304      	str	r3, [sp, #16]
 8015882:	9b05      	ldr	r3, [sp, #20]
 8015884:	4403      	add	r3, r0
 8015886:	4405      	add	r5, r0
 8015888:	9305      	str	r3, [sp, #20]
 801588a:	9b04      	ldr	r3, [sp, #16]
 801588c:	2b00      	cmp	r3, #0
 801588e:	dd07      	ble.n	80158a0 <_dtoa_r+0x818>
 8015890:	ee18 1a10 	vmov	r1, s16
 8015894:	461a      	mov	r2, r3
 8015896:	4620      	mov	r0, r4
 8015898:	f000 fd52 	bl	8016340 <__lshift>
 801589c:	ee08 0a10 	vmov	s16, r0
 80158a0:	9b05      	ldr	r3, [sp, #20]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	dd05      	ble.n	80158b2 <_dtoa_r+0x82a>
 80158a6:	4631      	mov	r1, r6
 80158a8:	461a      	mov	r2, r3
 80158aa:	4620      	mov	r0, r4
 80158ac:	f000 fd48 	bl	8016340 <__lshift>
 80158b0:	4606      	mov	r6, r0
 80158b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d06e      	beq.n	8015996 <_dtoa_r+0x90e>
 80158b8:	ee18 0a10 	vmov	r0, s16
 80158bc:	4631      	mov	r1, r6
 80158be:	f000 fdaf 	bl	8016420 <__mcmp>
 80158c2:	2800      	cmp	r0, #0
 80158c4:	da67      	bge.n	8015996 <_dtoa_r+0x90e>
 80158c6:	9b00      	ldr	r3, [sp, #0]
 80158c8:	3b01      	subs	r3, #1
 80158ca:	ee18 1a10 	vmov	r1, s16
 80158ce:	9300      	str	r3, [sp, #0]
 80158d0:	220a      	movs	r2, #10
 80158d2:	2300      	movs	r3, #0
 80158d4:	4620      	mov	r0, r4
 80158d6:	f000 fb83 	bl	8015fe0 <__multadd>
 80158da:	9b08      	ldr	r3, [sp, #32]
 80158dc:	ee08 0a10 	vmov	s16, r0
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	f000 81b1 	beq.w	8015c48 <_dtoa_r+0xbc0>
 80158e6:	2300      	movs	r3, #0
 80158e8:	4639      	mov	r1, r7
 80158ea:	220a      	movs	r2, #10
 80158ec:	4620      	mov	r0, r4
 80158ee:	f000 fb77 	bl	8015fe0 <__multadd>
 80158f2:	9b02      	ldr	r3, [sp, #8]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	4607      	mov	r7, r0
 80158f8:	f300 808e 	bgt.w	8015a18 <_dtoa_r+0x990>
 80158fc:	9b06      	ldr	r3, [sp, #24]
 80158fe:	2b02      	cmp	r3, #2
 8015900:	dc51      	bgt.n	80159a6 <_dtoa_r+0x91e>
 8015902:	e089      	b.n	8015a18 <_dtoa_r+0x990>
 8015904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015906:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801590a:	e74b      	b.n	80157a4 <_dtoa_r+0x71c>
 801590c:	9b03      	ldr	r3, [sp, #12]
 801590e:	1e5e      	subs	r6, r3, #1
 8015910:	9b07      	ldr	r3, [sp, #28]
 8015912:	42b3      	cmp	r3, r6
 8015914:	bfbf      	itttt	lt
 8015916:	9b07      	ldrlt	r3, [sp, #28]
 8015918:	9607      	strlt	r6, [sp, #28]
 801591a:	1af2      	sublt	r2, r6, r3
 801591c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801591e:	bfb6      	itet	lt
 8015920:	189b      	addlt	r3, r3, r2
 8015922:	1b9e      	subge	r6, r3, r6
 8015924:	930a      	strlt	r3, [sp, #40]	; 0x28
 8015926:	9b03      	ldr	r3, [sp, #12]
 8015928:	bfb8      	it	lt
 801592a:	2600      	movlt	r6, #0
 801592c:	2b00      	cmp	r3, #0
 801592e:	bfb7      	itett	lt
 8015930:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8015934:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8015938:	1a9d      	sublt	r5, r3, r2
 801593a:	2300      	movlt	r3, #0
 801593c:	e734      	b.n	80157a8 <_dtoa_r+0x720>
 801593e:	9e07      	ldr	r6, [sp, #28]
 8015940:	9d04      	ldr	r5, [sp, #16]
 8015942:	9f08      	ldr	r7, [sp, #32]
 8015944:	e73b      	b.n	80157be <_dtoa_r+0x736>
 8015946:	9a07      	ldr	r2, [sp, #28]
 8015948:	e767      	b.n	801581a <_dtoa_r+0x792>
 801594a:	9b06      	ldr	r3, [sp, #24]
 801594c:	2b01      	cmp	r3, #1
 801594e:	dc18      	bgt.n	8015982 <_dtoa_r+0x8fa>
 8015950:	f1ba 0f00 	cmp.w	sl, #0
 8015954:	d115      	bne.n	8015982 <_dtoa_r+0x8fa>
 8015956:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801595a:	b993      	cbnz	r3, 8015982 <_dtoa_r+0x8fa>
 801595c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015960:	0d1b      	lsrs	r3, r3, #20
 8015962:	051b      	lsls	r3, r3, #20
 8015964:	b183      	cbz	r3, 8015988 <_dtoa_r+0x900>
 8015966:	9b04      	ldr	r3, [sp, #16]
 8015968:	3301      	adds	r3, #1
 801596a:	9304      	str	r3, [sp, #16]
 801596c:	9b05      	ldr	r3, [sp, #20]
 801596e:	3301      	adds	r3, #1
 8015970:	9305      	str	r3, [sp, #20]
 8015972:	f04f 0801 	mov.w	r8, #1
 8015976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015978:	2b00      	cmp	r3, #0
 801597a:	f47f af6a 	bne.w	8015852 <_dtoa_r+0x7ca>
 801597e:	2001      	movs	r0, #1
 8015980:	e76f      	b.n	8015862 <_dtoa_r+0x7da>
 8015982:	f04f 0800 	mov.w	r8, #0
 8015986:	e7f6      	b.n	8015976 <_dtoa_r+0x8ee>
 8015988:	4698      	mov	r8, r3
 801598a:	e7f4      	b.n	8015976 <_dtoa_r+0x8ee>
 801598c:	f43f af7d 	beq.w	801588a <_dtoa_r+0x802>
 8015990:	4618      	mov	r0, r3
 8015992:	301c      	adds	r0, #28
 8015994:	e772      	b.n	801587c <_dtoa_r+0x7f4>
 8015996:	9b03      	ldr	r3, [sp, #12]
 8015998:	2b00      	cmp	r3, #0
 801599a:	dc37      	bgt.n	8015a0c <_dtoa_r+0x984>
 801599c:	9b06      	ldr	r3, [sp, #24]
 801599e:	2b02      	cmp	r3, #2
 80159a0:	dd34      	ble.n	8015a0c <_dtoa_r+0x984>
 80159a2:	9b03      	ldr	r3, [sp, #12]
 80159a4:	9302      	str	r3, [sp, #8]
 80159a6:	9b02      	ldr	r3, [sp, #8]
 80159a8:	b96b      	cbnz	r3, 80159c6 <_dtoa_r+0x93e>
 80159aa:	4631      	mov	r1, r6
 80159ac:	2205      	movs	r2, #5
 80159ae:	4620      	mov	r0, r4
 80159b0:	f000 fb16 	bl	8015fe0 <__multadd>
 80159b4:	4601      	mov	r1, r0
 80159b6:	4606      	mov	r6, r0
 80159b8:	ee18 0a10 	vmov	r0, s16
 80159bc:	f000 fd30 	bl	8016420 <__mcmp>
 80159c0:	2800      	cmp	r0, #0
 80159c2:	f73f adbb 	bgt.w	801553c <_dtoa_r+0x4b4>
 80159c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159c8:	9d01      	ldr	r5, [sp, #4]
 80159ca:	43db      	mvns	r3, r3
 80159cc:	9300      	str	r3, [sp, #0]
 80159ce:	f04f 0800 	mov.w	r8, #0
 80159d2:	4631      	mov	r1, r6
 80159d4:	4620      	mov	r0, r4
 80159d6:	f000 fae1 	bl	8015f9c <_Bfree>
 80159da:	2f00      	cmp	r7, #0
 80159dc:	f43f aea4 	beq.w	8015728 <_dtoa_r+0x6a0>
 80159e0:	f1b8 0f00 	cmp.w	r8, #0
 80159e4:	d005      	beq.n	80159f2 <_dtoa_r+0x96a>
 80159e6:	45b8      	cmp	r8, r7
 80159e8:	d003      	beq.n	80159f2 <_dtoa_r+0x96a>
 80159ea:	4641      	mov	r1, r8
 80159ec:	4620      	mov	r0, r4
 80159ee:	f000 fad5 	bl	8015f9c <_Bfree>
 80159f2:	4639      	mov	r1, r7
 80159f4:	4620      	mov	r0, r4
 80159f6:	f000 fad1 	bl	8015f9c <_Bfree>
 80159fa:	e695      	b.n	8015728 <_dtoa_r+0x6a0>
 80159fc:	2600      	movs	r6, #0
 80159fe:	4637      	mov	r7, r6
 8015a00:	e7e1      	b.n	80159c6 <_dtoa_r+0x93e>
 8015a02:	9700      	str	r7, [sp, #0]
 8015a04:	4637      	mov	r7, r6
 8015a06:	e599      	b.n	801553c <_dtoa_r+0x4b4>
 8015a08:	40240000 	.word	0x40240000
 8015a0c:	9b08      	ldr	r3, [sp, #32]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	f000 80ca 	beq.w	8015ba8 <_dtoa_r+0xb20>
 8015a14:	9b03      	ldr	r3, [sp, #12]
 8015a16:	9302      	str	r3, [sp, #8]
 8015a18:	2d00      	cmp	r5, #0
 8015a1a:	dd05      	ble.n	8015a28 <_dtoa_r+0x9a0>
 8015a1c:	4639      	mov	r1, r7
 8015a1e:	462a      	mov	r2, r5
 8015a20:	4620      	mov	r0, r4
 8015a22:	f000 fc8d 	bl	8016340 <__lshift>
 8015a26:	4607      	mov	r7, r0
 8015a28:	f1b8 0f00 	cmp.w	r8, #0
 8015a2c:	d05b      	beq.n	8015ae6 <_dtoa_r+0xa5e>
 8015a2e:	6879      	ldr	r1, [r7, #4]
 8015a30:	4620      	mov	r0, r4
 8015a32:	f000 fa73 	bl	8015f1c <_Balloc>
 8015a36:	4605      	mov	r5, r0
 8015a38:	b928      	cbnz	r0, 8015a46 <_dtoa_r+0x9be>
 8015a3a:	4b87      	ldr	r3, [pc, #540]	; (8015c58 <_dtoa_r+0xbd0>)
 8015a3c:	4602      	mov	r2, r0
 8015a3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015a42:	f7ff bb3b 	b.w	80150bc <_dtoa_r+0x34>
 8015a46:	693a      	ldr	r2, [r7, #16]
 8015a48:	3202      	adds	r2, #2
 8015a4a:	0092      	lsls	r2, r2, #2
 8015a4c:	f107 010c 	add.w	r1, r7, #12
 8015a50:	300c      	adds	r0, #12
 8015a52:	f7fe fae5 	bl	8014020 <memcpy>
 8015a56:	2201      	movs	r2, #1
 8015a58:	4629      	mov	r1, r5
 8015a5a:	4620      	mov	r0, r4
 8015a5c:	f000 fc70 	bl	8016340 <__lshift>
 8015a60:	9b01      	ldr	r3, [sp, #4]
 8015a62:	f103 0901 	add.w	r9, r3, #1
 8015a66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8015a6a:	4413      	add	r3, r2
 8015a6c:	9305      	str	r3, [sp, #20]
 8015a6e:	f00a 0301 	and.w	r3, sl, #1
 8015a72:	46b8      	mov	r8, r7
 8015a74:	9304      	str	r3, [sp, #16]
 8015a76:	4607      	mov	r7, r0
 8015a78:	4631      	mov	r1, r6
 8015a7a:	ee18 0a10 	vmov	r0, s16
 8015a7e:	f7ff fa75 	bl	8014f6c <quorem>
 8015a82:	4641      	mov	r1, r8
 8015a84:	9002      	str	r0, [sp, #8]
 8015a86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015a8a:	ee18 0a10 	vmov	r0, s16
 8015a8e:	f000 fcc7 	bl	8016420 <__mcmp>
 8015a92:	463a      	mov	r2, r7
 8015a94:	9003      	str	r0, [sp, #12]
 8015a96:	4631      	mov	r1, r6
 8015a98:	4620      	mov	r0, r4
 8015a9a:	f000 fcdd 	bl	8016458 <__mdiff>
 8015a9e:	68c2      	ldr	r2, [r0, #12]
 8015aa0:	f109 3bff 	add.w	fp, r9, #4294967295
 8015aa4:	4605      	mov	r5, r0
 8015aa6:	bb02      	cbnz	r2, 8015aea <_dtoa_r+0xa62>
 8015aa8:	4601      	mov	r1, r0
 8015aaa:	ee18 0a10 	vmov	r0, s16
 8015aae:	f000 fcb7 	bl	8016420 <__mcmp>
 8015ab2:	4602      	mov	r2, r0
 8015ab4:	4629      	mov	r1, r5
 8015ab6:	4620      	mov	r0, r4
 8015ab8:	9207      	str	r2, [sp, #28]
 8015aba:	f000 fa6f 	bl	8015f9c <_Bfree>
 8015abe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015ac2:	ea43 0102 	orr.w	r1, r3, r2
 8015ac6:	9b04      	ldr	r3, [sp, #16]
 8015ac8:	430b      	orrs	r3, r1
 8015aca:	464d      	mov	r5, r9
 8015acc:	d10f      	bne.n	8015aee <_dtoa_r+0xa66>
 8015ace:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015ad2:	d02a      	beq.n	8015b2a <_dtoa_r+0xaa2>
 8015ad4:	9b03      	ldr	r3, [sp, #12]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	dd02      	ble.n	8015ae0 <_dtoa_r+0xa58>
 8015ada:	9b02      	ldr	r3, [sp, #8]
 8015adc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8015ae0:	f88b a000 	strb.w	sl, [fp]
 8015ae4:	e775      	b.n	80159d2 <_dtoa_r+0x94a>
 8015ae6:	4638      	mov	r0, r7
 8015ae8:	e7ba      	b.n	8015a60 <_dtoa_r+0x9d8>
 8015aea:	2201      	movs	r2, #1
 8015aec:	e7e2      	b.n	8015ab4 <_dtoa_r+0xa2c>
 8015aee:	9b03      	ldr	r3, [sp, #12]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	db04      	blt.n	8015afe <_dtoa_r+0xa76>
 8015af4:	9906      	ldr	r1, [sp, #24]
 8015af6:	430b      	orrs	r3, r1
 8015af8:	9904      	ldr	r1, [sp, #16]
 8015afa:	430b      	orrs	r3, r1
 8015afc:	d122      	bne.n	8015b44 <_dtoa_r+0xabc>
 8015afe:	2a00      	cmp	r2, #0
 8015b00:	ddee      	ble.n	8015ae0 <_dtoa_r+0xa58>
 8015b02:	ee18 1a10 	vmov	r1, s16
 8015b06:	2201      	movs	r2, #1
 8015b08:	4620      	mov	r0, r4
 8015b0a:	f000 fc19 	bl	8016340 <__lshift>
 8015b0e:	4631      	mov	r1, r6
 8015b10:	ee08 0a10 	vmov	s16, r0
 8015b14:	f000 fc84 	bl	8016420 <__mcmp>
 8015b18:	2800      	cmp	r0, #0
 8015b1a:	dc03      	bgt.n	8015b24 <_dtoa_r+0xa9c>
 8015b1c:	d1e0      	bne.n	8015ae0 <_dtoa_r+0xa58>
 8015b1e:	f01a 0f01 	tst.w	sl, #1
 8015b22:	d0dd      	beq.n	8015ae0 <_dtoa_r+0xa58>
 8015b24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015b28:	d1d7      	bne.n	8015ada <_dtoa_r+0xa52>
 8015b2a:	2339      	movs	r3, #57	; 0x39
 8015b2c:	f88b 3000 	strb.w	r3, [fp]
 8015b30:	462b      	mov	r3, r5
 8015b32:	461d      	mov	r5, r3
 8015b34:	3b01      	subs	r3, #1
 8015b36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015b3a:	2a39      	cmp	r2, #57	; 0x39
 8015b3c:	d071      	beq.n	8015c22 <_dtoa_r+0xb9a>
 8015b3e:	3201      	adds	r2, #1
 8015b40:	701a      	strb	r2, [r3, #0]
 8015b42:	e746      	b.n	80159d2 <_dtoa_r+0x94a>
 8015b44:	2a00      	cmp	r2, #0
 8015b46:	dd07      	ble.n	8015b58 <_dtoa_r+0xad0>
 8015b48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015b4c:	d0ed      	beq.n	8015b2a <_dtoa_r+0xaa2>
 8015b4e:	f10a 0301 	add.w	r3, sl, #1
 8015b52:	f88b 3000 	strb.w	r3, [fp]
 8015b56:	e73c      	b.n	80159d2 <_dtoa_r+0x94a>
 8015b58:	9b05      	ldr	r3, [sp, #20]
 8015b5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8015b5e:	4599      	cmp	r9, r3
 8015b60:	d047      	beq.n	8015bf2 <_dtoa_r+0xb6a>
 8015b62:	ee18 1a10 	vmov	r1, s16
 8015b66:	2300      	movs	r3, #0
 8015b68:	220a      	movs	r2, #10
 8015b6a:	4620      	mov	r0, r4
 8015b6c:	f000 fa38 	bl	8015fe0 <__multadd>
 8015b70:	45b8      	cmp	r8, r7
 8015b72:	ee08 0a10 	vmov	s16, r0
 8015b76:	f04f 0300 	mov.w	r3, #0
 8015b7a:	f04f 020a 	mov.w	r2, #10
 8015b7e:	4641      	mov	r1, r8
 8015b80:	4620      	mov	r0, r4
 8015b82:	d106      	bne.n	8015b92 <_dtoa_r+0xb0a>
 8015b84:	f000 fa2c 	bl	8015fe0 <__multadd>
 8015b88:	4680      	mov	r8, r0
 8015b8a:	4607      	mov	r7, r0
 8015b8c:	f109 0901 	add.w	r9, r9, #1
 8015b90:	e772      	b.n	8015a78 <_dtoa_r+0x9f0>
 8015b92:	f000 fa25 	bl	8015fe0 <__multadd>
 8015b96:	4639      	mov	r1, r7
 8015b98:	4680      	mov	r8, r0
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	220a      	movs	r2, #10
 8015b9e:	4620      	mov	r0, r4
 8015ba0:	f000 fa1e 	bl	8015fe0 <__multadd>
 8015ba4:	4607      	mov	r7, r0
 8015ba6:	e7f1      	b.n	8015b8c <_dtoa_r+0xb04>
 8015ba8:	9b03      	ldr	r3, [sp, #12]
 8015baa:	9302      	str	r3, [sp, #8]
 8015bac:	9d01      	ldr	r5, [sp, #4]
 8015bae:	ee18 0a10 	vmov	r0, s16
 8015bb2:	4631      	mov	r1, r6
 8015bb4:	f7ff f9da 	bl	8014f6c <quorem>
 8015bb8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015bbc:	9b01      	ldr	r3, [sp, #4]
 8015bbe:	f805 ab01 	strb.w	sl, [r5], #1
 8015bc2:	1aea      	subs	r2, r5, r3
 8015bc4:	9b02      	ldr	r3, [sp, #8]
 8015bc6:	4293      	cmp	r3, r2
 8015bc8:	dd09      	ble.n	8015bde <_dtoa_r+0xb56>
 8015bca:	ee18 1a10 	vmov	r1, s16
 8015bce:	2300      	movs	r3, #0
 8015bd0:	220a      	movs	r2, #10
 8015bd2:	4620      	mov	r0, r4
 8015bd4:	f000 fa04 	bl	8015fe0 <__multadd>
 8015bd8:	ee08 0a10 	vmov	s16, r0
 8015bdc:	e7e7      	b.n	8015bae <_dtoa_r+0xb26>
 8015bde:	9b02      	ldr	r3, [sp, #8]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	bfc8      	it	gt
 8015be4:	461d      	movgt	r5, r3
 8015be6:	9b01      	ldr	r3, [sp, #4]
 8015be8:	bfd8      	it	le
 8015bea:	2501      	movle	r5, #1
 8015bec:	441d      	add	r5, r3
 8015bee:	f04f 0800 	mov.w	r8, #0
 8015bf2:	ee18 1a10 	vmov	r1, s16
 8015bf6:	2201      	movs	r2, #1
 8015bf8:	4620      	mov	r0, r4
 8015bfa:	f000 fba1 	bl	8016340 <__lshift>
 8015bfe:	4631      	mov	r1, r6
 8015c00:	ee08 0a10 	vmov	s16, r0
 8015c04:	f000 fc0c 	bl	8016420 <__mcmp>
 8015c08:	2800      	cmp	r0, #0
 8015c0a:	dc91      	bgt.n	8015b30 <_dtoa_r+0xaa8>
 8015c0c:	d102      	bne.n	8015c14 <_dtoa_r+0xb8c>
 8015c0e:	f01a 0f01 	tst.w	sl, #1
 8015c12:	d18d      	bne.n	8015b30 <_dtoa_r+0xaa8>
 8015c14:	462b      	mov	r3, r5
 8015c16:	461d      	mov	r5, r3
 8015c18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015c1c:	2a30      	cmp	r2, #48	; 0x30
 8015c1e:	d0fa      	beq.n	8015c16 <_dtoa_r+0xb8e>
 8015c20:	e6d7      	b.n	80159d2 <_dtoa_r+0x94a>
 8015c22:	9a01      	ldr	r2, [sp, #4]
 8015c24:	429a      	cmp	r2, r3
 8015c26:	d184      	bne.n	8015b32 <_dtoa_r+0xaaa>
 8015c28:	9b00      	ldr	r3, [sp, #0]
 8015c2a:	3301      	adds	r3, #1
 8015c2c:	9300      	str	r3, [sp, #0]
 8015c2e:	2331      	movs	r3, #49	; 0x31
 8015c30:	7013      	strb	r3, [r2, #0]
 8015c32:	e6ce      	b.n	80159d2 <_dtoa_r+0x94a>
 8015c34:	4b09      	ldr	r3, [pc, #36]	; (8015c5c <_dtoa_r+0xbd4>)
 8015c36:	f7ff ba95 	b.w	8015164 <_dtoa_r+0xdc>
 8015c3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	f47f aa6e 	bne.w	801511e <_dtoa_r+0x96>
 8015c42:	4b07      	ldr	r3, [pc, #28]	; (8015c60 <_dtoa_r+0xbd8>)
 8015c44:	f7ff ba8e 	b.w	8015164 <_dtoa_r+0xdc>
 8015c48:	9b02      	ldr	r3, [sp, #8]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	dcae      	bgt.n	8015bac <_dtoa_r+0xb24>
 8015c4e:	9b06      	ldr	r3, [sp, #24]
 8015c50:	2b02      	cmp	r3, #2
 8015c52:	f73f aea8 	bgt.w	80159a6 <_dtoa_r+0x91e>
 8015c56:	e7a9      	b.n	8015bac <_dtoa_r+0xb24>
 8015c58:	080171e0 	.word	0x080171e0
 8015c5c:	0801703c 	.word	0x0801703c
 8015c60:	08017161 	.word	0x08017161

08015c64 <__sflush_r>:
 8015c64:	898a      	ldrh	r2, [r1, #12]
 8015c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c6a:	4605      	mov	r5, r0
 8015c6c:	0710      	lsls	r0, r2, #28
 8015c6e:	460c      	mov	r4, r1
 8015c70:	d458      	bmi.n	8015d24 <__sflush_r+0xc0>
 8015c72:	684b      	ldr	r3, [r1, #4]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	dc05      	bgt.n	8015c84 <__sflush_r+0x20>
 8015c78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	dc02      	bgt.n	8015c84 <__sflush_r+0x20>
 8015c7e:	2000      	movs	r0, #0
 8015c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015c86:	2e00      	cmp	r6, #0
 8015c88:	d0f9      	beq.n	8015c7e <__sflush_r+0x1a>
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015c90:	682f      	ldr	r7, [r5, #0]
 8015c92:	602b      	str	r3, [r5, #0]
 8015c94:	d032      	beq.n	8015cfc <__sflush_r+0x98>
 8015c96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015c98:	89a3      	ldrh	r3, [r4, #12]
 8015c9a:	075a      	lsls	r2, r3, #29
 8015c9c:	d505      	bpl.n	8015caa <__sflush_r+0x46>
 8015c9e:	6863      	ldr	r3, [r4, #4]
 8015ca0:	1ac0      	subs	r0, r0, r3
 8015ca2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015ca4:	b10b      	cbz	r3, 8015caa <__sflush_r+0x46>
 8015ca6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015ca8:	1ac0      	subs	r0, r0, r3
 8015caa:	2300      	movs	r3, #0
 8015cac:	4602      	mov	r2, r0
 8015cae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015cb0:	6a21      	ldr	r1, [r4, #32]
 8015cb2:	4628      	mov	r0, r5
 8015cb4:	47b0      	blx	r6
 8015cb6:	1c43      	adds	r3, r0, #1
 8015cb8:	89a3      	ldrh	r3, [r4, #12]
 8015cba:	d106      	bne.n	8015cca <__sflush_r+0x66>
 8015cbc:	6829      	ldr	r1, [r5, #0]
 8015cbe:	291d      	cmp	r1, #29
 8015cc0:	d82c      	bhi.n	8015d1c <__sflush_r+0xb8>
 8015cc2:	4a2a      	ldr	r2, [pc, #168]	; (8015d6c <__sflush_r+0x108>)
 8015cc4:	40ca      	lsrs	r2, r1
 8015cc6:	07d6      	lsls	r6, r2, #31
 8015cc8:	d528      	bpl.n	8015d1c <__sflush_r+0xb8>
 8015cca:	2200      	movs	r2, #0
 8015ccc:	6062      	str	r2, [r4, #4]
 8015cce:	04d9      	lsls	r1, r3, #19
 8015cd0:	6922      	ldr	r2, [r4, #16]
 8015cd2:	6022      	str	r2, [r4, #0]
 8015cd4:	d504      	bpl.n	8015ce0 <__sflush_r+0x7c>
 8015cd6:	1c42      	adds	r2, r0, #1
 8015cd8:	d101      	bne.n	8015cde <__sflush_r+0x7a>
 8015cda:	682b      	ldr	r3, [r5, #0]
 8015cdc:	b903      	cbnz	r3, 8015ce0 <__sflush_r+0x7c>
 8015cde:	6560      	str	r0, [r4, #84]	; 0x54
 8015ce0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015ce2:	602f      	str	r7, [r5, #0]
 8015ce4:	2900      	cmp	r1, #0
 8015ce6:	d0ca      	beq.n	8015c7e <__sflush_r+0x1a>
 8015ce8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015cec:	4299      	cmp	r1, r3
 8015cee:	d002      	beq.n	8015cf6 <__sflush_r+0x92>
 8015cf0:	4628      	mov	r0, r5
 8015cf2:	f7fe f9ab 	bl	801404c <_free_r>
 8015cf6:	2000      	movs	r0, #0
 8015cf8:	6360      	str	r0, [r4, #52]	; 0x34
 8015cfa:	e7c1      	b.n	8015c80 <__sflush_r+0x1c>
 8015cfc:	6a21      	ldr	r1, [r4, #32]
 8015cfe:	2301      	movs	r3, #1
 8015d00:	4628      	mov	r0, r5
 8015d02:	47b0      	blx	r6
 8015d04:	1c41      	adds	r1, r0, #1
 8015d06:	d1c7      	bne.n	8015c98 <__sflush_r+0x34>
 8015d08:	682b      	ldr	r3, [r5, #0]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d0c4      	beq.n	8015c98 <__sflush_r+0x34>
 8015d0e:	2b1d      	cmp	r3, #29
 8015d10:	d001      	beq.n	8015d16 <__sflush_r+0xb2>
 8015d12:	2b16      	cmp	r3, #22
 8015d14:	d101      	bne.n	8015d1a <__sflush_r+0xb6>
 8015d16:	602f      	str	r7, [r5, #0]
 8015d18:	e7b1      	b.n	8015c7e <__sflush_r+0x1a>
 8015d1a:	89a3      	ldrh	r3, [r4, #12]
 8015d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d20:	81a3      	strh	r3, [r4, #12]
 8015d22:	e7ad      	b.n	8015c80 <__sflush_r+0x1c>
 8015d24:	690f      	ldr	r7, [r1, #16]
 8015d26:	2f00      	cmp	r7, #0
 8015d28:	d0a9      	beq.n	8015c7e <__sflush_r+0x1a>
 8015d2a:	0793      	lsls	r3, r2, #30
 8015d2c:	680e      	ldr	r6, [r1, #0]
 8015d2e:	bf08      	it	eq
 8015d30:	694b      	ldreq	r3, [r1, #20]
 8015d32:	600f      	str	r7, [r1, #0]
 8015d34:	bf18      	it	ne
 8015d36:	2300      	movne	r3, #0
 8015d38:	eba6 0807 	sub.w	r8, r6, r7
 8015d3c:	608b      	str	r3, [r1, #8]
 8015d3e:	f1b8 0f00 	cmp.w	r8, #0
 8015d42:	dd9c      	ble.n	8015c7e <__sflush_r+0x1a>
 8015d44:	6a21      	ldr	r1, [r4, #32]
 8015d46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015d48:	4643      	mov	r3, r8
 8015d4a:	463a      	mov	r2, r7
 8015d4c:	4628      	mov	r0, r5
 8015d4e:	47b0      	blx	r6
 8015d50:	2800      	cmp	r0, #0
 8015d52:	dc06      	bgt.n	8015d62 <__sflush_r+0xfe>
 8015d54:	89a3      	ldrh	r3, [r4, #12]
 8015d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d5a:	81a3      	strh	r3, [r4, #12]
 8015d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8015d60:	e78e      	b.n	8015c80 <__sflush_r+0x1c>
 8015d62:	4407      	add	r7, r0
 8015d64:	eba8 0800 	sub.w	r8, r8, r0
 8015d68:	e7e9      	b.n	8015d3e <__sflush_r+0xda>
 8015d6a:	bf00      	nop
 8015d6c:	20400001 	.word	0x20400001

08015d70 <_fflush_r>:
 8015d70:	b538      	push	{r3, r4, r5, lr}
 8015d72:	690b      	ldr	r3, [r1, #16]
 8015d74:	4605      	mov	r5, r0
 8015d76:	460c      	mov	r4, r1
 8015d78:	b913      	cbnz	r3, 8015d80 <_fflush_r+0x10>
 8015d7a:	2500      	movs	r5, #0
 8015d7c:	4628      	mov	r0, r5
 8015d7e:	bd38      	pop	{r3, r4, r5, pc}
 8015d80:	b118      	cbz	r0, 8015d8a <_fflush_r+0x1a>
 8015d82:	6983      	ldr	r3, [r0, #24]
 8015d84:	b90b      	cbnz	r3, 8015d8a <_fflush_r+0x1a>
 8015d86:	f7fe f881 	bl	8013e8c <__sinit>
 8015d8a:	4b14      	ldr	r3, [pc, #80]	; (8015ddc <_fflush_r+0x6c>)
 8015d8c:	429c      	cmp	r4, r3
 8015d8e:	d11b      	bne.n	8015dc8 <_fflush_r+0x58>
 8015d90:	686c      	ldr	r4, [r5, #4]
 8015d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d0ef      	beq.n	8015d7a <_fflush_r+0xa>
 8015d9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015d9c:	07d0      	lsls	r0, r2, #31
 8015d9e:	d404      	bmi.n	8015daa <_fflush_r+0x3a>
 8015da0:	0599      	lsls	r1, r3, #22
 8015da2:	d402      	bmi.n	8015daa <_fflush_r+0x3a>
 8015da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015da6:	f7ed fe59 	bl	8003a5c <__retarget_lock_acquire_recursive>
 8015daa:	4628      	mov	r0, r5
 8015dac:	4621      	mov	r1, r4
 8015dae:	f7ff ff59 	bl	8015c64 <__sflush_r>
 8015db2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015db4:	07da      	lsls	r2, r3, #31
 8015db6:	4605      	mov	r5, r0
 8015db8:	d4e0      	bmi.n	8015d7c <_fflush_r+0xc>
 8015dba:	89a3      	ldrh	r3, [r4, #12]
 8015dbc:	059b      	lsls	r3, r3, #22
 8015dbe:	d4dd      	bmi.n	8015d7c <_fflush_r+0xc>
 8015dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015dc2:	f7ed fe5f 	bl	8003a84 <__retarget_lock_release_recursive>
 8015dc6:	e7d9      	b.n	8015d7c <_fflush_r+0xc>
 8015dc8:	4b05      	ldr	r3, [pc, #20]	; (8015de0 <_fflush_r+0x70>)
 8015dca:	429c      	cmp	r4, r3
 8015dcc:	d101      	bne.n	8015dd2 <_fflush_r+0x62>
 8015dce:	68ac      	ldr	r4, [r5, #8]
 8015dd0:	e7df      	b.n	8015d92 <_fflush_r+0x22>
 8015dd2:	4b04      	ldr	r3, [pc, #16]	; (8015de4 <_fflush_r+0x74>)
 8015dd4:	429c      	cmp	r4, r3
 8015dd6:	bf08      	it	eq
 8015dd8:	68ec      	ldreq	r4, [r5, #12]
 8015dda:	e7da      	b.n	8015d92 <_fflush_r+0x22>
 8015ddc:	08016fe8 	.word	0x08016fe8
 8015de0:	08017008 	.word	0x08017008
 8015de4:	08016fc8 	.word	0x08016fc8

08015de8 <_localeconv_r>:
 8015de8:	4800      	ldr	r0, [pc, #0]	; (8015dec <_localeconv_r+0x4>)
 8015dea:	4770      	bx	lr
 8015dec:	20000278 	.word	0x20000278

08015df0 <_lseek_r>:
 8015df0:	b538      	push	{r3, r4, r5, lr}
 8015df2:	4d07      	ldr	r5, [pc, #28]	; (8015e10 <_lseek_r+0x20>)
 8015df4:	4604      	mov	r4, r0
 8015df6:	4608      	mov	r0, r1
 8015df8:	4611      	mov	r1, r2
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	602a      	str	r2, [r5, #0]
 8015dfe:	461a      	mov	r2, r3
 8015e00:	f7ed f9be 	bl	8003180 <_lseek>
 8015e04:	1c43      	adds	r3, r0, #1
 8015e06:	d102      	bne.n	8015e0e <_lseek_r+0x1e>
 8015e08:	682b      	ldr	r3, [r5, #0]
 8015e0a:	b103      	cbz	r3, 8015e0e <_lseek_r+0x1e>
 8015e0c:	6023      	str	r3, [r4, #0]
 8015e0e:	bd38      	pop	{r3, r4, r5, pc}
 8015e10:	20006fa4 	.word	0x20006fa4

08015e14 <__swhatbuf_r>:
 8015e14:	b570      	push	{r4, r5, r6, lr}
 8015e16:	460e      	mov	r6, r1
 8015e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e1c:	2900      	cmp	r1, #0
 8015e1e:	b096      	sub	sp, #88	; 0x58
 8015e20:	4614      	mov	r4, r2
 8015e22:	461d      	mov	r5, r3
 8015e24:	da08      	bge.n	8015e38 <__swhatbuf_r+0x24>
 8015e26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015e2a:	2200      	movs	r2, #0
 8015e2c:	602a      	str	r2, [r5, #0]
 8015e2e:	061a      	lsls	r2, r3, #24
 8015e30:	d410      	bmi.n	8015e54 <__swhatbuf_r+0x40>
 8015e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015e36:	e00e      	b.n	8015e56 <__swhatbuf_r+0x42>
 8015e38:	466a      	mov	r2, sp
 8015e3a:	f000 fdb3 	bl	80169a4 <_fstat_r>
 8015e3e:	2800      	cmp	r0, #0
 8015e40:	dbf1      	blt.n	8015e26 <__swhatbuf_r+0x12>
 8015e42:	9a01      	ldr	r2, [sp, #4]
 8015e44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015e48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015e4c:	425a      	negs	r2, r3
 8015e4e:	415a      	adcs	r2, r3
 8015e50:	602a      	str	r2, [r5, #0]
 8015e52:	e7ee      	b.n	8015e32 <__swhatbuf_r+0x1e>
 8015e54:	2340      	movs	r3, #64	; 0x40
 8015e56:	2000      	movs	r0, #0
 8015e58:	6023      	str	r3, [r4, #0]
 8015e5a:	b016      	add	sp, #88	; 0x58
 8015e5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08015e60 <__smakebuf_r>:
 8015e60:	898b      	ldrh	r3, [r1, #12]
 8015e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015e64:	079d      	lsls	r5, r3, #30
 8015e66:	4606      	mov	r6, r0
 8015e68:	460c      	mov	r4, r1
 8015e6a:	d507      	bpl.n	8015e7c <__smakebuf_r+0x1c>
 8015e6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015e70:	6023      	str	r3, [r4, #0]
 8015e72:	6123      	str	r3, [r4, #16]
 8015e74:	2301      	movs	r3, #1
 8015e76:	6163      	str	r3, [r4, #20]
 8015e78:	b002      	add	sp, #8
 8015e7a:	bd70      	pop	{r4, r5, r6, pc}
 8015e7c:	ab01      	add	r3, sp, #4
 8015e7e:	466a      	mov	r2, sp
 8015e80:	f7ff ffc8 	bl	8015e14 <__swhatbuf_r>
 8015e84:	9900      	ldr	r1, [sp, #0]
 8015e86:	4605      	mov	r5, r0
 8015e88:	4630      	mov	r0, r6
 8015e8a:	f7fe f94b 	bl	8014124 <_malloc_r>
 8015e8e:	b948      	cbnz	r0, 8015ea4 <__smakebuf_r+0x44>
 8015e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e94:	059a      	lsls	r2, r3, #22
 8015e96:	d4ef      	bmi.n	8015e78 <__smakebuf_r+0x18>
 8015e98:	f023 0303 	bic.w	r3, r3, #3
 8015e9c:	f043 0302 	orr.w	r3, r3, #2
 8015ea0:	81a3      	strh	r3, [r4, #12]
 8015ea2:	e7e3      	b.n	8015e6c <__smakebuf_r+0xc>
 8015ea4:	4b0d      	ldr	r3, [pc, #52]	; (8015edc <__smakebuf_r+0x7c>)
 8015ea6:	62b3      	str	r3, [r6, #40]	; 0x28
 8015ea8:	89a3      	ldrh	r3, [r4, #12]
 8015eaa:	6020      	str	r0, [r4, #0]
 8015eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015eb0:	81a3      	strh	r3, [r4, #12]
 8015eb2:	9b00      	ldr	r3, [sp, #0]
 8015eb4:	6163      	str	r3, [r4, #20]
 8015eb6:	9b01      	ldr	r3, [sp, #4]
 8015eb8:	6120      	str	r0, [r4, #16]
 8015eba:	b15b      	cbz	r3, 8015ed4 <__smakebuf_r+0x74>
 8015ebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015ec0:	4630      	mov	r0, r6
 8015ec2:	f000 fd81 	bl	80169c8 <_isatty_r>
 8015ec6:	b128      	cbz	r0, 8015ed4 <__smakebuf_r+0x74>
 8015ec8:	89a3      	ldrh	r3, [r4, #12]
 8015eca:	f023 0303 	bic.w	r3, r3, #3
 8015ece:	f043 0301 	orr.w	r3, r3, #1
 8015ed2:	81a3      	strh	r3, [r4, #12]
 8015ed4:	89a0      	ldrh	r0, [r4, #12]
 8015ed6:	4305      	orrs	r5, r0
 8015ed8:	81a5      	strh	r5, [r4, #12]
 8015eda:	e7cd      	b.n	8015e78 <__smakebuf_r+0x18>
 8015edc:	08013e25 	.word	0x08013e25

08015ee0 <__ascii_mbtowc>:
 8015ee0:	b082      	sub	sp, #8
 8015ee2:	b901      	cbnz	r1, 8015ee6 <__ascii_mbtowc+0x6>
 8015ee4:	a901      	add	r1, sp, #4
 8015ee6:	b142      	cbz	r2, 8015efa <__ascii_mbtowc+0x1a>
 8015ee8:	b14b      	cbz	r3, 8015efe <__ascii_mbtowc+0x1e>
 8015eea:	7813      	ldrb	r3, [r2, #0]
 8015eec:	600b      	str	r3, [r1, #0]
 8015eee:	7812      	ldrb	r2, [r2, #0]
 8015ef0:	1e10      	subs	r0, r2, #0
 8015ef2:	bf18      	it	ne
 8015ef4:	2001      	movne	r0, #1
 8015ef6:	b002      	add	sp, #8
 8015ef8:	4770      	bx	lr
 8015efa:	4610      	mov	r0, r2
 8015efc:	e7fb      	b.n	8015ef6 <__ascii_mbtowc+0x16>
 8015efe:	f06f 0001 	mvn.w	r0, #1
 8015f02:	e7f8      	b.n	8015ef6 <__ascii_mbtowc+0x16>

08015f04 <__malloc_lock>:
 8015f04:	4801      	ldr	r0, [pc, #4]	; (8015f0c <__malloc_lock+0x8>)
 8015f06:	f7ed bda9 	b.w	8003a5c <__retarget_lock_acquire_recursive>
 8015f0a:	bf00      	nop
 8015f0c:	200006f4 	.word	0x200006f4

08015f10 <__malloc_unlock>:
 8015f10:	4801      	ldr	r0, [pc, #4]	; (8015f18 <__malloc_unlock+0x8>)
 8015f12:	f7ed bdb7 	b.w	8003a84 <__retarget_lock_release_recursive>
 8015f16:	bf00      	nop
 8015f18:	200006f4 	.word	0x200006f4

08015f1c <_Balloc>:
 8015f1c:	b570      	push	{r4, r5, r6, lr}
 8015f1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015f20:	4604      	mov	r4, r0
 8015f22:	460d      	mov	r5, r1
 8015f24:	b976      	cbnz	r6, 8015f44 <_Balloc+0x28>
 8015f26:	2010      	movs	r0, #16
 8015f28:	f7fe f872 	bl	8014010 <malloc>
 8015f2c:	4602      	mov	r2, r0
 8015f2e:	6260      	str	r0, [r4, #36]	; 0x24
 8015f30:	b920      	cbnz	r0, 8015f3c <_Balloc+0x20>
 8015f32:	4b18      	ldr	r3, [pc, #96]	; (8015f94 <_Balloc+0x78>)
 8015f34:	4818      	ldr	r0, [pc, #96]	; (8015f98 <_Balloc+0x7c>)
 8015f36:	2166      	movs	r1, #102	; 0x66
 8015f38:	f000 fd04 	bl	8016944 <__assert_func>
 8015f3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015f40:	6006      	str	r6, [r0, #0]
 8015f42:	60c6      	str	r6, [r0, #12]
 8015f44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015f46:	68f3      	ldr	r3, [r6, #12]
 8015f48:	b183      	cbz	r3, 8015f6c <_Balloc+0x50>
 8015f4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015f4c:	68db      	ldr	r3, [r3, #12]
 8015f4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015f52:	b9b8      	cbnz	r0, 8015f84 <_Balloc+0x68>
 8015f54:	2101      	movs	r1, #1
 8015f56:	fa01 f605 	lsl.w	r6, r1, r5
 8015f5a:	1d72      	adds	r2, r6, #5
 8015f5c:	0092      	lsls	r2, r2, #2
 8015f5e:	4620      	mov	r0, r4
 8015f60:	f000 fb60 	bl	8016624 <_calloc_r>
 8015f64:	b160      	cbz	r0, 8015f80 <_Balloc+0x64>
 8015f66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015f6a:	e00e      	b.n	8015f8a <_Balloc+0x6e>
 8015f6c:	2221      	movs	r2, #33	; 0x21
 8015f6e:	2104      	movs	r1, #4
 8015f70:	4620      	mov	r0, r4
 8015f72:	f000 fb57 	bl	8016624 <_calloc_r>
 8015f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015f78:	60f0      	str	r0, [r6, #12]
 8015f7a:	68db      	ldr	r3, [r3, #12]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d1e4      	bne.n	8015f4a <_Balloc+0x2e>
 8015f80:	2000      	movs	r0, #0
 8015f82:	bd70      	pop	{r4, r5, r6, pc}
 8015f84:	6802      	ldr	r2, [r0, #0]
 8015f86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015f90:	e7f7      	b.n	8015f82 <_Balloc+0x66>
 8015f92:	bf00      	nop
 8015f94:	0801716e 	.word	0x0801716e
 8015f98:	080171fb 	.word	0x080171fb

08015f9c <_Bfree>:
 8015f9c:	b570      	push	{r4, r5, r6, lr}
 8015f9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015fa0:	4605      	mov	r5, r0
 8015fa2:	460c      	mov	r4, r1
 8015fa4:	b976      	cbnz	r6, 8015fc4 <_Bfree+0x28>
 8015fa6:	2010      	movs	r0, #16
 8015fa8:	f7fe f832 	bl	8014010 <malloc>
 8015fac:	4602      	mov	r2, r0
 8015fae:	6268      	str	r0, [r5, #36]	; 0x24
 8015fb0:	b920      	cbnz	r0, 8015fbc <_Bfree+0x20>
 8015fb2:	4b09      	ldr	r3, [pc, #36]	; (8015fd8 <_Bfree+0x3c>)
 8015fb4:	4809      	ldr	r0, [pc, #36]	; (8015fdc <_Bfree+0x40>)
 8015fb6:	218a      	movs	r1, #138	; 0x8a
 8015fb8:	f000 fcc4 	bl	8016944 <__assert_func>
 8015fbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015fc0:	6006      	str	r6, [r0, #0]
 8015fc2:	60c6      	str	r6, [r0, #12]
 8015fc4:	b13c      	cbz	r4, 8015fd6 <_Bfree+0x3a>
 8015fc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015fc8:	6862      	ldr	r2, [r4, #4]
 8015fca:	68db      	ldr	r3, [r3, #12]
 8015fcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015fd0:	6021      	str	r1, [r4, #0]
 8015fd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015fd6:	bd70      	pop	{r4, r5, r6, pc}
 8015fd8:	0801716e 	.word	0x0801716e
 8015fdc:	080171fb 	.word	0x080171fb

08015fe0 <__multadd>:
 8015fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fe4:	690d      	ldr	r5, [r1, #16]
 8015fe6:	4607      	mov	r7, r0
 8015fe8:	460c      	mov	r4, r1
 8015fea:	461e      	mov	r6, r3
 8015fec:	f101 0c14 	add.w	ip, r1, #20
 8015ff0:	2000      	movs	r0, #0
 8015ff2:	f8dc 3000 	ldr.w	r3, [ip]
 8015ff6:	b299      	uxth	r1, r3
 8015ff8:	fb02 6101 	mla	r1, r2, r1, r6
 8015ffc:	0c1e      	lsrs	r6, r3, #16
 8015ffe:	0c0b      	lsrs	r3, r1, #16
 8016000:	fb02 3306 	mla	r3, r2, r6, r3
 8016004:	b289      	uxth	r1, r1
 8016006:	3001      	adds	r0, #1
 8016008:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801600c:	4285      	cmp	r5, r0
 801600e:	f84c 1b04 	str.w	r1, [ip], #4
 8016012:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016016:	dcec      	bgt.n	8015ff2 <__multadd+0x12>
 8016018:	b30e      	cbz	r6, 801605e <__multadd+0x7e>
 801601a:	68a3      	ldr	r3, [r4, #8]
 801601c:	42ab      	cmp	r3, r5
 801601e:	dc19      	bgt.n	8016054 <__multadd+0x74>
 8016020:	6861      	ldr	r1, [r4, #4]
 8016022:	4638      	mov	r0, r7
 8016024:	3101      	adds	r1, #1
 8016026:	f7ff ff79 	bl	8015f1c <_Balloc>
 801602a:	4680      	mov	r8, r0
 801602c:	b928      	cbnz	r0, 801603a <__multadd+0x5a>
 801602e:	4602      	mov	r2, r0
 8016030:	4b0c      	ldr	r3, [pc, #48]	; (8016064 <__multadd+0x84>)
 8016032:	480d      	ldr	r0, [pc, #52]	; (8016068 <__multadd+0x88>)
 8016034:	21b5      	movs	r1, #181	; 0xb5
 8016036:	f000 fc85 	bl	8016944 <__assert_func>
 801603a:	6922      	ldr	r2, [r4, #16]
 801603c:	3202      	adds	r2, #2
 801603e:	f104 010c 	add.w	r1, r4, #12
 8016042:	0092      	lsls	r2, r2, #2
 8016044:	300c      	adds	r0, #12
 8016046:	f7fd ffeb 	bl	8014020 <memcpy>
 801604a:	4621      	mov	r1, r4
 801604c:	4638      	mov	r0, r7
 801604e:	f7ff ffa5 	bl	8015f9c <_Bfree>
 8016052:	4644      	mov	r4, r8
 8016054:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016058:	3501      	adds	r5, #1
 801605a:	615e      	str	r6, [r3, #20]
 801605c:	6125      	str	r5, [r4, #16]
 801605e:	4620      	mov	r0, r4
 8016060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016064:	080171e0 	.word	0x080171e0
 8016068:	080171fb 	.word	0x080171fb

0801606c <__hi0bits>:
 801606c:	0c03      	lsrs	r3, r0, #16
 801606e:	041b      	lsls	r3, r3, #16
 8016070:	b9d3      	cbnz	r3, 80160a8 <__hi0bits+0x3c>
 8016072:	0400      	lsls	r0, r0, #16
 8016074:	2310      	movs	r3, #16
 8016076:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801607a:	bf04      	itt	eq
 801607c:	0200      	lsleq	r0, r0, #8
 801607e:	3308      	addeq	r3, #8
 8016080:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016084:	bf04      	itt	eq
 8016086:	0100      	lsleq	r0, r0, #4
 8016088:	3304      	addeq	r3, #4
 801608a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801608e:	bf04      	itt	eq
 8016090:	0080      	lsleq	r0, r0, #2
 8016092:	3302      	addeq	r3, #2
 8016094:	2800      	cmp	r0, #0
 8016096:	db05      	blt.n	80160a4 <__hi0bits+0x38>
 8016098:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801609c:	f103 0301 	add.w	r3, r3, #1
 80160a0:	bf08      	it	eq
 80160a2:	2320      	moveq	r3, #32
 80160a4:	4618      	mov	r0, r3
 80160a6:	4770      	bx	lr
 80160a8:	2300      	movs	r3, #0
 80160aa:	e7e4      	b.n	8016076 <__hi0bits+0xa>

080160ac <__lo0bits>:
 80160ac:	6803      	ldr	r3, [r0, #0]
 80160ae:	f013 0207 	ands.w	r2, r3, #7
 80160b2:	4601      	mov	r1, r0
 80160b4:	d00b      	beq.n	80160ce <__lo0bits+0x22>
 80160b6:	07da      	lsls	r2, r3, #31
 80160b8:	d423      	bmi.n	8016102 <__lo0bits+0x56>
 80160ba:	0798      	lsls	r0, r3, #30
 80160bc:	bf49      	itett	mi
 80160be:	085b      	lsrmi	r3, r3, #1
 80160c0:	089b      	lsrpl	r3, r3, #2
 80160c2:	2001      	movmi	r0, #1
 80160c4:	600b      	strmi	r3, [r1, #0]
 80160c6:	bf5c      	itt	pl
 80160c8:	600b      	strpl	r3, [r1, #0]
 80160ca:	2002      	movpl	r0, #2
 80160cc:	4770      	bx	lr
 80160ce:	b298      	uxth	r0, r3
 80160d0:	b9a8      	cbnz	r0, 80160fe <__lo0bits+0x52>
 80160d2:	0c1b      	lsrs	r3, r3, #16
 80160d4:	2010      	movs	r0, #16
 80160d6:	b2da      	uxtb	r2, r3
 80160d8:	b90a      	cbnz	r2, 80160de <__lo0bits+0x32>
 80160da:	3008      	adds	r0, #8
 80160dc:	0a1b      	lsrs	r3, r3, #8
 80160de:	071a      	lsls	r2, r3, #28
 80160e0:	bf04      	itt	eq
 80160e2:	091b      	lsreq	r3, r3, #4
 80160e4:	3004      	addeq	r0, #4
 80160e6:	079a      	lsls	r2, r3, #30
 80160e8:	bf04      	itt	eq
 80160ea:	089b      	lsreq	r3, r3, #2
 80160ec:	3002      	addeq	r0, #2
 80160ee:	07da      	lsls	r2, r3, #31
 80160f0:	d403      	bmi.n	80160fa <__lo0bits+0x4e>
 80160f2:	085b      	lsrs	r3, r3, #1
 80160f4:	f100 0001 	add.w	r0, r0, #1
 80160f8:	d005      	beq.n	8016106 <__lo0bits+0x5a>
 80160fa:	600b      	str	r3, [r1, #0]
 80160fc:	4770      	bx	lr
 80160fe:	4610      	mov	r0, r2
 8016100:	e7e9      	b.n	80160d6 <__lo0bits+0x2a>
 8016102:	2000      	movs	r0, #0
 8016104:	4770      	bx	lr
 8016106:	2020      	movs	r0, #32
 8016108:	4770      	bx	lr
	...

0801610c <__i2b>:
 801610c:	b510      	push	{r4, lr}
 801610e:	460c      	mov	r4, r1
 8016110:	2101      	movs	r1, #1
 8016112:	f7ff ff03 	bl	8015f1c <_Balloc>
 8016116:	4602      	mov	r2, r0
 8016118:	b928      	cbnz	r0, 8016126 <__i2b+0x1a>
 801611a:	4b05      	ldr	r3, [pc, #20]	; (8016130 <__i2b+0x24>)
 801611c:	4805      	ldr	r0, [pc, #20]	; (8016134 <__i2b+0x28>)
 801611e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016122:	f000 fc0f 	bl	8016944 <__assert_func>
 8016126:	2301      	movs	r3, #1
 8016128:	6144      	str	r4, [r0, #20]
 801612a:	6103      	str	r3, [r0, #16]
 801612c:	bd10      	pop	{r4, pc}
 801612e:	bf00      	nop
 8016130:	080171e0 	.word	0x080171e0
 8016134:	080171fb 	.word	0x080171fb

08016138 <__multiply>:
 8016138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801613c:	4691      	mov	r9, r2
 801613e:	690a      	ldr	r2, [r1, #16]
 8016140:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016144:	429a      	cmp	r2, r3
 8016146:	bfb8      	it	lt
 8016148:	460b      	movlt	r3, r1
 801614a:	460c      	mov	r4, r1
 801614c:	bfbc      	itt	lt
 801614e:	464c      	movlt	r4, r9
 8016150:	4699      	movlt	r9, r3
 8016152:	6927      	ldr	r7, [r4, #16]
 8016154:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016158:	68a3      	ldr	r3, [r4, #8]
 801615a:	6861      	ldr	r1, [r4, #4]
 801615c:	eb07 060a 	add.w	r6, r7, sl
 8016160:	42b3      	cmp	r3, r6
 8016162:	b085      	sub	sp, #20
 8016164:	bfb8      	it	lt
 8016166:	3101      	addlt	r1, #1
 8016168:	f7ff fed8 	bl	8015f1c <_Balloc>
 801616c:	b930      	cbnz	r0, 801617c <__multiply+0x44>
 801616e:	4602      	mov	r2, r0
 8016170:	4b44      	ldr	r3, [pc, #272]	; (8016284 <__multiply+0x14c>)
 8016172:	4845      	ldr	r0, [pc, #276]	; (8016288 <__multiply+0x150>)
 8016174:	f240 115d 	movw	r1, #349	; 0x15d
 8016178:	f000 fbe4 	bl	8016944 <__assert_func>
 801617c:	f100 0514 	add.w	r5, r0, #20
 8016180:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016184:	462b      	mov	r3, r5
 8016186:	2200      	movs	r2, #0
 8016188:	4543      	cmp	r3, r8
 801618a:	d321      	bcc.n	80161d0 <__multiply+0x98>
 801618c:	f104 0314 	add.w	r3, r4, #20
 8016190:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016194:	f109 0314 	add.w	r3, r9, #20
 8016198:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801619c:	9202      	str	r2, [sp, #8]
 801619e:	1b3a      	subs	r2, r7, r4
 80161a0:	3a15      	subs	r2, #21
 80161a2:	f022 0203 	bic.w	r2, r2, #3
 80161a6:	3204      	adds	r2, #4
 80161a8:	f104 0115 	add.w	r1, r4, #21
 80161ac:	428f      	cmp	r7, r1
 80161ae:	bf38      	it	cc
 80161b0:	2204      	movcc	r2, #4
 80161b2:	9201      	str	r2, [sp, #4]
 80161b4:	9a02      	ldr	r2, [sp, #8]
 80161b6:	9303      	str	r3, [sp, #12]
 80161b8:	429a      	cmp	r2, r3
 80161ba:	d80c      	bhi.n	80161d6 <__multiply+0x9e>
 80161bc:	2e00      	cmp	r6, #0
 80161be:	dd03      	ble.n	80161c8 <__multiply+0x90>
 80161c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d05a      	beq.n	801627e <__multiply+0x146>
 80161c8:	6106      	str	r6, [r0, #16]
 80161ca:	b005      	add	sp, #20
 80161cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161d0:	f843 2b04 	str.w	r2, [r3], #4
 80161d4:	e7d8      	b.n	8016188 <__multiply+0x50>
 80161d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80161da:	f1ba 0f00 	cmp.w	sl, #0
 80161de:	d024      	beq.n	801622a <__multiply+0xf2>
 80161e0:	f104 0e14 	add.w	lr, r4, #20
 80161e4:	46a9      	mov	r9, r5
 80161e6:	f04f 0c00 	mov.w	ip, #0
 80161ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80161ee:	f8d9 1000 	ldr.w	r1, [r9]
 80161f2:	fa1f fb82 	uxth.w	fp, r2
 80161f6:	b289      	uxth	r1, r1
 80161f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80161fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016200:	f8d9 2000 	ldr.w	r2, [r9]
 8016204:	4461      	add	r1, ip
 8016206:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801620a:	fb0a c20b 	mla	r2, sl, fp, ip
 801620e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016212:	b289      	uxth	r1, r1
 8016214:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016218:	4577      	cmp	r7, lr
 801621a:	f849 1b04 	str.w	r1, [r9], #4
 801621e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016222:	d8e2      	bhi.n	80161ea <__multiply+0xb2>
 8016224:	9a01      	ldr	r2, [sp, #4]
 8016226:	f845 c002 	str.w	ip, [r5, r2]
 801622a:	9a03      	ldr	r2, [sp, #12]
 801622c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016230:	3304      	adds	r3, #4
 8016232:	f1b9 0f00 	cmp.w	r9, #0
 8016236:	d020      	beq.n	801627a <__multiply+0x142>
 8016238:	6829      	ldr	r1, [r5, #0]
 801623a:	f104 0c14 	add.w	ip, r4, #20
 801623e:	46ae      	mov	lr, r5
 8016240:	f04f 0a00 	mov.w	sl, #0
 8016244:	f8bc b000 	ldrh.w	fp, [ip]
 8016248:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801624c:	fb09 220b 	mla	r2, r9, fp, r2
 8016250:	4492      	add	sl, r2
 8016252:	b289      	uxth	r1, r1
 8016254:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8016258:	f84e 1b04 	str.w	r1, [lr], #4
 801625c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016260:	f8be 1000 	ldrh.w	r1, [lr]
 8016264:	0c12      	lsrs	r2, r2, #16
 8016266:	fb09 1102 	mla	r1, r9, r2, r1
 801626a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801626e:	4567      	cmp	r7, ip
 8016270:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016274:	d8e6      	bhi.n	8016244 <__multiply+0x10c>
 8016276:	9a01      	ldr	r2, [sp, #4]
 8016278:	50a9      	str	r1, [r5, r2]
 801627a:	3504      	adds	r5, #4
 801627c:	e79a      	b.n	80161b4 <__multiply+0x7c>
 801627e:	3e01      	subs	r6, #1
 8016280:	e79c      	b.n	80161bc <__multiply+0x84>
 8016282:	bf00      	nop
 8016284:	080171e0 	.word	0x080171e0
 8016288:	080171fb 	.word	0x080171fb

0801628c <__pow5mult>:
 801628c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016290:	4615      	mov	r5, r2
 8016292:	f012 0203 	ands.w	r2, r2, #3
 8016296:	4606      	mov	r6, r0
 8016298:	460f      	mov	r7, r1
 801629a:	d007      	beq.n	80162ac <__pow5mult+0x20>
 801629c:	4c25      	ldr	r4, [pc, #148]	; (8016334 <__pow5mult+0xa8>)
 801629e:	3a01      	subs	r2, #1
 80162a0:	2300      	movs	r3, #0
 80162a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80162a6:	f7ff fe9b 	bl	8015fe0 <__multadd>
 80162aa:	4607      	mov	r7, r0
 80162ac:	10ad      	asrs	r5, r5, #2
 80162ae:	d03d      	beq.n	801632c <__pow5mult+0xa0>
 80162b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80162b2:	b97c      	cbnz	r4, 80162d4 <__pow5mult+0x48>
 80162b4:	2010      	movs	r0, #16
 80162b6:	f7fd feab 	bl	8014010 <malloc>
 80162ba:	4602      	mov	r2, r0
 80162bc:	6270      	str	r0, [r6, #36]	; 0x24
 80162be:	b928      	cbnz	r0, 80162cc <__pow5mult+0x40>
 80162c0:	4b1d      	ldr	r3, [pc, #116]	; (8016338 <__pow5mult+0xac>)
 80162c2:	481e      	ldr	r0, [pc, #120]	; (801633c <__pow5mult+0xb0>)
 80162c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80162c8:	f000 fb3c 	bl	8016944 <__assert_func>
 80162cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80162d0:	6004      	str	r4, [r0, #0]
 80162d2:	60c4      	str	r4, [r0, #12]
 80162d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80162d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80162dc:	b94c      	cbnz	r4, 80162f2 <__pow5mult+0x66>
 80162de:	f240 2171 	movw	r1, #625	; 0x271
 80162e2:	4630      	mov	r0, r6
 80162e4:	f7ff ff12 	bl	801610c <__i2b>
 80162e8:	2300      	movs	r3, #0
 80162ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80162ee:	4604      	mov	r4, r0
 80162f0:	6003      	str	r3, [r0, #0]
 80162f2:	f04f 0900 	mov.w	r9, #0
 80162f6:	07eb      	lsls	r3, r5, #31
 80162f8:	d50a      	bpl.n	8016310 <__pow5mult+0x84>
 80162fa:	4639      	mov	r1, r7
 80162fc:	4622      	mov	r2, r4
 80162fe:	4630      	mov	r0, r6
 8016300:	f7ff ff1a 	bl	8016138 <__multiply>
 8016304:	4639      	mov	r1, r7
 8016306:	4680      	mov	r8, r0
 8016308:	4630      	mov	r0, r6
 801630a:	f7ff fe47 	bl	8015f9c <_Bfree>
 801630e:	4647      	mov	r7, r8
 8016310:	106d      	asrs	r5, r5, #1
 8016312:	d00b      	beq.n	801632c <__pow5mult+0xa0>
 8016314:	6820      	ldr	r0, [r4, #0]
 8016316:	b938      	cbnz	r0, 8016328 <__pow5mult+0x9c>
 8016318:	4622      	mov	r2, r4
 801631a:	4621      	mov	r1, r4
 801631c:	4630      	mov	r0, r6
 801631e:	f7ff ff0b 	bl	8016138 <__multiply>
 8016322:	6020      	str	r0, [r4, #0]
 8016324:	f8c0 9000 	str.w	r9, [r0]
 8016328:	4604      	mov	r4, r0
 801632a:	e7e4      	b.n	80162f6 <__pow5mult+0x6a>
 801632c:	4638      	mov	r0, r7
 801632e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016332:	bf00      	nop
 8016334:	08017348 	.word	0x08017348
 8016338:	0801716e 	.word	0x0801716e
 801633c:	080171fb 	.word	0x080171fb

08016340 <__lshift>:
 8016340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016344:	460c      	mov	r4, r1
 8016346:	6849      	ldr	r1, [r1, #4]
 8016348:	6923      	ldr	r3, [r4, #16]
 801634a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801634e:	68a3      	ldr	r3, [r4, #8]
 8016350:	4607      	mov	r7, r0
 8016352:	4691      	mov	r9, r2
 8016354:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016358:	f108 0601 	add.w	r6, r8, #1
 801635c:	42b3      	cmp	r3, r6
 801635e:	db0b      	blt.n	8016378 <__lshift+0x38>
 8016360:	4638      	mov	r0, r7
 8016362:	f7ff fddb 	bl	8015f1c <_Balloc>
 8016366:	4605      	mov	r5, r0
 8016368:	b948      	cbnz	r0, 801637e <__lshift+0x3e>
 801636a:	4602      	mov	r2, r0
 801636c:	4b2a      	ldr	r3, [pc, #168]	; (8016418 <__lshift+0xd8>)
 801636e:	482b      	ldr	r0, [pc, #172]	; (801641c <__lshift+0xdc>)
 8016370:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016374:	f000 fae6 	bl	8016944 <__assert_func>
 8016378:	3101      	adds	r1, #1
 801637a:	005b      	lsls	r3, r3, #1
 801637c:	e7ee      	b.n	801635c <__lshift+0x1c>
 801637e:	2300      	movs	r3, #0
 8016380:	f100 0114 	add.w	r1, r0, #20
 8016384:	f100 0210 	add.w	r2, r0, #16
 8016388:	4618      	mov	r0, r3
 801638a:	4553      	cmp	r3, sl
 801638c:	db37      	blt.n	80163fe <__lshift+0xbe>
 801638e:	6920      	ldr	r0, [r4, #16]
 8016390:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016394:	f104 0314 	add.w	r3, r4, #20
 8016398:	f019 091f 	ands.w	r9, r9, #31
 801639c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80163a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80163a4:	d02f      	beq.n	8016406 <__lshift+0xc6>
 80163a6:	f1c9 0e20 	rsb	lr, r9, #32
 80163aa:	468a      	mov	sl, r1
 80163ac:	f04f 0c00 	mov.w	ip, #0
 80163b0:	681a      	ldr	r2, [r3, #0]
 80163b2:	fa02 f209 	lsl.w	r2, r2, r9
 80163b6:	ea42 020c 	orr.w	r2, r2, ip
 80163ba:	f84a 2b04 	str.w	r2, [sl], #4
 80163be:	f853 2b04 	ldr.w	r2, [r3], #4
 80163c2:	4298      	cmp	r0, r3
 80163c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80163c8:	d8f2      	bhi.n	80163b0 <__lshift+0x70>
 80163ca:	1b03      	subs	r3, r0, r4
 80163cc:	3b15      	subs	r3, #21
 80163ce:	f023 0303 	bic.w	r3, r3, #3
 80163d2:	3304      	adds	r3, #4
 80163d4:	f104 0215 	add.w	r2, r4, #21
 80163d8:	4290      	cmp	r0, r2
 80163da:	bf38      	it	cc
 80163dc:	2304      	movcc	r3, #4
 80163de:	f841 c003 	str.w	ip, [r1, r3]
 80163e2:	f1bc 0f00 	cmp.w	ip, #0
 80163e6:	d001      	beq.n	80163ec <__lshift+0xac>
 80163e8:	f108 0602 	add.w	r6, r8, #2
 80163ec:	3e01      	subs	r6, #1
 80163ee:	4638      	mov	r0, r7
 80163f0:	612e      	str	r6, [r5, #16]
 80163f2:	4621      	mov	r1, r4
 80163f4:	f7ff fdd2 	bl	8015f9c <_Bfree>
 80163f8:	4628      	mov	r0, r5
 80163fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8016402:	3301      	adds	r3, #1
 8016404:	e7c1      	b.n	801638a <__lshift+0x4a>
 8016406:	3904      	subs	r1, #4
 8016408:	f853 2b04 	ldr.w	r2, [r3], #4
 801640c:	f841 2f04 	str.w	r2, [r1, #4]!
 8016410:	4298      	cmp	r0, r3
 8016412:	d8f9      	bhi.n	8016408 <__lshift+0xc8>
 8016414:	e7ea      	b.n	80163ec <__lshift+0xac>
 8016416:	bf00      	nop
 8016418:	080171e0 	.word	0x080171e0
 801641c:	080171fb 	.word	0x080171fb

08016420 <__mcmp>:
 8016420:	b530      	push	{r4, r5, lr}
 8016422:	6902      	ldr	r2, [r0, #16]
 8016424:	690c      	ldr	r4, [r1, #16]
 8016426:	1b12      	subs	r2, r2, r4
 8016428:	d10e      	bne.n	8016448 <__mcmp+0x28>
 801642a:	f100 0314 	add.w	r3, r0, #20
 801642e:	3114      	adds	r1, #20
 8016430:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016434:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016438:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801643c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016440:	42a5      	cmp	r5, r4
 8016442:	d003      	beq.n	801644c <__mcmp+0x2c>
 8016444:	d305      	bcc.n	8016452 <__mcmp+0x32>
 8016446:	2201      	movs	r2, #1
 8016448:	4610      	mov	r0, r2
 801644a:	bd30      	pop	{r4, r5, pc}
 801644c:	4283      	cmp	r3, r0
 801644e:	d3f3      	bcc.n	8016438 <__mcmp+0x18>
 8016450:	e7fa      	b.n	8016448 <__mcmp+0x28>
 8016452:	f04f 32ff 	mov.w	r2, #4294967295
 8016456:	e7f7      	b.n	8016448 <__mcmp+0x28>

08016458 <__mdiff>:
 8016458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801645c:	460c      	mov	r4, r1
 801645e:	4606      	mov	r6, r0
 8016460:	4611      	mov	r1, r2
 8016462:	4620      	mov	r0, r4
 8016464:	4690      	mov	r8, r2
 8016466:	f7ff ffdb 	bl	8016420 <__mcmp>
 801646a:	1e05      	subs	r5, r0, #0
 801646c:	d110      	bne.n	8016490 <__mdiff+0x38>
 801646e:	4629      	mov	r1, r5
 8016470:	4630      	mov	r0, r6
 8016472:	f7ff fd53 	bl	8015f1c <_Balloc>
 8016476:	b930      	cbnz	r0, 8016486 <__mdiff+0x2e>
 8016478:	4b3a      	ldr	r3, [pc, #232]	; (8016564 <__mdiff+0x10c>)
 801647a:	4602      	mov	r2, r0
 801647c:	f240 2132 	movw	r1, #562	; 0x232
 8016480:	4839      	ldr	r0, [pc, #228]	; (8016568 <__mdiff+0x110>)
 8016482:	f000 fa5f 	bl	8016944 <__assert_func>
 8016486:	2301      	movs	r3, #1
 8016488:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801648c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016490:	bfa4      	itt	ge
 8016492:	4643      	movge	r3, r8
 8016494:	46a0      	movge	r8, r4
 8016496:	4630      	mov	r0, r6
 8016498:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801649c:	bfa6      	itte	ge
 801649e:	461c      	movge	r4, r3
 80164a0:	2500      	movge	r5, #0
 80164a2:	2501      	movlt	r5, #1
 80164a4:	f7ff fd3a 	bl	8015f1c <_Balloc>
 80164a8:	b920      	cbnz	r0, 80164b4 <__mdiff+0x5c>
 80164aa:	4b2e      	ldr	r3, [pc, #184]	; (8016564 <__mdiff+0x10c>)
 80164ac:	4602      	mov	r2, r0
 80164ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 80164b2:	e7e5      	b.n	8016480 <__mdiff+0x28>
 80164b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80164b8:	6926      	ldr	r6, [r4, #16]
 80164ba:	60c5      	str	r5, [r0, #12]
 80164bc:	f104 0914 	add.w	r9, r4, #20
 80164c0:	f108 0514 	add.w	r5, r8, #20
 80164c4:	f100 0e14 	add.w	lr, r0, #20
 80164c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80164cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80164d0:	f108 0210 	add.w	r2, r8, #16
 80164d4:	46f2      	mov	sl, lr
 80164d6:	2100      	movs	r1, #0
 80164d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80164dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80164e0:	fa1f f883 	uxth.w	r8, r3
 80164e4:	fa11 f18b 	uxtah	r1, r1, fp
 80164e8:	0c1b      	lsrs	r3, r3, #16
 80164ea:	eba1 0808 	sub.w	r8, r1, r8
 80164ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80164f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80164f6:	fa1f f888 	uxth.w	r8, r8
 80164fa:	1419      	asrs	r1, r3, #16
 80164fc:	454e      	cmp	r6, r9
 80164fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016502:	f84a 3b04 	str.w	r3, [sl], #4
 8016506:	d8e7      	bhi.n	80164d8 <__mdiff+0x80>
 8016508:	1b33      	subs	r3, r6, r4
 801650a:	3b15      	subs	r3, #21
 801650c:	f023 0303 	bic.w	r3, r3, #3
 8016510:	3304      	adds	r3, #4
 8016512:	3415      	adds	r4, #21
 8016514:	42a6      	cmp	r6, r4
 8016516:	bf38      	it	cc
 8016518:	2304      	movcc	r3, #4
 801651a:	441d      	add	r5, r3
 801651c:	4473      	add	r3, lr
 801651e:	469e      	mov	lr, r3
 8016520:	462e      	mov	r6, r5
 8016522:	4566      	cmp	r6, ip
 8016524:	d30e      	bcc.n	8016544 <__mdiff+0xec>
 8016526:	f10c 0203 	add.w	r2, ip, #3
 801652a:	1b52      	subs	r2, r2, r5
 801652c:	f022 0203 	bic.w	r2, r2, #3
 8016530:	3d03      	subs	r5, #3
 8016532:	45ac      	cmp	ip, r5
 8016534:	bf38      	it	cc
 8016536:	2200      	movcc	r2, #0
 8016538:	441a      	add	r2, r3
 801653a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801653e:	b17b      	cbz	r3, 8016560 <__mdiff+0x108>
 8016540:	6107      	str	r7, [r0, #16]
 8016542:	e7a3      	b.n	801648c <__mdiff+0x34>
 8016544:	f856 8b04 	ldr.w	r8, [r6], #4
 8016548:	fa11 f288 	uxtah	r2, r1, r8
 801654c:	1414      	asrs	r4, r2, #16
 801654e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016552:	b292      	uxth	r2, r2
 8016554:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016558:	f84e 2b04 	str.w	r2, [lr], #4
 801655c:	1421      	asrs	r1, r4, #16
 801655e:	e7e0      	b.n	8016522 <__mdiff+0xca>
 8016560:	3f01      	subs	r7, #1
 8016562:	e7ea      	b.n	801653a <__mdiff+0xe2>
 8016564:	080171e0 	.word	0x080171e0
 8016568:	080171fb 	.word	0x080171fb

0801656c <__d2b>:
 801656c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016570:	4689      	mov	r9, r1
 8016572:	2101      	movs	r1, #1
 8016574:	ec57 6b10 	vmov	r6, r7, d0
 8016578:	4690      	mov	r8, r2
 801657a:	f7ff fccf 	bl	8015f1c <_Balloc>
 801657e:	4604      	mov	r4, r0
 8016580:	b930      	cbnz	r0, 8016590 <__d2b+0x24>
 8016582:	4602      	mov	r2, r0
 8016584:	4b25      	ldr	r3, [pc, #148]	; (801661c <__d2b+0xb0>)
 8016586:	4826      	ldr	r0, [pc, #152]	; (8016620 <__d2b+0xb4>)
 8016588:	f240 310a 	movw	r1, #778	; 0x30a
 801658c:	f000 f9da 	bl	8016944 <__assert_func>
 8016590:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016594:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016598:	bb35      	cbnz	r5, 80165e8 <__d2b+0x7c>
 801659a:	2e00      	cmp	r6, #0
 801659c:	9301      	str	r3, [sp, #4]
 801659e:	d028      	beq.n	80165f2 <__d2b+0x86>
 80165a0:	4668      	mov	r0, sp
 80165a2:	9600      	str	r6, [sp, #0]
 80165a4:	f7ff fd82 	bl	80160ac <__lo0bits>
 80165a8:	9900      	ldr	r1, [sp, #0]
 80165aa:	b300      	cbz	r0, 80165ee <__d2b+0x82>
 80165ac:	9a01      	ldr	r2, [sp, #4]
 80165ae:	f1c0 0320 	rsb	r3, r0, #32
 80165b2:	fa02 f303 	lsl.w	r3, r2, r3
 80165b6:	430b      	orrs	r3, r1
 80165b8:	40c2      	lsrs	r2, r0
 80165ba:	6163      	str	r3, [r4, #20]
 80165bc:	9201      	str	r2, [sp, #4]
 80165be:	9b01      	ldr	r3, [sp, #4]
 80165c0:	61a3      	str	r3, [r4, #24]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	bf14      	ite	ne
 80165c6:	2202      	movne	r2, #2
 80165c8:	2201      	moveq	r2, #1
 80165ca:	6122      	str	r2, [r4, #16]
 80165cc:	b1d5      	cbz	r5, 8016604 <__d2b+0x98>
 80165ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80165d2:	4405      	add	r5, r0
 80165d4:	f8c9 5000 	str.w	r5, [r9]
 80165d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80165dc:	f8c8 0000 	str.w	r0, [r8]
 80165e0:	4620      	mov	r0, r4
 80165e2:	b003      	add	sp, #12
 80165e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80165ec:	e7d5      	b.n	801659a <__d2b+0x2e>
 80165ee:	6161      	str	r1, [r4, #20]
 80165f0:	e7e5      	b.n	80165be <__d2b+0x52>
 80165f2:	a801      	add	r0, sp, #4
 80165f4:	f7ff fd5a 	bl	80160ac <__lo0bits>
 80165f8:	9b01      	ldr	r3, [sp, #4]
 80165fa:	6163      	str	r3, [r4, #20]
 80165fc:	2201      	movs	r2, #1
 80165fe:	6122      	str	r2, [r4, #16]
 8016600:	3020      	adds	r0, #32
 8016602:	e7e3      	b.n	80165cc <__d2b+0x60>
 8016604:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016608:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801660c:	f8c9 0000 	str.w	r0, [r9]
 8016610:	6918      	ldr	r0, [r3, #16]
 8016612:	f7ff fd2b 	bl	801606c <__hi0bits>
 8016616:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801661a:	e7df      	b.n	80165dc <__d2b+0x70>
 801661c:	080171e0 	.word	0x080171e0
 8016620:	080171fb 	.word	0x080171fb

08016624 <_calloc_r>:
 8016624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016626:	fba1 2402 	umull	r2, r4, r1, r2
 801662a:	b94c      	cbnz	r4, 8016640 <_calloc_r+0x1c>
 801662c:	4611      	mov	r1, r2
 801662e:	9201      	str	r2, [sp, #4]
 8016630:	f7fd fd78 	bl	8014124 <_malloc_r>
 8016634:	9a01      	ldr	r2, [sp, #4]
 8016636:	4605      	mov	r5, r0
 8016638:	b930      	cbnz	r0, 8016648 <_calloc_r+0x24>
 801663a:	4628      	mov	r0, r5
 801663c:	b003      	add	sp, #12
 801663e:	bd30      	pop	{r4, r5, pc}
 8016640:	220c      	movs	r2, #12
 8016642:	6002      	str	r2, [r0, #0]
 8016644:	2500      	movs	r5, #0
 8016646:	e7f8      	b.n	801663a <_calloc_r+0x16>
 8016648:	4621      	mov	r1, r4
 801664a:	f7fd fcf7 	bl	801403c <memset>
 801664e:	e7f4      	b.n	801663a <_calloc_r+0x16>

08016650 <__sfputc_r>:
 8016650:	6893      	ldr	r3, [r2, #8]
 8016652:	3b01      	subs	r3, #1
 8016654:	2b00      	cmp	r3, #0
 8016656:	b410      	push	{r4}
 8016658:	6093      	str	r3, [r2, #8]
 801665a:	da08      	bge.n	801666e <__sfputc_r+0x1e>
 801665c:	6994      	ldr	r4, [r2, #24]
 801665e:	42a3      	cmp	r3, r4
 8016660:	db01      	blt.n	8016666 <__sfputc_r+0x16>
 8016662:	290a      	cmp	r1, #10
 8016664:	d103      	bne.n	801666e <__sfputc_r+0x1e>
 8016666:	f85d 4b04 	ldr.w	r4, [sp], #4
 801666a:	f7fe bb9d 	b.w	8014da8 <__swbuf_r>
 801666e:	6813      	ldr	r3, [r2, #0]
 8016670:	1c58      	adds	r0, r3, #1
 8016672:	6010      	str	r0, [r2, #0]
 8016674:	7019      	strb	r1, [r3, #0]
 8016676:	4608      	mov	r0, r1
 8016678:	f85d 4b04 	ldr.w	r4, [sp], #4
 801667c:	4770      	bx	lr

0801667e <__sfputs_r>:
 801667e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016680:	4606      	mov	r6, r0
 8016682:	460f      	mov	r7, r1
 8016684:	4614      	mov	r4, r2
 8016686:	18d5      	adds	r5, r2, r3
 8016688:	42ac      	cmp	r4, r5
 801668a:	d101      	bne.n	8016690 <__sfputs_r+0x12>
 801668c:	2000      	movs	r0, #0
 801668e:	e007      	b.n	80166a0 <__sfputs_r+0x22>
 8016690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016694:	463a      	mov	r2, r7
 8016696:	4630      	mov	r0, r6
 8016698:	f7ff ffda 	bl	8016650 <__sfputc_r>
 801669c:	1c43      	adds	r3, r0, #1
 801669e:	d1f3      	bne.n	8016688 <__sfputs_r+0xa>
 80166a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080166a4 <_vfiprintf_r>:
 80166a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166a8:	460d      	mov	r5, r1
 80166aa:	b09d      	sub	sp, #116	; 0x74
 80166ac:	4614      	mov	r4, r2
 80166ae:	4698      	mov	r8, r3
 80166b0:	4606      	mov	r6, r0
 80166b2:	b118      	cbz	r0, 80166bc <_vfiprintf_r+0x18>
 80166b4:	6983      	ldr	r3, [r0, #24]
 80166b6:	b90b      	cbnz	r3, 80166bc <_vfiprintf_r+0x18>
 80166b8:	f7fd fbe8 	bl	8013e8c <__sinit>
 80166bc:	4b89      	ldr	r3, [pc, #548]	; (80168e4 <_vfiprintf_r+0x240>)
 80166be:	429d      	cmp	r5, r3
 80166c0:	d11b      	bne.n	80166fa <_vfiprintf_r+0x56>
 80166c2:	6875      	ldr	r5, [r6, #4]
 80166c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80166c6:	07d9      	lsls	r1, r3, #31
 80166c8:	d405      	bmi.n	80166d6 <_vfiprintf_r+0x32>
 80166ca:	89ab      	ldrh	r3, [r5, #12]
 80166cc:	059a      	lsls	r2, r3, #22
 80166ce:	d402      	bmi.n	80166d6 <_vfiprintf_r+0x32>
 80166d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80166d2:	f7ed f9c3 	bl	8003a5c <__retarget_lock_acquire_recursive>
 80166d6:	89ab      	ldrh	r3, [r5, #12]
 80166d8:	071b      	lsls	r3, r3, #28
 80166da:	d501      	bpl.n	80166e0 <_vfiprintf_r+0x3c>
 80166dc:	692b      	ldr	r3, [r5, #16]
 80166de:	b9eb      	cbnz	r3, 801671c <_vfiprintf_r+0x78>
 80166e0:	4629      	mov	r1, r5
 80166e2:	4630      	mov	r0, r6
 80166e4:	f7fe fbc4 	bl	8014e70 <__swsetup_r>
 80166e8:	b1c0      	cbz	r0, 801671c <_vfiprintf_r+0x78>
 80166ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80166ec:	07dc      	lsls	r4, r3, #31
 80166ee:	d50e      	bpl.n	801670e <_vfiprintf_r+0x6a>
 80166f0:	f04f 30ff 	mov.w	r0, #4294967295
 80166f4:	b01d      	add	sp, #116	; 0x74
 80166f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166fa:	4b7b      	ldr	r3, [pc, #492]	; (80168e8 <_vfiprintf_r+0x244>)
 80166fc:	429d      	cmp	r5, r3
 80166fe:	d101      	bne.n	8016704 <_vfiprintf_r+0x60>
 8016700:	68b5      	ldr	r5, [r6, #8]
 8016702:	e7df      	b.n	80166c4 <_vfiprintf_r+0x20>
 8016704:	4b79      	ldr	r3, [pc, #484]	; (80168ec <_vfiprintf_r+0x248>)
 8016706:	429d      	cmp	r5, r3
 8016708:	bf08      	it	eq
 801670a:	68f5      	ldreq	r5, [r6, #12]
 801670c:	e7da      	b.n	80166c4 <_vfiprintf_r+0x20>
 801670e:	89ab      	ldrh	r3, [r5, #12]
 8016710:	0598      	lsls	r0, r3, #22
 8016712:	d4ed      	bmi.n	80166f0 <_vfiprintf_r+0x4c>
 8016714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016716:	f7ed f9b5 	bl	8003a84 <__retarget_lock_release_recursive>
 801671a:	e7e9      	b.n	80166f0 <_vfiprintf_r+0x4c>
 801671c:	2300      	movs	r3, #0
 801671e:	9309      	str	r3, [sp, #36]	; 0x24
 8016720:	2320      	movs	r3, #32
 8016722:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016726:	f8cd 800c 	str.w	r8, [sp, #12]
 801672a:	2330      	movs	r3, #48	; 0x30
 801672c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80168f0 <_vfiprintf_r+0x24c>
 8016730:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016734:	f04f 0901 	mov.w	r9, #1
 8016738:	4623      	mov	r3, r4
 801673a:	469a      	mov	sl, r3
 801673c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016740:	b10a      	cbz	r2, 8016746 <_vfiprintf_r+0xa2>
 8016742:	2a25      	cmp	r2, #37	; 0x25
 8016744:	d1f9      	bne.n	801673a <_vfiprintf_r+0x96>
 8016746:	ebba 0b04 	subs.w	fp, sl, r4
 801674a:	d00b      	beq.n	8016764 <_vfiprintf_r+0xc0>
 801674c:	465b      	mov	r3, fp
 801674e:	4622      	mov	r2, r4
 8016750:	4629      	mov	r1, r5
 8016752:	4630      	mov	r0, r6
 8016754:	f7ff ff93 	bl	801667e <__sfputs_r>
 8016758:	3001      	adds	r0, #1
 801675a:	f000 80aa 	beq.w	80168b2 <_vfiprintf_r+0x20e>
 801675e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016760:	445a      	add	r2, fp
 8016762:	9209      	str	r2, [sp, #36]	; 0x24
 8016764:	f89a 3000 	ldrb.w	r3, [sl]
 8016768:	2b00      	cmp	r3, #0
 801676a:	f000 80a2 	beq.w	80168b2 <_vfiprintf_r+0x20e>
 801676e:	2300      	movs	r3, #0
 8016770:	f04f 32ff 	mov.w	r2, #4294967295
 8016774:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016778:	f10a 0a01 	add.w	sl, sl, #1
 801677c:	9304      	str	r3, [sp, #16]
 801677e:	9307      	str	r3, [sp, #28]
 8016780:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016784:	931a      	str	r3, [sp, #104]	; 0x68
 8016786:	4654      	mov	r4, sl
 8016788:	2205      	movs	r2, #5
 801678a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801678e:	4858      	ldr	r0, [pc, #352]	; (80168f0 <_vfiprintf_r+0x24c>)
 8016790:	f7e9 fd46 	bl	8000220 <memchr>
 8016794:	9a04      	ldr	r2, [sp, #16]
 8016796:	b9d8      	cbnz	r0, 80167d0 <_vfiprintf_r+0x12c>
 8016798:	06d1      	lsls	r1, r2, #27
 801679a:	bf44      	itt	mi
 801679c:	2320      	movmi	r3, #32
 801679e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80167a2:	0713      	lsls	r3, r2, #28
 80167a4:	bf44      	itt	mi
 80167a6:	232b      	movmi	r3, #43	; 0x2b
 80167a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80167ac:	f89a 3000 	ldrb.w	r3, [sl]
 80167b0:	2b2a      	cmp	r3, #42	; 0x2a
 80167b2:	d015      	beq.n	80167e0 <_vfiprintf_r+0x13c>
 80167b4:	9a07      	ldr	r2, [sp, #28]
 80167b6:	4654      	mov	r4, sl
 80167b8:	2000      	movs	r0, #0
 80167ba:	f04f 0c0a 	mov.w	ip, #10
 80167be:	4621      	mov	r1, r4
 80167c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80167c4:	3b30      	subs	r3, #48	; 0x30
 80167c6:	2b09      	cmp	r3, #9
 80167c8:	d94e      	bls.n	8016868 <_vfiprintf_r+0x1c4>
 80167ca:	b1b0      	cbz	r0, 80167fa <_vfiprintf_r+0x156>
 80167cc:	9207      	str	r2, [sp, #28]
 80167ce:	e014      	b.n	80167fa <_vfiprintf_r+0x156>
 80167d0:	eba0 0308 	sub.w	r3, r0, r8
 80167d4:	fa09 f303 	lsl.w	r3, r9, r3
 80167d8:	4313      	orrs	r3, r2
 80167da:	9304      	str	r3, [sp, #16]
 80167dc:	46a2      	mov	sl, r4
 80167de:	e7d2      	b.n	8016786 <_vfiprintf_r+0xe2>
 80167e0:	9b03      	ldr	r3, [sp, #12]
 80167e2:	1d19      	adds	r1, r3, #4
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	9103      	str	r1, [sp, #12]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	bfbb      	ittet	lt
 80167ec:	425b      	neglt	r3, r3
 80167ee:	f042 0202 	orrlt.w	r2, r2, #2
 80167f2:	9307      	strge	r3, [sp, #28]
 80167f4:	9307      	strlt	r3, [sp, #28]
 80167f6:	bfb8      	it	lt
 80167f8:	9204      	strlt	r2, [sp, #16]
 80167fa:	7823      	ldrb	r3, [r4, #0]
 80167fc:	2b2e      	cmp	r3, #46	; 0x2e
 80167fe:	d10c      	bne.n	801681a <_vfiprintf_r+0x176>
 8016800:	7863      	ldrb	r3, [r4, #1]
 8016802:	2b2a      	cmp	r3, #42	; 0x2a
 8016804:	d135      	bne.n	8016872 <_vfiprintf_r+0x1ce>
 8016806:	9b03      	ldr	r3, [sp, #12]
 8016808:	1d1a      	adds	r2, r3, #4
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	9203      	str	r2, [sp, #12]
 801680e:	2b00      	cmp	r3, #0
 8016810:	bfb8      	it	lt
 8016812:	f04f 33ff 	movlt.w	r3, #4294967295
 8016816:	3402      	adds	r4, #2
 8016818:	9305      	str	r3, [sp, #20]
 801681a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016900 <_vfiprintf_r+0x25c>
 801681e:	7821      	ldrb	r1, [r4, #0]
 8016820:	2203      	movs	r2, #3
 8016822:	4650      	mov	r0, sl
 8016824:	f7e9 fcfc 	bl	8000220 <memchr>
 8016828:	b140      	cbz	r0, 801683c <_vfiprintf_r+0x198>
 801682a:	2340      	movs	r3, #64	; 0x40
 801682c:	eba0 000a 	sub.w	r0, r0, sl
 8016830:	fa03 f000 	lsl.w	r0, r3, r0
 8016834:	9b04      	ldr	r3, [sp, #16]
 8016836:	4303      	orrs	r3, r0
 8016838:	3401      	adds	r4, #1
 801683a:	9304      	str	r3, [sp, #16]
 801683c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016840:	482c      	ldr	r0, [pc, #176]	; (80168f4 <_vfiprintf_r+0x250>)
 8016842:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016846:	2206      	movs	r2, #6
 8016848:	f7e9 fcea 	bl	8000220 <memchr>
 801684c:	2800      	cmp	r0, #0
 801684e:	d03f      	beq.n	80168d0 <_vfiprintf_r+0x22c>
 8016850:	4b29      	ldr	r3, [pc, #164]	; (80168f8 <_vfiprintf_r+0x254>)
 8016852:	bb1b      	cbnz	r3, 801689c <_vfiprintf_r+0x1f8>
 8016854:	9b03      	ldr	r3, [sp, #12]
 8016856:	3307      	adds	r3, #7
 8016858:	f023 0307 	bic.w	r3, r3, #7
 801685c:	3308      	adds	r3, #8
 801685e:	9303      	str	r3, [sp, #12]
 8016860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016862:	443b      	add	r3, r7
 8016864:	9309      	str	r3, [sp, #36]	; 0x24
 8016866:	e767      	b.n	8016738 <_vfiprintf_r+0x94>
 8016868:	fb0c 3202 	mla	r2, ip, r2, r3
 801686c:	460c      	mov	r4, r1
 801686e:	2001      	movs	r0, #1
 8016870:	e7a5      	b.n	80167be <_vfiprintf_r+0x11a>
 8016872:	2300      	movs	r3, #0
 8016874:	3401      	adds	r4, #1
 8016876:	9305      	str	r3, [sp, #20]
 8016878:	4619      	mov	r1, r3
 801687a:	f04f 0c0a 	mov.w	ip, #10
 801687e:	4620      	mov	r0, r4
 8016880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016884:	3a30      	subs	r2, #48	; 0x30
 8016886:	2a09      	cmp	r2, #9
 8016888:	d903      	bls.n	8016892 <_vfiprintf_r+0x1ee>
 801688a:	2b00      	cmp	r3, #0
 801688c:	d0c5      	beq.n	801681a <_vfiprintf_r+0x176>
 801688e:	9105      	str	r1, [sp, #20]
 8016890:	e7c3      	b.n	801681a <_vfiprintf_r+0x176>
 8016892:	fb0c 2101 	mla	r1, ip, r1, r2
 8016896:	4604      	mov	r4, r0
 8016898:	2301      	movs	r3, #1
 801689a:	e7f0      	b.n	801687e <_vfiprintf_r+0x1da>
 801689c:	ab03      	add	r3, sp, #12
 801689e:	9300      	str	r3, [sp, #0]
 80168a0:	462a      	mov	r2, r5
 80168a2:	4b16      	ldr	r3, [pc, #88]	; (80168fc <_vfiprintf_r+0x258>)
 80168a4:	a904      	add	r1, sp, #16
 80168a6:	4630      	mov	r0, r6
 80168a8:	f7fd fd50 	bl	801434c <_printf_float>
 80168ac:	4607      	mov	r7, r0
 80168ae:	1c78      	adds	r0, r7, #1
 80168b0:	d1d6      	bne.n	8016860 <_vfiprintf_r+0x1bc>
 80168b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80168b4:	07d9      	lsls	r1, r3, #31
 80168b6:	d405      	bmi.n	80168c4 <_vfiprintf_r+0x220>
 80168b8:	89ab      	ldrh	r3, [r5, #12]
 80168ba:	059a      	lsls	r2, r3, #22
 80168bc:	d402      	bmi.n	80168c4 <_vfiprintf_r+0x220>
 80168be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80168c0:	f7ed f8e0 	bl	8003a84 <__retarget_lock_release_recursive>
 80168c4:	89ab      	ldrh	r3, [r5, #12]
 80168c6:	065b      	lsls	r3, r3, #25
 80168c8:	f53f af12 	bmi.w	80166f0 <_vfiprintf_r+0x4c>
 80168cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80168ce:	e711      	b.n	80166f4 <_vfiprintf_r+0x50>
 80168d0:	ab03      	add	r3, sp, #12
 80168d2:	9300      	str	r3, [sp, #0]
 80168d4:	462a      	mov	r2, r5
 80168d6:	4b09      	ldr	r3, [pc, #36]	; (80168fc <_vfiprintf_r+0x258>)
 80168d8:	a904      	add	r1, sp, #16
 80168da:	4630      	mov	r0, r6
 80168dc:	f7fd ffda 	bl	8014894 <_printf_i>
 80168e0:	e7e4      	b.n	80168ac <_vfiprintf_r+0x208>
 80168e2:	bf00      	nop
 80168e4:	08016fe8 	.word	0x08016fe8
 80168e8:	08017008 	.word	0x08017008
 80168ec:	08016fc8 	.word	0x08016fc8
 80168f0:	08017354 	.word	0x08017354
 80168f4:	0801735e 	.word	0x0801735e
 80168f8:	0801434d 	.word	0x0801434d
 80168fc:	0801667f 	.word	0x0801667f
 8016900:	0801735a 	.word	0x0801735a

08016904 <_read_r>:
 8016904:	b538      	push	{r3, r4, r5, lr}
 8016906:	4d07      	ldr	r5, [pc, #28]	; (8016924 <_read_r+0x20>)
 8016908:	4604      	mov	r4, r0
 801690a:	4608      	mov	r0, r1
 801690c:	4611      	mov	r1, r2
 801690e:	2200      	movs	r2, #0
 8016910:	602a      	str	r2, [r5, #0]
 8016912:	461a      	mov	r2, r3
 8016914:	f7ec fbf0 	bl	80030f8 <_read>
 8016918:	1c43      	adds	r3, r0, #1
 801691a:	d102      	bne.n	8016922 <_read_r+0x1e>
 801691c:	682b      	ldr	r3, [r5, #0]
 801691e:	b103      	cbz	r3, 8016922 <_read_r+0x1e>
 8016920:	6023      	str	r3, [r4, #0]
 8016922:	bd38      	pop	{r3, r4, r5, pc}
 8016924:	20006fa4 	.word	0x20006fa4

08016928 <__ascii_wctomb>:
 8016928:	b149      	cbz	r1, 801693e <__ascii_wctomb+0x16>
 801692a:	2aff      	cmp	r2, #255	; 0xff
 801692c:	bf85      	ittet	hi
 801692e:	238a      	movhi	r3, #138	; 0x8a
 8016930:	6003      	strhi	r3, [r0, #0]
 8016932:	700a      	strbls	r2, [r1, #0]
 8016934:	f04f 30ff 	movhi.w	r0, #4294967295
 8016938:	bf98      	it	ls
 801693a:	2001      	movls	r0, #1
 801693c:	4770      	bx	lr
 801693e:	4608      	mov	r0, r1
 8016940:	4770      	bx	lr
	...

08016944 <__assert_func>:
 8016944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016946:	4614      	mov	r4, r2
 8016948:	461a      	mov	r2, r3
 801694a:	4b09      	ldr	r3, [pc, #36]	; (8016970 <__assert_func+0x2c>)
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	4605      	mov	r5, r0
 8016950:	68d8      	ldr	r0, [r3, #12]
 8016952:	b14c      	cbz	r4, 8016968 <__assert_func+0x24>
 8016954:	4b07      	ldr	r3, [pc, #28]	; (8016974 <__assert_func+0x30>)
 8016956:	9100      	str	r1, [sp, #0]
 8016958:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801695c:	4906      	ldr	r1, [pc, #24]	; (8016978 <__assert_func+0x34>)
 801695e:	462b      	mov	r3, r5
 8016960:	f000 f80e 	bl	8016980 <fiprintf>
 8016964:	f000 f840 	bl	80169e8 <abort>
 8016968:	4b04      	ldr	r3, [pc, #16]	; (801697c <__assert_func+0x38>)
 801696a:	461c      	mov	r4, r3
 801696c:	e7f3      	b.n	8016956 <__assert_func+0x12>
 801696e:	bf00      	nop
 8016970:	20000124 	.word	0x20000124
 8016974:	08017365 	.word	0x08017365
 8016978:	08017372 	.word	0x08017372
 801697c:	080173a0 	.word	0x080173a0

08016980 <fiprintf>:
 8016980:	b40e      	push	{r1, r2, r3}
 8016982:	b503      	push	{r0, r1, lr}
 8016984:	4601      	mov	r1, r0
 8016986:	ab03      	add	r3, sp, #12
 8016988:	4805      	ldr	r0, [pc, #20]	; (80169a0 <fiprintf+0x20>)
 801698a:	f853 2b04 	ldr.w	r2, [r3], #4
 801698e:	6800      	ldr	r0, [r0, #0]
 8016990:	9301      	str	r3, [sp, #4]
 8016992:	f7ff fe87 	bl	80166a4 <_vfiprintf_r>
 8016996:	b002      	add	sp, #8
 8016998:	f85d eb04 	ldr.w	lr, [sp], #4
 801699c:	b003      	add	sp, #12
 801699e:	4770      	bx	lr
 80169a0:	20000124 	.word	0x20000124

080169a4 <_fstat_r>:
 80169a4:	b538      	push	{r3, r4, r5, lr}
 80169a6:	4d07      	ldr	r5, [pc, #28]	; (80169c4 <_fstat_r+0x20>)
 80169a8:	2300      	movs	r3, #0
 80169aa:	4604      	mov	r4, r0
 80169ac:	4608      	mov	r0, r1
 80169ae:	4611      	mov	r1, r2
 80169b0:	602b      	str	r3, [r5, #0]
 80169b2:	f7ec fbca 	bl	800314a <_fstat>
 80169b6:	1c43      	adds	r3, r0, #1
 80169b8:	d102      	bne.n	80169c0 <_fstat_r+0x1c>
 80169ba:	682b      	ldr	r3, [r5, #0]
 80169bc:	b103      	cbz	r3, 80169c0 <_fstat_r+0x1c>
 80169be:	6023      	str	r3, [r4, #0]
 80169c0:	bd38      	pop	{r3, r4, r5, pc}
 80169c2:	bf00      	nop
 80169c4:	20006fa4 	.word	0x20006fa4

080169c8 <_isatty_r>:
 80169c8:	b538      	push	{r3, r4, r5, lr}
 80169ca:	4d06      	ldr	r5, [pc, #24]	; (80169e4 <_isatty_r+0x1c>)
 80169cc:	2300      	movs	r3, #0
 80169ce:	4604      	mov	r4, r0
 80169d0:	4608      	mov	r0, r1
 80169d2:	602b      	str	r3, [r5, #0]
 80169d4:	f7ec fbc9 	bl	800316a <_isatty>
 80169d8:	1c43      	adds	r3, r0, #1
 80169da:	d102      	bne.n	80169e2 <_isatty_r+0x1a>
 80169dc:	682b      	ldr	r3, [r5, #0]
 80169de:	b103      	cbz	r3, 80169e2 <_isatty_r+0x1a>
 80169e0:	6023      	str	r3, [r4, #0]
 80169e2:	bd38      	pop	{r3, r4, r5, pc}
 80169e4:	20006fa4 	.word	0x20006fa4

080169e8 <abort>:
 80169e8:	b508      	push	{r3, lr}
 80169ea:	2006      	movs	r0, #6
 80169ec:	f000 f82c 	bl	8016a48 <raise>
 80169f0:	2001      	movs	r0, #1
 80169f2:	f7ec fb77 	bl	80030e4 <_exit>

080169f6 <_raise_r>:
 80169f6:	291f      	cmp	r1, #31
 80169f8:	b538      	push	{r3, r4, r5, lr}
 80169fa:	4604      	mov	r4, r0
 80169fc:	460d      	mov	r5, r1
 80169fe:	d904      	bls.n	8016a0a <_raise_r+0x14>
 8016a00:	2316      	movs	r3, #22
 8016a02:	6003      	str	r3, [r0, #0]
 8016a04:	f04f 30ff 	mov.w	r0, #4294967295
 8016a08:	bd38      	pop	{r3, r4, r5, pc}
 8016a0a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016a0c:	b112      	cbz	r2, 8016a14 <_raise_r+0x1e>
 8016a0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016a12:	b94b      	cbnz	r3, 8016a28 <_raise_r+0x32>
 8016a14:	4620      	mov	r0, r4
 8016a16:	f000 f831 	bl	8016a7c <_getpid_r>
 8016a1a:	462a      	mov	r2, r5
 8016a1c:	4601      	mov	r1, r0
 8016a1e:	4620      	mov	r0, r4
 8016a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a24:	f000 b818 	b.w	8016a58 <_kill_r>
 8016a28:	2b01      	cmp	r3, #1
 8016a2a:	d00a      	beq.n	8016a42 <_raise_r+0x4c>
 8016a2c:	1c59      	adds	r1, r3, #1
 8016a2e:	d103      	bne.n	8016a38 <_raise_r+0x42>
 8016a30:	2316      	movs	r3, #22
 8016a32:	6003      	str	r3, [r0, #0]
 8016a34:	2001      	movs	r0, #1
 8016a36:	e7e7      	b.n	8016a08 <_raise_r+0x12>
 8016a38:	2400      	movs	r4, #0
 8016a3a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016a3e:	4628      	mov	r0, r5
 8016a40:	4798      	blx	r3
 8016a42:	2000      	movs	r0, #0
 8016a44:	e7e0      	b.n	8016a08 <_raise_r+0x12>
	...

08016a48 <raise>:
 8016a48:	4b02      	ldr	r3, [pc, #8]	; (8016a54 <raise+0xc>)
 8016a4a:	4601      	mov	r1, r0
 8016a4c:	6818      	ldr	r0, [r3, #0]
 8016a4e:	f7ff bfd2 	b.w	80169f6 <_raise_r>
 8016a52:	bf00      	nop
 8016a54:	20000124 	.word	0x20000124

08016a58 <_kill_r>:
 8016a58:	b538      	push	{r3, r4, r5, lr}
 8016a5a:	4d07      	ldr	r5, [pc, #28]	; (8016a78 <_kill_r+0x20>)
 8016a5c:	2300      	movs	r3, #0
 8016a5e:	4604      	mov	r4, r0
 8016a60:	4608      	mov	r0, r1
 8016a62:	4611      	mov	r1, r2
 8016a64:	602b      	str	r3, [r5, #0]
 8016a66:	f7ec fb2d 	bl	80030c4 <_kill>
 8016a6a:	1c43      	adds	r3, r0, #1
 8016a6c:	d102      	bne.n	8016a74 <_kill_r+0x1c>
 8016a6e:	682b      	ldr	r3, [r5, #0]
 8016a70:	b103      	cbz	r3, 8016a74 <_kill_r+0x1c>
 8016a72:	6023      	str	r3, [r4, #0]
 8016a74:	bd38      	pop	{r3, r4, r5, pc}
 8016a76:	bf00      	nop
 8016a78:	20006fa4 	.word	0x20006fa4

08016a7c <_getpid_r>:
 8016a7c:	f7ec bb1a 	b.w	80030b4 <_getpid>

08016a80 <_init>:
 8016a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a82:	bf00      	nop
 8016a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a86:	bc08      	pop	{r3}
 8016a88:	469e      	mov	lr, r3
 8016a8a:	4770      	bx	lr

08016a8c <_fini>:
 8016a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a8e:	bf00      	nop
 8016a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a92:	bc08      	pop	{r3}
 8016a94:	469e      	mov	lr, r3
 8016a96:	4770      	bx	lr
