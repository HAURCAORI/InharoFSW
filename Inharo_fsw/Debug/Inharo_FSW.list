
Inharo_FSW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000092c  08014c20  08014c20  00024c20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801554c  0801554c  000302f4  2**0
                  CONTENTS
  4 .ARM          00000008  0801554c  0801554c  0002554c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015554  08015554  000302f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015554  08015554  00025554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015558  08015558  00025558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f4  20000000  0801555c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000069b8  200002f4  08015850  000302f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006cac  08015850  00036cac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000350a8  00000000  00000000  00030324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007c55  00000000  00000000  000653cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000028d0  00000000  00000000  0006d028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002570  00000000  00000000  0006f8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000efa5  00000000  00000000  00071e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003ae2d  00000000  00000000  00080e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbed4  00000000  00000000  000bbc3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b7b0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b91c  00000000  00000000  001b7b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002f4 	.word	0x200002f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014c04 	.word	0x08014c04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002f8 	.word	0x200002f8
 800020c:	08014c04 	.word	0x08014c04

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ef4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ef8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d013      	beq.n	8000f2c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f08:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f0c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d00b      	beq.n	8000f2c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f14:	e000      	b.n	8000f18 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f16:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0f9      	beq.n	8000f16 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f22:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f2c:	687b      	ldr	r3, [r7, #4]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <_write>:
#include "stdarg.h"

uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b086      	sub	sp, #24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	60f8      	str	r0, [r7, #12]
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	68b8      	ldr	r0, [r7, #8]
 8000f4e:	f010 fb33 	bl	80115b8 <CDC_Transmit_FS>
	for(int i = 0; i < len; i++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	e009      	b.n	8000f6c <_write+0x32>
	{
		ITM_SendChar(*ptr++);
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	60ba      	str	r2, [r7, #8]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ffc3 	bl	8000eec <ITM_SendChar>
	for(int i = 0; i < len; i++)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	dbf1      	blt.n	8000f58 <_write+0x1e>

	}
	return len;
 8000f74:	687b      	ldr	r3, [r7, #4]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <log_format>:

static RTC_TimeTypeDef sTime;
static RTC_DateTypeDef sDate;
static uint32_t g_SubSeconds;

void log_format(const char* tag, const char* message, va_list args) {
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af02      	add	r7, sp, #8
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
	g_SubSeconds = ((255-(uint32_t)(hrtc.Instance->SSR))*1000L)/(255+1); // ms
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <log_format+0x74>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f92:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <log_format+0x78>)
 8000f94:	fb02 f303 	mul.w	r3, r2, r3
 8000f98:	f503 3379 	add.w	r3, r3, #254976	; 0x3e400
 8000f9c:	3318      	adds	r3, #24
 8000f9e:	0a1b      	lsrs	r3, r3, #8
 8000fa0:	4a16      	ldr	r2, [pc, #88]	; (8000ffc <log_format+0x7c>)
 8000fa2:	6013      	str	r3, [r2, #0]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	4916      	ldr	r1, [pc, #88]	; (8001000 <log_format+0x80>)
 8000fa8:	4812      	ldr	r0, [pc, #72]	; (8000ff4 <log_format+0x74>)
 8000faa:	f006 feaf 	bl	8007d0c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	4914      	ldr	r1, [pc, #80]	; (8001004 <log_format+0x84>)
 8000fb2:	4810      	ldr	r0, [pc, #64]	; (8000ff4 <log_format+0x74>)
 8000fb4:	f006 ff8c 	bl	8007ed0 <HAL_RTC_GetDate>

	printf("%02d:%02d:%02d,%03lu[%s] ", sTime.Hours, sTime.Minutes, sTime.Seconds, g_SubSeconds, tag);
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <log_format+0x80>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <log_format+0x80>)
 8000fc0:	785b      	ldrb	r3, [r3, #1]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <log_format+0x80>)
 8000fc6:	789b      	ldrb	r3, [r3, #2]
 8000fc8:	461c      	mov	r4, r3
 8000fca:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <log_format+0x7c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	9201      	str	r2, [sp, #4]
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	4623      	mov	r3, r4
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <log_format+0x88>)
 8000fda:	f011 fe47 	bl	8012c6c <iprintf>
	vprintf(message, args);
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	68b8      	ldr	r0, [r7, #8]
 8000fe2:	f011 ff8f 	bl	8012f04 <viprintf>
	printf("\r\n");
 8000fe6:	4809      	ldr	r0, [pc, #36]	; (800100c <log_format+0x8c>)
 8000fe8:	f011 fec6 	bl	8012d78 <puts>
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd90      	pop	{r4, r7, pc}
 8000ff4:	2000046c 	.word	0x2000046c
 8000ff8:	fffffc18 	.word	0xfffffc18
 8000ffc:	20000328 	.word	0x20000328
 8001000:	20000310 	.word	0x20000310
 8001004:	20000324 	.word	0x20000324
 8001008:	08014c20 	.word	0x08014c20
 800100c:	08014c3c 	.word	0x08014c3c

08001010 <logi>:

void logi(const char* message, ...) {
 8001010:	b40f      	push	{r0, r1, r2, r3}
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	607b      	str	r3, [r7, #4]
	log_format("INFO", message, args);
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	6939      	ldr	r1, [r7, #16]
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <logi+0x28>)
 8001024:	f7ff ffac 	bl	8000f80 <log_format>
	va_end(args);
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001032:	b004      	add	sp, #16
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	08014c40 	.word	0x08014c40

0800103c <logd>:

void logd(const char* message, ...) {
 800103c:	b40f      	push	{r0, r1, r2, r3}
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	607b      	str	r3, [r7, #4]
	log_format("DEBUG", message, args);
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	6939      	ldr	r1, [r7, #16]
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <logd+0x28>)
 8001050:	f7ff ff96 	bl	8000f80 <log_format>
	va_end(args);
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800105e:	b004      	add	sp, #16
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	08014c48 	.word	0x08014c48

08001068 <loge>:

void loge(const char* message, ...) {
 8001068:	b40f      	push	{r0, r1, r2, r3}
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	607b      	str	r3, [r7, #4]
	log_format("ERROR", message, args);
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	6939      	ldr	r1, [r7, #16]
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <loge+0x28>)
 800107c:	f7ff ff80 	bl	8000f80 <log_format>
	va_end(args);
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800108a:	b004      	add	sp, #16
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	08014c50 	.word	0x08014c50

08001094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001098:	f001 ff40 	bl	8002f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800109c:	f000 fe00 	bl	8001ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a0:	f000 fe6c 	bl	8001d7c <MX_GPIO_Init>
  MX_ADC1_Init();
 80010a4:	f000 fd9a 	bl	8001bdc <MX_ADC1_Init>
  MX_I2C1_Init();
 80010a8:	f000 ff10 	bl	8001ecc <MX_I2C1_Init>
  MX_RTC_Init();
 80010ac:	f000 ff3c 	bl	8001f28 <MX_RTC_Init>
  MX_SPI2_Init();
 80010b0:	f000 ff94 	bl	8001fdc <MX_SPI2_Init>
  MX_TIM3_Init();
 80010b4:	f000 ffc8 	bl	8002048 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80010b8:	f001 f852 	bl	8002160 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80010bc:	f001 f87a 	bl	80021b4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80010c0:	f001 f8a2 	bl	8002208 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80010c4:	f00a fc74 	bl	800b9b0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010c8:	f00c fd6e 	bl	800dba8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of TransmitSemaphore */
  TransmitSemaphoreHandle = osSemaphoreNew(1, 1, &TransmitSemaphore_attributes);
 80010cc:	4a32      	ldr	r2, [pc, #200]	; (8001198 <main+0x104>)
 80010ce:	2101      	movs	r1, #1
 80010d0:	2001      	movs	r0, #1
 80010d2:	f00d f809 	bl	800e0e8 <osSemaphoreNew>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a30      	ldr	r2, [pc, #192]	; (800119c <main+0x108>)
 80010da:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of SensorReading */
  SensorReadingHandle = osTimerNew(vSensorReadingCallback, osTimerPeriodic, NULL, &SensorReading_attributes);
 80010dc:	4b30      	ldr	r3, [pc, #192]	; (80011a0 <main+0x10c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	2101      	movs	r1, #1
 80010e2:	4830      	ldr	r0, [pc, #192]	; (80011a4 <main+0x110>)
 80010e4:	f00c fe6c 	bl	800ddc0 <osTimerNew>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4a2f      	ldr	r2, [pc, #188]	; (80011a8 <main+0x114>)
 80010ec:	6013      	str	r3, [r2, #0]

  /* creation of Transmit */
  TransmitHandle = osTimerNew(vTransmitCallback, osTimerPeriodic, NULL, &Transmit_attributes);
 80010ee:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <main+0x118>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	2101      	movs	r1, #1
 80010f4:	482e      	ldr	r0, [pc, #184]	; (80011b0 <main+0x11c>)
 80010f6:	f00c fe63 	bl	800ddc0 <osTimerNew>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4a2d      	ldr	r2, [pc, #180]	; (80011b4 <main+0x120>)
 80010fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(SensorReadingHandle, 3000);
 8001100:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <main+0x114>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001108:	4618      	mov	r0, r3
 800110a:	f00c fed5 	bl	800deb8 <osTimerStart>
  osTimerStart(TransmitHandle, 3000);
 800110e:	4b29      	ldr	r3, [pc, #164]	; (80011b4 <main+0x120>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001116:	4618      	mov	r0, r3
 8001118:	f00c fece 	bl	800deb8 <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Main */
  MainHandle = osThreadNew(vMainTask, NULL, &Main_attributes);
 800111c:	4a26      	ldr	r2, [pc, #152]	; (80011b8 <main+0x124>)
 800111e:	2100      	movs	r1, #0
 8001120:	4826      	ldr	r0, [pc, #152]	; (80011bc <main+0x128>)
 8001122:	f00c fd8b 	bl	800dc3c <osThreadNew>
 8001126:	4603      	mov	r3, r0
 8001128:	4a25      	ldr	r2, [pc, #148]	; (80011c0 <main+0x12c>)
 800112a:	6013      	str	r3, [r2, #0]

  /* creation of GPS */
  GPSHandle = osThreadNew(vGPSTask, NULL, &GPS_attributes);
 800112c:	4a25      	ldr	r2, [pc, #148]	; (80011c4 <main+0x130>)
 800112e:	2100      	movs	r1, #0
 8001130:	4825      	ldr	r0, [pc, #148]	; (80011c8 <main+0x134>)
 8001132:	f00c fd83 	bl	800dc3c <osThreadNew>
 8001136:	4603      	mov	r3, r0
 8001138:	4a24      	ldr	r2, [pc, #144]	; (80011cc <main+0x138>)
 800113a:	6013      	str	r3, [r2, #0]

  /* creation of StateManaging */
  StateManagingHandle = osThreadNew(vStateManagingTask, NULL, &StateManaging_attributes);
 800113c:	4a24      	ldr	r2, [pc, #144]	; (80011d0 <main+0x13c>)
 800113e:	2100      	movs	r1, #0
 8001140:	4824      	ldr	r0, [pc, #144]	; (80011d4 <main+0x140>)
 8001142:	f00c fd7b 	bl	800dc3c <osThreadNew>
 8001146:	4603      	mov	r3, r0
 8001148:	4a23      	ldr	r2, [pc, #140]	; (80011d8 <main+0x144>)
 800114a:	6013      	str	r3, [r2, #0]

  /* creation of Receive */
  ReceiveHandle = osThreadNew(vReceiveTask, NULL, &Receive_attributes);
 800114c:	4a23      	ldr	r2, [pc, #140]	; (80011dc <main+0x148>)
 800114e:	2100      	movs	r1, #0
 8001150:	4823      	ldr	r0, [pc, #140]	; (80011e0 <main+0x14c>)
 8001152:	f00c fd73 	bl	800dc3c <osThreadNew>
 8001156:	4603      	mov	r3, r0
 8001158:	4a22      	ldr	r2, [pc, #136]	; (80011e4 <main+0x150>)
 800115a:	6013      	str	r3, [r2, #0]

  /* creation of Debug */
  DebugHandle = osThreadNew(vDebugTask, NULL, &Debug_attributes);
 800115c:	4a22      	ldr	r2, [pc, #136]	; (80011e8 <main+0x154>)
 800115e:	2100      	movs	r1, #0
 8001160:	4822      	ldr	r0, [pc, #136]	; (80011ec <main+0x158>)
 8001162:	f00c fd6b 	bl	800dc3c <osThreadNew>
 8001166:	4603      	mov	r3, r0
 8001168:	4a21      	ldr	r2, [pc, #132]	; (80011f0 <main+0x15c>)
 800116a:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of USBEvent */
  USBEventHandle = osEventFlagsNew(&USBEvent_attributes);
 800116c:	4821      	ldr	r0, [pc, #132]	; (80011f4 <main+0x160>)
 800116e:	f00c fed1 	bl	800df14 <osEventFlagsNew>
 8001172:	4603      	mov	r3, r0
 8001174:	4a20      	ldr	r2, [pc, #128]	; (80011f8 <main+0x164>)
 8001176:	6013      	str	r3, [r2, #0]

  /* creation of GPSEvent */
  GPSEventHandle = osEventFlagsNew(&GPSEvent_attributes);
 8001178:	4820      	ldr	r0, [pc, #128]	; (80011fc <main+0x168>)
 800117a:	f00c fecb 	bl	800df14 <osEventFlagsNew>
 800117e:	4603      	mov	r3, r0
 8001180:	4a1f      	ldr	r2, [pc, #124]	; (8001200 <main+0x16c>)
 8001182:	6013      	str	r3, [r2, #0]

  /* creation of CommandEvent */
  CommandEventHandle = osEventFlagsNew(&CommandEvent_attributes);
 8001184:	481f      	ldr	r0, [pc, #124]	; (8001204 <main+0x170>)
 8001186:	f00c fec5 	bl	800df14 <osEventFlagsNew>
 800118a:	4603      	mov	r3, r0
 800118c:	4a1e      	ldr	r2, [pc, #120]	; (8001208 <main+0x174>)
 800118e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001190:	f00c fd2e 	bl	800dbf0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001194:	e7fe      	b.n	8001194 <main+0x100>
 8001196:	bf00      	nop
 8001198:	0801511c 	.word	0x0801511c
 800119c:	20000348 	.word	0x20000348
 80011a0:	080150fc 	.word	0x080150fc
 80011a4:	0800140d 	.word	0x0800140d
 80011a8:	20000340 	.word	0x20000340
 80011ac:	0801510c 	.word	0x0801510c
 80011b0:	08001421 	.word	0x08001421
 80011b4:	20000344 	.word	0x20000344
 80011b8:	08015048 	.word	0x08015048
 80011bc:	08001221 	.word	0x08001221
 80011c0:	2000032c 	.word	0x2000032c
 80011c4:	0801506c 	.word	0x0801506c
 80011c8:	08001299 	.word	0x08001299
 80011cc:	20000330 	.word	0x20000330
 80011d0:	08015090 	.word	0x08015090
 80011d4:	080012a9 	.word	0x080012a9
 80011d8:	20000334 	.word	0x20000334
 80011dc:	080150b4 	.word	0x080150b4
 80011e0:	080012b9 	.word	0x080012b9
 80011e4:	20000338 	.word	0x20000338
 80011e8:	080150d8 	.word	0x080150d8
 80011ec:	080012c9 	.word	0x080012c9
 80011f0:	2000033c 	.word	0x2000033c
 80011f4:	0801512c 	.word	0x0801512c
 80011f8:	2000034c 	.word	0x2000034c
 80011fc:	0801513c 	.word	0x0801513c
 8001200:	20000350 	.word	0x20000350
 8001204:	0801514c 	.word	0x0801514c
 8001208:	20000354 	.word	0x20000354

0800120c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//uint8_t buffer[14] = {};

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART3)
  {
	  //HAL_UART_Receive_IT(&huart3, (uint8_t *)buffer, sizeof(buffer));
    //logi("buffer");
  }
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <vMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vMainTask */
void vMainTask(void *argument)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001228:	f010 f8d8 	bl	80113dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  //HAL_UART_Receive_IT(&huart3, (uint8_t *) buffer, sizeof(buffer));
  //uint8_t data[]= {0x7E, 0x00, 0x0A, 0x01, 0x01, 0xCC, 0xCC, 0x00, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x71};
  logi("Initializing...");
 800122c:	4814      	ldr	r0, [pc, #80]	; (8001280 <vMainTask+0x60>)
 800122e:	f7ff feef 	bl	8001010 <logi>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001238:	4812      	ldr	r0, [pc, #72]	; (8001284 <vMainTask+0x64>)
 800123a:	f002 fc4f 	bl	8003adc <HAL_GPIO_WritePin>
  Init_BMP390();
 800123e:	f001 fcb7 	bl	8002bb0 <Init_BMP390>
  Init_BNO055();
 8001242:	f001 fd29 	bl	8002c98 <Init_BNO055>
  Init_SD();
 8001246:	f001 fd35 	bl	8002cb4 <Init_SD>
  Init_Servo(&hservo1, &hservo2, &hservo3);
 800124a:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <vMainTask+0x68>)
 800124c:	490f      	ldr	r1, [pc, #60]	; (800128c <vMainTask+0x6c>)
 800124e:	4810      	ldr	r0, [pc, #64]	; (8001290 <vMainTask+0x70>)
 8001250:	f001 fd38 	bl	8002cc4 <Init_Servo>
  osDelay(100);
 8001254:	2064      	movs	r0, #100	; 0x64
 8001256:	f00c fd83 	bl	800dd60 <osDelay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800125a:	2201      	movs	r2, #1
 800125c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001260:	4808      	ldr	r0, [pc, #32]	; (8001284 <vMainTask+0x64>)
 8001262:	f002 fc3b 	bl	8003adc <HAL_GPIO_WritePin>
  logi("Initialized");
 8001266:	480b      	ldr	r0, [pc, #44]	; (8001294 <vMainTask+0x74>)
 8001268:	f7ff fed2 	bl	8001010 <logi>
  for(;;)
  {
    osDelay(1000);
 800126c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001270:	f00c fd76 	bl	800dd60 <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001274:	2120      	movs	r1, #32
 8001276:	4803      	ldr	r0, [pc, #12]	; (8001284 <vMainTask+0x64>)
 8001278:	f002 fc49 	bl	8003b0e <HAL_GPIO_TogglePin>
    osDelay(1000);
 800127c:	e7f6      	b.n	800126c <vMainTask+0x4c>
 800127e:	bf00      	nop
 8001280:	08014cdc 	.word	0x08014cdc
 8001284:	40020000 	.word	0x40020000
 8001288:	20000368 	.word	0x20000368
 800128c:	20000360 	.word	0x20000360
 8001290:	20000358 	.word	0x20000358
 8001294:	08014cec 	.word	0x08014cec

08001298 <vGPSTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vGPSTask */
void vGPSTask(void *argument)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vGPSTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012a0:	2001      	movs	r0, #1
 80012a2:	f00c fd5d 	bl	800dd60 <osDelay>
 80012a6:	e7fb      	b.n	80012a0 <vGPSTask+0x8>

080012a8 <vStateManagingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStateManagingTask */
void vStateManagingTask(void *argument)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStateManagingTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012b0:	2001      	movs	r0, #1
 80012b2:	f00c fd55 	bl	800dd60 <osDelay>
 80012b6:	e7fb      	b.n	80012b0 <vStateManagingTask+0x8>

080012b8 <vReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vReceiveTask */
void vReceiveTask(void *argument)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vReceiveTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012c0:	2001      	movs	r0, #1
 80012c2:	f00c fd4d 	bl	800dd60 <osDelay>
 80012c6:	e7fb      	b.n	80012c0 <vReceiveTask+0x8>

080012c8 <vDebugTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vDebugTask */
void vDebugTask(void *argument)
{
 80012c8:	b5b0      	push	{r4, r5, r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vDebugTask */
  /* Infinite loop */
	uint32_t event_flag;
	uint32_t buffer;
	uint16_t cmd = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef status;
	for (;;) {
		event_flag = osEventFlagsWait(USBEventHandle, RECEIVED_USB, osFlagsWaitAny, 1000);
 80012d4:	4b43      	ldr	r3, [pc, #268]	; (80013e4 <vDebugTask+0x11c>)
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012dc:	2200      	movs	r2, #0
 80012de:	2101      	movs	r1, #1
 80012e0:	f00c fe9c 	bl	800e01c <osEventFlagsWait>
 80012e4:	6178      	str	r0, [r7, #20]
		if (event_flag & RECEIVED_USB) {
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d076      	beq.n	80013de <vDebugTask+0x116>
			Buzzer_Once();
 80012f0:	f001 fc4a 	bl	8002b88 <Buzzer_Once>
 80012f4:	4b3c      	ldr	r3, [pc, #240]	; (80013e8 <vDebugTask+0x120>)
 80012f6:	881b      	ldrh	r3, [r3, #0]
			memcpy(&cmd, usb_rx_buffer.buffer, DEBUG_CMD_SIZE);
 80012f8:	817b      	strh	r3, [r7, #10]
			switch (cmd) {
 80012fa:	897b      	ldrh	r3, [r7, #10]
 80012fc:	f647 2262 	movw	r2, #31330	; 0x7a62
 8001300:	4293      	cmp	r3, r2
 8001302:	d00c      	beq.n	800131e <vDebugTask+0x56>
 8001304:	f647 2262 	movw	r2, #31330	; 0x7a62
 8001308:	4293      	cmp	r3, r2
 800130a:	dce3      	bgt.n	80012d4 <vDebugTask+0xc>
 800130c:	f646 4263 	movw	r2, #27747	; 0x6c63
 8001310:	4293      	cmp	r3, r2
 8001312:	d012      	beq.n	800133a <vDebugTask+0x72>
 8001314:	f247 2270 	movw	r2, #29296	; 0x7270
 8001318:	4293      	cmp	r3, r2
 800131a:	d01d      	beq.n	8001358 <vDebugTask+0x90>
 800131c:	e060      	b.n	80013e0 <vDebugTask+0x118>
			case DEBUG_CMD_BUZZER:
				logd("Buzzer");
 800131e:	4833      	ldr	r0, [pc, #204]	; (80013ec <vDebugTask+0x124>)
 8001320:	f7ff fe8c 	bl	800103c <logd>
				osDelay(100);
 8001324:	2064      	movs	r0, #100	; 0x64
 8001326:	f00c fd1b 	bl	800dd60 <osDelay>
				Buzzer_Once();
 800132a:	f001 fc2d 	bl	8002b88 <Buzzer_Once>
				osDelay(100);
 800132e:	2064      	movs	r0, #100	; 0x64
 8001330:	f00c fd16 	bl	800dd60 <osDelay>
				Buzzer_Once();
 8001334:	f001 fc28 	bl	8002b88 <Buzzer_Once>
				break;
 8001338:	e052      	b.n	80013e0 <vDebugTask+0x118>
			case DEBUG_CMD_CALIBRATION:
				status = BMP390_ReadCalibration();
 800133a:	f001 f8b3 	bl	80024a4 <BMP390_ReadCalibration>
 800133e:	4603      	mov	r3, r0
 8001340:	74fb      	strb	r3, [r7, #19]
				if (status == HAL_OK) {
 8001342:	7cfb      	ldrb	r3, [r7, #19]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d103      	bne.n	8001350 <vDebugTask+0x88>
					logi("BMP390 CAL Complete.");
 8001348:	4829      	ldr	r0, [pc, #164]	; (80013f0 <vDebugTask+0x128>)
 800134a:	f7ff fe61 	bl	8001010 <logi>
				} else {
					logi("BMP390 CAL Fail.");
				}
				break;
 800134e:	e047      	b.n	80013e0 <vDebugTask+0x118>
					logi("BMP390 CAL Fail.");
 8001350:	4828      	ldr	r0, [pc, #160]	; (80013f4 <vDebugTask+0x12c>)
 8001352:	f7ff fe5d 	bl	8001010 <logi>
				break;
 8001356:	e043      	b.n	80013e0 <vDebugTask+0x118>
			case DEBUG_CMD_PRESSURE:
				logd("Pressure");
 8001358:	4827      	ldr	r0, [pc, #156]	; (80013f8 <vDebugTask+0x130>)
 800135a:	f7ff fe6f 	bl	800103c <logd>

				if (BMP390_ReadRawPressure(&buffer, 10) != HAL_OK) {
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	210a      	movs	r1, #10
 8001364:	4618      	mov	r0, r3
 8001366:	f001 f9eb 	bl	8002740 <BMP390_ReadRawPressure>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d002      	beq.n	8001376 <vDebugTask+0xae>
					logi("BMP Read Pressure Error.");
 8001370:	4822      	ldr	r0, [pc, #136]	; (80013fc <vDebugTask+0x134>)
 8001372:	f7ff fe4d 	bl	8001010 <logi>
				}
				sensor_data.pressure = BMP390_CompensatePressure(buffer);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 ffb5 	bl	80022e8 <BMP390_CompensatePressure>
 800137e:	eef0 7a40 	vmov.f32	s15, s0
 8001382:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <vDebugTask+0x138>)
 8001384:	edc3 7a00 	vstr	s15, [r3]

				if (BMP390_ReadRawTemperature(&buffer, 10) != HAL_OK) {
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	210a      	movs	r1, #10
 800138e:	4618      	mov	r0, r3
 8001390:	f001 f9f8 	bl	8002784 <BMP390_ReadRawTemperature>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <vDebugTask+0xd8>
					logi("BMP Read Temperature Error.");
 800139a:	481a      	ldr	r0, [pc, #104]	; (8001404 <vDebugTask+0x13c>)
 800139c:	f7ff fe38 	bl	8001010 <logi>
				}
				sensor_data.temperature = BMP390_CompensateTemperature(buffer);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 ff6a 	bl	800227c <BMP390_CompensateTemperature>
 80013a8:	eef0 7a40 	vmov.f32	s15, s0
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <vDebugTask+0x138>)
 80013ae:	edc3 7a01 	vstr	s15, [r3, #4]

				logd("Temperature %f / pressure %f", sensor_data.temperature,
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <vDebugTask+0x138>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f8e6 	bl	8000588 <__aeabi_f2d>
 80013bc:	4604      	mov	r4, r0
 80013be:	460d      	mov	r5, r1
						sensor_data.pressure);
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <vDebugTask+0x138>)
 80013c2:	681b      	ldr	r3, [r3, #0]
				logd("Temperature %f / pressure %f", sensor_data.temperature,
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f8df 	bl	8000588 <__aeabi_f2d>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	e9cd 2300 	strd	r2, r3, [sp]
 80013d2:	4622      	mov	r2, r4
 80013d4:	462b      	mov	r3, r5
 80013d6:	480c      	ldr	r0, [pc, #48]	; (8001408 <vDebugTask+0x140>)
 80013d8:	f7ff fe30 	bl	800103c <logd>

				break;
 80013dc:	e000      	b.n	80013e0 <vDebugTask+0x118>
			}
		}
 80013de:	bf00      	nop
		event_flag = osEventFlagsWait(USBEventHandle, RECEIVED_USB, osFlagsWaitAny, 1000);
 80013e0:	e778      	b.n	80012d4 <vDebugTask+0xc>
 80013e2:	bf00      	nop
 80013e4:	2000034c 	.word	0x2000034c
 80013e8:	20000370 	.word	0x20000370
 80013ec:	08014cf8 	.word	0x08014cf8
 80013f0:	08014d00 	.word	0x08014d00
 80013f4:	08014d18 	.word	0x08014d18
 80013f8:	08014d2c 	.word	0x08014d2c
 80013fc:	08014d38 	.word	0x08014d38
 8001400:	2000037c 	.word	0x2000037c
 8001404:	08014d54 	.word	0x08014d54
 8001408:	08014d70 	.word	0x08014d70

0800140c <vSensorReadingCallback>:
  /* USER CODE END vDebugTask */
}

/* vSensorReadingCallback function */
void vSensorReadingCallback(void *argument)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vSensorReadingCallback */

  /* USER CODE END vSensorReadingCallback */
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <vTransmitCallback>:

/* vTransmitCallback function */
void vTransmitCallback(void *argument)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTransmitCallback */

  /* USER CODE END vTransmitCallback */
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d101      	bne.n	800144a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001446:	f001 fd8b 	bl	8002f60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40001000 	.word	0x40001000

08001458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  printf("Error_Handler\r\n");
 800145c:	4803      	ldr	r0, [pc, #12]	; (800146c <Error_Handler+0x14>)
 800145e:	f011 fc8b 	bl	8012d78 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001462:	b672      	cpsid	i
}
 8001464:	bf00      	nop
  __disable_irq();

  while (1)
  {
	  break;
 8001466:	bf00      	nop
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	08014d90 	.word	0x08014d90

08001470 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_MspInit+0x54>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	4a11      	ldr	r2, [pc, #68]	; (80014c4 <HAL_MspInit+0x54>)
 8001480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001484:	6453      	str	r3, [r2, #68]	; 0x44
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <HAL_MspInit+0x54>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_MspInit+0x54>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <HAL_MspInit+0x54>)
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a0:	6413      	str	r3, [r2, #64]	; 0x40
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <HAL_MspInit+0x54>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	210f      	movs	r1, #15
 80014b2:	f06f 0001 	mvn.w	r0, #1
 80014b6:	f002 f8c1 	bl	800363c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800

080014c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a17      	ldr	r2, [pc, #92]	; (8001544 <HAL_ADC_MspInit+0x7c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d127      	bne.n	800153a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <HAL_ADC_MspInit+0x80>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a15      	ldr	r2, [pc, #84]	; (8001548 <HAL_ADC_MspInit+0x80>)
 80014f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <HAL_ADC_MspInit+0x80>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <HAL_ADC_MspInit+0x80>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <HAL_ADC_MspInit+0x80>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_ADC_MspInit+0x80>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001522:	2303      	movs	r3, #3
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001526:	2303      	movs	r3, #3
 8001528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	4805      	ldr	r0, [pc, #20]	; (800154c <HAL_ADC_MspInit+0x84>)
 8001536:	f002 f93d 	bl	80037b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800153a:	bf00      	nop
 800153c:	3728      	adds	r7, #40	; 0x28
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40012000 	.word	0x40012000
 8001548:	40023800 	.word	0x40023800
 800154c:	40020000 	.word	0x40020000

08001550 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a19      	ldr	r2, [pc, #100]	; (80015d4 <HAL_I2C_MspInit+0x84>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d12c      	bne.n	80015cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_I2C_MspInit+0x88>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <HAL_I2C_MspInit+0x88>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_I2C_MspInit+0x88>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800158e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001594:	2312      	movs	r3, #18
 8001596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015a0:	2304      	movs	r3, #4
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	480c      	ldr	r0, [pc, #48]	; (80015dc <HAL_I2C_MspInit+0x8c>)
 80015ac:	f002 f902 	bl	80037b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <HAL_I2C_MspInit+0x88>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <HAL_I2C_MspInit+0x88>)
 80015ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015be:	6413      	str	r3, [r2, #64]	; 0x40
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_I2C_MspInit+0x88>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015cc:	bf00      	nop
 80015ce:	3728      	adds	r7, #40	; 0x28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40005400 	.word	0x40005400
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020400 	.word	0x40020400

080015e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b09a      	sub	sp, #104	; 0x68
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	225c      	movs	r2, #92	; 0x5c
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f010 fde9 	bl	80121c8 <memset>
  if(hrtc->Instance==RTC)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a0c      	ldr	r2, [pc, #48]	; (800162c <HAL_RTC_MspInit+0x4c>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d111      	bne.n	8001624 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001600:	2320      	movs	r3, #32
 8001602:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001608:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	4618      	mov	r0, r3
 8001610:	f005 fafa 	bl	8006c08 <HAL_RCCEx_PeriphCLKConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800161a:	f7ff ff1d 	bl	8001458 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <HAL_RTC_MspInit+0x50>)
 8001620:	2201      	movs	r2, #1
 8001622:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001624:	bf00      	nop
 8001626:	3768      	adds	r7, #104	; 0x68
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40002800 	.word	0x40002800
 8001630:	42470e3c 	.word	0x42470e3c

08001634 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a19      	ldr	r2, [pc, #100]	; (80016b8 <HAL_SPI_MspInit+0x84>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d12c      	bne.n	80016b0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_SPI_MspInit+0x88>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	4a17      	ldr	r2, [pc, #92]	; (80016bc <HAL_SPI_MspInit+0x88>)
 8001660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001664:	6413      	str	r3, [r2, #64]	; 0x40
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_SPI_MspInit+0x88>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_SPI_MspInit+0x88>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a10      	ldr	r2, [pc, #64]	; (80016bc <HAL_SPI_MspInit+0x88>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_SPI_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800168e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016a0:	2305      	movs	r3, #5
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <HAL_SPI_MspInit+0x8c>)
 80016ac:	f002 f882 	bl	80037b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80016b0:	bf00      	nop
 80016b2:	3728      	adds	r7, #40	; 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40003800 	.word	0x40003800
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020400 	.word	0x40020400

080016c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <HAL_TIM_Base_MspInit+0x3c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d10d      	bne.n	80016f2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_TIM_Base_MspInit+0x40>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	4a09      	ldr	r2, [pc, #36]	; (8001704 <HAL_TIM_Base_MspInit+0x40>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	6413      	str	r3, [r2, #64]	; 0x40
 80016e6:	4b07      	ldr	r3, [pc, #28]	; (8001704 <HAL_TIM_Base_MspInit+0x40>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40000400 	.word	0x40000400
 8001704:	40023800 	.word	0x40023800

08001708 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a12      	ldr	r2, [pc, #72]	; (8001770 <HAL_TIM_MspPostInit+0x68>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d11e      	bne.n	8001768 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <HAL_TIM_MspPostInit+0x6c>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a10      	ldr	r2, [pc, #64]	; (8001774 <HAL_TIM_MspPostInit+0x6c>)
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <HAL_TIM_MspPostInit+0x6c>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001746:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800174a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001758:	2302      	movs	r3, #2
 800175a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	4619      	mov	r1, r3
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <HAL_TIM_MspPostInit+0x70>)
 8001764:	f002 f826 	bl	80037b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001768:	bf00      	nop
 800176a:	3720      	adds	r7, #32
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40000400 	.word	0x40000400
 8001774:	40023800 	.word	0x40023800
 8001778:	40020800 	.word	0x40020800

0800177c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08e      	sub	sp, #56	; 0x38
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a4f      	ldr	r2, [pc, #316]	; (80018d8 <HAL_UART_MspInit+0x15c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d12c      	bne.n	80017f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
 80017a2:	4b4e      	ldr	r3, [pc, #312]	; (80018dc <HAL_UART_MspInit+0x160>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	4a4d      	ldr	r2, [pc, #308]	; (80018dc <HAL_UART_MspInit+0x160>)
 80017a8:	f043 0310 	orr.w	r3, r3, #16
 80017ac:	6453      	str	r3, [r2, #68]	; 0x44
 80017ae:	4b4b      	ldr	r3, [pc, #300]	; (80018dc <HAL_UART_MspInit+0x160>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	f003 0310 	and.w	r3, r3, #16
 80017b6:	623b      	str	r3, [r7, #32]
 80017b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <HAL_UART_MspInit+0x160>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a46      	ldr	r2, [pc, #280]	; (80018dc <HAL_UART_MspInit+0x160>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b44      	ldr	r3, [pc, #272]	; (80018dc <HAL_UART_MspInit+0x160>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	61fb      	str	r3, [r7, #28]
 80017d4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017d6:	23c0      	movs	r3, #192	; 0xc0
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017e6:	2307      	movs	r3, #7
 80017e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ee:	4619      	mov	r1, r3
 80017f0:	483b      	ldr	r0, [pc, #236]	; (80018e0 <HAL_UART_MspInit+0x164>)
 80017f2:	f001 ffdf 	bl	80037b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017f6:	e06b      	b.n	80018d0 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a39      	ldr	r2, [pc, #228]	; (80018e4 <HAL_UART_MspInit+0x168>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d12c      	bne.n	800185c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	61bb      	str	r3, [r7, #24]
 8001806:	4b35      	ldr	r3, [pc, #212]	; (80018dc <HAL_UART_MspInit+0x160>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a34      	ldr	r2, [pc, #208]	; (80018dc <HAL_UART_MspInit+0x160>)
 800180c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b32      	ldr	r3, [pc, #200]	; (80018dc <HAL_UART_MspInit+0x160>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	61bb      	str	r3, [r7, #24]
 800181c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <HAL_UART_MspInit+0x160>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a2d      	ldr	r2, [pc, #180]	; (80018dc <HAL_UART_MspInit+0x160>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <HAL_UART_MspInit+0x160>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800183a:	230c      	movs	r3, #12
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001846:	2303      	movs	r3, #3
 8001848:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800184a:	2307      	movs	r3, #7
 800184c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001852:	4619      	mov	r1, r3
 8001854:	4824      	ldr	r0, [pc, #144]	; (80018e8 <HAL_UART_MspInit+0x16c>)
 8001856:	f001 ffad 	bl	80037b4 <HAL_GPIO_Init>
}
 800185a:	e039      	b.n	80018d0 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART3)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a22      	ldr	r2, [pc, #136]	; (80018ec <HAL_UART_MspInit+0x170>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d134      	bne.n	80018d0 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <HAL_UART_MspInit+0x160>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a1b      	ldr	r2, [pc, #108]	; (80018dc <HAL_UART_MspInit+0x160>)
 8001870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_UART_MspInit+0x160>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_UART_MspInit+0x160>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a14      	ldr	r2, [pc, #80]	; (80018dc <HAL_UART_MspInit+0x160>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_UART_MspInit+0x160>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800189e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018b0:	2307      	movs	r3, #7
 80018b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b8:	4619      	mov	r1, r3
 80018ba:	480d      	ldr	r0, [pc, #52]	; (80018f0 <HAL_UART_MspInit+0x174>)
 80018bc:	f001 ff7a 	bl	80037b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2105      	movs	r1, #5
 80018c4:	2027      	movs	r0, #39	; 0x27
 80018c6:	f001 feb9 	bl	800363c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018ca:	2027      	movs	r0, #39	; 0x27
 80018cc:	f001 fed2 	bl	8003674 <HAL_NVIC_EnableIRQ>
}
 80018d0:	bf00      	nop
 80018d2:	3738      	adds	r7, #56	; 0x38
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40011000 	.word	0x40011000
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020400 	.word	0x40020400
 80018e4:	40004400 	.word	0x40004400
 80018e8:	40020000 	.word	0x40020000
 80018ec:	40004800 	.word	0x40004800
 80018f0:	40020800 	.word	0x40020800

080018f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08e      	sub	sp, #56	; 0x38
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	4b33      	ldr	r3, [pc, #204]	; (80019d8 <HAL_InitTick+0xe4>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	4a32      	ldr	r2, [pc, #200]	; (80019d8 <HAL_InitTick+0xe4>)
 800190e:	f043 0310 	orr.w	r3, r3, #16
 8001912:	6413      	str	r3, [r2, #64]	; 0x40
 8001914:	4b30      	ldr	r3, [pc, #192]	; (80019d8 <HAL_InitTick+0xe4>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	f003 0310 	and.w	r3, r3, #16
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001920:	f107 0210 	add.w	r2, r7, #16
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4611      	mov	r1, r2
 800192a:	4618      	mov	r0, r3
 800192c:	f005 f93a 	bl	8006ba4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001936:	2b00      	cmp	r3, #0
 8001938:	d103      	bne.n	8001942 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800193a:	f005 f90b 	bl	8006b54 <HAL_RCC_GetPCLK1Freq>
 800193e:	6378      	str	r0, [r7, #52]	; 0x34
 8001940:	e004      	b.n	800194c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001942:	f005 f907 	bl	8006b54 <HAL_RCC_GetPCLK1Freq>
 8001946:	4603      	mov	r3, r0
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800194c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194e:	4a23      	ldr	r2, [pc, #140]	; (80019dc <HAL_InitTick+0xe8>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	0c9b      	lsrs	r3, r3, #18
 8001956:	3b01      	subs	r3, #1
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800195a:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <HAL_InitTick+0xec>)
 800195c:	4a21      	ldr	r2, [pc, #132]	; (80019e4 <HAL_InitTick+0xf0>)
 800195e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001960:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <HAL_InitTick+0xec>)
 8001962:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001966:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001968:	4a1d      	ldr	r2, [pc, #116]	; (80019e0 <HAL_InitTick+0xec>)
 800196a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800196e:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <HAL_InitTick+0xec>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001974:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <HAL_InitTick+0xec>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <HAL_InitTick+0xec>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001980:	4817      	ldr	r0, [pc, #92]	; (80019e0 <HAL_InitTick+0xec>)
 8001982:	f006 fc3a 	bl	80081fa <HAL_TIM_Base_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800198c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001990:	2b00      	cmp	r3, #0
 8001992:	d11b      	bne.n	80019cc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001994:	4812      	ldr	r0, [pc, #72]	; (80019e0 <HAL_InitTick+0xec>)
 8001996:	f006 fc7f 	bl	8008298 <HAL_TIM_Base_Start_IT>
 800199a:	4603      	mov	r3, r0
 800199c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80019a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d111      	bne.n	80019cc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019a8:	2036      	movs	r0, #54	; 0x36
 80019aa:	f001 fe63 	bl	8003674 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d808      	bhi.n	80019c6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80019b4:	2200      	movs	r2, #0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	2036      	movs	r0, #54	; 0x36
 80019ba:	f001 fe3f 	bl	800363c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <HAL_InitTick+0xf4>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e002      	b.n	80019cc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80019cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3738      	adds	r7, #56	; 0x38
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40023800 	.word	0x40023800
 80019dc:	431bde83 	.word	0x431bde83
 80019e0:	20000384 	.word	0x20000384
 80019e4:	40001000 	.word	0x40001000
 80019e8:	20000004 	.word	0x20000004

080019ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019f0:	e7fe      	b.n	80019f0 <NMI_Handler+0x4>
	...

080019f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  	loge("HardFault");
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <HardFault_Handler+0x10>)
 80019fa:	f7ff fb35 	bl	8001068 <loge>
  	break;
 80019fe:	bf00      	nop
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	08014da0 	.word	0x08014da0

08001a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <MemManage_Handler+0x4>

08001a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <BusFault_Handler+0x4>

08001a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <UsageFault_Handler+0x4>

08001a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <USART3_IRQHandler+0x10>)
 8001a2e:	f007 fcbb 	bl	80093a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200005b4 	.word	0x200005b4

08001a3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <TIM6_DAC_IRQHandler+0x10>)
 8001a42:	f006 fe09 	bl	8008658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000384 	.word	0x20000384

08001a50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <OTG_FS_IRQHandler+0x10>)
 8001a56:	f003 fe19 	bl	800568c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20006574 	.word	0x20006574

08001a64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return 1;
 8001a68:	2301      	movs	r3, #1
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_kill>:

int _kill(int pid, int sig)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a7e:	f010 fa6d 	bl	8011f5c <__errno>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2216      	movs	r2, #22
 8001a86:	601a      	str	r2, [r3, #0]
  return -1;
 8001a88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <_exit>:

void _exit (int status)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ffe7 	bl	8001a74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aa6:	e7fe      	b.n	8001aa6 <_exit+0x12>

08001aa8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	e00a      	b.n	8001ad0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aba:	f3af 8000 	nop.w
 8001abe:	4601      	mov	r1, r0
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	60ba      	str	r2, [r7, #8]
 8001ac6:	b2ca      	uxtb	r2, r1
 8001ac8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	3301      	adds	r3, #1
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	dbf0      	blt.n	8001aba <_read+0x12>
  }

  return len;
 8001ad8:	687b      	ldr	r3, [r7, #4]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b0a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <_isatty>:

int _isatty(int file)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b54:	4a14      	ldr	r2, [pc, #80]	; (8001ba8 <_sbrk+0x5c>)
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <_sbrk+0x60>)
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d102      	bne.n	8001b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <_sbrk+0x64>)
 8001b6a:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <_sbrk+0x68>)
 8001b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d207      	bcs.n	8001b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b7c:	f010 f9ee 	bl	8011f5c <__errno>
 8001b80:	4603      	mov	r3, r0
 8001b82:	220c      	movs	r2, #12
 8001b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	e009      	b.n	8001ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <_sbrk+0x64>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b92:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <_sbrk+0x64>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	4a05      	ldr	r2, [pc, #20]	; (8001bb0 <_sbrk+0x64>)
 8001b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20020000 	.word	0x20020000
 8001bac:	00000400 	.word	0x00000400
 8001bb0:	200003cc 	.word	0x200003cc
 8001bb4:	20006cb0 	.word	0x20006cb0

08001bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <SystemInit+0x20>)
 8001bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <SystemInit+0x20>)
 8001bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001be2:	463b      	mov	r3, r7
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bee:	4b29      	ldr	r3, [pc, #164]	; (8001c94 <MX_ADC1_Init+0xb8>)
 8001bf0:	4a29      	ldr	r2, [pc, #164]	; (8001c98 <MX_ADC1_Init+0xbc>)
 8001bf2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001bf4:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <MX_ADC1_Init+0xb8>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bfa:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <MX_ADC1_Init+0xb8>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001c00:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <MX_ADC1_Init+0xb8>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c06:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <MX_ADC1_Init+0xb8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8001c0c:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <MX_ADC1_Init+0xb8>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001c14:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <MX_ADC1_Init+0xb8>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <MX_ADC1_Init+0xb8>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c20:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <MX_ADC1_Init+0xb8>)
 8001c22:	4a1e      	ldr	r2, [pc, #120]	; (8001c9c <MX_ADC1_Init+0xc0>)
 8001c24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c26:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <MX_ADC1_Init+0xb8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001c2c:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <MX_ADC1_Init+0xb8>)
 8001c2e:	2202      	movs	r2, #2
 8001c30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <MX_ADC1_Init+0xb8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <MX_ADC1_Init+0xb8>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c40:	4814      	ldr	r0, [pc, #80]	; (8001c94 <MX_ADC1_Init+0xb8>)
 8001c42:	f001 f9d1 	bl	8002fe8 <HAL_ADC_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001c4c:	f7ff fc04 	bl	8001458 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c54:	2301      	movs	r3, #1
 8001c56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c5c:	463b      	mov	r3, r7
 8001c5e:	4619      	mov	r1, r3
 8001c60:	480c      	ldr	r0, [pc, #48]	; (8001c94 <MX_ADC1_Init+0xb8>)
 8001c62:	f001 fa05 	bl	8003070 <HAL_ADC_ConfigChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001c6c:	f7ff fbf4 	bl	8001458 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c70:	2301      	movs	r3, #1
 8001c72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001c74:	2302      	movs	r3, #2
 8001c76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c78:	463b      	mov	r3, r7
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_ADC1_Init+0xb8>)
 8001c7e:	f001 f9f7 	bl	8003070 <HAL_ADC_ConfigChannel>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001c88:	f7ff fbe6 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c8c:	bf00      	nop
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	200003d0 	.word	0x200003d0
 8001c98:	40012000 	.word	0x40012000
 8001c9c:	0f000001 	.word	0x0f000001

08001ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b094      	sub	sp, #80	; 0x50
 8001ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	2234      	movs	r2, #52	; 0x34
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f010 fa8a 	bl	80121c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb4:	f107 0308 	add.w	r3, r7, #8
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <SystemClock_Config+0xd4>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	4a29      	ldr	r2, [pc, #164]	; (8001d74 <SystemClock_Config+0xd4>)
 8001cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd4:	4b27      	ldr	r3, [pc, #156]	; (8001d74 <SystemClock_Config+0xd4>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <SystemClock_Config+0xd8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cec:	4a22      	ldr	r2, [pc, #136]	; (8001d78 <SystemClock_Config+0xd8>)
 8001cee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <SystemClock_Config+0xd8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001d00:	2305      	movs	r3, #5
 8001d02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d08:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001d18:	2306      	movs	r3, #6
 8001d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001d1c:	2348      	movs	r3, #72	; 0x48
 8001d1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d20:	2302      	movs	r3, #2
 8001d22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001d24:	2303      	movs	r3, #3
 8001d26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	4618      	mov	r0, r3
 8001d32:	f005 fc3d 	bl	80075b0 <HAL_RCC_OscConfig>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001d3c:	f7ff fb8c 	bl	8001458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d40:	230f      	movs	r3, #15
 8001d42:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d44:	2302      	movs	r3, #2
 8001d46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d56:	f107 0308 	add.w	r3, r7, #8
 8001d5a:	2102      	movs	r1, #2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f004 fe07 	bl	8006970 <HAL_RCC_ClockConfig>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001d68:	f7ff fb76 	bl	8001458 <Error_Handler>
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	3750      	adds	r7, #80	; 0x50
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40007000 	.word	0x40007000

08001d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
 8001d90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	4b49      	ldr	r3, [pc, #292]	; (8001ebc <MX_GPIO_Init+0x140>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a48      	ldr	r2, [pc, #288]	; (8001ebc <MX_GPIO_Init+0x140>)
 8001d9c:	f043 0304 	orr.w	r3, r3, #4
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b46      	ldr	r3, [pc, #280]	; (8001ebc <MX_GPIO_Init+0x140>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b42      	ldr	r3, [pc, #264]	; (8001ebc <MX_GPIO_Init+0x140>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a41      	ldr	r2, [pc, #260]	; (8001ebc <MX_GPIO_Init+0x140>)
 8001db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b3f      	ldr	r3, [pc, #252]	; (8001ebc <MX_GPIO_Init+0x140>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	4b3b      	ldr	r3, [pc, #236]	; (8001ebc <MX_GPIO_Init+0x140>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a3a      	ldr	r2, [pc, #232]	; (8001ebc <MX_GPIO_Init+0x140>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b38      	ldr	r3, [pc, #224]	; (8001ebc <MX_GPIO_Init+0x140>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	4b34      	ldr	r3, [pc, #208]	; (8001ebc <MX_GPIO_Init+0x140>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a33      	ldr	r2, [pc, #204]	; (8001ebc <MX_GPIO_Init+0x140>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b31      	ldr	r3, [pc, #196]	; (8001ebc <MX_GPIO_Init+0x140>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZ_Pin|CM1_Pin|CM2_Pin, GPIO_PIN_RESET);
 8001e02:	2200      	movs	r2, #0
 8001e04:	210e      	movs	r1, #14
 8001e06:	482e      	ldr	r0, [pc, #184]	; (8001ec0 <MX_GPIO_Init+0x144>)
 8001e08:	f001 fe68 	bl	8003adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|USB_IO_Pin, GPIO_PIN_RESET);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001e12:	482c      	ldr	r0, [pc, #176]	; (8001ec4 <MX_GPIO_Init+0x148>)
 8001e14:	f001 fe62 	bl	8003adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e1e:	482a      	ldr	r0, [pc, #168]	; (8001ec8 <MX_GPIO_Init+0x14c>)
 8001e20:	f001 fe5c 	bl	8003adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e2a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4821      	ldr	r0, [pc, #132]	; (8001ec0 <MX_GPIO_Init+0x144>)
 8001e3c:	f001 fcba 	bl	80037b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZ_Pin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 8001e40:	2302      	movs	r3, #2
 8001e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e44:	2301      	movs	r3, #1
 8001e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	4619      	mov	r1, r3
 8001e56:	481a      	ldr	r0, [pc, #104]	; (8001ec0 <MX_GPIO_Init+0x144>)
 8001e58:	f001 fcac 	bl	80037b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CM1_Pin CM2_Pin */
  GPIO_InitStruct.Pin = CM1_Pin|CM2_Pin;
 8001e5c:	230c      	movs	r3, #12
 8001e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e60:	2301      	movs	r3, #1
 8001e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4619      	mov	r1, r3
 8001e72:	4813      	ldr	r0, [pc, #76]	; (8001ec0 <MX_GPIO_Init+0x144>)
 8001e74:	f001 fc9e 	bl	80037b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin USB_IO_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|USB_IO_Pin;
 8001e78:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4619      	mov	r1, r3
 8001e90:	480c      	ldr	r0, [pc, #48]	; (8001ec4 <MX_GPIO_Init+0x148>)
 8001e92:	f001 fc8f 	bl	80037b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	4619      	mov	r1, r3
 8001eae:	4806      	ldr	r0, [pc, #24]	; (8001ec8 <MX_GPIO_Init+0x14c>)
 8001eb0:	f001 fc80 	bl	80037b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eb4:	bf00      	nop
 8001eb6:	3728      	adds	r7, #40	; 0x28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020800 	.word	0x40020800
 8001ec4:	40020000 	.word	0x40020000
 8001ec8:	40020400 	.word	0x40020400

08001ecc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ed0:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <MX_I2C1_Init+0x50>)
 8001ed2:	4a13      	ldr	r2, [pc, #76]	; (8001f20 <MX_I2C1_Init+0x54>)
 8001ed4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <MX_I2C1_Init+0x50>)
 8001ed8:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <MX_I2C1_Init+0x58>)
 8001eda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <MX_I2C1_Init+0x50>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <MX_I2C1_Init+0x50>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <MX_I2C1_Init+0x50>)
 8001eea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001eee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <MX_I2C1_Init+0x50>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <MX_I2C1_Init+0x50>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001efc:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <MX_I2C1_Init+0x50>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <MX_I2C1_Init+0x50>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f08:	4804      	ldr	r0, [pc, #16]	; (8001f1c <MX_I2C1_Init+0x50>)
 8001f0a:	f001 fe1b 	bl	8003b44 <HAL_I2C_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f14:	f7ff faa0 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000418 	.word	0x20000418
 8001f20:	40005400 	.word	0x40005400
 8001f24:	00061a80 	.word	0x00061a80

08001f28 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f40:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <MX_RTC_Init+0xac>)
 8001f42:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <MX_RTC_Init+0xb0>)
 8001f44:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f46:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <MX_RTC_Init+0xac>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001f4c:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <MX_RTC_Init+0xac>)
 8001f4e:	227f      	movs	r2, #127	; 0x7f
 8001f50:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001f52:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <MX_RTC_Init+0xac>)
 8001f54:	22ff      	movs	r2, #255	; 0xff
 8001f56:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f58:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <MX_RTC_Init+0xac>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f5e:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <MX_RTC_Init+0xac>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f64:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <MX_RTC_Init+0xac>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f6a:	481a      	ldr	r0, [pc, #104]	; (8001fd4 <MX_RTC_Init+0xac>)
 8001f6c:	f005 fdbe 	bl	8007aec <HAL_RTC_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001f76:	f7ff fa6f 	bl	8001458 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	2201      	movs	r2, #1
 8001f92:	4619      	mov	r1, r3
 8001f94:	480f      	ldr	r0, [pc, #60]	; (8001fd4 <MX_RTC_Init+0xac>)
 8001f96:	f005 fe1f 	bl	8007bd8 <HAL_RTC_SetTime>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001fa0:	f7ff fa5a 	bl	8001458 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001fac:	2301      	movs	r3, #1
 8001fae:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4806      	ldr	r0, [pc, #24]	; (8001fd4 <MX_RTC_Init+0xac>)
 8001fbc:	f005 ff04 	bl	8007dc8 <HAL_RTC_SetDate>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001fc6:	f7ff fa47 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001fca:	bf00      	nop
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	2000046c 	.word	0x2000046c
 8001fd8:	40002800 	.word	0x40002800

08001fdc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI2_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001fe0:	4b17      	ldr	r3, [pc, #92]	; (8002040 <MX_SPI2_Init+0x64>)
 8001fe2:	4a18      	ldr	r2, [pc, #96]	; (8002044 <MX_SPI2_Init+0x68>)
 8001fe4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fe6:	4b16      	ldr	r3, [pc, #88]	; (8002040 <MX_SPI2_Init+0x64>)
 8001fe8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fee:	4b14      	ldr	r3, [pc, #80]	; (8002040 <MX_SPI2_Init+0x64>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <MX_SPI2_Init+0x64>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <MX_SPI2_Init+0x64>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <MX_SPI2_Init+0x64>)
 8002002:	2200      	movs	r2, #0
 8002004:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <MX_SPI2_Init+0x64>)
 8002008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800200c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <MX_SPI2_Init+0x64>)
 8002010:	2200      	movs	r2, #0
 8002012:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <MX_SPI2_Init+0x64>)
 8002016:	2200      	movs	r2, #0
 8002018:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <MX_SPI2_Init+0x64>)
 800201c:	2200      	movs	r2, #0
 800201e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002020:	4b07      	ldr	r3, [pc, #28]	; (8002040 <MX_SPI2_Init+0x64>)
 8002022:	2200      	movs	r2, #0
 8002024:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <MX_SPI2_Init+0x64>)
 8002028:	220a      	movs	r2, #10
 800202a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800202c:	4804      	ldr	r0, [pc, #16]	; (8002040 <MX_SPI2_Init+0x64>)
 800202e:	f006 f85b 	bl	80080e8 <HAL_SPI_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002038:	f7ff fa0e 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}
 8002040:	2000048c 	.word	0x2000048c
 8002044:	40003800 	.word	0x40003800

08002048 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08e      	sub	sp, #56	; 0x38
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800204e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205c:	f107 0320 	add.w	r3, r7, #32
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
 8002074:	615a      	str	r2, [r3, #20]
 8002076:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002078:	4b37      	ldr	r3, [pc, #220]	; (8002158 <MX_TIM3_Init+0x110>)
 800207a:	4a38      	ldr	r2, [pc, #224]	; (800215c <MX_TIM3_Init+0x114>)
 800207c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800207e:	4b36      	ldr	r3, [pc, #216]	; (8002158 <MX_TIM3_Init+0x110>)
 8002080:	2247      	movs	r2, #71	; 0x47
 8002082:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002084:	4b34      	ldr	r3, [pc, #208]	; (8002158 <MX_TIM3_Init+0x110>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800208a:	4b33      	ldr	r3, [pc, #204]	; (8002158 <MX_TIM3_Init+0x110>)
 800208c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002090:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002092:	4b31      	ldr	r3, [pc, #196]	; (8002158 <MX_TIM3_Init+0x110>)
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002098:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <MX_TIM3_Init+0x110>)
 800209a:	2200      	movs	r2, #0
 800209c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800209e:	482e      	ldr	r0, [pc, #184]	; (8002158 <MX_TIM3_Init+0x110>)
 80020a0:	f006 f8ab 	bl	80081fa <HAL_TIM_Base_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80020aa:	f7ff f9d5 	bl	8001458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020b8:	4619      	mov	r1, r3
 80020ba:	4827      	ldr	r0, [pc, #156]	; (8002158 <MX_TIM3_Init+0x110>)
 80020bc:	f006 fc96 	bl	80089ec <HAL_TIM_ConfigClockSource>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80020c6:	f7ff f9c7 	bl	8001458 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80020ca:	4823      	ldr	r0, [pc, #140]	; (8002158 <MX_TIM3_Init+0x110>)
 80020cc:	f006 f954 	bl	8008378 <HAL_TIM_PWM_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80020d6:	f7ff f9bf 	bl	8001458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020e2:	f107 0320 	add.w	r3, r7, #32
 80020e6:	4619      	mov	r1, r3
 80020e8:	481b      	ldr	r0, [pc, #108]	; (8002158 <MX_TIM3_Init+0x110>)
 80020ea:	f007 f87f 	bl	80091ec <HAL_TIMEx_MasterConfigSynchronization>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80020f4:	f7ff f9b0 	bl	8001458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f8:	2360      	movs	r3, #96	; 0x60
 80020fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002108:	1d3b      	adds	r3, r7, #4
 800210a:	2200      	movs	r2, #0
 800210c:	4619      	mov	r1, r3
 800210e:	4812      	ldr	r0, [pc, #72]	; (8002158 <MX_TIM3_Init+0x110>)
 8002110:	f006 fbaa 	bl	8008868 <HAL_TIM_PWM_ConfigChannel>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800211a:	f7ff f99d 	bl	8001458 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	2204      	movs	r2, #4
 8002122:	4619      	mov	r1, r3
 8002124:	480c      	ldr	r0, [pc, #48]	; (8002158 <MX_TIM3_Init+0x110>)
 8002126:	f006 fb9f 	bl	8008868 <HAL_TIM_PWM_ConfigChannel>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002130:	f7ff f992 	bl	8001458 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002134:	1d3b      	adds	r3, r7, #4
 8002136:	2208      	movs	r2, #8
 8002138:	4619      	mov	r1, r3
 800213a:	4807      	ldr	r0, [pc, #28]	; (8002158 <MX_TIM3_Init+0x110>)
 800213c:	f006 fb94 	bl	8008868 <HAL_TIM_PWM_ConfigChannel>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002146:	f7ff f987 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800214a:	4803      	ldr	r0, [pc, #12]	; (8002158 <MX_TIM3_Init+0x110>)
 800214c:	f7ff fadc 	bl	8001708 <HAL_TIM_MspPostInit>

}
 8002150:	bf00      	nop
 8002152:	3738      	adds	r7, #56	; 0x38
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	200004e4 	.word	0x200004e4
 800215c:	40000400 	.word	0x40000400

08002160 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <MX_USART1_UART_Init+0x4c>)
 8002166:	4a12      	ldr	r2, [pc, #72]	; (80021b0 <MX_USART1_UART_Init+0x50>)
 8002168:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <MX_USART1_UART_Init+0x4c>)
 800216c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002170:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <MX_USART1_UART_Init+0x4c>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <MX_USART1_UART_Init+0x4c>)
 800217a:	2200      	movs	r2, #0
 800217c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800217e:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <MX_USART1_UART_Init+0x4c>)
 8002180:	2200      	movs	r2, #0
 8002182:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <MX_USART1_UART_Init+0x4c>)
 8002186:	220c      	movs	r2, #12
 8002188:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800218a:	4b08      	ldr	r3, [pc, #32]	; (80021ac <MX_USART1_UART_Init+0x4c>)
 800218c:	2200      	movs	r2, #0
 800218e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <MX_USART1_UART_Init+0x4c>)
 8002192:	2200      	movs	r2, #0
 8002194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002196:	4805      	ldr	r0, [pc, #20]	; (80021ac <MX_USART1_UART_Init+0x4c>)
 8002198:	f007 f8b8 	bl	800930c <HAL_UART_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021a2:	f7ff f959 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	2000052c 	.word	0x2000052c
 80021b0:	40011000 	.word	0x40011000

080021b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <MX_USART2_UART_Init+0x4c>)
 80021ba:	4a12      	ldr	r2, [pc, #72]	; (8002204 <MX_USART2_UART_Init+0x50>)
 80021bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <MX_USART2_UART_Init+0x4c>)
 80021c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <MX_USART2_UART_Init+0x4c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <MX_USART2_UART_Init+0x4c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <MX_USART2_UART_Init+0x4c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <MX_USART2_UART_Init+0x4c>)
 80021da:	220c      	movs	r2, #12
 80021dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021de:	4b08      	ldr	r3, [pc, #32]	; (8002200 <MX_USART2_UART_Init+0x4c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <MX_USART2_UART_Init+0x4c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021ea:	4805      	ldr	r0, [pc, #20]	; (8002200 <MX_USART2_UART_Init+0x4c>)
 80021ec:	f007 f88e 	bl	800930c <HAL_UART_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021f6:	f7ff f92f 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000570 	.word	0x20000570
 8002204:	40004400 	.word	0x40004400

08002208 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <MX_USART3_UART_Init+0x4c>)
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <MX_USART3_UART_Init+0x50>)
 8002210:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <MX_USART3_UART_Init+0x4c>)
 8002214:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002218:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <MX_USART3_UART_Init+0x4c>)
 800221c:	2200      	movs	r2, #0
 800221e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <MX_USART3_UART_Init+0x4c>)
 8002222:	2200      	movs	r2, #0
 8002224:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002226:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <MX_USART3_UART_Init+0x4c>)
 8002228:	2200      	movs	r2, #0
 800222a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <MX_USART3_UART_Init+0x4c>)
 800222e:	220c      	movs	r2, #12
 8002230:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002232:	4b08      	ldr	r3, [pc, #32]	; (8002254 <MX_USART3_UART_Init+0x4c>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <MX_USART3_UART_Init+0x4c>)
 800223a:	2200      	movs	r2, #0
 800223c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800223e:	4805      	ldr	r0, [pc, #20]	; (8002254 <MX_USART3_UART_Init+0x4c>)
 8002240:	f007 f864 	bl	800930c <HAL_UART_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800224a:	f7ff f905 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	200005b4 	.word	0x200005b4
 8002258:	40004800 	.word	0x40004800

0800225c <BMP390_AssignI2C>:
// variables
I2C_HandleTypeDef *bmp390_phi2c;
static BMP390_CalibrationTypeDef Bmp390calib;

// functions implement
void BMP390_AssignI2C(I2C_HandleTypeDef *phi2c){
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	bmp390_phi2c = phi2c;
 8002264:	4a04      	ldr	r2, [pc, #16]	; (8002278 <BMP390_AssignI2C+0x1c>)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6013      	str	r3, [r2, #0]
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	200005f8 	.word	0x200005f8

0800227c <BMP390_CompensateTemperature>:
	if ( result != HAL_OK ) return result;
	*PressurePtr = BMP390_CompensatePressure(buf);

	return HAL_OK;
}
float BMP390_CompensateTemperature( uint32_t RawTemp ){
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	float pd1, pd2;	// partial data
	pd1 = ( float ) ( RawTemp - Bmp390calib.par_t1 );
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	ee07 3a90 	vmov	s15, r3
 800228a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <BMP390_CompensateTemperature+0x68>)
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002298:	edc7 7a03 	vstr	s15, [r7, #12]
	pd2 = ( float ) ( pd1 * Bmp390calib.par_t2);
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <BMP390_CompensateTemperature+0x68>)
 800229e:	edd3 7a01 	vldr	s15, [r3, #4]
 80022a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80022a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022aa:	edc7 7a02 	vstr	s15, [r7, #8]
	Bmp390calib.t_lin = pd2 + ( pd1 * pd1 ) * Bmp390calib.par_t3;
 80022ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80022b2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80022b6:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <BMP390_CompensateTemperature+0x68>)
 80022b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80022bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80022c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <BMP390_CompensateTemperature+0x68>)
 80022ca:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	return Bmp390calib.t_lin;
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <BMP390_CompensateTemperature+0x68>)
 80022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d2:	ee07 3a90 	vmov	s15, r3
}
 80022d6:	eeb0 0a67 	vmov.f32	s0, s15
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	200005fc 	.word	0x200005fc

080022e8 <BMP390_CompensatePressure>:
float BMP390_CompensatePressure( uint32_t RawPres ){
 80022e8:	b480      	push	{r7}
 80022ea:	b089      	sub	sp, #36	; 0x24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
	float pd1, pd2, pd3;
	float po1, po2, po3;	// partial out

	// independent from pressure
	pd1 = Bmp390calib.par_p6 *  Bmp390calib.t_lin;
 80022f0:	4b6b      	ldr	r3, [pc, #428]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 80022f2:	ed93 7a08 	vldr	s14, [r3, #32]
 80022f6:	4b6a      	ldr	r3, [pc, #424]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 80022f8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80022fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002300:	edc7 7a07 	vstr	s15, [r7, #28]
	pd2 = Bmp390calib.par_p7 * (Bmp390calib.t_lin * Bmp390calib.t_lin);
 8002304:	4b66      	ldr	r3, [pc, #408]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 8002306:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800230a:	4b65      	ldr	r3, [pc, #404]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 800230c:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002310:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 8002312:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800231a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800231e:	edc7 7a06 	vstr	s15, [r7, #24]
	pd3 = Bmp390calib.par_p8 * (Bmp390calib.t_lin * Bmp390calib.t_lin * Bmp390calib.t_lin);
 8002322:	4b5f      	ldr	r3, [pc, #380]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 8002324:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002328:	4b5d      	ldr	r3, [pc, #372]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 800232a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800232e:	4b5c      	ldr	r3, [pc, #368]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 8002330:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002334:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002338:	4b59      	ldr	r3, [pc, #356]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 800233a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800233e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002346:	edc7 7a05 	vstr	s15, [r7, #20]
	po1 = Bmp390calib.par_p5 +  pd1 + pd2 + pd3;
 800234a:	4b55      	ldr	r3, [pc, #340]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 800234c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002350:	edd7 7a07 	vldr	s15, [r7, #28]
 8002354:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002358:	edd7 7a06 	vldr	s15, [r7, #24]
 800235c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002360:	ed97 7a05 	vldr	s14, [r7, #20]
 8002364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002368:	edc7 7a04 	vstr	s15, [r7, #16]

	// linear to pressure
	pd1 = Bmp390calib.par_p2 *  Bmp390calib.t_lin;
 800236c:	4b4c      	ldr	r3, [pc, #304]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 800236e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002372:	4b4b      	ldr	r3, [pc, #300]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 8002374:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800237c:	edc7 7a07 	vstr	s15, [r7, #28]
	pd2 = Bmp390calib.par_p3 * (Bmp390calib.t_lin * Bmp390calib.t_lin);
 8002380:	4b47      	ldr	r3, [pc, #284]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 8002382:	ed93 7a05 	vldr	s14, [r3, #20]
 8002386:	4b46      	ldr	r3, [pc, #280]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 8002388:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800238c:	4b44      	ldr	r3, [pc, #272]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 800238e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002392:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239a:	edc7 7a06 	vstr	s15, [r7, #24]
	pd3 = Bmp390calib.par_p4 * (Bmp390calib.t_lin * Bmp390calib.t_lin * Bmp390calib.t_lin);
 800239e:	4b40      	ldr	r3, [pc, #256]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 80023a0:	ed93 7a06 	vldr	s14, [r3, #24]
 80023a4:	4b3e      	ldr	r3, [pc, #248]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 80023a6:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80023aa:	4b3d      	ldr	r3, [pc, #244]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 80023ac:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80023b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023b4:	4b3a      	ldr	r3, [pc, #232]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 80023b6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80023ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c2:	edc7 7a05 	vstr	s15, [r7, #20]
	po2 = ( float ) RawPres * (Bmp390calib.par_p1 + pd1 + pd2 + pd3);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	ee07 3a90 	vmov	s15, r3
 80023cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023d0:	4b33      	ldr	r3, [pc, #204]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 80023d2:	edd3 6a03 	vldr	s13, [r3, #12]
 80023d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80023da:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80023de:	edd7 7a06 	vldr	s15, [r7, #24]
 80023e2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80023e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80023ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f2:	edc7 7a03 	vstr	s15, [r7, #12]

	// power 2
	pd1 = (float) RawPres     * (float) RawPres;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	ee07 3a90 	vmov	s15, r3
 80023fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	ee07 3a90 	vmov	s15, r3
 8002406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800240a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240e:	edc7 7a07 	vstr	s15, [r7, #28]
	pd2 = Bmp390calib.par_p9 +  Bmp390calib.par_p10 * Bmp390calib.t_lin;
 8002412:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 8002414:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002418:	4b21      	ldr	r3, [pc, #132]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 800241a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 8002420:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002424:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002428:	ee77 7a27 	vadd.f32	s15, s14, s15
 800242c:	edc7 7a06 	vstr	s15, [r7, #24]
	po3 = pd1 * pd2;
 8002430:	ed97 7a07 	vldr	s14, [r7, #28]
 8002434:	edd7 7a06 	vldr	s15, [r7, #24]
 8002438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243c:	edc7 7a02 	vstr	s15, [r7, #8]

	// power 3
	pd3 = ((float) RawPres * (float) RawPres * (float) RawPres) * Bmp390calib.par_p11;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	ee07 3a90 	vmov	s15, r3
 8002450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002454:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002462:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002466:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <BMP390_CompensatePressure+0x1b8>)
 8002468:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800246c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002470:	edc7 7a05 	vstr	s15, [r7, #20]

	return po1 + po2 + po3 + pd3;
 8002474:	ed97 7a04 	vldr	s14, [r7, #16]
 8002478:	edd7 7a03 	vldr	s15, [r7, #12]
 800247c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002480:	edd7 7a02 	vldr	s15, [r7, #8]
 8002484:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002488:	edd7 7a05 	vldr	s15, [r7, #20]
 800248c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002490:	eeb0 0a67 	vmov.f32	s0, s15
 8002494:	3724      	adds	r7, #36	; 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	200005fc 	.word	0x200005fc

080024a4 <BMP390_ReadCalibration>:
HAL_StatusTypeDef BMP390_ReadCalibration(void){
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08c      	sub	sp, #48	; 0x30
 80024a8:	af00      	add	r7, sp, #0
	// declare
	uint16_t	nvm_par_t1 = 0, nvm_par_t2 = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80024ae:	2300      	movs	r3, #0
 80024b0:	85bb      	strh	r3, [r7, #44]	; 0x2c
	int8_t		nvm_par_t3 = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	int16_t		nvm_par_p1 = 0, nvm_par_p2 = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	853b      	strh	r3, [r7, #40]	; 0x28
 80024bc:	2300      	movs	r3, #0
 80024be:	84fb      	strh	r3, [r7, #38]	; 0x26
	int8_t		nvm_par_p3 = 0, nvm_par_p4 = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80024c6:	2300      	movs	r3, #0
 80024c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint16_t	nvm_par_p5 = 0, nvm_par_p6 = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80024d0:	2300      	movs	r3, #0
 80024d2:	843b      	strh	r3, [r7, #32]
	int8_t		nvm_par_p7 = 0, nvm_par_p8 = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	77fb      	strb	r3, [r7, #31]
 80024d8:	2300      	movs	r3, #0
 80024da:	77bb      	strb	r3, [r7, #30]
	int16_t		nvm_par_p9 = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	83bb      	strh	r3, [r7, #28]
	int8_t		nvm_par_p10 = 0, nvm_par_p11 = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	76fb      	strb	r3, [r7, #27]
 80024e4:	2300      	movs	r3, #0
 80024e6:	76bb      	strb	r3, [r7, #26]

	uint8_t buf[21];
	HAL_StatusTypeDef result;

	// read
	result = BMP390_Read(BMP390_REG_NVMPAR, buf, sizeof(buf), 10);
 80024e8:	1d39      	adds	r1, r7, #4
 80024ea:	230a      	movs	r3, #10
 80024ec:	2215      	movs	r2, #21
 80024ee:	2031      	movs	r0, #49	; 0x31
 80024f0:	f000 f99a 	bl	8002828 <BMP390_Read>
 80024f4:	4603      	mov	r3, r0
 80024f6:	767b      	strb	r3, [r7, #25]
	if ( result != HAL_OK) return result;
 80024f8:	7e7b      	ldrb	r3, [r7, #25]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <BMP390_ReadCalibration+0x5e>
 80024fe:	7e7b      	ldrb	r3, [r7, #25]
 8002500:	e100      	b.n	8002704 <BMP390_ReadCalibration+0x260>
	nvm_par_t1 	= ((uint16_t) buf[1] ) 	<< 8 | (uint16_t)buf[0];
 8002502:	797b      	ldrb	r3, [r7, #5]
 8002504:	021b      	lsls	r3, r3, #8
 8002506:	b21a      	sxth	r2, r3
 8002508:	793b      	ldrb	r3, [r7, #4]
 800250a:	b21b      	sxth	r3, r3
 800250c:	4313      	orrs	r3, r2
 800250e:	b21b      	sxth	r3, r3
 8002510:	85fb      	strh	r3, [r7, #46]	; 0x2e
	nvm_par_t2 	= ((uint16_t) buf[3]) 	<< 8 | (uint16_t)buf[2];
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	021b      	lsls	r3, r3, #8
 8002516:	b21a      	sxth	r2, r3
 8002518:	79bb      	ldrb	r3, [r7, #6]
 800251a:	b21b      	sxth	r3, r3
 800251c:	4313      	orrs	r3, r2
 800251e:	b21b      	sxth	r3, r3
 8002520:	85bb      	strh	r3, [r7, #44]	; 0x2c
	nvm_par_t3 	=  (int8_t)   buf[4];
 8002522:	7a3b      	ldrb	r3, [r7, #8]
 8002524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	nvm_par_p1 	= ((int16_t)  buf[6])	<< 8 |  (int16_t)buf[5];
 8002528:	7abb      	ldrb	r3, [r7, #10]
 800252a:	021b      	lsls	r3, r3, #8
 800252c:	b21a      	sxth	r2, r3
 800252e:	7a7b      	ldrb	r3, [r7, #9]
 8002530:	b21b      	sxth	r3, r3
 8002532:	4313      	orrs	r3, r2
 8002534:	853b      	strh	r3, [r7, #40]	; 0x28
	nvm_par_p2 	= ((int16_t)  buf[8])	<< 8 |  (int16_t)buf[7];
 8002536:	7b3b      	ldrb	r3, [r7, #12]
 8002538:	021b      	lsls	r3, r3, #8
 800253a:	b21a      	sxth	r2, r3
 800253c:	7afb      	ldrb	r3, [r7, #11]
 800253e:	b21b      	sxth	r3, r3
 8002540:	4313      	orrs	r3, r2
 8002542:	84fb      	strh	r3, [r7, #38]	; 0x26
	nvm_par_p3 	=  (int8_t)   buf[9];
 8002544:	7b7b      	ldrb	r3, [r7, #13]
 8002546:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	nvm_par_p4 	=  (int8_t)   buf[10];
 800254a:	7bbb      	ldrb	r3, [r7, #14]
 800254c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	nvm_par_p5 	= ((uint16_t) buf[12]) 	<< 8 | (uint16_t)buf[11];
 8002550:	7c3b      	ldrb	r3, [r7, #16]
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	b21a      	sxth	r2, r3
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	b21b      	sxth	r3, r3
 800255a:	4313      	orrs	r3, r2
 800255c:	b21b      	sxth	r3, r3
 800255e:	847b      	strh	r3, [r7, #34]	; 0x22
	nvm_par_p6 	= ((uint16_t) buf[14]) 	<< 8 | (uint16_t)buf[13];
 8002560:	7cbb      	ldrb	r3, [r7, #18]
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	b21a      	sxth	r2, r3
 8002566:	7c7b      	ldrb	r3, [r7, #17]
 8002568:	b21b      	sxth	r3, r3
 800256a:	4313      	orrs	r3, r2
 800256c:	b21b      	sxth	r3, r3
 800256e:	843b      	strh	r3, [r7, #32]
	nvm_par_p7 	=  (int8_t)   buf[15];
 8002570:	7cfb      	ldrb	r3, [r7, #19]
 8002572:	77fb      	strb	r3, [r7, #31]
	nvm_par_p8 	=  (int8_t)	  buf[16];
 8002574:	7d3b      	ldrb	r3, [r7, #20]
 8002576:	77bb      	strb	r3, [r7, #30]
	nvm_par_p9 	= ((int16_t)  buf[18]) 	<< 8 |  (int16_t)buf[17];
 8002578:	7dbb      	ldrb	r3, [r7, #22]
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	b21a      	sxth	r2, r3
 800257e:	7d7b      	ldrb	r3, [r7, #21]
 8002580:	b21b      	sxth	r3, r3
 8002582:	4313      	orrs	r3, r2
 8002584:	83bb      	strh	r3, [r7, #28]
	nvm_par_p10 =  (int8_t)   buf[19];
 8002586:	7dfb      	ldrb	r3, [r7, #23]
 8002588:	76fb      	strb	r3, [r7, #27]
	nvm_par_p11 =  (int8_t)   buf[20];
 800258a:	7e3b      	ldrb	r3, [r7, #24]
 800258c:	76bb      	strb	r3, [r7, #26]

	// calculate actual value
	Bmp390calib.par_t1 	= ( float ) 	nvm_par_t1 				/ 0.00390625f;
 800258e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002590:	ee07 3a90 	vmov	s15, r3
 8002594:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002598:	eddf 6a5c 	vldr	s13, [pc, #368]	; 800270c <BMP390_ReadCalibration+0x268>
 800259c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025a0:	4b5b      	ldr	r3, [pc, #364]	; (8002710 <BMP390_ReadCalibration+0x26c>)
 80025a2:	edc3 7a00 	vstr	s15, [r3]
	Bmp390calib.par_t2 	= ( float ) 	nvm_par_t2 				/ 1073741824.f;
 80025a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80025a8:	ee07 3a90 	vmov	s15, r3
 80025ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025b0:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002714 <BMP390_ReadCalibration+0x270>
 80025b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025b8:	4b55      	ldr	r3, [pc, #340]	; (8002710 <BMP390_ReadCalibration+0x26c>)
 80025ba:	edc3 7a01 	vstr	s15, [r3, #4]
	Bmp390calib.par_t3 	= ( float ) 	nvm_par_t3 				/ 281474976710656.f;
 80025be:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80025c2:	ee07 3a90 	vmov	s15, r3
 80025c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025ca:	eddf 6a53 	vldr	s13, [pc, #332]	; 8002718 <BMP390_ReadCalibration+0x274>
 80025ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025d2:	4b4f      	ldr	r3, [pc, #316]	; (8002710 <BMP390_ReadCalibration+0x26c>)
 80025d4:	edc3 7a02 	vstr	s15, [r3, #8]
	Bmp390calib.par_p1 	= ( float ) (	nvm_par_p1 - 16384.f) 	/ 1048576.f;
 80025d8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80025dc:	ee07 3a90 	vmov	s15, r3
 80025e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025e4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800271c <BMP390_ReadCalibration+0x278>
 80025e8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80025ec:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8002720 <BMP390_ReadCalibration+0x27c>
 80025f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025f4:	4b46      	ldr	r3, [pc, #280]	; (8002710 <BMP390_ReadCalibration+0x26c>)
 80025f6:	edc3 7a03 	vstr	s15, [r3, #12]
	Bmp390calib.par_p2 	= ( float ) (	nvm_par_p2 - 16384.f) 	/ 536870912.f;
 80025fa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80025fe:	ee07 3a90 	vmov	s15, r3
 8002602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002606:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800271c <BMP390_ReadCalibration+0x278>
 800260a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800260e:	eddf 6a45 	vldr	s13, [pc, #276]	; 8002724 <BMP390_ReadCalibration+0x280>
 8002612:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002616:	4b3e      	ldr	r3, [pc, #248]	; (8002710 <BMP390_ReadCalibration+0x26c>)
 8002618:	edc3 7a04 	vstr	s15, [r3, #16]
	Bmp390calib.par_p3 	= ( float ) 	nvm_par_p3				/ 4294967296.f;
 800261c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002620:	ee07 3a90 	vmov	s15, r3
 8002624:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002628:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8002728 <BMP390_ReadCalibration+0x284>
 800262c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002630:	4b37      	ldr	r3, [pc, #220]	; (8002710 <BMP390_ReadCalibration+0x26c>)
 8002632:	edc3 7a05 	vstr	s15, [r3, #20]
	Bmp390calib.par_p4 	= ( float ) 	nvm_par_p4				/ 137438953472.f;
 8002636:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800263a:	ee07 3a90 	vmov	s15, r3
 800263e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002642:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800272c <BMP390_ReadCalibration+0x288>
 8002646:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800264a:	4b31      	ldr	r3, [pc, #196]	; (8002710 <BMP390_ReadCalibration+0x26c>)
 800264c:	edc3 7a06 	vstr	s15, [r3, #24]
	Bmp390calib.par_p5 	= ( float ) 	nvm_par_p5				/ 0.125f;
 8002650:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002652:	ee07 3a90 	vmov	s15, r3
 8002656:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800265a:	eef4 6a00 	vmov.f32	s13, #64	; 0x3e000000  0.125
 800265e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002662:	4b2b      	ldr	r3, [pc, #172]	; (8002710 <BMP390_ReadCalibration+0x26c>)
 8002664:	edc3 7a07 	vstr	s15, [r3, #28]
	Bmp390calib.par_p6 	= ( float ) 	nvm_par_p6				/ 64.f;
 8002668:	8c3b      	ldrh	r3, [r7, #32]
 800266a:	ee07 3a90 	vmov	s15, r3
 800266e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002672:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8002730 <BMP390_ReadCalibration+0x28c>
 8002676:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800267a:	4b25      	ldr	r3, [pc, #148]	; (8002710 <BMP390_ReadCalibration+0x26c>)
 800267c:	edc3 7a08 	vstr	s15, [r3, #32]
	Bmp390calib.par_p7 	= ( float ) 	nvm_par_p7				/ 256.f;
 8002680:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002684:	ee07 3a90 	vmov	s15, r3
 8002688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800268c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8002734 <BMP390_ReadCalibration+0x290>
 8002690:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002694:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <BMP390_ReadCalibration+0x26c>)
 8002696:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	Bmp390calib.par_p8 	= ( float ) 	nvm_par_p8				/ 32768.f;
 800269a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800269e:	ee07 3a90 	vmov	s15, r3
 80026a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026a6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8002738 <BMP390_ReadCalibration+0x294>
 80026aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ae:	4b18      	ldr	r3, [pc, #96]	; (8002710 <BMP390_ReadCalibration+0x26c>)
 80026b0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	Bmp390calib.par_p9		= ( float ) 	nvm_par_p9				/ 281474976710656.f;
 80026b4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80026b8:	ee07 3a90 	vmov	s15, r3
 80026bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026c0:	eddf 6a15 	vldr	s13, [pc, #84]	; 8002718 <BMP390_ReadCalibration+0x274>
 80026c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026c8:	4b11      	ldr	r3, [pc, #68]	; (8002710 <BMP390_ReadCalibration+0x26c>)
 80026ca:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	Bmp390calib.par_p10	= ( float ) 	nvm_par_p10				/ 281474976710656.f;
 80026ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80026d2:	ee07 3a90 	vmov	s15, r3
 80026d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026da:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002718 <BMP390_ReadCalibration+0x274>
 80026de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <BMP390_ReadCalibration+0x26c>)
 80026e4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	Bmp390calib.par_p11	= ( float ) 	nvm_par_p11				/ 36893488147419103232.f;
 80026e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80026ec:	ee07 3a90 	vmov	s15, r3
 80026f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026f4:	eddf 6a11 	vldr	s13, [pc, #68]	; 800273c <BMP390_ReadCalibration+0x298>
 80026f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026fc:	4b04      	ldr	r3, [pc, #16]	; (8002710 <BMP390_ReadCalibration+0x26c>)
 80026fe:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3730      	adds	r7, #48	; 0x30
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	3b800000 	.word	0x3b800000
 8002710:	200005fc 	.word	0x200005fc
 8002714:	4e800000 	.word	0x4e800000
 8002718:	57800000 	.word	0x57800000
 800271c:	46800000 	.word	0x46800000
 8002720:	49800000 	.word	0x49800000
 8002724:	4e000000 	.word	0x4e000000
 8002728:	4f800000 	.word	0x4f800000
 800272c:	52000000 	.word	0x52000000
 8002730:	42800000 	.word	0x42800000
 8002734:	43800000 	.word	0x43800000
 8002738:	47000000 	.word	0x47000000
 800273c:	60000000 	.word	0x60000000

08002740 <BMP390_ReadRawPressure>:
HAL_StatusTypeDef BMP390_ReadRawPressure( uint32_t *Buf, uint32_t Timeout){
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef result = BMP390_Read(BMP390_REG_PRES, buffer, sizeof(buffer), Timeout);
 800274a:	f107 010c 	add.w	r1, r7, #12
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2203      	movs	r2, #3
 8002752:	2004      	movs	r0, #4
 8002754:	f000 f868 	bl	8002828 <BMP390_Read>
 8002758:	4603      	mov	r3, r0
 800275a:	73fb      	strb	r3, [r7, #15]
	if ( result != HAL_OK ) return result;
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <BMP390_ReadRawPressure+0x26>
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	e00a      	b.n	800277c <BMP390_ReadRawPressure+0x3c>
	*Buf = ( buffer[2] << 16 ) | ( buffer[1] << 8 ) | buffer[0];
 8002766:	7bbb      	ldrb	r3, [r7, #14]
 8002768:	041a      	lsls	r2, r3, #16
 800276a:	7b7b      	ldrb	r3, [r7, #13]
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	4313      	orrs	r3, r2
 8002770:	7b3a      	ldrb	r2, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	461a      	mov	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	601a      	str	r2, [r3, #0]

	return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <BMP390_ReadRawTemperature>:
HAL_StatusTypeDef BMP390_ReadRawTemperature( uint32_t *Buf, uint32_t Timeout){
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef result = BMP390_Read(BMP390_REG_TEMP, buffer, sizeof(buffer), Timeout);
 800278e:	f107 010c 	add.w	r1, r7, #12
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2203      	movs	r2, #3
 8002796:	2007      	movs	r0, #7
 8002798:	f000 f846 	bl	8002828 <BMP390_Read>
 800279c:	4603      	mov	r3, r0
 800279e:	73fb      	strb	r3, [r7, #15]
	if ( result != HAL_OK ) return result;
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <BMP390_ReadRawTemperature+0x26>
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	e00a      	b.n	80027c0 <BMP390_ReadRawTemperature+0x3c>
	*Buf = ( buffer[2] << 16 ) | ( buffer[1] << 8 ) | buffer[0];
 80027aa:	7bbb      	ldrb	r3, [r7, #14]
 80027ac:	041a      	lsls	r2, r3, #16
 80027ae:	7b7b      	ldrb	r3, [r7, #13]
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	4313      	orrs	r3, r2
 80027b4:	7b3a      	ldrb	r2, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	461a      	mov	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	601a      	str	r2, [r3, #0]

	return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <BMP390_SoftReset>:
	if ( result != HAL_OK ) return result;
	*Buf = ( buffer[2] << 16 ) | ( buffer[1] << 8 ) | buffer[0];

	return HAL_OK;
}
HAL_StatusTypeDef BMP390_SoftReset( uint32_t Timeout ){
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	uint8_t Buf = BMP390_CMD_SFTRST;
 80027d0:	23b6      	movs	r3, #182	; 0xb6
 80027d2:	73fb      	strb	r3, [r7, #15]
	return BMP390_Write( BMP390_REG_CMD, &Buf, 1, Timeout );
 80027d4:	f107 010f 	add.w	r1, r7, #15
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	207e      	movs	r0, #126	; 0x7e
 80027de:	f000 f805 	bl	80027ec <BMP390_Write>
 80027e2:	4603      	mov	r3, r0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <BMP390_Write>:
HAL_StatusTypeDef BMP390_Write(uint8_t MemAddress, uint8_t *Buf, uint16_t Size, uint32_t Timeout){
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af04      	add	r7, sp, #16
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607b      	str	r3, [r7, #4]
 80027f6:	4603      	mov	r3, r0
 80027f8:	73fb      	strb	r3, [r7, #15]
 80027fa:	4613      	mov	r3, r2
 80027fc:	81bb      	strh	r3, [r7, #12]
	return HAL_I2C_Mem_Write(bmp390_phi2c, BMP390_ADDRESS, MemAddress, I2C_MEMADD_SIZE_8BIT, Buf, Size, Timeout);
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <BMP390_Write+0x38>)
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	b29a      	uxth	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	9302      	str	r3, [sp, #8]
 800280a:	89bb      	ldrh	r3, [r7, #12]
 800280c:	9301      	str	r3, [sp, #4]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	2301      	movs	r3, #1
 8002814:	21ee      	movs	r1, #238	; 0xee
 8002816:	f001 fdfd 	bl	8004414 <HAL_I2C_Mem_Write>
 800281a:	4603      	mov	r3, r0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	200005f8 	.word	0x200005f8

08002828 <BMP390_Read>:
HAL_StatusTypeDef BMP390_Read(uint8_t MemAddress, uint8_t *Buf, uint16_t Size, uint32_t Timeout){
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af04      	add	r7, sp, #16
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607b      	str	r3, [r7, #4]
 8002832:	4603      	mov	r3, r0
 8002834:	73fb      	strb	r3, [r7, #15]
 8002836:	4613      	mov	r3, r2
 8002838:	81bb      	strh	r3, [r7, #12]
	return HAL_I2C_Mem_Read(bmp390_phi2c, BMP390_ADDRESS, MemAddress, I2C_MEMADD_SIZE_8BIT, Buf, Size, Timeout);
 800283a:	4b09      	ldr	r3, [pc, #36]	; (8002860 <BMP390_Read+0x38>)
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	b29a      	uxth	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	9302      	str	r3, [sp, #8]
 8002846:	89bb      	ldrh	r3, [r7, #12]
 8002848:	9301      	str	r3, [sp, #4]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	2301      	movs	r3, #1
 8002850:	21ee      	movs	r1, #238	; 0xee
 8002852:	f001 fed9 	bl	8004608 <HAL_I2C_Mem_Read>
 8002856:	4603      	mov	r3, r0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	200005f8 	.word	0x200005f8

08002864 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	4619      	mov	r1, r3
 8002872:	2007      	movs	r0, #7
 8002874:	f000 f87a 	bl	800296c <bno055_writeData>
 8002878:	bf00      	nop
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	4619      	mov	r1, r3
 800288e:	203d      	movs	r0, #61	; 0x3d
 8002890:	f000 f86c 	bl	800296c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d103      	bne.n	80028a2 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 800289a:	2013      	movs	r0, #19
 800289c:	f000 f85a 	bl	8002954 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80028a0:	e002      	b.n	80028a8 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 80028a2:	2007      	movs	r0, #7
 80028a4:	f000 f856 	bl	8002954 <bno055_delay>
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80028b4:	2000      	movs	r0, #0
 80028b6:	f7ff ffe3 	bl	8002880 <bno055_setOperationMode>
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}

080028be <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80028be:	b580      	push	{r7, lr}
 80028c0:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80028c2:	200c      	movs	r0, #12
 80028c4:	f7ff ffdc 	bl	8002880 <bno055_setOperationMode>
}
 80028c8:	bf00      	nop
 80028ca:	bd80      	pop	{r7, pc}

080028cc <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(1); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(0); }

void bno055_reset() {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80028d0:	2120      	movs	r1, #32
 80028d2:	203f      	movs	r0, #63	; 0x3f
 80028d4:	f000 f84a 	bl	800296c <bno055_writeData>
  bno055_delay(700);
 80028d8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80028dc:	f000 f83a 	bl	8002954 <bno055_delay>
}
 80028e0:	bf00      	nop
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
  bno055_reset();
 80028ea:	f7ff ffef 	bl	80028cc <bno055_reset>

  uint8_t id = 0;
 80028ee:	2300      	movs	r3, #0
 80028f0:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80028f2:	1dfb      	adds	r3, r7, #7
 80028f4:	2201      	movs	r2, #1
 80028f6:	4619      	mov	r1, r3
 80028f8:	2000      	movs	r0, #0
 80028fa:	f000 f923 	bl	8002b44 <bno055_readData>
  if (id != BNO055_ID) {
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	2ba0      	cmp	r3, #160	; 0xa0
 8002902:	d004      	beq.n	800290e <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	4619      	mov	r1, r3
 8002908:	4809      	ldr	r0, [pc, #36]	; (8002930 <bno055_setup+0x4c>)
 800290a:	f010 f9af 	bl	8012c6c <iprintf>
  }
  bno055_setPage(0);
 800290e:	2000      	movs	r0, #0
 8002910:	f7ff ffa8 	bl	8002864 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8002914:	2100      	movs	r1, #0
 8002916:	203f      	movs	r0, #63	; 0x3f
 8002918:	f000 f828 	bl	800296c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 800291c:	f7ff ffc8 	bl	80028b0 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8002920:	200a      	movs	r0, #10
 8002922:	f000 f817 	bl	8002954 <bno055_delay>
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	08014dac 	.word	0x08014dac

08002934 <bno055_assignI2C>:
#include <module/bno055_stm32.h>

I2C_HandleTypeDef *_bno055_i2c_port;

// Functions
void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 800293c:	4a04      	ldr	r2, [pc, #16]	; (8002950 <bno055_assignI2C+0x1c>)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6013      	str	r3, [r2, #0]
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	20000638 	.word	0x20000638

08002954 <bno055_delay>:

void bno055_delay(int time) {
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fb1e 	bl	8002fa0 <HAL_Delay>
#endif
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af02      	add	r7, sp, #8
 8002972:	4603      	mov	r3, r0
 8002974:	460a      	mov	r2, r1
 8002976:	71fb      	strb	r3, [r7, #7]
 8002978:	4613      	mov	r3, r2
 800297a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	733b      	strb	r3, [r7, #12]
 8002980:	79bb      	ldrb	r3, [r7, #6]
 8002982:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8002984:	4b5a      	ldr	r3, [pc, #360]	; (8002af0 <bno055_writeData+0x184>)
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	f107 020c 	add.w	r2, r7, #12
 800298c:	230a      	movs	r3, #10
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	2302      	movs	r3, #2
 8002992:	2150      	movs	r1, #80	; 0x50
 8002994:	f001 fa1a 	bl	8003dcc <HAL_I2C_Master_Transmit>
 8002998:	4603      	mov	r3, r0
 800299a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 800299c:	7dfb      	ldrb	r3, [r7, #23]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 80a0 	beq.w	8002ae4 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80029a4:	7dfb      	ldrb	r3, [r7, #23]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d103      	bne.n	80029b2 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80029aa:	4852      	ldr	r0, [pc, #328]	; (8002af4 <bno055_writeData+0x188>)
 80029ac:	f010 f9e4 	bl	8012d78 <puts>
 80029b0:	e012      	b.n	80029d8 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d103      	bne.n	80029c0 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80029b8:	484f      	ldr	r0, [pc, #316]	; (8002af8 <bno055_writeData+0x18c>)
 80029ba:	f010 f9dd 	bl	8012d78 <puts>
 80029be:	e00b      	b.n	80029d8 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 80029c0:	7dfb      	ldrb	r3, [r7, #23]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d103      	bne.n	80029ce <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80029c6:	484d      	ldr	r0, [pc, #308]	; (8002afc <bno055_writeData+0x190>)
 80029c8:	f010 f9d6 	bl	8012d78 <puts>
 80029cc:	e004      	b.n	80029d8 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 80029ce:	7dfb      	ldrb	r3, [r7, #23]
 80029d0:	4619      	mov	r1, r3
 80029d2:	484b      	ldr	r0, [pc, #300]	; (8002b00 <bno055_writeData+0x194>)
 80029d4:	f010 f94a 	bl	8012c6c <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 80029d8:	4b45      	ldr	r3, [pc, #276]	; (8002af0 <bno055_writeData+0x184>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f002 f847 	bl	8004a70 <HAL_I2C_GetError>
 80029e2:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d07e      	beq.n	8002ae8 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d103      	bne.n	80029f8 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80029f0:	4844      	ldr	r0, [pc, #272]	; (8002b04 <bno055_writeData+0x198>)
 80029f2:	f010 f9c1 	bl	8012d78 <puts>
 80029f6:	e021      	b.n	8002a3c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d103      	bne.n	8002a06 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80029fe:	4842      	ldr	r0, [pc, #264]	; (8002b08 <bno055_writeData+0x19c>)
 8002a00:	f010 f9ba 	bl	8012d78 <puts>
 8002a04:	e01a      	b.n	8002a3c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d103      	bne.n	8002a14 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8002a0c:	483f      	ldr	r0, [pc, #252]	; (8002b0c <bno055_writeData+0x1a0>)
 8002a0e:	f010 f9b3 	bl	8012d78 <puts>
 8002a12:	e013      	b.n	8002a3c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d103      	bne.n	8002a22 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8002a1a:	483d      	ldr	r0, [pc, #244]	; (8002b10 <bno055_writeData+0x1a4>)
 8002a1c:	f010 f9ac 	bl	8012d78 <puts>
 8002a20:	e00c      	b.n	8002a3c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	2b10      	cmp	r3, #16
 8002a26:	d103      	bne.n	8002a30 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8002a28:	483a      	ldr	r0, [pc, #232]	; (8002b14 <bno055_writeData+0x1a8>)
 8002a2a:	f010 f9a5 	bl	8012d78 <puts>
 8002a2e:	e005      	b.n	8002a3c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d102      	bne.n	8002a3c <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8002a36:	4838      	ldr	r0, [pc, #224]	; (8002b18 <bno055_writeData+0x1ac>)
 8002a38:	f010 f99e 	bl	8012d78 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8002a3c:	4b2c      	ldr	r3, [pc, #176]	; (8002af0 <bno055_writeData+0x184>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f002 f807 	bl	8004a54 <HAL_I2C_GetState>
 8002a46:	4603      	mov	r3, r0
 8002a48:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d103      	bne.n	8002a58 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8002a50:	4832      	ldr	r0, [pc, #200]	; (8002b1c <bno055_writeData+0x1b0>)
 8002a52:	f010 f991 	bl	8012d78 <puts>
 8002a56:	e048      	b.n	8002aea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
 8002a5a:	2b20      	cmp	r3, #32
 8002a5c:	d103      	bne.n	8002a66 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8002a5e:	482f      	ldr	r0, [pc, #188]	; (8002b1c <bno055_writeData+0x1b0>)
 8002a60:	f010 f98a 	bl	8012d78 <puts>
 8002a64:	e041      	b.n	8002aea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	2b24      	cmp	r3, #36	; 0x24
 8002a6a:	d103      	bne.n	8002a74 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8002a6c:	482c      	ldr	r0, [pc, #176]	; (8002b20 <bno055_writeData+0x1b4>)
 8002a6e:	f010 f983 	bl	8012d78 <puts>
 8002a72:	e03a      	b.n	8002aea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b21      	cmp	r3, #33	; 0x21
 8002a78:	d103      	bne.n	8002a82 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8002a7a:	482a      	ldr	r0, [pc, #168]	; (8002b24 <bno055_writeData+0x1b8>)
 8002a7c:	f010 f97c 	bl	8012d78 <puts>
 8002a80:	e033      	b.n	8002aea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	2b22      	cmp	r3, #34	; 0x22
 8002a86:	d103      	bne.n	8002a90 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8002a88:	4827      	ldr	r0, [pc, #156]	; (8002b28 <bno055_writeData+0x1bc>)
 8002a8a:	f010 f975 	bl	8012d78 <puts>
 8002a8e:	e02c      	b.n	8002aea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	2b28      	cmp	r3, #40	; 0x28
 8002a94:	d103      	bne.n	8002a9e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8002a96:	4825      	ldr	r0, [pc, #148]	; (8002b2c <bno055_writeData+0x1c0>)
 8002a98:	f010 f96e 	bl	8012d78 <puts>
 8002a9c:	e025      	b.n	8002aea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	2b29      	cmp	r3, #41	; 0x29
 8002aa2:	d103      	bne.n	8002aac <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8002aa4:	4822      	ldr	r0, [pc, #136]	; (8002b30 <bno055_writeData+0x1c4>)
 8002aa6:	f010 f967 	bl	8012d78 <puts>
 8002aaa:	e01e      	b.n	8002aea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	2b2a      	cmp	r3, #42	; 0x2a
 8002ab0:	d103      	bne.n	8002aba <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8002ab2:	4820      	ldr	r0, [pc, #128]	; (8002b34 <bno055_writeData+0x1c8>)
 8002ab4:	f010 f960 	bl	8012d78 <puts>
 8002ab8:	e017      	b.n	8002aea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	2b60      	cmp	r3, #96	; 0x60
 8002abe:	d103      	bne.n	8002ac8 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8002ac0:	481d      	ldr	r0, [pc, #116]	; (8002b38 <bno055_writeData+0x1cc>)
 8002ac2:	f010 f959 	bl	8012d78 <puts>
 8002ac6:	e010      	b.n	8002aea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2ba0      	cmp	r3, #160	; 0xa0
 8002acc:	d103      	bne.n	8002ad6 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8002ace:	481b      	ldr	r0, [pc, #108]	; (8002b3c <bno055_writeData+0x1d0>)
 8002ad0:	f010 f952 	bl	8012d78 <puts>
 8002ad4:	e009      	b.n	8002aea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	2be0      	cmp	r3, #224	; 0xe0
 8002ada:	d106      	bne.n	8002aea <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8002adc:	4818      	ldr	r0, [pc, #96]	; (8002b40 <bno055_writeData+0x1d4>)
 8002ade:	f010 f94b 	bl	8012d78 <puts>
 8002ae2:	e002      	b.n	8002aea <bno055_writeData+0x17e>
    return;
 8002ae4:	bf00      	nop
 8002ae6:	e000      	b.n	8002aea <bno055_writeData+0x17e>
    return;
 8002ae8:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000638 	.word	0x20000638
 8002af4:	08014de8 	.word	0x08014de8
 8002af8:	08014e0c 	.word	0x08014e0c
 8002afc:	08014e34 	.word	0x08014e34
 8002b00:	08014e58 	.word	0x08014e58
 8002b04:	08014e70 	.word	0x08014e70
 8002b08:	08014e84 	.word	0x08014e84
 8002b0c:	08014e98 	.word	0x08014e98
 8002b10:	08014eac 	.word	0x08014eac
 8002b14:	08014ec0 	.word	0x08014ec0
 8002b18:	08014ed4 	.word	0x08014ed4
 8002b1c:	08014eec 	.word	0x08014eec
 8002b20:	08014f04 	.word	0x08014f04
 8002b24:	08014f18 	.word	0x08014f18
 8002b28:	08014f30 	.word	0x08014f30
 8002b2c:	08014f48 	.word	0x08014f48
 8002b30:	08014f60 	.word	0x08014f60
 8002b34:	08014f80 	.word	0x08014f80
 8002b38:	08014fa0 	.word	0x08014fa0
 8002b3c:	08014fb8 	.word	0x08014fb8
 8002b40:	08014fd0 	.word	0x08014fd0

08002b44 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af02      	add	r7, sp, #8
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	6039      	str	r1, [r7, #0]
 8002b4e:	71fb      	strb	r3, [r7, #7]
 8002b50:	4613      	mov	r3, r2
 8002b52:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <bno055_readData+0x40>)
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	1dfa      	adds	r2, r7, #7
 8002b5a:	2364      	movs	r3, #100	; 0x64
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	2301      	movs	r3, #1
 8002b60:	2150      	movs	r1, #80	; 0x50
 8002b62:	f001 f933 	bl	8003dcc <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <bno055_readData+0x40>)
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	79bb      	ldrb	r3, [r7, #6]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2264      	movs	r2, #100	; 0x64
 8002b70:	9200      	str	r2, [sp, #0]
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	2150      	movs	r1, #80	; 0x50
 8002b76:	f001 fa27 	bl	8003fc8 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000638 	.word	0x20000638

08002b88 <Buzzer_Once>:
#ifndef SRC_MODULE_BUZZER_C_
#define SRC_MODULE_BUZZER_C_

#include "module/buzzer.h"

void Buzzer_Once() {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	2102      	movs	r1, #2
 8002b90:	4806      	ldr	r0, [pc, #24]	; (8002bac <Buzzer_Once+0x24>)
 8002b92:	f000 ffa3 	bl	8003adc <HAL_GPIO_WritePin>
	osDelay(100);
 8002b96:	2064      	movs	r0, #100	; 0x64
 8002b98:	f00b f8e2 	bl	800dd60 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	4802      	ldr	r0, [pc, #8]	; (8002bac <Buzzer_Once+0x24>)
 8002ba2:	f000 ff9b 	bl	8003adc <HAL_GPIO_WritePin>
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40020800 	.word	0x40020800

08002bb0 <Init_BMP390>:

#include <module/init_sensor.h>



void Init_BMP390(void){
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef res1, res2, res3, res4, res5, res6, res7;

	BMP390_AssignI2C(&hi2c1);
 8002bb6:	4837      	ldr	r0, [pc, #220]	; (8002c94 <Init_BMP390+0xe4>)
 8002bb8:	f7ff fb50 	bl	800225c <BMP390_AssignI2C>

	/* Check whether the sensor is ready */
	/*	if ( HAL_I2C_IsDeviceReady(bmp390_phi2c, BMP390_ADDRESS, 10, 10\) != HAL_OK ) Error_Handler();*/

	/* Soft reset */
	res1 = BMP390_SoftReset(1000);
 8002bbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bc0:	f7ff fe02 	bl	80027c8 <BMP390_SoftReset>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	73fb      	strb	r3, [r7, #15]
	if ( BMP390_SoftReset(1000) != HAL_OK ) Error_Handler();
 8002bc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bcc:	f7ff fdfc 	bl	80027c8 <BMP390_SoftReset>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <Init_BMP390+0x2a>
 8002bd6:	f7fe fc3f 	bl	8001458 <Error_Handler>

	/* Set sensor configuration buffers  */
	uint8_t bmp390PWR = BMP390_PWR_ALL_NORMAL;
 8002bda:	2333      	movs	r3, #51	; 0x33
 8002bdc:	723b      	strb	r3, [r7, #8]
	uint8_t bmp390OSR = BMP390_OSR_PX08;
 8002bde:	2318      	movs	r3, #24
 8002be0:	71fb      	strb	r3, [r7, #7]
	uint8_t bmp390ODR = BMP390_ODR_50;
 8002be2:	2302      	movs	r3, #2
 8002be4:	71bb      	strb	r3, [r7, #6]
	uint8_t bmp390CFG = BMP390_CFG_IIR1;
 8002be6:	2302      	movs	r3, #2
 8002be8:	717b      	strb	r3, [r7, #5]

	/* Initial setting */
	if ( (res2 = BMP390_Write(BMP390_REG_OSR, &bmp390OSR, sizeof(bmp390OSR), 10)) != HAL_OK ) Error_Handler();
 8002bea:	1df9      	adds	r1, r7, #7
 8002bec:	230a      	movs	r3, #10
 8002bee:	2201      	movs	r2, #1
 8002bf0:	201c      	movs	r0, #28
 8002bf2:	f7ff fdfb 	bl	80027ec <BMP390_Write>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	73bb      	strb	r3, [r7, #14]
 8002bfa:	7bbb      	ldrb	r3, [r7, #14]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <Init_BMP390+0x54>
 8002c00:	f7fe fc2a 	bl	8001458 <Error_Handler>
	if ( (res3 = BMP390_Write(BMP390_REG_ODR, &bmp390ODR, sizeof(bmp390ODR), 10)) != HAL_OK ) Error_Handler();
 8002c04:	1db9      	adds	r1, r7, #6
 8002c06:	230a      	movs	r3, #10
 8002c08:	2201      	movs	r2, #1
 8002c0a:	201d      	movs	r0, #29
 8002c0c:	f7ff fdee 	bl	80027ec <BMP390_Write>
 8002c10:	4603      	mov	r3, r0
 8002c12:	737b      	strb	r3, [r7, #13]
 8002c14:	7b7b      	ldrb	r3, [r7, #13]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <Init_BMP390+0x6e>
 8002c1a:	f7fe fc1d 	bl	8001458 <Error_Handler>
	if ( (res4 = BMP390_Write(BMP390_REG_CFG, &bmp390CFG, sizeof(bmp390CFG), 10)) != HAL_OK ) Error_Handler();
 8002c1e:	1d79      	adds	r1, r7, #5
 8002c20:	230a      	movs	r3, #10
 8002c22:	2201      	movs	r2, #1
 8002c24:	201f      	movs	r0, #31
 8002c26:	f7ff fde1 	bl	80027ec <BMP390_Write>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	733b      	strb	r3, [r7, #12]
 8002c2e:	7b3b      	ldrb	r3, [r7, #12]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <Init_BMP390+0x88>
 8002c34:	f7fe fc10 	bl	8001458 <Error_Handler>

	/* Don't know why, but it seems like the PWR_CTRL register need to be set\
	 *  twice */
	if ( (res5 = BMP390_Write(BMP390_REG_PWR, &bmp390PWR, sizeof(bmp390PWR), 10)) != HAL_OK ) Error_Handler();
 8002c38:	f107 0108 	add.w	r1, r7, #8
 8002c3c:	230a      	movs	r3, #10
 8002c3e:	2201      	movs	r2, #1
 8002c40:	201b      	movs	r0, #27
 8002c42:	f7ff fdd3 	bl	80027ec <BMP390_Write>
 8002c46:	4603      	mov	r3, r0
 8002c48:	72fb      	strb	r3, [r7, #11]
 8002c4a:	7afb      	ldrb	r3, [r7, #11]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <Init_BMP390+0xa4>
 8002c50:	f7fe fc02 	bl	8001458 <Error_Handler>
	if ( (res6 = BMP390_Write(BMP390_REG_PWR, &bmp390PWR, sizeof(bmp390PWR), 10)) != HAL_OK ) Error_Handler();
 8002c54:	f107 0108 	add.w	r1, r7, #8
 8002c58:	230a      	movs	r3, #10
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	201b      	movs	r0, #27
 8002c5e:	f7ff fdc5 	bl	80027ec <BMP390_Write>
 8002c62:	4603      	mov	r3, r0
 8002c64:	72bb      	strb	r3, [r7, #10]
 8002c66:	7abb      	ldrb	r3, [r7, #10]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <Init_BMP390+0xc0>
 8002c6c:	f7fe fbf4 	bl	8001458 <Error_Handler>

	osDelay(1000);
 8002c70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c74:	f00b f874 	bl	800dd60 <osDelay>

	if ( (res7 = BMP390_ReadCalibration()) != HAL_OK) Error_Handler();
 8002c78:	f7ff fc14 	bl	80024a4 <BMP390_ReadCalibration>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	727b      	strb	r3, [r7, #9]
 8002c80:	7a7b      	ldrb	r3, [r7, #9]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <Init_BMP390+0xdc>
 8002c86:	f7fe fbe7 	bl	8001458 <Error_Handler>

	return;
 8002c8a:	bf00      	nop
 8002c8c:	bf00      	nop
}
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000418 	.word	0x20000418

08002c98 <Init_BNO055>:

void Init_BNO055(void){
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
	bno055_assignI2C(&hi2c1);
 8002c9c:	4804      	ldr	r0, [pc, #16]	; (8002cb0 <Init_BNO055+0x18>)
 8002c9e:	f7ff fe49 	bl	8002934 <bno055_assignI2C>
	bno055_setup();
 8002ca2:	f7ff fe1f 	bl	80028e4 <bno055_setup>
	bno055_setOperationModeNDOF();
 8002ca6:	f7ff fe0a 	bl	80028be <bno055_setOperationModeNDOF>
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000418 	.word	0x20000418

08002cb4 <Init_SD>:

void Init_SD(void){
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
	//SD_Assign(&hspi2);
	//retUSER = f_mount(&USERFatFS, USERPath, 1);
	//if ( retUSER != FR_OK ) Error_Handler();
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <Init_Servo>:

void Init_Servo(Servo_HandleTypeDef* servo1, Servo_HandleTypeDef* servo2, Servo_HandleTypeDef* servo3){
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
	Servo_Attach(servo1, &htim3, TIM_CHANNEL_1);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	490f      	ldr	r1, [pc, #60]	; (8002d10 <Init_Servo+0x4c>)
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f81d 	bl	8002d14 <Servo_Attach>
	Servo_Attach(servo2, &htim3, TIM_CHANNEL_2);
 8002cda:	2204      	movs	r2, #4
 8002cdc:	490c      	ldr	r1, [pc, #48]	; (8002d10 <Init_Servo+0x4c>)
 8002cde:	68b8      	ldr	r0, [r7, #8]
 8002ce0:	f000 f818 	bl	8002d14 <Servo_Attach>
	Servo_Attach(servo3, &htim3, TIM_CHANNEL_3);
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	490a      	ldr	r1, [pc, #40]	; (8002d10 <Init_Servo+0x4c>)
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f813 	bl	8002d14 <Servo_Attach>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8002cee:	2100      	movs	r1, #0
 8002cf0:	4807      	ldr	r0, [pc, #28]	; (8002d10 <Init_Servo+0x4c>)
 8002cf2:	f005 fb9b 	bl	800842c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8002cf6:	2104      	movs	r1, #4
 8002cf8:	4805      	ldr	r0, [pc, #20]	; (8002d10 <Init_Servo+0x4c>)
 8002cfa:	f005 fb97 	bl	800842c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8002cfe:	2108      	movs	r1, #8
 8002d00:	4803      	ldr	r0, [pc, #12]	; (8002d10 <Init_Servo+0x4c>)
 8002d02:	f005 fb93 	bl	800842c <HAL_TIM_PWM_Start_IT>
}
 8002d06:	bf00      	nop
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200004e4 	.word	0x200004e4

08002d14 <Servo_Attach>:
#include "servo/servo.h"

void Servo_Attach(Servo_HandleTypeDef *servo, TIM_HandleTypeDef *htim, uint32_t channel){
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
	servo->htim 	= htim;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	601a      	str	r2, [r3, #0]
	servo->channel 	= channel;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	605a      	str	r2, [r3, #4]
}
 8002d2c:	bf00      	nop
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d3c:	480d      	ldr	r0, [pc, #52]	; (8002d74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d3e:	490e      	ldr	r1, [pc, #56]	; (8002d78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d40:	4a0e      	ldr	r2, [pc, #56]	; (8002d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d44:	e002      	b.n	8002d4c <LoopCopyDataInit>

08002d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d4a:	3304      	adds	r3, #4

08002d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d50:	d3f9      	bcc.n	8002d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d52:	4a0b      	ldr	r2, [pc, #44]	; (8002d80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d54:	4c0b      	ldr	r4, [pc, #44]	; (8002d84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d58:	e001      	b.n	8002d5e <LoopFillZerobss>

08002d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d5c:	3204      	adds	r2, #4

08002d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d60:	d3fb      	bcc.n	8002d5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d62:	f7fe ff29 	bl	8001bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d66:	f00f f9f5 	bl	8012154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d6a:	f7fe f993 	bl	8001094 <main>
  bx  lr    
 8002d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d78:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 8002d7c:	0801555c 	.word	0x0801555c
  ldr r2, =_sbss
 8002d80:	200002f4 	.word	0x200002f4
  ldr r4, =_ebss
 8002d84:	20006cac 	.word	0x20006cac

08002d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d88:	e7fe      	b.n	8002d88 <ADC_IRQHandler>

08002d8a <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d104      	bne.n	8002da2 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d98:	b672      	cpsid	i
}
 8002d9a:	bf00      	nop
 8002d9c:	f7fe fb5c 	bl	8001458 <Error_Handler>
 8002da0:	e7fe      	b.n	8002da0 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	e007      	b.n	8002db8 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	2100      	movs	r1, #0
 8002dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3301      	adds	r3, #1
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d9f4      	bls.n	8002da8 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	721a      	strb	r2, [r3, #8]
}
 8002dc4:	bf00      	nop
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d104      	bne.n	8002de4 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002dda:	b672      	cpsid	i
}
 8002ddc:	bf00      	nop
 8002dde:	f7fe fb3b 	bl	8001458 <Error_Handler>
 8002de2:	e7fe      	b.n	8002de2 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	7a1b      	ldrb	r3, [r3, #8]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d904      	bls.n	8002df6 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002dec:	b672      	cpsid	i
}
 8002dee:	bf00      	nop
 8002df0:	f7fe fb32 	bl	8001458 <Error_Handler>
 8002df4:	e7fe      	b.n	8002df4 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	7a1b      	ldrb	r3, [r3, #8]
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	b2d1      	uxtb	r1, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	7211      	strb	r1, [r2, #8]
 8002e02:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e04:	f3ef 8211 	mrs	r2, BASEPRI
 8002e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	60fa      	str	r2, [r7, #12]
 8002e1a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002e24:	bf00      	nop
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d104      	bne.n	8002e44 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002e3a:	b672      	cpsid	i
}
 8002e3c:	bf00      	nop
 8002e3e:	f7fe fb0b 	bl	8001458 <Error_Handler>
 8002e42:	e7fe      	b.n	8002e42 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	7a1b      	ldrb	r3, [r3, #8]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	7a1b      	ldrb	r3, [r3, #8]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d904      	bls.n	8002e62 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8002e58:	b672      	cpsid	i
}
 8002e5a:	bf00      	nop
 8002e5c:	f7fe fafc 	bl	8001458 <Error_Handler>
 8002e60:	e7fe      	b.n	8002e60 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	7a1b      	ldrb	r3, [r3, #8]
 8002e66:	461a      	mov	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e6e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e76:	bf00      	nop
}
 8002e78:	bf00      	nop
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d105      	bne.n	8002e9a <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8002e8e:	f00f f865 	bl	8011f5c <__errno>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2216      	movs	r2, #22
 8002e96:	601a      	str	r2, [r3, #0]
    return;
 8002e98:	e015      	b.n	8002ec6 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8002e9a:	200c      	movs	r0, #12
 8002e9c:	f00f f97e 	bl	801219c <malloc>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff68 	bl	8002d8a <stm32_lock_init>
    return;
 8002eba:	e004      	b.n	8002ec6 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8002ebc:	b672      	cpsid	i
}
 8002ebe:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8002ec0:	f7fe faca 	bl	8001458 <Error_Handler>
 8002ec4:	e7fe      	b.n	8002ec4 <__retarget_lock_init_recursive+0x44>
}
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d104      	bne.n	8002ee4 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002eda:	b672      	cpsid	i
}
 8002edc:	bf00      	nop
 8002ede:	f7fe fabb 	bl	8001458 <Error_Handler>
 8002ee2:	e7fe      	b.n	8002ee2 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff ff70 	bl	8002dcc <stm32_lock_acquire>
}
 8002eec:	bf00      	nop
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d104      	bne.n	8002f0c <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f02:	b672      	cpsid	i
}
 8002f04:	bf00      	nop
 8002f06:	f7fe faa7 	bl	8001458 <Error_Handler>
 8002f0a:	e7fe      	b.n	8002f0a <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff ff8c 	bl	8002e2c <stm32_lock_release>
}
 8002f14:	bf00      	nop
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f20:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <HAL_Init+0x40>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a0d      	ldr	r2, [pc, #52]	; (8002f5c <HAL_Init+0x40>)
 8002f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_Init+0x40>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <HAL_Init+0x40>)
 8002f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f38:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <HAL_Init+0x40>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a07      	ldr	r2, [pc, #28]	; (8002f5c <HAL_Init+0x40>)
 8002f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f44:	2003      	movs	r0, #3
 8002f46:	f000 fb6e 	bl	8003626 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f4a:	200f      	movs	r0, #15
 8002f4c:	f7fe fcd2 	bl	80018f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f50:	f7fe fa8e 	bl	8001470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40023c00 	.word	0x40023c00

08002f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_IncTick+0x20>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <HAL_IncTick+0x24>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4413      	add	r3, r2
 8002f70:	4a04      	ldr	r2, [pc, #16]	; (8002f84 <HAL_IncTick+0x24>)
 8002f72:	6013      	str	r3, [r2, #0]
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	20000008 	.word	0x20000008
 8002f84:	20000660 	.word	0x20000660

08002f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f8c:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <HAL_GetTick+0x14>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	20000660 	.word	0x20000660

08002fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fa8:	f7ff ffee 	bl	8002f88 <HAL_GetTick>
 8002fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb8:	d005      	beq.n	8002fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fba:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <HAL_Delay+0x44>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fc6:	bf00      	nop
 8002fc8:	f7ff ffde 	bl	8002f88 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d8f7      	bhi.n	8002fc8 <HAL_Delay+0x28>
  {
  }
}
 8002fd8:	bf00      	nop
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000008 	.word	0x20000008

08002fe8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e033      	b.n	8003066 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fe fa5e 	bl	80014c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	2b00      	cmp	r3, #0
 8003024:	d118      	bne.n	8003058 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800302e:	f023 0302 	bic.w	r3, r3, #2
 8003032:	f043 0202 	orr.w	r2, r3, #2
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f94a 	bl	80032d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f023 0303 	bic.w	r3, r3, #3
 800304e:	f043 0201 	orr.w	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	641a      	str	r2, [r3, #64]	; 0x40
 8003056:	e001      	b.n	800305c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003064:	7bfb      	ldrb	r3, [r7, #15]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_ADC_ConfigChannel+0x1c>
 8003088:	2302      	movs	r3, #2
 800308a:	e113      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x244>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b09      	cmp	r3, #9
 800309a:	d925      	bls.n	80030e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68d9      	ldr	r1, [r3, #12]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	4613      	mov	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	4413      	add	r3, r2
 80030b0:	3b1e      	subs	r3, #30
 80030b2:	2207      	movs	r2, #7
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43da      	mvns	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	400a      	ands	r2, r1
 80030c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68d9      	ldr	r1, [r3, #12]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	4618      	mov	r0, r3
 80030d4:	4603      	mov	r3, r0
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	4403      	add	r3, r0
 80030da:	3b1e      	subs	r3, #30
 80030dc:	409a      	lsls	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	60da      	str	r2, [r3, #12]
 80030e6:	e022      	b.n	800312e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6919      	ldr	r1, [r3, #16]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	461a      	mov	r2, r3
 80030f6:	4613      	mov	r3, r2
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4413      	add	r3, r2
 80030fc:	2207      	movs	r2, #7
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43da      	mvns	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	400a      	ands	r2, r1
 800310a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6919      	ldr	r1, [r3, #16]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	b29b      	uxth	r3, r3
 800311c:	4618      	mov	r0, r3
 800311e:	4603      	mov	r3, r0
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4403      	add	r3, r0
 8003124:	409a      	lsls	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b06      	cmp	r3, #6
 8003134:	d824      	bhi.n	8003180 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	3b05      	subs	r3, #5
 8003148:	221f      	movs	r2, #31
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43da      	mvns	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	400a      	ands	r2, r1
 8003156:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	b29b      	uxth	r3, r3
 8003164:	4618      	mov	r0, r3
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	3b05      	subs	r3, #5
 8003172:	fa00 f203 	lsl.w	r2, r0, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	635a      	str	r2, [r3, #52]	; 0x34
 800317e:	e04c      	b.n	800321a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b0c      	cmp	r3, #12
 8003186:	d824      	bhi.n	80031d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	3b23      	subs	r3, #35	; 0x23
 800319a:	221f      	movs	r2, #31
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43da      	mvns	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	400a      	ands	r2, r1
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	4618      	mov	r0, r3
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	3b23      	subs	r3, #35	; 0x23
 80031c4:	fa00 f203 	lsl.w	r2, r0, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	631a      	str	r2, [r3, #48]	; 0x30
 80031d0:	e023      	b.n	800321a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	3b41      	subs	r3, #65	; 0x41
 80031e4:	221f      	movs	r2, #31
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43da      	mvns	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	400a      	ands	r2, r1
 80031f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	4618      	mov	r0, r3
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	3b41      	subs	r3, #65	; 0x41
 800320e:	fa00 f203 	lsl.w	r2, r0, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800321a:	4b29      	ldr	r3, [pc, #164]	; (80032c0 <HAL_ADC_ConfigChannel+0x250>)
 800321c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a28      	ldr	r2, [pc, #160]	; (80032c4 <HAL_ADC_ConfigChannel+0x254>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d10f      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x1d8>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b12      	cmp	r3, #18
 800322e:	d10b      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a1d      	ldr	r2, [pc, #116]	; (80032c4 <HAL_ADC_ConfigChannel+0x254>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d12b      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x23a>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1c      	ldr	r2, [pc, #112]	; (80032c8 <HAL_ADC_ConfigChannel+0x258>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d003      	beq.n	8003264 <HAL_ADC_ConfigChannel+0x1f4>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b11      	cmp	r3, #17
 8003262:	d122      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a11      	ldr	r2, [pc, #68]	; (80032c8 <HAL_ADC_ConfigChannel+0x258>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d111      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003286:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_ADC_ConfigChannel+0x25c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a11      	ldr	r2, [pc, #68]	; (80032d0 <HAL_ADC_ConfigChannel+0x260>)
 800328c:	fba2 2303 	umull	r2, r3, r2, r3
 8003290:	0c9a      	lsrs	r2, r3, #18
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800329c:	e002      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	3b01      	subs	r3, #1
 80032a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f9      	bne.n	800329e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	40012300 	.word	0x40012300
 80032c4:	40012000 	.word	0x40012000
 80032c8:	10000012 	.word	0x10000012
 80032cc:	20000000 	.word	0x20000000
 80032d0:	431bde83 	.word	0x431bde83

080032d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032dc:	4b79      	ldr	r3, [pc, #484]	; (80034c4 <ADC_Init+0x1f0>)
 80032de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	431a      	orrs	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003308:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6859      	ldr	r1, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	021a      	lsls	r2, r3, #8
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800332c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6859      	ldr	r1, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800334e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6899      	ldr	r1, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003366:	4a58      	ldr	r2, [pc, #352]	; (80034c8 <ADC_Init+0x1f4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d022      	beq.n	80033b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800337a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6899      	ldr	r1, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800339c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6899      	ldr	r1, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	e00f      	b.n	80033d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0202 	bic.w	r2, r2, #2
 80033e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6899      	ldr	r1, [r3, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	7e1b      	ldrb	r3, [r3, #24]
 80033ec:	005a      	lsls	r2, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01b      	beq.n	8003438 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800340e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800341e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6859      	ldr	r1, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	3b01      	subs	r3, #1
 800342c:	035a      	lsls	r2, r3, #13
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	e007      	b.n	8003448 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003446:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003456:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	3b01      	subs	r3, #1
 8003464:	051a      	lsls	r2, r3, #20
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800347c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6899      	ldr	r1, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800348a:	025a      	lsls	r2, r3, #9
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6899      	ldr	r1, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	029a      	lsls	r2, r3, #10
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	609a      	str	r2, [r3, #8]
}
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	40012300 	.word	0x40012300
 80034c8:	0f000001 	.word	0x0f000001

080034cc <__NVIC_SetPriorityGrouping>:
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <__NVIC_SetPriorityGrouping+0x44>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034e8:	4013      	ands	r3, r2
 80034ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034fe:	4a04      	ldr	r2, [pc, #16]	; (8003510 <__NVIC_SetPriorityGrouping+0x44>)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	60d3      	str	r3, [r2, #12]
}
 8003504:	bf00      	nop
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <__NVIC_GetPriorityGrouping>:
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003518:	4b04      	ldr	r3, [pc, #16]	; (800352c <__NVIC_GetPriorityGrouping+0x18>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	0a1b      	lsrs	r3, r3, #8
 800351e:	f003 0307 	and.w	r3, r3, #7
}
 8003522:	4618      	mov	r0, r3
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	e000ed00 	.word	0xe000ed00

08003530 <__NVIC_EnableIRQ>:
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	2b00      	cmp	r3, #0
 8003540:	db0b      	blt.n	800355a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	f003 021f 	and.w	r2, r3, #31
 8003548:	4907      	ldr	r1, [pc, #28]	; (8003568 <__NVIC_EnableIRQ+0x38>)
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	2001      	movs	r0, #1
 8003552:	fa00 f202 	lsl.w	r2, r0, r2
 8003556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	e000e100 	.word	0xe000e100

0800356c <__NVIC_SetPriority>:
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	6039      	str	r1, [r7, #0]
 8003576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357c:	2b00      	cmp	r3, #0
 800357e:	db0a      	blt.n	8003596 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	b2da      	uxtb	r2, r3
 8003584:	490c      	ldr	r1, [pc, #48]	; (80035b8 <__NVIC_SetPriority+0x4c>)
 8003586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358a:	0112      	lsls	r2, r2, #4
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	440b      	add	r3, r1
 8003590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003594:	e00a      	b.n	80035ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	b2da      	uxtb	r2, r3
 800359a:	4908      	ldr	r1, [pc, #32]	; (80035bc <__NVIC_SetPriority+0x50>)
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	3b04      	subs	r3, #4
 80035a4:	0112      	lsls	r2, r2, #4
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	440b      	add	r3, r1
 80035aa:	761a      	strb	r2, [r3, #24]
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	e000e100 	.word	0xe000e100
 80035bc:	e000ed00 	.word	0xe000ed00

080035c0 <NVIC_EncodePriority>:
{
 80035c0:	b480      	push	{r7}
 80035c2:	b089      	sub	sp, #36	; 0x24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f1c3 0307 	rsb	r3, r3, #7
 80035da:	2b04      	cmp	r3, #4
 80035dc:	bf28      	it	cs
 80035de:	2304      	movcs	r3, #4
 80035e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	3304      	adds	r3, #4
 80035e6:	2b06      	cmp	r3, #6
 80035e8:	d902      	bls.n	80035f0 <NVIC_EncodePriority+0x30>
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	3b03      	subs	r3, #3
 80035ee:	e000      	b.n	80035f2 <NVIC_EncodePriority+0x32>
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f4:	f04f 32ff 	mov.w	r2, #4294967295
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43da      	mvns	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	401a      	ands	r2, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003608:	f04f 31ff 	mov.w	r1, #4294967295
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	fa01 f303 	lsl.w	r3, r1, r3
 8003612:	43d9      	mvns	r1, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003618:	4313      	orrs	r3, r2
}
 800361a:	4618      	mov	r0, r3
 800361c:	3724      	adds	r7, #36	; 0x24
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff ff4c 	bl	80034cc <__NVIC_SetPriorityGrouping>
}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800364e:	f7ff ff61 	bl	8003514 <__NVIC_GetPriorityGrouping>
 8003652:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	68b9      	ldr	r1, [r7, #8]
 8003658:	6978      	ldr	r0, [r7, #20]
 800365a:	f7ff ffb1 	bl	80035c0 <NVIC_EncodePriority>
 800365e:	4602      	mov	r2, r0
 8003660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003664:	4611      	mov	r1, r2
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff ff80 	bl	800356c <__NVIC_SetPriority>
}
 800366c:	bf00      	nop
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff ff54 	bl	8003530 <__NVIC_EnableIRQ>
}
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800369e:	f7ff fc73 	bl	8002f88 <HAL_GetTick>
 80036a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d008      	beq.n	80036c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2280      	movs	r2, #128	; 0x80
 80036b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e052      	b.n	8003768 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0216 	bic.w	r2, r2, #22
 80036d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695a      	ldr	r2, [r3, #20]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d103      	bne.n	80036f2 <HAL_DMA_Abort+0x62>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0208 	bic.w	r2, r2, #8
 8003700:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0201 	bic.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003712:	e013      	b.n	800373c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003714:	f7ff fc38 	bl	8002f88 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b05      	cmp	r3, #5
 8003720:	d90c      	bls.n	800373c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2203      	movs	r2, #3
 800372c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e015      	b.n	8003768 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1e4      	bne.n	8003714 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374e:	223f      	movs	r2, #63	; 0x3f
 8003750:	409a      	lsls	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d004      	beq.n	800378e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2280      	movs	r2, #128	; 0x80
 8003788:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e00c      	b.n	80037a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2205      	movs	r2, #5
 8003792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0201 	bic.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b089      	sub	sp, #36	; 0x24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	e165      	b.n	8003a9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037d0:	2201      	movs	r2, #1
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	4013      	ands	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	f040 8154 	bne.w	8003a96 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d005      	beq.n	8003806 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003802:	2b02      	cmp	r3, #2
 8003804:	d130      	bne.n	8003868 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	2203      	movs	r2, #3
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	43db      	mvns	r3, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4013      	ands	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4313      	orrs	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800383c:	2201      	movs	r2, #1
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4013      	ands	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	091b      	lsrs	r3, r3, #4
 8003852:	f003 0201 	and.w	r2, r3, #1
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	4313      	orrs	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	2b03      	cmp	r3, #3
 8003872:	d017      	beq.n	80038a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	2203      	movs	r2, #3
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4013      	ands	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4313      	orrs	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d123      	bne.n	80038f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	08da      	lsrs	r2, r3, #3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3208      	adds	r2, #8
 80038b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	220f      	movs	r2, #15
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4013      	ands	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	08da      	lsrs	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3208      	adds	r2, #8
 80038f2:	69b9      	ldr	r1, [r7, #24]
 80038f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	2203      	movs	r2, #3
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 0203 	and.w	r2, r3, #3
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80ae 	beq.w	8003a96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	4b5d      	ldr	r3, [pc, #372]	; (8003ab4 <HAL_GPIO_Init+0x300>)
 8003940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003942:	4a5c      	ldr	r2, [pc, #368]	; (8003ab4 <HAL_GPIO_Init+0x300>)
 8003944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003948:	6453      	str	r3, [r2, #68]	; 0x44
 800394a:	4b5a      	ldr	r3, [pc, #360]	; (8003ab4 <HAL_GPIO_Init+0x300>)
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003956:	4a58      	ldr	r2, [pc, #352]	; (8003ab8 <HAL_GPIO_Init+0x304>)
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	089b      	lsrs	r3, r3, #2
 800395c:	3302      	adds	r3, #2
 800395e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	220f      	movs	r2, #15
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43db      	mvns	r3, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4013      	ands	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a4f      	ldr	r2, [pc, #316]	; (8003abc <HAL_GPIO_Init+0x308>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d025      	beq.n	80039ce <HAL_GPIO_Init+0x21a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a4e      	ldr	r2, [pc, #312]	; (8003ac0 <HAL_GPIO_Init+0x30c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d01f      	beq.n	80039ca <HAL_GPIO_Init+0x216>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a4d      	ldr	r2, [pc, #308]	; (8003ac4 <HAL_GPIO_Init+0x310>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d019      	beq.n	80039c6 <HAL_GPIO_Init+0x212>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a4c      	ldr	r2, [pc, #304]	; (8003ac8 <HAL_GPIO_Init+0x314>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <HAL_GPIO_Init+0x20e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a4b      	ldr	r2, [pc, #300]	; (8003acc <HAL_GPIO_Init+0x318>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00d      	beq.n	80039be <HAL_GPIO_Init+0x20a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a4a      	ldr	r2, [pc, #296]	; (8003ad0 <HAL_GPIO_Init+0x31c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d007      	beq.n	80039ba <HAL_GPIO_Init+0x206>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a49      	ldr	r2, [pc, #292]	; (8003ad4 <HAL_GPIO_Init+0x320>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d101      	bne.n	80039b6 <HAL_GPIO_Init+0x202>
 80039b2:	2306      	movs	r3, #6
 80039b4:	e00c      	b.n	80039d0 <HAL_GPIO_Init+0x21c>
 80039b6:	2307      	movs	r3, #7
 80039b8:	e00a      	b.n	80039d0 <HAL_GPIO_Init+0x21c>
 80039ba:	2305      	movs	r3, #5
 80039bc:	e008      	b.n	80039d0 <HAL_GPIO_Init+0x21c>
 80039be:	2304      	movs	r3, #4
 80039c0:	e006      	b.n	80039d0 <HAL_GPIO_Init+0x21c>
 80039c2:	2303      	movs	r3, #3
 80039c4:	e004      	b.n	80039d0 <HAL_GPIO_Init+0x21c>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e002      	b.n	80039d0 <HAL_GPIO_Init+0x21c>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <HAL_GPIO_Init+0x21c>
 80039ce:	2300      	movs	r3, #0
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	f002 0203 	and.w	r2, r2, #3
 80039d6:	0092      	lsls	r2, r2, #2
 80039d8:	4093      	lsls	r3, r2
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039e0:	4935      	ldr	r1, [pc, #212]	; (8003ab8 <HAL_GPIO_Init+0x304>)
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	089b      	lsrs	r3, r3, #2
 80039e6:	3302      	adds	r3, #2
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039ee:	4b3a      	ldr	r3, [pc, #232]	; (8003ad8 <HAL_GPIO_Init+0x324>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	43db      	mvns	r3, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4013      	ands	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a12:	4a31      	ldr	r2, [pc, #196]	; (8003ad8 <HAL_GPIO_Init+0x324>)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a18:	4b2f      	ldr	r3, [pc, #188]	; (8003ad8 <HAL_GPIO_Init+0x324>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	43db      	mvns	r3, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a3c:	4a26      	ldr	r2, [pc, #152]	; (8003ad8 <HAL_GPIO_Init+0x324>)
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a42:	4b25      	ldr	r3, [pc, #148]	; (8003ad8 <HAL_GPIO_Init+0x324>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a66:	4a1c      	ldr	r2, [pc, #112]	; (8003ad8 <HAL_GPIO_Init+0x324>)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a6c:	4b1a      	ldr	r3, [pc, #104]	; (8003ad8 <HAL_GPIO_Init+0x324>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a90:	4a11      	ldr	r2, [pc, #68]	; (8003ad8 <HAL_GPIO_Init+0x324>)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	61fb      	str	r3, [r7, #28]
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	2b0f      	cmp	r3, #15
 8003aa0:	f67f ae96 	bls.w	80037d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	3724      	adds	r7, #36	; 0x24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40013800 	.word	0x40013800
 8003abc:	40020000 	.word	0x40020000
 8003ac0:	40020400 	.word	0x40020400
 8003ac4:	40020800 	.word	0x40020800
 8003ac8:	40020c00 	.word	0x40020c00
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	40021400 	.word	0x40021400
 8003ad4:	40021800 	.word	0x40021800
 8003ad8:	40013c00 	.word	0x40013c00

08003adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	807b      	strh	r3, [r7, #2]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003aec:	787b      	ldrb	r3, [r7, #1]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003af2:	887a      	ldrh	r2, [r7, #2]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003af8:	e003      	b.n	8003b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003afa:	887b      	ldrh	r3, [r7, #2]
 8003afc:	041a      	lsls	r2, r3, #16
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	619a      	str	r2, [r3, #24]
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b085      	sub	sp, #20
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	460b      	mov	r3, r1
 8003b18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b20:	887a      	ldrh	r2, [r7, #2]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4013      	ands	r3, r2
 8003b26:	041a      	lsls	r2, r3, #16
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	43d9      	mvns	r1, r3
 8003b2c:	887b      	ldrh	r3, [r7, #2]
 8003b2e:	400b      	ands	r3, r1
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	619a      	str	r2, [r3, #24]
}
 8003b36:	bf00      	nop
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e12b      	b.n	8003dae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fd fcf0 	bl	8001550 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2224      	movs	r2, #36	; 0x24
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0201 	bic.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ba6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ba8:	f002 ffd4 	bl	8006b54 <HAL_RCC_GetPCLK1Freq>
 8003bac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	4a81      	ldr	r2, [pc, #516]	; (8003db8 <HAL_I2C_Init+0x274>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d807      	bhi.n	8003bc8 <HAL_I2C_Init+0x84>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4a80      	ldr	r2, [pc, #512]	; (8003dbc <HAL_I2C_Init+0x278>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	bf94      	ite	ls
 8003bc0:	2301      	movls	r3, #1
 8003bc2:	2300      	movhi	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	e006      	b.n	8003bd6 <HAL_I2C_Init+0x92>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4a7d      	ldr	r2, [pc, #500]	; (8003dc0 <HAL_I2C_Init+0x27c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	bf94      	ite	ls
 8003bd0:	2301      	movls	r3, #1
 8003bd2:	2300      	movhi	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e0e7      	b.n	8003dae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4a78      	ldr	r2, [pc, #480]	; (8003dc4 <HAL_I2C_Init+0x280>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	0c9b      	lsrs	r3, r3, #18
 8003be8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4a6a      	ldr	r2, [pc, #424]	; (8003db8 <HAL_I2C_Init+0x274>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d802      	bhi.n	8003c18 <HAL_I2C_Init+0xd4>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	3301      	adds	r3, #1
 8003c16:	e009      	b.n	8003c2c <HAL_I2C_Init+0xe8>
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c1e:	fb02 f303 	mul.w	r3, r2, r3
 8003c22:	4a69      	ldr	r2, [pc, #420]	; (8003dc8 <HAL_I2C_Init+0x284>)
 8003c24:	fba2 2303 	umull	r2, r3, r2, r3
 8003c28:	099b      	lsrs	r3, r3, #6
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6812      	ldr	r2, [r2, #0]
 8003c30:	430b      	orrs	r3, r1
 8003c32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	495c      	ldr	r1, [pc, #368]	; (8003db8 <HAL_I2C_Init+0x274>)
 8003c48:	428b      	cmp	r3, r1
 8003c4a:	d819      	bhi.n	8003c80 <HAL_I2C_Init+0x13c>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1e59      	subs	r1, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c5a:	1c59      	adds	r1, r3, #1
 8003c5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c60:	400b      	ands	r3, r1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <HAL_I2C_Init+0x138>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	1e59      	subs	r1, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c74:	3301      	adds	r3, #1
 8003c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c7a:	e051      	b.n	8003d20 <HAL_I2C_Init+0x1dc>
 8003c7c:	2304      	movs	r3, #4
 8003c7e:	e04f      	b.n	8003d20 <HAL_I2C_Init+0x1dc>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d111      	bne.n	8003cac <HAL_I2C_Init+0x168>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	1e58      	subs	r0, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6859      	ldr	r1, [r3, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	440b      	add	r3, r1
 8003c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	e012      	b.n	8003cd2 <HAL_I2C_Init+0x18e>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	1e58      	subs	r0, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6859      	ldr	r1, [r3, #4]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	0099      	lsls	r1, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_I2C_Init+0x196>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e022      	b.n	8003d20 <HAL_I2C_Init+0x1dc>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10e      	bne.n	8003d00 <HAL_I2C_Init+0x1bc>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	1e58      	subs	r0, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6859      	ldr	r1, [r3, #4]
 8003cea:	460b      	mov	r3, r1
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	440b      	add	r3, r1
 8003cf0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cfe:	e00f      	b.n	8003d20 <HAL_I2C_Init+0x1dc>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	1e58      	subs	r0, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6859      	ldr	r1, [r3, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	0099      	lsls	r1, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d16:	3301      	adds	r3, #1
 8003d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	6809      	ldr	r1, [r1, #0]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69da      	ldr	r2, [r3, #28]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6911      	ldr	r1, [r2, #16]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	68d2      	ldr	r2, [r2, #12]
 8003d5a:	4311      	orrs	r1, r2
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	430b      	orrs	r3, r1
 8003d62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695a      	ldr	r2, [r3, #20]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0201 	orr.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	000186a0 	.word	0x000186a0
 8003dbc:	001e847f 	.word	0x001e847f
 8003dc0:	003d08ff 	.word	0x003d08ff
 8003dc4:	431bde83 	.word	0x431bde83
 8003dc8:	10624dd3 	.word	0x10624dd3

08003dcc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	607a      	str	r2, [r7, #4]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	460b      	mov	r3, r1
 8003dda:	817b      	strh	r3, [r7, #10]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003de0:	f7ff f8d2 	bl	8002f88 <HAL_GetTick>
 8003de4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	f040 80e0 	bne.w	8003fb4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	2319      	movs	r3, #25
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	4970      	ldr	r1, [pc, #448]	; (8003fc0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f001 f910 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e0d3      	b.n	8003fb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <HAL_I2C_Master_Transmit+0x50>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e0cc      	b.n	8003fb6 <HAL_I2C_Master_Transmit+0x1ea>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d007      	beq.n	8003e42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0201 	orr.w	r2, r2, #1
 8003e40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2221      	movs	r2, #33	; 0x21
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2210      	movs	r2, #16
 8003e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	893a      	ldrh	r2, [r7, #8]
 8003e72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4a50      	ldr	r2, [pc, #320]	; (8003fc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e84:	8979      	ldrh	r1, [r7, #10]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	6a3a      	ldr	r2, [r7, #32]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 fdfc 	bl	8004a88 <I2C_MasterRequestWrite>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e08d      	b.n	8003fb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003eb0:	e066      	b.n	8003f80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	6a39      	ldr	r1, [r7, #32]
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f001 f98a 	bl	80051d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00d      	beq.n	8003ede <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d107      	bne.n	8003eda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e06b      	b.n	8003fb6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	781a      	ldrb	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d11b      	bne.n	8003f54 <HAL_I2C_Master_Transmit+0x188>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d017      	beq.n	8003f54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	781a      	ldrb	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	6a39      	ldr	r1, [r7, #32]
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f001 f97a 	bl	8005252 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00d      	beq.n	8003f80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d107      	bne.n	8003f7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e01a      	b.n	8003fb6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d194      	bne.n	8003eb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	e000      	b.n	8003fb6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003fb4:	2302      	movs	r3, #2
  }
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	00100002 	.word	0x00100002
 8003fc4:	ffff0000 	.word	0xffff0000

08003fc8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b08c      	sub	sp, #48	; 0x30
 8003fcc:	af02      	add	r7, sp, #8
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	607a      	str	r2, [r7, #4]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	817b      	strh	r3, [r7, #10]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fdc:	f7fe ffd4 	bl	8002f88 <HAL_GetTick>
 8003fe0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	f040 820b 	bne.w	8004406 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	2319      	movs	r3, #25
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	497c      	ldr	r1, [pc, #496]	; (80041ec <HAL_I2C_Master_Receive+0x224>)
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f001 f812 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004006:	2302      	movs	r3, #2
 8004008:	e1fe      	b.n	8004408 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_I2C_Master_Receive+0x50>
 8004014:	2302      	movs	r3, #2
 8004016:	e1f7      	b.n	8004408 <HAL_I2C_Master_Receive+0x440>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b01      	cmp	r3, #1
 800402c:	d007      	beq.n	800403e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0201 	orr.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800404c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2222      	movs	r2, #34	; 0x22
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2210      	movs	r2, #16
 800405a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	893a      	ldrh	r2, [r7, #8]
 800406e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4a5c      	ldr	r2, [pc, #368]	; (80041f0 <HAL_I2C_Master_Receive+0x228>)
 800407e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004080:	8979      	ldrh	r1, [r7, #10]
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 fd80 	bl	8004b8c <I2C_MasterRequestRead>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e1b8      	b.n	8004408 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409a:	2b00      	cmp	r3, #0
 800409c:	d113      	bne.n	80040c6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800409e:	2300      	movs	r3, #0
 80040a0:	623b      	str	r3, [r7, #32]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	623b      	str	r3, [r7, #32]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	623b      	str	r3, [r7, #32]
 80040b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	e18c      	b.n	80043e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d11b      	bne.n	8004106 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	61fb      	str	r3, [r7, #28]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	61fb      	str	r3, [r7, #28]
 80040f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	e16c      	b.n	80043e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410a:	2b02      	cmp	r3, #2
 800410c:	d11b      	bne.n	8004146 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800412c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412e:	2300      	movs	r3, #0
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	e14c      	b.n	80043e0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004154:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800416c:	e138      	b.n	80043e0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004172:	2b03      	cmp	r3, #3
 8004174:	f200 80f1 	bhi.w	800435a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417c:	2b01      	cmp	r3, #1
 800417e:	d123      	bne.n	80041c8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004182:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f001 f8a5 	bl	80052d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e139      	b.n	8004408 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041c6:	e10b      	b.n	80043e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d14e      	bne.n	800426e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d6:	2200      	movs	r2, #0
 80041d8:	4906      	ldr	r1, [pc, #24]	; (80041f4 <HAL_I2C_Master_Receive+0x22c>)
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 ff22 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d008      	beq.n	80041f8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e10e      	b.n	8004408 <HAL_I2C_Master_Receive+0x440>
 80041ea:	bf00      	nop
 80041ec:	00100002 	.word	0x00100002
 80041f0:	ffff0000 	.word	0xffff0000
 80041f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004206:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800426c:	e0b8      	b.n	80043e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	2200      	movs	r2, #0
 8004276:	4966      	ldr	r1, [pc, #408]	; (8004410 <HAL_I2C_Master_Receive+0x448>)
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 fed3 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e0bf      	b.n	8004408 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004296:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691a      	ldr	r2, [r3, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	2200      	movs	r2, #0
 80042d2:	494f      	ldr	r1, [pc, #316]	; (8004410 <HAL_I2C_Master_Receive+0x448>)
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 fea5 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e091      	b.n	8004408 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	b2d2      	uxtb	r2, r2
 8004332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004358:	e042      	b.n	80043e0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800435a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 ffb8 	bl	80052d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e04c      	b.n	8004408 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	691a      	ldr	r2, [r3, #16]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004396:	b29b      	uxth	r3, r3
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f003 0304 	and.w	r3, r3, #4
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d118      	bne.n	80043e0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f47f aec2 	bne.w	800416e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	e000      	b.n	8004408 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004406:	2302      	movs	r3, #2
  }
}
 8004408:	4618      	mov	r0, r3
 800440a:	3728      	adds	r7, #40	; 0x28
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	00010004 	.word	0x00010004

08004414 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af02      	add	r7, sp, #8
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	4608      	mov	r0, r1
 800441e:	4611      	mov	r1, r2
 8004420:	461a      	mov	r2, r3
 8004422:	4603      	mov	r3, r0
 8004424:	817b      	strh	r3, [r7, #10]
 8004426:	460b      	mov	r3, r1
 8004428:	813b      	strh	r3, [r7, #8]
 800442a:	4613      	mov	r3, r2
 800442c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800442e:	f7fe fdab 	bl	8002f88 <HAL_GetTick>
 8004432:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b20      	cmp	r3, #32
 800443e:	f040 80d9 	bne.w	80045f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	2319      	movs	r3, #25
 8004448:	2201      	movs	r2, #1
 800444a:	496d      	ldr	r1, [pc, #436]	; (8004600 <HAL_I2C_Mem_Write+0x1ec>)
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 fde9 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004458:	2302      	movs	r3, #2
 800445a:	e0cc      	b.n	80045f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_I2C_Mem_Write+0x56>
 8004466:	2302      	movs	r3, #2
 8004468:	e0c5      	b.n	80045f6 <HAL_I2C_Mem_Write+0x1e2>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b01      	cmp	r3, #1
 800447e:	d007      	beq.n	8004490 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0201 	orr.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800449e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2221      	movs	r2, #33	; 0x21
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2240      	movs	r2, #64	; 0x40
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a3a      	ldr	r2, [r7, #32]
 80044ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4a4d      	ldr	r2, [pc, #308]	; (8004604 <HAL_I2C_Mem_Write+0x1f0>)
 80044d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044d2:	88f8      	ldrh	r0, [r7, #6]
 80044d4:	893a      	ldrh	r2, [r7, #8]
 80044d6:	8979      	ldrh	r1, [r7, #10]
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	9301      	str	r3, [sp, #4]
 80044dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	4603      	mov	r3, r0
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 fc20 	bl	8004d28 <I2C_RequestMemoryWrite>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d052      	beq.n	8004594 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e081      	b.n	80045f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 fe6a 	bl	80051d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00d      	beq.n	800451e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	2b04      	cmp	r3, #4
 8004508:	d107      	bne.n	800451a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004518:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e06b      	b.n	80045f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	781a      	ldrb	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b04      	cmp	r3, #4
 800455a:	d11b      	bne.n	8004594 <HAL_I2C_Mem_Write+0x180>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004560:	2b00      	cmp	r3, #0
 8004562:	d017      	beq.n	8004594 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	781a      	ldrb	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1aa      	bne.n	80044f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 fe56 	bl	8005252 <I2C_WaitOnBTFFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00d      	beq.n	80045c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d107      	bne.n	80045c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e016      	b.n	80045f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e000      	b.n	80045f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80045f4:	2302      	movs	r3, #2
  }
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	00100002 	.word	0x00100002
 8004604:	ffff0000 	.word	0xffff0000

08004608 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08c      	sub	sp, #48	; 0x30
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	4608      	mov	r0, r1
 8004612:	4611      	mov	r1, r2
 8004614:	461a      	mov	r2, r3
 8004616:	4603      	mov	r3, r0
 8004618:	817b      	strh	r3, [r7, #10]
 800461a:	460b      	mov	r3, r1
 800461c:	813b      	strh	r3, [r7, #8]
 800461e:	4613      	mov	r3, r2
 8004620:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004622:	f7fe fcb1 	bl	8002f88 <HAL_GetTick>
 8004626:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b20      	cmp	r3, #32
 8004632:	f040 8208 	bne.w	8004a46 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	2319      	movs	r3, #25
 800463c:	2201      	movs	r2, #1
 800463e:	497b      	ldr	r1, [pc, #492]	; (800482c <HAL_I2C_Mem_Read+0x224>)
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 fcef 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800464c:	2302      	movs	r3, #2
 800464e:	e1fb      	b.n	8004a48 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_I2C_Mem_Read+0x56>
 800465a:	2302      	movs	r3, #2
 800465c:	e1f4      	b.n	8004a48 <HAL_I2C_Mem_Read+0x440>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b01      	cmp	r3, #1
 8004672:	d007      	beq.n	8004684 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004692:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2222      	movs	r2, #34	; 0x22
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2240      	movs	r2, #64	; 0x40
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80046b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4a5b      	ldr	r2, [pc, #364]	; (8004830 <HAL_I2C_Mem_Read+0x228>)
 80046c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046c6:	88f8      	ldrh	r0, [r7, #6]
 80046c8:	893a      	ldrh	r2, [r7, #8]
 80046ca:	8979      	ldrh	r1, [r7, #10]
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	9301      	str	r3, [sp, #4]
 80046d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	4603      	mov	r3, r0
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 fbbc 	bl	8004e54 <I2C_RequestMemoryRead>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e1b0      	b.n	8004a48 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d113      	bne.n	8004716 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ee:	2300      	movs	r3, #0
 80046f0:	623b      	str	r3, [r7, #32]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	623b      	str	r3, [r7, #32]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	623b      	str	r3, [r7, #32]
 8004702:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	e184      	b.n	8004a20 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471a:	2b01      	cmp	r3, #1
 800471c:	d11b      	bne.n	8004756 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800472c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	61fb      	str	r3, [r7, #28]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	61fb      	str	r3, [r7, #28]
 8004742:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	e164      	b.n	8004a20 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475a:	2b02      	cmp	r3, #2
 800475c:	d11b      	bne.n	8004796 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800476c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800477c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800477e:	2300      	movs	r3, #0
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	61bb      	str	r3, [r7, #24]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	e144      	b.n	8004a20 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80047ac:	e138      	b.n	8004a20 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	f200 80f1 	bhi.w	800499a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d123      	bne.n	8004808 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 fd85 	bl	80052d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e139      	b.n	8004a48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004806:	e10b      	b.n	8004a20 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480c:	2b02      	cmp	r3, #2
 800480e:	d14e      	bne.n	80048ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004816:	2200      	movs	r2, #0
 8004818:	4906      	ldr	r1, [pc, #24]	; (8004834 <HAL_I2C_Mem_Read+0x22c>)
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 fc02 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d008      	beq.n	8004838 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e10e      	b.n	8004a48 <HAL_I2C_Mem_Read+0x440>
 800482a:	bf00      	nop
 800482c:	00100002 	.word	0x00100002
 8004830:	ffff0000 	.word	0xffff0000
 8004834:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004846:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691a      	ldr	r2, [r3, #16]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048ac:	e0b8      	b.n	8004a20 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b4:	2200      	movs	r2, #0
 80048b6:	4966      	ldr	r1, [pc, #408]	; (8004a50 <HAL_I2C_Mem_Read+0x448>)
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 fbb3 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0bf      	b.n	8004a48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	1c5a      	adds	r2, r3, #1
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004900:	b29b      	uxth	r3, r3
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	2200      	movs	r2, #0
 8004912:	494f      	ldr	r1, [pc, #316]	; (8004a50 <HAL_I2C_Mem_Read+0x448>)
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 fb85 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e091      	b.n	8004a48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004932:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691a      	ldr	r2, [r3, #16]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495c:	b29b      	uxth	r3, r3
 800495e:	3b01      	subs	r3, #1
 8004960:	b29a      	uxth	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498e:	b29b      	uxth	r3, r3
 8004990:	3b01      	subs	r3, #1
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004998:	e042      	b.n	8004a20 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800499a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800499c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 fc98 	bl	80052d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e04c      	b.n	8004a48 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	f003 0304 	and.w	r3, r3, #4
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d118      	bne.n	8004a20 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f47f aec2 	bne.w	80047ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	e000      	b.n	8004a48 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a46:	2302      	movs	r3, #2
  }
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3728      	adds	r7, #40	; 0x28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	00010004 	.word	0x00010004

08004a54 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a62:	b2db      	uxtb	r3, r3
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	460b      	mov	r3, r1
 8004a96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d006      	beq.n	8004ab2 <I2C_MasterRequestWrite+0x2a>
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d003      	beq.n	8004ab2 <I2C_MasterRequestWrite+0x2a>
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ab0:	d108      	bne.n	8004ac4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	e00b      	b.n	8004adc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	2b12      	cmp	r3, #18
 8004aca:	d107      	bne.n	8004adc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ada:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 fa9b 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00d      	beq.n	8004b10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b02:	d103      	bne.n	8004b0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e035      	b.n	8004b7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b18:	d108      	bne.n	8004b2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b1a:	897b      	ldrh	r3, [r7, #10]
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b28:	611a      	str	r2, [r3, #16]
 8004b2a:	e01b      	b.n	8004b64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b2c:	897b      	ldrh	r3, [r7, #10]
 8004b2e:	11db      	asrs	r3, r3, #7
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	f003 0306 	and.w	r3, r3, #6
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	f063 030f 	orn	r3, r3, #15
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	490e      	ldr	r1, [pc, #56]	; (8004b84 <I2C_MasterRequestWrite+0xfc>)
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 fac1 	bl	80050d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e010      	b.n	8004b7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b5a:	897b      	ldrh	r3, [r7, #10]
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	4907      	ldr	r1, [pc, #28]	; (8004b88 <I2C_MasterRequestWrite+0x100>)
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 fab1 	bl	80050d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	00010008 	.word	0x00010008
 8004b88:	00010002 	.word	0x00010002

08004b8c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	607a      	str	r2, [r7, #4]
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bb0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d006      	beq.n	8004bc6 <I2C_MasterRequestRead+0x3a>
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d003      	beq.n	8004bc6 <I2C_MasterRequestRead+0x3a>
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bc4:	d108      	bne.n	8004bd8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	e00b      	b.n	8004bf0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bdc:	2b11      	cmp	r3, #17
 8004bde:	d107      	bne.n	8004bf0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 fa11 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00d      	beq.n	8004c24 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c16:	d103      	bne.n	8004c20 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e079      	b.n	8004d18 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c2c:	d108      	bne.n	8004c40 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c2e:	897b      	ldrh	r3, [r7, #10]
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	611a      	str	r2, [r3, #16]
 8004c3e:	e05f      	b.n	8004d00 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c40:	897b      	ldrh	r3, [r7, #10]
 8004c42:	11db      	asrs	r3, r3, #7
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	f003 0306 	and.w	r3, r3, #6
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	f063 030f 	orn	r3, r3, #15
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	4930      	ldr	r1, [pc, #192]	; (8004d20 <I2C_MasterRequestRead+0x194>)
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 fa37 	bl	80050d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e054      	b.n	8004d18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c6e:	897b      	ldrh	r3, [r7, #10]
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	4929      	ldr	r1, [pc, #164]	; (8004d24 <I2C_MasterRequestRead+0x198>)
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 fa27 	bl	80050d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e044      	b.n	8004d18 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	613b      	str	r3, [r7, #16]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cb2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 f9af 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00d      	beq.n	8004ce8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cda:	d103      	bne.n	8004ce4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ce2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e017      	b.n	8004d18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004ce8:	897b      	ldrh	r3, [r7, #10]
 8004cea:	11db      	asrs	r3, r3, #7
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	f003 0306 	and.w	r3, r3, #6
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	f063 030e 	orn	r3, r3, #14
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	4907      	ldr	r1, [pc, #28]	; (8004d24 <I2C_MasterRequestRead+0x198>)
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 f9e3 	bl	80050d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	00010008 	.word	0x00010008
 8004d24:	00010002 	.word	0x00010002

08004d28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af02      	add	r7, sp, #8
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	4608      	mov	r0, r1
 8004d32:	4611      	mov	r1, r2
 8004d34:	461a      	mov	r2, r3
 8004d36:	4603      	mov	r3, r0
 8004d38:	817b      	strh	r3, [r7, #10]
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	813b      	strh	r3, [r7, #8]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 f960 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00d      	beq.n	8004d86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d78:	d103      	bne.n	8004d82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e05f      	b.n	8004e46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d86:	897b      	ldrh	r3, [r7, #10]
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	6a3a      	ldr	r2, [r7, #32]
 8004d9a:	492d      	ldr	r1, [pc, #180]	; (8004e50 <I2C_RequestMemoryWrite+0x128>)
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 f998 	bl	80050d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e04c      	b.n	8004e46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc4:	6a39      	ldr	r1, [r7, #32]
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 fa02 	bl	80051d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00d      	beq.n	8004dee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d107      	bne.n	8004dea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e02b      	b.n	8004e46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dee:	88fb      	ldrh	r3, [r7, #6]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d105      	bne.n	8004e00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004df4:	893b      	ldrh	r3, [r7, #8]
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	611a      	str	r2, [r3, #16]
 8004dfe:	e021      	b.n	8004e44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e00:	893b      	ldrh	r3, [r7, #8]
 8004e02:	0a1b      	lsrs	r3, r3, #8
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e10:	6a39      	ldr	r1, [r7, #32]
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f9dc 	bl	80051d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00d      	beq.n	8004e3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d107      	bne.n	8004e36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e005      	b.n	8004e46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e3a:	893b      	ldrh	r3, [r7, #8]
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	00010002 	.word	0x00010002

08004e54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b088      	sub	sp, #32
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	4608      	mov	r0, r1
 8004e5e:	4611      	mov	r1, r2
 8004e60:	461a      	mov	r2, r3
 8004e62:	4603      	mov	r3, r0
 8004e64:	817b      	strh	r3, [r7, #10]
 8004e66:	460b      	mov	r3, r1
 8004e68:	813b      	strh	r3, [r7, #8]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 f8c2 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00d      	beq.n	8004ec2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eb4:	d103      	bne.n	8004ebe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ebc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e0aa      	b.n	8005018 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ec2:	897b      	ldrh	r3, [r7, #10]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ed0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	6a3a      	ldr	r2, [r7, #32]
 8004ed6:	4952      	ldr	r1, [pc, #328]	; (8005020 <I2C_RequestMemoryRead+0x1cc>)
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 f8fa 	bl	80050d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e097      	b.n	8005018 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f00:	6a39      	ldr	r1, [r7, #32]
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 f964 	bl	80051d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00d      	beq.n	8004f2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d107      	bne.n	8004f26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e076      	b.n	8005018 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f2a:	88fb      	ldrh	r3, [r7, #6]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d105      	bne.n	8004f3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f30:	893b      	ldrh	r3, [r7, #8]
 8004f32:	b2da      	uxtb	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	611a      	str	r2, [r3, #16]
 8004f3a:	e021      	b.n	8004f80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f3c:	893b      	ldrh	r3, [r7, #8]
 8004f3e:	0a1b      	lsrs	r3, r3, #8
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4c:	6a39      	ldr	r1, [r7, #32]
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 f93e 	bl	80051d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00d      	beq.n	8004f76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d107      	bne.n	8004f72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e050      	b.n	8005018 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f76:	893b      	ldrh	r3, [r7, #8]
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f82:	6a39      	ldr	r1, [r7, #32]
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 f923 	bl	80051d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00d      	beq.n	8004fac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d107      	bne.n	8004fa8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e035      	b.n	8005018 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 f82b 	bl	8005024 <I2C_WaitOnFlagUntilTimeout>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00d      	beq.n	8004ff0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe2:	d103      	bne.n	8004fec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e013      	b.n	8005018 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ff0:	897b      	ldrh	r3, [r7, #10]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	6a3a      	ldr	r2, [r7, #32]
 8005004:	4906      	ldr	r1, [pc, #24]	; (8005020 <I2C_RequestMemoryRead+0x1cc>)
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 f863 	bl	80050d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	00010002 	.word	0x00010002

08005024 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	4613      	mov	r3, r2
 8005032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005034:	e025      	b.n	8005082 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503c:	d021      	beq.n	8005082 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503e:	f7fd ffa3 	bl	8002f88 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d302      	bcc.n	8005054 <I2C_WaitOnFlagUntilTimeout+0x30>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d116      	bne.n	8005082 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2220      	movs	r2, #32
 800505e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	f043 0220 	orr.w	r2, r3, #32
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e023      	b.n	80050ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	0c1b      	lsrs	r3, r3, #16
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b01      	cmp	r3, #1
 800508a:	d10d      	bne.n	80050a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	43da      	mvns	r2, r3
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	4013      	ands	r3, r2
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	bf0c      	ite	eq
 800509e:	2301      	moveq	r3, #1
 80050a0:	2300      	movne	r3, #0
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	461a      	mov	r2, r3
 80050a6:	e00c      	b.n	80050c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	43da      	mvns	r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4013      	ands	r3, r2
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	bf0c      	ite	eq
 80050ba:	2301      	moveq	r3, #1
 80050bc:	2300      	movne	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	461a      	mov	r2, r3
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d0b6      	beq.n	8005036 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b084      	sub	sp, #16
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	607a      	str	r2, [r7, #4]
 80050de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050e0:	e051      	b.n	8005186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f0:	d123      	bne.n	800513a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005100:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800510a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2220      	movs	r2, #32
 8005116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f043 0204 	orr.w	r2, r3, #4
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e046      	b.n	80051c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005140:	d021      	beq.n	8005186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005142:	f7fd ff21 	bl	8002f88 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	429a      	cmp	r2, r3
 8005150:	d302      	bcc.n	8005158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d116      	bne.n	8005186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2220      	movs	r2, #32
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	f043 0220 	orr.w	r2, r3, #32
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e020      	b.n	80051c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	0c1b      	lsrs	r3, r3, #16
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b01      	cmp	r3, #1
 800518e:	d10c      	bne.n	80051aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	43da      	mvns	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4013      	ands	r3, r2
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	bf14      	ite	ne
 80051a2:	2301      	movne	r3, #1
 80051a4:	2300      	moveq	r3, #0
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	e00b      	b.n	80051c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	43da      	mvns	r2, r3
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	4013      	ands	r3, r2
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	bf14      	ite	ne
 80051bc:	2301      	movne	r3, #1
 80051be:	2300      	moveq	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d18d      	bne.n	80050e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051dc:	e02d      	b.n	800523a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 f8ce 	bl	8005380 <I2C_IsAcknowledgeFailed>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e02d      	b.n	800524a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f4:	d021      	beq.n	800523a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f6:	f7fd fec7 	bl	8002f88 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	429a      	cmp	r2, r3
 8005204:	d302      	bcc.n	800520c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d116      	bne.n	800523a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2220      	movs	r2, #32
 8005216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	f043 0220 	orr.w	r2, r3, #32
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e007      	b.n	800524a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005244:	2b80      	cmp	r3, #128	; 0x80
 8005246:	d1ca      	bne.n	80051de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b084      	sub	sp, #16
 8005256:	af00      	add	r7, sp, #0
 8005258:	60f8      	str	r0, [r7, #12]
 800525a:	60b9      	str	r1, [r7, #8]
 800525c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800525e:	e02d      	b.n	80052bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f88d 	bl	8005380 <I2C_IsAcknowledgeFailed>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e02d      	b.n	80052cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005276:	d021      	beq.n	80052bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005278:	f7fd fe86 	bl	8002f88 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	429a      	cmp	r2, r3
 8005286:	d302      	bcc.n	800528e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d116      	bne.n	80052bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	f043 0220 	orr.w	r2, r3, #32
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e007      	b.n	80052cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	f003 0304 	and.w	r3, r3, #4
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d1ca      	bne.n	8005260 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052e0:	e042      	b.n	8005368 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	d119      	bne.n	8005324 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0210 	mvn.w	r2, #16
 80052f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e029      	b.n	8005378 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005324:	f7fd fe30 	bl	8002f88 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	429a      	cmp	r2, r3
 8005332:	d302      	bcc.n	800533a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d116      	bne.n	8005368 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	f043 0220 	orr.w	r2, r3, #32
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e007      	b.n	8005378 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005372:	2b40      	cmp	r3, #64	; 0x40
 8005374:	d1b5      	bne.n	80052e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005396:	d11b      	bne.n	80053d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053bc:	f043 0204 	orr.w	r2, r3, #4
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80053de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053e0:	b08f      	sub	sp, #60	; 0x3c
 80053e2:	af0a      	add	r7, sp, #40	; 0x28
 80053e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e116      	b.n	800561e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f00c fa2e 	bl	801186c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2203      	movs	r2, #3
 8005414:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005420:	2b00      	cmp	r3, #0
 8005422:	d102      	bne.n	800542a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f004 ff8b 	bl	800a34a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	603b      	str	r3, [r7, #0]
 800543a:	687e      	ldr	r6, [r7, #4]
 800543c:	466d      	mov	r5, sp
 800543e:	f106 0410 	add.w	r4, r6, #16
 8005442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005446:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005448:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800544a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800544e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005452:	1d33      	adds	r3, r6, #4
 8005454:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005456:	6838      	ldr	r0, [r7, #0]
 8005458:	f004 fe62 	bl	800a120 <USB_CoreInit>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d005      	beq.n	800546e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2202      	movs	r2, #2
 8005466:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e0d7      	b.n	800561e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2100      	movs	r1, #0
 8005474:	4618      	mov	r0, r3
 8005476:	f004 ff79 	bl	800a36c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800547a:	2300      	movs	r3, #0
 800547c:	73fb      	strb	r3, [r7, #15]
 800547e:	e04a      	b.n	8005516 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005480:	7bfa      	ldrb	r2, [r7, #15]
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	4413      	add	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	333d      	adds	r3, #61	; 0x3d
 8005490:	2201      	movs	r2, #1
 8005492:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005494:	7bfa      	ldrb	r2, [r7, #15]
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	4613      	mov	r3, r2
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	4413      	add	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	333c      	adds	r3, #60	; 0x3c
 80054a4:	7bfa      	ldrb	r2, [r7, #15]
 80054a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80054a8:	7bfa      	ldrb	r2, [r7, #15]
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
 80054ac:	b298      	uxth	r0, r3
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	4613      	mov	r3, r2
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	4413      	add	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	3344      	adds	r3, #68	; 0x44
 80054bc:	4602      	mov	r2, r0
 80054be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80054c0:	7bfa      	ldrb	r2, [r7, #15]
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	4613      	mov	r3, r2
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	4413      	add	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	440b      	add	r3, r1
 80054ce:	3340      	adds	r3, #64	; 0x40
 80054d0:	2200      	movs	r2, #0
 80054d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80054d4:	7bfa      	ldrb	r2, [r7, #15]
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	4613      	mov	r3, r2
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	4413      	add	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	3348      	adds	r3, #72	; 0x48
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80054e8:	7bfa      	ldrb	r2, [r7, #15]
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	4613      	mov	r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	334c      	adds	r3, #76	; 0x4c
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80054fc:	7bfa      	ldrb	r2, [r7, #15]
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	4613      	mov	r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	4413      	add	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	3354      	adds	r3, #84	; 0x54
 800550c:	2200      	movs	r2, #0
 800550e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005510:	7bfb      	ldrb	r3, [r7, #15]
 8005512:	3301      	adds	r3, #1
 8005514:	73fb      	strb	r3, [r7, #15]
 8005516:	7bfa      	ldrb	r2, [r7, #15]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	429a      	cmp	r2, r3
 800551e:	d3af      	bcc.n	8005480 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005520:	2300      	movs	r3, #0
 8005522:	73fb      	strb	r3, [r7, #15]
 8005524:	e044      	b.n	80055b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005526:	7bfa      	ldrb	r2, [r7, #15]
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	4613      	mov	r3, r2
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	4413      	add	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	440b      	add	r3, r1
 8005534:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005538:	2200      	movs	r2, #0
 800553a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800553c:	7bfa      	ldrb	r2, [r7, #15]
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	4613      	mov	r3, r2
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800554e:	7bfa      	ldrb	r2, [r7, #15]
 8005550:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005552:	7bfa      	ldrb	r2, [r7, #15]
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	4613      	mov	r3, r2
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	440b      	add	r3, r1
 8005560:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005564:	2200      	movs	r2, #0
 8005566:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005568:	7bfa      	ldrb	r2, [r7, #15]
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	4613      	mov	r3, r2
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800557e:	7bfa      	ldrb	r2, [r7, #15]
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005594:	7bfa      	ldrb	r2, [r7, #15]
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	4413      	add	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
 80055ac:	3301      	adds	r3, #1
 80055ae:	73fb      	strb	r3, [r7, #15]
 80055b0:	7bfa      	ldrb	r2, [r7, #15]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d3b5      	bcc.n	8005526 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	603b      	str	r3, [r7, #0]
 80055c0:	687e      	ldr	r6, [r7, #4]
 80055c2:	466d      	mov	r5, sp
 80055c4:	f106 0410 	add.w	r4, r6, #16
 80055c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80055d8:	1d33      	adds	r3, r6, #4
 80055da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055dc:	6838      	ldr	r0, [r7, #0]
 80055de:	f004 ff11 	bl	800a404 <USB_DevInit>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d005      	beq.n	80055f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e014      	b.n	800561e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	2b01      	cmp	r3, #1
 800560a:	d102      	bne.n	8005612 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f001 f98b 	bl	8006928 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f006 f853 	bl	800b6c2 <USB_DevDisconnect>

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005626 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <HAL_PCD_Start+0x1c>
 800563e:	2302      	movs	r3, #2
 8005640:	e020      	b.n	8005684 <HAL_PCD_Start+0x5e>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564e:	2b01      	cmp	r3, #1
 8005650:	d109      	bne.n	8005666 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005656:	2b01      	cmp	r3, #1
 8005658:	d005      	beq.n	8005666 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f004 fe5c 	bl	800a328 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f006 f803 	bl	800b680 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800568c:	b590      	push	{r4, r7, lr}
 800568e:	b08d      	sub	sp, #52	; 0x34
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f006 f8c1 	bl	800b82a <USB_GetMode>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f040 84b7 	bne.w	800601e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f006 f825 	bl	800b704 <USB_ReadInterrupts>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 84ad 	beq.w	800601c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	0a1b      	lsrs	r3, r3, #8
 80056cc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f006 f812 	bl	800b704 <USB_ReadInterrupts>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d107      	bne.n	80056fa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	695a      	ldr	r2, [r3, #20]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f002 0202 	and.w	r2, r2, #2
 80056f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f006 f800 	bl	800b704 <USB_ReadInterrupts>
 8005704:	4603      	mov	r3, r0
 8005706:	f003 0310 	and.w	r3, r3, #16
 800570a:	2b10      	cmp	r3, #16
 800570c:	d161      	bne.n	80057d2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	699a      	ldr	r2, [r3, #24]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0210 	bic.w	r2, r2, #16
 800571c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	f003 020f 	and.w	r2, r3, #15
 800572a:	4613      	mov	r3, r2
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	4413      	add	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	4413      	add	r3, r2
 800573a:	3304      	adds	r3, #4
 800573c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	0c5b      	lsrs	r3, r3, #17
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	2b02      	cmp	r3, #2
 8005748:	d124      	bne.n	8005794 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005750:	4013      	ands	r3, r2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d035      	beq.n	80057c2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	091b      	lsrs	r3, r3, #4
 800575e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005760:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005764:	b29b      	uxth	r3, r3
 8005766:	461a      	mov	r2, r3
 8005768:	6a38      	ldr	r0, [r7, #32]
 800576a:	f005 fe37 	bl	800b3dc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	091b      	lsrs	r3, r3, #4
 8005776:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800577a:	441a      	add	r2, r3
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	6a1a      	ldr	r2, [r3, #32]
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	091b      	lsrs	r3, r3, #4
 8005788:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800578c:	441a      	add	r2, r3
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	621a      	str	r2, [r3, #32]
 8005792:	e016      	b.n	80057c2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	0c5b      	lsrs	r3, r3, #17
 8005798:	f003 030f 	and.w	r3, r3, #15
 800579c:	2b06      	cmp	r3, #6
 800579e:	d110      	bne.n	80057c2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80057a6:	2208      	movs	r2, #8
 80057a8:	4619      	mov	r1, r3
 80057aa:	6a38      	ldr	r0, [r7, #32]
 80057ac:	f005 fe16 	bl	800b3dc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	6a1a      	ldr	r2, [r3, #32]
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	091b      	lsrs	r3, r3, #4
 80057b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057bc:	441a      	add	r2, r3
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	699a      	ldr	r2, [r3, #24]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f042 0210 	orr.w	r2, r2, #16
 80057d0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f005 ff94 	bl	800b704 <USB_ReadInterrupts>
 80057dc:	4603      	mov	r3, r0
 80057de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80057e6:	f040 80a7 	bne.w	8005938 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f005 ff99 	bl	800b72a <USB_ReadDevAllOutEpInterrupt>
 80057f8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80057fa:	e099      	b.n	8005930 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80057fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 808e 	beq.w	8005924 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	4611      	mov	r1, r2
 8005812:	4618      	mov	r0, r3
 8005814:	f005 ffbd 	bl	800b792 <USB_ReadDevOutEPInterrupt>
 8005818:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00c      	beq.n	800583e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005830:	461a      	mov	r2, r3
 8005832:	2301      	movs	r3, #1
 8005834:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005836:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 feef 	bl	800661c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00c      	beq.n	8005862 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005854:	461a      	mov	r2, r3
 8005856:	2308      	movs	r3, #8
 8005858:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800585a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 ffc5 	bl	80067ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	f003 0310 	and.w	r3, r3, #16
 8005868:	2b00      	cmp	r3, #0
 800586a:	d008      	beq.n	800587e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005878:	461a      	mov	r2, r3
 800587a:	2310      	movs	r3, #16
 800587c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d030      	beq.n	80058ea <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005890:	2b80      	cmp	r3, #128	; 0x80
 8005892:	d109      	bne.n	80058a8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	69fa      	ldr	r2, [r7, #28]
 800589e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058a6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80058a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058aa:	4613      	mov	r3, r2
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	4413      	add	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	4413      	add	r3, r2
 80058ba:	3304      	adds	r3, #4
 80058bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	78db      	ldrb	r3, [r3, #3]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d108      	bne.n	80058d8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2200      	movs	r2, #0
 80058ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f00c f8e6 	bl	8011aa4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e4:	461a      	mov	r2, r3
 80058e6:	2302      	movs	r3, #2
 80058e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f003 0320 	and.w	r3, r3, #32
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d008      	beq.n	8005906 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005900:	461a      	mov	r2, r3
 8005902:	2320      	movs	r3, #32
 8005904:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d009      	beq.n	8005924 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591c:	461a      	mov	r2, r3
 800591e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005922:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	3301      	adds	r3, #1
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800592a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592c:	085b      	lsrs	r3, r3, #1
 800592e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	2b00      	cmp	r3, #0
 8005934:	f47f af62 	bne.w	80057fc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4618      	mov	r0, r3
 800593e:	f005 fee1 	bl	800b704 <USB_ReadInterrupts>
 8005942:	4603      	mov	r3, r0
 8005944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005948:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800594c:	f040 80db 	bne.w	8005b06 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4618      	mov	r0, r3
 8005956:	f005 ff02 	bl	800b75e <USB_ReadDevAllInEpInterrupt>
 800595a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005960:	e0cd      	b.n	8005afe <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 80c2 	beq.w	8005af2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	4611      	mov	r1, r2
 8005978:	4618      	mov	r0, r3
 800597a:	f005 ff28 	bl	800b7ce <USB_ReadDevInEPInterrupt>
 800597e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d057      	beq.n	8005a3a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	2201      	movs	r2, #1
 8005992:	fa02 f303 	lsl.w	r3, r2, r3
 8005996:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	43db      	mvns	r3, r3
 80059a4:	69f9      	ldr	r1, [r7, #28]
 80059a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059aa:	4013      	ands	r3, r2
 80059ac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ba:	461a      	mov	r2, r3
 80059bc:	2301      	movs	r3, #1
 80059be:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d132      	bne.n	8005a2e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80059c8:	6879      	ldr	r1, [r7, #4]
 80059ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059cc:	4613      	mov	r3, r2
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	4413      	add	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	334c      	adds	r3, #76	; 0x4c
 80059d8:	6819      	ldr	r1, [r3, #0]
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059de:	4613      	mov	r3, r2
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	4413      	add	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4403      	add	r3, r0
 80059e8:	3348      	adds	r3, #72	; 0x48
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4419      	add	r1, r3
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f2:	4613      	mov	r3, r2
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4403      	add	r3, r0
 80059fc:	334c      	adds	r3, #76	; 0x4c
 80059fe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d113      	bne.n	8005a2e <HAL_PCD_IRQHandler+0x3a2>
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	4413      	add	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	440b      	add	r3, r1
 8005a14:	3354      	adds	r3, #84	; 0x54
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d108      	bne.n	8005a2e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6818      	ldr	r0, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a26:	461a      	mov	r2, r3
 8005a28:	2101      	movs	r1, #1
 8005a2a:	f005 ff2f 	bl	800b88c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	4619      	mov	r1, r3
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f00b ffb0 	bl	801199a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d008      	beq.n	8005a56 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a50:	461a      	mov	r2, r3
 8005a52:	2308      	movs	r3, #8
 8005a54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f003 0310 	and.w	r3, r3, #16
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d008      	beq.n	8005a72 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	2310      	movs	r3, #16
 8005a70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a88:	461a      	mov	r2, r3
 8005a8a:	2340      	movs	r3, #64	; 0x40
 8005a8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d023      	beq.n	8005ae0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a9a:	6a38      	ldr	r0, [r7, #32]
 8005a9c:	f004 fe10 	bl	800a6c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	4413      	add	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	3338      	adds	r3, #56	; 0x38
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	4413      	add	r3, r2
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	78db      	ldrb	r3, [r3, #3]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d108      	bne.n	8005ace <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f00b fffd 	bl	8011ac8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ada:	461a      	mov	r2, r3
 8005adc:	2302      	movs	r3, #2
 8005ade:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005aea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fd08 	bl	8006502 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	3301      	adds	r3, #1
 8005af6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afa:	085b      	lsrs	r3, r3, #1
 8005afc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f47f af2e 	bne.w	8005962 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f005 fdfa 	bl	800b704 <USB_ReadInterrupts>
 8005b10:	4603      	mov	r3, r0
 8005b12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b1a:	d122      	bne.n	8005b62 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	69fa      	ldr	r2, [r7, #28]
 8005b26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b2a:	f023 0301 	bic.w	r3, r3, #1
 8005b2e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d108      	bne.n	8005b4c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005b42:	2100      	movs	r1, #0
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f00c f977 	bl	8011e38 <HAL_PCDEx_LPM_Callback>
 8005b4a:	e002      	b.n	8005b52 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f00b ff9b 	bl	8011a88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	695a      	ldr	r2, [r3, #20]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f005 fdcc 	bl	800b704 <USB_ReadInterrupts>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b76:	d112      	bne.n	8005b9e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d102      	bne.n	8005b8e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f00b ff57 	bl	8011a3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	695a      	ldr	r2, [r3, #20]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005b9c:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f005 fdae 	bl	800b704 <USB_ReadInterrupts>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bb2:	d121      	bne.n	8005bf8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695a      	ldr	r2, [r3, #20]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005bc2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d111      	bne.n	8005bf2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bdc:	089b      	lsrs	r3, r3, #2
 8005bde:	f003 020f 	and.w	r2, r3, #15
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005be8:	2101      	movs	r1, #1
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f00c f924 	bl	8011e38 <HAL_PCDEx_LPM_Callback>
 8005bf0:	e002      	b.n	8005bf8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f00b ff22 	bl	8011a3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f005 fd81 	bl	800b704 <USB_ReadInterrupts>
 8005c02:	4603      	mov	r3, r0
 8005c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0c:	f040 80b7 	bne.w	8005d7e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	69fa      	ldr	r2, [r7, #28]
 8005c1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c1e:	f023 0301 	bic.w	r3, r3, #1
 8005c22:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2110      	movs	r1, #16
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f004 fd48 	bl	800a6c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c30:	2300      	movs	r3, #0
 8005c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c34:	e046      	b.n	8005cc4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c42:	461a      	mov	r2, r3
 8005c44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c48:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c5a:	0151      	lsls	r1, r2, #5
 8005c5c:	69fa      	ldr	r2, [r7, #28]
 8005c5e:	440a      	add	r2, r1
 8005c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c76:	461a      	mov	r2, r3
 8005c78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c7c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c8e:	0151      	lsls	r1, r2, #5
 8005c90:	69fa      	ldr	r2, [r7, #28]
 8005c92:	440a      	add	r2, r1
 8005c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c9c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cae:	0151      	lsls	r1, r2, #5
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	440a      	add	r2, r1
 8005cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cbc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d3b3      	bcc.n	8005c36 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cdc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005ce0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d016      	beq.n	8005d18 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cf4:	69fa      	ldr	r2, [r7, #28]
 8005cf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cfa:	f043 030b 	orr.w	r3, r3, #11
 8005cfe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0a:	69fa      	ldr	r2, [r7, #28]
 8005d0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d10:	f043 030b 	orr.w	r3, r3, #11
 8005d14:	6453      	str	r3, [r2, #68]	; 0x44
 8005d16:	e015      	b.n	8005d44 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	69fa      	ldr	r2, [r7, #28]
 8005d22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d2a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005d2e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	69fa      	ldr	r2, [r7, #28]
 8005d3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d3e:	f043 030b 	orr.w	r3, r3, #11
 8005d42:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	69fa      	ldr	r2, [r7, #28]
 8005d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d52:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d56:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6818      	ldr	r0, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005d68:	461a      	mov	r2, r3
 8005d6a:	f005 fd8f 	bl	800b88c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	695a      	ldr	r2, [r3, #20]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005d7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f005 fcbe 	bl	800b704 <USB_ReadInterrupts>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d92:	d124      	bne.n	8005dde <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f005 fd54 	bl	800b846 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f004 fd09 	bl	800a7ba <USB_GetDevSpeed>
 8005da8:	4603      	mov	r3, r0
 8005daa:	461a      	mov	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681c      	ldr	r4, [r3, #0]
 8005db4:	f000 fec2 	bl	8006b3c <HAL_RCC_GetHCLKFreq>
 8005db8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	f004 fa0e 	bl	800a1e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f00b fe0e 	bl	80119ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	695a      	ldr	r2, [r3, #20]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005ddc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f005 fc8e 	bl	800b704 <USB_ReadInterrupts>
 8005de8:	4603      	mov	r3, r0
 8005dea:	f003 0308 	and.w	r3, r3, #8
 8005dee:	2b08      	cmp	r3, #8
 8005df0:	d10a      	bne.n	8005e08 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f00b fdeb 	bl	80119ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	695a      	ldr	r2, [r3, #20]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f002 0208 	and.w	r2, r2, #8
 8005e06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f005 fc79 	bl	800b704 <USB_ReadInterrupts>
 8005e12:	4603      	mov	r3, r0
 8005e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e18:	2b80      	cmp	r3, #128	; 0x80
 8005e1a:	d122      	bne.n	8005e62 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e28:	2301      	movs	r3, #1
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e2c:	e014      	b.n	8005e58 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005e2e:	6879      	ldr	r1, [r7, #4]
 8005e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e32:	4613      	mov	r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d105      	bne.n	8005e52 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fb27 	bl	80064a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	3301      	adds	r3, #1
 8005e56:	627b      	str	r3, [r7, #36]	; 0x24
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d3e5      	bcc.n	8005e2e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f005 fc4c 	bl	800b704 <USB_ReadInterrupts>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e76:	d13b      	bne.n	8005ef0 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e78:	2301      	movs	r3, #1
 8005e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e7c:	e02b      	b.n	8005ed6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e92:	4613      	mov	r3, r2
 8005e94:	00db      	lsls	r3, r3, #3
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	440b      	add	r3, r1
 8005e9c:	3340      	adds	r3, #64	; 0x40
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d115      	bne.n	8005ed0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005ea4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	da12      	bge.n	8005ed0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eae:	4613      	mov	r3, r2
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	4413      	add	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	440b      	add	r3, r1
 8005eb8:	333f      	adds	r3, #63	; 0x3f
 8005eba:	2201      	movs	r2, #1
 8005ebc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fae8 	bl	80064a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d3ce      	bcc.n	8005e7e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	695a      	ldr	r2, [r3, #20]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005eee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f005 fc05 	bl	800b704 <USB_ReadInterrupts>
 8005efa:	4603      	mov	r3, r0
 8005efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f04:	d155      	bne.n	8005fb2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f06:	2301      	movs	r3, #1
 8005f08:	627b      	str	r3, [r7, #36]	; 0x24
 8005f0a:	e045      	b.n	8005f98 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f1c:	6879      	ldr	r1, [r7, #4]
 8005f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f20:	4613      	mov	r3, r2
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	4413      	add	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	440b      	add	r3, r1
 8005f2a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d12e      	bne.n	8005f92 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005f34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	da2b      	bge.n	8005f92 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005f46:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d121      	bne.n	8005f92 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005f4e:	6879      	ldr	r1, [r7, #4]
 8005f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f52:	4613      	mov	r3, r2
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	4413      	add	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	440b      	add	r3, r1
 8005f5c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005f60:	2201      	movs	r2, #1
 8005f62:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10a      	bne.n	8005f92 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f8e:	6053      	str	r3, [r2, #4]
            break;
 8005f90:	e007      	b.n	8005fa2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	3301      	adds	r3, #1
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d3b4      	bcc.n	8005f0c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	695a      	ldr	r2, [r3, #20]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005fb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f005 fba4 	bl	800b704 <USB_ReadInterrupts>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc6:	d10a      	bne.n	8005fde <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f00b fd8f 	bl	8011aec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	695a      	ldr	r2, [r3, #20]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005fdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f005 fb8e 	bl	800b704 <USB_ReadInterrupts>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	f003 0304 	and.w	r3, r3, #4
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	d115      	bne.n	800601e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f00b fd7f 	bl	8011b08 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6859      	ldr	r1, [r3, #4]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
 800601a:	e000      	b.n	800601e <HAL_PCD_IRQHandler+0x992>
      return;
 800601c:	bf00      	nop
    }
  }
}
 800601e:	3734      	adds	r7, #52	; 0x34
 8006020:	46bd      	mov	sp, r7
 8006022:	bd90      	pop	{r4, r7, pc}

08006024 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	460b      	mov	r3, r1
 800602e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006036:	2b01      	cmp	r3, #1
 8006038:	d101      	bne.n	800603e <HAL_PCD_SetAddress+0x1a>
 800603a:	2302      	movs	r3, #2
 800603c:	e013      	b.n	8006066 <HAL_PCD_SetAddress+0x42>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	78fa      	ldrb	r2, [r7, #3]
 800604a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	78fa      	ldrb	r2, [r7, #3]
 8006054:	4611      	mov	r1, r2
 8006056:	4618      	mov	r0, r3
 8006058:	f005 faec 	bl	800b634 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b084      	sub	sp, #16
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	4608      	mov	r0, r1
 8006078:	4611      	mov	r1, r2
 800607a:	461a      	mov	r2, r3
 800607c:	4603      	mov	r3, r0
 800607e:	70fb      	strb	r3, [r7, #3]
 8006080:	460b      	mov	r3, r1
 8006082:	803b      	strh	r3, [r7, #0]
 8006084:	4613      	mov	r3, r2
 8006086:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800608c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006090:	2b00      	cmp	r3, #0
 8006092:	da0f      	bge.n	80060b4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006094:	78fb      	ldrb	r3, [r7, #3]
 8006096:	f003 020f 	and.w	r2, r3, #15
 800609a:	4613      	mov	r3, r2
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	3338      	adds	r3, #56	; 0x38
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	4413      	add	r3, r2
 80060a8:	3304      	adds	r3, #4
 80060aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2201      	movs	r2, #1
 80060b0:	705a      	strb	r2, [r3, #1]
 80060b2:	e00f      	b.n	80060d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060b4:	78fb      	ldrb	r3, [r7, #3]
 80060b6:	f003 020f 	and.w	r2, r3, #15
 80060ba:	4613      	mov	r3, r2
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	4413      	add	r3, r2
 80060ca:	3304      	adds	r3, #4
 80060cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	f003 030f 	and.w	r3, r3, #15
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80060e0:	883a      	ldrh	r2, [r7, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	78ba      	ldrb	r2, [r7, #2]
 80060ea:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	785b      	ldrb	r3, [r3, #1]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d004      	beq.n	80060fe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80060fe:	78bb      	ldrb	r3, [r7, #2]
 8006100:	2b02      	cmp	r3, #2
 8006102:	d102      	bne.n	800610a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_PCD_EP_Open+0xaa>
 8006114:	2302      	movs	r3, #2
 8006116:	e00e      	b.n	8006136 <HAL_PCD_EP_Open+0xc8>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68f9      	ldr	r1, [r7, #12]
 8006126:	4618      	mov	r0, r3
 8006128:	f004 fb6c 	bl	800a804 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006134:	7afb      	ldrb	r3, [r7, #11]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b084      	sub	sp, #16
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	460b      	mov	r3, r1
 8006148:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800614a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800614e:	2b00      	cmp	r3, #0
 8006150:	da0f      	bge.n	8006172 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006152:	78fb      	ldrb	r3, [r7, #3]
 8006154:	f003 020f 	and.w	r2, r3, #15
 8006158:	4613      	mov	r3, r2
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	4413      	add	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	3338      	adds	r3, #56	; 0x38
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	4413      	add	r3, r2
 8006166:	3304      	adds	r3, #4
 8006168:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2201      	movs	r2, #1
 800616e:	705a      	strb	r2, [r3, #1]
 8006170:	e00f      	b.n	8006192 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006172:	78fb      	ldrb	r3, [r7, #3]
 8006174:	f003 020f 	and.w	r2, r3, #15
 8006178:	4613      	mov	r3, r2
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	4413      	add	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	4413      	add	r3, r2
 8006188:	3304      	adds	r3, #4
 800618a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006192:	78fb      	ldrb	r3, [r7, #3]
 8006194:	f003 030f 	and.w	r3, r3, #15
 8006198:	b2da      	uxtb	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d101      	bne.n	80061ac <HAL_PCD_EP_Close+0x6e>
 80061a8:	2302      	movs	r3, #2
 80061aa:	e00e      	b.n	80061ca <HAL_PCD_EP_Close+0x8c>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68f9      	ldr	r1, [r7, #12]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f004 fbaa 	bl	800a914 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b086      	sub	sp, #24
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	607a      	str	r2, [r7, #4]
 80061dc:	603b      	str	r3, [r7, #0]
 80061de:	460b      	mov	r3, r1
 80061e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061e2:	7afb      	ldrb	r3, [r7, #11]
 80061e4:	f003 020f 	and.w	r2, r3, #15
 80061e8:	4613      	mov	r3, r2
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	4413      	add	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4413      	add	r3, r2
 80061f8:	3304      	adds	r3, #4
 80061fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	2200      	movs	r2, #0
 800620c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2200      	movs	r2, #0
 8006212:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006214:	7afb      	ldrb	r3, [r7, #11]
 8006216:	f003 030f 	and.w	r3, r3, #15
 800621a:	b2da      	uxtb	r2, r3
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d102      	bne.n	800622e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800622e:	7afb      	ldrb	r3, [r7, #11]
 8006230:	f003 030f 	and.w	r3, r3, #15
 8006234:	2b00      	cmp	r3, #0
 8006236:	d109      	bne.n	800624c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6818      	ldr	r0, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	b2db      	uxtb	r3, r3
 8006242:	461a      	mov	r2, r3
 8006244:	6979      	ldr	r1, [r7, #20]
 8006246:	f004 fe89 	bl	800af5c <USB_EP0StartXfer>
 800624a:	e008      	b.n	800625e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6818      	ldr	r0, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	461a      	mov	r2, r3
 8006258:	6979      	ldr	r1, [r7, #20]
 800625a:	f004 fc37 	bl	800aacc <USB_EPStartXfer>
  }

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006274:	78fb      	ldrb	r3, [r7, #3]
 8006276:	f003 020f 	and.w	r2, r3, #15
 800627a:	6879      	ldr	r1, [r7, #4]
 800627c:	4613      	mov	r3, r2
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	4413      	add	r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	440b      	add	r3, r1
 8006286:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800628a:	681b      	ldr	r3, [r3, #0]
}
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	607a      	str	r2, [r7, #4]
 80062a2:	603b      	str	r3, [r7, #0]
 80062a4:	460b      	mov	r3, r1
 80062a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062a8:	7afb      	ldrb	r3, [r7, #11]
 80062aa:	f003 020f 	and.w	r2, r3, #15
 80062ae:	4613      	mov	r3, r2
 80062b0:	00db      	lsls	r3, r3, #3
 80062b2:	4413      	add	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	3338      	adds	r3, #56	; 0x38
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	4413      	add	r3, r2
 80062bc:	3304      	adds	r3, #4
 80062be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	2200      	movs	r2, #0
 80062d0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2201      	movs	r2, #1
 80062d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062d8:	7afb      	ldrb	r3, [r7, #11]
 80062da:	f003 030f 	and.w	r3, r3, #15
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d102      	bne.n	80062f2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80062f2:	7afb      	ldrb	r3, [r7, #11]
 80062f4:	f003 030f 	and.w	r3, r3, #15
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d109      	bne.n	8006310 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6818      	ldr	r0, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	b2db      	uxtb	r3, r3
 8006306:	461a      	mov	r2, r3
 8006308:	6979      	ldr	r1, [r7, #20]
 800630a:	f004 fe27 	bl	800af5c <USB_EP0StartXfer>
 800630e:	e008      	b.n	8006322 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	b2db      	uxtb	r3, r3
 800631a:	461a      	mov	r2, r3
 800631c:	6979      	ldr	r1, [r7, #20]
 800631e:	f004 fbd5 	bl	800aacc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	460b      	mov	r3, r1
 8006336:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	f003 020f 	and.w	r2, r3, #15
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	429a      	cmp	r2, r3
 8006344:	d901      	bls.n	800634a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e050      	b.n	80063ec <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800634a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800634e:	2b00      	cmp	r3, #0
 8006350:	da0f      	bge.n	8006372 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	f003 020f 	and.w	r2, r3, #15
 8006358:	4613      	mov	r3, r2
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	4413      	add	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	3338      	adds	r3, #56	; 0x38
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	4413      	add	r3, r2
 8006366:	3304      	adds	r3, #4
 8006368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2201      	movs	r2, #1
 800636e:	705a      	strb	r2, [r3, #1]
 8006370:	e00d      	b.n	800638e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006372:	78fa      	ldrb	r2, [r7, #3]
 8006374:	4613      	mov	r3, r2
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	4413      	add	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	4413      	add	r3, r2
 8006384:	3304      	adds	r3, #4
 8006386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2201      	movs	r2, #1
 8006392:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	f003 030f 	and.w	r3, r3, #15
 800639a:	b2da      	uxtb	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d101      	bne.n	80063ae <HAL_PCD_EP_SetStall+0x82>
 80063aa:	2302      	movs	r3, #2
 80063ac:	e01e      	b.n	80063ec <HAL_PCD_EP_SetStall+0xc0>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68f9      	ldr	r1, [r7, #12]
 80063bc:	4618      	mov	r0, r3
 80063be:	f005 f865 	bl	800b48c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80063c2:	78fb      	ldrb	r3, [r7, #3]
 80063c4:	f003 030f 	and.w	r3, r3, #15
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10a      	bne.n	80063e2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6818      	ldr	r0, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	b2d9      	uxtb	r1, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80063dc:	461a      	mov	r2, r3
 80063de:	f005 fa55 	bl	800b88c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	460b      	mov	r3, r1
 80063fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	f003 020f 	and.w	r2, r3, #15
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	429a      	cmp	r2, r3
 800640c:	d901      	bls.n	8006412 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e042      	b.n	8006498 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006412:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006416:	2b00      	cmp	r3, #0
 8006418:	da0f      	bge.n	800643a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800641a:	78fb      	ldrb	r3, [r7, #3]
 800641c:	f003 020f 	and.w	r2, r3, #15
 8006420:	4613      	mov	r3, r2
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	4413      	add	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	3338      	adds	r3, #56	; 0x38
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	4413      	add	r3, r2
 800642e:	3304      	adds	r3, #4
 8006430:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2201      	movs	r2, #1
 8006436:	705a      	strb	r2, [r3, #1]
 8006438:	e00f      	b.n	800645a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800643a:	78fb      	ldrb	r3, [r7, #3]
 800643c:	f003 020f 	and.w	r2, r3, #15
 8006440:	4613      	mov	r3, r2
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	4413      	add	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	4413      	add	r3, r2
 8006450:	3304      	adds	r3, #4
 8006452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006460:	78fb      	ldrb	r3, [r7, #3]
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	b2da      	uxtb	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006472:	2b01      	cmp	r3, #1
 8006474:	d101      	bne.n	800647a <HAL_PCD_EP_ClrStall+0x86>
 8006476:	2302      	movs	r3, #2
 8006478:	e00e      	b.n	8006498 <HAL_PCD_EP_ClrStall+0xa4>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68f9      	ldr	r1, [r7, #12]
 8006488:	4618      	mov	r0, r3
 800648a:	f005 f86d 	bl	800b568 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	460b      	mov	r3, r1
 80064aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80064ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	da0c      	bge.n	80064ce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	f003 020f 	and.w	r2, r3, #15
 80064ba:	4613      	mov	r3, r2
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	4413      	add	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	3338      	adds	r3, #56	; 0x38
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	4413      	add	r3, r2
 80064c8:	3304      	adds	r3, #4
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	e00c      	b.n	80064e8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	f003 020f 	and.w	r2, r3, #15
 80064d4:	4613      	mov	r3, r2
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	4413      	add	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	4413      	add	r3, r2
 80064e4:	3304      	adds	r3, #4
 80064e6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68f9      	ldr	r1, [r7, #12]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f004 fe8c 	bl	800b20c <USB_EPStopXfer>
 80064f4:	4603      	mov	r3, r0
 80064f6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80064f8:	7afb      	ldrb	r3, [r7, #11]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b08a      	sub	sp, #40	; 0x28
 8006506:	af02      	add	r7, sp, #8
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	4613      	mov	r3, r2
 800651a:	00db      	lsls	r3, r3, #3
 800651c:	4413      	add	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	3338      	adds	r3, #56	; 0x38
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	4413      	add	r3, r2
 8006526:	3304      	adds	r3, #4
 8006528:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6a1a      	ldr	r2, [r3, #32]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	429a      	cmp	r2, r3
 8006534:	d901      	bls.n	800653a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e06c      	b.n	8006614 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	699a      	ldr	r2, [r3, #24]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	69fa      	ldr	r2, [r7, #28]
 800654c:	429a      	cmp	r2, r3
 800654e:	d902      	bls.n	8006556 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	3303      	adds	r3, #3
 800655a:	089b      	lsrs	r3, r3, #2
 800655c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800655e:	e02b      	b.n	80065b8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	699a      	ldr	r2, [r3, #24]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	69fa      	ldr	r2, [r7, #28]
 8006572:	429a      	cmp	r2, r3
 8006574:	d902      	bls.n	800657c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	3303      	adds	r3, #3
 8006580:	089b      	lsrs	r3, r3, #2
 8006582:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6919      	ldr	r1, [r3, #16]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	b2da      	uxtb	r2, r3
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006594:	b2db      	uxtb	r3, r3
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	4603      	mov	r3, r0
 800659a:	6978      	ldr	r0, [r7, #20]
 800659c:	f004 fee0 	bl	800b360 <USB_WritePacket>

    ep->xfer_buff  += len;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	691a      	ldr	r2, [r3, #16]
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	441a      	add	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a1a      	ldr	r2, [r3, #32]
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	441a      	add	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d809      	bhi.n	80065e2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6a1a      	ldr	r2, [r3, #32]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d203      	bcs.n	80065e2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1be      	bne.n	8006560 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	699a      	ldr	r2, [r3, #24]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d811      	bhi.n	8006612 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	f003 030f 	and.w	r3, r3, #15
 80065f4:	2201      	movs	r2, #1
 80065f6:	fa02 f303 	lsl.w	r3, r2, r3
 80065fa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	43db      	mvns	r3, r3
 8006608:	6939      	ldr	r1, [r7, #16]
 800660a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800660e:	4013      	ands	r3, r2
 8006610:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3720      	adds	r7, #32
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b088      	sub	sp, #32
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	333c      	adds	r3, #60	; 0x3c
 8006634:	3304      	adds	r3, #4
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d17b      	bne.n	800674a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f003 0308 	and.w	r3, r3, #8
 8006658:	2b00      	cmp	r3, #0
 800665a:	d015      	beq.n	8006688 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	4a61      	ldr	r2, [pc, #388]	; (80067e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006660:	4293      	cmp	r3, r2
 8006662:	f240 80b9 	bls.w	80067d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 80b3 	beq.w	80067d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	4413      	add	r3, r2
 800667a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667e:	461a      	mov	r2, r3
 8006680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006684:	6093      	str	r3, [r2, #8]
 8006686:	e0a7      	b.n	80067d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b00      	cmp	r3, #0
 8006690:	d009      	beq.n	80066a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669e:	461a      	mov	r2, r3
 80066a0:	2320      	movs	r3, #32
 80066a2:	6093      	str	r3, [r2, #8]
 80066a4:	e098      	b.n	80067d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f040 8093 	bne.w	80067d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	4a4b      	ldr	r2, [pc, #300]	; (80067e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d90f      	bls.n	80066da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00a      	beq.n	80066da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d0:	461a      	mov	r2, r3
 80066d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066d6:	6093      	str	r3, [r2, #8]
 80066d8:	e07e      	b.n	80067d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	4613      	mov	r3, r2
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	4413      	add	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	4413      	add	r3, r2
 80066ec:	3304      	adds	r3, #4
 80066ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	69da      	ldr	r2, [r3, #28]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	0159      	lsls	r1, r3, #5
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	440b      	add	r3, r1
 80066fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006706:	1ad2      	subs	r2, r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d114      	bne.n	800673c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d109      	bne.n	800672e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6818      	ldr	r0, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006724:	461a      	mov	r2, r3
 8006726:	2101      	movs	r1, #1
 8006728:	f005 f8b0 	bl	800b88c <USB_EP0_OutStart>
 800672c:	e006      	b.n	800673c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	691a      	ldr	r2, [r3, #16]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	441a      	add	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	b2db      	uxtb	r3, r3
 8006740:	4619      	mov	r1, r3
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f00b f90e 	bl	8011964 <HAL_PCD_DataOutStageCallback>
 8006748:	e046      	b.n	80067d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	4a26      	ldr	r2, [pc, #152]	; (80067e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d124      	bne.n	800679c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00a      	beq.n	8006772 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	4413      	add	r3, r2
 8006764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006768:	461a      	mov	r2, r3
 800676a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800676e:	6093      	str	r3, [r2, #8]
 8006770:	e032      	b.n	80067d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b00      	cmp	r3, #0
 800677a:	d008      	beq.n	800678e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	4413      	add	r3, r2
 8006784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006788:	461a      	mov	r2, r3
 800678a:	2320      	movs	r3, #32
 800678c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	b2db      	uxtb	r3, r3
 8006792:	4619      	mov	r1, r3
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f00b f8e5 	bl	8011964 <HAL_PCD_DataOutStageCallback>
 800679a:	e01d      	b.n	80067d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d114      	bne.n	80067cc <PCD_EP_OutXfrComplete_int+0x1b0>
 80067a2:	6879      	ldr	r1, [r7, #4]
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	4613      	mov	r3, r2
 80067a8:	00db      	lsls	r3, r3, #3
 80067aa:	4413      	add	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	440b      	add	r3, r1
 80067b0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d108      	bne.n	80067cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6818      	ldr	r0, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80067c4:	461a      	mov	r2, r3
 80067c6:	2100      	movs	r1, #0
 80067c8:	f005 f860 	bl	800b88c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	4619      	mov	r1, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f00b f8c6 	bl	8011964 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3720      	adds	r7, #32
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	4f54300a 	.word	0x4f54300a
 80067e8:	4f54310a 	.word	0x4f54310a

080067ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	333c      	adds	r3, #60	; 0x3c
 8006804:	3304      	adds	r3, #4
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	4a15      	ldr	r2, [pc, #84]	; (8006874 <PCD_EP_OutSetupPacket_int+0x88>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d90e      	bls.n	8006840 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006828:	2b00      	cmp	r3, #0
 800682a:	d009      	beq.n	8006840 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006838:	461a      	mov	r2, r3
 800683a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800683e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f00b f87d 	bl	8011940 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4a0a      	ldr	r2, [pc, #40]	; (8006874 <PCD_EP_OutSetupPacket_int+0x88>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d90c      	bls.n	8006868 <PCD_EP_OutSetupPacket_int+0x7c>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d108      	bne.n	8006868 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6818      	ldr	r0, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006860:	461a      	mov	r2, r3
 8006862:	2101      	movs	r1, #1
 8006864:	f005 f812 	bl	800b88c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3718      	adds	r7, #24
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	4f54300a 	.word	0x4f54300a

08006878 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	460b      	mov	r3, r1
 8006882:	70fb      	strb	r3, [r7, #3]
 8006884:	4613      	mov	r3, r2
 8006886:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006890:	78fb      	ldrb	r3, [r7, #3]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d107      	bne.n	80068a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006896:	883b      	ldrh	r3, [r7, #0]
 8006898:	0419      	lsls	r1, r3, #16
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	629a      	str	r2, [r3, #40]	; 0x28
 80068a4:	e028      	b.n	80068f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ac:	0c1b      	lsrs	r3, r3, #16
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	4413      	add	r3, r2
 80068b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80068b4:	2300      	movs	r3, #0
 80068b6:	73fb      	strb	r3, [r7, #15]
 80068b8:	e00d      	b.n	80068d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	7bfb      	ldrb	r3, [r7, #15]
 80068c0:	3340      	adds	r3, #64	; 0x40
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	0c1b      	lsrs	r3, r3, #16
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	4413      	add	r3, r2
 80068ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	3301      	adds	r3, #1
 80068d4:	73fb      	strb	r3, [r7, #15]
 80068d6:	7bfa      	ldrb	r2, [r7, #15]
 80068d8:	78fb      	ldrb	r3, [r7, #3]
 80068da:	3b01      	subs	r3, #1
 80068dc:	429a      	cmp	r2, r3
 80068de:	d3ec      	bcc.n	80068ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80068e0:	883b      	ldrh	r3, [r7, #0]
 80068e2:	0418      	lsls	r0, r3, #16
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6819      	ldr	r1, [r3, #0]
 80068e8:	78fb      	ldrb	r3, [r7, #3]
 80068ea:	3b01      	subs	r3, #1
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	4302      	orrs	r2, r0
 80068f0:	3340      	adds	r3, #64	; 0x40
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	440b      	add	r3, r1
 80068f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006906:	b480      	push	{r7}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	460b      	mov	r3, r1
 8006910:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	887a      	ldrh	r2, [r7, #2]
 8006918:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800695a:	f043 0303 	orr.w	r3, r3, #3
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d101      	bne.n	8006984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e0cc      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006984:	4b68      	ldr	r3, [pc, #416]	; (8006b28 <HAL_RCC_ClockConfig+0x1b8>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 030f 	and.w	r3, r3, #15
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	429a      	cmp	r2, r3
 8006990:	d90c      	bls.n	80069ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006992:	4b65      	ldr	r3, [pc, #404]	; (8006b28 <HAL_RCC_ClockConfig+0x1b8>)
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800699a:	4b63      	ldr	r3, [pc, #396]	; (8006b28 <HAL_RCC_ClockConfig+0x1b8>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d001      	beq.n	80069ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e0b8      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d020      	beq.n	80069fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0304 	and.w	r3, r3, #4
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d005      	beq.n	80069d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069c4:	4b59      	ldr	r3, [pc, #356]	; (8006b2c <HAL_RCC_ClockConfig+0x1bc>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	4a58      	ldr	r2, [pc, #352]	; (8006b2c <HAL_RCC_ClockConfig+0x1bc>)
 80069ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80069ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0308 	and.w	r3, r3, #8
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d005      	beq.n	80069e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069dc:	4b53      	ldr	r3, [pc, #332]	; (8006b2c <HAL_RCC_ClockConfig+0x1bc>)
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	4a52      	ldr	r2, [pc, #328]	; (8006b2c <HAL_RCC_ClockConfig+0x1bc>)
 80069e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80069e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069e8:	4b50      	ldr	r3, [pc, #320]	; (8006b2c <HAL_RCC_ClockConfig+0x1bc>)
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	494d      	ldr	r1, [pc, #308]	; (8006b2c <HAL_RCC_ClockConfig+0x1bc>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d044      	beq.n	8006a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d107      	bne.n	8006a1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a0e:	4b47      	ldr	r3, [pc, #284]	; (8006b2c <HAL_RCC_ClockConfig+0x1bc>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d119      	bne.n	8006a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e07f      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d003      	beq.n	8006a2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a2a:	2b03      	cmp	r3, #3
 8006a2c:	d107      	bne.n	8006a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a2e:	4b3f      	ldr	r3, [pc, #252]	; (8006b2c <HAL_RCC_ClockConfig+0x1bc>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d109      	bne.n	8006a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e06f      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a3e:	4b3b      	ldr	r3, [pc, #236]	; (8006b2c <HAL_RCC_ClockConfig+0x1bc>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e067      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a4e:	4b37      	ldr	r3, [pc, #220]	; (8006b2c <HAL_RCC_ClockConfig+0x1bc>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f023 0203 	bic.w	r2, r3, #3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	4934      	ldr	r1, [pc, #208]	; (8006b2c <HAL_RCC_ClockConfig+0x1bc>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a60:	f7fc fa92 	bl	8002f88 <HAL_GetTick>
 8006a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a66:	e00a      	b.n	8006a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a68:	f7fc fa8e 	bl	8002f88 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e04f      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a7e:	4b2b      	ldr	r3, [pc, #172]	; (8006b2c <HAL_RCC_ClockConfig+0x1bc>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f003 020c 	and.w	r2, r3, #12
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d1eb      	bne.n	8006a68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a90:	4b25      	ldr	r3, [pc, #148]	; (8006b28 <HAL_RCC_ClockConfig+0x1b8>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 030f 	and.w	r3, r3, #15
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d20c      	bcs.n	8006ab8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a9e:	4b22      	ldr	r3, [pc, #136]	; (8006b28 <HAL_RCC_ClockConfig+0x1b8>)
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aa6:	4b20      	ldr	r3, [pc, #128]	; (8006b28 <HAL_RCC_ClockConfig+0x1b8>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 030f 	and.w	r3, r3, #15
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d001      	beq.n	8006ab8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e032      	b.n	8006b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d008      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ac4:	4b19      	ldr	r3, [pc, #100]	; (8006b2c <HAL_RCC_ClockConfig+0x1bc>)
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	4916      	ldr	r1, [pc, #88]	; (8006b2c <HAL_RCC_ClockConfig+0x1bc>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0308 	and.w	r3, r3, #8
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d009      	beq.n	8006af6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ae2:	4b12      	ldr	r3, [pc, #72]	; (8006b2c <HAL_RCC_ClockConfig+0x1bc>)
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	490e      	ldr	r1, [pc, #56]	; (8006b2c <HAL_RCC_ClockConfig+0x1bc>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006af6:	f000 fbb1 	bl	800725c <HAL_RCC_GetSysClockFreq>
 8006afa:	4602      	mov	r2, r0
 8006afc:	4b0b      	ldr	r3, [pc, #44]	; (8006b2c <HAL_RCC_ClockConfig+0x1bc>)
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	091b      	lsrs	r3, r3, #4
 8006b02:	f003 030f 	and.w	r3, r3, #15
 8006b06:	490a      	ldr	r1, [pc, #40]	; (8006b30 <HAL_RCC_ClockConfig+0x1c0>)
 8006b08:	5ccb      	ldrb	r3, [r1, r3]
 8006b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b0e:	4a09      	ldr	r2, [pc, #36]	; (8006b34 <HAL_RCC_ClockConfig+0x1c4>)
 8006b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b12:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <HAL_RCC_ClockConfig+0x1c8>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fa feec 	bl	80018f4 <HAL_InitTick>

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	40023c00 	.word	0x40023c00
 8006b2c:	40023800 	.word	0x40023800
 8006b30:	0801515c 	.word	0x0801515c
 8006b34:	20000000 	.word	0x20000000
 8006b38:	20000004 	.word	0x20000004

08006b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b40:	4b03      	ldr	r3, [pc, #12]	; (8006b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b42:	681b      	ldr	r3, [r3, #0]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	20000000 	.word	0x20000000

08006b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b58:	f7ff fff0 	bl	8006b3c <HAL_RCC_GetHCLKFreq>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	0a9b      	lsrs	r3, r3, #10
 8006b64:	f003 0307 	and.w	r3, r3, #7
 8006b68:	4903      	ldr	r1, [pc, #12]	; (8006b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b6a:	5ccb      	ldrb	r3, [r1, r3]
 8006b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	40023800 	.word	0x40023800
 8006b78:	0801516c 	.word	0x0801516c

08006b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b80:	f7ff ffdc 	bl	8006b3c <HAL_RCC_GetHCLKFreq>
 8006b84:	4602      	mov	r2, r0
 8006b86:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	0b5b      	lsrs	r3, r3, #13
 8006b8c:	f003 0307 	and.w	r3, r3, #7
 8006b90:	4903      	ldr	r1, [pc, #12]	; (8006ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b92:	5ccb      	ldrb	r3, [r1, r3]
 8006b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	40023800 	.word	0x40023800
 8006ba0:	0801516c 	.word	0x0801516c

08006ba4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	220f      	movs	r2, #15
 8006bb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006bb4:	4b12      	ldr	r3, [pc, #72]	; (8006c00 <HAL_RCC_GetClockConfig+0x5c>)
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f003 0203 	and.w	r2, r3, #3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006bc0:	4b0f      	ldr	r3, [pc, #60]	; (8006c00 <HAL_RCC_GetClockConfig+0x5c>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006bcc:	4b0c      	ldr	r3, [pc, #48]	; (8006c00 <HAL_RCC_GetClockConfig+0x5c>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006bd8:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <HAL_RCC_GetClockConfig+0x5c>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	08db      	lsrs	r3, r3, #3
 8006bde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006be6:	4b07      	ldr	r3, [pc, #28]	; (8006c04 <HAL_RCC_GetClockConfig+0x60>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 020f 	and.w	r2, r3, #15
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	601a      	str	r2, [r3, #0]
}
 8006bf2:	bf00      	nop
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	40023800 	.word	0x40023800
 8006c04:	40023c00 	.word	0x40023c00

08006c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08c      	sub	sp, #48	; 0x30
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d010      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006c40:	4b6f      	ldr	r3, [pc, #444]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c46:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4e:	496c      	ldr	r1, [pc, #432]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d010      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006c6e:	4b64      	ldr	r3, [pc, #400]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c74:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c7c:	4960      	ldr	r1, [pc, #384]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d017      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c9c:	4b58      	ldr	r3, [pc, #352]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ca2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006caa:	4955      	ldr	r1, [pc, #340]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cba:	d101      	bne.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0308 	and.w	r3, r3, #8
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d017      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006cd8:	4b49      	ldr	r3, [pc, #292]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce6:	4946      	ldr	r1, [pc, #280]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cf6:	d101      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8006d04:	2301      	movs	r3, #1
 8006d06:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0320 	and.w	r3, r3, #32
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 808a 	beq.w	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d16:	2300      	movs	r3, #0
 8006d18:	60bb      	str	r3, [r7, #8]
 8006d1a:	4b39      	ldr	r3, [pc, #228]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	4a38      	ldr	r2, [pc, #224]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d24:	6413      	str	r3, [r2, #64]	; 0x40
 8006d26:	4b36      	ldr	r3, [pc, #216]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d2e:	60bb      	str	r3, [r7, #8]
 8006d30:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d32:	4b34      	ldr	r3, [pc, #208]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a33      	ldr	r2, [pc, #204]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d3e:	f7fc f923 	bl	8002f88 <HAL_GetTick>
 8006d42:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d44:	e008      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006d46:	f7fc f91f 	bl	8002f88 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d901      	bls.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e278      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d58:	4b2a      	ldr	r3, [pc, #168]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d0f0      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d64:	4b26      	ldr	r3, [pc, #152]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d6c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d02f      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d7c:	6a3a      	ldr	r2, [r7, #32]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d028      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d82:	4b1f      	ldr	r3, [pc, #124]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d8a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d8c:	4b1e      	ldr	r3, [pc, #120]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006d8e:	2201      	movs	r2, #1
 8006d90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d92:	4b1d      	ldr	r3, [pc, #116]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006d98:	4a19      	ldr	r2, [pc, #100]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006d9e:	4b18      	ldr	r3, [pc, #96]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d114      	bne.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006daa:	f7fc f8ed 	bl	8002f88 <HAL_GetTick>
 8006dae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006db0:	e00a      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006db2:	f7fc f8e9 	bl	8002f88 <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d901      	bls.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e240      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dc8:	4b0d      	ldr	r3, [pc, #52]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d0ee      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006de0:	d114      	bne.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8006de2:	4b07      	ldr	r3, [pc, #28]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006df6:	4902      	ldr	r1, [pc, #8]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	608b      	str	r3, [r1, #8]
 8006dfc:	e00c      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006dfe:	bf00      	nop
 8006e00:	40023800 	.word	0x40023800
 8006e04:	40007000 	.word	0x40007000
 8006e08:	42470e40 	.word	0x42470e40
 8006e0c:	4b4a      	ldr	r3, [pc, #296]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	4a49      	ldr	r2, [pc, #292]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006e12:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e16:	6093      	str	r3, [r2, #8]
 8006e18:	4b47      	ldr	r3, [pc, #284]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006e1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e24:	4944      	ldr	r1, [pc, #272]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0310 	and.w	r3, r3, #16
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d004      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006e3c:	4b3f      	ldr	r3, [pc, #252]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006e3e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00a      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006e4c:	4b3a      	ldr	r3, [pc, #232]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e5a:	4937      	ldr	r1, [pc, #220]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e6e:	4b32      	ldr	r3, [pc, #200]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e74:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e7c:	492e      	ldr	r1, [pc, #184]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d011      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006e90:	4b29      	ldr	r3, [pc, #164]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e96:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9e:	4926      	ldr	r1, [pc, #152]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006eae:	d101      	bne.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00a      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006ec0:	4b1d      	ldr	r3, [pc, #116]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ec6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ece:	491a      	ldr	r1, [pc, #104]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d011      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8006ee2:	4b15      	ldr	r3, [pc, #84]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ee8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ef0:	4911      	ldr	r1, [pc, #68]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f00:	d101      	bne.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8006f02:	2301      	movs	r3, #1
 8006f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d005      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f14:	f040 80ff 	bne.w	8007116 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f18:	4b09      	ldr	r3, [pc, #36]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f1e:	f7fc f833 	bl	8002f88 <HAL_GetTick>
 8006f22:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f24:	e00e      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f26:	f7fc f82f 	bl	8002f88 <HAL_GetTick>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d907      	bls.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e188      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006f38:	40023800 	.word	0x40023800
 8006f3c:	424711e0 	.word	0x424711e0
 8006f40:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f44:	4b7e      	ldr	r3, [pc, #504]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1ea      	bne.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d003      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d009      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d028      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d124      	bne.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006f78:	4b71      	ldr	r3, [pc, #452]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f7e:	0c1b      	lsrs	r3, r3, #16
 8006f80:	f003 0303 	and.w	r3, r3, #3
 8006f84:	3301      	adds	r3, #1
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006f8a:	4b6d      	ldr	r3, [pc, #436]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f90:	0e1b      	lsrs	r3, r3, #24
 8006f92:	f003 030f 	and.w	r3, r3, #15
 8006f96:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	019b      	lsls	r3, r3, #6
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	085b      	lsrs	r3, r3, #1
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	041b      	lsls	r3, r3, #16
 8006fac:	431a      	orrs	r2, r3
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	061b      	lsls	r3, r3, #24
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	695b      	ldr	r3, [r3, #20]
 8006fb8:	071b      	lsls	r3, r3, #28
 8006fba:	4961      	ldr	r1, [pc, #388]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0304 	and.w	r3, r3, #4
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d004      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fd6:	d00a      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d035      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fec:	d130      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006fee:	4b54      	ldr	r3, [pc, #336]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ff4:	0c1b      	lsrs	r3, r3, #16
 8006ff6:	f003 0303 	and.w	r3, r3, #3
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	005b      	lsls	r3, r3, #1
 8006ffe:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007000:	4b4f      	ldr	r3, [pc, #316]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007006:	0f1b      	lsrs	r3, r3, #28
 8007008:	f003 0307 	and.w	r3, r3, #7
 800700c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	019b      	lsls	r3, r3, #6
 8007018:	431a      	orrs	r2, r3
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	085b      	lsrs	r3, r3, #1
 800701e:	3b01      	subs	r3, #1
 8007020:	041b      	lsls	r3, r3, #16
 8007022:	431a      	orrs	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	061b      	lsls	r3, r3, #24
 800702a:	431a      	orrs	r2, r3
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	071b      	lsls	r3, r3, #28
 8007030:	4943      	ldr	r1, [pc, #268]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007032:	4313      	orrs	r3, r2
 8007034:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007038:	4b41      	ldr	r3, [pc, #260]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800703a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800703e:	f023 021f 	bic.w	r2, r3, #31
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007046:	3b01      	subs	r3, #1
 8007048:	493d      	ldr	r1, [pc, #244]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800704a:	4313      	orrs	r3, r2
 800704c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007058:	2b00      	cmp	r3, #0
 800705a:	d029      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007064:	d124      	bne.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007066:	4b36      	ldr	r3, [pc, #216]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800706c:	0c1b      	lsrs	r3, r3, #16
 800706e:	f003 0303 	and.w	r3, r3, #3
 8007072:	3301      	adds	r3, #1
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007078:	4b31      	ldr	r3, [pc, #196]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800707a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800707e:	0f1b      	lsrs	r3, r3, #28
 8007080:	f003 0307 	and.w	r3, r3, #7
 8007084:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	019b      	lsls	r3, r3, #6
 8007090:	431a      	orrs	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	085b      	lsrs	r3, r3, #1
 8007098:	3b01      	subs	r3, #1
 800709a:	041b      	lsls	r3, r3, #16
 800709c:	431a      	orrs	r2, r3
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	061b      	lsls	r3, r3, #24
 80070a2:	431a      	orrs	r2, r3
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	071b      	lsls	r3, r3, #28
 80070a8:	4925      	ldr	r1, [pc, #148]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d016      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	019b      	lsls	r3, r3, #6
 80070c6:	431a      	orrs	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	085b      	lsrs	r3, r3, #1
 80070ce:	3b01      	subs	r3, #1
 80070d0:	041b      	lsls	r3, r3, #16
 80070d2:	431a      	orrs	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	061b      	lsls	r3, r3, #24
 80070da:	431a      	orrs	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	071b      	lsls	r3, r3, #28
 80070e2:	4917      	ldr	r1, [pc, #92]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80070ea:	4b16      	ldr	r3, [pc, #88]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80070ec:	2201      	movs	r2, #1
 80070ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070f0:	f7fb ff4a 	bl	8002f88 <HAL_GetTick>
 80070f4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070f6:	e008      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80070f8:	f7fb ff46 	bl	8002f88 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b02      	cmp	r3, #2
 8007104:	d901      	bls.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e09f      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800710a:	4b0d      	ldr	r3, [pc, #52]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d0f0      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8007116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007118:	2b01      	cmp	r3, #1
 800711a:	f040 8095 	bne.w	8007248 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800711e:	4b0a      	ldr	r3, [pc, #40]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007120:	2200      	movs	r2, #0
 8007122:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007124:	f7fb ff30 	bl	8002f88 <HAL_GetTick>
 8007128:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800712a:	e00f      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800712c:	f7fb ff2c 	bl	8002f88 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	2b02      	cmp	r3, #2
 8007138:	d908      	bls.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e085      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800713e:	bf00      	nop
 8007140:	40023800 	.word	0x40023800
 8007144:	42470068 	.word	0x42470068
 8007148:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800714c:	4b41      	ldr	r3, [pc, #260]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007158:	d0e8      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0304 	and.w	r3, r3, #4
 8007162:	2b00      	cmp	r3, #0
 8007164:	d003      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716a:	2b00      	cmp	r3, #0
 800716c:	d009      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007176:	2b00      	cmp	r3, #0
 8007178:	d02b      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717e:	2b00      	cmp	r3, #0
 8007180:	d127      	bne.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007182:	4b34      	ldr	r3, [pc, #208]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007188:	0c1b      	lsrs	r3, r3, #16
 800718a:	f003 0303 	and.w	r3, r3, #3
 800718e:	3301      	adds	r3, #1
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	699a      	ldr	r2, [r3, #24]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	019b      	lsls	r3, r3, #6
 800719e:	431a      	orrs	r2, r3
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	085b      	lsrs	r3, r3, #1
 80071a4:	3b01      	subs	r3, #1
 80071a6:	041b      	lsls	r3, r3, #16
 80071a8:	431a      	orrs	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	061b      	lsls	r3, r3, #24
 80071b0:	4928      	ldr	r1, [pc, #160]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80071b8:	4b26      	ldr	r3, [pc, #152]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80071ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071be:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c6:	3b01      	subs	r3, #1
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	4922      	ldr	r1, [pc, #136]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80071cc:	4313      	orrs	r3, r2
 80071ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d01d      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x612>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071e6:	d118      	bne.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80071e8:	4b1a      	ldr	r3, [pc, #104]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80071ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ee:	0e1b      	lsrs	r3, r3, #24
 80071f0:	f003 030f 	and.w	r3, r3, #15
 80071f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	699a      	ldr	r2, [r3, #24]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	019b      	lsls	r3, r3, #6
 8007200:	431a      	orrs	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	085b      	lsrs	r3, r3, #1
 8007208:	3b01      	subs	r3, #1
 800720a:	041b      	lsls	r3, r3, #16
 800720c:	431a      	orrs	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	061b      	lsls	r3, r3, #24
 8007212:	4910      	ldr	r1, [pc, #64]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007214:	4313      	orrs	r3, r2
 8007216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800721a:	4b0f      	ldr	r3, [pc, #60]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800721c:	2201      	movs	r2, #1
 800721e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007220:	f7fb feb2 	bl	8002f88 <HAL_GetTick>
 8007224:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007226:	e008      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007228:	f7fb feae 	bl	8002f88 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b02      	cmp	r3, #2
 8007234:	d901      	bls.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e007      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800723a:	4b06      	ldr	r3, [pc, #24]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007246:	d1ef      	bne.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3730      	adds	r7, #48	; 0x30
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	40023800 	.word	0x40023800
 8007258:	42470070 	.word	0x42470070

0800725c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800725c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007260:	b0a6      	sub	sp, #152	; 0x98
 8007262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007282:	4bc8      	ldr	r3, [pc, #800]	; (80075a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f003 030c 	and.w	r3, r3, #12
 800728a:	2b0c      	cmp	r3, #12
 800728c:	f200 817e 	bhi.w	800758c <HAL_RCC_GetSysClockFreq+0x330>
 8007290:	a201      	add	r2, pc, #4	; (adr r2, 8007298 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007296:	bf00      	nop
 8007298:	080072cd 	.word	0x080072cd
 800729c:	0800758d 	.word	0x0800758d
 80072a0:	0800758d 	.word	0x0800758d
 80072a4:	0800758d 	.word	0x0800758d
 80072a8:	080072d5 	.word	0x080072d5
 80072ac:	0800758d 	.word	0x0800758d
 80072b0:	0800758d 	.word	0x0800758d
 80072b4:	0800758d 	.word	0x0800758d
 80072b8:	080072dd 	.word	0x080072dd
 80072bc:	0800758d 	.word	0x0800758d
 80072c0:	0800758d 	.word	0x0800758d
 80072c4:	0800758d 	.word	0x0800758d
 80072c8:	08007447 	.word	0x08007447
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80072cc:	4bb6      	ldr	r3, [pc, #728]	; (80075a8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80072ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80072d2:	e15f      	b.n	8007594 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80072d4:	4bb5      	ldr	r3, [pc, #724]	; (80075ac <HAL_RCC_GetSysClockFreq+0x350>)
 80072d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80072da:	e15b      	b.n	8007594 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072dc:	4bb1      	ldr	r3, [pc, #708]	; (80075a4 <HAL_RCC_GetSysClockFreq+0x348>)
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072e8:	4bae      	ldr	r3, [pc, #696]	; (80075a4 <HAL_RCC_GetSysClockFreq+0x348>)
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d031      	beq.n	8007358 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072f4:	4bab      	ldr	r3, [pc, #684]	; (80075a4 <HAL_RCC_GetSysClockFreq+0x348>)
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	099b      	lsrs	r3, r3, #6
 80072fa:	2200      	movs	r2, #0
 80072fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80072fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007300:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007306:	663b      	str	r3, [r7, #96]	; 0x60
 8007308:	2300      	movs	r3, #0
 800730a:	667b      	str	r3, [r7, #100]	; 0x64
 800730c:	4ba7      	ldr	r3, [pc, #668]	; (80075ac <HAL_RCC_GetSysClockFreq+0x350>)
 800730e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007312:	462a      	mov	r2, r5
 8007314:	fb03 f202 	mul.w	r2, r3, r2
 8007318:	2300      	movs	r3, #0
 800731a:	4621      	mov	r1, r4
 800731c:	fb01 f303 	mul.w	r3, r1, r3
 8007320:	4413      	add	r3, r2
 8007322:	4aa2      	ldr	r2, [pc, #648]	; (80075ac <HAL_RCC_GetSysClockFreq+0x350>)
 8007324:	4621      	mov	r1, r4
 8007326:	fba1 1202 	umull	r1, r2, r1, r2
 800732a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800732c:	460a      	mov	r2, r1
 800732e:	67ba      	str	r2, [r7, #120]	; 0x78
 8007330:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007332:	4413      	add	r3, r2
 8007334:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800733a:	2200      	movs	r2, #0
 800733c:	65bb      	str	r3, [r7, #88]	; 0x58
 800733e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007340:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007344:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007348:	f7f9 fc4e 	bl	8000be8 <__aeabi_uldivmod>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4613      	mov	r3, r2
 8007352:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007356:	e064      	b.n	8007422 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007358:	4b92      	ldr	r3, [pc, #584]	; (80075a4 <HAL_RCC_GetSysClockFreq+0x348>)
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	099b      	lsrs	r3, r3, #6
 800735e:	2200      	movs	r2, #0
 8007360:	653b      	str	r3, [r7, #80]	; 0x50
 8007362:	657a      	str	r2, [r7, #84]	; 0x54
 8007364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736a:	64bb      	str	r3, [r7, #72]	; 0x48
 800736c:	2300      	movs	r3, #0
 800736e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007370:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8007374:	4622      	mov	r2, r4
 8007376:	462b      	mov	r3, r5
 8007378:	f04f 0000 	mov.w	r0, #0
 800737c:	f04f 0100 	mov.w	r1, #0
 8007380:	0159      	lsls	r1, r3, #5
 8007382:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007386:	0150      	lsls	r0, r2, #5
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	4621      	mov	r1, r4
 800738e:	1a51      	subs	r1, r2, r1
 8007390:	6139      	str	r1, [r7, #16]
 8007392:	4629      	mov	r1, r5
 8007394:	eb63 0301 	sbc.w	r3, r3, r1
 8007398:	617b      	str	r3, [r7, #20]
 800739a:	f04f 0200 	mov.w	r2, #0
 800739e:	f04f 0300 	mov.w	r3, #0
 80073a2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80073a6:	4659      	mov	r1, fp
 80073a8:	018b      	lsls	r3, r1, #6
 80073aa:	4651      	mov	r1, sl
 80073ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80073b0:	4651      	mov	r1, sl
 80073b2:	018a      	lsls	r2, r1, #6
 80073b4:	4651      	mov	r1, sl
 80073b6:	ebb2 0801 	subs.w	r8, r2, r1
 80073ba:	4659      	mov	r1, fp
 80073bc:	eb63 0901 	sbc.w	r9, r3, r1
 80073c0:	f04f 0200 	mov.w	r2, #0
 80073c4:	f04f 0300 	mov.w	r3, #0
 80073c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073d4:	4690      	mov	r8, r2
 80073d6:	4699      	mov	r9, r3
 80073d8:	4623      	mov	r3, r4
 80073da:	eb18 0303 	adds.w	r3, r8, r3
 80073de:	60bb      	str	r3, [r7, #8]
 80073e0:	462b      	mov	r3, r5
 80073e2:	eb49 0303 	adc.w	r3, r9, r3
 80073e6:	60fb      	str	r3, [r7, #12]
 80073e8:	f04f 0200 	mov.w	r2, #0
 80073ec:	f04f 0300 	mov.w	r3, #0
 80073f0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80073f4:	4629      	mov	r1, r5
 80073f6:	028b      	lsls	r3, r1, #10
 80073f8:	4621      	mov	r1, r4
 80073fa:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073fe:	4621      	mov	r1, r4
 8007400:	028a      	lsls	r2, r1, #10
 8007402:	4610      	mov	r0, r2
 8007404:	4619      	mov	r1, r3
 8007406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800740a:	2200      	movs	r2, #0
 800740c:	643b      	str	r3, [r7, #64]	; 0x40
 800740e:	647a      	str	r2, [r7, #68]	; 0x44
 8007410:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007414:	f7f9 fbe8 	bl	8000be8 <__aeabi_uldivmod>
 8007418:	4602      	mov	r2, r0
 800741a:	460b      	mov	r3, r1
 800741c:	4613      	mov	r3, r2
 800741e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007422:	4b60      	ldr	r3, [pc, #384]	; (80075a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	0c1b      	lsrs	r3, r3, #16
 8007428:	f003 0303 	and.w	r3, r3, #3
 800742c:	3301      	adds	r3, #1
 800742e:	005b      	lsls	r3, r3, #1
 8007430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8007434:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007438:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800743c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007440:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8007444:	e0a6      	b.n	8007594 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007446:	4b57      	ldr	r3, [pc, #348]	; (80075a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800744e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007452:	4b54      	ldr	r3, [pc, #336]	; (80075a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d02a      	beq.n	80074b4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800745e:	4b51      	ldr	r3, [pc, #324]	; (80075a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	099b      	lsrs	r3, r3, #6
 8007464:	2200      	movs	r2, #0
 8007466:	63bb      	str	r3, [r7, #56]	; 0x38
 8007468:	63fa      	str	r2, [r7, #60]	; 0x3c
 800746a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007470:	2100      	movs	r1, #0
 8007472:	4b4e      	ldr	r3, [pc, #312]	; (80075ac <HAL_RCC_GetSysClockFreq+0x350>)
 8007474:	fb03 f201 	mul.w	r2, r3, r1
 8007478:	2300      	movs	r3, #0
 800747a:	fb00 f303 	mul.w	r3, r0, r3
 800747e:	4413      	add	r3, r2
 8007480:	4a4a      	ldr	r2, [pc, #296]	; (80075ac <HAL_RCC_GetSysClockFreq+0x350>)
 8007482:	fba0 1202 	umull	r1, r2, r0, r2
 8007486:	677a      	str	r2, [r7, #116]	; 0x74
 8007488:	460a      	mov	r2, r1
 800748a:	673a      	str	r2, [r7, #112]	; 0x70
 800748c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800748e:	4413      	add	r3, r2
 8007490:	677b      	str	r3, [r7, #116]	; 0x74
 8007492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007496:	2200      	movs	r2, #0
 8007498:	633b      	str	r3, [r7, #48]	; 0x30
 800749a:	637a      	str	r2, [r7, #52]	; 0x34
 800749c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80074a0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80074a4:	f7f9 fba0 	bl	8000be8 <__aeabi_uldivmod>
 80074a8:	4602      	mov	r2, r0
 80074aa:	460b      	mov	r3, r1
 80074ac:	4613      	mov	r3, r2
 80074ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80074b2:	e05b      	b.n	800756c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074b4:	4b3b      	ldr	r3, [pc, #236]	; (80075a4 <HAL_RCC_GetSysClockFreq+0x348>)
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	099b      	lsrs	r3, r3, #6
 80074ba:	2200      	movs	r2, #0
 80074bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80074be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c6:	623b      	str	r3, [r7, #32]
 80074c8:	2300      	movs	r3, #0
 80074ca:	627b      	str	r3, [r7, #36]	; 0x24
 80074cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80074d0:	4642      	mov	r2, r8
 80074d2:	464b      	mov	r3, r9
 80074d4:	f04f 0000 	mov.w	r0, #0
 80074d8:	f04f 0100 	mov.w	r1, #0
 80074dc:	0159      	lsls	r1, r3, #5
 80074de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074e2:	0150      	lsls	r0, r2, #5
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	4641      	mov	r1, r8
 80074ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80074ee:	4649      	mov	r1, r9
 80074f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80074f4:	f04f 0200 	mov.w	r2, #0
 80074f8:	f04f 0300 	mov.w	r3, #0
 80074fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007500:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007504:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007508:	ebb2 040a 	subs.w	r4, r2, sl
 800750c:	eb63 050b 	sbc.w	r5, r3, fp
 8007510:	f04f 0200 	mov.w	r2, #0
 8007514:	f04f 0300 	mov.w	r3, #0
 8007518:	00eb      	lsls	r3, r5, #3
 800751a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800751e:	00e2      	lsls	r2, r4, #3
 8007520:	4614      	mov	r4, r2
 8007522:	461d      	mov	r5, r3
 8007524:	4643      	mov	r3, r8
 8007526:	18e3      	adds	r3, r4, r3
 8007528:	603b      	str	r3, [r7, #0]
 800752a:	464b      	mov	r3, r9
 800752c:	eb45 0303 	adc.w	r3, r5, r3
 8007530:	607b      	str	r3, [r7, #4]
 8007532:	f04f 0200 	mov.w	r2, #0
 8007536:	f04f 0300 	mov.w	r3, #0
 800753a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800753e:	4629      	mov	r1, r5
 8007540:	028b      	lsls	r3, r1, #10
 8007542:	4621      	mov	r1, r4
 8007544:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007548:	4621      	mov	r1, r4
 800754a:	028a      	lsls	r2, r1, #10
 800754c:	4610      	mov	r0, r2
 800754e:	4619      	mov	r1, r3
 8007550:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007554:	2200      	movs	r2, #0
 8007556:	61bb      	str	r3, [r7, #24]
 8007558:	61fa      	str	r2, [r7, #28]
 800755a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800755e:	f7f9 fb43 	bl	8000be8 <__aeabi_uldivmod>
 8007562:	4602      	mov	r2, r0
 8007564:	460b      	mov	r3, r1
 8007566:	4613      	mov	r3, r2
 8007568:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800756c:	4b0d      	ldr	r3, [pc, #52]	; (80075a4 <HAL_RCC_GetSysClockFreq+0x348>)
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	0f1b      	lsrs	r3, r3, #28
 8007572:	f003 0307 	and.w	r3, r3, #7
 8007576:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800757a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800757e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007582:	fbb2 f3f3 	udiv	r3, r2, r3
 8007586:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800758a:	e003      	b.n	8007594 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800758c:	4b06      	ldr	r3, [pc, #24]	; (80075a8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800758e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8007592:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007594:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8007598:	4618      	mov	r0, r3
 800759a:	3798      	adds	r7, #152	; 0x98
 800759c:	46bd      	mov	sp, r7
 800759e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075a2:	bf00      	nop
 80075a4:	40023800 	.word	0x40023800
 80075a8:	00f42400 	.word	0x00f42400
 80075ac:	00b71b00 	.word	0x00b71b00

080075b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e28d      	b.n	8007ade <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 8083 	beq.w	80076d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80075d0:	4b94      	ldr	r3, [pc, #592]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f003 030c 	and.w	r3, r3, #12
 80075d8:	2b04      	cmp	r3, #4
 80075da:	d019      	beq.n	8007610 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80075dc:	4b91      	ldr	r3, [pc, #580]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d106      	bne.n	80075f6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80075e8:	4b8e      	ldr	r3, [pc, #568]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075f4:	d00c      	beq.n	8007610 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075f6:	4b8b      	ldr	r3, [pc, #556]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80075fe:	2b0c      	cmp	r3, #12
 8007600:	d112      	bne.n	8007628 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007602:	4b88      	ldr	r3, [pc, #544]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800760a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800760e:	d10b      	bne.n	8007628 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007610:	4b84      	ldr	r3, [pc, #528]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d05b      	beq.n	80076d4 <HAL_RCC_OscConfig+0x124>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d157      	bne.n	80076d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e25a      	b.n	8007ade <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007630:	d106      	bne.n	8007640 <HAL_RCC_OscConfig+0x90>
 8007632:	4b7c      	ldr	r3, [pc, #496]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a7b      	ldr	r2, [pc, #492]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 8007638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800763c:	6013      	str	r3, [r2, #0]
 800763e:	e01d      	b.n	800767c <HAL_RCC_OscConfig+0xcc>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007648:	d10c      	bne.n	8007664 <HAL_RCC_OscConfig+0xb4>
 800764a:	4b76      	ldr	r3, [pc, #472]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a75      	ldr	r2, [pc, #468]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 8007650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007654:	6013      	str	r3, [r2, #0]
 8007656:	4b73      	ldr	r3, [pc, #460]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a72      	ldr	r2, [pc, #456]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 800765c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007660:	6013      	str	r3, [r2, #0]
 8007662:	e00b      	b.n	800767c <HAL_RCC_OscConfig+0xcc>
 8007664:	4b6f      	ldr	r3, [pc, #444]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a6e      	ldr	r2, [pc, #440]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 800766a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800766e:	6013      	str	r3, [r2, #0]
 8007670:	4b6c      	ldr	r3, [pc, #432]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a6b      	ldr	r2, [pc, #428]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 8007676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800767a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d013      	beq.n	80076ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007684:	f7fb fc80 	bl	8002f88 <HAL_GetTick>
 8007688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800768a:	e008      	b.n	800769e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800768c:	f7fb fc7c 	bl	8002f88 <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2b64      	cmp	r3, #100	; 0x64
 8007698:	d901      	bls.n	800769e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e21f      	b.n	8007ade <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800769e:	4b61      	ldr	r3, [pc, #388]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d0f0      	beq.n	800768c <HAL_RCC_OscConfig+0xdc>
 80076aa:	e014      	b.n	80076d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ac:	f7fb fc6c 	bl	8002f88 <HAL_GetTick>
 80076b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076b2:	e008      	b.n	80076c6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076b4:	f7fb fc68 	bl	8002f88 <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	2b64      	cmp	r3, #100	; 0x64
 80076c0:	d901      	bls.n	80076c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e20b      	b.n	8007ade <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076c6:	4b57      	ldr	r3, [pc, #348]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1f0      	bne.n	80076b4 <HAL_RCC_OscConfig+0x104>
 80076d2:	e000      	b.n	80076d6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0302 	and.w	r3, r3, #2
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d06f      	beq.n	80077c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80076e2:	4b50      	ldr	r3, [pc, #320]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f003 030c 	and.w	r3, r3, #12
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d017      	beq.n	800771e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80076ee:	4b4d      	ldr	r3, [pc, #308]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80076f6:	2b08      	cmp	r3, #8
 80076f8:	d105      	bne.n	8007706 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80076fa:	4b4a      	ldr	r3, [pc, #296]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00b      	beq.n	800771e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007706:	4b47      	ldr	r3, [pc, #284]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800770e:	2b0c      	cmp	r3, #12
 8007710:	d11c      	bne.n	800774c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007712:	4b44      	ldr	r3, [pc, #272]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d116      	bne.n	800774c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800771e:	4b41      	ldr	r3, [pc, #260]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0302 	and.w	r3, r3, #2
 8007726:	2b00      	cmp	r3, #0
 8007728:	d005      	beq.n	8007736 <HAL_RCC_OscConfig+0x186>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d001      	beq.n	8007736 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e1d3      	b.n	8007ade <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007736:	4b3b      	ldr	r3, [pc, #236]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	4937      	ldr	r1, [pc, #220]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 8007746:	4313      	orrs	r3, r2
 8007748:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800774a:	e03a      	b.n	80077c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d020      	beq.n	8007796 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007754:	4b34      	ldr	r3, [pc, #208]	; (8007828 <HAL_RCC_OscConfig+0x278>)
 8007756:	2201      	movs	r2, #1
 8007758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800775a:	f7fb fc15 	bl	8002f88 <HAL_GetTick>
 800775e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007760:	e008      	b.n	8007774 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007762:	f7fb fc11 	bl	8002f88 <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	2b02      	cmp	r3, #2
 800776e:	d901      	bls.n	8007774 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e1b4      	b.n	8007ade <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007774:	4b2b      	ldr	r3, [pc, #172]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d0f0      	beq.n	8007762 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007780:	4b28      	ldr	r3, [pc, #160]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	00db      	lsls	r3, r3, #3
 800778e:	4925      	ldr	r1, [pc, #148]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 8007790:	4313      	orrs	r3, r2
 8007792:	600b      	str	r3, [r1, #0]
 8007794:	e015      	b.n	80077c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007796:	4b24      	ldr	r3, [pc, #144]	; (8007828 <HAL_RCC_OscConfig+0x278>)
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800779c:	f7fb fbf4 	bl	8002f88 <HAL_GetTick>
 80077a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077a2:	e008      	b.n	80077b6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077a4:	f7fb fbf0 	bl	8002f88 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d901      	bls.n	80077b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e193      	b.n	8007ade <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077b6:	4b1b      	ldr	r3, [pc, #108]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0302 	and.w	r3, r3, #2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1f0      	bne.n	80077a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d036      	beq.n	800783c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d016      	beq.n	8007804 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077d6:	4b15      	ldr	r3, [pc, #84]	; (800782c <HAL_RCC_OscConfig+0x27c>)
 80077d8:	2201      	movs	r2, #1
 80077da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077dc:	f7fb fbd4 	bl	8002f88 <HAL_GetTick>
 80077e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077e2:	e008      	b.n	80077f6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077e4:	f7fb fbd0 	bl	8002f88 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d901      	bls.n	80077f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e173      	b.n	8007ade <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077f6:	4b0b      	ldr	r3, [pc, #44]	; (8007824 <HAL_RCC_OscConfig+0x274>)
 80077f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d0f0      	beq.n	80077e4 <HAL_RCC_OscConfig+0x234>
 8007802:	e01b      	b.n	800783c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007804:	4b09      	ldr	r3, [pc, #36]	; (800782c <HAL_RCC_OscConfig+0x27c>)
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800780a:	f7fb fbbd 	bl	8002f88 <HAL_GetTick>
 800780e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007810:	e00e      	b.n	8007830 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007812:	f7fb fbb9 	bl	8002f88 <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	2b02      	cmp	r3, #2
 800781e:	d907      	bls.n	8007830 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e15c      	b.n	8007ade <HAL_RCC_OscConfig+0x52e>
 8007824:	40023800 	.word	0x40023800
 8007828:	42470000 	.word	0x42470000
 800782c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007830:	4b8a      	ldr	r3, [pc, #552]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 8007832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1ea      	bne.n	8007812 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0304 	and.w	r3, r3, #4
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 8097 	beq.w	8007978 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800784a:	2300      	movs	r3, #0
 800784c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800784e:	4b83      	ldr	r3, [pc, #524]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 8007850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10f      	bne.n	800787a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800785a:	2300      	movs	r3, #0
 800785c:	60bb      	str	r3, [r7, #8]
 800785e:	4b7f      	ldr	r3, [pc, #508]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 8007860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007862:	4a7e      	ldr	r2, [pc, #504]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 8007864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007868:	6413      	str	r3, [r2, #64]	; 0x40
 800786a:	4b7c      	ldr	r3, [pc, #496]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 800786c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007872:	60bb      	str	r3, [r7, #8]
 8007874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007876:	2301      	movs	r3, #1
 8007878:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800787a:	4b79      	ldr	r3, [pc, #484]	; (8007a60 <HAL_RCC_OscConfig+0x4b0>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007882:	2b00      	cmp	r3, #0
 8007884:	d118      	bne.n	80078b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007886:	4b76      	ldr	r3, [pc, #472]	; (8007a60 <HAL_RCC_OscConfig+0x4b0>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a75      	ldr	r2, [pc, #468]	; (8007a60 <HAL_RCC_OscConfig+0x4b0>)
 800788c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007892:	f7fb fb79 	bl	8002f88 <HAL_GetTick>
 8007896:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007898:	e008      	b.n	80078ac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800789a:	f7fb fb75 	bl	8002f88 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d901      	bls.n	80078ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e118      	b.n	8007ade <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078ac:	4b6c      	ldr	r3, [pc, #432]	; (8007a60 <HAL_RCC_OscConfig+0x4b0>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0f0      	beq.n	800789a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d106      	bne.n	80078ce <HAL_RCC_OscConfig+0x31e>
 80078c0:	4b66      	ldr	r3, [pc, #408]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 80078c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c4:	4a65      	ldr	r2, [pc, #404]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 80078c6:	f043 0301 	orr.w	r3, r3, #1
 80078ca:	6713      	str	r3, [r2, #112]	; 0x70
 80078cc:	e01c      	b.n	8007908 <HAL_RCC_OscConfig+0x358>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	2b05      	cmp	r3, #5
 80078d4:	d10c      	bne.n	80078f0 <HAL_RCC_OscConfig+0x340>
 80078d6:	4b61      	ldr	r3, [pc, #388]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 80078d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078da:	4a60      	ldr	r2, [pc, #384]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 80078dc:	f043 0304 	orr.w	r3, r3, #4
 80078e0:	6713      	str	r3, [r2, #112]	; 0x70
 80078e2:	4b5e      	ldr	r3, [pc, #376]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 80078e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e6:	4a5d      	ldr	r2, [pc, #372]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 80078e8:	f043 0301 	orr.w	r3, r3, #1
 80078ec:	6713      	str	r3, [r2, #112]	; 0x70
 80078ee:	e00b      	b.n	8007908 <HAL_RCC_OscConfig+0x358>
 80078f0:	4b5a      	ldr	r3, [pc, #360]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 80078f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f4:	4a59      	ldr	r2, [pc, #356]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 80078f6:	f023 0301 	bic.w	r3, r3, #1
 80078fa:	6713      	str	r3, [r2, #112]	; 0x70
 80078fc:	4b57      	ldr	r3, [pc, #348]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 80078fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007900:	4a56      	ldr	r2, [pc, #344]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 8007902:	f023 0304 	bic.w	r3, r3, #4
 8007906:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d015      	beq.n	800793c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007910:	f7fb fb3a 	bl	8002f88 <HAL_GetTick>
 8007914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007916:	e00a      	b.n	800792e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007918:	f7fb fb36 	bl	8002f88 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	f241 3288 	movw	r2, #5000	; 0x1388
 8007926:	4293      	cmp	r3, r2
 8007928:	d901      	bls.n	800792e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e0d7      	b.n	8007ade <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800792e:	4b4b      	ldr	r3, [pc, #300]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 8007930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007932:	f003 0302 	and.w	r3, r3, #2
 8007936:	2b00      	cmp	r3, #0
 8007938:	d0ee      	beq.n	8007918 <HAL_RCC_OscConfig+0x368>
 800793a:	e014      	b.n	8007966 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800793c:	f7fb fb24 	bl	8002f88 <HAL_GetTick>
 8007940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007942:	e00a      	b.n	800795a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007944:	f7fb fb20 	bl	8002f88 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007952:	4293      	cmp	r3, r2
 8007954:	d901      	bls.n	800795a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e0c1      	b.n	8007ade <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800795a:	4b40      	ldr	r3, [pc, #256]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 800795c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800795e:	f003 0302 	and.w	r3, r3, #2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1ee      	bne.n	8007944 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007966:	7dfb      	ldrb	r3, [r7, #23]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d105      	bne.n	8007978 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800796c:	4b3b      	ldr	r3, [pc, #236]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 800796e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007970:	4a3a      	ldr	r2, [pc, #232]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 8007972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007976:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 80ad 	beq.w	8007adc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007982:	4b36      	ldr	r3, [pc, #216]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f003 030c 	and.w	r3, r3, #12
 800798a:	2b08      	cmp	r3, #8
 800798c:	d060      	beq.n	8007a50 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	2b02      	cmp	r3, #2
 8007994:	d145      	bne.n	8007a22 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007996:	4b33      	ldr	r3, [pc, #204]	; (8007a64 <HAL_RCC_OscConfig+0x4b4>)
 8007998:	2200      	movs	r2, #0
 800799a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800799c:	f7fb faf4 	bl	8002f88 <HAL_GetTick>
 80079a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079a2:	e008      	b.n	80079b6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079a4:	f7fb faf0 	bl	8002f88 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d901      	bls.n	80079b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e093      	b.n	8007ade <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079b6:	4b29      	ldr	r3, [pc, #164]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1f0      	bne.n	80079a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	69da      	ldr	r2, [r3, #28]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	431a      	orrs	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	019b      	lsls	r3, r3, #6
 80079d2:	431a      	orrs	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d8:	085b      	lsrs	r3, r3, #1
 80079da:	3b01      	subs	r3, #1
 80079dc:	041b      	lsls	r3, r3, #16
 80079de:	431a      	orrs	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e4:	061b      	lsls	r3, r3, #24
 80079e6:	431a      	orrs	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ec:	071b      	lsls	r3, r3, #28
 80079ee:	491b      	ldr	r1, [pc, #108]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079f4:	4b1b      	ldr	r3, [pc, #108]	; (8007a64 <HAL_RCC_OscConfig+0x4b4>)
 80079f6:	2201      	movs	r2, #1
 80079f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079fa:	f7fb fac5 	bl	8002f88 <HAL_GetTick>
 80079fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a00:	e008      	b.n	8007a14 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a02:	f7fb fac1 	bl	8002f88 <HAL_GetTick>
 8007a06:	4602      	mov	r2, r0
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d901      	bls.n	8007a14 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e064      	b.n	8007ade <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a14:	4b11      	ldr	r3, [pc, #68]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d0f0      	beq.n	8007a02 <HAL_RCC_OscConfig+0x452>
 8007a20:	e05c      	b.n	8007adc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a22:	4b10      	ldr	r3, [pc, #64]	; (8007a64 <HAL_RCC_OscConfig+0x4b4>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a28:	f7fb faae 	bl	8002f88 <HAL_GetTick>
 8007a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a2e:	e008      	b.n	8007a42 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a30:	f7fb faaa 	bl	8002f88 <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d901      	bls.n	8007a42 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e04d      	b.n	8007ade <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a42:	4b06      	ldr	r3, [pc, #24]	; (8007a5c <HAL_RCC_OscConfig+0x4ac>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1f0      	bne.n	8007a30 <HAL_RCC_OscConfig+0x480>
 8007a4e:	e045      	b.n	8007adc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d107      	bne.n	8007a68 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e040      	b.n	8007ade <HAL_RCC_OscConfig+0x52e>
 8007a5c:	40023800 	.word	0x40023800
 8007a60:	40007000 	.word	0x40007000
 8007a64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a68:	4b1f      	ldr	r3, [pc, #124]	; (8007ae8 <HAL_RCC_OscConfig+0x538>)
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d030      	beq.n	8007ad8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d129      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d122      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a98:	4013      	ands	r3, r2
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d119      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aae:	085b      	lsrs	r3, r3, #1
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d10f      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d107      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d001      	beq.n	8007adc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e000      	b.n	8007ade <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	40023800 	.word	0x40023800

08007aec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d101      	bne.n	8007b02 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e066      	b.n	8007bd0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	7f5b      	ldrb	r3, [r3, #29]
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d105      	bne.n	8007b18 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7f9 fd64 	bl	80015e0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	22ca      	movs	r2, #202	; 0xca
 8007b24:	625a      	str	r2, [r3, #36]	; 0x24
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2253      	movs	r2, #83	; 0x53
 8007b2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fa45 	bl	8007fbe <RTC_EnterInitMode>
 8007b34:	4603      	mov	r3, r0
 8007b36:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d12c      	bne.n	8007b98 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	6812      	ldr	r2, [r2, #0]
 8007b48:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b50:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6899      	ldr	r1, [r3, #8]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	431a      	orrs	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	431a      	orrs	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	68d2      	ldr	r2, [r2, #12]
 8007b78:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	6919      	ldr	r1, [r3, #16]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	041a      	lsls	r2, r3, #16
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fa4c 	bl	800802c <RTC_ExitInitMode>
 8007b94:	4603      	mov	r3, r0
 8007b96:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d113      	bne.n	8007bc6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007bac:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	699a      	ldr	r2, [r3, #24]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	22ff      	movs	r2, #255	; 0xff
 8007bcc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007bd8:	b590      	push	{r4, r7, lr}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007be4:	2300      	movs	r3, #0
 8007be6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	7f1b      	ldrb	r3, [r3, #28]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d101      	bne.n	8007bf4 <HAL_RTC_SetTime+0x1c>
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	e087      	b.n	8007d04 <HAL_RTC_SetTime+0x12c>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d126      	bne.n	8007c54 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d102      	bne.n	8007c1a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2200      	movs	r2, #0
 8007c18:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 fa29 	bl	8008076 <RTC_ByteToBcd2>
 8007c24:	4603      	mov	r3, r0
 8007c26:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	785b      	ldrb	r3, [r3, #1]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f000 fa22 	bl	8008076 <RTC_ByteToBcd2>
 8007c32:	4603      	mov	r3, r0
 8007c34:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007c36:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	789b      	ldrb	r3, [r3, #2]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 fa1a 	bl	8008076 <RTC_ByteToBcd2>
 8007c42:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007c44:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	78db      	ldrb	r3, [r3, #3]
 8007c4c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	617b      	str	r3, [r7, #20]
 8007c52:	e018      	b.n	8007c86 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d102      	bne.n	8007c68 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	2200      	movs	r2, #0
 8007c66:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	785b      	ldrb	r3, [r3, #1]
 8007c72:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007c74:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007c7a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	78db      	ldrb	r3, [r3, #3]
 8007c80:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007c82:	4313      	orrs	r3, r2
 8007c84:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	22ca      	movs	r2, #202	; 0xca
 8007c8c:	625a      	str	r2, [r3, #36]	; 0x24
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2253      	movs	r2, #83	; 0x53
 8007c94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f000 f991 	bl	8007fbe <RTC_EnterInitMode>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007ca0:	7cfb      	ldrb	r3, [r7, #19]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d120      	bne.n	8007ce8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007cb0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007cb4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007cc4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	6899      	ldr	r1, [r3, #8]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	68da      	ldr	r2, [r3, #12]
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	431a      	orrs	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 f9a4 	bl	800802c <RTC_ExitInitMode>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007ce8:	7cfb      	ldrb	r3, [r7, #19]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d102      	bne.n	8007cf4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	22ff      	movs	r2, #255	; 0xff
 8007cfa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	771a      	strb	r2, [r3, #28]

  return status;
 8007d02:	7cfb      	ldrb	r3, [r7, #19]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	371c      	adds	r7, #28
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd90      	pop	{r4, r7, pc}

08007d0c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007d3e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007d42:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	0c1b      	lsrs	r3, r3, #16
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d4e:	b2da      	uxtb	r2, r3
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	0a1b      	lsrs	r3, r3, #8
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d5e:	b2da      	uxtb	r2, r3
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	0d9b      	lsrs	r3, r3, #22
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d11a      	bne.n	8007dbe <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 f98f 	bl	80080b0 <RTC_Bcd2ToByte>
 8007d92:	4603      	mov	r3, r0
 8007d94:	461a      	mov	r2, r3
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	785b      	ldrb	r3, [r3, #1]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f000 f986 	bl	80080b0 <RTC_Bcd2ToByte>
 8007da4:	4603      	mov	r3, r0
 8007da6:	461a      	mov	r2, r3
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	789b      	ldrb	r3, [r3, #2]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 f97d 	bl	80080b0 <RTC_Bcd2ToByte>
 8007db6:	4603      	mov	r3, r0
 8007db8:	461a      	mov	r2, r3
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3718      	adds	r7, #24
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007dc8:	b590      	push	{r4, r7, lr}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	7f1b      	ldrb	r3, [r3, #28]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d101      	bne.n	8007de4 <HAL_RTC_SetDate+0x1c>
 8007de0:	2302      	movs	r3, #2
 8007de2:	e071      	b.n	8007ec8 <HAL_RTC_SetDate+0x100>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2201      	movs	r2, #1
 8007de8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2202      	movs	r2, #2
 8007dee:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10e      	bne.n	8007e14 <HAL_RTC_SetDate+0x4c>
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	785b      	ldrb	r3, [r3, #1]
 8007dfa:	f003 0310 	and.w	r3, r3, #16
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d008      	beq.n	8007e14 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	785b      	ldrb	r3, [r3, #1]
 8007e06:	f023 0310 	bic.w	r3, r3, #16
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	330a      	adds	r3, #10
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d11c      	bne.n	8007e54 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	78db      	ldrb	r3, [r3, #3]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f000 f929 	bl	8008076 <RTC_ByteToBcd2>
 8007e24:	4603      	mov	r3, r0
 8007e26:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	785b      	ldrb	r3, [r3, #1]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f000 f922 	bl	8008076 <RTC_ByteToBcd2>
 8007e32:	4603      	mov	r3, r0
 8007e34:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007e36:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	789b      	ldrb	r3, [r3, #2]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 f91a 	bl	8008076 <RTC_ByteToBcd2>
 8007e42:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007e44:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	617b      	str	r3, [r7, #20]
 8007e52:	e00e      	b.n	8007e72 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	78db      	ldrb	r3, [r3, #3]
 8007e58:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	785b      	ldrb	r3, [r3, #1]
 8007e5e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007e60:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007e66:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	22ca      	movs	r2, #202	; 0xca
 8007e78:	625a      	str	r2, [r3, #36]	; 0x24
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2253      	movs	r2, #83	; 0x53
 8007e80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f000 f89b 	bl	8007fbe <RTC_EnterInitMode>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007e8c:	7cfb      	ldrb	r3, [r7, #19]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10c      	bne.n	8007eac <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007e9c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007ea0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f000 f8c2 	bl	800802c <RTC_ExitInitMode>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007eac:	7cfb      	ldrb	r3, [r7, #19]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d102      	bne.n	8007eb8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	22ff      	movs	r2, #255	; 0xff
 8007ebe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	771a      	strb	r2, [r3, #28]

  return status;
 8007ec6:	7cfb      	ldrb	r3, [r7, #19]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	371c      	adds	r7, #28
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd90      	pop	{r4, r7, pc}

08007ed0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007edc:	2300      	movs	r3, #0
 8007ede:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007eea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007eee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	0c1b      	lsrs	r3, r3, #16
 8007ef4:	b2da      	uxtb	r2, r3
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	0a1b      	lsrs	r3, r3, #8
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	f003 031f 	and.w	r3, r3, #31
 8007f04:	b2da      	uxtb	r2, r3
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f12:	b2da      	uxtb	r2, r3
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	0b5b      	lsrs	r3, r3, #13
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	f003 0307 	and.w	r3, r3, #7
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d11a      	bne.n	8007f64 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	78db      	ldrb	r3, [r3, #3]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 f8bc 	bl	80080b0 <RTC_Bcd2ToByte>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	785b      	ldrb	r3, [r3, #1]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 f8b3 	bl	80080b0 <RTC_Bcd2ToByte>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	789b      	ldrb	r3, [r3, #2]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 f8aa 	bl	80080b0 <RTC_Bcd2ToByte>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	461a      	mov	r2, r3
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3718      	adds	r7, #24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007f76:	2300      	movs	r3, #0
 8007f78:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68da      	ldr	r2, [r3, #12]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007f88:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f8a:	f7fa fffd 	bl	8002f88 <HAL_GetTick>
 8007f8e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007f90:	e009      	b.n	8007fa6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f92:	f7fa fff9 	bl	8002f88 <HAL_GetTick>
 8007f96:	4602      	mov	r2, r0
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fa0:	d901      	bls.n	8007fa6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e007      	b.n	8007fb6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	f003 0320 	and.w	r3, r3, #32
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d0ee      	beq.n	8007f92 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b084      	sub	sp, #16
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d122      	bne.n	8008022 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68da      	ldr	r2, [r3, #12]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007fea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007fec:	f7fa ffcc 	bl	8002f88 <HAL_GetTick>
 8007ff0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007ff2:	e00c      	b.n	800800e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ff4:	f7fa ffc8 	bl	8002f88 <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008002:	d904      	bls.n	800800e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2204      	movs	r2, #4
 8008008:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008018:	2b00      	cmp	r3, #0
 800801a:	d102      	bne.n	8008022 <RTC_EnterInitMode+0x64>
 800801c:	7bfb      	ldrb	r3, [r7, #15]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d1e8      	bne.n	8007ff4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008022:	7bfb      	ldrb	r3, [r7, #15]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68da      	ldr	r2, [r3, #12]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008046:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f003 0320 	and.w	r3, r3, #32
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10a      	bne.n	800806c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f7ff ff89 	bl	8007f6e <HAL_RTC_WaitForSynchro>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d004      	beq.n	800806c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2204      	movs	r2, #4
 8008066:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800806c:	7bfb      	ldrb	r3, [r7, #15]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008076:	b480      	push	{r7}
 8008078:	b085      	sub	sp, #20
 800807a:	af00      	add	r7, sp, #0
 800807c:	4603      	mov	r3, r0
 800807e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8008080:	2300      	movs	r3, #0
 8008082:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8008084:	e005      	b.n	8008092 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008086:	7bfb      	ldrb	r3, [r7, #15]
 8008088:	3301      	adds	r3, #1
 800808a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800808c:	79fb      	ldrb	r3, [r7, #7]
 800808e:	3b0a      	subs	r3, #10
 8008090:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008092:	79fb      	ldrb	r3, [r7, #7]
 8008094:	2b09      	cmp	r3, #9
 8008096:	d8f6      	bhi.n	8008086 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008098:	7bfb      	ldrb	r3, [r7, #15]
 800809a:	011b      	lsls	r3, r3, #4
 800809c:	b2da      	uxtb	r2, r3
 800809e:	79fb      	ldrb	r3, [r7, #7]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	b2db      	uxtb	r3, r3
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	4603      	mov	r3, r0
 80080b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80080ba:	2300      	movs	r3, #0
 80080bc:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80080be:	79fb      	ldrb	r3, [r7, #7]
 80080c0:	091b      	lsrs	r3, r3, #4
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	461a      	mov	r2, r3
 80080c6:	0092      	lsls	r2, r2, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	005b      	lsls	r3, r3, #1
 80080cc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80080ce:	79fb      	ldrb	r3, [r7, #7]
 80080d0:	f003 030f 	and.w	r3, r3, #15
 80080d4:	b2da      	uxtb	r2, r3
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
 80080d8:	4413      	add	r3, r2
 80080da:	b2db      	uxtb	r3, r3
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d101      	bne.n	80080fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e07b      	b.n	80081f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d108      	bne.n	8008114 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800810a:	d009      	beq.n	8008120 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	61da      	str	r2, [r3, #28]
 8008112:	e005      	b.n	8008120 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	d106      	bne.n	8008140 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7f9 fa7a 	bl	8001634 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008156:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008168:	431a      	orrs	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008172:	431a      	orrs	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	f003 0302 	and.w	r3, r3, #2
 800817c:	431a      	orrs	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	431a      	orrs	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008190:	431a      	orrs	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800819a:	431a      	orrs	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a4:	ea42 0103 	orr.w	r1, r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	430a      	orrs	r2, r1
 80081b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	0c1b      	lsrs	r3, r3, #16
 80081be:	f003 0104 	and.w	r1, r3, #4
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c6:	f003 0210 	and.w	r2, r3, #16
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	430a      	orrs	r2, r1
 80081d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	69da      	ldr	r2, [r3, #28]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b082      	sub	sp, #8
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e041      	b.n	8008290 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008212:	b2db      	uxtb	r3, r3
 8008214:	2b00      	cmp	r3, #0
 8008216:	d106      	bne.n	8008226 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7f9 fa4f 	bl	80016c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2202      	movs	r2, #2
 800822a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	3304      	adds	r3, #4
 8008236:	4619      	mov	r1, r3
 8008238:	4610      	mov	r0, r2
 800823a:	f000 fcc7 	bl	8008bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d001      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e04e      	b.n	800834e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2202      	movs	r2, #2
 80082b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68da      	ldr	r2, [r3, #12]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f042 0201 	orr.w	r2, r2, #1
 80082c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a23      	ldr	r2, [pc, #140]	; (800835c <HAL_TIM_Base_Start_IT+0xc4>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d022      	beq.n	8008318 <HAL_TIM_Base_Start_IT+0x80>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082da:	d01d      	beq.n	8008318 <HAL_TIM_Base_Start_IT+0x80>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a1f      	ldr	r2, [pc, #124]	; (8008360 <HAL_TIM_Base_Start_IT+0xc8>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d018      	beq.n	8008318 <HAL_TIM_Base_Start_IT+0x80>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a1e      	ldr	r2, [pc, #120]	; (8008364 <HAL_TIM_Base_Start_IT+0xcc>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d013      	beq.n	8008318 <HAL_TIM_Base_Start_IT+0x80>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a1c      	ldr	r2, [pc, #112]	; (8008368 <HAL_TIM_Base_Start_IT+0xd0>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d00e      	beq.n	8008318 <HAL_TIM_Base_Start_IT+0x80>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a1b      	ldr	r2, [pc, #108]	; (800836c <HAL_TIM_Base_Start_IT+0xd4>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d009      	beq.n	8008318 <HAL_TIM_Base_Start_IT+0x80>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a19      	ldr	r2, [pc, #100]	; (8008370 <HAL_TIM_Base_Start_IT+0xd8>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d004      	beq.n	8008318 <HAL_TIM_Base_Start_IT+0x80>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a18      	ldr	r2, [pc, #96]	; (8008374 <HAL_TIM_Base_Start_IT+0xdc>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d111      	bne.n	800833c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f003 0307 	and.w	r3, r3, #7
 8008322:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b06      	cmp	r3, #6
 8008328:	d010      	beq.n	800834c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f042 0201 	orr.w	r2, r2, #1
 8008338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800833a:	e007      	b.n	800834c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f042 0201 	orr.w	r2, r2, #1
 800834a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	40010000 	.word	0x40010000
 8008360:	40000400 	.word	0x40000400
 8008364:	40000800 	.word	0x40000800
 8008368:	40000c00 	.word	0x40000c00
 800836c:	40010400 	.word	0x40010400
 8008370:	40014000 	.word	0x40014000
 8008374:	40001800 	.word	0x40001800

08008378 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e041      	b.n	800840e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008390:	b2db      	uxtb	r3, r3
 8008392:	2b00      	cmp	r3, #0
 8008394:	d106      	bne.n	80083a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f839 	bl	8008416 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2202      	movs	r2, #2
 80083a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	3304      	adds	r3, #4
 80083b4:	4619      	mov	r1, r3
 80083b6:	4610      	mov	r0, r2
 80083b8:	f000 fc08 	bl	8008bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008416:	b480      	push	{r7}
 8008418:	b083      	sub	sp, #12
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800841e:	bf00      	nop
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
	...

0800842c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d109      	bne.n	8008454 <HAL_TIM_PWM_Start_IT+0x28>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b01      	cmp	r3, #1
 800844a:	bf14      	ite	ne
 800844c:	2301      	movne	r3, #1
 800844e:	2300      	moveq	r3, #0
 8008450:	b2db      	uxtb	r3, r3
 8008452:	e022      	b.n	800849a <HAL_TIM_PWM_Start_IT+0x6e>
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	2b04      	cmp	r3, #4
 8008458:	d109      	bne.n	800846e <HAL_TIM_PWM_Start_IT+0x42>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b01      	cmp	r3, #1
 8008464:	bf14      	ite	ne
 8008466:	2301      	movne	r3, #1
 8008468:	2300      	moveq	r3, #0
 800846a:	b2db      	uxtb	r3, r3
 800846c:	e015      	b.n	800849a <HAL_TIM_PWM_Start_IT+0x6e>
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	2b08      	cmp	r3, #8
 8008472:	d109      	bne.n	8008488 <HAL_TIM_PWM_Start_IT+0x5c>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b01      	cmp	r3, #1
 800847e:	bf14      	ite	ne
 8008480:	2301      	movne	r3, #1
 8008482:	2300      	moveq	r3, #0
 8008484:	b2db      	uxtb	r3, r3
 8008486:	e008      	b.n	800849a <HAL_TIM_PWM_Start_IT+0x6e>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800848e:	b2db      	uxtb	r3, r3
 8008490:	2b01      	cmp	r3, #1
 8008492:	bf14      	ite	ne
 8008494:	2301      	movne	r3, #1
 8008496:	2300      	moveq	r3, #0
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e0c7      	b.n	8008632 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d104      	bne.n	80084b2 <HAL_TIM_PWM_Start_IT+0x86>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2202      	movs	r2, #2
 80084ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084b0:	e013      	b.n	80084da <HAL_TIM_PWM_Start_IT+0xae>
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	2b04      	cmp	r3, #4
 80084b6:	d104      	bne.n	80084c2 <HAL_TIM_PWM_Start_IT+0x96>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2202      	movs	r2, #2
 80084bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084c0:	e00b      	b.n	80084da <HAL_TIM_PWM_Start_IT+0xae>
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b08      	cmp	r3, #8
 80084c6:	d104      	bne.n	80084d2 <HAL_TIM_PWM_Start_IT+0xa6>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2202      	movs	r2, #2
 80084cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084d0:	e003      	b.n	80084da <HAL_TIM_PWM_Start_IT+0xae>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2202      	movs	r2, #2
 80084d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	2b0c      	cmp	r3, #12
 80084de:	d841      	bhi.n	8008564 <HAL_TIM_PWM_Start_IT+0x138>
 80084e0:	a201      	add	r2, pc, #4	; (adr r2, 80084e8 <HAL_TIM_PWM_Start_IT+0xbc>)
 80084e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e6:	bf00      	nop
 80084e8:	0800851d 	.word	0x0800851d
 80084ec:	08008565 	.word	0x08008565
 80084f0:	08008565 	.word	0x08008565
 80084f4:	08008565 	.word	0x08008565
 80084f8:	0800852f 	.word	0x0800852f
 80084fc:	08008565 	.word	0x08008565
 8008500:	08008565 	.word	0x08008565
 8008504:	08008565 	.word	0x08008565
 8008508:	08008541 	.word	0x08008541
 800850c:	08008565 	.word	0x08008565
 8008510:	08008565 	.word	0x08008565
 8008514:	08008565 	.word	0x08008565
 8008518:	08008553 	.word	0x08008553
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68da      	ldr	r2, [r3, #12]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f042 0202 	orr.w	r2, r2, #2
 800852a:	60da      	str	r2, [r3, #12]
      break;
 800852c:	e01d      	b.n	800856a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68da      	ldr	r2, [r3, #12]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f042 0204 	orr.w	r2, r2, #4
 800853c:	60da      	str	r2, [r3, #12]
      break;
 800853e:	e014      	b.n	800856a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68da      	ldr	r2, [r3, #12]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f042 0208 	orr.w	r2, r2, #8
 800854e:	60da      	str	r2, [r3, #12]
      break;
 8008550:	e00b      	b.n	800856a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68da      	ldr	r2, [r3, #12]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f042 0210 	orr.w	r2, r2, #16
 8008560:	60da      	str	r2, [r3, #12]
      break;
 8008562:	e002      	b.n	800856a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	73fb      	strb	r3, [r7, #15]
      break;
 8008568:	bf00      	nop
  }

  if (status == HAL_OK)
 800856a:	7bfb      	ldrb	r3, [r7, #15]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d15f      	bne.n	8008630 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2201      	movs	r2, #1
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	4618      	mov	r0, r3
 800857a:	f000 fe11 	bl	80091a0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a2e      	ldr	r2, [pc, #184]	; (800863c <HAL_TIM_PWM_Start_IT+0x210>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d004      	beq.n	8008592 <HAL_TIM_PWM_Start_IT+0x166>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a2c      	ldr	r2, [pc, #176]	; (8008640 <HAL_TIM_PWM_Start_IT+0x214>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d101      	bne.n	8008596 <HAL_TIM_PWM_Start_IT+0x16a>
 8008592:	2301      	movs	r3, #1
 8008594:	e000      	b.n	8008598 <HAL_TIM_PWM_Start_IT+0x16c>
 8008596:	2300      	movs	r3, #0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d007      	beq.n	80085ac <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085aa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a22      	ldr	r2, [pc, #136]	; (800863c <HAL_TIM_PWM_Start_IT+0x210>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d022      	beq.n	80085fc <HAL_TIM_PWM_Start_IT+0x1d0>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085be:	d01d      	beq.n	80085fc <HAL_TIM_PWM_Start_IT+0x1d0>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a1f      	ldr	r2, [pc, #124]	; (8008644 <HAL_TIM_PWM_Start_IT+0x218>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d018      	beq.n	80085fc <HAL_TIM_PWM_Start_IT+0x1d0>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a1e      	ldr	r2, [pc, #120]	; (8008648 <HAL_TIM_PWM_Start_IT+0x21c>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d013      	beq.n	80085fc <HAL_TIM_PWM_Start_IT+0x1d0>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a1c      	ldr	r2, [pc, #112]	; (800864c <HAL_TIM_PWM_Start_IT+0x220>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d00e      	beq.n	80085fc <HAL_TIM_PWM_Start_IT+0x1d0>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a17      	ldr	r2, [pc, #92]	; (8008640 <HAL_TIM_PWM_Start_IT+0x214>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d009      	beq.n	80085fc <HAL_TIM_PWM_Start_IT+0x1d0>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a18      	ldr	r2, [pc, #96]	; (8008650 <HAL_TIM_PWM_Start_IT+0x224>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d004      	beq.n	80085fc <HAL_TIM_PWM_Start_IT+0x1d0>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a17      	ldr	r2, [pc, #92]	; (8008654 <HAL_TIM_PWM_Start_IT+0x228>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d111      	bne.n	8008620 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	f003 0307 	and.w	r3, r3, #7
 8008606:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2b06      	cmp	r3, #6
 800860c:	d010      	beq.n	8008630 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f042 0201 	orr.w	r2, r2, #1
 800861c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800861e:	e007      	b.n	8008630 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f042 0201 	orr.w	r2, r2, #1
 800862e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008630:	7bfb      	ldrb	r3, [r7, #15]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	40010000 	.word	0x40010000
 8008640:	40010400 	.word	0x40010400
 8008644:	40000400 	.word	0x40000400
 8008648:	40000800 	.word	0x40000800
 800864c:	40000c00 	.word	0x40000c00
 8008650:	40014000 	.word	0x40014000
 8008654:	40001800 	.word	0x40001800

08008658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	f003 0302 	and.w	r3, r3, #2
 800866a:	2b02      	cmp	r3, #2
 800866c:	d122      	bne.n	80086b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	f003 0302 	and.w	r3, r3, #2
 8008678:	2b02      	cmp	r3, #2
 800867a:	d11b      	bne.n	80086b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f06f 0202 	mvn.w	r2, #2
 8008684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2201      	movs	r2, #1
 800868a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	f003 0303 	and.w	r3, r3, #3
 8008696:	2b00      	cmp	r3, #0
 8008698:	d003      	beq.n	80086a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fa77 	bl	8008b8e <HAL_TIM_IC_CaptureCallback>
 80086a0:	e005      	b.n	80086ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fa69 	bl	8008b7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fa7a 	bl	8008ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	f003 0304 	and.w	r3, r3, #4
 80086be:	2b04      	cmp	r3, #4
 80086c0:	d122      	bne.n	8008708 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	f003 0304 	and.w	r3, r3, #4
 80086cc:	2b04      	cmp	r3, #4
 80086ce:	d11b      	bne.n	8008708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f06f 0204 	mvn.w	r2, #4
 80086d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2202      	movs	r2, #2
 80086de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d003      	beq.n	80086f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fa4d 	bl	8008b8e <HAL_TIM_IC_CaptureCallback>
 80086f4:	e005      	b.n	8008702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fa3f 	bl	8008b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fa50 	bl	8008ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	f003 0308 	and.w	r3, r3, #8
 8008712:	2b08      	cmp	r3, #8
 8008714:	d122      	bne.n	800875c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	f003 0308 	and.w	r3, r3, #8
 8008720:	2b08      	cmp	r3, #8
 8008722:	d11b      	bne.n	800875c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f06f 0208 	mvn.w	r2, #8
 800872c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2204      	movs	r2, #4
 8008732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	f003 0303 	and.w	r3, r3, #3
 800873e:	2b00      	cmp	r3, #0
 8008740:	d003      	beq.n	800874a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fa23 	bl	8008b8e <HAL_TIM_IC_CaptureCallback>
 8008748:	e005      	b.n	8008756 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 fa15 	bl	8008b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 fa26 	bl	8008ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	f003 0310 	and.w	r3, r3, #16
 8008766:	2b10      	cmp	r3, #16
 8008768:	d122      	bne.n	80087b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	f003 0310 	and.w	r3, r3, #16
 8008774:	2b10      	cmp	r3, #16
 8008776:	d11b      	bne.n	80087b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f06f 0210 	mvn.w	r2, #16
 8008780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2208      	movs	r2, #8
 8008786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	69db      	ldr	r3, [r3, #28]
 800878e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008792:	2b00      	cmp	r3, #0
 8008794:	d003      	beq.n	800879e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f9f9 	bl	8008b8e <HAL_TIM_IC_CaptureCallback>
 800879c:	e005      	b.n	80087aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f9eb 	bl	8008b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f9fc 	bl	8008ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d10e      	bne.n	80087dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	f003 0301 	and.w	r3, r3, #1
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d107      	bne.n	80087dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f06f 0201 	mvn.w	r2, #1
 80087d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f7f8 fe2c 	bl	8001434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087e6:	2b80      	cmp	r3, #128	; 0x80
 80087e8:	d10e      	bne.n	8008808 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087f4:	2b80      	cmp	r3, #128	; 0x80
 80087f6:	d107      	bne.n	8008808 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fd78 	bl	80092f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	691b      	ldr	r3, [r3, #16]
 800880e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008812:	2b40      	cmp	r3, #64	; 0x40
 8008814:	d10e      	bne.n	8008834 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008820:	2b40      	cmp	r3, #64	; 0x40
 8008822:	d107      	bne.n	8008834 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800882c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f9c1 	bl	8008bb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	f003 0320 	and.w	r3, r3, #32
 800883e:	2b20      	cmp	r3, #32
 8008840:	d10e      	bne.n	8008860 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	f003 0320 	and.w	r3, r3, #32
 800884c:	2b20      	cmp	r3, #32
 800884e:	d107      	bne.n	8008860 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f06f 0220 	mvn.w	r2, #32
 8008858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fd42 	bl	80092e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008860:	bf00      	nop
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800887e:	2b01      	cmp	r3, #1
 8008880:	d101      	bne.n	8008886 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008882:	2302      	movs	r3, #2
 8008884:	e0ae      	b.n	80089e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b0c      	cmp	r3, #12
 8008892:	f200 809f 	bhi.w	80089d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008896:	a201      	add	r2, pc, #4	; (adr r2, 800889c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889c:	080088d1 	.word	0x080088d1
 80088a0:	080089d5 	.word	0x080089d5
 80088a4:	080089d5 	.word	0x080089d5
 80088a8:	080089d5 	.word	0x080089d5
 80088ac:	08008911 	.word	0x08008911
 80088b0:	080089d5 	.word	0x080089d5
 80088b4:	080089d5 	.word	0x080089d5
 80088b8:	080089d5 	.word	0x080089d5
 80088bc:	08008953 	.word	0x08008953
 80088c0:	080089d5 	.word	0x080089d5
 80088c4:	080089d5 	.word	0x080089d5
 80088c8:	080089d5 	.word	0x080089d5
 80088cc:	08008993 	.word	0x08008993
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68b9      	ldr	r1, [r7, #8]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 fa18 	bl	8008d0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	699a      	ldr	r2, [r3, #24]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f042 0208 	orr.w	r2, r2, #8
 80088ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	699a      	ldr	r2, [r3, #24]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f022 0204 	bic.w	r2, r2, #4
 80088fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6999      	ldr	r1, [r3, #24]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	691a      	ldr	r2, [r3, #16]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	619a      	str	r2, [r3, #24]
      break;
 800890e:	e064      	b.n	80089da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68b9      	ldr	r1, [r7, #8]
 8008916:	4618      	mov	r0, r3
 8008918:	f000 fa68 	bl	8008dec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	699a      	ldr	r2, [r3, #24]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800892a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	699a      	ldr	r2, [r3, #24]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800893a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	6999      	ldr	r1, [r3, #24]
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	021a      	lsls	r2, r3, #8
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	430a      	orrs	r2, r1
 800894e:	619a      	str	r2, [r3, #24]
      break;
 8008950:	e043      	b.n	80089da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68b9      	ldr	r1, [r7, #8]
 8008958:	4618      	mov	r0, r3
 800895a:	f000 fabd 	bl	8008ed8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	69da      	ldr	r2, [r3, #28]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f042 0208 	orr.w	r2, r2, #8
 800896c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	69da      	ldr	r2, [r3, #28]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f022 0204 	bic.w	r2, r2, #4
 800897c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	69d9      	ldr	r1, [r3, #28]
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	691a      	ldr	r2, [r3, #16]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	430a      	orrs	r2, r1
 800898e:	61da      	str	r2, [r3, #28]
      break;
 8008990:	e023      	b.n	80089da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68b9      	ldr	r1, [r7, #8]
 8008998:	4618      	mov	r0, r3
 800899a:	f000 fb11 	bl	8008fc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	69da      	ldr	r2, [r3, #28]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	69da      	ldr	r2, [r3, #28]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	69d9      	ldr	r1, [r3, #28]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	021a      	lsls	r2, r3, #8
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	430a      	orrs	r2, r1
 80089d0:	61da      	str	r2, [r3, #28]
      break;
 80089d2:	e002      	b.n	80089da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	75fb      	strb	r3, [r7, #23]
      break;
 80089d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3718      	adds	r7, #24
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d101      	bne.n	8008a08 <HAL_TIM_ConfigClockSource+0x1c>
 8008a04:	2302      	movs	r3, #2
 8008a06:	e0b4      	b.n	8008b72 <HAL_TIM_ConfigClockSource+0x186>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2202      	movs	r2, #2
 8008a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a40:	d03e      	beq.n	8008ac0 <HAL_TIM_ConfigClockSource+0xd4>
 8008a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a46:	f200 8087 	bhi.w	8008b58 <HAL_TIM_ConfigClockSource+0x16c>
 8008a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a4e:	f000 8086 	beq.w	8008b5e <HAL_TIM_ConfigClockSource+0x172>
 8008a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a56:	d87f      	bhi.n	8008b58 <HAL_TIM_ConfigClockSource+0x16c>
 8008a58:	2b70      	cmp	r3, #112	; 0x70
 8008a5a:	d01a      	beq.n	8008a92 <HAL_TIM_ConfigClockSource+0xa6>
 8008a5c:	2b70      	cmp	r3, #112	; 0x70
 8008a5e:	d87b      	bhi.n	8008b58 <HAL_TIM_ConfigClockSource+0x16c>
 8008a60:	2b60      	cmp	r3, #96	; 0x60
 8008a62:	d050      	beq.n	8008b06 <HAL_TIM_ConfigClockSource+0x11a>
 8008a64:	2b60      	cmp	r3, #96	; 0x60
 8008a66:	d877      	bhi.n	8008b58 <HAL_TIM_ConfigClockSource+0x16c>
 8008a68:	2b50      	cmp	r3, #80	; 0x50
 8008a6a:	d03c      	beq.n	8008ae6 <HAL_TIM_ConfigClockSource+0xfa>
 8008a6c:	2b50      	cmp	r3, #80	; 0x50
 8008a6e:	d873      	bhi.n	8008b58 <HAL_TIM_ConfigClockSource+0x16c>
 8008a70:	2b40      	cmp	r3, #64	; 0x40
 8008a72:	d058      	beq.n	8008b26 <HAL_TIM_ConfigClockSource+0x13a>
 8008a74:	2b40      	cmp	r3, #64	; 0x40
 8008a76:	d86f      	bhi.n	8008b58 <HAL_TIM_ConfigClockSource+0x16c>
 8008a78:	2b30      	cmp	r3, #48	; 0x30
 8008a7a:	d064      	beq.n	8008b46 <HAL_TIM_ConfigClockSource+0x15a>
 8008a7c:	2b30      	cmp	r3, #48	; 0x30
 8008a7e:	d86b      	bhi.n	8008b58 <HAL_TIM_ConfigClockSource+0x16c>
 8008a80:	2b20      	cmp	r3, #32
 8008a82:	d060      	beq.n	8008b46 <HAL_TIM_ConfigClockSource+0x15a>
 8008a84:	2b20      	cmp	r3, #32
 8008a86:	d867      	bhi.n	8008b58 <HAL_TIM_ConfigClockSource+0x16c>
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d05c      	beq.n	8008b46 <HAL_TIM_ConfigClockSource+0x15a>
 8008a8c:	2b10      	cmp	r3, #16
 8008a8e:	d05a      	beq.n	8008b46 <HAL_TIM_ConfigClockSource+0x15a>
 8008a90:	e062      	b.n	8008b58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6818      	ldr	r0, [r3, #0]
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	6899      	ldr	r1, [r3, #8]
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	685a      	ldr	r2, [r3, #4]
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	f000 fb5d 	bl	8009160 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ab4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	609a      	str	r2, [r3, #8]
      break;
 8008abe:	e04f      	b.n	8008b60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6818      	ldr	r0, [r3, #0]
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	6899      	ldr	r1, [r3, #8]
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	685a      	ldr	r2, [r3, #4]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	f000 fb46 	bl	8009160 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	689a      	ldr	r2, [r3, #8]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ae2:	609a      	str	r2, [r3, #8]
      break;
 8008ae4:	e03c      	b.n	8008b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6818      	ldr	r0, [r3, #0]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	6859      	ldr	r1, [r3, #4]
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	461a      	mov	r2, r3
 8008af4:	f000 faba 	bl	800906c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2150      	movs	r1, #80	; 0x50
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 fb13 	bl	800912a <TIM_ITRx_SetConfig>
      break;
 8008b04:	e02c      	b.n	8008b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6818      	ldr	r0, [r3, #0]
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	6859      	ldr	r1, [r3, #4]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	461a      	mov	r2, r3
 8008b14:	f000 fad9 	bl	80090ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2160      	movs	r1, #96	; 0x60
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 fb03 	bl	800912a <TIM_ITRx_SetConfig>
      break;
 8008b24:	e01c      	b.n	8008b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6818      	ldr	r0, [r3, #0]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	6859      	ldr	r1, [r3, #4]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	461a      	mov	r2, r3
 8008b34:	f000 fa9a 	bl	800906c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2140      	movs	r1, #64	; 0x40
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 faf3 	bl	800912a <TIM_ITRx_SetConfig>
      break;
 8008b44:	e00c      	b.n	8008b60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	4610      	mov	r0, r2
 8008b52:	f000 faea 	bl	800912a <TIM_ITRx_SetConfig>
      break;
 8008b56:	e003      	b.n	8008b60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b5c:	e000      	b.n	8008b60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b083      	sub	sp, #12
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b82:	bf00      	nop
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b083      	sub	sp, #12
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b96:	bf00      	nop
 8008b98:	370c      	adds	r7, #12
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	b083      	sub	sp, #12
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008baa:	bf00      	nop
 8008bac:	370c      	adds	r7, #12
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b083      	sub	sp, #12
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bbe:	bf00      	nop
 8008bc0:	370c      	adds	r7, #12
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
	...

08008bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a40      	ldr	r2, [pc, #256]	; (8008ce0 <TIM_Base_SetConfig+0x114>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d013      	beq.n	8008c0c <TIM_Base_SetConfig+0x40>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bea:	d00f      	beq.n	8008c0c <TIM_Base_SetConfig+0x40>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a3d      	ldr	r2, [pc, #244]	; (8008ce4 <TIM_Base_SetConfig+0x118>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d00b      	beq.n	8008c0c <TIM_Base_SetConfig+0x40>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a3c      	ldr	r2, [pc, #240]	; (8008ce8 <TIM_Base_SetConfig+0x11c>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d007      	beq.n	8008c0c <TIM_Base_SetConfig+0x40>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a3b      	ldr	r2, [pc, #236]	; (8008cec <TIM_Base_SetConfig+0x120>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d003      	beq.n	8008c0c <TIM_Base_SetConfig+0x40>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a3a      	ldr	r2, [pc, #232]	; (8008cf0 <TIM_Base_SetConfig+0x124>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d108      	bne.n	8008c1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a2f      	ldr	r2, [pc, #188]	; (8008ce0 <TIM_Base_SetConfig+0x114>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d02b      	beq.n	8008c7e <TIM_Base_SetConfig+0xb2>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c2c:	d027      	beq.n	8008c7e <TIM_Base_SetConfig+0xb2>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a2c      	ldr	r2, [pc, #176]	; (8008ce4 <TIM_Base_SetConfig+0x118>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d023      	beq.n	8008c7e <TIM_Base_SetConfig+0xb2>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a2b      	ldr	r2, [pc, #172]	; (8008ce8 <TIM_Base_SetConfig+0x11c>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d01f      	beq.n	8008c7e <TIM_Base_SetConfig+0xb2>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a2a      	ldr	r2, [pc, #168]	; (8008cec <TIM_Base_SetConfig+0x120>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d01b      	beq.n	8008c7e <TIM_Base_SetConfig+0xb2>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a29      	ldr	r2, [pc, #164]	; (8008cf0 <TIM_Base_SetConfig+0x124>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d017      	beq.n	8008c7e <TIM_Base_SetConfig+0xb2>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a28      	ldr	r2, [pc, #160]	; (8008cf4 <TIM_Base_SetConfig+0x128>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d013      	beq.n	8008c7e <TIM_Base_SetConfig+0xb2>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a27      	ldr	r2, [pc, #156]	; (8008cf8 <TIM_Base_SetConfig+0x12c>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d00f      	beq.n	8008c7e <TIM_Base_SetConfig+0xb2>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a26      	ldr	r2, [pc, #152]	; (8008cfc <TIM_Base_SetConfig+0x130>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d00b      	beq.n	8008c7e <TIM_Base_SetConfig+0xb2>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a25      	ldr	r2, [pc, #148]	; (8008d00 <TIM_Base_SetConfig+0x134>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d007      	beq.n	8008c7e <TIM_Base_SetConfig+0xb2>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a24      	ldr	r2, [pc, #144]	; (8008d04 <TIM_Base_SetConfig+0x138>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d003      	beq.n	8008c7e <TIM_Base_SetConfig+0xb2>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a23      	ldr	r2, [pc, #140]	; (8008d08 <TIM_Base_SetConfig+0x13c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d108      	bne.n	8008c90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	689a      	ldr	r2, [r3, #8]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a0a      	ldr	r2, [pc, #40]	; (8008ce0 <TIM_Base_SetConfig+0x114>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d003      	beq.n	8008cc4 <TIM_Base_SetConfig+0xf8>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a0c      	ldr	r2, [pc, #48]	; (8008cf0 <TIM_Base_SetConfig+0x124>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d103      	bne.n	8008ccc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	691a      	ldr	r2, [r3, #16]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	615a      	str	r2, [r3, #20]
}
 8008cd2:	bf00      	nop
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	40010000 	.word	0x40010000
 8008ce4:	40000400 	.word	0x40000400
 8008ce8:	40000800 	.word	0x40000800
 8008cec:	40000c00 	.word	0x40000c00
 8008cf0:	40010400 	.word	0x40010400
 8008cf4:	40014000 	.word	0x40014000
 8008cf8:	40014400 	.word	0x40014400
 8008cfc:	40014800 	.word	0x40014800
 8008d00:	40001800 	.word	0x40001800
 8008d04:	40001c00 	.word	0x40001c00
 8008d08:	40002000 	.word	0x40002000

08008d0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a1b      	ldr	r3, [r3, #32]
 8008d1a:	f023 0201 	bic.w	r2, r3, #1
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a1b      	ldr	r3, [r3, #32]
 8008d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	699b      	ldr	r3, [r3, #24]
 8008d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f023 0303 	bic.w	r3, r3, #3
 8008d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	f023 0302 	bic.w	r3, r3, #2
 8008d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a20      	ldr	r2, [pc, #128]	; (8008de4 <TIM_OC1_SetConfig+0xd8>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d003      	beq.n	8008d70 <TIM_OC1_SetConfig+0x64>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a1f      	ldr	r2, [pc, #124]	; (8008de8 <TIM_OC1_SetConfig+0xdc>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d10c      	bne.n	8008d8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	f023 0308 	bic.w	r3, r3, #8
 8008d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	697a      	ldr	r2, [r7, #20]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	f023 0304 	bic.w	r3, r3, #4
 8008d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a15      	ldr	r2, [pc, #84]	; (8008de4 <TIM_OC1_SetConfig+0xd8>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d003      	beq.n	8008d9a <TIM_OC1_SetConfig+0x8e>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a14      	ldr	r2, [pc, #80]	; (8008de8 <TIM_OC1_SetConfig+0xdc>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d111      	bne.n	8008dbe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	693a      	ldr	r2, [r7, #16]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	699b      	ldr	r3, [r3, #24]
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	693a      	ldr	r2, [r7, #16]
 8008dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	685a      	ldr	r2, [r3, #4]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	621a      	str	r2, [r3, #32]
}
 8008dd8:	bf00      	nop
 8008dda:	371c      	adds	r7, #28
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr
 8008de4:	40010000 	.word	0x40010000
 8008de8:	40010400 	.word	0x40010400

08008dec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b087      	sub	sp, #28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a1b      	ldr	r3, [r3, #32]
 8008dfa:	f023 0210 	bic.w	r2, r3, #16
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a1b      	ldr	r3, [r3, #32]
 8008e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	021b      	lsls	r3, r3, #8
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	f023 0320 	bic.w	r3, r3, #32
 8008e36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	011b      	lsls	r3, r3, #4
 8008e3e:	697a      	ldr	r2, [r7, #20]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a22      	ldr	r2, [pc, #136]	; (8008ed0 <TIM_OC2_SetConfig+0xe4>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d003      	beq.n	8008e54 <TIM_OC2_SetConfig+0x68>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a21      	ldr	r2, [pc, #132]	; (8008ed4 <TIM_OC2_SetConfig+0xe8>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d10d      	bne.n	8008e70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	011b      	lsls	r3, r3, #4
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a17      	ldr	r2, [pc, #92]	; (8008ed0 <TIM_OC2_SetConfig+0xe4>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d003      	beq.n	8008e80 <TIM_OC2_SetConfig+0x94>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a16      	ldr	r2, [pc, #88]	; (8008ed4 <TIM_OC2_SetConfig+0xe8>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d113      	bne.n	8008ea8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	693a      	ldr	r2, [r7, #16]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	693a      	ldr	r2, [r7, #16]
 8008eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	685a      	ldr	r2, [r3, #4]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	621a      	str	r2, [r3, #32]
}
 8008ec2:	bf00      	nop
 8008ec4:	371c      	adds	r7, #28
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	40010000 	.word	0x40010000
 8008ed4:	40010400 	.word	0x40010400

08008ed8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b087      	sub	sp, #28
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a1b      	ldr	r3, [r3, #32]
 8008ee6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	69db      	ldr	r3, [r3, #28]
 8008efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f023 0303 	bic.w	r3, r3, #3
 8008f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	021b      	lsls	r3, r3, #8
 8008f28:	697a      	ldr	r2, [r7, #20]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a21      	ldr	r2, [pc, #132]	; (8008fb8 <TIM_OC3_SetConfig+0xe0>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d003      	beq.n	8008f3e <TIM_OC3_SetConfig+0x66>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a20      	ldr	r2, [pc, #128]	; (8008fbc <TIM_OC3_SetConfig+0xe4>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d10d      	bne.n	8008f5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	021b      	lsls	r3, r3, #8
 8008f4c:	697a      	ldr	r2, [r7, #20]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a16      	ldr	r2, [pc, #88]	; (8008fb8 <TIM_OC3_SetConfig+0xe0>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d003      	beq.n	8008f6a <TIM_OC3_SetConfig+0x92>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a15      	ldr	r2, [pc, #84]	; (8008fbc <TIM_OC3_SetConfig+0xe4>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d113      	bne.n	8008f92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	011b      	lsls	r3, r3, #4
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	011b      	lsls	r3, r3, #4
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	693a      	ldr	r2, [r7, #16]
 8008f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	621a      	str	r2, [r3, #32]
}
 8008fac:	bf00      	nop
 8008fae:	371c      	adds	r7, #28
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr
 8008fb8:	40010000 	.word	0x40010000
 8008fbc:	40010400 	.word	0x40010400

08008fc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b087      	sub	sp, #28
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a1b      	ldr	r3, [r3, #32]
 8008fce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	021b      	lsls	r3, r3, #8
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	4313      	orrs	r3, r2
 8009002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800900a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	031b      	lsls	r3, r3, #12
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	4313      	orrs	r3, r2
 8009016:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a12      	ldr	r2, [pc, #72]	; (8009064 <TIM_OC4_SetConfig+0xa4>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d003      	beq.n	8009028 <TIM_OC4_SetConfig+0x68>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a11      	ldr	r2, [pc, #68]	; (8009068 <TIM_OC4_SetConfig+0xa8>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d109      	bne.n	800903c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800902e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	695b      	ldr	r3, [r3, #20]
 8009034:	019b      	lsls	r3, r3, #6
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	4313      	orrs	r3, r2
 800903a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	685a      	ldr	r2, [r3, #4]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	621a      	str	r2, [r3, #32]
}
 8009056:	bf00      	nop
 8009058:	371c      	adds	r7, #28
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	40010000 	.word	0x40010000
 8009068:	40010400 	.word	0x40010400

0800906c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800906c:	b480      	push	{r7}
 800906e:	b087      	sub	sp, #28
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6a1b      	ldr	r3, [r3, #32]
 800907c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6a1b      	ldr	r3, [r3, #32]
 8009082:	f023 0201 	bic.w	r2, r3, #1
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	699b      	ldr	r3, [r3, #24]
 800908e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	011b      	lsls	r3, r3, #4
 800909c:	693a      	ldr	r2, [r7, #16]
 800909e:	4313      	orrs	r3, r2
 80090a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f023 030a 	bic.w	r3, r3, #10
 80090a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	693a      	ldr	r2, [r7, #16]
 80090b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	697a      	ldr	r2, [r7, #20]
 80090bc:	621a      	str	r2, [r3, #32]
}
 80090be:	bf00      	nop
 80090c0:	371c      	adds	r7, #28
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr

080090ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090ca:	b480      	push	{r7}
 80090cc:	b087      	sub	sp, #28
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	60f8      	str	r0, [r7, #12]
 80090d2:	60b9      	str	r1, [r7, #8]
 80090d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6a1b      	ldr	r3, [r3, #32]
 80090da:	f023 0210 	bic.w	r2, r3, #16
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	699b      	ldr	r3, [r3, #24]
 80090e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6a1b      	ldr	r3, [r3, #32]
 80090ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	031b      	lsls	r3, r3, #12
 80090fa:	697a      	ldr	r2, [r7, #20]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009106:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	011b      	lsls	r3, r3, #4
 800910c:	693a      	ldr	r2, [r7, #16]
 800910e:	4313      	orrs	r3, r2
 8009110:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	693a      	ldr	r2, [r7, #16]
 800911c:	621a      	str	r2, [r3, #32]
}
 800911e:	bf00      	nop
 8009120:	371c      	adds	r7, #28
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr

0800912a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800912a:	b480      	push	{r7}
 800912c:	b085      	sub	sp, #20
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009142:	683a      	ldr	r2, [r7, #0]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	4313      	orrs	r3, r2
 8009148:	f043 0307 	orr.w	r3, r3, #7
 800914c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	609a      	str	r2, [r3, #8]
}
 8009154:	bf00      	nop
 8009156:	3714      	adds	r7, #20
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009160:	b480      	push	{r7}
 8009162:	b087      	sub	sp, #28
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
 800916c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800917a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	021a      	lsls	r2, r3, #8
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	431a      	orrs	r2, r3
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	4313      	orrs	r3, r2
 8009188:	697a      	ldr	r2, [r7, #20]
 800918a:	4313      	orrs	r3, r2
 800918c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	697a      	ldr	r2, [r7, #20]
 8009192:	609a      	str	r2, [r3, #8]
}
 8009194:	bf00      	nop
 8009196:	371c      	adds	r7, #28
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b087      	sub	sp, #28
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	f003 031f 	and.w	r3, r3, #31
 80091b2:	2201      	movs	r2, #1
 80091b4:	fa02 f303 	lsl.w	r3, r2, r3
 80091b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6a1a      	ldr	r2, [r3, #32]
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	43db      	mvns	r3, r3
 80091c2:	401a      	ands	r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6a1a      	ldr	r2, [r3, #32]
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	f003 031f 	and.w	r3, r3, #31
 80091d2:	6879      	ldr	r1, [r7, #4]
 80091d4:	fa01 f303 	lsl.w	r3, r1, r3
 80091d8:	431a      	orrs	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	621a      	str	r2, [r3, #32]
}
 80091de:	bf00      	nop
 80091e0:	371c      	adds	r7, #28
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
	...

080091ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d101      	bne.n	8009204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009200:	2302      	movs	r3, #2
 8009202:	e05a      	b.n	80092ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2202      	movs	r2, #2
 8009210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800922a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	4313      	orrs	r3, r2
 8009234:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a21      	ldr	r2, [pc, #132]	; (80092c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d022      	beq.n	800928e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009250:	d01d      	beq.n	800928e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a1d      	ldr	r2, [pc, #116]	; (80092cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d018      	beq.n	800928e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a1b      	ldr	r2, [pc, #108]	; (80092d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d013      	beq.n	800928e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a1a      	ldr	r2, [pc, #104]	; (80092d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d00e      	beq.n	800928e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a18      	ldr	r2, [pc, #96]	; (80092d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d009      	beq.n	800928e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a17      	ldr	r2, [pc, #92]	; (80092dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d004      	beq.n	800928e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a15      	ldr	r2, [pc, #84]	; (80092e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d10c      	bne.n	80092a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009294:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	4313      	orrs	r3, r2
 800929e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68ba      	ldr	r2, [r7, #8]
 80092a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3714      	adds	r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	40010000 	.word	0x40010000
 80092cc:	40000400 	.word	0x40000400
 80092d0:	40000800 	.word	0x40000800
 80092d4:	40000c00 	.word	0x40000c00
 80092d8:	40010400 	.word	0x40010400
 80092dc:	40014000 	.word	0x40014000
 80092e0:	40001800 	.word	0x40001800

080092e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d101      	bne.n	800931e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e03f      	b.n	800939e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009324:	b2db      	uxtb	r3, r3
 8009326:	2b00      	cmp	r3, #0
 8009328:	d106      	bne.n	8009338 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f7f8 fa22 	bl	800177c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2224      	movs	r2, #36	; 0x24
 800933c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68da      	ldr	r2, [r3, #12]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800934e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fc71 	bl	8009c38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	691a      	ldr	r2, [r3, #16]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009364:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	695a      	ldr	r2, [r3, #20]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009374:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68da      	ldr	r2, [r3, #12]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009384:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2220      	movs	r2, #32
 8009390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2220      	movs	r2, #32
 8009398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3708      	adds	r7, #8
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
	...

080093a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b0ba      	sub	sp, #232	; 0xe8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	695b      	ldr	r3, [r3, #20]
 80093ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80093ce:	2300      	movs	r3, #0
 80093d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80093d4:	2300      	movs	r3, #0
 80093d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80093da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093de:	f003 030f 	and.w	r3, r3, #15
 80093e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80093e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10f      	bne.n	800940e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80093ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093f2:	f003 0320 	and.w	r3, r3, #32
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d009      	beq.n	800940e <HAL_UART_IRQHandler+0x66>
 80093fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093fe:	f003 0320 	and.w	r3, r3, #32
 8009402:	2b00      	cmp	r3, #0
 8009404:	d003      	beq.n	800940e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fb5b 	bl	8009ac2 <UART_Receive_IT>
      return;
 800940c:	e256      	b.n	80098bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800940e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009412:	2b00      	cmp	r3, #0
 8009414:	f000 80de 	beq.w	80095d4 <HAL_UART_IRQHandler+0x22c>
 8009418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	2b00      	cmp	r3, #0
 8009422:	d106      	bne.n	8009432 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009428:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 80d1 	beq.w	80095d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00b      	beq.n	8009456 <HAL_UART_IRQHandler+0xae>
 800943e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009446:	2b00      	cmp	r3, #0
 8009448:	d005      	beq.n	8009456 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944e:	f043 0201 	orr.w	r2, r3, #1
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800945a:	f003 0304 	and.w	r3, r3, #4
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00b      	beq.n	800947a <HAL_UART_IRQHandler+0xd2>
 8009462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	d005      	beq.n	800947a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009472:	f043 0202 	orr.w	r2, r3, #2
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800947a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800947e:	f003 0302 	and.w	r3, r3, #2
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00b      	beq.n	800949e <HAL_UART_IRQHandler+0xf6>
 8009486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800948a:	f003 0301 	and.w	r3, r3, #1
 800948e:	2b00      	cmp	r3, #0
 8009490:	d005      	beq.n	800949e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009496:	f043 0204 	orr.w	r2, r3, #4
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800949e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094a2:	f003 0308 	and.w	r3, r3, #8
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d011      	beq.n	80094ce <HAL_UART_IRQHandler+0x126>
 80094aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094ae:	f003 0320 	and.w	r3, r3, #32
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d105      	bne.n	80094c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80094b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094ba:	f003 0301 	and.w	r3, r3, #1
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d005      	beq.n	80094ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c6:	f043 0208 	orr.w	r2, r3, #8
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f000 81ed 	beq.w	80098b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80094d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094dc:	f003 0320 	and.w	r3, r3, #32
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d008      	beq.n	80094f6 <HAL_UART_IRQHandler+0x14e>
 80094e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094e8:	f003 0320 	and.w	r3, r3, #32
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d002      	beq.n	80094f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fae6 	bl	8009ac2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	695b      	ldr	r3, [r3, #20]
 80094fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009500:	2b40      	cmp	r3, #64	; 0x40
 8009502:	bf0c      	ite	eq
 8009504:	2301      	moveq	r3, #1
 8009506:	2300      	movne	r3, #0
 8009508:	b2db      	uxtb	r3, r3
 800950a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009512:	f003 0308 	and.w	r3, r3, #8
 8009516:	2b00      	cmp	r3, #0
 8009518:	d103      	bne.n	8009522 <HAL_UART_IRQHandler+0x17a>
 800951a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800951e:	2b00      	cmp	r3, #0
 8009520:	d04f      	beq.n	80095c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f9ee 	bl	8009904 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009532:	2b40      	cmp	r3, #64	; 0x40
 8009534:	d141      	bne.n	80095ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3314      	adds	r3, #20
 800953c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009540:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009544:	e853 3f00 	ldrex	r3, [r3]
 8009548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800954c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009554:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	3314      	adds	r3, #20
 800955e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009562:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009566:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800956e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009572:	e841 2300 	strex	r3, r2, [r1]
 8009576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800957a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1d9      	bne.n	8009536 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009586:	2b00      	cmp	r3, #0
 8009588:	d013      	beq.n	80095b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800958e:	4a7d      	ldr	r2, [pc, #500]	; (8009784 <HAL_UART_IRQHandler+0x3dc>)
 8009590:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009596:	4618      	mov	r0, r3
 8009598:	f7fa f8ea 	bl	8003770 <HAL_DMA_Abort_IT>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d016      	beq.n	80095d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80095ac:	4610      	mov	r0, r2
 80095ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095b0:	e00e      	b.n	80095d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 f990 	bl	80098d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095b8:	e00a      	b.n	80095d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f98c 	bl	80098d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095c0:	e006      	b.n	80095d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f988 	bl	80098d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80095ce:	e170      	b.n	80098b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095d0:	bf00      	nop
    return;
 80095d2:	e16e      	b.n	80098b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d8:	2b01      	cmp	r3, #1
 80095da:	f040 814a 	bne.w	8009872 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80095de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095e2:	f003 0310 	and.w	r3, r3, #16
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f000 8143 	beq.w	8009872 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80095ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095f0:	f003 0310 	and.w	r3, r3, #16
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f000 813c 	beq.w	8009872 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80095fa:	2300      	movs	r3, #0
 80095fc:	60bb      	str	r3, [r7, #8]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	60bb      	str	r3, [r7, #8]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	60bb      	str	r3, [r7, #8]
 800960e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	695b      	ldr	r3, [r3, #20]
 8009616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800961a:	2b40      	cmp	r3, #64	; 0x40
 800961c:	f040 80b4 	bne.w	8009788 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800962c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009630:	2b00      	cmp	r3, #0
 8009632:	f000 8140 	beq.w	80098b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800963a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800963e:	429a      	cmp	r2, r3
 8009640:	f080 8139 	bcs.w	80098b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800964a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009650:	69db      	ldr	r3, [r3, #28]
 8009652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009656:	f000 8088 	beq.w	800976a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	330c      	adds	r3, #12
 8009660:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009664:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009668:	e853 3f00 	ldrex	r3, [r3]
 800966c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009670:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009678:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	330c      	adds	r3, #12
 8009682:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009686:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800968a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009692:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009696:	e841 2300 	strex	r3, r2, [r1]
 800969a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800969e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1d9      	bne.n	800965a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	3314      	adds	r3, #20
 80096ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096b0:	e853 3f00 	ldrex	r3, [r3]
 80096b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80096b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096b8:	f023 0301 	bic.w	r3, r3, #1
 80096bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	3314      	adds	r3, #20
 80096c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80096ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80096ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80096d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80096d6:	e841 2300 	strex	r3, r2, [r1]
 80096da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80096dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1e1      	bne.n	80096a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	3314      	adds	r3, #20
 80096e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096ec:	e853 3f00 	ldrex	r3, [r3]
 80096f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80096f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	3314      	adds	r3, #20
 8009702:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009706:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009708:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800970c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800970e:	e841 2300 	strex	r3, r2, [r1]
 8009712:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009716:	2b00      	cmp	r3, #0
 8009718:	d1e3      	bne.n	80096e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2220      	movs	r2, #32
 800971e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	330c      	adds	r3, #12
 800972e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009732:	e853 3f00 	ldrex	r3, [r3]
 8009736:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800973a:	f023 0310 	bic.w	r3, r3, #16
 800973e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	330c      	adds	r3, #12
 8009748:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800974c:	65ba      	str	r2, [r7, #88]	; 0x58
 800974e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009750:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009752:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009754:	e841 2300 	strex	r3, r2, [r1]
 8009758:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800975a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1e3      	bne.n	8009728 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009764:	4618      	mov	r0, r3
 8009766:	f7f9 ff93 	bl	8003690 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009772:	b29b      	uxth	r3, r3
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	b29b      	uxth	r3, r3
 8009778:	4619      	mov	r1, r3
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f8b6 	bl	80098ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009780:	e099      	b.n	80098b6 <HAL_UART_IRQHandler+0x50e>
 8009782:	bf00      	nop
 8009784:	080099cb 	.word	0x080099cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009790:	b29b      	uxth	r3, r3
 8009792:	1ad3      	subs	r3, r2, r3
 8009794:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800979c:	b29b      	uxth	r3, r3
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f000 808b 	beq.w	80098ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80097a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f000 8086 	beq.w	80098ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	330c      	adds	r3, #12
 80097b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b8:	e853 3f00 	ldrex	r3, [r3]
 80097bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	330c      	adds	r3, #12
 80097ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80097d2:	647a      	str	r2, [r7, #68]	; 0x44
 80097d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097da:	e841 2300 	strex	r3, r2, [r1]
 80097de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1e3      	bne.n	80097ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3314      	adds	r3, #20
 80097ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f0:	e853 3f00 	ldrex	r3, [r3]
 80097f4:	623b      	str	r3, [r7, #32]
   return(result);
 80097f6:	6a3b      	ldr	r3, [r7, #32]
 80097f8:	f023 0301 	bic.w	r3, r3, #1
 80097fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	3314      	adds	r3, #20
 8009806:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800980a:	633a      	str	r2, [r7, #48]	; 0x30
 800980c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009812:	e841 2300 	strex	r3, r2, [r1]
 8009816:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1e3      	bne.n	80097e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2220      	movs	r2, #32
 8009822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	330c      	adds	r3, #12
 8009832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	e853 3f00 	ldrex	r3, [r3]
 800983a:	60fb      	str	r3, [r7, #12]
   return(result);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f023 0310 	bic.w	r3, r3, #16
 8009842:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	330c      	adds	r3, #12
 800984c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009850:	61fa      	str	r2, [r7, #28]
 8009852:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009854:	69b9      	ldr	r1, [r7, #24]
 8009856:	69fa      	ldr	r2, [r7, #28]
 8009858:	e841 2300 	strex	r3, r2, [r1]
 800985c:	617b      	str	r3, [r7, #20]
   return(result);
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1e3      	bne.n	800982c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009864:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009868:	4619      	mov	r1, r3
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f83e 	bl	80098ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009870:	e023      	b.n	80098ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800987a:	2b00      	cmp	r3, #0
 800987c:	d009      	beq.n	8009892 <HAL_UART_IRQHandler+0x4ea>
 800987e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009886:	2b00      	cmp	r3, #0
 8009888:	d003      	beq.n	8009892 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f8b1 	bl	80099f2 <UART_Transmit_IT>
    return;
 8009890:	e014      	b.n	80098bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00e      	beq.n	80098bc <HAL_UART_IRQHandler+0x514>
 800989e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d008      	beq.n	80098bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f8f1 	bl	8009a92 <UART_EndTransmit_IT>
    return;
 80098b0:	e004      	b.n	80098bc <HAL_UART_IRQHandler+0x514>
    return;
 80098b2:	bf00      	nop
 80098b4:	e002      	b.n	80098bc <HAL_UART_IRQHandler+0x514>
      return;
 80098b6:	bf00      	nop
 80098b8:	e000      	b.n	80098bc <HAL_UART_IRQHandler+0x514>
      return;
 80098ba:	bf00      	nop
  }
}
 80098bc:	37e8      	adds	r7, #232	; 0xe8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop

080098c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80098e0:	bf00      	nop
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	460b      	mov	r3, r1
 80098f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80098f8:	bf00      	nop
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009904:	b480      	push	{r7}
 8009906:	b095      	sub	sp, #84	; 0x54
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	330c      	adds	r3, #12
 8009912:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009916:	e853 3f00 	ldrex	r3, [r3]
 800991a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800991c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	330c      	adds	r3, #12
 800992a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800992c:	643a      	str	r2, [r7, #64]	; 0x40
 800992e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009930:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009932:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009934:	e841 2300 	strex	r3, r2, [r1]
 8009938:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800993a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993c:	2b00      	cmp	r3, #0
 800993e:	d1e5      	bne.n	800990c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	3314      	adds	r3, #20
 8009946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009948:	6a3b      	ldr	r3, [r7, #32]
 800994a:	e853 3f00 	ldrex	r3, [r3]
 800994e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	f023 0301 	bic.w	r3, r3, #1
 8009956:	64bb      	str	r3, [r7, #72]	; 0x48
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	3314      	adds	r3, #20
 800995e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009960:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009962:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009968:	e841 2300 	strex	r3, r2, [r1]
 800996c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800996e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009970:	2b00      	cmp	r3, #0
 8009972:	d1e5      	bne.n	8009940 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009978:	2b01      	cmp	r3, #1
 800997a:	d119      	bne.n	80099b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	330c      	adds	r3, #12
 8009982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	e853 3f00 	ldrex	r3, [r3]
 800998a:	60bb      	str	r3, [r7, #8]
   return(result);
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	f023 0310 	bic.w	r3, r3, #16
 8009992:	647b      	str	r3, [r7, #68]	; 0x44
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	330c      	adds	r3, #12
 800999a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800999c:	61ba      	str	r2, [r7, #24]
 800999e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a0:	6979      	ldr	r1, [r7, #20]
 80099a2:	69ba      	ldr	r2, [r7, #24]
 80099a4:	e841 2300 	strex	r3, r2, [r1]
 80099a8:	613b      	str	r3, [r7, #16]
   return(result);
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1e5      	bne.n	800997c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2220      	movs	r2, #32
 80099b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80099be:	bf00      	nop
 80099c0:	3754      	adds	r7, #84	; 0x54
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b084      	sub	sp, #16
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2200      	movs	r2, #0
 80099e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f7ff ff77 	bl	80098d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099ea:	bf00      	nop
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80099f2:	b480      	push	{r7}
 80099f4:	b085      	sub	sp, #20
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	2b21      	cmp	r3, #33	; 0x21
 8009a04:	d13e      	bne.n	8009a84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a0e:	d114      	bne.n	8009a3a <UART_Transmit_IT+0x48>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d110      	bne.n	8009a3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a1b      	ldr	r3, [r3, #32]
 8009a1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	881b      	ldrh	r3, [r3, #0]
 8009a22:	461a      	mov	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a1b      	ldr	r3, [r3, #32]
 8009a32:	1c9a      	adds	r2, r3, #2
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	621a      	str	r2, [r3, #32]
 8009a38:	e008      	b.n	8009a4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a1b      	ldr	r3, [r3, #32]
 8009a3e:	1c59      	adds	r1, r3, #1
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	6211      	str	r1, [r2, #32]
 8009a44:	781a      	ldrb	r2, [r3, #0]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	3b01      	subs	r3, #1
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	4619      	mov	r1, r3
 8009a5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d10f      	bne.n	8009a80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68da      	ldr	r2, [r3, #12]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68da      	ldr	r2, [r3, #12]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009a80:	2300      	movs	r3, #0
 8009a82:	e000      	b.n	8009a86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009a84:	2302      	movs	r3, #2
  }
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3714      	adds	r7, #20
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b082      	sub	sp, #8
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68da      	ldr	r2, [r3, #12]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009aa8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2220      	movs	r2, #32
 8009aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7ff ff06 	bl	80098c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3708      	adds	r7, #8
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b08c      	sub	sp, #48	; 0x30
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	2b22      	cmp	r3, #34	; 0x22
 8009ad4:	f040 80ab 	bne.w	8009c2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ae0:	d117      	bne.n	8009b12 <UART_Receive_IT+0x50>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	691b      	ldr	r3, [r3, #16]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d113      	bne.n	8009b12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009aea:	2300      	movs	r3, #0
 8009aec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b0a:	1c9a      	adds	r2, r3, #2
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	629a      	str	r2, [r3, #40]	; 0x28
 8009b10:	e026      	b.n	8009b60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b24:	d007      	beq.n	8009b36 <UART_Receive_IT+0x74>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d10a      	bne.n	8009b44 <UART_Receive_IT+0x82>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d106      	bne.n	8009b44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	b2da      	uxtb	r2, r3
 8009b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b40:	701a      	strb	r2, [r3, #0]
 8009b42:	e008      	b.n	8009b56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b50:	b2da      	uxtb	r2, r3
 8009b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b5a:	1c5a      	adds	r2, r3, #1
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	3b01      	subs	r3, #1
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d15a      	bne.n	8009c2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68da      	ldr	r2, [r3, #12]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f022 0220 	bic.w	r2, r2, #32
 8009b82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68da      	ldr	r2, [r3, #12]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	695a      	ldr	r2, [r3, #20]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f022 0201 	bic.w	r2, r2, #1
 8009ba2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2220      	movs	r2, #32
 8009ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d135      	bne.n	8009c20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	330c      	adds	r3, #12
 8009bc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	e853 3f00 	ldrex	r3, [r3]
 8009bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	f023 0310 	bic.w	r3, r3, #16
 8009bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	330c      	adds	r3, #12
 8009bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bda:	623a      	str	r2, [r7, #32]
 8009bdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bde:	69f9      	ldr	r1, [r7, #28]
 8009be0:	6a3a      	ldr	r2, [r7, #32]
 8009be2:	e841 2300 	strex	r3, r2, [r1]
 8009be6:	61bb      	str	r3, [r7, #24]
   return(result);
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1e5      	bne.n	8009bba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f003 0310 	and.w	r3, r3, #16
 8009bf8:	2b10      	cmp	r3, #16
 8009bfa:	d10a      	bne.n	8009c12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	60fb      	str	r3, [r7, #12]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	60fb      	str	r3, [r7, #12]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	60fb      	str	r3, [r7, #12]
 8009c10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c16:	4619      	mov	r1, r3
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f7ff fe67 	bl	80098ec <HAL_UARTEx_RxEventCallback>
 8009c1e:	e002      	b.n	8009c26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7f7 faf3 	bl	800120c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009c26:	2300      	movs	r3, #0
 8009c28:	e002      	b.n	8009c30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	e000      	b.n	8009c30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009c2e:	2302      	movs	r3, #2
  }
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3730      	adds	r7, #48	; 0x30
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c3c:	b0c0      	sub	sp, #256	; 0x100
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c54:	68d9      	ldr	r1, [r3, #12]
 8009c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	ea40 0301 	orr.w	r3, r0, r1
 8009c60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c66:	689a      	ldr	r2, [r3, #8]
 8009c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c6c:	691b      	ldr	r3, [r3, #16]
 8009c6e:	431a      	orrs	r2, r3
 8009c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c74:	695b      	ldr	r3, [r3, #20]
 8009c76:	431a      	orrs	r2, r3
 8009c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c7c:	69db      	ldr	r3, [r3, #28]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009c90:	f021 010c 	bic.w	r1, r1, #12
 8009c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009c9e:	430b      	orrs	r3, r1
 8009ca0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	695b      	ldr	r3, [r3, #20]
 8009caa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cb2:	6999      	ldr	r1, [r3, #24]
 8009cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	ea40 0301 	orr.w	r3, r0, r1
 8009cbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	4b8f      	ldr	r3, [pc, #572]	; (8009f04 <UART_SetConfig+0x2cc>)
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d005      	beq.n	8009cd8 <UART_SetConfig+0xa0>
 8009ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	4b8d      	ldr	r3, [pc, #564]	; (8009f08 <UART_SetConfig+0x2d0>)
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d104      	bne.n	8009ce2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009cd8:	f7fc ff50 	bl	8006b7c <HAL_RCC_GetPCLK2Freq>
 8009cdc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009ce0:	e003      	b.n	8009cea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009ce2:	f7fc ff37 	bl	8006b54 <HAL_RCC_GetPCLK1Freq>
 8009ce6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cee:	69db      	ldr	r3, [r3, #28]
 8009cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cf4:	f040 810c 	bne.w	8009f10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009d02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009d06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009d0a:	4622      	mov	r2, r4
 8009d0c:	462b      	mov	r3, r5
 8009d0e:	1891      	adds	r1, r2, r2
 8009d10:	65b9      	str	r1, [r7, #88]	; 0x58
 8009d12:	415b      	adcs	r3, r3
 8009d14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009d1a:	4621      	mov	r1, r4
 8009d1c:	eb12 0801 	adds.w	r8, r2, r1
 8009d20:	4629      	mov	r1, r5
 8009d22:	eb43 0901 	adc.w	r9, r3, r1
 8009d26:	f04f 0200 	mov.w	r2, #0
 8009d2a:	f04f 0300 	mov.w	r3, #0
 8009d2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d3a:	4690      	mov	r8, r2
 8009d3c:	4699      	mov	r9, r3
 8009d3e:	4623      	mov	r3, r4
 8009d40:	eb18 0303 	adds.w	r3, r8, r3
 8009d44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009d48:	462b      	mov	r3, r5
 8009d4a:	eb49 0303 	adc.w	r3, r9, r3
 8009d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009d5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009d62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009d66:	460b      	mov	r3, r1
 8009d68:	18db      	adds	r3, r3, r3
 8009d6a:	653b      	str	r3, [r7, #80]	; 0x50
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	eb42 0303 	adc.w	r3, r2, r3
 8009d72:	657b      	str	r3, [r7, #84]	; 0x54
 8009d74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009d78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009d7c:	f7f6 ff34 	bl	8000be8 <__aeabi_uldivmod>
 8009d80:	4602      	mov	r2, r0
 8009d82:	460b      	mov	r3, r1
 8009d84:	4b61      	ldr	r3, [pc, #388]	; (8009f0c <UART_SetConfig+0x2d4>)
 8009d86:	fba3 2302 	umull	r2, r3, r3, r2
 8009d8a:	095b      	lsrs	r3, r3, #5
 8009d8c:	011c      	lsls	r4, r3, #4
 8009d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d92:	2200      	movs	r2, #0
 8009d94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009d9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009da0:	4642      	mov	r2, r8
 8009da2:	464b      	mov	r3, r9
 8009da4:	1891      	adds	r1, r2, r2
 8009da6:	64b9      	str	r1, [r7, #72]	; 0x48
 8009da8:	415b      	adcs	r3, r3
 8009daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009dac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009db0:	4641      	mov	r1, r8
 8009db2:	eb12 0a01 	adds.w	sl, r2, r1
 8009db6:	4649      	mov	r1, r9
 8009db8:	eb43 0b01 	adc.w	fp, r3, r1
 8009dbc:	f04f 0200 	mov.w	r2, #0
 8009dc0:	f04f 0300 	mov.w	r3, #0
 8009dc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009dc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009dcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009dd0:	4692      	mov	sl, r2
 8009dd2:	469b      	mov	fp, r3
 8009dd4:	4643      	mov	r3, r8
 8009dd6:	eb1a 0303 	adds.w	r3, sl, r3
 8009dda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009dde:	464b      	mov	r3, r9
 8009de0:	eb4b 0303 	adc.w	r3, fp, r3
 8009de4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009df4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009df8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	18db      	adds	r3, r3, r3
 8009e00:	643b      	str	r3, [r7, #64]	; 0x40
 8009e02:	4613      	mov	r3, r2
 8009e04:	eb42 0303 	adc.w	r3, r2, r3
 8009e08:	647b      	str	r3, [r7, #68]	; 0x44
 8009e0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009e0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009e12:	f7f6 fee9 	bl	8000be8 <__aeabi_uldivmod>
 8009e16:	4602      	mov	r2, r0
 8009e18:	460b      	mov	r3, r1
 8009e1a:	4611      	mov	r1, r2
 8009e1c:	4b3b      	ldr	r3, [pc, #236]	; (8009f0c <UART_SetConfig+0x2d4>)
 8009e1e:	fba3 2301 	umull	r2, r3, r3, r1
 8009e22:	095b      	lsrs	r3, r3, #5
 8009e24:	2264      	movs	r2, #100	; 0x64
 8009e26:	fb02 f303 	mul.w	r3, r2, r3
 8009e2a:	1acb      	subs	r3, r1, r3
 8009e2c:	00db      	lsls	r3, r3, #3
 8009e2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009e32:	4b36      	ldr	r3, [pc, #216]	; (8009f0c <UART_SetConfig+0x2d4>)
 8009e34:	fba3 2302 	umull	r2, r3, r3, r2
 8009e38:	095b      	lsrs	r3, r3, #5
 8009e3a:	005b      	lsls	r3, r3, #1
 8009e3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009e40:	441c      	add	r4, r3
 8009e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e46:	2200      	movs	r2, #0
 8009e48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009e50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009e54:	4642      	mov	r2, r8
 8009e56:	464b      	mov	r3, r9
 8009e58:	1891      	adds	r1, r2, r2
 8009e5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8009e5c:	415b      	adcs	r3, r3
 8009e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009e64:	4641      	mov	r1, r8
 8009e66:	1851      	adds	r1, r2, r1
 8009e68:	6339      	str	r1, [r7, #48]	; 0x30
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	414b      	adcs	r3, r1
 8009e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8009e70:	f04f 0200 	mov.w	r2, #0
 8009e74:	f04f 0300 	mov.w	r3, #0
 8009e78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009e7c:	4659      	mov	r1, fp
 8009e7e:	00cb      	lsls	r3, r1, #3
 8009e80:	4651      	mov	r1, sl
 8009e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e86:	4651      	mov	r1, sl
 8009e88:	00ca      	lsls	r2, r1, #3
 8009e8a:	4610      	mov	r0, r2
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	4603      	mov	r3, r0
 8009e90:	4642      	mov	r2, r8
 8009e92:	189b      	adds	r3, r3, r2
 8009e94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e98:	464b      	mov	r3, r9
 8009e9a:	460a      	mov	r2, r1
 8009e9c:	eb42 0303 	adc.w	r3, r2, r3
 8009ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009eb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009eb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009eb8:	460b      	mov	r3, r1
 8009eba:	18db      	adds	r3, r3, r3
 8009ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	eb42 0303 	adc.w	r3, r2, r3
 8009ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ec6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009eca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009ece:	f7f6 fe8b 	bl	8000be8 <__aeabi_uldivmod>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	4b0d      	ldr	r3, [pc, #52]	; (8009f0c <UART_SetConfig+0x2d4>)
 8009ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8009edc:	095b      	lsrs	r3, r3, #5
 8009ede:	2164      	movs	r1, #100	; 0x64
 8009ee0:	fb01 f303 	mul.w	r3, r1, r3
 8009ee4:	1ad3      	subs	r3, r2, r3
 8009ee6:	00db      	lsls	r3, r3, #3
 8009ee8:	3332      	adds	r3, #50	; 0x32
 8009eea:	4a08      	ldr	r2, [pc, #32]	; (8009f0c <UART_SetConfig+0x2d4>)
 8009eec:	fba2 2303 	umull	r2, r3, r2, r3
 8009ef0:	095b      	lsrs	r3, r3, #5
 8009ef2:	f003 0207 	and.w	r2, r3, #7
 8009ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4422      	add	r2, r4
 8009efe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009f00:	e105      	b.n	800a10e <UART_SetConfig+0x4d6>
 8009f02:	bf00      	nop
 8009f04:	40011000 	.word	0x40011000
 8009f08:	40011400 	.word	0x40011400
 8009f0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f14:	2200      	movs	r2, #0
 8009f16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009f1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009f1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009f22:	4642      	mov	r2, r8
 8009f24:	464b      	mov	r3, r9
 8009f26:	1891      	adds	r1, r2, r2
 8009f28:	6239      	str	r1, [r7, #32]
 8009f2a:	415b      	adcs	r3, r3
 8009f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8009f2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f32:	4641      	mov	r1, r8
 8009f34:	1854      	adds	r4, r2, r1
 8009f36:	4649      	mov	r1, r9
 8009f38:	eb43 0501 	adc.w	r5, r3, r1
 8009f3c:	f04f 0200 	mov.w	r2, #0
 8009f40:	f04f 0300 	mov.w	r3, #0
 8009f44:	00eb      	lsls	r3, r5, #3
 8009f46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f4a:	00e2      	lsls	r2, r4, #3
 8009f4c:	4614      	mov	r4, r2
 8009f4e:	461d      	mov	r5, r3
 8009f50:	4643      	mov	r3, r8
 8009f52:	18e3      	adds	r3, r4, r3
 8009f54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009f58:	464b      	mov	r3, r9
 8009f5a:	eb45 0303 	adc.w	r3, r5, r3
 8009f5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009f6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009f72:	f04f 0200 	mov.w	r2, #0
 8009f76:	f04f 0300 	mov.w	r3, #0
 8009f7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009f7e:	4629      	mov	r1, r5
 8009f80:	008b      	lsls	r3, r1, #2
 8009f82:	4621      	mov	r1, r4
 8009f84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f88:	4621      	mov	r1, r4
 8009f8a:	008a      	lsls	r2, r1, #2
 8009f8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009f90:	f7f6 fe2a 	bl	8000be8 <__aeabi_uldivmod>
 8009f94:	4602      	mov	r2, r0
 8009f96:	460b      	mov	r3, r1
 8009f98:	4b60      	ldr	r3, [pc, #384]	; (800a11c <UART_SetConfig+0x4e4>)
 8009f9a:	fba3 2302 	umull	r2, r3, r3, r2
 8009f9e:	095b      	lsrs	r3, r3, #5
 8009fa0:	011c      	lsls	r4, r3, #4
 8009fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009fac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009fb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009fb4:	4642      	mov	r2, r8
 8009fb6:	464b      	mov	r3, r9
 8009fb8:	1891      	adds	r1, r2, r2
 8009fba:	61b9      	str	r1, [r7, #24]
 8009fbc:	415b      	adcs	r3, r3
 8009fbe:	61fb      	str	r3, [r7, #28]
 8009fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009fc4:	4641      	mov	r1, r8
 8009fc6:	1851      	adds	r1, r2, r1
 8009fc8:	6139      	str	r1, [r7, #16]
 8009fca:	4649      	mov	r1, r9
 8009fcc:	414b      	adcs	r3, r1
 8009fce:	617b      	str	r3, [r7, #20]
 8009fd0:	f04f 0200 	mov.w	r2, #0
 8009fd4:	f04f 0300 	mov.w	r3, #0
 8009fd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009fdc:	4659      	mov	r1, fp
 8009fde:	00cb      	lsls	r3, r1, #3
 8009fe0:	4651      	mov	r1, sl
 8009fe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fe6:	4651      	mov	r1, sl
 8009fe8:	00ca      	lsls	r2, r1, #3
 8009fea:	4610      	mov	r0, r2
 8009fec:	4619      	mov	r1, r3
 8009fee:	4603      	mov	r3, r0
 8009ff0:	4642      	mov	r2, r8
 8009ff2:	189b      	adds	r3, r3, r2
 8009ff4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ff8:	464b      	mov	r3, r9
 8009ffa:	460a      	mov	r2, r1
 8009ffc:	eb42 0303 	adc.w	r3, r2, r3
 800a000:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a00e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a010:	f04f 0200 	mov.w	r2, #0
 800a014:	f04f 0300 	mov.w	r3, #0
 800a018:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a01c:	4649      	mov	r1, r9
 800a01e:	008b      	lsls	r3, r1, #2
 800a020:	4641      	mov	r1, r8
 800a022:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a026:	4641      	mov	r1, r8
 800a028:	008a      	lsls	r2, r1, #2
 800a02a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a02e:	f7f6 fddb 	bl	8000be8 <__aeabi_uldivmod>
 800a032:	4602      	mov	r2, r0
 800a034:	460b      	mov	r3, r1
 800a036:	4b39      	ldr	r3, [pc, #228]	; (800a11c <UART_SetConfig+0x4e4>)
 800a038:	fba3 1302 	umull	r1, r3, r3, r2
 800a03c:	095b      	lsrs	r3, r3, #5
 800a03e:	2164      	movs	r1, #100	; 0x64
 800a040:	fb01 f303 	mul.w	r3, r1, r3
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	011b      	lsls	r3, r3, #4
 800a048:	3332      	adds	r3, #50	; 0x32
 800a04a:	4a34      	ldr	r2, [pc, #208]	; (800a11c <UART_SetConfig+0x4e4>)
 800a04c:	fba2 2303 	umull	r2, r3, r2, r3
 800a050:	095b      	lsrs	r3, r3, #5
 800a052:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a056:	441c      	add	r4, r3
 800a058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a05c:	2200      	movs	r2, #0
 800a05e:	673b      	str	r3, [r7, #112]	; 0x70
 800a060:	677a      	str	r2, [r7, #116]	; 0x74
 800a062:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a066:	4642      	mov	r2, r8
 800a068:	464b      	mov	r3, r9
 800a06a:	1891      	adds	r1, r2, r2
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	415b      	adcs	r3, r3
 800a070:	60fb      	str	r3, [r7, #12]
 800a072:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a076:	4641      	mov	r1, r8
 800a078:	1851      	adds	r1, r2, r1
 800a07a:	6039      	str	r1, [r7, #0]
 800a07c:	4649      	mov	r1, r9
 800a07e:	414b      	adcs	r3, r1
 800a080:	607b      	str	r3, [r7, #4]
 800a082:	f04f 0200 	mov.w	r2, #0
 800a086:	f04f 0300 	mov.w	r3, #0
 800a08a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a08e:	4659      	mov	r1, fp
 800a090:	00cb      	lsls	r3, r1, #3
 800a092:	4651      	mov	r1, sl
 800a094:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a098:	4651      	mov	r1, sl
 800a09a:	00ca      	lsls	r2, r1, #3
 800a09c:	4610      	mov	r0, r2
 800a09e:	4619      	mov	r1, r3
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	4642      	mov	r2, r8
 800a0a4:	189b      	adds	r3, r3, r2
 800a0a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0a8:	464b      	mov	r3, r9
 800a0aa:	460a      	mov	r2, r1
 800a0ac:	eb42 0303 	adc.w	r3, r2, r3
 800a0b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a0b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	663b      	str	r3, [r7, #96]	; 0x60
 800a0bc:	667a      	str	r2, [r7, #100]	; 0x64
 800a0be:	f04f 0200 	mov.w	r2, #0
 800a0c2:	f04f 0300 	mov.w	r3, #0
 800a0c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a0ca:	4649      	mov	r1, r9
 800a0cc:	008b      	lsls	r3, r1, #2
 800a0ce:	4641      	mov	r1, r8
 800a0d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0d4:	4641      	mov	r1, r8
 800a0d6:	008a      	lsls	r2, r1, #2
 800a0d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a0dc:	f7f6 fd84 	bl	8000be8 <__aeabi_uldivmod>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	4b0d      	ldr	r3, [pc, #52]	; (800a11c <UART_SetConfig+0x4e4>)
 800a0e6:	fba3 1302 	umull	r1, r3, r3, r2
 800a0ea:	095b      	lsrs	r3, r3, #5
 800a0ec:	2164      	movs	r1, #100	; 0x64
 800a0ee:	fb01 f303 	mul.w	r3, r1, r3
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	011b      	lsls	r3, r3, #4
 800a0f6:	3332      	adds	r3, #50	; 0x32
 800a0f8:	4a08      	ldr	r2, [pc, #32]	; (800a11c <UART_SetConfig+0x4e4>)
 800a0fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a0fe:	095b      	lsrs	r3, r3, #5
 800a100:	f003 020f 	and.w	r2, r3, #15
 800a104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4422      	add	r2, r4
 800a10c:	609a      	str	r2, [r3, #8]
}
 800a10e:	bf00      	nop
 800a110:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a114:	46bd      	mov	sp, r7
 800a116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a11a:	bf00      	nop
 800a11c:	51eb851f 	.word	0x51eb851f

0800a120 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a120:	b084      	sub	sp, #16
 800a122:	b580      	push	{r7, lr}
 800a124:	b084      	sub	sp, #16
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
 800a12a:	f107 001c 	add.w	r0, r7, #28
 800a12e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a134:	2b01      	cmp	r3, #1
 800a136:	d122      	bne.n	800a17e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a13c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a14c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a162:	2b01      	cmp	r3, #1
 800a164:	d105      	bne.n	800a172 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f001 fbe8 	bl	800b948 <USB_CoreReset>
 800a178:	4603      	mov	r3, r0
 800a17a:	73fb      	strb	r3, [r7, #15]
 800a17c:	e01a      	b.n	800a1b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f001 fbdc 	bl	800b948 <USB_CoreReset>
 800a190:	4603      	mov	r3, r0
 800a192:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a196:	2b00      	cmp	r3, #0
 800a198:	d106      	bne.n	800a1a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a19e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	639a      	str	r2, [r3, #56]	; 0x38
 800a1a6:	e005      	b.n	800a1b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d10b      	bne.n	800a1d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	f043 0206 	orr.w	r2, r3, #6
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	f043 0220 	orr.w	r2, r3, #32
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a1d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1de:	b004      	add	sp, #16
 800a1e0:	4770      	bx	lr
	...

0800a1e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b087      	sub	sp, #28
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a1f2:	79fb      	ldrb	r3, [r7, #7]
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d165      	bne.n	800a2c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	4a41      	ldr	r2, [pc, #260]	; (800a300 <USB_SetTurnaroundTime+0x11c>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d906      	bls.n	800a20e <USB_SetTurnaroundTime+0x2a>
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	4a40      	ldr	r2, [pc, #256]	; (800a304 <USB_SetTurnaroundTime+0x120>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d202      	bcs.n	800a20e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a208:	230f      	movs	r3, #15
 800a20a:	617b      	str	r3, [r7, #20]
 800a20c:	e062      	b.n	800a2d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	4a3c      	ldr	r2, [pc, #240]	; (800a304 <USB_SetTurnaroundTime+0x120>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d306      	bcc.n	800a224 <USB_SetTurnaroundTime+0x40>
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	4a3b      	ldr	r2, [pc, #236]	; (800a308 <USB_SetTurnaroundTime+0x124>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d202      	bcs.n	800a224 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a21e:	230e      	movs	r3, #14
 800a220:	617b      	str	r3, [r7, #20]
 800a222:	e057      	b.n	800a2d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	4a38      	ldr	r2, [pc, #224]	; (800a308 <USB_SetTurnaroundTime+0x124>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d306      	bcc.n	800a23a <USB_SetTurnaroundTime+0x56>
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	4a37      	ldr	r2, [pc, #220]	; (800a30c <USB_SetTurnaroundTime+0x128>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d202      	bcs.n	800a23a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a234:	230d      	movs	r3, #13
 800a236:	617b      	str	r3, [r7, #20]
 800a238:	e04c      	b.n	800a2d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	4a33      	ldr	r2, [pc, #204]	; (800a30c <USB_SetTurnaroundTime+0x128>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d306      	bcc.n	800a250 <USB_SetTurnaroundTime+0x6c>
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	4a32      	ldr	r2, [pc, #200]	; (800a310 <USB_SetTurnaroundTime+0x12c>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d802      	bhi.n	800a250 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a24a:	230c      	movs	r3, #12
 800a24c:	617b      	str	r3, [r7, #20]
 800a24e:	e041      	b.n	800a2d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	4a2f      	ldr	r2, [pc, #188]	; (800a310 <USB_SetTurnaroundTime+0x12c>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d906      	bls.n	800a266 <USB_SetTurnaroundTime+0x82>
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	4a2e      	ldr	r2, [pc, #184]	; (800a314 <USB_SetTurnaroundTime+0x130>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d802      	bhi.n	800a266 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a260:	230b      	movs	r3, #11
 800a262:	617b      	str	r3, [r7, #20]
 800a264:	e036      	b.n	800a2d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	4a2a      	ldr	r2, [pc, #168]	; (800a314 <USB_SetTurnaroundTime+0x130>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d906      	bls.n	800a27c <USB_SetTurnaroundTime+0x98>
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	4a29      	ldr	r2, [pc, #164]	; (800a318 <USB_SetTurnaroundTime+0x134>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d802      	bhi.n	800a27c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a276:	230a      	movs	r3, #10
 800a278:	617b      	str	r3, [r7, #20]
 800a27a:	e02b      	b.n	800a2d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	4a26      	ldr	r2, [pc, #152]	; (800a318 <USB_SetTurnaroundTime+0x134>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d906      	bls.n	800a292 <USB_SetTurnaroundTime+0xae>
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	4a25      	ldr	r2, [pc, #148]	; (800a31c <USB_SetTurnaroundTime+0x138>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d202      	bcs.n	800a292 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a28c:	2309      	movs	r3, #9
 800a28e:	617b      	str	r3, [r7, #20]
 800a290:	e020      	b.n	800a2d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	4a21      	ldr	r2, [pc, #132]	; (800a31c <USB_SetTurnaroundTime+0x138>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d306      	bcc.n	800a2a8 <USB_SetTurnaroundTime+0xc4>
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	4a20      	ldr	r2, [pc, #128]	; (800a320 <USB_SetTurnaroundTime+0x13c>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d802      	bhi.n	800a2a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a2a2:	2308      	movs	r3, #8
 800a2a4:	617b      	str	r3, [r7, #20]
 800a2a6:	e015      	b.n	800a2d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	4a1d      	ldr	r2, [pc, #116]	; (800a320 <USB_SetTurnaroundTime+0x13c>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d906      	bls.n	800a2be <USB_SetTurnaroundTime+0xda>
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	4a1c      	ldr	r2, [pc, #112]	; (800a324 <USB_SetTurnaroundTime+0x140>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d202      	bcs.n	800a2be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a2b8:	2307      	movs	r3, #7
 800a2ba:	617b      	str	r3, [r7, #20]
 800a2bc:	e00a      	b.n	800a2d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a2be:	2306      	movs	r3, #6
 800a2c0:	617b      	str	r3, [r7, #20]
 800a2c2:	e007      	b.n	800a2d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a2c4:	79fb      	ldrb	r3, [r7, #7]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d102      	bne.n	800a2d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a2ca:	2309      	movs	r3, #9
 800a2cc:	617b      	str	r3, [r7, #20]
 800a2ce:	e001      	b.n	800a2d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a2d0:	2309      	movs	r3, #9
 800a2d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	68da      	ldr	r2, [r3, #12]
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	029b      	lsls	r3, r3, #10
 800a2e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a2ec:	431a      	orrs	r2, r3
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a2f2:	2300      	movs	r3, #0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	371c      	adds	r7, #28
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr
 800a300:	00d8acbf 	.word	0x00d8acbf
 800a304:	00e4e1c0 	.word	0x00e4e1c0
 800a308:	00f42400 	.word	0x00f42400
 800a30c:	01067380 	.word	0x01067380
 800a310:	011a499f 	.word	0x011a499f
 800a314:	01312cff 	.word	0x01312cff
 800a318:	014ca43f 	.word	0x014ca43f
 800a31c:	016e3600 	.word	0x016e3600
 800a320:	01a6ab1f 	.word	0x01a6ab1f
 800a324:	01e84800 	.word	0x01e84800

0800a328 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	f043 0201 	orr.w	r2, r3, #1
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	370c      	adds	r7, #12
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr

0800a34a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a34a:	b480      	push	{r7}
 800a34c:	b083      	sub	sp, #12
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	f023 0201 	bic.w	r2, r3, #1
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	460b      	mov	r3, r1
 800a376:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a378:	2300      	movs	r3, #0
 800a37a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a388:	78fb      	ldrb	r3, [r7, #3]
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d115      	bne.n	800a3ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a39a:	2001      	movs	r0, #1
 800a39c:	f7f8 fe00 	bl	8002fa0 <HAL_Delay>
      ms++;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f001 fa3f 	bl	800b82a <USB_GetMode>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d01e      	beq.n	800a3f0 <USB_SetCurrentMode+0x84>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2b31      	cmp	r3, #49	; 0x31
 800a3b6:	d9f0      	bls.n	800a39a <USB_SetCurrentMode+0x2e>
 800a3b8:	e01a      	b.n	800a3f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a3ba:	78fb      	ldrb	r3, [r7, #3]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d115      	bne.n	800a3ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a3cc:	2001      	movs	r0, #1
 800a3ce:	f7f8 fde7 	bl	8002fa0 <HAL_Delay>
      ms++;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f001 fa26 	bl	800b82a <USB_GetMode>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d005      	beq.n	800a3f0 <USB_SetCurrentMode+0x84>
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2b31      	cmp	r3, #49	; 0x31
 800a3e8:	d9f0      	bls.n	800a3cc <USB_SetCurrentMode+0x60>
 800a3ea:	e001      	b.n	800a3f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e005      	b.n	800a3fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2b32      	cmp	r3, #50	; 0x32
 800a3f4:	d101      	bne.n	800a3fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e000      	b.n	800a3fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a404:	b084      	sub	sp, #16
 800a406:	b580      	push	{r7, lr}
 800a408:	b086      	sub	sp, #24
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a412:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a416:	2300      	movs	r3, #0
 800a418:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a41e:	2300      	movs	r3, #0
 800a420:	613b      	str	r3, [r7, #16]
 800a422:	e009      	b.n	800a438 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	3340      	adds	r3, #64	; 0x40
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	4413      	add	r3, r2
 800a42e:	2200      	movs	r2, #0
 800a430:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	3301      	adds	r3, #1
 800a436:	613b      	str	r3, [r7, #16]
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	2b0e      	cmp	r3, #14
 800a43c:	d9f2      	bls.n	800a424 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a43e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a440:	2b00      	cmp	r3, #0
 800a442:	d11c      	bne.n	800a47e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a452:	f043 0302 	orr.w	r3, r3, #2
 800a456:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a45c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	601a      	str	r2, [r3, #0]
 800a47c:	e005      	b.n	800a48a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a482:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a490:	461a      	mov	r2, r3
 800a492:	2300      	movs	r3, #0
 800a494:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a49c:	4619      	mov	r1, r3
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	680b      	ldr	r3, [r1, #0]
 800a4a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d10c      	bne.n	800a4ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d104      	bne.n	800a4c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 f965 	bl	800a788 <USB_SetDevSpeed>
 800a4be:	e008      	b.n	800a4d2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a4c0:	2101      	movs	r1, #1
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 f960 	bl	800a788 <USB_SetDevSpeed>
 800a4c8:	e003      	b.n	800a4d2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a4ca:	2103      	movs	r1, #3
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 f95b 	bl	800a788 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a4d2:	2110      	movs	r1, #16
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 f8f3 	bl	800a6c0 <USB_FlushTxFifo>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d001      	beq.n	800a4e4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 f91f 	bl	800a728 <USB_FlushRxFifo>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d001      	beq.n	800a4f4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a506:	461a      	mov	r2, r3
 800a508:	2300      	movs	r3, #0
 800a50a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a512:	461a      	mov	r2, r3
 800a514:	2300      	movs	r3, #0
 800a516:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a518:	2300      	movs	r3, #0
 800a51a:	613b      	str	r3, [r7, #16]
 800a51c:	e043      	b.n	800a5a6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	015a      	lsls	r2, r3, #5
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	4413      	add	r3, r2
 800a526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a530:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a534:	d118      	bne.n	800a568 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d10a      	bne.n	800a552 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	015a      	lsls	r2, r3, #5
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	4413      	add	r3, r2
 800a544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a548:	461a      	mov	r2, r3
 800a54a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a54e:	6013      	str	r3, [r2, #0]
 800a550:	e013      	b.n	800a57a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	015a      	lsls	r2, r3, #5
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	4413      	add	r3, r2
 800a55a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a55e:	461a      	mov	r2, r3
 800a560:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a564:	6013      	str	r3, [r2, #0]
 800a566:	e008      	b.n	800a57a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	015a      	lsls	r2, r3, #5
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	4413      	add	r3, r2
 800a570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a574:	461a      	mov	r2, r3
 800a576:	2300      	movs	r3, #0
 800a578:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	015a      	lsls	r2, r3, #5
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	4413      	add	r3, r2
 800a582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a586:	461a      	mov	r2, r3
 800a588:	2300      	movs	r3, #0
 800a58a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	015a      	lsls	r2, r3, #5
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	4413      	add	r3, r2
 800a594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a598:	461a      	mov	r2, r3
 800a59a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a59e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	613b      	str	r3, [r7, #16]
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a8:	693a      	ldr	r2, [r7, #16]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d3b7      	bcc.n	800a51e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	613b      	str	r3, [r7, #16]
 800a5b2:	e043      	b.n	800a63c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	015a      	lsls	r2, r3, #5
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5ca:	d118      	bne.n	800a5fe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d10a      	bne.n	800a5e8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	015a      	lsls	r2, r3, #5
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	4413      	add	r3, r2
 800a5da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5de:	461a      	mov	r2, r3
 800a5e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a5e4:	6013      	str	r3, [r2, #0]
 800a5e6:	e013      	b.n	800a610 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	015a      	lsls	r2, r3, #5
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a5fa:	6013      	str	r3, [r2, #0]
 800a5fc:	e008      	b.n	800a610 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	015a      	lsls	r2, r3, #5
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	4413      	add	r3, r2
 800a606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a60a:	461a      	mov	r2, r3
 800a60c:	2300      	movs	r3, #0
 800a60e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	015a      	lsls	r2, r3, #5
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	4413      	add	r3, r2
 800a618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a61c:	461a      	mov	r2, r3
 800a61e:	2300      	movs	r3, #0
 800a620:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	015a      	lsls	r2, r3, #5
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	4413      	add	r3, r2
 800a62a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a62e:	461a      	mov	r2, r3
 800a630:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a634:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	3301      	adds	r3, #1
 800a63a:	613b      	str	r3, [r7, #16]
 800a63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63e:	693a      	ldr	r2, [r7, #16]
 800a640:	429a      	cmp	r2, r3
 800a642:	d3b7      	bcc.n	800a5b4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	68fa      	ldr	r2, [r7, #12]
 800a64e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a652:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a656:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a664:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d105      	bne.n	800a678 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	699b      	ldr	r3, [r3, #24]
 800a670:	f043 0210 	orr.w	r2, r3, #16
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	699a      	ldr	r2, [r3, #24]
 800a67c:	4b0f      	ldr	r3, [pc, #60]	; (800a6bc <USB_DevInit+0x2b8>)
 800a67e:	4313      	orrs	r3, r2
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a686:	2b00      	cmp	r3, #0
 800a688:	d005      	beq.n	800a696 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	699b      	ldr	r3, [r3, #24]
 800a68e:	f043 0208 	orr.w	r2, r3, #8
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d107      	bne.n	800a6ac <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6a4:	f043 0304 	orr.w	r3, r3, #4
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a6ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3718      	adds	r7, #24
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6b8:	b004      	add	sp, #16
 800a6ba:	4770      	bx	lr
 800a6bc:	803c3800 	.word	0x803c3800

0800a6c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	4a13      	ldr	r2, [pc, #76]	; (800a724 <USB_FlushTxFifo+0x64>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d901      	bls.n	800a6e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e01b      	b.n	800a718 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	daf2      	bge.n	800a6ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	019b      	lsls	r3, r3, #6
 800a6f0:	f043 0220 	orr.w	r2, r3, #32
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	4a08      	ldr	r2, [pc, #32]	; (800a724 <USB_FlushTxFifo+0x64>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d901      	bls.n	800a70a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a706:	2303      	movs	r3, #3
 800a708:	e006      	b.n	800a718 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	691b      	ldr	r3, [r3, #16]
 800a70e:	f003 0320 	and.w	r3, r3, #32
 800a712:	2b20      	cmp	r3, #32
 800a714:	d0f0      	beq.n	800a6f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr
 800a724:	00030d40 	.word	0x00030d40

0800a728 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a728:	b480      	push	{r7}
 800a72a:	b085      	sub	sp, #20
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a730:	2300      	movs	r3, #0
 800a732:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	3301      	adds	r3, #1
 800a738:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	4a11      	ldr	r2, [pc, #68]	; (800a784 <USB_FlushRxFifo+0x5c>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d901      	bls.n	800a746 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a742:	2303      	movs	r3, #3
 800a744:	e018      	b.n	800a778 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	daf2      	bge.n	800a734 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a74e:	2300      	movs	r3, #0
 800a750:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2210      	movs	r2, #16
 800a756:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	3301      	adds	r3, #1
 800a75c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	4a08      	ldr	r2, [pc, #32]	; (800a784 <USB_FlushRxFifo+0x5c>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d901      	bls.n	800a76a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a766:	2303      	movs	r3, #3
 800a768:	e006      	b.n	800a778 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	f003 0310 	and.w	r3, r3, #16
 800a772:	2b10      	cmp	r3, #16
 800a774:	d0f0      	beq.n	800a758 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3714      	adds	r7, #20
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr
 800a784:	00030d40 	.word	0x00030d40

0800a788 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	460b      	mov	r3, r1
 800a792:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	78fb      	ldrb	r3, [r7, #3]
 800a7a2:	68f9      	ldr	r1, [r7, #12]
 800a7a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3714      	adds	r7, #20
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr

0800a7ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a7ba:	b480      	push	{r7}
 800a7bc:	b087      	sub	sp, #28
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	f003 0306 	and.w	r3, r3, #6
 800a7d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d102      	bne.n	800a7e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	75fb      	strb	r3, [r7, #23]
 800a7de:	e00a      	b.n	800a7f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d002      	beq.n	800a7ec <USB_GetDevSpeed+0x32>
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2b06      	cmp	r3, #6
 800a7ea:	d102      	bne.n	800a7f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	75fb      	strb	r3, [r7, #23]
 800a7f0:	e001      	b.n	800a7f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a7f2:	230f      	movs	r3, #15
 800a7f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a7f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	371c      	adds	r7, #28
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	785b      	ldrb	r3, [r3, #1]
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d13a      	bne.n	800a896 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a826:	69da      	ldr	r2, [r3, #28]
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	f003 030f 	and.w	r3, r3, #15
 800a830:	2101      	movs	r1, #1
 800a832:	fa01 f303 	lsl.w	r3, r1, r3
 800a836:	b29b      	uxth	r3, r3
 800a838:	68f9      	ldr	r1, [r7, #12]
 800a83a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a83e:	4313      	orrs	r3, r2
 800a840:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	015a      	lsls	r2, r3, #5
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	4413      	add	r3, r2
 800a84a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a854:	2b00      	cmp	r3, #0
 800a856:	d155      	bne.n	800a904 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	015a      	lsls	r2, r3, #5
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	4413      	add	r3, r2
 800a860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	791b      	ldrb	r3, [r3, #4]
 800a872:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a874:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	059b      	lsls	r3, r3, #22
 800a87a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a87c:	4313      	orrs	r3, r2
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	0151      	lsls	r1, r2, #5
 800a882:	68fa      	ldr	r2, [r7, #12]
 800a884:	440a      	add	r2, r1
 800a886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a88a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a88e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a892:	6013      	str	r3, [r2, #0]
 800a894:	e036      	b.n	800a904 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a89c:	69da      	ldr	r2, [r3, #28]
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	f003 030f 	and.w	r3, r3, #15
 800a8a6:	2101      	movs	r1, #1
 800a8a8:	fa01 f303 	lsl.w	r3, r1, r3
 800a8ac:	041b      	lsls	r3, r3, #16
 800a8ae:	68f9      	ldr	r1, [r7, #12]
 800a8b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	015a      	lsls	r2, r3, #5
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	4413      	add	r3, r2
 800a8c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d11a      	bne.n	800a904 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	015a      	lsls	r2, r3, #5
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	791b      	ldrb	r3, [r3, #4]
 800a8e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a8ea:	430b      	orrs	r3, r1
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	68ba      	ldr	r2, [r7, #8]
 800a8f0:	0151      	lsls	r1, r2, #5
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	440a      	add	r2, r1
 800a8f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a902:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3714      	adds	r7, #20
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
	...

0800a914 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a914:	b480      	push	{r7}
 800a916:	b085      	sub	sp, #20
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	785b      	ldrb	r3, [r3, #1]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d161      	bne.n	800a9f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	015a      	lsls	r2, r3, #5
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	4413      	add	r3, r2
 800a938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a942:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a946:	d11f      	bne.n	800a988 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	015a      	lsls	r2, r3, #5
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	4413      	add	r3, r2
 800a950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	0151      	lsls	r1, r2, #5
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	440a      	add	r2, r1
 800a95e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a962:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a966:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	015a      	lsls	r2, r3, #5
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	4413      	add	r3, r2
 800a970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	68ba      	ldr	r2, [r7, #8]
 800a978:	0151      	lsls	r1, r2, #5
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	440a      	add	r2, r1
 800a97e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a982:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a986:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a98e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	f003 030f 	and.w	r3, r3, #15
 800a998:	2101      	movs	r1, #1
 800a99a:	fa01 f303 	lsl.w	r3, r1, r3
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	43db      	mvns	r3, r3
 800a9a2:	68f9      	ldr	r1, [r7, #12]
 800a9a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9b2:	69da      	ldr	r2, [r3, #28]
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	f003 030f 	and.w	r3, r3, #15
 800a9bc:	2101      	movs	r1, #1
 800a9be:	fa01 f303 	lsl.w	r3, r1, r3
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	43db      	mvns	r3, r3
 800a9c6:	68f9      	ldr	r1, [r7, #12]
 800a9c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	015a      	lsls	r2, r3, #5
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	4413      	add	r3, r2
 800a9d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	0159      	lsls	r1, r3, #5
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	440b      	add	r3, r1
 800a9e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	4b35      	ldr	r3, [pc, #212]	; (800aac4 <USB_DeactivateEndpoint+0x1b0>)
 800a9ee:	4013      	ands	r3, r2
 800a9f0:	600b      	str	r3, [r1, #0]
 800a9f2:	e060      	b.n	800aab6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	015a      	lsls	r2, r3, #5
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	4413      	add	r3, r2
 800a9fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa0a:	d11f      	bne.n	800aa4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	015a      	lsls	r2, r3, #5
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	4413      	add	r3, r2
 800aa14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	68ba      	ldr	r2, [r7, #8]
 800aa1c:	0151      	lsls	r1, r2, #5
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	440a      	add	r2, r1
 800aa22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aa2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	015a      	lsls	r2, r3, #5
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	4413      	add	r3, r2
 800aa34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	68ba      	ldr	r2, [r7, #8]
 800aa3c:	0151      	lsls	r1, r2, #5
 800aa3e:	68fa      	ldr	r2, [r7, #12]
 800aa40:	440a      	add	r2, r1
 800aa42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	f003 030f 	and.w	r3, r3, #15
 800aa5c:	2101      	movs	r1, #1
 800aa5e:	fa01 f303 	lsl.w	r3, r1, r3
 800aa62:	041b      	lsls	r3, r3, #16
 800aa64:	43db      	mvns	r3, r3
 800aa66:	68f9      	ldr	r1, [r7, #12]
 800aa68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa6c:	4013      	ands	r3, r2
 800aa6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa76:	69da      	ldr	r2, [r3, #28]
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	f003 030f 	and.w	r3, r3, #15
 800aa80:	2101      	movs	r1, #1
 800aa82:	fa01 f303 	lsl.w	r3, r1, r3
 800aa86:	041b      	lsls	r3, r3, #16
 800aa88:	43db      	mvns	r3, r3
 800aa8a:	68f9      	ldr	r1, [r7, #12]
 800aa8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa90:	4013      	ands	r3, r2
 800aa92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	015a      	lsls	r2, r3, #5
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	0159      	lsls	r1, r3, #5
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	440b      	add	r3, r1
 800aaaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaae:	4619      	mov	r1, r3
 800aab0:	4b05      	ldr	r3, [pc, #20]	; (800aac8 <USB_DeactivateEndpoint+0x1b4>)
 800aab2:	4013      	ands	r3, r2
 800aab4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3714      	adds	r7, #20
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr
 800aac4:	ec337800 	.word	0xec337800
 800aac8:	eff37800 	.word	0xeff37800

0800aacc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b08a      	sub	sp, #40	; 0x28
 800aad0:	af02      	add	r7, sp, #8
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	4613      	mov	r3, r2
 800aad8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	785b      	ldrb	r3, [r3, #1]
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	f040 815c 	bne.w	800ada6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d132      	bne.n	800ab5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	015a      	lsls	r2, r3, #5
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	4413      	add	r3, r2
 800aafe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	69ba      	ldr	r2, [r7, #24]
 800ab06:	0151      	lsls	r1, r2, #5
 800ab08:	69fa      	ldr	r2, [r7, #28]
 800ab0a:	440a      	add	r2, r1
 800ab0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ab14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	015a      	lsls	r2, r3, #5
 800ab1e:	69fb      	ldr	r3, [r7, #28]
 800ab20:	4413      	add	r3, r2
 800ab22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	69ba      	ldr	r2, [r7, #24]
 800ab2a:	0151      	lsls	r1, r2, #5
 800ab2c:	69fa      	ldr	r2, [r7, #28]
 800ab2e:	440a      	add	r2, r1
 800ab30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	015a      	lsls	r2, r3, #5
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	4413      	add	r3, r2
 800ab42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab46:	691b      	ldr	r3, [r3, #16]
 800ab48:	69ba      	ldr	r2, [r7, #24]
 800ab4a:	0151      	lsls	r1, r2, #5
 800ab4c:	69fa      	ldr	r2, [r7, #28]
 800ab4e:	440a      	add	r2, r1
 800ab50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab54:	0cdb      	lsrs	r3, r3, #19
 800ab56:	04db      	lsls	r3, r3, #19
 800ab58:	6113      	str	r3, [r2, #16]
 800ab5a:	e074      	b.n	800ac46 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	015a      	lsls	r2, r3, #5
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	4413      	add	r3, r2
 800ab64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	69ba      	ldr	r2, [r7, #24]
 800ab6c:	0151      	lsls	r1, r2, #5
 800ab6e:	69fa      	ldr	r2, [r7, #28]
 800ab70:	440a      	add	r2, r1
 800ab72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab76:	0cdb      	lsrs	r3, r3, #19
 800ab78:	04db      	lsls	r3, r3, #19
 800ab7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	015a      	lsls	r2, r3, #5
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	4413      	add	r3, r2
 800ab84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	69ba      	ldr	r2, [r7, #24]
 800ab8c:	0151      	lsls	r1, r2, #5
 800ab8e:	69fa      	ldr	r2, [r7, #28]
 800ab90:	440a      	add	r2, r1
 800ab92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ab9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	015a      	lsls	r2, r3, #5
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	4413      	add	r3, r2
 800aba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	6999      	ldr	r1, [r3, #24]
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	440b      	add	r3, r1
 800abb8:	1e59      	subs	r1, r3, #1
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	fbb1 f3f3 	udiv	r3, r1, r3
 800abc2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800abc4:	4b9d      	ldr	r3, [pc, #628]	; (800ae3c <USB_EPStartXfer+0x370>)
 800abc6:	400b      	ands	r3, r1
 800abc8:	69b9      	ldr	r1, [r7, #24]
 800abca:	0148      	lsls	r0, r1, #5
 800abcc:	69f9      	ldr	r1, [r7, #28]
 800abce:	4401      	add	r1, r0
 800abd0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800abd4:	4313      	orrs	r3, r2
 800abd6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	015a      	lsls	r2, r3, #5
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	4413      	add	r3, r2
 800abe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abe4:	691a      	ldr	r2, [r3, #16]
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	699b      	ldr	r3, [r3, #24]
 800abea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abee:	69b9      	ldr	r1, [r7, #24]
 800abf0:	0148      	lsls	r0, r1, #5
 800abf2:	69f9      	ldr	r1, [r7, #28]
 800abf4:	4401      	add	r1, r0
 800abf6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800abfa:	4313      	orrs	r3, r2
 800abfc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	791b      	ldrb	r3, [r3, #4]
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d11f      	bne.n	800ac46 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	015a      	lsls	r2, r3, #5
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	69ba      	ldr	r2, [r7, #24]
 800ac16:	0151      	lsls	r1, r2, #5
 800ac18:	69fa      	ldr	r2, [r7, #28]
 800ac1a:	440a      	add	r2, r1
 800ac1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac20:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ac24:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	015a      	lsls	r2, r3, #5
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac32:	691b      	ldr	r3, [r3, #16]
 800ac34:	69ba      	ldr	r2, [r7, #24]
 800ac36:	0151      	lsls	r1, r2, #5
 800ac38:	69fa      	ldr	r2, [r7, #28]
 800ac3a:	440a      	add	r2, r1
 800ac3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ac44:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ac46:	79fb      	ldrb	r3, [r7, #7]
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d14b      	bne.n	800ace4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	695b      	ldr	r3, [r3, #20]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d009      	beq.n	800ac68 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	015a      	lsls	r2, r3, #5
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac60:	461a      	mov	r2, r3
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	695b      	ldr	r3, [r3, #20]
 800ac66:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	791b      	ldrb	r3, [r3, #4]
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d128      	bne.n	800acc2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d110      	bne.n	800aca2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	015a      	lsls	r2, r3, #5
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	4413      	add	r3, r2
 800ac88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	69ba      	ldr	r2, [r7, #24]
 800ac90:	0151      	lsls	r1, r2, #5
 800ac92:	69fa      	ldr	r2, [r7, #28]
 800ac94:	440a      	add	r2, r1
 800ac96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ac9e:	6013      	str	r3, [r2, #0]
 800aca0:	e00f      	b.n	800acc2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	015a      	lsls	r2, r3, #5
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	4413      	add	r3, r2
 800acaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	69ba      	ldr	r2, [r7, #24]
 800acb2:	0151      	lsls	r1, r2, #5
 800acb4:	69fa      	ldr	r2, [r7, #28]
 800acb6:	440a      	add	r2, r1
 800acb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acc0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	015a      	lsls	r2, r3, #5
 800acc6:	69fb      	ldr	r3, [r7, #28]
 800acc8:	4413      	add	r3, r2
 800acca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	69ba      	ldr	r2, [r7, #24]
 800acd2:	0151      	lsls	r1, r2, #5
 800acd4:	69fa      	ldr	r2, [r7, #28]
 800acd6:	440a      	add	r2, r1
 800acd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acdc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ace0:	6013      	str	r3, [r2, #0]
 800ace2:	e133      	b.n	800af4c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	015a      	lsls	r2, r3, #5
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	4413      	add	r3, r2
 800acec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	69ba      	ldr	r2, [r7, #24]
 800acf4:	0151      	lsls	r1, r2, #5
 800acf6:	69fa      	ldr	r2, [r7, #28]
 800acf8:	440a      	add	r2, r1
 800acfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acfe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ad02:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	791b      	ldrb	r3, [r3, #4]
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d015      	beq.n	800ad38 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	699b      	ldr	r3, [r3, #24]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f000 811b 	beq.w	800af4c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	f003 030f 	and.w	r3, r3, #15
 800ad26:	2101      	movs	r1, #1
 800ad28:	fa01 f303 	lsl.w	r3, r1, r3
 800ad2c:	69f9      	ldr	r1, [r7, #28]
 800ad2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad32:	4313      	orrs	r3, r2
 800ad34:	634b      	str	r3, [r1, #52]	; 0x34
 800ad36:	e109      	b.n	800af4c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d110      	bne.n	800ad6a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	015a      	lsls	r2, r3, #5
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	4413      	add	r3, r2
 800ad50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	69ba      	ldr	r2, [r7, #24]
 800ad58:	0151      	lsls	r1, r2, #5
 800ad5a:	69fa      	ldr	r2, [r7, #28]
 800ad5c:	440a      	add	r2, r1
 800ad5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ad66:	6013      	str	r3, [r2, #0]
 800ad68:	e00f      	b.n	800ad8a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ad6a:	69bb      	ldr	r3, [r7, #24]
 800ad6c:	015a      	lsls	r2, r3, #5
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	4413      	add	r3, r2
 800ad72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	69ba      	ldr	r2, [r7, #24]
 800ad7a:	0151      	lsls	r1, r2, #5
 800ad7c:	69fa      	ldr	r2, [r7, #28]
 800ad7e:	440a      	add	r2, r1
 800ad80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad88:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	6919      	ldr	r1, [r3, #16]
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	781a      	ldrb	r2, [r3, #0]
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	699b      	ldr	r3, [r3, #24]
 800ad96:	b298      	uxth	r0, r3
 800ad98:	79fb      	ldrb	r3, [r7, #7]
 800ad9a:	9300      	str	r3, [sp, #0]
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f000 fade 	bl	800b360 <USB_WritePacket>
 800ada4:	e0d2      	b.n	800af4c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	015a      	lsls	r2, r3, #5
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	4413      	add	r3, r2
 800adae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adb2:	691b      	ldr	r3, [r3, #16]
 800adb4:	69ba      	ldr	r2, [r7, #24]
 800adb6:	0151      	lsls	r1, r2, #5
 800adb8:	69fa      	ldr	r2, [r7, #28]
 800adba:	440a      	add	r2, r1
 800adbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adc0:	0cdb      	lsrs	r3, r3, #19
 800adc2:	04db      	lsls	r3, r3, #19
 800adc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	015a      	lsls	r2, r3, #5
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	4413      	add	r3, r2
 800adce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800add2:	691b      	ldr	r3, [r3, #16]
 800add4:	69ba      	ldr	r2, [r7, #24]
 800add6:	0151      	lsls	r1, r2, #5
 800add8:	69fa      	ldr	r2, [r7, #28]
 800adda:	440a      	add	r2, r1
 800addc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ade0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ade4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ade8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	699b      	ldr	r3, [r3, #24]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d126      	bne.n	800ae40 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	015a      	lsls	r2, r3, #5
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	4413      	add	r3, r2
 800adfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adfe:	691a      	ldr	r2, [r3, #16]
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae08:	69b9      	ldr	r1, [r7, #24]
 800ae0a:	0148      	lsls	r0, r1, #5
 800ae0c:	69f9      	ldr	r1, [r7, #28]
 800ae0e:	4401      	add	r1, r0
 800ae10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ae14:	4313      	orrs	r3, r2
 800ae16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	015a      	lsls	r2, r3, #5
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	4413      	add	r3, r2
 800ae20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae24:	691b      	ldr	r3, [r3, #16]
 800ae26:	69ba      	ldr	r2, [r7, #24]
 800ae28:	0151      	lsls	r1, r2, #5
 800ae2a:	69fa      	ldr	r2, [r7, #28]
 800ae2c:	440a      	add	r2, r1
 800ae2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae36:	6113      	str	r3, [r2, #16]
 800ae38:	e03a      	b.n	800aeb0 <USB_EPStartXfer+0x3e4>
 800ae3a:	bf00      	nop
 800ae3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	699a      	ldr	r2, [r3, #24]
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	4413      	add	r3, r2
 800ae4a:	1e5a      	subs	r2, r3, #1
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae54:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	8afa      	ldrh	r2, [r7, #22]
 800ae5c:	fb03 f202 	mul.w	r2, r3, r2
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	015a      	lsls	r2, r3, #5
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	4413      	add	r3, r2
 800ae6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae70:	691a      	ldr	r2, [r3, #16]
 800ae72:	8afb      	ldrh	r3, [r7, #22]
 800ae74:	04d9      	lsls	r1, r3, #19
 800ae76:	4b38      	ldr	r3, [pc, #224]	; (800af58 <USB_EPStartXfer+0x48c>)
 800ae78:	400b      	ands	r3, r1
 800ae7a:	69b9      	ldr	r1, [r7, #24]
 800ae7c:	0148      	lsls	r0, r1, #5
 800ae7e:	69f9      	ldr	r1, [r7, #28]
 800ae80:	4401      	add	r1, r0
 800ae82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ae86:	4313      	orrs	r3, r2
 800ae88:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ae8a:	69bb      	ldr	r3, [r7, #24]
 800ae8c:	015a      	lsls	r2, r3, #5
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	4413      	add	r3, r2
 800ae92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae96:	691a      	ldr	r2, [r3, #16]
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	69db      	ldr	r3, [r3, #28]
 800ae9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aea0:	69b9      	ldr	r1, [r7, #24]
 800aea2:	0148      	lsls	r0, r1, #5
 800aea4:	69f9      	ldr	r1, [r7, #28]
 800aea6:	4401      	add	r1, r0
 800aea8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aeac:	4313      	orrs	r3, r2
 800aeae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aeb0:	79fb      	ldrb	r3, [r7, #7]
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d10d      	bne.n	800aed2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	691b      	ldr	r3, [r3, #16]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d009      	beq.n	800aed2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	6919      	ldr	r1, [r3, #16]
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	015a      	lsls	r2, r3, #5
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	4413      	add	r3, r2
 800aeca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aece:	460a      	mov	r2, r1
 800aed0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	791b      	ldrb	r3, [r3, #4]
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d128      	bne.n	800af2c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d110      	bne.n	800af0c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	015a      	lsls	r2, r3, #5
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	4413      	add	r3, r2
 800aef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	69ba      	ldr	r2, [r7, #24]
 800aefa:	0151      	lsls	r1, r2, #5
 800aefc:	69fa      	ldr	r2, [r7, #28]
 800aefe:	440a      	add	r2, r1
 800af00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af08:	6013      	str	r3, [r2, #0]
 800af0a:	e00f      	b.n	800af2c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	015a      	lsls	r2, r3, #5
 800af10:	69fb      	ldr	r3, [r7, #28]
 800af12:	4413      	add	r3, r2
 800af14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	69ba      	ldr	r2, [r7, #24]
 800af1c:	0151      	lsls	r1, r2, #5
 800af1e:	69fa      	ldr	r2, [r7, #28]
 800af20:	440a      	add	r2, r1
 800af22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af2a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800af2c:	69bb      	ldr	r3, [r7, #24]
 800af2e:	015a      	lsls	r2, r3, #5
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	4413      	add	r3, r2
 800af34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	69ba      	ldr	r2, [r7, #24]
 800af3c:	0151      	lsls	r1, r2, #5
 800af3e:	69fa      	ldr	r2, [r7, #28]
 800af40:	440a      	add	r2, r1
 800af42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3720      	adds	r7, #32
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	1ff80000 	.word	0x1ff80000

0800af5c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b087      	sub	sp, #28
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	4613      	mov	r3, r2
 800af68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	785b      	ldrb	r3, [r3, #1]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	f040 80ce 	bne.w	800b11a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d132      	bne.n	800afec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	015a      	lsls	r2, r3, #5
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	4413      	add	r3, r2
 800af8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	693a      	ldr	r2, [r7, #16]
 800af96:	0151      	lsls	r1, r2, #5
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	440a      	add	r2, r1
 800af9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afa0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800afa4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800afa8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	015a      	lsls	r2, r3, #5
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	4413      	add	r3, r2
 800afb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afb6:	691b      	ldr	r3, [r3, #16]
 800afb8:	693a      	ldr	r2, [r7, #16]
 800afba:	0151      	lsls	r1, r2, #5
 800afbc:	697a      	ldr	r2, [r7, #20]
 800afbe:	440a      	add	r2, r1
 800afc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800afc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	015a      	lsls	r2, r3, #5
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	4413      	add	r3, r2
 800afd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afd6:	691b      	ldr	r3, [r3, #16]
 800afd8:	693a      	ldr	r2, [r7, #16]
 800afda:	0151      	lsls	r1, r2, #5
 800afdc:	697a      	ldr	r2, [r7, #20]
 800afde:	440a      	add	r2, r1
 800afe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afe4:	0cdb      	lsrs	r3, r3, #19
 800afe6:	04db      	lsls	r3, r3, #19
 800afe8:	6113      	str	r3, [r2, #16]
 800afea:	e04e      	b.n	800b08a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	015a      	lsls	r2, r3, #5
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	4413      	add	r3, r2
 800aff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aff8:	691b      	ldr	r3, [r3, #16]
 800affa:	693a      	ldr	r2, [r7, #16]
 800affc:	0151      	lsls	r1, r2, #5
 800affe:	697a      	ldr	r2, [r7, #20]
 800b000:	440a      	add	r2, r1
 800b002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b006:	0cdb      	lsrs	r3, r3, #19
 800b008:	04db      	lsls	r3, r3, #19
 800b00a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	015a      	lsls	r2, r3, #5
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	4413      	add	r3, r2
 800b014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b018:	691b      	ldr	r3, [r3, #16]
 800b01a:	693a      	ldr	r2, [r7, #16]
 800b01c:	0151      	lsls	r1, r2, #5
 800b01e:	697a      	ldr	r2, [r7, #20]
 800b020:	440a      	add	r2, r1
 800b022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b026:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b02a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b02e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	699a      	ldr	r2, [r3, #24]
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d903      	bls.n	800b044 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	68da      	ldr	r2, [r3, #12]
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	015a      	lsls	r2, r3, #5
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	4413      	add	r3, r2
 800b04c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	693a      	ldr	r2, [r7, #16]
 800b054:	0151      	lsls	r1, r2, #5
 800b056:	697a      	ldr	r2, [r7, #20]
 800b058:	440a      	add	r2, r1
 800b05a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b05e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b062:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	015a      	lsls	r2, r3, #5
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	4413      	add	r3, r2
 800b06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b070:	691a      	ldr	r2, [r3, #16]
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	699b      	ldr	r3, [r3, #24]
 800b076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b07a:	6939      	ldr	r1, [r7, #16]
 800b07c:	0148      	lsls	r0, r1, #5
 800b07e:	6979      	ldr	r1, [r7, #20]
 800b080:	4401      	add	r1, r0
 800b082:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b086:	4313      	orrs	r3, r2
 800b088:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b08a:	79fb      	ldrb	r3, [r7, #7]
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d11e      	bne.n	800b0ce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	695b      	ldr	r3, [r3, #20]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d009      	beq.n	800b0ac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	015a      	lsls	r2, r3, #5
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	4413      	add	r3, r2
 800b0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	695b      	ldr	r3, [r3, #20]
 800b0aa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	015a      	lsls	r2, r3, #5
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	4413      	add	r3, r2
 800b0b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	693a      	ldr	r2, [r7, #16]
 800b0bc:	0151      	lsls	r1, r2, #5
 800b0be:	697a      	ldr	r2, [r7, #20]
 800b0c0:	440a      	add	r2, r1
 800b0c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0ca:	6013      	str	r3, [r2, #0]
 800b0cc:	e097      	b.n	800b1fe <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	015a      	lsls	r2, r3, #5
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	693a      	ldr	r2, [r7, #16]
 800b0de:	0151      	lsls	r1, r2, #5
 800b0e0:	697a      	ldr	r2, [r7, #20]
 800b0e2:	440a      	add	r2, r1
 800b0e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0ec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	699b      	ldr	r3, [r3, #24]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f000 8083 	beq.w	800b1fe <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	f003 030f 	and.w	r3, r3, #15
 800b108:	2101      	movs	r1, #1
 800b10a:	fa01 f303 	lsl.w	r3, r1, r3
 800b10e:	6979      	ldr	r1, [r7, #20]
 800b110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b114:	4313      	orrs	r3, r2
 800b116:	634b      	str	r3, [r1, #52]	; 0x34
 800b118:	e071      	b.n	800b1fe <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	015a      	lsls	r2, r3, #5
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	4413      	add	r3, r2
 800b122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b126:	691b      	ldr	r3, [r3, #16]
 800b128:	693a      	ldr	r2, [r7, #16]
 800b12a:	0151      	lsls	r1, r2, #5
 800b12c:	697a      	ldr	r2, [r7, #20]
 800b12e:	440a      	add	r2, r1
 800b130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b134:	0cdb      	lsrs	r3, r3, #19
 800b136:	04db      	lsls	r3, r3, #19
 800b138:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	015a      	lsls	r2, r3, #5
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	4413      	add	r3, r2
 800b142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	693a      	ldr	r2, [r7, #16]
 800b14a:	0151      	lsls	r1, r2, #5
 800b14c:	697a      	ldr	r2, [r7, #20]
 800b14e:	440a      	add	r2, r1
 800b150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b154:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b158:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b15c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	699b      	ldr	r3, [r3, #24]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d003      	beq.n	800b16e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	68da      	ldr	r2, [r3, #12]
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	68da      	ldr	r2, [r3, #12]
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	015a      	lsls	r2, r3, #5
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	4413      	add	r3, r2
 800b17e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	693a      	ldr	r2, [r7, #16]
 800b186:	0151      	lsls	r1, r2, #5
 800b188:	697a      	ldr	r2, [r7, #20]
 800b18a:	440a      	add	r2, r1
 800b18c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b190:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b194:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	015a      	lsls	r2, r3, #5
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	4413      	add	r3, r2
 800b19e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1a2:	691a      	ldr	r2, [r3, #16]
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	69db      	ldr	r3, [r3, #28]
 800b1a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1ac:	6939      	ldr	r1, [r7, #16]
 800b1ae:	0148      	lsls	r0, r1, #5
 800b1b0:	6979      	ldr	r1, [r7, #20]
 800b1b2:	4401      	add	r1, r0
 800b1b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b1bc:	79fb      	ldrb	r3, [r7, #7]
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d10d      	bne.n	800b1de <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	691b      	ldr	r3, [r3, #16]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d009      	beq.n	800b1de <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	6919      	ldr	r1, [r3, #16]
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	015a      	lsls	r2, r3, #5
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	4413      	add	r3, r2
 800b1d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1da:	460a      	mov	r2, r1
 800b1dc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	015a      	lsls	r2, r3, #5
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	693a      	ldr	r2, [r7, #16]
 800b1ee:	0151      	lsls	r1, r2, #5
 800b1f0:	697a      	ldr	r2, [r7, #20]
 800b1f2:	440a      	add	r2, r1
 800b1f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b1fe:	2300      	movs	r3, #0
}
 800b200:	4618      	mov	r0, r3
 800b202:	371c      	adds	r7, #28
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b087      	sub	sp, #28
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b216:	2300      	movs	r3, #0
 800b218:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b21a:	2300      	movs	r3, #0
 800b21c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	785b      	ldrb	r3, [r3, #1]
 800b226:	2b01      	cmp	r3, #1
 800b228:	d14a      	bne.n	800b2c0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	015a      	lsls	r2, r3, #5
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	4413      	add	r3, r2
 800b234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b23e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b242:	f040 8086 	bne.w	800b352 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	015a      	lsls	r2, r3, #5
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	4413      	add	r3, r2
 800b250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	683a      	ldr	r2, [r7, #0]
 800b258:	7812      	ldrb	r2, [r2, #0]
 800b25a:	0151      	lsls	r1, r2, #5
 800b25c:	693a      	ldr	r2, [r7, #16]
 800b25e:	440a      	add	r2, r1
 800b260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b264:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b268:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	015a      	lsls	r2, r3, #5
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	4413      	add	r3, r2
 800b274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	7812      	ldrb	r2, [r2, #0]
 800b27e:	0151      	lsls	r1, r2, #5
 800b280:	693a      	ldr	r2, [r7, #16]
 800b282:	440a      	add	r2, r1
 800b284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b288:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b28c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	3301      	adds	r3, #1
 800b292:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f242 7210 	movw	r2, #10000	; 0x2710
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d902      	bls.n	800b2a4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	75fb      	strb	r3, [r7, #23]
          break;
 800b2a2:	e056      	b.n	800b352 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	015a      	lsls	r2, r3, #5
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	4413      	add	r3, r2
 800b2ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2bc:	d0e7      	beq.n	800b28e <USB_EPStopXfer+0x82>
 800b2be:	e048      	b.n	800b352 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	015a      	lsls	r2, r3, #5
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2d8:	d13b      	bne.n	800b352 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	015a      	lsls	r2, r3, #5
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	683a      	ldr	r2, [r7, #0]
 800b2ec:	7812      	ldrb	r2, [r2, #0]
 800b2ee:	0151      	lsls	r1, r2, #5
 800b2f0:	693a      	ldr	r2, [r7, #16]
 800b2f2:	440a      	add	r2, r1
 800b2f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b2fc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	015a      	lsls	r2, r3, #5
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	4413      	add	r3, r2
 800b308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	7812      	ldrb	r2, [r2, #0]
 800b312:	0151      	lsls	r1, r2, #5
 800b314:	693a      	ldr	r2, [r7, #16]
 800b316:	440a      	add	r2, r1
 800b318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b31c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b320:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	3301      	adds	r3, #1
 800b326:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f242 7210 	movw	r2, #10000	; 0x2710
 800b32e:	4293      	cmp	r3, r2
 800b330:	d902      	bls.n	800b338 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	75fb      	strb	r3, [r7, #23]
          break;
 800b336:	e00c      	b.n	800b352 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	015a      	lsls	r2, r3, #5
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	4413      	add	r3, r2
 800b342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b34c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b350:	d0e7      	beq.n	800b322 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b352:	7dfb      	ldrb	r3, [r7, #23]
}
 800b354:	4618      	mov	r0, r3
 800b356:	371c      	adds	r7, #28
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b360:	b480      	push	{r7}
 800b362:	b089      	sub	sp, #36	; 0x24
 800b364:	af00      	add	r7, sp, #0
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	60b9      	str	r1, [r7, #8]
 800b36a:	4611      	mov	r1, r2
 800b36c:	461a      	mov	r2, r3
 800b36e:	460b      	mov	r3, r1
 800b370:	71fb      	strb	r3, [r7, #7]
 800b372:	4613      	mov	r3, r2
 800b374:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b37e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b382:	2b00      	cmp	r3, #0
 800b384:	d123      	bne.n	800b3ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b386:	88bb      	ldrh	r3, [r7, #4]
 800b388:	3303      	adds	r3, #3
 800b38a:	089b      	lsrs	r3, r3, #2
 800b38c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b38e:	2300      	movs	r3, #0
 800b390:	61bb      	str	r3, [r7, #24]
 800b392:	e018      	b.n	800b3c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b394:	79fb      	ldrb	r3, [r7, #7]
 800b396:	031a      	lsls	r2, r3, #12
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	4413      	add	r3, r2
 800b39c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b3a8:	69fb      	ldr	r3, [r7, #28]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b3b4:	69fb      	ldr	r3, [r7, #28]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	61bb      	str	r3, [r7, #24]
 800b3c6:	69ba      	ldr	r2, [r7, #24]
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d3e2      	bcc.n	800b394 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b3ce:	2300      	movs	r3, #0
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3724      	adds	r7, #36	; 0x24
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b08b      	sub	sp, #44	; 0x2c
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	4613      	mov	r3, r2
 800b3e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b3f2:	88fb      	ldrh	r3, [r7, #6]
 800b3f4:	089b      	lsrs	r3, r3, #2
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b3fa:	88fb      	ldrh	r3, [r7, #6]
 800b3fc:	f003 0303 	and.w	r3, r3, #3
 800b400:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b402:	2300      	movs	r3, #0
 800b404:	623b      	str	r3, [r7, #32]
 800b406:	e014      	b.n	800b432 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b408:	69bb      	ldr	r3, [r7, #24]
 800b40a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b412:	601a      	str	r2, [r3, #0]
    pDest++;
 800b414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b416:	3301      	adds	r3, #1
 800b418:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41c:	3301      	adds	r3, #1
 800b41e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b422:	3301      	adds	r3, #1
 800b424:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b428:	3301      	adds	r3, #1
 800b42a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b42c:	6a3b      	ldr	r3, [r7, #32]
 800b42e:	3301      	adds	r3, #1
 800b430:	623b      	str	r3, [r7, #32]
 800b432:	6a3a      	ldr	r2, [r7, #32]
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	429a      	cmp	r2, r3
 800b438:	d3e6      	bcc.n	800b408 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b43a:	8bfb      	ldrh	r3, [r7, #30]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d01e      	beq.n	800b47e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b440:	2300      	movs	r3, #0
 800b442:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b444:	69bb      	ldr	r3, [r7, #24]
 800b446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b44a:	461a      	mov	r2, r3
 800b44c:	f107 0310 	add.w	r3, r7, #16
 800b450:	6812      	ldr	r2, [r2, #0]
 800b452:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b454:	693a      	ldr	r2, [r7, #16]
 800b456:	6a3b      	ldr	r3, [r7, #32]
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	00db      	lsls	r3, r3, #3
 800b45c:	fa22 f303 	lsr.w	r3, r2, r3
 800b460:	b2da      	uxtb	r2, r3
 800b462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b464:	701a      	strb	r2, [r3, #0]
      i++;
 800b466:	6a3b      	ldr	r3, [r7, #32]
 800b468:	3301      	adds	r3, #1
 800b46a:	623b      	str	r3, [r7, #32]
      pDest++;
 800b46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46e:	3301      	adds	r3, #1
 800b470:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b472:	8bfb      	ldrh	r3, [r7, #30]
 800b474:	3b01      	subs	r3, #1
 800b476:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b478:	8bfb      	ldrh	r3, [r7, #30]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d1ea      	bne.n	800b454 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b480:	4618      	mov	r0, r3
 800b482:	372c      	adds	r7, #44	; 0x2c
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	785b      	ldrb	r3, [r3, #1]
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d12c      	bne.n	800b502 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	015a      	lsls	r2, r3, #5
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	db12      	blt.n	800b4e0 <USB_EPSetStall+0x54>
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d00f      	beq.n	800b4e0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	015a      	lsls	r2, r3, #5
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	68ba      	ldr	r2, [r7, #8]
 800b4d0:	0151      	lsls	r1, r2, #5
 800b4d2:	68fa      	ldr	r2, [r7, #12]
 800b4d4:	440a      	add	r2, r1
 800b4d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b4de:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	015a      	lsls	r2, r3, #5
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68ba      	ldr	r2, [r7, #8]
 800b4f0:	0151      	lsls	r1, r2, #5
 800b4f2:	68fa      	ldr	r2, [r7, #12]
 800b4f4:	440a      	add	r2, r1
 800b4f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b4fe:	6013      	str	r3, [r2, #0]
 800b500:	e02b      	b.n	800b55a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	015a      	lsls	r2, r3, #5
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	4413      	add	r3, r2
 800b50a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2b00      	cmp	r3, #0
 800b512:	db12      	blt.n	800b53a <USB_EPSetStall+0xae>
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00f      	beq.n	800b53a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	015a      	lsls	r2, r3, #5
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	4413      	add	r3, r2
 800b522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	68ba      	ldr	r2, [r7, #8]
 800b52a:	0151      	lsls	r1, r2, #5
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	440a      	add	r2, r1
 800b530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b534:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b538:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	015a      	lsls	r2, r3, #5
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	4413      	add	r3, r2
 800b542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68ba      	ldr	r2, [r7, #8]
 800b54a:	0151      	lsls	r1, r2, #5
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	440a      	add	r2, r1
 800b550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b554:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b558:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3714      	adds	r7, #20
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	785b      	ldrb	r3, [r3, #1]
 800b580:	2b01      	cmp	r3, #1
 800b582:	d128      	bne.n	800b5d6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	015a      	lsls	r2, r3, #5
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	4413      	add	r3, r2
 800b58c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	68ba      	ldr	r2, [r7, #8]
 800b594:	0151      	lsls	r1, r2, #5
 800b596:	68fa      	ldr	r2, [r7, #12]
 800b598:	440a      	add	r2, r1
 800b59a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b59e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b5a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	791b      	ldrb	r3, [r3, #4]
 800b5a8:	2b03      	cmp	r3, #3
 800b5aa:	d003      	beq.n	800b5b4 <USB_EPClearStall+0x4c>
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	791b      	ldrb	r3, [r3, #4]
 800b5b0:	2b02      	cmp	r3, #2
 800b5b2:	d138      	bne.n	800b626 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	015a      	lsls	r2, r3, #5
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	68ba      	ldr	r2, [r7, #8]
 800b5c4:	0151      	lsls	r1, r2, #5
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	440a      	add	r2, r1
 800b5ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5d2:	6013      	str	r3, [r2, #0]
 800b5d4:	e027      	b.n	800b626 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	015a      	lsls	r2, r3, #5
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	4413      	add	r3, r2
 800b5de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	68ba      	ldr	r2, [r7, #8]
 800b5e6:	0151      	lsls	r1, r2, #5
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	440a      	add	r2, r1
 800b5ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b5f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	791b      	ldrb	r3, [r3, #4]
 800b5fa:	2b03      	cmp	r3, #3
 800b5fc:	d003      	beq.n	800b606 <USB_EPClearStall+0x9e>
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	791b      	ldrb	r3, [r3, #4]
 800b602:	2b02      	cmp	r3, #2
 800b604:	d10f      	bne.n	800b626 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	015a      	lsls	r2, r3, #5
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	4413      	add	r3, r2
 800b60e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	68ba      	ldr	r2, [r7, #8]
 800b616:	0151      	lsls	r1, r2, #5
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	440a      	add	r2, r1
 800b61c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b624:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b626:	2300      	movs	r3, #0
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3714      	adds	r7, #20
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr

0800b634 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b634:	b480      	push	{r7}
 800b636:	b085      	sub	sp, #20
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	460b      	mov	r3, r1
 800b63e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b652:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b656:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	78fb      	ldrb	r3, [r7, #3]
 800b662:	011b      	lsls	r3, r3, #4
 800b664:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b668:	68f9      	ldr	r1, [r7, #12]
 800b66a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b66e:	4313      	orrs	r3, r2
 800b670:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b672:	2300      	movs	r3, #0
}
 800b674:	4618      	mov	r0, r3
 800b676:	3714      	adds	r7, #20
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b680:	b480      	push	{r7}
 800b682:	b085      	sub	sp, #20
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b69a:	f023 0303 	bic.w	r3, r3, #3
 800b69e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6ae:	f023 0302 	bic.w	r3, r3, #2
 800b6b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3714      	adds	r7, #20
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr

0800b6c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b6c2:	b480      	push	{r7}
 800b6c4:	b085      	sub	sp, #20
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	68fa      	ldr	r2, [r7, #12]
 800b6d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b6dc:	f023 0303 	bic.w	r3, r3, #3
 800b6e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	68fa      	ldr	r2, [r7, #12]
 800b6ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6f0:	f043 0302 	orr.w	r3, r3, #2
 800b6f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3714      	adds	r7, #20
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b704:	b480      	push	{r7}
 800b706:	b085      	sub	sp, #20
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	695b      	ldr	r3, [r3, #20]
 800b710:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	699b      	ldr	r3, [r3, #24]
 800b716:	68fa      	ldr	r2, [r7, #12]
 800b718:	4013      	ands	r3, r2
 800b71a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b71c:	68fb      	ldr	r3, [r7, #12]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3714      	adds	r7, #20
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr

0800b72a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b72a:	b480      	push	{r7}
 800b72c:	b085      	sub	sp, #20
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b73c:	699b      	ldr	r3, [r3, #24]
 800b73e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b746:	69db      	ldr	r3, [r3, #28]
 800b748:	68ba      	ldr	r2, [r7, #8]
 800b74a:	4013      	ands	r3, r2
 800b74c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	0c1b      	lsrs	r3, r3, #16
}
 800b752:	4618      	mov	r0, r3
 800b754:	3714      	adds	r7, #20
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr

0800b75e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b75e:	b480      	push	{r7}
 800b760:	b085      	sub	sp, #20
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b770:	699b      	ldr	r3, [r3, #24]
 800b772:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b77a:	69db      	ldr	r3, [r3, #28]
 800b77c:	68ba      	ldr	r2, [r7, #8]
 800b77e:	4013      	ands	r3, r2
 800b780:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	b29b      	uxth	r3, r3
}
 800b786:	4618      	mov	r0, r3
 800b788:	3714      	adds	r7, #20
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr

0800b792 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b792:	b480      	push	{r7}
 800b794:	b085      	sub	sp, #20
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
 800b79a:	460b      	mov	r3, r1
 800b79c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b7a2:	78fb      	ldrb	r3, [r7, #3]
 800b7a4:	015a      	lsls	r2, r3, #5
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7b8:	695b      	ldr	r3, [r3, #20]
 800b7ba:	68ba      	ldr	r2, [r7, #8]
 800b7bc:	4013      	ands	r3, r2
 800b7be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b7c0:	68bb      	ldr	r3, [r7, #8]
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3714      	adds	r7, #20
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr

0800b7ce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b7ce:	b480      	push	{r7}
 800b7d0:	b087      	sub	sp, #28
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7e4:	691b      	ldr	r3, [r3, #16]
 800b7e6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7f0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b7f2:	78fb      	ldrb	r3, [r7, #3]
 800b7f4:	f003 030f 	and.w	r3, r3, #15
 800b7f8:	68fa      	ldr	r2, [r7, #12]
 800b7fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b7fe:	01db      	lsls	r3, r3, #7
 800b800:	b2db      	uxtb	r3, r3
 800b802:	693a      	ldr	r2, [r7, #16]
 800b804:	4313      	orrs	r3, r2
 800b806:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b808:	78fb      	ldrb	r3, [r7, #3]
 800b80a:	015a      	lsls	r2, r3, #5
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	4413      	add	r3, r2
 800b810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	693a      	ldr	r2, [r7, #16]
 800b818:	4013      	ands	r3, r2
 800b81a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b81c:	68bb      	ldr	r3, [r7, #8]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	371c      	adds	r7, #28
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr

0800b82a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b82a:	b480      	push	{r7}
 800b82c:	b083      	sub	sp, #12
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	695b      	ldr	r3, [r3, #20]
 800b836:	f003 0301 	and.w	r3, r3, #1
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	370c      	adds	r7, #12
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr

0800b846 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b846:	b480      	push	{r7}
 800b848:	b085      	sub	sp, #20
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b860:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b864:	f023 0307 	bic.w	r3, r3, #7
 800b868:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	68fa      	ldr	r2, [r7, #12]
 800b874:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b87c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	3714      	adds	r7, #20
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b087      	sub	sp, #28
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	460b      	mov	r3, r1
 800b896:	607a      	str	r2, [r7, #4]
 800b898:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	333c      	adds	r3, #60	; 0x3c
 800b8a2:	3304      	adds	r3, #4
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	4a26      	ldr	r2, [pc, #152]	; (800b944 <USB_EP0_OutStart+0xb8>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d90a      	bls.n	800b8c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b8bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b8c0:	d101      	bne.n	800b8c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	e037      	b.n	800b936 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	697a      	ldr	r2, [r7, #20]
 800b8dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b8e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8ec:	691b      	ldr	r3, [r3, #16]
 800b8ee:	697a      	ldr	r2, [r7, #20]
 800b8f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8f4:	f043 0318 	orr.w	r3, r3, #24
 800b8f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b900:	691b      	ldr	r3, [r3, #16]
 800b902:	697a      	ldr	r2, [r7, #20]
 800b904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b908:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b90c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b90e:	7afb      	ldrb	r3, [r7, #11]
 800b910:	2b01      	cmp	r3, #1
 800b912:	d10f      	bne.n	800b934 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b91a:	461a      	mov	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	697a      	ldr	r2, [r7, #20]
 800b92a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b92e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b932:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b934:	2300      	movs	r3, #0
}
 800b936:	4618      	mov	r0, r3
 800b938:	371c      	adds	r7, #28
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	4f54300a 	.word	0x4f54300a

0800b948 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b948:	b480      	push	{r7}
 800b94a:	b085      	sub	sp, #20
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b950:	2300      	movs	r3, #0
 800b952:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	3301      	adds	r3, #1
 800b958:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	4a13      	ldr	r2, [pc, #76]	; (800b9ac <USB_CoreReset+0x64>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d901      	bls.n	800b966 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b962:	2303      	movs	r3, #3
 800b964:	e01b      	b.n	800b99e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	691b      	ldr	r3, [r3, #16]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	daf2      	bge.n	800b954 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b96e:	2300      	movs	r3, #0
 800b970:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	f043 0201 	orr.w	r2, r3, #1
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	3301      	adds	r3, #1
 800b982:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	4a09      	ldr	r2, [pc, #36]	; (800b9ac <USB_CoreReset+0x64>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d901      	bls.n	800b990 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b98c:	2303      	movs	r3, #3
 800b98e:	e006      	b.n	800b99e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	691b      	ldr	r3, [r3, #16]
 800b994:	f003 0301 	and.w	r3, r3, #1
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d0f0      	beq.n	800b97e <USB_CoreReset+0x36>

  return HAL_OK;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3714      	adds	r7, #20
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr
 800b9aa:	bf00      	nop
 800b9ac:	00030d40 	.word	0x00030d40

0800b9b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b9b4:	4904      	ldr	r1, [pc, #16]	; (800b9c8 <MX_FATFS_Init+0x18>)
 800b9b6:	4805      	ldr	r0, [pc, #20]	; (800b9cc <MX_FATFS_Init+0x1c>)
 800b9b8:	f002 f8a2 	bl	800db00 <FATFS_LinkDriver>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	461a      	mov	r2, r3
 800b9c0:	4b03      	ldr	r3, [pc, #12]	; (800b9d0 <MX_FATFS_Init+0x20>)
 800b9c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b9c4:	bf00      	nop
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	20000668 	.word	0x20000668
 800b9cc:	2000000c 	.word	0x2000000c
 800b9d0:	20000664 	.word	0x20000664

0800b9d4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	4603      	mov	r3, r0
 800b9dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800b9de:	4b06      	ldr	r3, [pc, #24]	; (800b9f8 <USER_initialize+0x24>)
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b9e4:	4b04      	ldr	r3, [pc, #16]	; (800b9f8 <USER_initialize+0x24>)
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	370c      	adds	r7, #12
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	20000009 	.word	0x20000009

0800b9fc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	4603      	mov	r3, r0
 800ba04:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800ba06:	4b06      	ldr	r3, [pc, #24]	; (800ba20 <USER_status+0x24>)
 800ba08:	2201      	movs	r2, #1
 800ba0a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800ba0c:	4b04      	ldr	r3, [pc, #16]	; (800ba20 <USER_status+0x24>)
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	370c      	adds	r7, #12
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	20000009 	.word	0x20000009

0800ba24 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b085      	sub	sp, #20
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60b9      	str	r1, [r7, #8]
 800ba2c:	607a      	str	r2, [r7, #4]
 800ba2e:	603b      	str	r3, [r7, #0]
 800ba30:	4603      	mov	r3, r0
 800ba32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800ba34:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3714      	adds	r7, #20
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr

0800ba42 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ba42:	b480      	push	{r7}
 800ba44:	b085      	sub	sp, #20
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	607a      	str	r2, [r7, #4]
 800ba4c:	603b      	str	r3, [r7, #0]
 800ba4e:	4603      	mov	r3, r0
 800ba50:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800ba52:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3714      	adds	r7, #20
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5e:	4770      	bx	lr

0800ba60 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	4603      	mov	r3, r0
 800ba68:	603a      	str	r2, [r7, #0]
 800ba6a:	71fb      	strb	r3, [r7, #7]
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800ba70:	2301      	movs	r3, #1
 800ba72:	73fb      	strb	r3, [r7, #15]
    return res;
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3714      	adds	r7, #20
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr
	...

0800ba84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ba90:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ba94:	f006 fa1e 	bl	8011ed4 <USBD_static_malloc>
 800ba98:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d109      	bne.n	800bab4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	32b0      	adds	r2, #176	; 0xb0
 800baaa:	2100      	movs	r1, #0
 800baac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bab0:	2302      	movs	r3, #2
 800bab2:	e0d4      	b.n	800bc5e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bab4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800bab8:	2100      	movs	r1, #0
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	f006 fb84 	bl	80121c8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	32b0      	adds	r2, #176	; 0xb0
 800baca:	68f9      	ldr	r1, [r7, #12]
 800bacc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	32b0      	adds	r2, #176	; 0xb0
 800bada:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	7c1b      	ldrb	r3, [r3, #16]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d138      	bne.n	800bb5e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800baec:	4b5e      	ldr	r3, [pc, #376]	; (800bc68 <USBD_CDC_Init+0x1e4>)
 800baee:	7819      	ldrb	r1, [r3, #0]
 800baf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800baf4:	2202      	movs	r2, #2
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f006 f87b 	bl	8011bf2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bafc:	4b5a      	ldr	r3, [pc, #360]	; (800bc68 <USBD_CDC_Init+0x1e4>)
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	f003 020f 	and.w	r2, r3, #15
 800bb04:	6879      	ldr	r1, [r7, #4]
 800bb06:	4613      	mov	r3, r2
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	4413      	add	r3, r2
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	440b      	add	r3, r1
 800bb10:	3324      	adds	r3, #36	; 0x24
 800bb12:	2201      	movs	r2, #1
 800bb14:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bb16:	4b55      	ldr	r3, [pc, #340]	; (800bc6c <USBD_CDC_Init+0x1e8>)
 800bb18:	7819      	ldrb	r1, [r3, #0]
 800bb1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb1e:	2202      	movs	r2, #2
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f006 f866 	bl	8011bf2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bb26:	4b51      	ldr	r3, [pc, #324]	; (800bc6c <USBD_CDC_Init+0x1e8>)
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	f003 020f 	and.w	r2, r3, #15
 800bb2e:	6879      	ldr	r1, [r7, #4]
 800bb30:	4613      	mov	r3, r2
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	4413      	add	r3, r2
 800bb36:	009b      	lsls	r3, r3, #2
 800bb38:	440b      	add	r3, r1
 800bb3a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bb3e:	2201      	movs	r2, #1
 800bb40:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bb42:	4b4b      	ldr	r3, [pc, #300]	; (800bc70 <USBD_CDC_Init+0x1ec>)
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	f003 020f 	and.w	r2, r3, #15
 800bb4a:	6879      	ldr	r1, [r7, #4]
 800bb4c:	4613      	mov	r3, r2
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	4413      	add	r3, r2
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	440b      	add	r3, r1
 800bb56:	3326      	adds	r3, #38	; 0x26
 800bb58:	2210      	movs	r2, #16
 800bb5a:	801a      	strh	r2, [r3, #0]
 800bb5c:	e035      	b.n	800bbca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bb5e:	4b42      	ldr	r3, [pc, #264]	; (800bc68 <USBD_CDC_Init+0x1e4>)
 800bb60:	7819      	ldrb	r1, [r3, #0]
 800bb62:	2340      	movs	r3, #64	; 0x40
 800bb64:	2202      	movs	r2, #2
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f006 f843 	bl	8011bf2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bb6c:	4b3e      	ldr	r3, [pc, #248]	; (800bc68 <USBD_CDC_Init+0x1e4>)
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	f003 020f 	and.w	r2, r3, #15
 800bb74:	6879      	ldr	r1, [r7, #4]
 800bb76:	4613      	mov	r3, r2
 800bb78:	009b      	lsls	r3, r3, #2
 800bb7a:	4413      	add	r3, r2
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	440b      	add	r3, r1
 800bb80:	3324      	adds	r3, #36	; 0x24
 800bb82:	2201      	movs	r2, #1
 800bb84:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bb86:	4b39      	ldr	r3, [pc, #228]	; (800bc6c <USBD_CDC_Init+0x1e8>)
 800bb88:	7819      	ldrb	r1, [r3, #0]
 800bb8a:	2340      	movs	r3, #64	; 0x40
 800bb8c:	2202      	movs	r2, #2
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f006 f82f 	bl	8011bf2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bb94:	4b35      	ldr	r3, [pc, #212]	; (800bc6c <USBD_CDC_Init+0x1e8>)
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	f003 020f 	and.w	r2, r3, #15
 800bb9c:	6879      	ldr	r1, [r7, #4]
 800bb9e:	4613      	mov	r3, r2
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	4413      	add	r3, r2
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	440b      	add	r3, r1
 800bba8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bbac:	2201      	movs	r2, #1
 800bbae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bbb0:	4b2f      	ldr	r3, [pc, #188]	; (800bc70 <USBD_CDC_Init+0x1ec>)
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	f003 020f 	and.w	r2, r3, #15
 800bbb8:	6879      	ldr	r1, [r7, #4]
 800bbba:	4613      	mov	r3, r2
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	4413      	add	r3, r2
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	440b      	add	r3, r1
 800bbc4:	3326      	adds	r3, #38	; 0x26
 800bbc6:	2210      	movs	r2, #16
 800bbc8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bbca:	4b29      	ldr	r3, [pc, #164]	; (800bc70 <USBD_CDC_Init+0x1ec>)
 800bbcc:	7819      	ldrb	r1, [r3, #0]
 800bbce:	2308      	movs	r3, #8
 800bbd0:	2203      	movs	r2, #3
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f006 f80d 	bl	8011bf2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bbd8:	4b25      	ldr	r3, [pc, #148]	; (800bc70 <USBD_CDC_Init+0x1ec>)
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	f003 020f 	and.w	r2, r3, #15
 800bbe0:	6879      	ldr	r1, [r7, #4]
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	4413      	add	r3, r2
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	440b      	add	r3, r1
 800bbec:	3324      	adds	r3, #36	; 0x24
 800bbee:	2201      	movs	r2, #1
 800bbf0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	33b0      	adds	r3, #176	; 0xb0
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	4413      	add	r3, r2
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d101      	bne.n	800bc2c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bc28:	2302      	movs	r3, #2
 800bc2a:	e018      	b.n	800bc5e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	7c1b      	ldrb	r3, [r3, #16]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d10a      	bne.n	800bc4a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bc34:	4b0d      	ldr	r3, [pc, #52]	; (800bc6c <USBD_CDC_Init+0x1e8>)
 800bc36:	7819      	ldrb	r1, [r3, #0]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f006 f8c4 	bl	8011dd0 <USBD_LL_PrepareReceive>
 800bc48:	e008      	b.n	800bc5c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bc4a:	4b08      	ldr	r3, [pc, #32]	; (800bc6c <USBD_CDC_Init+0x1e8>)
 800bc4c:	7819      	ldrb	r1, [r3, #0]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc54:	2340      	movs	r3, #64	; 0x40
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f006 f8ba 	bl	8011dd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	200000a7 	.word	0x200000a7
 800bc6c:	200000a8 	.word	0x200000a8
 800bc70:	200000a9 	.word	0x200000a9

0800bc74 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bc80:	4b3a      	ldr	r3, [pc, #232]	; (800bd6c <USBD_CDC_DeInit+0xf8>)
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	4619      	mov	r1, r3
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f005 ffd9 	bl	8011c3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bc8c:	4b37      	ldr	r3, [pc, #220]	; (800bd6c <USBD_CDC_DeInit+0xf8>)
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	f003 020f 	and.w	r2, r3, #15
 800bc94:	6879      	ldr	r1, [r7, #4]
 800bc96:	4613      	mov	r3, r2
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	4413      	add	r3, r2
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	440b      	add	r3, r1
 800bca0:	3324      	adds	r3, #36	; 0x24
 800bca2:	2200      	movs	r2, #0
 800bca4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bca6:	4b32      	ldr	r3, [pc, #200]	; (800bd70 <USBD_CDC_DeInit+0xfc>)
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	4619      	mov	r1, r3
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f005 ffc6 	bl	8011c3e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bcb2:	4b2f      	ldr	r3, [pc, #188]	; (800bd70 <USBD_CDC_DeInit+0xfc>)
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	f003 020f 	and.w	r2, r3, #15
 800bcba:	6879      	ldr	r1, [r7, #4]
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	4413      	add	r3, r2
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	440b      	add	r3, r1
 800bcc6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bcca:	2200      	movs	r2, #0
 800bccc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bcce:	4b29      	ldr	r3, [pc, #164]	; (800bd74 <USBD_CDC_DeInit+0x100>)
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f005 ffb2 	bl	8011c3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bcda:	4b26      	ldr	r3, [pc, #152]	; (800bd74 <USBD_CDC_DeInit+0x100>)
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	f003 020f 	and.w	r2, r3, #15
 800bce2:	6879      	ldr	r1, [r7, #4]
 800bce4:	4613      	mov	r3, r2
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	4413      	add	r3, r2
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	440b      	add	r3, r1
 800bcee:	3324      	adds	r3, #36	; 0x24
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bcf4:	4b1f      	ldr	r3, [pc, #124]	; (800bd74 <USBD_CDC_DeInit+0x100>)
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	f003 020f 	and.w	r2, r3, #15
 800bcfc:	6879      	ldr	r1, [r7, #4]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	4413      	add	r3, r2
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	440b      	add	r3, r1
 800bd08:	3326      	adds	r3, #38	; 0x26
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	32b0      	adds	r2, #176	; 0xb0
 800bd18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d01f      	beq.n	800bd60 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	33b0      	adds	r3, #176	; 0xb0
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	4413      	add	r3, r2
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	32b0      	adds	r2, #176	; 0xb0
 800bd3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd42:	4618      	mov	r0, r3
 800bd44:	f006 f8d4 	bl	8011ef0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	32b0      	adds	r2, #176	; 0xb0
 800bd52:	2100      	movs	r1, #0
 800bd54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bd60:	2300      	movs	r3, #0
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3708      	adds	r7, #8
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	200000a7 	.word	0x200000a7
 800bd70:	200000a8 	.word	0x200000a8
 800bd74:	200000a9 	.word	0x200000a9

0800bd78 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b086      	sub	sp, #24
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	32b0      	adds	r2, #176	; 0xb0
 800bd8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd90:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bd92:	2300      	movs	r3, #0
 800bd94:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bd96:	2300      	movs	r3, #0
 800bd98:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d101      	bne.n	800bda8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bda4:	2303      	movs	r3, #3
 800bda6:	e0bf      	b.n	800bf28 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d050      	beq.n	800be56 <USBD_CDC_Setup+0xde>
 800bdb4:	2b20      	cmp	r3, #32
 800bdb6:	f040 80af 	bne.w	800bf18 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	88db      	ldrh	r3, [r3, #6]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d03a      	beq.n	800be38 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	b25b      	sxtb	r3, r3
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	da1b      	bge.n	800be04 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	33b0      	adds	r3, #176	; 0xb0
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	4413      	add	r3, r2
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	689b      	ldr	r3, [r3, #8]
 800bdde:	683a      	ldr	r2, [r7, #0]
 800bde0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bde2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bde4:	683a      	ldr	r2, [r7, #0]
 800bde6:	88d2      	ldrh	r2, [r2, #6]
 800bde8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	88db      	ldrh	r3, [r3, #6]
 800bdee:	2b07      	cmp	r3, #7
 800bdf0:	bf28      	it	cs
 800bdf2:	2307      	movcs	r3, #7
 800bdf4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	89fa      	ldrh	r2, [r7, #14]
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f001 fdb3 	bl	800d968 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800be02:	e090      	b.n	800bf26 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	785a      	ldrb	r2, [r3, #1]
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	88db      	ldrh	r3, [r3, #6]
 800be12:	2b3f      	cmp	r3, #63	; 0x3f
 800be14:	d803      	bhi.n	800be1e <USBD_CDC_Setup+0xa6>
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	88db      	ldrh	r3, [r3, #6]
 800be1a:	b2da      	uxtb	r2, r3
 800be1c:	e000      	b.n	800be20 <USBD_CDC_Setup+0xa8>
 800be1e:	2240      	movs	r2, #64	; 0x40
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800be26:	6939      	ldr	r1, [r7, #16]
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800be2e:	461a      	mov	r2, r3
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f001 fdc5 	bl	800d9c0 <USBD_CtlPrepareRx>
      break;
 800be36:	e076      	b.n	800bf26 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	33b0      	adds	r3, #176	; 0xb0
 800be42:	009b      	lsls	r3, r3, #2
 800be44:	4413      	add	r3, r2
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	689b      	ldr	r3, [r3, #8]
 800be4a:	683a      	ldr	r2, [r7, #0]
 800be4c:	7850      	ldrb	r0, [r2, #1]
 800be4e:	2200      	movs	r2, #0
 800be50:	6839      	ldr	r1, [r7, #0]
 800be52:	4798      	blx	r3
      break;
 800be54:	e067      	b.n	800bf26 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	785b      	ldrb	r3, [r3, #1]
 800be5a:	2b0b      	cmp	r3, #11
 800be5c:	d851      	bhi.n	800bf02 <USBD_CDC_Setup+0x18a>
 800be5e:	a201      	add	r2, pc, #4	; (adr r2, 800be64 <USBD_CDC_Setup+0xec>)
 800be60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be64:	0800be95 	.word	0x0800be95
 800be68:	0800bf11 	.word	0x0800bf11
 800be6c:	0800bf03 	.word	0x0800bf03
 800be70:	0800bf03 	.word	0x0800bf03
 800be74:	0800bf03 	.word	0x0800bf03
 800be78:	0800bf03 	.word	0x0800bf03
 800be7c:	0800bf03 	.word	0x0800bf03
 800be80:	0800bf03 	.word	0x0800bf03
 800be84:	0800bf03 	.word	0x0800bf03
 800be88:	0800bf03 	.word	0x0800bf03
 800be8c:	0800bebf 	.word	0x0800bebf
 800be90:	0800bee9 	.word	0x0800bee9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	2b03      	cmp	r3, #3
 800be9e:	d107      	bne.n	800beb0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bea0:	f107 030a 	add.w	r3, r7, #10
 800bea4:	2202      	movs	r2, #2
 800bea6:	4619      	mov	r1, r3
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f001 fd5d 	bl	800d968 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800beae:	e032      	b.n	800bf16 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800beb0:	6839      	ldr	r1, [r7, #0]
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f001 fce7 	bl	800d886 <USBD_CtlError>
            ret = USBD_FAIL;
 800beb8:	2303      	movs	r3, #3
 800beba:	75fb      	strb	r3, [r7, #23]
          break;
 800bebc:	e02b      	b.n	800bf16 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	2b03      	cmp	r3, #3
 800bec8:	d107      	bne.n	800beda <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800beca:	f107 030d 	add.w	r3, r7, #13
 800bece:	2201      	movs	r2, #1
 800bed0:	4619      	mov	r1, r3
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f001 fd48 	bl	800d968 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bed8:	e01d      	b.n	800bf16 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800beda:	6839      	ldr	r1, [r7, #0]
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f001 fcd2 	bl	800d886 <USBD_CtlError>
            ret = USBD_FAIL;
 800bee2:	2303      	movs	r3, #3
 800bee4:	75fb      	strb	r3, [r7, #23]
          break;
 800bee6:	e016      	b.n	800bf16 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	2b03      	cmp	r3, #3
 800bef2:	d00f      	beq.n	800bf14 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bef4:	6839      	ldr	r1, [r7, #0]
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f001 fcc5 	bl	800d886 <USBD_CtlError>
            ret = USBD_FAIL;
 800befc:	2303      	movs	r3, #3
 800befe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bf00:	e008      	b.n	800bf14 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bf02:	6839      	ldr	r1, [r7, #0]
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f001 fcbe 	bl	800d886 <USBD_CtlError>
          ret = USBD_FAIL;
 800bf0a:	2303      	movs	r3, #3
 800bf0c:	75fb      	strb	r3, [r7, #23]
          break;
 800bf0e:	e002      	b.n	800bf16 <USBD_CDC_Setup+0x19e>
          break;
 800bf10:	bf00      	nop
 800bf12:	e008      	b.n	800bf26 <USBD_CDC_Setup+0x1ae>
          break;
 800bf14:	bf00      	nop
      }
      break;
 800bf16:	e006      	b.n	800bf26 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bf18:	6839      	ldr	r1, [r7, #0]
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f001 fcb3 	bl	800d886 <USBD_CtlError>
      ret = USBD_FAIL;
 800bf20:	2303      	movs	r3, #3
 800bf22:	75fb      	strb	r3, [r7, #23]
      break;
 800bf24:	bf00      	nop
  }

  return (uint8_t)ret;
 800bf26:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3718      	adds	r7, #24
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	32b0      	adds	r2, #176	; 0xb0
 800bf4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d101      	bne.n	800bf5a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bf56:	2303      	movs	r3, #3
 800bf58:	e065      	b.n	800c026 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	32b0      	adds	r2, #176	; 0xb0
 800bf64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bf6a:	78fb      	ldrb	r3, [r7, #3]
 800bf6c:	f003 020f 	and.w	r2, r3, #15
 800bf70:	6879      	ldr	r1, [r7, #4]
 800bf72:	4613      	mov	r3, r2
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	4413      	add	r3, r2
 800bf78:	009b      	lsls	r3, r3, #2
 800bf7a:	440b      	add	r3, r1
 800bf7c:	3318      	adds	r3, #24
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d02f      	beq.n	800bfe4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bf84:	78fb      	ldrb	r3, [r7, #3]
 800bf86:	f003 020f 	and.w	r2, r3, #15
 800bf8a:	6879      	ldr	r1, [r7, #4]
 800bf8c:	4613      	mov	r3, r2
 800bf8e:	009b      	lsls	r3, r3, #2
 800bf90:	4413      	add	r3, r2
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	440b      	add	r3, r1
 800bf96:	3318      	adds	r3, #24
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	78fb      	ldrb	r3, [r7, #3]
 800bf9c:	f003 010f 	and.w	r1, r3, #15
 800bfa0:	68f8      	ldr	r0, [r7, #12]
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	00db      	lsls	r3, r3, #3
 800bfa6:	440b      	add	r3, r1
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	4403      	add	r3, r0
 800bfac:	3348      	adds	r3, #72	; 0x48
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	fbb2 f1f3 	udiv	r1, r2, r3
 800bfb4:	fb01 f303 	mul.w	r3, r1, r3
 800bfb8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d112      	bne.n	800bfe4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bfbe:	78fb      	ldrb	r3, [r7, #3]
 800bfc0:	f003 020f 	and.w	r2, r3, #15
 800bfc4:	6879      	ldr	r1, [r7, #4]
 800bfc6:	4613      	mov	r3, r2
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	4413      	add	r3, r2
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	440b      	add	r3, r1
 800bfd0:	3318      	adds	r3, #24
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bfd6:	78f9      	ldrb	r1, [r7, #3]
 800bfd8:	2300      	movs	r3, #0
 800bfda:	2200      	movs	r2, #0
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f005 fed6 	bl	8011d8e <USBD_LL_Transmit>
 800bfe2:	e01f      	b.n	800c024 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	33b0      	adds	r3, #176	; 0xb0
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	4413      	add	r3, r2
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	691b      	ldr	r3, [r3, #16]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d010      	beq.n	800c024 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	33b0      	adds	r3, #176	; 0xb0
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	4413      	add	r3, r2
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	691b      	ldr	r3, [r3, #16]
 800c014:	68ba      	ldr	r2, [r7, #8]
 800c016:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c01a:	68ba      	ldr	r2, [r7, #8]
 800c01c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c020:	78fa      	ldrb	r2, [r7, #3]
 800c022:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	3710      	adds	r7, #16
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c02e:	b580      	push	{r7, lr}
 800c030:	b084      	sub	sp, #16
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]
 800c036:	460b      	mov	r3, r1
 800c038:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	32b0      	adds	r2, #176	; 0xb0
 800c044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c048:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	32b0      	adds	r2, #176	; 0xb0
 800c054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d101      	bne.n	800c060 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c05c:	2303      	movs	r3, #3
 800c05e:	e01a      	b.n	800c096 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c060:	78fb      	ldrb	r3, [r7, #3]
 800c062:	4619      	mov	r1, r3
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f005 fed4 	bl	8011e12 <USBD_LL_GetRxDataSize>
 800c06a:	4602      	mov	r2, r0
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	33b0      	adds	r3, #176	; 0xb0
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	4413      	add	r3, r2
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	68fa      	ldr	r2, [r7, #12]
 800c086:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c08a:	68fa      	ldr	r2, [r7, #12]
 800c08c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c090:	4611      	mov	r1, r2
 800c092:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	3710      	adds	r7, #16
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b084      	sub	sp, #16
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	32b0      	adds	r2, #176	; 0xb0
 800c0b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d101      	bne.n	800c0c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c0bc:	2303      	movs	r3, #3
 800c0be:	e025      	b.n	800c10c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	33b0      	adds	r3, #176	; 0xb0
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	4413      	add	r3, r2
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d01a      	beq.n	800c10a <USBD_CDC_EP0_RxReady+0x6c>
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c0da:	2bff      	cmp	r3, #255	; 0xff
 800c0dc:	d015      	beq.n	800c10a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	33b0      	adds	r3, #176	; 0xb0
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	4413      	add	r3, r2
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	689b      	ldr	r3, [r3, #8]
 800c0f0:	68fa      	ldr	r2, [r7, #12]
 800c0f2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c0f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c0f8:	68fa      	ldr	r2, [r7, #12]
 800c0fa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c0fe:	b292      	uxth	r2, r2
 800c100:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	22ff      	movs	r2, #255	; 0xff
 800c106:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c10a:	2300      	movs	r3, #0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b086      	sub	sp, #24
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c11c:	2182      	movs	r1, #130	; 0x82
 800c11e:	4818      	ldr	r0, [pc, #96]	; (800c180 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c120:	f000 fd4f 	bl	800cbc2 <USBD_GetEpDesc>
 800c124:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c126:	2101      	movs	r1, #1
 800c128:	4815      	ldr	r0, [pc, #84]	; (800c180 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c12a:	f000 fd4a 	bl	800cbc2 <USBD_GetEpDesc>
 800c12e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c130:	2181      	movs	r1, #129	; 0x81
 800c132:	4813      	ldr	r0, [pc, #76]	; (800c180 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c134:	f000 fd45 	bl	800cbc2 <USBD_GetEpDesc>
 800c138:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d002      	beq.n	800c146 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	2210      	movs	r2, #16
 800c144:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d006      	beq.n	800c15a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	2200      	movs	r2, #0
 800c150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c154:	711a      	strb	r2, [r3, #4]
 800c156:	2200      	movs	r2, #0
 800c158:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d006      	beq.n	800c16e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2200      	movs	r2, #0
 800c164:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c168:	711a      	strb	r2, [r3, #4]
 800c16a:	2200      	movs	r2, #0
 800c16c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2243      	movs	r2, #67	; 0x43
 800c172:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c174:	4b02      	ldr	r3, [pc, #8]	; (800c180 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c176:	4618      	mov	r0, r3
 800c178:	3718      	adds	r7, #24
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	20000064 	.word	0x20000064

0800c184 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c18c:	2182      	movs	r1, #130	; 0x82
 800c18e:	4818      	ldr	r0, [pc, #96]	; (800c1f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c190:	f000 fd17 	bl	800cbc2 <USBD_GetEpDesc>
 800c194:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c196:	2101      	movs	r1, #1
 800c198:	4815      	ldr	r0, [pc, #84]	; (800c1f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c19a:	f000 fd12 	bl	800cbc2 <USBD_GetEpDesc>
 800c19e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c1a0:	2181      	movs	r1, #129	; 0x81
 800c1a2:	4813      	ldr	r0, [pc, #76]	; (800c1f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c1a4:	f000 fd0d 	bl	800cbc2 <USBD_GetEpDesc>
 800c1a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d002      	beq.n	800c1b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	2210      	movs	r2, #16
 800c1b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d006      	beq.n	800c1ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	711a      	strb	r2, [r3, #4]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f042 0202 	orr.w	r2, r2, #2
 800c1c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d006      	beq.n	800c1de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	711a      	strb	r2, [r3, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f042 0202 	orr.w	r2, r2, #2
 800c1dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2243      	movs	r2, #67	; 0x43
 800c1e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c1e4:	4b02      	ldr	r3, [pc, #8]	; (800c1f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3718      	adds	r7, #24
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	20000064 	.word	0x20000064

0800c1f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b086      	sub	sp, #24
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c1fc:	2182      	movs	r1, #130	; 0x82
 800c1fe:	4818      	ldr	r0, [pc, #96]	; (800c260 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c200:	f000 fcdf 	bl	800cbc2 <USBD_GetEpDesc>
 800c204:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c206:	2101      	movs	r1, #1
 800c208:	4815      	ldr	r0, [pc, #84]	; (800c260 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c20a:	f000 fcda 	bl	800cbc2 <USBD_GetEpDesc>
 800c20e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c210:	2181      	movs	r1, #129	; 0x81
 800c212:	4813      	ldr	r0, [pc, #76]	; (800c260 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c214:	f000 fcd5 	bl	800cbc2 <USBD_GetEpDesc>
 800c218:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d002      	beq.n	800c226 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	2210      	movs	r2, #16
 800c224:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d006      	beq.n	800c23a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	2200      	movs	r2, #0
 800c230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c234:	711a      	strb	r2, [r3, #4]
 800c236:	2200      	movs	r2, #0
 800c238:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d006      	beq.n	800c24e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	2200      	movs	r2, #0
 800c244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c248:	711a      	strb	r2, [r3, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2243      	movs	r2, #67	; 0x43
 800c252:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c254:	4b02      	ldr	r3, [pc, #8]	; (800c260 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c256:	4618      	mov	r0, r3
 800c258:	3718      	adds	r7, #24
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	20000064 	.word	0x20000064

0800c264 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	220a      	movs	r2, #10
 800c270:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c272:	4b03      	ldr	r3, [pc, #12]	; (800c280 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c274:	4618      	mov	r0, r3
 800c276:	370c      	adds	r7, #12
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr
 800c280:	20000020 	.word	0x20000020

0800c284 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c284:	b480      	push	{r7}
 800c286:	b083      	sub	sp, #12
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d101      	bne.n	800c298 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c294:	2303      	movs	r3, #3
 800c296:	e009      	b.n	800c2ac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	33b0      	adds	r3, #176	; 0xb0
 800c2a2:	009b      	lsls	r3, r3, #2
 800c2a4:	4413      	add	r3, r2
 800c2a6:	683a      	ldr	r2, [r7, #0]
 800c2a8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c2aa:	2300      	movs	r3, #0
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	370c      	adds	r7, #12
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b087      	sub	sp, #28
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	32b0      	adds	r2, #176	; 0xb0
 800c2ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2d2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d101      	bne.n	800c2de <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c2da:	2303      	movs	r3, #3
 800c2dc:	e008      	b.n	800c2f0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	68ba      	ldr	r2, [r7, #8]
 800c2e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c2ee:	2300      	movs	r3, #0
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	371c      	adds	r7, #28
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr

0800c2fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b085      	sub	sp, #20
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	32b0      	adds	r2, #176	; 0xb0
 800c310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c314:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d101      	bne.n	800c320 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c31c:	2303      	movs	r3, #3
 800c31e:	e004      	b.n	800c32a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	683a      	ldr	r2, [r7, #0]
 800c324:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c328:	2300      	movs	r3, #0
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3714      	adds	r7, #20
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr
	...

0800c338 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	32b0      	adds	r2, #176	; 0xb0
 800c34a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c34e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c350:	2301      	movs	r3, #1
 800c352:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	32b0      	adds	r2, #176	; 0xb0
 800c35e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d101      	bne.n	800c36a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c366:	2303      	movs	r3, #3
 800c368:	e025      	b.n	800c3b6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c370:	2b00      	cmp	r3, #0
 800c372:	d11f      	bne.n	800c3b4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	2201      	movs	r2, #1
 800c378:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c37c:	4b10      	ldr	r3, [pc, #64]	; (800c3c0 <USBD_CDC_TransmitPacket+0x88>)
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	f003 020f 	and.w	r2, r3, #15
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	4613      	mov	r3, r2
 800c38e:	009b      	lsls	r3, r3, #2
 800c390:	4413      	add	r3, r2
 800c392:	009b      	lsls	r3, r3, #2
 800c394:	4403      	add	r3, r0
 800c396:	3318      	adds	r3, #24
 800c398:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c39a:	4b09      	ldr	r3, [pc, #36]	; (800c3c0 <USBD_CDC_TransmitPacket+0x88>)
 800c39c:	7819      	ldrb	r1, [r3, #0]
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f005 fcef 	bl	8011d8e <USBD_LL_Transmit>

    ret = USBD_OK;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3710      	adds	r7, #16
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	200000a7 	.word	0x200000a7

0800c3c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	32b0      	adds	r2, #176	; 0xb0
 800c3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	32b0      	adds	r2, #176	; 0xb0
 800c3e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d101      	bne.n	800c3f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c3ee:	2303      	movs	r3, #3
 800c3f0:	e018      	b.n	800c424 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	7c1b      	ldrb	r3, [r3, #16]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d10a      	bne.n	800c410 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c3fa:	4b0c      	ldr	r3, [pc, #48]	; (800c42c <USBD_CDC_ReceivePacket+0x68>)
 800c3fc:	7819      	ldrb	r1, [r3, #0]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c404:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f005 fce1 	bl	8011dd0 <USBD_LL_PrepareReceive>
 800c40e:	e008      	b.n	800c422 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c410:	4b06      	ldr	r3, [pc, #24]	; (800c42c <USBD_CDC_ReceivePacket+0x68>)
 800c412:	7819      	ldrb	r1, [r3, #0]
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c41a:	2340      	movs	r3, #64	; 0x40
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f005 fcd7 	bl	8011dd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c422:	2300      	movs	r3, #0
}
 800c424:	4618      	mov	r0, r3
 800c426:	3710      	adds	r7, #16
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	200000a8 	.word	0x200000a8

0800c430 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b086      	sub	sp, #24
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	4613      	mov	r3, r2
 800c43c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d101      	bne.n	800c448 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c444:	2303      	movs	r3, #3
 800c446:	e01f      	b.n	800c488 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2200      	movs	r2, #0
 800c44c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2200      	movs	r2, #0
 800c454:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2200      	movs	r2, #0
 800c45c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d003      	beq.n	800c46e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	68ba      	ldr	r2, [r7, #8]
 800c46a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2201      	movs	r2, #1
 800c472:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	79fa      	ldrb	r2, [r7, #7]
 800c47a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c47c:	68f8      	ldr	r0, [r7, #12]
 800c47e:	f005 fb51 	bl	8011b24 <USBD_LL_Init>
 800c482:	4603      	mov	r3, r0
 800c484:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c486:	7dfb      	ldrb	r3, [r7, #23]
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3718      	adds	r7, #24
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c49a:	2300      	movs	r3, #0
 800c49c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d101      	bne.n	800c4a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c4a4:	2303      	movs	r3, #3
 800c4a6:	e025      	b.n	800c4f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	683a      	ldr	r2, [r7, #0]
 800c4ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	32ae      	adds	r2, #174	; 0xae
 800c4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d00f      	beq.n	800c4e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	32ae      	adds	r2, #174	; 0xae
 800c4ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d4:	f107 020e 	add.w	r2, r7, #14
 800c4d8:	4610      	mov	r0, r2
 800c4da:	4798      	blx	r3
 800c4dc:	4602      	mov	r2, r0
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c4ea:	1c5a      	adds	r2, r3, #1
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c4f2:	2300      	movs	r3, #0
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3710      	adds	r7, #16
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f005 fb59 	bl	8011bbc <USBD_LL_Start>
 800c50a:	4603      	mov	r3, r0
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3708      	adds	r7, #8
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c51c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c51e:	4618      	mov	r0, r3
 800c520:	370c      	adds	r7, #12
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr

0800c52a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b084      	sub	sp, #16
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
 800c532:	460b      	mov	r3, r1
 800c534:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c536:	2300      	movs	r3, #0
 800c538:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c540:	2b00      	cmp	r3, #0
 800c542:	d009      	beq.n	800c558 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	78fa      	ldrb	r2, [r7, #3]
 800c54e:	4611      	mov	r1, r2
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	4798      	blx	r3
 800c554:	4603      	mov	r3, r0
 800c556:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c558:	7bfb      	ldrb	r3, [r7, #15]
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}

0800c562 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c562:	b580      	push	{r7, lr}
 800c564:	b084      	sub	sp, #16
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
 800c56a:	460b      	mov	r3, r1
 800c56c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c56e:	2300      	movs	r3, #0
 800c570:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	78fa      	ldrb	r2, [r7, #3]
 800c57c:	4611      	mov	r1, r2
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	4798      	blx	r3
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	d001      	beq.n	800c58c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c588:	2303      	movs	r3, #3
 800c58a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b084      	sub	sp, #16
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
 800c59e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c5a6:	6839      	ldr	r1, [r7, #0]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f001 f932 	bl	800d812 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c5bc:	461a      	mov	r2, r3
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c5ca:	f003 031f 	and.w	r3, r3, #31
 800c5ce:	2b02      	cmp	r3, #2
 800c5d0:	d01a      	beq.n	800c608 <USBD_LL_SetupStage+0x72>
 800c5d2:	2b02      	cmp	r3, #2
 800c5d4:	d822      	bhi.n	800c61c <USBD_LL_SetupStage+0x86>
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d002      	beq.n	800c5e0 <USBD_LL_SetupStage+0x4a>
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d00a      	beq.n	800c5f4 <USBD_LL_SetupStage+0x5e>
 800c5de:	e01d      	b.n	800c61c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 fb5f 	bl	800ccac <USBD_StdDevReq>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	73fb      	strb	r3, [r7, #15]
      break;
 800c5f2:	e020      	b.n	800c636 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 fbc7 	bl	800cd90 <USBD_StdItfReq>
 800c602:	4603      	mov	r3, r0
 800c604:	73fb      	strb	r3, [r7, #15]
      break;
 800c606:	e016      	b.n	800c636 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c60e:	4619      	mov	r1, r3
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f000 fc29 	bl	800ce68 <USBD_StdEPReq>
 800c616:	4603      	mov	r3, r0
 800c618:	73fb      	strb	r3, [r7, #15]
      break;
 800c61a:	e00c      	b.n	800c636 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c622:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c626:	b2db      	uxtb	r3, r3
 800c628:	4619      	mov	r1, r3
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f005 fb26 	bl	8011c7c <USBD_LL_StallEP>
 800c630:	4603      	mov	r3, r0
 800c632:	73fb      	strb	r3, [r7, #15]
      break;
 800c634:	bf00      	nop
  }

  return ret;
 800c636:	7bfb      	ldrb	r3, [r7, #15]
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3710      	adds	r7, #16
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b086      	sub	sp, #24
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	460b      	mov	r3, r1
 800c64a:	607a      	str	r2, [r7, #4]
 800c64c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c64e:	2300      	movs	r3, #0
 800c650:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c652:	7afb      	ldrb	r3, [r7, #11]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d16e      	bne.n	800c736 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c65e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c666:	2b03      	cmp	r3, #3
 800c668:	f040 8098 	bne.w	800c79c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	689a      	ldr	r2, [r3, #8]
 800c670:	693b      	ldr	r3, [r7, #16]
 800c672:	68db      	ldr	r3, [r3, #12]
 800c674:	429a      	cmp	r2, r3
 800c676:	d913      	bls.n	800c6a0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	689a      	ldr	r2, [r3, #8]
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	1ad2      	subs	r2, r2, r3
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	68da      	ldr	r2, [r3, #12]
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	689b      	ldr	r3, [r3, #8]
 800c68e:	4293      	cmp	r3, r2
 800c690:	bf28      	it	cs
 800c692:	4613      	movcs	r3, r2
 800c694:	461a      	mov	r2, r3
 800c696:	6879      	ldr	r1, [r7, #4]
 800c698:	68f8      	ldr	r0, [r7, #12]
 800c69a:	f001 f9ae 	bl	800d9fa <USBD_CtlContinueRx>
 800c69e:	e07d      	b.n	800c79c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c6a6:	f003 031f 	and.w	r3, r3, #31
 800c6aa:	2b02      	cmp	r3, #2
 800c6ac:	d014      	beq.n	800c6d8 <USBD_LL_DataOutStage+0x98>
 800c6ae:	2b02      	cmp	r3, #2
 800c6b0:	d81d      	bhi.n	800c6ee <USBD_LL_DataOutStage+0xae>
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d002      	beq.n	800c6bc <USBD_LL_DataOutStage+0x7c>
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d003      	beq.n	800c6c2 <USBD_LL_DataOutStage+0x82>
 800c6ba:	e018      	b.n	800c6ee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	75bb      	strb	r3, [r7, #22]
            break;
 800c6c0:	e018      	b.n	800c6f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	68f8      	ldr	r0, [r7, #12]
 800c6ce:	f000 fa5e 	bl	800cb8e <USBD_CoreFindIF>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	75bb      	strb	r3, [r7, #22]
            break;
 800c6d6:	e00d      	b.n	800c6f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	68f8      	ldr	r0, [r7, #12]
 800c6e4:	f000 fa60 	bl	800cba8 <USBD_CoreFindEP>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	75bb      	strb	r3, [r7, #22]
            break;
 800c6ec:	e002      	b.n	800c6f4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	75bb      	strb	r3, [r7, #22]
            break;
 800c6f2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c6f4:	7dbb      	ldrb	r3, [r7, #22]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d119      	bne.n	800c72e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c700:	b2db      	uxtb	r3, r3
 800c702:	2b03      	cmp	r3, #3
 800c704:	d113      	bne.n	800c72e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c706:	7dba      	ldrb	r2, [r7, #22]
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	32ae      	adds	r2, #174	; 0xae
 800c70c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c710:	691b      	ldr	r3, [r3, #16]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d00b      	beq.n	800c72e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c716:	7dba      	ldrb	r2, [r7, #22]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c71e:	7dba      	ldrb	r2, [r7, #22]
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	32ae      	adds	r2, #174	; 0xae
 800c724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c728:	691b      	ldr	r3, [r3, #16]
 800c72a:	68f8      	ldr	r0, [r7, #12]
 800c72c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c72e:	68f8      	ldr	r0, [r7, #12]
 800c730:	f001 f974 	bl	800da1c <USBD_CtlSendStatus>
 800c734:	e032      	b.n	800c79c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c736:	7afb      	ldrb	r3, [r7, #11]
 800c738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	4619      	mov	r1, r3
 800c740:	68f8      	ldr	r0, [r7, #12]
 800c742:	f000 fa31 	bl	800cba8 <USBD_CoreFindEP>
 800c746:	4603      	mov	r3, r0
 800c748:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c74a:	7dbb      	ldrb	r3, [r7, #22]
 800c74c:	2bff      	cmp	r3, #255	; 0xff
 800c74e:	d025      	beq.n	800c79c <USBD_LL_DataOutStage+0x15c>
 800c750:	7dbb      	ldrb	r3, [r7, #22]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d122      	bne.n	800c79c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	2b03      	cmp	r3, #3
 800c760:	d117      	bne.n	800c792 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c762:	7dba      	ldrb	r2, [r7, #22]
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	32ae      	adds	r2, #174	; 0xae
 800c768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c76c:	699b      	ldr	r3, [r3, #24]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d00f      	beq.n	800c792 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c772:	7dba      	ldrb	r2, [r7, #22]
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c77a:	7dba      	ldrb	r2, [r7, #22]
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	32ae      	adds	r2, #174	; 0xae
 800c780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c784:	699b      	ldr	r3, [r3, #24]
 800c786:	7afa      	ldrb	r2, [r7, #11]
 800c788:	4611      	mov	r1, r2
 800c78a:	68f8      	ldr	r0, [r7, #12]
 800c78c:	4798      	blx	r3
 800c78e:	4603      	mov	r3, r0
 800c790:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c792:	7dfb      	ldrb	r3, [r7, #23]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d001      	beq.n	800c79c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c798:	7dfb      	ldrb	r3, [r7, #23]
 800c79a:	e000      	b.n	800c79e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c79c:	2300      	movs	r3, #0
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3718      	adds	r7, #24
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}

0800c7a6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c7a6:	b580      	push	{r7, lr}
 800c7a8:	b086      	sub	sp, #24
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	60f8      	str	r0, [r7, #12]
 800c7ae:	460b      	mov	r3, r1
 800c7b0:	607a      	str	r2, [r7, #4]
 800c7b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c7b4:	7afb      	ldrb	r3, [r7, #11]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d16f      	bne.n	800c89a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	3314      	adds	r3, #20
 800c7be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c7c6:	2b02      	cmp	r3, #2
 800c7c8:	d15a      	bne.n	800c880 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	689a      	ldr	r2, [r3, #8]
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d914      	bls.n	800c800 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	689a      	ldr	r2, [r3, #8]
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	1ad2      	subs	r2, r2, r3
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	6879      	ldr	r1, [r7, #4]
 800c7ec:	68f8      	ldr	r0, [r7, #12]
 800c7ee:	f001 f8d6 	bl	800d99e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	68f8      	ldr	r0, [r7, #12]
 800c7fa:	f005 fae9 	bl	8011dd0 <USBD_LL_PrepareReceive>
 800c7fe:	e03f      	b.n	800c880 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	68da      	ldr	r2, [r3, #12]
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	689b      	ldr	r3, [r3, #8]
 800c808:	429a      	cmp	r2, r3
 800c80a:	d11c      	bne.n	800c846 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	685a      	ldr	r2, [r3, #4]
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c814:	429a      	cmp	r2, r3
 800c816:	d316      	bcc.n	800c846 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	685a      	ldr	r2, [r3, #4]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c822:	429a      	cmp	r2, r3
 800c824:	d20f      	bcs.n	800c846 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c826:	2200      	movs	r2, #0
 800c828:	2100      	movs	r1, #0
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f001 f8b7 	bl	800d99e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2200      	movs	r2, #0
 800c834:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c838:	2300      	movs	r3, #0
 800c83a:	2200      	movs	r2, #0
 800c83c:	2100      	movs	r1, #0
 800c83e:	68f8      	ldr	r0, [r7, #12]
 800c840:	f005 fac6 	bl	8011dd0 <USBD_LL_PrepareReceive>
 800c844:	e01c      	b.n	800c880 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	2b03      	cmp	r3, #3
 800c850:	d10f      	bne.n	800c872 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c858:	68db      	ldr	r3, [r3, #12]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d009      	beq.n	800c872 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2200      	movs	r2, #0
 800c862:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c86c:	68db      	ldr	r3, [r3, #12]
 800c86e:	68f8      	ldr	r0, [r7, #12]
 800c870:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c872:	2180      	movs	r1, #128	; 0x80
 800c874:	68f8      	ldr	r0, [r7, #12]
 800c876:	f005 fa01 	bl	8011c7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c87a:	68f8      	ldr	r0, [r7, #12]
 800c87c:	f001 f8e1 	bl	800da42 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d03a      	beq.n	800c900 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c88a:	68f8      	ldr	r0, [r7, #12]
 800c88c:	f7ff fe42 	bl	800c514 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2200      	movs	r2, #0
 800c894:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c898:	e032      	b.n	800c900 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c89a:	7afb      	ldrb	r3, [r7, #11]
 800c89c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c8a0:	b2db      	uxtb	r3, r3
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	68f8      	ldr	r0, [r7, #12]
 800c8a6:	f000 f97f 	bl	800cba8 <USBD_CoreFindEP>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c8ae:	7dfb      	ldrb	r3, [r7, #23]
 800c8b0:	2bff      	cmp	r3, #255	; 0xff
 800c8b2:	d025      	beq.n	800c900 <USBD_LL_DataInStage+0x15a>
 800c8b4:	7dfb      	ldrb	r3, [r7, #23]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d122      	bne.n	800c900 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	2b03      	cmp	r3, #3
 800c8c4:	d11c      	bne.n	800c900 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c8c6:	7dfa      	ldrb	r2, [r7, #23]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	32ae      	adds	r2, #174	; 0xae
 800c8cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8d0:	695b      	ldr	r3, [r3, #20]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d014      	beq.n	800c900 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c8d6:	7dfa      	ldrb	r2, [r7, #23]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c8de:	7dfa      	ldrb	r2, [r7, #23]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	32ae      	adds	r2, #174	; 0xae
 800c8e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8e8:	695b      	ldr	r3, [r3, #20]
 800c8ea:	7afa      	ldrb	r2, [r7, #11]
 800c8ec:	4611      	mov	r1, r2
 800c8ee:	68f8      	ldr	r0, [r7, #12]
 800c8f0:	4798      	blx	r3
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c8f6:	7dbb      	ldrb	r3, [r7, #22]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d001      	beq.n	800c900 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c8fc:	7dbb      	ldrb	r3, [r7, #22]
 800c8fe:	e000      	b.n	800c902 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c900:	2300      	movs	r3, #0
}
 800c902:	4618      	mov	r0, r3
 800c904:	3718      	adds	r7, #24
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b084      	sub	sp, #16
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c912:	2300      	movs	r3, #0
 800c914:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2201      	movs	r2, #1
 800c91a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2200      	movs	r2, #0
 800c922:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2200      	movs	r2, #0
 800c930:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2200      	movs	r2, #0
 800c938:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c942:	2b00      	cmp	r3, #0
 800c944:	d014      	beq.n	800c970 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d00e      	beq.n	800c970 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	6852      	ldr	r2, [r2, #4]
 800c95e:	b2d2      	uxtb	r2, r2
 800c960:	4611      	mov	r1, r2
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	4798      	blx	r3
 800c966:	4603      	mov	r3, r0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d001      	beq.n	800c970 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c96c:	2303      	movs	r3, #3
 800c96e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c970:	2340      	movs	r3, #64	; 0x40
 800c972:	2200      	movs	r2, #0
 800c974:	2100      	movs	r1, #0
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f005 f93b 	bl	8011bf2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2201      	movs	r2, #1
 800c980:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2240      	movs	r2, #64	; 0x40
 800c988:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c98c:	2340      	movs	r3, #64	; 0x40
 800c98e:	2200      	movs	r2, #0
 800c990:	2180      	movs	r1, #128	; 0x80
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f005 f92d 	bl	8011bf2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2201      	movs	r2, #1
 800c99c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2240      	movs	r2, #64	; 0x40
 800c9a2:	621a      	str	r2, [r3, #32]

  return ret;
 800c9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3710      	adds	r7, #16
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}

0800c9ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c9ae:	b480      	push	{r7}
 800c9b0:	b083      	sub	sp, #12
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
 800c9b6:	460b      	mov	r3, r1
 800c9b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	78fa      	ldrb	r2, [r7, #3]
 800c9be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c9c0:	2300      	movs	r3, #0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	370c      	adds	r7, #12
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr

0800c9ce <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c9ce:	b480      	push	{r7}
 800c9d0:	b083      	sub	sp, #12
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9dc:	b2da      	uxtb	r2, r3
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2204      	movs	r2, #4
 800c9e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	370c      	adds	r7, #12
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr

0800c9fa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c9fa:	b480      	push	{r7}
 800c9fc:	b083      	sub	sp, #12
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca08:	b2db      	uxtb	r3, r3
 800ca0a:	2b04      	cmp	r3, #4
 800ca0c:	d106      	bne.n	800ca1c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ca14:	b2da      	uxtb	r2, r3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ca1c:	2300      	movs	r3, #0
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	370c      	adds	r7, #12
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr

0800ca2a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ca2a:	b580      	push	{r7, lr}
 800ca2c:	b082      	sub	sp, #8
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	2b03      	cmp	r3, #3
 800ca3c:	d110      	bne.n	800ca60 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d00b      	beq.n	800ca60 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca4e:	69db      	ldr	r3, [r3, #28]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d005      	beq.n	800ca60 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca5a:	69db      	ldr	r3, [r3, #28]
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ca60:	2300      	movs	r3, #0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3708      	adds	r7, #8
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}

0800ca6a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ca6a:	b580      	push	{r7, lr}
 800ca6c:	b082      	sub	sp, #8
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	6078      	str	r0, [r7, #4]
 800ca72:	460b      	mov	r3, r1
 800ca74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	32ae      	adds	r2, #174	; 0xae
 800ca80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d101      	bne.n	800ca8c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ca88:	2303      	movs	r3, #3
 800ca8a:	e01c      	b.n	800cac6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca92:	b2db      	uxtb	r3, r3
 800ca94:	2b03      	cmp	r3, #3
 800ca96:	d115      	bne.n	800cac4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	32ae      	adds	r2, #174	; 0xae
 800caa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caa6:	6a1b      	ldr	r3, [r3, #32]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d00b      	beq.n	800cac4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	32ae      	adds	r2, #174	; 0xae
 800cab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caba:	6a1b      	ldr	r3, [r3, #32]
 800cabc:	78fa      	ldrb	r2, [r7, #3]
 800cabe:	4611      	mov	r1, r2
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3708      	adds	r7, #8
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b082      	sub	sp, #8
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
 800cad6:	460b      	mov	r3, r1
 800cad8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	32ae      	adds	r2, #174	; 0xae
 800cae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d101      	bne.n	800caf0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800caec:	2303      	movs	r3, #3
 800caee:	e01c      	b.n	800cb2a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caf6:	b2db      	uxtb	r3, r3
 800caf8:	2b03      	cmp	r3, #3
 800cafa:	d115      	bne.n	800cb28 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	32ae      	adds	r2, #174	; 0xae
 800cb06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d00b      	beq.n	800cb28 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	32ae      	adds	r2, #174	; 0xae
 800cb1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb20:	78fa      	ldrb	r2, [r7, #3]
 800cb22:	4611      	mov	r1, r2
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cb28:	2300      	movs	r3, #0
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3708      	adds	r7, #8
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cb32:	b480      	push	{r7}
 800cb34:	b083      	sub	sp, #12
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cb3a:	2300      	movs	r3, #0
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	370c      	adds	r7, #12
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cb50:	2300      	movs	r3, #0
 800cb52:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2201      	movs	r2, #1
 800cb58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d00e      	beq.n	800cb84 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	6852      	ldr	r2, [r2, #4]
 800cb72:	b2d2      	uxtb	r2, r2
 800cb74:	4611      	mov	r1, r2
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	4798      	blx	r3
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d001      	beq.n	800cb84 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cb80:	2303      	movs	r3, #3
 800cb82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cb84:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3710      	adds	r7, #16
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}

0800cb8e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cb8e:	b480      	push	{r7}
 800cb90:	b083      	sub	sp, #12
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	6078      	str	r0, [r7, #4]
 800cb96:	460b      	mov	r3, r1
 800cb98:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cb9a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	370c      	adds	r7, #12
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr

0800cba8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cbb4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	370c      	adds	r7, #12
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr

0800cbc2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b086      	sub	sp, #24
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
 800cbca:	460b      	mov	r3, r1
 800cbcc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	885b      	ldrh	r3, [r3, #2]
 800cbde:	b29a      	uxth	r2, r3
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	b29b      	uxth	r3, r3
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d920      	bls.n	800cc2c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cbf2:	e013      	b.n	800cc1c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cbf4:	f107 030a 	add.w	r3, r7, #10
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	6978      	ldr	r0, [r7, #20]
 800cbfc:	f000 f81b 	bl	800cc36 <USBD_GetNextDesc>
 800cc00:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	785b      	ldrb	r3, [r3, #1]
 800cc06:	2b05      	cmp	r3, #5
 800cc08:	d108      	bne.n	800cc1c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	789b      	ldrb	r3, [r3, #2]
 800cc12:	78fa      	ldrb	r2, [r7, #3]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d008      	beq.n	800cc2a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	885b      	ldrh	r3, [r3, #2]
 800cc20:	b29a      	uxth	r2, r3
 800cc22:	897b      	ldrh	r3, [r7, #10]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d8e5      	bhi.n	800cbf4 <USBD_GetEpDesc+0x32>
 800cc28:	e000      	b.n	800cc2c <USBD_GetEpDesc+0x6a>
          break;
 800cc2a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cc2c:	693b      	ldr	r3, [r7, #16]
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3718      	adds	r7, #24
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}

0800cc36 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cc36:	b480      	push	{r7}
 800cc38:	b085      	sub	sp, #20
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
 800cc3e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	881a      	ldrh	r2, [r3, #0]
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	4413      	add	r3, r2
 800cc50:	b29a      	uxth	r2, r3
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	4413      	add	r3, r2
 800cc60:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cc62:	68fb      	ldr	r3, [r7, #12]
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3714      	adds	r7, #20
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6e:	4770      	bx	lr

0800cc70 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b087      	sub	sp, #28
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	3301      	adds	r3, #1
 800cc86:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cc8e:	8a3b      	ldrh	r3, [r7, #16]
 800cc90:	021b      	lsls	r3, r3, #8
 800cc92:	b21a      	sxth	r2, r3
 800cc94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	b21b      	sxth	r3, r3
 800cc9c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cc9e:	89fb      	ldrh	r3, [r7, #14]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	371c      	adds	r7, #28
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ccc2:	2b40      	cmp	r3, #64	; 0x40
 800ccc4:	d005      	beq.n	800ccd2 <USBD_StdDevReq+0x26>
 800ccc6:	2b40      	cmp	r3, #64	; 0x40
 800ccc8:	d857      	bhi.n	800cd7a <USBD_StdDevReq+0xce>
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d00f      	beq.n	800ccee <USBD_StdDevReq+0x42>
 800ccce:	2b20      	cmp	r3, #32
 800ccd0:	d153      	bne.n	800cd7a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	32ae      	adds	r2, #174	; 0xae
 800ccdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cce0:	689b      	ldr	r3, [r3, #8]
 800cce2:	6839      	ldr	r1, [r7, #0]
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	4798      	blx	r3
 800cce8:	4603      	mov	r3, r0
 800ccea:	73fb      	strb	r3, [r7, #15]
      break;
 800ccec:	e04a      	b.n	800cd84 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	785b      	ldrb	r3, [r3, #1]
 800ccf2:	2b09      	cmp	r3, #9
 800ccf4:	d83b      	bhi.n	800cd6e <USBD_StdDevReq+0xc2>
 800ccf6:	a201      	add	r2, pc, #4	; (adr r2, 800ccfc <USBD_StdDevReq+0x50>)
 800ccf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccfc:	0800cd51 	.word	0x0800cd51
 800cd00:	0800cd65 	.word	0x0800cd65
 800cd04:	0800cd6f 	.word	0x0800cd6f
 800cd08:	0800cd5b 	.word	0x0800cd5b
 800cd0c:	0800cd6f 	.word	0x0800cd6f
 800cd10:	0800cd2f 	.word	0x0800cd2f
 800cd14:	0800cd25 	.word	0x0800cd25
 800cd18:	0800cd6f 	.word	0x0800cd6f
 800cd1c:	0800cd47 	.word	0x0800cd47
 800cd20:	0800cd39 	.word	0x0800cd39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cd24:	6839      	ldr	r1, [r7, #0]
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f000 fa3c 	bl	800d1a4 <USBD_GetDescriptor>
          break;
 800cd2c:	e024      	b.n	800cd78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cd2e:	6839      	ldr	r1, [r7, #0]
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 fbcb 	bl	800d4cc <USBD_SetAddress>
          break;
 800cd36:	e01f      	b.n	800cd78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cd38:	6839      	ldr	r1, [r7, #0]
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f000 fc0a 	bl	800d554 <USBD_SetConfig>
 800cd40:	4603      	mov	r3, r0
 800cd42:	73fb      	strb	r3, [r7, #15]
          break;
 800cd44:	e018      	b.n	800cd78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cd46:	6839      	ldr	r1, [r7, #0]
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f000 fcad 	bl	800d6a8 <USBD_GetConfig>
          break;
 800cd4e:	e013      	b.n	800cd78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cd50:	6839      	ldr	r1, [r7, #0]
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f000 fcde 	bl	800d714 <USBD_GetStatus>
          break;
 800cd58:	e00e      	b.n	800cd78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cd5a:	6839      	ldr	r1, [r7, #0]
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f000 fd0d 	bl	800d77c <USBD_SetFeature>
          break;
 800cd62:	e009      	b.n	800cd78 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cd64:	6839      	ldr	r1, [r7, #0]
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 fd31 	bl	800d7ce <USBD_ClrFeature>
          break;
 800cd6c:	e004      	b.n	800cd78 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cd6e:	6839      	ldr	r1, [r7, #0]
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f000 fd88 	bl	800d886 <USBD_CtlError>
          break;
 800cd76:	bf00      	nop
      }
      break;
 800cd78:	e004      	b.n	800cd84 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cd7a:	6839      	ldr	r1, [r7, #0]
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f000 fd82 	bl	800d886 <USBD_CtlError>
      break;
 800cd82:	bf00      	nop
  }

  return ret;
 800cd84:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3710      	adds	r7, #16
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
 800cd8e:	bf00      	nop

0800cd90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b084      	sub	sp, #16
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cda6:	2b40      	cmp	r3, #64	; 0x40
 800cda8:	d005      	beq.n	800cdb6 <USBD_StdItfReq+0x26>
 800cdaa:	2b40      	cmp	r3, #64	; 0x40
 800cdac:	d852      	bhi.n	800ce54 <USBD_StdItfReq+0xc4>
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d001      	beq.n	800cdb6 <USBD_StdItfReq+0x26>
 800cdb2:	2b20      	cmp	r3, #32
 800cdb4:	d14e      	bne.n	800ce54 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	2b02      	cmp	r3, #2
 800cdc2:	d840      	bhi.n	800ce46 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	889b      	ldrh	r3, [r3, #4]
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	d836      	bhi.n	800ce3c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	889b      	ldrh	r3, [r3, #4]
 800cdd2:	b2db      	uxtb	r3, r3
 800cdd4:	4619      	mov	r1, r3
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f7ff fed9 	bl	800cb8e <USBD_CoreFindIF>
 800cddc:	4603      	mov	r3, r0
 800cdde:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cde0:	7bbb      	ldrb	r3, [r7, #14]
 800cde2:	2bff      	cmp	r3, #255	; 0xff
 800cde4:	d01d      	beq.n	800ce22 <USBD_StdItfReq+0x92>
 800cde6:	7bbb      	ldrb	r3, [r7, #14]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d11a      	bne.n	800ce22 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cdec:	7bba      	ldrb	r2, [r7, #14]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	32ae      	adds	r2, #174	; 0xae
 800cdf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdf6:	689b      	ldr	r3, [r3, #8]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d00f      	beq.n	800ce1c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cdfc:	7bba      	ldrb	r2, [r7, #14]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ce04:	7bba      	ldrb	r2, [r7, #14]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	32ae      	adds	r2, #174	; 0xae
 800ce0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce0e:	689b      	ldr	r3, [r3, #8]
 800ce10:	6839      	ldr	r1, [r7, #0]
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	4798      	blx	r3
 800ce16:	4603      	mov	r3, r0
 800ce18:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ce1a:	e004      	b.n	800ce26 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ce1c:	2303      	movs	r3, #3
 800ce1e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ce20:	e001      	b.n	800ce26 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ce22:	2303      	movs	r3, #3
 800ce24:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	88db      	ldrh	r3, [r3, #6]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d110      	bne.n	800ce50 <USBD_StdItfReq+0xc0>
 800ce2e:	7bfb      	ldrb	r3, [r7, #15]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d10d      	bne.n	800ce50 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f000 fdf1 	bl	800da1c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ce3a:	e009      	b.n	800ce50 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ce3c:	6839      	ldr	r1, [r7, #0]
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 fd21 	bl	800d886 <USBD_CtlError>
          break;
 800ce44:	e004      	b.n	800ce50 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ce46:	6839      	ldr	r1, [r7, #0]
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 fd1c 	bl	800d886 <USBD_CtlError>
          break;
 800ce4e:	e000      	b.n	800ce52 <USBD_StdItfReq+0xc2>
          break;
 800ce50:	bf00      	nop
      }
      break;
 800ce52:	e004      	b.n	800ce5e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ce54:	6839      	ldr	r1, [r7, #0]
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f000 fd15 	bl	800d886 <USBD_CtlError>
      break;
 800ce5c:	bf00      	nop
  }

  return ret;
 800ce5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3710      	adds	r7, #16
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ce72:	2300      	movs	r3, #0
 800ce74:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	889b      	ldrh	r3, [r3, #4]
 800ce7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ce84:	2b40      	cmp	r3, #64	; 0x40
 800ce86:	d007      	beq.n	800ce98 <USBD_StdEPReq+0x30>
 800ce88:	2b40      	cmp	r3, #64	; 0x40
 800ce8a:	f200 817f 	bhi.w	800d18c <USBD_StdEPReq+0x324>
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d02a      	beq.n	800cee8 <USBD_StdEPReq+0x80>
 800ce92:	2b20      	cmp	r3, #32
 800ce94:	f040 817a 	bne.w	800d18c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ce98:	7bbb      	ldrb	r3, [r7, #14]
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f7ff fe83 	bl	800cba8 <USBD_CoreFindEP>
 800cea2:	4603      	mov	r3, r0
 800cea4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cea6:	7b7b      	ldrb	r3, [r7, #13]
 800cea8:	2bff      	cmp	r3, #255	; 0xff
 800ceaa:	f000 8174 	beq.w	800d196 <USBD_StdEPReq+0x32e>
 800ceae:	7b7b      	ldrb	r3, [r7, #13]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f040 8170 	bne.w	800d196 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ceb6:	7b7a      	ldrb	r2, [r7, #13]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cebe:	7b7a      	ldrb	r2, [r7, #13]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	32ae      	adds	r2, #174	; 0xae
 800cec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	f000 8163 	beq.w	800d196 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ced0:	7b7a      	ldrb	r2, [r7, #13]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	32ae      	adds	r2, #174	; 0xae
 800ced6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceda:	689b      	ldr	r3, [r3, #8]
 800cedc:	6839      	ldr	r1, [r7, #0]
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	4798      	blx	r3
 800cee2:	4603      	mov	r3, r0
 800cee4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cee6:	e156      	b.n	800d196 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	785b      	ldrb	r3, [r3, #1]
 800ceec:	2b03      	cmp	r3, #3
 800ceee:	d008      	beq.n	800cf02 <USBD_StdEPReq+0x9a>
 800cef0:	2b03      	cmp	r3, #3
 800cef2:	f300 8145 	bgt.w	800d180 <USBD_StdEPReq+0x318>
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	f000 809b 	beq.w	800d032 <USBD_StdEPReq+0x1ca>
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d03c      	beq.n	800cf7a <USBD_StdEPReq+0x112>
 800cf00:	e13e      	b.n	800d180 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	2b02      	cmp	r3, #2
 800cf0c:	d002      	beq.n	800cf14 <USBD_StdEPReq+0xac>
 800cf0e:	2b03      	cmp	r3, #3
 800cf10:	d016      	beq.n	800cf40 <USBD_StdEPReq+0xd8>
 800cf12:	e02c      	b.n	800cf6e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf14:	7bbb      	ldrb	r3, [r7, #14]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d00d      	beq.n	800cf36 <USBD_StdEPReq+0xce>
 800cf1a:	7bbb      	ldrb	r3, [r7, #14]
 800cf1c:	2b80      	cmp	r3, #128	; 0x80
 800cf1e:	d00a      	beq.n	800cf36 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cf20:	7bbb      	ldrb	r3, [r7, #14]
 800cf22:	4619      	mov	r1, r3
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f004 fea9 	bl	8011c7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf2a:	2180      	movs	r1, #128	; 0x80
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f004 fea5 	bl	8011c7c <USBD_LL_StallEP>
 800cf32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cf34:	e020      	b.n	800cf78 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cf36:	6839      	ldr	r1, [r7, #0]
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 fca4 	bl	800d886 <USBD_CtlError>
              break;
 800cf3e:	e01b      	b.n	800cf78 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	885b      	ldrh	r3, [r3, #2]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d10e      	bne.n	800cf66 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cf48:	7bbb      	ldrb	r3, [r7, #14]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d00b      	beq.n	800cf66 <USBD_StdEPReq+0xfe>
 800cf4e:	7bbb      	ldrb	r3, [r7, #14]
 800cf50:	2b80      	cmp	r3, #128	; 0x80
 800cf52:	d008      	beq.n	800cf66 <USBD_StdEPReq+0xfe>
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	88db      	ldrh	r3, [r3, #6]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d104      	bne.n	800cf66 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cf5c:	7bbb      	ldrb	r3, [r7, #14]
 800cf5e:	4619      	mov	r1, r3
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f004 fe8b 	bl	8011c7c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 fd58 	bl	800da1c <USBD_CtlSendStatus>

              break;
 800cf6c:	e004      	b.n	800cf78 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cf6e:	6839      	ldr	r1, [r7, #0]
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 fc88 	bl	800d886 <USBD_CtlError>
              break;
 800cf76:	bf00      	nop
          }
          break;
 800cf78:	e107      	b.n	800d18a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	2b02      	cmp	r3, #2
 800cf84:	d002      	beq.n	800cf8c <USBD_StdEPReq+0x124>
 800cf86:	2b03      	cmp	r3, #3
 800cf88:	d016      	beq.n	800cfb8 <USBD_StdEPReq+0x150>
 800cf8a:	e04b      	b.n	800d024 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf8c:	7bbb      	ldrb	r3, [r7, #14]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d00d      	beq.n	800cfae <USBD_StdEPReq+0x146>
 800cf92:	7bbb      	ldrb	r3, [r7, #14]
 800cf94:	2b80      	cmp	r3, #128	; 0x80
 800cf96:	d00a      	beq.n	800cfae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cf98:	7bbb      	ldrb	r3, [r7, #14]
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f004 fe6d 	bl	8011c7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cfa2:	2180      	movs	r1, #128	; 0x80
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f004 fe69 	bl	8011c7c <USBD_LL_StallEP>
 800cfaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cfac:	e040      	b.n	800d030 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cfae:	6839      	ldr	r1, [r7, #0]
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f000 fc68 	bl	800d886 <USBD_CtlError>
              break;
 800cfb6:	e03b      	b.n	800d030 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	885b      	ldrh	r3, [r3, #2]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d136      	bne.n	800d02e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cfc0:	7bbb      	ldrb	r3, [r7, #14]
 800cfc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d004      	beq.n	800cfd4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cfca:	7bbb      	ldrb	r3, [r7, #14]
 800cfcc:	4619      	mov	r1, r3
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f004 fe73 	bl	8011cba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f000 fd21 	bl	800da1c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cfda:	7bbb      	ldrb	r3, [r7, #14]
 800cfdc:	4619      	mov	r1, r3
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f7ff fde2 	bl	800cba8 <USBD_CoreFindEP>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cfe8:	7b7b      	ldrb	r3, [r7, #13]
 800cfea:	2bff      	cmp	r3, #255	; 0xff
 800cfec:	d01f      	beq.n	800d02e <USBD_StdEPReq+0x1c6>
 800cfee:	7b7b      	ldrb	r3, [r7, #13]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d11c      	bne.n	800d02e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cff4:	7b7a      	ldrb	r2, [r7, #13]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cffc:	7b7a      	ldrb	r2, [r7, #13]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	32ae      	adds	r2, #174	; 0xae
 800d002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d010      	beq.n	800d02e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d00c:	7b7a      	ldrb	r2, [r7, #13]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	32ae      	adds	r2, #174	; 0xae
 800d012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d016:	689b      	ldr	r3, [r3, #8]
 800d018:	6839      	ldr	r1, [r7, #0]
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	4798      	blx	r3
 800d01e:	4603      	mov	r3, r0
 800d020:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d022:	e004      	b.n	800d02e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d024:	6839      	ldr	r1, [r7, #0]
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f000 fc2d 	bl	800d886 <USBD_CtlError>
              break;
 800d02c:	e000      	b.n	800d030 <USBD_StdEPReq+0x1c8>
              break;
 800d02e:	bf00      	nop
          }
          break;
 800d030:	e0ab      	b.n	800d18a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	2b02      	cmp	r3, #2
 800d03c:	d002      	beq.n	800d044 <USBD_StdEPReq+0x1dc>
 800d03e:	2b03      	cmp	r3, #3
 800d040:	d032      	beq.n	800d0a8 <USBD_StdEPReq+0x240>
 800d042:	e097      	b.n	800d174 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d044:	7bbb      	ldrb	r3, [r7, #14]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d007      	beq.n	800d05a <USBD_StdEPReq+0x1f2>
 800d04a:	7bbb      	ldrb	r3, [r7, #14]
 800d04c:	2b80      	cmp	r3, #128	; 0x80
 800d04e:	d004      	beq.n	800d05a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d050:	6839      	ldr	r1, [r7, #0]
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f000 fc17 	bl	800d886 <USBD_CtlError>
                break;
 800d058:	e091      	b.n	800d17e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d05a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	da0b      	bge.n	800d07a <USBD_StdEPReq+0x212>
 800d062:	7bbb      	ldrb	r3, [r7, #14]
 800d064:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d068:	4613      	mov	r3, r2
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	4413      	add	r3, r2
 800d06e:	009b      	lsls	r3, r3, #2
 800d070:	3310      	adds	r3, #16
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	4413      	add	r3, r2
 800d076:	3304      	adds	r3, #4
 800d078:	e00b      	b.n	800d092 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d07a:	7bbb      	ldrb	r3, [r7, #14]
 800d07c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d080:	4613      	mov	r3, r2
 800d082:	009b      	lsls	r3, r3, #2
 800d084:	4413      	add	r3, r2
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d08c:	687a      	ldr	r2, [r7, #4]
 800d08e:	4413      	add	r3, r2
 800d090:	3304      	adds	r3, #4
 800d092:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	2200      	movs	r2, #0
 800d098:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	2202      	movs	r2, #2
 800d09e:	4619      	mov	r1, r3
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f000 fc61 	bl	800d968 <USBD_CtlSendData>
              break;
 800d0a6:	e06a      	b.n	800d17e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d0a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	da11      	bge.n	800d0d4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d0b0:	7bbb      	ldrb	r3, [r7, #14]
 800d0b2:	f003 020f 	and.w	r2, r3, #15
 800d0b6:	6879      	ldr	r1, [r7, #4]
 800d0b8:	4613      	mov	r3, r2
 800d0ba:	009b      	lsls	r3, r3, #2
 800d0bc:	4413      	add	r3, r2
 800d0be:	009b      	lsls	r3, r3, #2
 800d0c0:	440b      	add	r3, r1
 800d0c2:	3324      	adds	r3, #36	; 0x24
 800d0c4:	881b      	ldrh	r3, [r3, #0]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d117      	bne.n	800d0fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d0ca:	6839      	ldr	r1, [r7, #0]
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f000 fbda 	bl	800d886 <USBD_CtlError>
                  break;
 800d0d2:	e054      	b.n	800d17e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d0d4:	7bbb      	ldrb	r3, [r7, #14]
 800d0d6:	f003 020f 	and.w	r2, r3, #15
 800d0da:	6879      	ldr	r1, [r7, #4]
 800d0dc:	4613      	mov	r3, r2
 800d0de:	009b      	lsls	r3, r3, #2
 800d0e0:	4413      	add	r3, r2
 800d0e2:	009b      	lsls	r3, r3, #2
 800d0e4:	440b      	add	r3, r1
 800d0e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d0ea:	881b      	ldrh	r3, [r3, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d104      	bne.n	800d0fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d0f0:	6839      	ldr	r1, [r7, #0]
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 fbc7 	bl	800d886 <USBD_CtlError>
                  break;
 800d0f8:	e041      	b.n	800d17e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d0fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	da0b      	bge.n	800d11a <USBD_StdEPReq+0x2b2>
 800d102:	7bbb      	ldrb	r3, [r7, #14]
 800d104:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d108:	4613      	mov	r3, r2
 800d10a:	009b      	lsls	r3, r3, #2
 800d10c:	4413      	add	r3, r2
 800d10e:	009b      	lsls	r3, r3, #2
 800d110:	3310      	adds	r3, #16
 800d112:	687a      	ldr	r2, [r7, #4]
 800d114:	4413      	add	r3, r2
 800d116:	3304      	adds	r3, #4
 800d118:	e00b      	b.n	800d132 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d11a:	7bbb      	ldrb	r3, [r7, #14]
 800d11c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d120:	4613      	mov	r3, r2
 800d122:	009b      	lsls	r3, r3, #2
 800d124:	4413      	add	r3, r2
 800d126:	009b      	lsls	r3, r3, #2
 800d128:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d12c:	687a      	ldr	r2, [r7, #4]
 800d12e:	4413      	add	r3, r2
 800d130:	3304      	adds	r3, #4
 800d132:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d134:	7bbb      	ldrb	r3, [r7, #14]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d002      	beq.n	800d140 <USBD_StdEPReq+0x2d8>
 800d13a:	7bbb      	ldrb	r3, [r7, #14]
 800d13c:	2b80      	cmp	r3, #128	; 0x80
 800d13e:	d103      	bne.n	800d148 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	2200      	movs	r2, #0
 800d144:	601a      	str	r2, [r3, #0]
 800d146:	e00e      	b.n	800d166 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d148:	7bbb      	ldrb	r3, [r7, #14]
 800d14a:	4619      	mov	r1, r3
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f004 fdd3 	bl	8011cf8 <USBD_LL_IsStallEP>
 800d152:	4603      	mov	r3, r0
 800d154:	2b00      	cmp	r3, #0
 800d156:	d003      	beq.n	800d160 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	2201      	movs	r2, #1
 800d15c:	601a      	str	r2, [r3, #0]
 800d15e:	e002      	b.n	800d166 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	2200      	movs	r2, #0
 800d164:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	2202      	movs	r2, #2
 800d16a:	4619      	mov	r1, r3
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f000 fbfb 	bl	800d968 <USBD_CtlSendData>
              break;
 800d172:	e004      	b.n	800d17e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d174:	6839      	ldr	r1, [r7, #0]
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f000 fb85 	bl	800d886 <USBD_CtlError>
              break;
 800d17c:	bf00      	nop
          }
          break;
 800d17e:	e004      	b.n	800d18a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d180:	6839      	ldr	r1, [r7, #0]
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 fb7f 	bl	800d886 <USBD_CtlError>
          break;
 800d188:	bf00      	nop
      }
      break;
 800d18a:	e005      	b.n	800d198 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d18c:	6839      	ldr	r1, [r7, #0]
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f000 fb79 	bl	800d886 <USBD_CtlError>
      break;
 800d194:	e000      	b.n	800d198 <USBD_StdEPReq+0x330>
      break;
 800d196:	bf00      	nop
  }

  return ret;
 800d198:	7bfb      	ldrb	r3, [r7, #15]
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	3710      	adds	r7, #16
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
	...

0800d1a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b084      	sub	sp, #16
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	885b      	ldrh	r3, [r3, #2]
 800d1be:	0a1b      	lsrs	r3, r3, #8
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	3b01      	subs	r3, #1
 800d1c4:	2b0e      	cmp	r3, #14
 800d1c6:	f200 8152 	bhi.w	800d46e <USBD_GetDescriptor+0x2ca>
 800d1ca:	a201      	add	r2, pc, #4	; (adr r2, 800d1d0 <USBD_GetDescriptor+0x2c>)
 800d1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1d0:	0800d241 	.word	0x0800d241
 800d1d4:	0800d259 	.word	0x0800d259
 800d1d8:	0800d299 	.word	0x0800d299
 800d1dc:	0800d46f 	.word	0x0800d46f
 800d1e0:	0800d46f 	.word	0x0800d46f
 800d1e4:	0800d40f 	.word	0x0800d40f
 800d1e8:	0800d43b 	.word	0x0800d43b
 800d1ec:	0800d46f 	.word	0x0800d46f
 800d1f0:	0800d46f 	.word	0x0800d46f
 800d1f4:	0800d46f 	.word	0x0800d46f
 800d1f8:	0800d46f 	.word	0x0800d46f
 800d1fc:	0800d46f 	.word	0x0800d46f
 800d200:	0800d46f 	.word	0x0800d46f
 800d204:	0800d46f 	.word	0x0800d46f
 800d208:	0800d20d 	.word	0x0800d20d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d212:	69db      	ldr	r3, [r3, #28]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d00b      	beq.n	800d230 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d21e:	69db      	ldr	r3, [r3, #28]
 800d220:	687a      	ldr	r2, [r7, #4]
 800d222:	7c12      	ldrb	r2, [r2, #16]
 800d224:	f107 0108 	add.w	r1, r7, #8
 800d228:	4610      	mov	r0, r2
 800d22a:	4798      	blx	r3
 800d22c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d22e:	e126      	b.n	800d47e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d230:	6839      	ldr	r1, [r7, #0]
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f000 fb27 	bl	800d886 <USBD_CtlError>
        err++;
 800d238:	7afb      	ldrb	r3, [r7, #11]
 800d23a:	3301      	adds	r3, #1
 800d23c:	72fb      	strb	r3, [r7, #11]
      break;
 800d23e:	e11e      	b.n	800d47e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	687a      	ldr	r2, [r7, #4]
 800d24a:	7c12      	ldrb	r2, [r2, #16]
 800d24c:	f107 0108 	add.w	r1, r7, #8
 800d250:	4610      	mov	r0, r2
 800d252:	4798      	blx	r3
 800d254:	60f8      	str	r0, [r7, #12]
      break;
 800d256:	e112      	b.n	800d47e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	7c1b      	ldrb	r3, [r3, #16]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d10d      	bne.n	800d27c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d268:	f107 0208 	add.w	r2, r7, #8
 800d26c:	4610      	mov	r0, r2
 800d26e:	4798      	blx	r3
 800d270:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	3301      	adds	r3, #1
 800d276:	2202      	movs	r2, #2
 800d278:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d27a:	e100      	b.n	800d47e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d284:	f107 0208 	add.w	r2, r7, #8
 800d288:	4610      	mov	r0, r2
 800d28a:	4798      	blx	r3
 800d28c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	3301      	adds	r3, #1
 800d292:	2202      	movs	r2, #2
 800d294:	701a      	strb	r2, [r3, #0]
      break;
 800d296:	e0f2      	b.n	800d47e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	885b      	ldrh	r3, [r3, #2]
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	2b05      	cmp	r3, #5
 800d2a0:	f200 80ac 	bhi.w	800d3fc <USBD_GetDescriptor+0x258>
 800d2a4:	a201      	add	r2, pc, #4	; (adr r2, 800d2ac <USBD_GetDescriptor+0x108>)
 800d2a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2aa:	bf00      	nop
 800d2ac:	0800d2c5 	.word	0x0800d2c5
 800d2b0:	0800d2f9 	.word	0x0800d2f9
 800d2b4:	0800d32d 	.word	0x0800d32d
 800d2b8:	0800d361 	.word	0x0800d361
 800d2bc:	0800d395 	.word	0x0800d395
 800d2c0:	0800d3c9 	.word	0x0800d3c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d00b      	beq.n	800d2e8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	687a      	ldr	r2, [r7, #4]
 800d2da:	7c12      	ldrb	r2, [r2, #16]
 800d2dc:	f107 0108 	add.w	r1, r7, #8
 800d2e0:	4610      	mov	r0, r2
 800d2e2:	4798      	blx	r3
 800d2e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d2e6:	e091      	b.n	800d40c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d2e8:	6839      	ldr	r1, [r7, #0]
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 facb 	bl	800d886 <USBD_CtlError>
            err++;
 800d2f0:	7afb      	ldrb	r3, [r7, #11]
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	72fb      	strb	r3, [r7, #11]
          break;
 800d2f6:	e089      	b.n	800d40c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d2fe:	689b      	ldr	r3, [r3, #8]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d00b      	beq.n	800d31c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d30a:	689b      	ldr	r3, [r3, #8]
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	7c12      	ldrb	r2, [r2, #16]
 800d310:	f107 0108 	add.w	r1, r7, #8
 800d314:	4610      	mov	r0, r2
 800d316:	4798      	blx	r3
 800d318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d31a:	e077      	b.n	800d40c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d31c:	6839      	ldr	r1, [r7, #0]
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 fab1 	bl	800d886 <USBD_CtlError>
            err++;
 800d324:	7afb      	ldrb	r3, [r7, #11]
 800d326:	3301      	adds	r3, #1
 800d328:	72fb      	strb	r3, [r7, #11]
          break;
 800d32a:	e06f      	b.n	800d40c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d00b      	beq.n	800d350 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	687a      	ldr	r2, [r7, #4]
 800d342:	7c12      	ldrb	r2, [r2, #16]
 800d344:	f107 0108 	add.w	r1, r7, #8
 800d348:	4610      	mov	r0, r2
 800d34a:	4798      	blx	r3
 800d34c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d34e:	e05d      	b.n	800d40c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d350:	6839      	ldr	r1, [r7, #0]
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f000 fa97 	bl	800d886 <USBD_CtlError>
            err++;
 800d358:	7afb      	ldrb	r3, [r7, #11]
 800d35a:	3301      	adds	r3, #1
 800d35c:	72fb      	strb	r3, [r7, #11]
          break;
 800d35e:	e055      	b.n	800d40c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d366:	691b      	ldr	r3, [r3, #16]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d00b      	beq.n	800d384 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d372:	691b      	ldr	r3, [r3, #16]
 800d374:	687a      	ldr	r2, [r7, #4]
 800d376:	7c12      	ldrb	r2, [r2, #16]
 800d378:	f107 0108 	add.w	r1, r7, #8
 800d37c:	4610      	mov	r0, r2
 800d37e:	4798      	blx	r3
 800d380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d382:	e043      	b.n	800d40c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d384:	6839      	ldr	r1, [r7, #0]
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 fa7d 	bl	800d886 <USBD_CtlError>
            err++;
 800d38c:	7afb      	ldrb	r3, [r7, #11]
 800d38e:	3301      	adds	r3, #1
 800d390:	72fb      	strb	r3, [r7, #11]
          break;
 800d392:	e03b      	b.n	800d40c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d39a:	695b      	ldr	r3, [r3, #20]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d00b      	beq.n	800d3b8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3a6:	695b      	ldr	r3, [r3, #20]
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	7c12      	ldrb	r2, [r2, #16]
 800d3ac:	f107 0108 	add.w	r1, r7, #8
 800d3b0:	4610      	mov	r0, r2
 800d3b2:	4798      	blx	r3
 800d3b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3b6:	e029      	b.n	800d40c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d3b8:	6839      	ldr	r1, [r7, #0]
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f000 fa63 	bl	800d886 <USBD_CtlError>
            err++;
 800d3c0:	7afb      	ldrb	r3, [r7, #11]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	72fb      	strb	r3, [r7, #11]
          break;
 800d3c6:	e021      	b.n	800d40c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3ce:	699b      	ldr	r3, [r3, #24]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d00b      	beq.n	800d3ec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3da:	699b      	ldr	r3, [r3, #24]
 800d3dc:	687a      	ldr	r2, [r7, #4]
 800d3de:	7c12      	ldrb	r2, [r2, #16]
 800d3e0:	f107 0108 	add.w	r1, r7, #8
 800d3e4:	4610      	mov	r0, r2
 800d3e6:	4798      	blx	r3
 800d3e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3ea:	e00f      	b.n	800d40c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d3ec:	6839      	ldr	r1, [r7, #0]
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f000 fa49 	bl	800d886 <USBD_CtlError>
            err++;
 800d3f4:	7afb      	ldrb	r3, [r7, #11]
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	72fb      	strb	r3, [r7, #11]
          break;
 800d3fa:	e007      	b.n	800d40c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d3fc:	6839      	ldr	r1, [r7, #0]
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 fa41 	bl	800d886 <USBD_CtlError>
          err++;
 800d404:	7afb      	ldrb	r3, [r7, #11]
 800d406:	3301      	adds	r3, #1
 800d408:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d40a:	bf00      	nop
      }
      break;
 800d40c:	e037      	b.n	800d47e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	7c1b      	ldrb	r3, [r3, #16]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d109      	bne.n	800d42a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d41c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d41e:	f107 0208 	add.w	r2, r7, #8
 800d422:	4610      	mov	r0, r2
 800d424:	4798      	blx	r3
 800d426:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d428:	e029      	b.n	800d47e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d42a:	6839      	ldr	r1, [r7, #0]
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f000 fa2a 	bl	800d886 <USBD_CtlError>
        err++;
 800d432:	7afb      	ldrb	r3, [r7, #11]
 800d434:	3301      	adds	r3, #1
 800d436:	72fb      	strb	r3, [r7, #11]
      break;
 800d438:	e021      	b.n	800d47e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	7c1b      	ldrb	r3, [r3, #16]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d10d      	bne.n	800d45e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d44a:	f107 0208 	add.w	r2, r7, #8
 800d44e:	4610      	mov	r0, r2
 800d450:	4798      	blx	r3
 800d452:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	3301      	adds	r3, #1
 800d458:	2207      	movs	r2, #7
 800d45a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d45c:	e00f      	b.n	800d47e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d45e:	6839      	ldr	r1, [r7, #0]
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f000 fa10 	bl	800d886 <USBD_CtlError>
        err++;
 800d466:	7afb      	ldrb	r3, [r7, #11]
 800d468:	3301      	adds	r3, #1
 800d46a:	72fb      	strb	r3, [r7, #11]
      break;
 800d46c:	e007      	b.n	800d47e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d46e:	6839      	ldr	r1, [r7, #0]
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 fa08 	bl	800d886 <USBD_CtlError>
      err++;
 800d476:	7afb      	ldrb	r3, [r7, #11]
 800d478:	3301      	adds	r3, #1
 800d47a:	72fb      	strb	r3, [r7, #11]
      break;
 800d47c:	bf00      	nop
  }

  if (err != 0U)
 800d47e:	7afb      	ldrb	r3, [r7, #11]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d11e      	bne.n	800d4c2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	88db      	ldrh	r3, [r3, #6]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d016      	beq.n	800d4ba <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d48c:	893b      	ldrh	r3, [r7, #8]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d00e      	beq.n	800d4b0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	88da      	ldrh	r2, [r3, #6]
 800d496:	893b      	ldrh	r3, [r7, #8]
 800d498:	4293      	cmp	r3, r2
 800d49a:	bf28      	it	cs
 800d49c:	4613      	movcs	r3, r2
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d4a2:	893b      	ldrh	r3, [r7, #8]
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	68f9      	ldr	r1, [r7, #12]
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 fa5d 	bl	800d968 <USBD_CtlSendData>
 800d4ae:	e009      	b.n	800d4c4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d4b0:	6839      	ldr	r1, [r7, #0]
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 f9e7 	bl	800d886 <USBD_CtlError>
 800d4b8:	e004      	b.n	800d4c4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f000 faae 	bl	800da1c <USBD_CtlSendStatus>
 800d4c0:	e000      	b.n	800d4c4 <USBD_GetDescriptor+0x320>
    return;
 800d4c2:	bf00      	nop
  }
}
 800d4c4:	3710      	adds	r7, #16
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop

0800d4cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	889b      	ldrh	r3, [r3, #4]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d131      	bne.n	800d542 <USBD_SetAddress+0x76>
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	88db      	ldrh	r3, [r3, #6]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d12d      	bne.n	800d542 <USBD_SetAddress+0x76>
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	885b      	ldrh	r3, [r3, #2]
 800d4ea:	2b7f      	cmp	r3, #127	; 0x7f
 800d4ec:	d829      	bhi.n	800d542 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	885b      	ldrh	r3, [r3, #2]
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d500:	b2db      	uxtb	r3, r3
 800d502:	2b03      	cmp	r3, #3
 800d504:	d104      	bne.n	800d510 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d506:	6839      	ldr	r1, [r7, #0]
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f000 f9bc 	bl	800d886 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d50e:	e01d      	b.n	800d54c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	7bfa      	ldrb	r2, [r7, #15]
 800d514:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d518:	7bfb      	ldrb	r3, [r7, #15]
 800d51a:	4619      	mov	r1, r3
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f004 fc17 	bl	8011d50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f000 fa7a 	bl	800da1c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d528:	7bfb      	ldrb	r3, [r7, #15]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d004      	beq.n	800d538 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2202      	movs	r2, #2
 800d532:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d536:	e009      	b.n	800d54c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2201      	movs	r2, #1
 800d53c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d540:	e004      	b.n	800d54c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d542:	6839      	ldr	r1, [r7, #0]
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f000 f99e 	bl	800d886 <USBD_CtlError>
  }
}
 800d54a:	bf00      	nop
 800d54c:	bf00      	nop
 800d54e:	3710      	adds	r7, #16
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d55e:	2300      	movs	r3, #0
 800d560:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	885b      	ldrh	r3, [r3, #2]
 800d566:	b2da      	uxtb	r2, r3
 800d568:	4b4e      	ldr	r3, [pc, #312]	; (800d6a4 <USBD_SetConfig+0x150>)
 800d56a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d56c:	4b4d      	ldr	r3, [pc, #308]	; (800d6a4 <USBD_SetConfig+0x150>)
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	2b01      	cmp	r3, #1
 800d572:	d905      	bls.n	800d580 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d574:	6839      	ldr	r1, [r7, #0]
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 f985 	bl	800d886 <USBD_CtlError>
    return USBD_FAIL;
 800d57c:	2303      	movs	r3, #3
 800d57e:	e08c      	b.n	800d69a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d586:	b2db      	uxtb	r3, r3
 800d588:	2b02      	cmp	r3, #2
 800d58a:	d002      	beq.n	800d592 <USBD_SetConfig+0x3e>
 800d58c:	2b03      	cmp	r3, #3
 800d58e:	d029      	beq.n	800d5e4 <USBD_SetConfig+0x90>
 800d590:	e075      	b.n	800d67e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d592:	4b44      	ldr	r3, [pc, #272]	; (800d6a4 <USBD_SetConfig+0x150>)
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d020      	beq.n	800d5dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d59a:	4b42      	ldr	r3, [pc, #264]	; (800d6a4 <USBD_SetConfig+0x150>)
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	461a      	mov	r2, r3
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d5a4:	4b3f      	ldr	r3, [pc, #252]	; (800d6a4 <USBD_SetConfig+0x150>)
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f7fe ffbd 	bl	800c52a <USBD_SetClassConfig>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d5b4:	7bfb      	ldrb	r3, [r7, #15]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d008      	beq.n	800d5cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d5ba:	6839      	ldr	r1, [r7, #0]
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f000 f962 	bl	800d886 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2202      	movs	r2, #2
 800d5c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d5ca:	e065      	b.n	800d698 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f000 fa25 	bl	800da1c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2203      	movs	r2, #3
 800d5d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d5da:	e05d      	b.n	800d698 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f000 fa1d 	bl	800da1c <USBD_CtlSendStatus>
      break;
 800d5e2:	e059      	b.n	800d698 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d5e4:	4b2f      	ldr	r3, [pc, #188]	; (800d6a4 <USBD_SetConfig+0x150>)
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d112      	bne.n	800d612 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2202      	movs	r2, #2
 800d5f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d5f4:	4b2b      	ldr	r3, [pc, #172]	; (800d6a4 <USBD_SetConfig+0x150>)
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d5fe:	4b29      	ldr	r3, [pc, #164]	; (800d6a4 <USBD_SetConfig+0x150>)
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	4619      	mov	r1, r3
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f7fe ffac 	bl	800c562 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f000 fa06 	bl	800da1c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d610:	e042      	b.n	800d698 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d612:	4b24      	ldr	r3, [pc, #144]	; (800d6a4 <USBD_SetConfig+0x150>)
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	461a      	mov	r2, r3
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d02a      	beq.n	800d676 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	b2db      	uxtb	r3, r3
 800d626:	4619      	mov	r1, r3
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f7fe ff9a 	bl	800c562 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d62e:	4b1d      	ldr	r3, [pc, #116]	; (800d6a4 <USBD_SetConfig+0x150>)
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	461a      	mov	r2, r3
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d638:	4b1a      	ldr	r3, [pc, #104]	; (800d6a4 <USBD_SetConfig+0x150>)
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	4619      	mov	r1, r3
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f7fe ff73 	bl	800c52a <USBD_SetClassConfig>
 800d644:	4603      	mov	r3, r0
 800d646:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d648:	7bfb      	ldrb	r3, [r7, #15]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d00f      	beq.n	800d66e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d64e:	6839      	ldr	r1, [r7, #0]
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 f918 	bl	800d886 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	685b      	ldr	r3, [r3, #4]
 800d65a:	b2db      	uxtb	r3, r3
 800d65c:	4619      	mov	r1, r3
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f7fe ff7f 	bl	800c562 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2202      	movs	r2, #2
 800d668:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d66c:	e014      	b.n	800d698 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f000 f9d4 	bl	800da1c <USBD_CtlSendStatus>
      break;
 800d674:	e010      	b.n	800d698 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f000 f9d0 	bl	800da1c <USBD_CtlSendStatus>
      break;
 800d67c:	e00c      	b.n	800d698 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d67e:	6839      	ldr	r1, [r7, #0]
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 f900 	bl	800d886 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d686:	4b07      	ldr	r3, [pc, #28]	; (800d6a4 <USBD_SetConfig+0x150>)
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	4619      	mov	r1, r3
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f7fe ff68 	bl	800c562 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d692:	2303      	movs	r3, #3
 800d694:	73fb      	strb	r3, [r7, #15]
      break;
 800d696:	bf00      	nop
  }

  return ret;
 800d698:	7bfb      	ldrb	r3, [r7, #15]
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3710      	adds	r7, #16
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	2000066c 	.word	0x2000066c

0800d6a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	88db      	ldrh	r3, [r3, #6]
 800d6b6:	2b01      	cmp	r3, #1
 800d6b8:	d004      	beq.n	800d6c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d6ba:	6839      	ldr	r1, [r7, #0]
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 f8e2 	bl	800d886 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d6c2:	e023      	b.n	800d70c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	2b02      	cmp	r3, #2
 800d6ce:	dc02      	bgt.n	800d6d6 <USBD_GetConfig+0x2e>
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	dc03      	bgt.n	800d6dc <USBD_GetConfig+0x34>
 800d6d4:	e015      	b.n	800d702 <USBD_GetConfig+0x5a>
 800d6d6:	2b03      	cmp	r3, #3
 800d6d8:	d00b      	beq.n	800d6f2 <USBD_GetConfig+0x4a>
 800d6da:	e012      	b.n	800d702 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	3308      	adds	r3, #8
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 f93c 	bl	800d968 <USBD_CtlSendData>
        break;
 800d6f0:	e00c      	b.n	800d70c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	3304      	adds	r3, #4
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 f934 	bl	800d968 <USBD_CtlSendData>
        break;
 800d700:	e004      	b.n	800d70c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d702:	6839      	ldr	r1, [r7, #0]
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f000 f8be 	bl	800d886 <USBD_CtlError>
        break;
 800d70a:	bf00      	nop
}
 800d70c:	bf00      	nop
 800d70e:	3708      	adds	r7, #8
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b082      	sub	sp, #8
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d724:	b2db      	uxtb	r3, r3
 800d726:	3b01      	subs	r3, #1
 800d728:	2b02      	cmp	r3, #2
 800d72a:	d81e      	bhi.n	800d76a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	88db      	ldrh	r3, [r3, #6]
 800d730:	2b02      	cmp	r3, #2
 800d732:	d004      	beq.n	800d73e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d734:	6839      	ldr	r1, [r7, #0]
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 f8a5 	bl	800d886 <USBD_CtlError>
        break;
 800d73c:	e01a      	b.n	800d774 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2201      	movs	r2, #1
 800d742:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d005      	beq.n	800d75a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	68db      	ldr	r3, [r3, #12]
 800d752:	f043 0202 	orr.w	r2, r3, #2
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	330c      	adds	r3, #12
 800d75e:	2202      	movs	r2, #2
 800d760:	4619      	mov	r1, r3
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f000 f900 	bl	800d968 <USBD_CtlSendData>
      break;
 800d768:	e004      	b.n	800d774 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d76a:	6839      	ldr	r1, [r7, #0]
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f000 f88a 	bl	800d886 <USBD_CtlError>
      break;
 800d772:	bf00      	nop
  }
}
 800d774:	bf00      	nop
 800d776:	3708      	adds	r7, #8
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	885b      	ldrh	r3, [r3, #2]
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d107      	bne.n	800d79e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2201      	movs	r2, #1
 800d792:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f000 f940 	bl	800da1c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d79c:	e013      	b.n	800d7c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	885b      	ldrh	r3, [r3, #2]
 800d7a2:	2b02      	cmp	r3, #2
 800d7a4:	d10b      	bne.n	800d7be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	889b      	ldrh	r3, [r3, #4]
 800d7aa:	0a1b      	lsrs	r3, r3, #8
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	b2da      	uxtb	r2, r3
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f000 f930 	bl	800da1c <USBD_CtlSendStatus>
}
 800d7bc:	e003      	b.n	800d7c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d7be:	6839      	ldr	r1, [r7, #0]
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f000 f860 	bl	800d886 <USBD_CtlError>
}
 800d7c6:	bf00      	nop
 800d7c8:	3708      	adds	r7, #8
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}

0800d7ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b082      	sub	sp, #8
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]
 800d7d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7de:	b2db      	uxtb	r3, r3
 800d7e0:	3b01      	subs	r3, #1
 800d7e2:	2b02      	cmp	r3, #2
 800d7e4:	d80b      	bhi.n	800d7fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	885b      	ldrh	r3, [r3, #2]
 800d7ea:	2b01      	cmp	r3, #1
 800d7ec:	d10c      	bne.n	800d808 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f000 f910 	bl	800da1c <USBD_CtlSendStatus>
      }
      break;
 800d7fc:	e004      	b.n	800d808 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d7fe:	6839      	ldr	r1, [r7, #0]
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f000 f840 	bl	800d886 <USBD_CtlError>
      break;
 800d806:	e000      	b.n	800d80a <USBD_ClrFeature+0x3c>
      break;
 800d808:	bf00      	nop
  }
}
 800d80a:	bf00      	nop
 800d80c:	3708      	adds	r7, #8
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}

0800d812 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d812:	b580      	push	{r7, lr}
 800d814:	b084      	sub	sp, #16
 800d816:	af00      	add	r7, sp, #0
 800d818:	6078      	str	r0, [r7, #4]
 800d81a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	781a      	ldrb	r2, [r3, #0]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	3301      	adds	r3, #1
 800d82c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	781a      	ldrb	r2, [r3, #0]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	3301      	adds	r3, #1
 800d83a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d83c:	68f8      	ldr	r0, [r7, #12]
 800d83e:	f7ff fa17 	bl	800cc70 <SWAPBYTE>
 800d842:	4603      	mov	r3, r0
 800d844:	461a      	mov	r2, r3
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	3301      	adds	r3, #1
 800d84e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	3301      	adds	r3, #1
 800d854:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d856:	68f8      	ldr	r0, [r7, #12]
 800d858:	f7ff fa0a 	bl	800cc70 <SWAPBYTE>
 800d85c:	4603      	mov	r3, r0
 800d85e:	461a      	mov	r2, r3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	3301      	adds	r3, #1
 800d868:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	3301      	adds	r3, #1
 800d86e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d870:	68f8      	ldr	r0, [r7, #12]
 800d872:	f7ff f9fd 	bl	800cc70 <SWAPBYTE>
 800d876:	4603      	mov	r3, r0
 800d878:	461a      	mov	r2, r3
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	80da      	strh	r2, [r3, #6]
}
 800d87e:	bf00      	nop
 800d880:	3710      	adds	r7, #16
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}

0800d886 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d886:	b580      	push	{r7, lr}
 800d888:	b082      	sub	sp, #8
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	6078      	str	r0, [r7, #4]
 800d88e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d890:	2180      	movs	r1, #128	; 0x80
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f004 f9f2 	bl	8011c7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d898:	2100      	movs	r1, #0
 800d89a:	6878      	ldr	r0, [r7, #4]
 800d89c:	f004 f9ee 	bl	8011c7c <USBD_LL_StallEP>
}
 800d8a0:	bf00      	nop
 800d8a2:	3708      	adds	r7, #8
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b086      	sub	sp, #24
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	60f8      	str	r0, [r7, #12]
 800d8b0:	60b9      	str	r1, [r7, #8]
 800d8b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d036      	beq.n	800d92c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d8c2:	6938      	ldr	r0, [r7, #16]
 800d8c4:	f000 f836 	bl	800d934 <USBD_GetLen>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	b29b      	uxth	r3, r3
 800d8ce:	005b      	lsls	r3, r3, #1
 800d8d0:	b29a      	uxth	r2, r3
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d8d6:	7dfb      	ldrb	r3, [r7, #23]
 800d8d8:	68ba      	ldr	r2, [r7, #8]
 800d8da:	4413      	add	r3, r2
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	7812      	ldrb	r2, [r2, #0]
 800d8e0:	701a      	strb	r2, [r3, #0]
  idx++;
 800d8e2:	7dfb      	ldrb	r3, [r7, #23]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d8e8:	7dfb      	ldrb	r3, [r7, #23]
 800d8ea:	68ba      	ldr	r2, [r7, #8]
 800d8ec:	4413      	add	r3, r2
 800d8ee:	2203      	movs	r2, #3
 800d8f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800d8f2:	7dfb      	ldrb	r3, [r7, #23]
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d8f8:	e013      	b.n	800d922 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d8fa:	7dfb      	ldrb	r3, [r7, #23]
 800d8fc:	68ba      	ldr	r2, [r7, #8]
 800d8fe:	4413      	add	r3, r2
 800d900:	693a      	ldr	r2, [r7, #16]
 800d902:	7812      	ldrb	r2, [r2, #0]
 800d904:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	3301      	adds	r3, #1
 800d90a:	613b      	str	r3, [r7, #16]
    idx++;
 800d90c:	7dfb      	ldrb	r3, [r7, #23]
 800d90e:	3301      	adds	r3, #1
 800d910:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d912:	7dfb      	ldrb	r3, [r7, #23]
 800d914:	68ba      	ldr	r2, [r7, #8]
 800d916:	4413      	add	r3, r2
 800d918:	2200      	movs	r2, #0
 800d91a:	701a      	strb	r2, [r3, #0]
    idx++;
 800d91c:	7dfb      	ldrb	r3, [r7, #23]
 800d91e:	3301      	adds	r3, #1
 800d920:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	781b      	ldrb	r3, [r3, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d1e7      	bne.n	800d8fa <USBD_GetString+0x52>
 800d92a:	e000      	b.n	800d92e <USBD_GetString+0x86>
    return;
 800d92c:	bf00      	nop
  }
}
 800d92e:	3718      	adds	r7, #24
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d934:	b480      	push	{r7}
 800d936:	b085      	sub	sp, #20
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d93c:	2300      	movs	r3, #0
 800d93e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d944:	e005      	b.n	800d952 <USBD_GetLen+0x1e>
  {
    len++;
 800d946:	7bfb      	ldrb	r3, [r7, #15]
 800d948:	3301      	adds	r3, #1
 800d94a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	3301      	adds	r3, #1
 800d950:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d1f5      	bne.n	800d946 <USBD_GetLen+0x12>
  }

  return len;
 800d95a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3714      	adds	r7, #20
 800d960:	46bd      	mov	sp, r7
 800d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d966:	4770      	bx	lr

0800d968 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b084      	sub	sp, #16
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	2202      	movs	r2, #2
 800d978:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	687a      	ldr	r2, [r7, #4]
 800d986:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	68ba      	ldr	r2, [r7, #8]
 800d98c:	2100      	movs	r1, #0
 800d98e:	68f8      	ldr	r0, [r7, #12]
 800d990:	f004 f9fd 	bl	8011d8e <USBD_LL_Transmit>

  return USBD_OK;
 800d994:	2300      	movs	r3, #0
}
 800d996:	4618      	mov	r0, r3
 800d998:	3710      	adds	r7, #16
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}

0800d99e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d99e:	b580      	push	{r7, lr}
 800d9a0:	b084      	sub	sp, #16
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	60f8      	str	r0, [r7, #12]
 800d9a6:	60b9      	str	r1, [r7, #8]
 800d9a8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	68ba      	ldr	r2, [r7, #8]
 800d9ae:	2100      	movs	r1, #0
 800d9b0:	68f8      	ldr	r0, [r7, #12]
 800d9b2:	f004 f9ec 	bl	8011d8e <USBD_LL_Transmit>

  return USBD_OK;
 800d9b6:	2300      	movs	r3, #0
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3710      	adds	r7, #16
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b084      	sub	sp, #16
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	60f8      	str	r0, [r7, #12]
 800d9c8:	60b9      	str	r1, [r7, #8]
 800d9ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2203      	movs	r2, #3
 800d9d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	687a      	ldr	r2, [r7, #4]
 800d9d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	68ba      	ldr	r2, [r7, #8]
 800d9e8:	2100      	movs	r1, #0
 800d9ea:	68f8      	ldr	r0, [r7, #12]
 800d9ec:	f004 f9f0 	bl	8011dd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d9f0:	2300      	movs	r3, #0
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3710      	adds	r7, #16
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}

0800d9fa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d9fa:	b580      	push	{r7, lr}
 800d9fc:	b084      	sub	sp, #16
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	60f8      	str	r0, [r7, #12]
 800da02:	60b9      	str	r1, [r7, #8]
 800da04:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	68ba      	ldr	r2, [r7, #8]
 800da0a:	2100      	movs	r1, #0
 800da0c:	68f8      	ldr	r0, [r7, #12]
 800da0e:	f004 f9df 	bl	8011dd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da12:	2300      	movs	r3, #0
}
 800da14:	4618      	mov	r0, r3
 800da16:	3710      	adds	r7, #16
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}

0800da1c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b082      	sub	sp, #8
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2204      	movs	r2, #4
 800da28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800da2c:	2300      	movs	r3, #0
 800da2e:	2200      	movs	r2, #0
 800da30:	2100      	movs	r1, #0
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f004 f9ab 	bl	8011d8e <USBD_LL_Transmit>

  return USBD_OK;
 800da38:	2300      	movs	r3, #0
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3708      	adds	r7, #8
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}

0800da42 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800da42:	b580      	push	{r7, lr}
 800da44:	b082      	sub	sp, #8
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2205      	movs	r2, #5
 800da4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da52:	2300      	movs	r3, #0
 800da54:	2200      	movs	r2, #0
 800da56:	2100      	movs	r1, #0
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f004 f9b9 	bl	8011dd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da5e:	2300      	movs	r3, #0
}
 800da60:	4618      	mov	r0, r3
 800da62:	3708      	adds	r7, #8
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800da68:	b480      	push	{r7}
 800da6a:	b087      	sub	sp, #28
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	4613      	mov	r3, r2
 800da74:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800da76:	2301      	movs	r3, #1
 800da78:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800da7a:	2300      	movs	r3, #0
 800da7c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800da7e:	4b1f      	ldr	r3, [pc, #124]	; (800dafc <FATFS_LinkDriverEx+0x94>)
 800da80:	7a5b      	ldrb	r3, [r3, #9]
 800da82:	b2db      	uxtb	r3, r3
 800da84:	2b00      	cmp	r3, #0
 800da86:	d131      	bne.n	800daec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800da88:	4b1c      	ldr	r3, [pc, #112]	; (800dafc <FATFS_LinkDriverEx+0x94>)
 800da8a:	7a5b      	ldrb	r3, [r3, #9]
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	461a      	mov	r2, r3
 800da90:	4b1a      	ldr	r3, [pc, #104]	; (800dafc <FATFS_LinkDriverEx+0x94>)
 800da92:	2100      	movs	r1, #0
 800da94:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800da96:	4b19      	ldr	r3, [pc, #100]	; (800dafc <FATFS_LinkDriverEx+0x94>)
 800da98:	7a5b      	ldrb	r3, [r3, #9]
 800da9a:	b2db      	uxtb	r3, r3
 800da9c:	4a17      	ldr	r2, [pc, #92]	; (800dafc <FATFS_LinkDriverEx+0x94>)
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	4413      	add	r3, r2
 800daa2:	68fa      	ldr	r2, [r7, #12]
 800daa4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800daa6:	4b15      	ldr	r3, [pc, #84]	; (800dafc <FATFS_LinkDriverEx+0x94>)
 800daa8:	7a5b      	ldrb	r3, [r3, #9]
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	461a      	mov	r2, r3
 800daae:	4b13      	ldr	r3, [pc, #76]	; (800dafc <FATFS_LinkDriverEx+0x94>)
 800dab0:	4413      	add	r3, r2
 800dab2:	79fa      	ldrb	r2, [r7, #7]
 800dab4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dab6:	4b11      	ldr	r3, [pc, #68]	; (800dafc <FATFS_LinkDriverEx+0x94>)
 800dab8:	7a5b      	ldrb	r3, [r3, #9]
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	1c5a      	adds	r2, r3, #1
 800dabe:	b2d1      	uxtb	r1, r2
 800dac0:	4a0e      	ldr	r2, [pc, #56]	; (800dafc <FATFS_LinkDriverEx+0x94>)
 800dac2:	7251      	strb	r1, [r2, #9]
 800dac4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dac6:	7dbb      	ldrb	r3, [r7, #22]
 800dac8:	3330      	adds	r3, #48	; 0x30
 800daca:	b2da      	uxtb	r2, r3
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	3301      	adds	r3, #1
 800dad4:	223a      	movs	r2, #58	; 0x3a
 800dad6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	3302      	adds	r3, #2
 800dadc:	222f      	movs	r2, #47	; 0x2f
 800dade:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	3303      	adds	r3, #3
 800dae4:	2200      	movs	r2, #0
 800dae6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dae8:	2300      	movs	r3, #0
 800daea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800daec:	7dfb      	ldrb	r3, [r7, #23]
}
 800daee:	4618      	mov	r0, r3
 800daf0:	371c      	adds	r7, #28
 800daf2:	46bd      	mov	sp, r7
 800daf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf8:	4770      	bx	lr
 800dafa:	bf00      	nop
 800dafc:	20000670 	.word	0x20000670

0800db00 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b082      	sub	sp, #8
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800db0a:	2200      	movs	r2, #0
 800db0c:	6839      	ldr	r1, [r7, #0]
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f7ff ffaa 	bl	800da68 <FATFS_LinkDriverEx>
 800db14:	4603      	mov	r3, r0
}
 800db16:	4618      	mov	r0, r3
 800db18:	3708      	adds	r7, #8
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
	...

0800db20 <__NVIC_SetPriority>:
{
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	4603      	mov	r3, r0
 800db28:	6039      	str	r1, [r7, #0]
 800db2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800db2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db30:	2b00      	cmp	r3, #0
 800db32:	db0a      	blt.n	800db4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	b2da      	uxtb	r2, r3
 800db38:	490c      	ldr	r1, [pc, #48]	; (800db6c <__NVIC_SetPriority+0x4c>)
 800db3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db3e:	0112      	lsls	r2, r2, #4
 800db40:	b2d2      	uxtb	r2, r2
 800db42:	440b      	add	r3, r1
 800db44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800db48:	e00a      	b.n	800db60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	b2da      	uxtb	r2, r3
 800db4e:	4908      	ldr	r1, [pc, #32]	; (800db70 <__NVIC_SetPriority+0x50>)
 800db50:	79fb      	ldrb	r3, [r7, #7]
 800db52:	f003 030f 	and.w	r3, r3, #15
 800db56:	3b04      	subs	r3, #4
 800db58:	0112      	lsls	r2, r2, #4
 800db5a:	b2d2      	uxtb	r2, r2
 800db5c:	440b      	add	r3, r1
 800db5e:	761a      	strb	r2, [r3, #24]
}
 800db60:	bf00      	nop
 800db62:	370c      	adds	r7, #12
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr
 800db6c:	e000e100 	.word	0xe000e100
 800db70:	e000ed00 	.word	0xe000ed00

0800db74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800db74:	b580      	push	{r7, lr}
 800db76:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800db78:	4b05      	ldr	r3, [pc, #20]	; (800db90 <SysTick_Handler+0x1c>)
 800db7a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800db7c:	f002 fad8 	bl	8010130 <xTaskGetSchedulerState>
 800db80:	4603      	mov	r3, r0
 800db82:	2b01      	cmp	r3, #1
 800db84:	d001      	beq.n	800db8a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800db86:	f003 f9af 	bl	8010ee8 <xPortSysTickHandler>
  }
}
 800db8a:	bf00      	nop
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	e000e010 	.word	0xe000e010

0800db94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800db94:	b580      	push	{r7, lr}
 800db96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800db98:	2100      	movs	r1, #0
 800db9a:	f06f 0004 	mvn.w	r0, #4
 800db9e:	f7ff ffbf 	bl	800db20 <__NVIC_SetPriority>
#endif
}
 800dba2:	bf00      	nop
 800dba4:	bd80      	pop	{r7, pc}
	...

0800dba8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dba8:	b480      	push	{r7}
 800dbaa:	b083      	sub	sp, #12
 800dbac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbae:	f3ef 8305 	mrs	r3, IPSR
 800dbb2:	603b      	str	r3, [r7, #0]
  return(result);
 800dbb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d003      	beq.n	800dbc2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800dbba:	f06f 0305 	mvn.w	r3, #5
 800dbbe:	607b      	str	r3, [r7, #4]
 800dbc0:	e00c      	b.n	800dbdc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dbc2:	4b0a      	ldr	r3, [pc, #40]	; (800dbec <osKernelInitialize+0x44>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d105      	bne.n	800dbd6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dbca:	4b08      	ldr	r3, [pc, #32]	; (800dbec <osKernelInitialize+0x44>)
 800dbcc:	2201      	movs	r2, #1
 800dbce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	607b      	str	r3, [r7, #4]
 800dbd4:	e002      	b.n	800dbdc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800dbd6:	f04f 33ff 	mov.w	r3, #4294967295
 800dbda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dbdc:	687b      	ldr	r3, [r7, #4]
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	370c      	adds	r7, #12
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr
 800dbea:	bf00      	nop
 800dbec:	2000067c 	.word	0x2000067c

0800dbf0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b082      	sub	sp, #8
 800dbf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbf6:	f3ef 8305 	mrs	r3, IPSR
 800dbfa:	603b      	str	r3, [r7, #0]
  return(result);
 800dbfc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d003      	beq.n	800dc0a <osKernelStart+0x1a>
    stat = osErrorISR;
 800dc02:	f06f 0305 	mvn.w	r3, #5
 800dc06:	607b      	str	r3, [r7, #4]
 800dc08:	e010      	b.n	800dc2c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dc0a:	4b0b      	ldr	r3, [pc, #44]	; (800dc38 <osKernelStart+0x48>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d109      	bne.n	800dc26 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dc12:	f7ff ffbf 	bl	800db94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dc16:	4b08      	ldr	r3, [pc, #32]	; (800dc38 <osKernelStart+0x48>)
 800dc18:	2202      	movs	r2, #2
 800dc1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dc1c:	f001 fd8e 	bl	800f73c <vTaskStartScheduler>
      stat = osOK;
 800dc20:	2300      	movs	r3, #0
 800dc22:	607b      	str	r3, [r7, #4]
 800dc24:	e002      	b.n	800dc2c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dc26:	f04f 33ff 	mov.w	r3, #4294967295
 800dc2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dc2c:	687b      	ldr	r3, [r7, #4]
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3708      	adds	r7, #8
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}
 800dc36:	bf00      	nop
 800dc38:	2000067c 	.word	0x2000067c

0800dc3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b08e      	sub	sp, #56	; 0x38
 800dc40:	af04      	add	r7, sp, #16
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc4c:	f3ef 8305 	mrs	r3, IPSR
 800dc50:	617b      	str	r3, [r7, #20]
  return(result);
 800dc52:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d17e      	bne.n	800dd56 <osThreadNew+0x11a>
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d07b      	beq.n	800dd56 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dc5e:	2380      	movs	r3, #128	; 0x80
 800dc60:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dc62:	2318      	movs	r3, #24
 800dc64:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dc66:	2300      	movs	r3, #0
 800dc68:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800dc6a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc6e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d045      	beq.n	800dd02 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d002      	beq.n	800dc84 <osThreadNew+0x48>
        name = attr->name;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	699b      	ldr	r3, [r3, #24]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d002      	beq.n	800dc92 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	699b      	ldr	r3, [r3, #24]
 800dc90:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dc92:	69fb      	ldr	r3, [r7, #28]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d008      	beq.n	800dcaa <osThreadNew+0x6e>
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	2b38      	cmp	r3, #56	; 0x38
 800dc9c:	d805      	bhi.n	800dcaa <osThreadNew+0x6e>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	f003 0301 	and.w	r3, r3, #1
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d001      	beq.n	800dcae <osThreadNew+0x72>
        return (NULL);
 800dcaa:	2300      	movs	r3, #0
 800dcac:	e054      	b.n	800dd58 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	695b      	ldr	r3, [r3, #20]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d003      	beq.n	800dcbe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	695b      	ldr	r3, [r3, #20]
 800dcba:	089b      	lsrs	r3, r3, #2
 800dcbc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	689b      	ldr	r3, [r3, #8]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d00e      	beq.n	800dce4 <osThreadNew+0xa8>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	68db      	ldr	r3, [r3, #12]
 800dcca:	2bbb      	cmp	r3, #187	; 0xbb
 800dccc:	d90a      	bls.n	800dce4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d006      	beq.n	800dce4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	695b      	ldr	r3, [r3, #20]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d002      	beq.n	800dce4 <osThreadNew+0xa8>
        mem = 1;
 800dcde:	2301      	movs	r3, #1
 800dce0:	61bb      	str	r3, [r7, #24]
 800dce2:	e010      	b.n	800dd06 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	689b      	ldr	r3, [r3, #8]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d10c      	bne.n	800dd06 <osThreadNew+0xca>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	68db      	ldr	r3, [r3, #12]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d108      	bne.n	800dd06 <osThreadNew+0xca>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	691b      	ldr	r3, [r3, #16]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d104      	bne.n	800dd06 <osThreadNew+0xca>
          mem = 0;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	61bb      	str	r3, [r7, #24]
 800dd00:	e001      	b.n	800dd06 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800dd02:	2300      	movs	r3, #0
 800dd04:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dd06:	69bb      	ldr	r3, [r7, #24]
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	d110      	bne.n	800dd2e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dd10:	687a      	ldr	r2, [r7, #4]
 800dd12:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd14:	9202      	str	r2, [sp, #8]
 800dd16:	9301      	str	r3, [sp, #4]
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	9300      	str	r3, [sp, #0]
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	6a3a      	ldr	r2, [r7, #32]
 800dd20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd22:	68f8      	ldr	r0, [r7, #12]
 800dd24:	f001 fb1e 	bl	800f364 <xTaskCreateStatic>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	613b      	str	r3, [r7, #16]
 800dd2c:	e013      	b.n	800dd56 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800dd2e:	69bb      	ldr	r3, [r7, #24]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d110      	bne.n	800dd56 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dd34:	6a3b      	ldr	r3, [r7, #32]
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	f107 0310 	add.w	r3, r7, #16
 800dd3c:	9301      	str	r3, [sp, #4]
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	9300      	str	r3, [sp, #0]
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd46:	68f8      	ldr	r0, [r7, #12]
 800dd48:	f001 fb69 	bl	800f41e <xTaskCreate>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d001      	beq.n	800dd56 <osThreadNew+0x11a>
            hTask = NULL;
 800dd52:	2300      	movs	r3, #0
 800dd54:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dd56:	693b      	ldr	r3, [r7, #16]
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3728      	adds	r7, #40	; 0x28
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd68:	f3ef 8305 	mrs	r3, IPSR
 800dd6c:	60bb      	str	r3, [r7, #8]
  return(result);
 800dd6e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d003      	beq.n	800dd7c <osDelay+0x1c>
    stat = osErrorISR;
 800dd74:	f06f 0305 	mvn.w	r3, #5
 800dd78:	60fb      	str	r3, [r7, #12]
 800dd7a:	e007      	b.n	800dd8c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d002      	beq.n	800dd8c <osDelay+0x2c>
      vTaskDelay(ticks);
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f001 fca4 	bl	800f6d4 <vTaskDelay>
    }
  }

  return (stat);
 800dd8c:	68fb      	ldr	r3, [r7, #12]
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3710      	adds	r7, #16
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}

0800dd96 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800dd96:	b580      	push	{r7, lr}
 800dd98:	b084      	sub	sp, #16
 800dd9a:	af00      	add	r7, sp, #0
 800dd9c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f002 fea6 	bl	8010af0 <pvTimerGetTimerID>
 800dda4:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d005      	beq.n	800ddb8 <TimerCallback+0x22>
    callb->func (callb->arg);
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	68fa      	ldr	r2, [r7, #12]
 800ddb2:	6852      	ldr	r2, [r2, #4]
 800ddb4:	4610      	mov	r0, r2
 800ddb6:	4798      	blx	r3
  }
}
 800ddb8:	bf00      	nop
 800ddba:	3710      	adds	r7, #16
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}

0800ddc0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b08c      	sub	sp, #48	; 0x30
 800ddc4:	af02      	add	r7, sp, #8
 800ddc6:	60f8      	str	r0, [r7, #12]
 800ddc8:	607a      	str	r2, [r7, #4]
 800ddca:	603b      	str	r3, [r7, #0]
 800ddcc:	460b      	mov	r3, r1
 800ddce:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddd4:	f3ef 8305 	mrs	r3, IPSR
 800ddd8:	613b      	str	r3, [r7, #16]
  return(result);
 800ddda:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d163      	bne.n	800dea8 <osTimerNew+0xe8>
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d060      	beq.n	800dea8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800dde6:	2008      	movs	r0, #8
 800dde8:	f003 f90e 	bl	8011008 <pvPortMalloc>
 800ddec:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d059      	beq.n	800dea8 <osTimerNew+0xe8>
      callb->func = func;
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	68fa      	ldr	r2, [r7, #12]
 800ddf8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800de00:	7afb      	ldrb	r3, [r7, #11]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d102      	bne.n	800de0c <osTimerNew+0x4c>
        reload = pdFALSE;
 800de06:	2300      	movs	r3, #0
 800de08:	61fb      	str	r3, [r7, #28]
 800de0a:	e001      	b.n	800de10 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800de0c:	2301      	movs	r3, #1
 800de0e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800de10:	f04f 33ff 	mov.w	r3, #4294967295
 800de14:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800de16:	2300      	movs	r3, #0
 800de18:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d01c      	beq.n	800de5a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d002      	beq.n	800de2e <osTimerNew+0x6e>
          name = attr->name;
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	689b      	ldr	r3, [r3, #8]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d006      	beq.n	800de44 <osTimerNew+0x84>
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	68db      	ldr	r3, [r3, #12]
 800de3a:	2b2b      	cmp	r3, #43	; 0x2b
 800de3c:	d902      	bls.n	800de44 <osTimerNew+0x84>
          mem = 1;
 800de3e:	2301      	movs	r3, #1
 800de40:	61bb      	str	r3, [r7, #24]
 800de42:	e00c      	b.n	800de5e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d108      	bne.n	800de5e <osTimerNew+0x9e>
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	68db      	ldr	r3, [r3, #12]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d104      	bne.n	800de5e <osTimerNew+0x9e>
            mem = 0;
 800de54:	2300      	movs	r3, #0
 800de56:	61bb      	str	r3, [r7, #24]
 800de58:	e001      	b.n	800de5e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800de5a:	2300      	movs	r3, #0
 800de5c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800de5e:	69bb      	ldr	r3, [r7, #24]
 800de60:	2b01      	cmp	r3, #1
 800de62:	d10c      	bne.n	800de7e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	689b      	ldr	r3, [r3, #8]
 800de68:	9301      	str	r3, [sp, #4]
 800de6a:	4b12      	ldr	r3, [pc, #72]	; (800deb4 <osTimerNew+0xf4>)
 800de6c:	9300      	str	r3, [sp, #0]
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	69fa      	ldr	r2, [r7, #28]
 800de72:	2101      	movs	r1, #1
 800de74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de76:	f002 fabc 	bl	80103f2 <xTimerCreateStatic>
 800de7a:	6238      	str	r0, [r7, #32]
 800de7c:	e00b      	b.n	800de96 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800de7e:	69bb      	ldr	r3, [r7, #24]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d108      	bne.n	800de96 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800de84:	4b0b      	ldr	r3, [pc, #44]	; (800deb4 <osTimerNew+0xf4>)
 800de86:	9300      	str	r3, [sp, #0]
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	69fa      	ldr	r2, [r7, #28]
 800de8c:	2101      	movs	r1, #1
 800de8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de90:	f002 fa8e 	bl	80103b0 <xTimerCreate>
 800de94:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800de96:	6a3b      	ldr	r3, [r7, #32]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d105      	bne.n	800dea8 <osTimerNew+0xe8>
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d002      	beq.n	800dea8 <osTimerNew+0xe8>
        vPortFree (callb);
 800dea2:	6978      	ldr	r0, [r7, #20]
 800dea4:	f003 f97c 	bl	80111a0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800dea8:	6a3b      	ldr	r3, [r7, #32]
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3728      	adds	r7, #40	; 0x28
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}
 800deb2:	bf00      	nop
 800deb4:	0800dd97 	.word	0x0800dd97

0800deb8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800deb8:	b580      	push	{r7, lr}
 800deba:	b088      	sub	sp, #32
 800debc:	af02      	add	r7, sp, #8
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dec6:	f3ef 8305 	mrs	r3, IPSR
 800deca:	60fb      	str	r3, [r7, #12]
  return(result);
 800decc:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d003      	beq.n	800deda <osTimerStart+0x22>
    stat = osErrorISR;
 800ded2:	f06f 0305 	mvn.w	r3, #5
 800ded6:	617b      	str	r3, [r7, #20]
 800ded8:	e017      	b.n	800df0a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800deda:	693b      	ldr	r3, [r7, #16]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d103      	bne.n	800dee8 <osTimerStart+0x30>
    stat = osErrorParameter;
 800dee0:	f06f 0303 	mvn.w	r3, #3
 800dee4:	617b      	str	r3, [r7, #20]
 800dee6:	e010      	b.n	800df0a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800dee8:	2300      	movs	r3, #0
 800deea:	9300      	str	r3, [sp, #0]
 800deec:	2300      	movs	r3, #0
 800deee:	683a      	ldr	r2, [r7, #0]
 800def0:	2104      	movs	r1, #4
 800def2:	6938      	ldr	r0, [r7, #16]
 800def4:	f002 faf6 	bl	80104e4 <xTimerGenericCommand>
 800def8:	4603      	mov	r3, r0
 800defa:	2b01      	cmp	r3, #1
 800defc:	d102      	bne.n	800df04 <osTimerStart+0x4c>
      stat = osOK;
 800defe:	2300      	movs	r3, #0
 800df00:	617b      	str	r3, [r7, #20]
 800df02:	e002      	b.n	800df0a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800df04:	f06f 0302 	mvn.w	r3, #2
 800df08:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800df0a:	697b      	ldr	r3, [r7, #20]
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3718      	adds	r7, #24
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}

0800df14 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800df14:	b580      	push	{r7, lr}
 800df16:	b086      	sub	sp, #24
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800df1c:	2300      	movs	r3, #0
 800df1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df20:	f3ef 8305 	mrs	r3, IPSR
 800df24:	60fb      	str	r3, [r7, #12]
  return(result);
 800df26:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d12d      	bne.n	800df88 <osEventFlagsNew+0x74>
    mem = -1;
 800df2c:	f04f 33ff 	mov.w	r3, #4294967295
 800df30:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d015      	beq.n	800df64 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	689b      	ldr	r3, [r3, #8]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d006      	beq.n	800df4e <osEventFlagsNew+0x3a>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	2b1f      	cmp	r3, #31
 800df46:	d902      	bls.n	800df4e <osEventFlagsNew+0x3a>
        mem = 1;
 800df48:	2301      	movs	r3, #1
 800df4a:	613b      	str	r3, [r7, #16]
 800df4c:	e00c      	b.n	800df68 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	689b      	ldr	r3, [r3, #8]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d108      	bne.n	800df68 <osEventFlagsNew+0x54>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	68db      	ldr	r3, [r3, #12]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d104      	bne.n	800df68 <osEventFlagsNew+0x54>
          mem = 0;
 800df5e:	2300      	movs	r3, #0
 800df60:	613b      	str	r3, [r7, #16]
 800df62:	e001      	b.n	800df68 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800df64:	2300      	movs	r3, #0
 800df66:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	d106      	bne.n	800df7c <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	689b      	ldr	r3, [r3, #8]
 800df72:	4618      	mov	r0, r3
 800df74:	f000 f976 	bl	800e264 <xEventGroupCreateStatic>
 800df78:	6178      	str	r0, [r7, #20]
 800df7a:	e005      	b.n	800df88 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800df7c:	693b      	ldr	r3, [r7, #16]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d102      	bne.n	800df88 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800df82:	f000 f9a6 	bl	800e2d2 <xEventGroupCreate>
 800df86:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800df88:	697b      	ldr	r3, [r7, #20]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3718      	adds	r7, #24
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
	...

0800df94 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800df94:	b580      	push	{r7, lr}
 800df96:	b086      	sub	sp, #24
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d004      	beq.n	800dfb2 <osEventFlagsSet+0x1e>
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d003      	beq.n	800dfba <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800dfb2:	f06f 0303 	mvn.w	r3, #3
 800dfb6:	617b      	str	r3, [r7, #20]
 800dfb8:	e028      	b.n	800e00c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfba:	f3ef 8305 	mrs	r3, IPSR
 800dfbe:	60fb      	str	r3, [r7, #12]
  return(result);
 800dfc0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d01d      	beq.n	800e002 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800dfca:	f107 0308 	add.w	r3, r7, #8
 800dfce:	461a      	mov	r2, r3
 800dfd0:	6839      	ldr	r1, [r7, #0]
 800dfd2:	6938      	ldr	r0, [r7, #16]
 800dfd4:	f000 fb20 	bl	800e618 <xEventGroupSetBitsFromISR>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d103      	bne.n	800dfe6 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800dfde:	f06f 0302 	mvn.w	r3, #2
 800dfe2:	617b      	str	r3, [r7, #20]
 800dfe4:	e012      	b.n	800e00c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d00d      	beq.n	800e00c <osEventFlagsSet+0x78>
 800dff0:	4b09      	ldr	r3, [pc, #36]	; (800e018 <osEventFlagsSet+0x84>)
 800dff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dff6:	601a      	str	r2, [r3, #0]
 800dff8:	f3bf 8f4f 	dsb	sy
 800dffc:	f3bf 8f6f 	isb	sy
 800e000:	e004      	b.n	800e00c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800e002:	6839      	ldr	r1, [r7, #0]
 800e004:	6938      	ldr	r0, [r7, #16]
 800e006:	f000 fa4d 	bl	800e4a4 <xEventGroupSetBits>
 800e00a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800e00c:	697b      	ldr	r3, [r7, #20]
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3718      	adds	r7, #24
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	e000ed04 	.word	0xe000ed04

0800e01c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b08c      	sub	sp, #48	; 0x30
 800e020:	af02      	add	r7, sp, #8
 800e022:	60f8      	str	r0, [r7, #12]
 800e024:	60b9      	str	r1, [r7, #8]
 800e026:	607a      	str	r2, [r7, #4]
 800e028:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800e02e:	69bb      	ldr	r3, [r7, #24]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d004      	beq.n	800e03e <osEventFlagsWait+0x22>
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d003      	beq.n	800e046 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800e03e:	f06f 0303 	mvn.w	r3, #3
 800e042:	61fb      	str	r3, [r7, #28]
 800e044:	e04b      	b.n	800e0de <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e046:	f3ef 8305 	mrs	r3, IPSR
 800e04a:	617b      	str	r3, [r7, #20]
  return(result);
 800e04c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d003      	beq.n	800e05a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800e052:	f06f 0305 	mvn.w	r3, #5
 800e056:	61fb      	str	r3, [r7, #28]
 800e058:	e041      	b.n	800e0de <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f003 0301 	and.w	r3, r3, #1
 800e060:	2b00      	cmp	r3, #0
 800e062:	d002      	beq.n	800e06a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800e064:	2301      	movs	r3, #1
 800e066:	627b      	str	r3, [r7, #36]	; 0x24
 800e068:	e001      	b.n	800e06e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800e06a:	2300      	movs	r3, #0
 800e06c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f003 0302 	and.w	r3, r3, #2
 800e074:	2b00      	cmp	r3, #0
 800e076:	d002      	beq.n	800e07e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800e078:	2300      	movs	r3, #0
 800e07a:	623b      	str	r3, [r7, #32]
 800e07c:	e001      	b.n	800e082 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800e07e:	2301      	movs	r3, #1
 800e080:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	9300      	str	r3, [sp, #0]
 800e086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e088:	6a3a      	ldr	r2, [r7, #32]
 800e08a:	68b9      	ldr	r1, [r7, #8]
 800e08c:	69b8      	ldr	r0, [r7, #24]
 800e08e:	f000 f93b 	bl	800e308 <xEventGroupWaitBits>
 800e092:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f003 0301 	and.w	r3, r3, #1
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d010      	beq.n	800e0c0 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800e09e:	68ba      	ldr	r2, [r7, #8]
 800e0a0:	69fb      	ldr	r3, [r7, #28]
 800e0a2:	4013      	ands	r3, r2
 800e0a4:	68ba      	ldr	r2, [r7, #8]
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d019      	beq.n	800e0de <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d003      	beq.n	800e0b8 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800e0b0:	f06f 0301 	mvn.w	r3, #1
 800e0b4:	61fb      	str	r3, [r7, #28]
 800e0b6:	e012      	b.n	800e0de <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800e0b8:	f06f 0302 	mvn.w	r3, #2
 800e0bc:	61fb      	str	r3, [r7, #28]
 800e0be:	e00e      	b.n	800e0de <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800e0c0:	68ba      	ldr	r2, [r7, #8]
 800e0c2:	69fb      	ldr	r3, [r7, #28]
 800e0c4:	4013      	ands	r3, r2
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d109      	bne.n	800e0de <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d003      	beq.n	800e0d8 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800e0d0:	f06f 0301 	mvn.w	r3, #1
 800e0d4:	61fb      	str	r3, [r7, #28]
 800e0d6:	e002      	b.n	800e0de <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800e0d8:	f06f 0302 	mvn.w	r3, #2
 800e0dc:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800e0de:	69fb      	ldr	r3, [r7, #28]
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3728      	adds	r7, #40	; 0x28
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}

0800e0e8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b08a      	sub	sp, #40	; 0x28
 800e0ec:	af02      	add	r7, sp, #8
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	60b9      	str	r1, [r7, #8]
 800e0f2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0f8:	f3ef 8305 	mrs	r3, IPSR
 800e0fc:	613b      	str	r3, [r7, #16]
  return(result);
 800e0fe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e100:	2b00      	cmp	r3, #0
 800e102:	d175      	bne.n	800e1f0 <osSemaphoreNew+0x108>
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d072      	beq.n	800e1f0 <osSemaphoreNew+0x108>
 800e10a:	68ba      	ldr	r2, [r7, #8]
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	429a      	cmp	r2, r3
 800e110:	d86e      	bhi.n	800e1f0 <osSemaphoreNew+0x108>
    mem = -1;
 800e112:	f04f 33ff 	mov.w	r3, #4294967295
 800e116:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d015      	beq.n	800e14a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	689b      	ldr	r3, [r3, #8]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d006      	beq.n	800e134 <osSemaphoreNew+0x4c>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	68db      	ldr	r3, [r3, #12]
 800e12a:	2b4f      	cmp	r3, #79	; 0x4f
 800e12c:	d902      	bls.n	800e134 <osSemaphoreNew+0x4c>
        mem = 1;
 800e12e:	2301      	movs	r3, #1
 800e130:	61bb      	str	r3, [r7, #24]
 800e132:	e00c      	b.n	800e14e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	689b      	ldr	r3, [r3, #8]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d108      	bne.n	800e14e <osSemaphoreNew+0x66>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	68db      	ldr	r3, [r3, #12]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d104      	bne.n	800e14e <osSemaphoreNew+0x66>
          mem = 0;
 800e144:	2300      	movs	r3, #0
 800e146:	61bb      	str	r3, [r7, #24]
 800e148:	e001      	b.n	800e14e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800e14a:	2300      	movs	r3, #0
 800e14c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800e14e:	69bb      	ldr	r3, [r7, #24]
 800e150:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e154:	d04c      	beq.n	800e1f0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d128      	bne.n	800e1ae <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800e15c:	69bb      	ldr	r3, [r7, #24]
 800e15e:	2b01      	cmp	r3, #1
 800e160:	d10a      	bne.n	800e178 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	689b      	ldr	r3, [r3, #8]
 800e166:	2203      	movs	r2, #3
 800e168:	9200      	str	r2, [sp, #0]
 800e16a:	2200      	movs	r2, #0
 800e16c:	2100      	movs	r1, #0
 800e16e:	2001      	movs	r0, #1
 800e170:	f000 fb82 	bl	800e878 <xQueueGenericCreateStatic>
 800e174:	61f8      	str	r0, [r7, #28]
 800e176:	e005      	b.n	800e184 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800e178:	2203      	movs	r2, #3
 800e17a:	2100      	movs	r1, #0
 800e17c:	2001      	movs	r0, #1
 800e17e:	f000 fbf3 	bl	800e968 <xQueueGenericCreate>
 800e182:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e184:	69fb      	ldr	r3, [r7, #28]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d022      	beq.n	800e1d0 <osSemaphoreNew+0xe8>
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d01f      	beq.n	800e1d0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e190:	2300      	movs	r3, #0
 800e192:	2200      	movs	r2, #0
 800e194:	2100      	movs	r1, #0
 800e196:	69f8      	ldr	r0, [r7, #28]
 800e198:	f000 fcae 	bl	800eaf8 <xQueueGenericSend>
 800e19c:	4603      	mov	r3, r0
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	d016      	beq.n	800e1d0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800e1a2:	69f8      	ldr	r0, [r7, #28]
 800e1a4:	f000 ff22 	bl	800efec <vQueueDelete>
            hSemaphore = NULL;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	61fb      	str	r3, [r7, #28]
 800e1ac:	e010      	b.n	800e1d0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800e1ae:	69bb      	ldr	r3, [r7, #24]
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	d108      	bne.n	800e1c6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	689b      	ldr	r3, [r3, #8]
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	68b9      	ldr	r1, [r7, #8]
 800e1bc:	68f8      	ldr	r0, [r7, #12]
 800e1be:	f000 fc30 	bl	800ea22 <xQueueCreateCountingSemaphoreStatic>
 800e1c2:	61f8      	str	r0, [r7, #28]
 800e1c4:	e004      	b.n	800e1d0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e1c6:	68b9      	ldr	r1, [r7, #8]
 800e1c8:	68f8      	ldr	r0, [r7, #12]
 800e1ca:	f000 fc61 	bl	800ea90 <xQueueCreateCountingSemaphore>
 800e1ce:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d00c      	beq.n	800e1f0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d003      	beq.n	800e1e4 <osSemaphoreNew+0xfc>
          name = attr->name;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	617b      	str	r3, [r7, #20]
 800e1e2:	e001      	b.n	800e1e8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e1e8:	6979      	ldr	r1, [r7, #20]
 800e1ea:	69f8      	ldr	r0, [r7, #28]
 800e1ec:	f001 f832 	bl	800f254 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e1f0:	69fb      	ldr	r3, [r7, #28]
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3720      	adds	r7, #32
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}
	...

0800e1fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e1fc:	b480      	push	{r7}
 800e1fe:	b085      	sub	sp, #20
 800e200:	af00      	add	r7, sp, #0
 800e202:	60f8      	str	r0, [r7, #12]
 800e204:	60b9      	str	r1, [r7, #8]
 800e206:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	4a07      	ldr	r2, [pc, #28]	; (800e228 <vApplicationGetIdleTaskMemory+0x2c>)
 800e20c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	4a06      	ldr	r2, [pc, #24]	; (800e22c <vApplicationGetIdleTaskMemory+0x30>)
 800e212:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2280      	movs	r2, #128	; 0x80
 800e218:	601a      	str	r2, [r3, #0]
}
 800e21a:	bf00      	nop
 800e21c:	3714      	adds	r7, #20
 800e21e:	46bd      	mov	sp, r7
 800e220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e224:	4770      	bx	lr
 800e226:	bf00      	nop
 800e228:	20000680 	.word	0x20000680
 800e22c:	2000073c 	.word	0x2000073c

0800e230 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e230:	b480      	push	{r7}
 800e232:	b085      	sub	sp, #20
 800e234:	af00      	add	r7, sp, #0
 800e236:	60f8      	str	r0, [r7, #12]
 800e238:	60b9      	str	r1, [r7, #8]
 800e23a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	4a07      	ldr	r2, [pc, #28]	; (800e25c <vApplicationGetTimerTaskMemory+0x2c>)
 800e240:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	4a06      	ldr	r2, [pc, #24]	; (800e260 <vApplicationGetTimerTaskMemory+0x30>)
 800e246:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e24e:	601a      	str	r2, [r3, #0]
}
 800e250:	bf00      	nop
 800e252:	3714      	adds	r7, #20
 800e254:	46bd      	mov	sp, r7
 800e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25a:	4770      	bx	lr
 800e25c:	2000093c 	.word	0x2000093c
 800e260:	200009f8 	.word	0x200009f8

0800e264 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800e264:	b580      	push	{r7, lr}
 800e266:	b086      	sub	sp, #24
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d10a      	bne.n	800e288 <xEventGroupCreateStatic+0x24>
	__asm volatile
 800e272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e276:	f383 8811 	msr	BASEPRI, r3
 800e27a:	f3bf 8f6f 	isb	sy
 800e27e:	f3bf 8f4f 	dsb	sy
 800e282:	613b      	str	r3, [r7, #16]
}
 800e284:	bf00      	nop
 800e286:	e7fe      	b.n	800e286 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800e288:	2320      	movs	r3, #32
 800e28a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	2b20      	cmp	r3, #32
 800e290:	d00a      	beq.n	800e2a8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800e292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e296:	f383 8811 	msr	BASEPRI, r3
 800e29a:	f3bf 8f6f 	isb	sy
 800e29e:	f3bf 8f4f 	dsb	sy
 800e2a2:	60fb      	str	r3, [r7, #12]
}
 800e2a4:	bf00      	nop
 800e2a6:	e7fe      	b.n	800e2a6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d00a      	beq.n	800e2c8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	3304      	adds	r3, #4
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f000 f9bf 	bl	800e640 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	2201      	movs	r2, #1
 800e2c6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800e2c8:	697b      	ldr	r3, [r7, #20]
	}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3718      	adds	r7, #24
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}

0800e2d2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800e2d2:	b580      	push	{r7, lr}
 800e2d4:	b082      	sub	sp, #8
 800e2d6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800e2d8:	2020      	movs	r0, #32
 800e2da:	f002 fe95 	bl	8011008 <pvPortMalloc>
 800e2de:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d00a      	beq.n	800e2fc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	3304      	adds	r3, #4
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f000 f9a5 	bl	800e640 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800e2fc:	687b      	ldr	r3, [r7, #4]
	}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3708      	adds	r7, #8
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
	...

0800e308 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b090      	sub	sp, #64	; 0x40
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	60f8      	str	r0, [r7, #12]
 800e310:	60b9      	str	r1, [r7, #8]
 800e312:	607a      	str	r2, [r7, #4]
 800e314:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800e31a:	2300      	movs	r3, #0
 800e31c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800e31e:	2300      	movs	r3, #0
 800e320:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d10a      	bne.n	800e33e <xEventGroupWaitBits+0x36>
	__asm volatile
 800e328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e32c:	f383 8811 	msr	BASEPRI, r3
 800e330:	f3bf 8f6f 	isb	sy
 800e334:	f3bf 8f4f 	dsb	sy
 800e338:	623b      	str	r3, [r7, #32]
}
 800e33a:	bf00      	nop
 800e33c:	e7fe      	b.n	800e33c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00a      	beq.n	800e35e <xEventGroupWaitBits+0x56>
	__asm volatile
 800e348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e34c:	f383 8811 	msr	BASEPRI, r3
 800e350:	f3bf 8f6f 	isb	sy
 800e354:	f3bf 8f4f 	dsb	sy
 800e358:	61fb      	str	r3, [r7, #28]
}
 800e35a:	bf00      	nop
 800e35c:	e7fe      	b.n	800e35c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d10a      	bne.n	800e37a <xEventGroupWaitBits+0x72>
	__asm volatile
 800e364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e368:	f383 8811 	msr	BASEPRI, r3
 800e36c:	f3bf 8f6f 	isb	sy
 800e370:	f3bf 8f4f 	dsb	sy
 800e374:	61bb      	str	r3, [r7, #24]
}
 800e376:	bf00      	nop
 800e378:	e7fe      	b.n	800e378 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e37a:	f001 fed9 	bl	8010130 <xTaskGetSchedulerState>
 800e37e:	4603      	mov	r3, r0
 800e380:	2b00      	cmp	r3, #0
 800e382:	d102      	bne.n	800e38a <xEventGroupWaitBits+0x82>
 800e384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e386:	2b00      	cmp	r3, #0
 800e388:	d101      	bne.n	800e38e <xEventGroupWaitBits+0x86>
 800e38a:	2301      	movs	r3, #1
 800e38c:	e000      	b.n	800e390 <xEventGroupWaitBits+0x88>
 800e38e:	2300      	movs	r3, #0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d10a      	bne.n	800e3aa <xEventGroupWaitBits+0xa2>
	__asm volatile
 800e394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e398:	f383 8811 	msr	BASEPRI, r3
 800e39c:	f3bf 8f6f 	isb	sy
 800e3a0:	f3bf 8f4f 	dsb	sy
 800e3a4:	617b      	str	r3, [r7, #20]
}
 800e3a6:	bf00      	nop
 800e3a8:	e7fe      	b.n	800e3a8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800e3aa:	f001 fa37 	bl	800f81c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800e3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800e3b4:	683a      	ldr	r2, [r7, #0]
 800e3b6:	68b9      	ldr	r1, [r7, #8]
 800e3b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3ba:	f000 f90b 	bl	800e5d4 <prvTestWaitCondition>
 800e3be:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800e3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d00e      	beq.n	800e3e4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800e3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d028      	beq.n	800e426 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3d6:	681a      	ldr	r2, [r3, #0]
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	43db      	mvns	r3, r3
 800e3dc:	401a      	ands	r2, r3
 800e3de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3e0:	601a      	str	r2, [r3, #0]
 800e3e2:	e020      	b.n	800e426 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800e3e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d104      	bne.n	800e3f4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800e3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	633b      	str	r3, [r7, #48]	; 0x30
 800e3f2:	e018      	b.n	800e426 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d003      	beq.n	800e402 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800e3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e400:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d003      	beq.n	800e410 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800e408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e40a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e40e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800e410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e412:	1d18      	adds	r0, r3, #4
 800e414:	68ba      	ldr	r2, [r7, #8]
 800e416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e418:	4313      	orrs	r3, r2
 800e41a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e41c:	4619      	mov	r1, r3
 800e41e:	f001 fbfb 	bl	800fc18 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800e422:	2300      	movs	r3, #0
 800e424:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800e426:	f001 fa07 	bl	800f838 <xTaskResumeAll>
 800e42a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800e42c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d031      	beq.n	800e496 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800e432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e434:	2b00      	cmp	r3, #0
 800e436:	d107      	bne.n	800e448 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800e438:	4b19      	ldr	r3, [pc, #100]	; (800e4a0 <xEventGroupWaitBits+0x198>)
 800e43a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e43e:	601a      	str	r2, [r3, #0]
 800e440:	f3bf 8f4f 	dsb	sy
 800e444:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800e448:	f001 fefe 	bl	8010248 <uxTaskResetEventItemValue>
 800e44c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800e44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e454:	2b00      	cmp	r3, #0
 800e456:	d11a      	bne.n	800e48e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800e458:	f002 fcb4 	bl	8010dc4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800e45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800e462:	683a      	ldr	r2, [r7, #0]
 800e464:	68b9      	ldr	r1, [r7, #8]
 800e466:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e468:	f000 f8b4 	bl	800e5d4 <prvTestWaitCondition>
 800e46c:	4603      	mov	r3, r0
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d009      	beq.n	800e486 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d006      	beq.n	800e486 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e47a:	681a      	ldr	r2, [r3, #0]
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	43db      	mvns	r3, r3
 800e480:	401a      	ands	r2, r3
 800e482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e484:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800e486:	2301      	movs	r3, #1
 800e488:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800e48a:	f002 fccb 	bl	8010e24 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800e48e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e490:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e494:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800e496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3740      	adds	r7, #64	; 0x40
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	e000ed04 	.word	0xe000ed04

0800e4a4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b08e      	sub	sp, #56	; 0x38
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d10a      	bne.n	800e4d6 <xEventGroupSetBits+0x32>
	__asm volatile
 800e4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c4:	f383 8811 	msr	BASEPRI, r3
 800e4c8:	f3bf 8f6f 	isb	sy
 800e4cc:	f3bf 8f4f 	dsb	sy
 800e4d0:	613b      	str	r3, [r7, #16]
}
 800e4d2:	bf00      	nop
 800e4d4:	e7fe      	b.n	800e4d4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d00a      	beq.n	800e4f6 <xEventGroupSetBits+0x52>
	__asm volatile
 800e4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e4:	f383 8811 	msr	BASEPRI, r3
 800e4e8:	f3bf 8f6f 	isb	sy
 800e4ec:	f3bf 8f4f 	dsb	sy
 800e4f0:	60fb      	str	r3, [r7, #12]
}
 800e4f2:	bf00      	nop
 800e4f4:	e7fe      	b.n	800e4f4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800e4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f8:	3304      	adds	r3, #4
 800e4fa:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fe:	3308      	adds	r3, #8
 800e500:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800e502:	f001 f98b 	bl	800f81c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800e506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e508:	68db      	ldr	r3, [r3, #12]
 800e50a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800e50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e50e:	681a      	ldr	r2, [r3, #0]
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	431a      	orrs	r2, r3
 800e514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e516:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800e518:	e03c      	b.n	800e594 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800e51a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e51c:	685b      	ldr	r3, [r3, #4]
 800e51e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800e520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800e526:	2300      	movs	r3, #0
 800e528:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800e52a:	69bb      	ldr	r3, [r7, #24]
 800e52c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e530:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800e532:	69bb      	ldr	r3, [r7, #24]
 800e534:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e538:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e540:	2b00      	cmp	r3, #0
 800e542:	d108      	bne.n	800e556 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800e544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e546:	681a      	ldr	r2, [r3, #0]
 800e548:	69bb      	ldr	r3, [r7, #24]
 800e54a:	4013      	ands	r3, r2
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d00b      	beq.n	800e568 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800e550:	2301      	movs	r3, #1
 800e552:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e554:	e008      	b.n	800e568 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800e556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	69bb      	ldr	r3, [r7, #24]
 800e55c:	4013      	ands	r3, r2
 800e55e:	69ba      	ldr	r2, [r7, #24]
 800e560:	429a      	cmp	r2, r3
 800e562:	d101      	bne.n	800e568 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800e564:	2301      	movs	r3, #1
 800e566:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800e568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d010      	beq.n	800e590 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e574:	2b00      	cmp	r3, #0
 800e576:	d003      	beq.n	800e580 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800e578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e57a:	69bb      	ldr	r3, [r7, #24]
 800e57c:	4313      	orrs	r3, r2
 800e57e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800e580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e588:	4619      	mov	r1, r3
 800e58a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e58c:	f001 fc10 	bl	800fdb0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800e590:	69fb      	ldr	r3, [r7, #28]
 800e592:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800e594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e596:	6a3b      	ldr	r3, [r7, #32]
 800e598:	429a      	cmp	r2, r3
 800e59a:	d1be      	bne.n	800e51a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800e59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e59e:	681a      	ldr	r2, [r3, #0]
 800e5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5a2:	43db      	mvns	r3, r3
 800e5a4:	401a      	ands	r2, r3
 800e5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800e5aa:	f001 f945 	bl	800f838 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800e5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b0:	681b      	ldr	r3, [r3, #0]
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3738      	adds	r7, #56	; 0x38
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}

0800e5ba <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800e5ba:	b580      	push	{r7, lr}
 800e5bc:	b082      	sub	sp, #8
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	6078      	str	r0, [r7, #4]
 800e5c2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800e5c4:	6839      	ldr	r1, [r7, #0]
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f7ff ff6c 	bl	800e4a4 <xEventGroupSetBits>
}
 800e5cc:	bf00      	nop
 800e5ce:	3708      	adds	r7, #8
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}

0800e5d4 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b087      	sub	sp, #28
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	60b9      	str	r1, [r7, #8]
 800e5de:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d107      	bne.n	800e5fa <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800e5ea:	68fa      	ldr	r2, [r7, #12]
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	4013      	ands	r3, r2
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d00a      	beq.n	800e60a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	617b      	str	r3, [r7, #20]
 800e5f8:	e007      	b.n	800e60a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800e5fa:	68fa      	ldr	r2, [r7, #12]
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	4013      	ands	r3, r2
 800e600:	68ba      	ldr	r2, [r7, #8]
 800e602:	429a      	cmp	r2, r3
 800e604:	d101      	bne.n	800e60a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800e606:	2301      	movs	r3, #1
 800e608:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800e60a:	697b      	ldr	r3, [r7, #20]
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	371c      	adds	r7, #28
 800e610:	46bd      	mov	sp, r7
 800e612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e616:	4770      	bx	lr

0800e618 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b086      	sub	sp, #24
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	60f8      	str	r0, [r7, #12]
 800e620:	60b9      	str	r1, [r7, #8]
 800e622:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	68ba      	ldr	r2, [r7, #8]
 800e628:	68f9      	ldr	r1, [r7, #12]
 800e62a:	4804      	ldr	r0, [pc, #16]	; (800e63c <xEventGroupSetBitsFromISR+0x24>)
 800e62c:	f002 fa80 	bl	8010b30 <xTimerPendFunctionCallFromISR>
 800e630:	6178      	str	r0, [r7, #20]

		return xReturn;
 800e632:	697b      	ldr	r3, [r7, #20]
	}
 800e634:	4618      	mov	r0, r3
 800e636:	3718      	adds	r7, #24
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}
 800e63c:	0800e5bb 	.word	0x0800e5bb

0800e640 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e640:	b480      	push	{r7}
 800e642:	b083      	sub	sp, #12
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f103 0208 	add.w	r2, r3, #8
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f04f 32ff 	mov.w	r2, #4294967295
 800e658:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f103 0208 	add.w	r2, r3, #8
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f103 0208 	add.w	r2, r3, #8
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2200      	movs	r2, #0
 800e672:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e674:	bf00      	nop
 800e676:	370c      	adds	r7, #12
 800e678:	46bd      	mov	sp, r7
 800e67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67e:	4770      	bx	lr

0800e680 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e680:	b480      	push	{r7}
 800e682:	b083      	sub	sp, #12
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2200      	movs	r2, #0
 800e68c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e68e:	bf00      	nop
 800e690:	370c      	adds	r7, #12
 800e692:	46bd      	mov	sp, r7
 800e694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e698:	4770      	bx	lr

0800e69a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e69a:	b480      	push	{r7}
 800e69c:	b085      	sub	sp, #20
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	6078      	str	r0, [r7, #4]
 800e6a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	685b      	ldr	r3, [r3, #4]
 800e6a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	68fa      	ldr	r2, [r7, #12]
 800e6ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	689a      	ldr	r2, [r3, #8]
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	689b      	ldr	r3, [r3, #8]
 800e6bc:	683a      	ldr	r2, [r7, #0]
 800e6be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	683a      	ldr	r2, [r7, #0]
 800e6c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	687a      	ldr	r2, [r7, #4]
 800e6ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	1c5a      	adds	r2, r3, #1
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	601a      	str	r2, [r3, #0]
}
 800e6d6:	bf00      	nop
 800e6d8:	3714      	adds	r7, #20
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e0:	4770      	bx	lr

0800e6e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e6e2:	b480      	push	{r7}
 800e6e4:	b085      	sub	sp, #20
 800e6e6:	af00      	add	r7, sp, #0
 800e6e8:	6078      	str	r0, [r7, #4]
 800e6ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6f8:	d103      	bne.n	800e702 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	691b      	ldr	r3, [r3, #16]
 800e6fe:	60fb      	str	r3, [r7, #12]
 800e700:	e00c      	b.n	800e71c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	3308      	adds	r3, #8
 800e706:	60fb      	str	r3, [r7, #12]
 800e708:	e002      	b.n	800e710 <vListInsert+0x2e>
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	60fb      	str	r3, [r7, #12]
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	685b      	ldr	r3, [r3, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	68ba      	ldr	r2, [r7, #8]
 800e718:	429a      	cmp	r2, r3
 800e71a:	d2f6      	bcs.n	800e70a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	685a      	ldr	r2, [r3, #4]
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	685b      	ldr	r3, [r3, #4]
 800e728:	683a      	ldr	r2, [r7, #0]
 800e72a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	68fa      	ldr	r2, [r7, #12]
 800e730:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	683a      	ldr	r2, [r7, #0]
 800e736:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	687a      	ldr	r2, [r7, #4]
 800e73c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	1c5a      	adds	r2, r3, #1
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	601a      	str	r2, [r3, #0]
}
 800e748:	bf00      	nop
 800e74a:	3714      	adds	r7, #20
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr

0800e754 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e754:	b480      	push	{r7}
 800e756:	b085      	sub	sp, #20
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	691b      	ldr	r3, [r3, #16]
 800e760:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	687a      	ldr	r2, [r7, #4]
 800e768:	6892      	ldr	r2, [r2, #8]
 800e76a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	689b      	ldr	r3, [r3, #8]
 800e770:	687a      	ldr	r2, [r7, #4]
 800e772:	6852      	ldr	r2, [r2, #4]
 800e774:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d103      	bne.n	800e788 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	689a      	ldr	r2, [r3, #8]
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2200      	movs	r2, #0
 800e78c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	1e5a      	subs	r2, r3, #1
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	3714      	adds	r7, #20
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr

0800e7a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b084      	sub	sp, #16
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d10a      	bne.n	800e7d2 <xQueueGenericReset+0x2a>
	__asm volatile
 800e7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c0:	f383 8811 	msr	BASEPRI, r3
 800e7c4:	f3bf 8f6f 	isb	sy
 800e7c8:	f3bf 8f4f 	dsb	sy
 800e7cc:	60bb      	str	r3, [r7, #8]
}
 800e7ce:	bf00      	nop
 800e7d0:	e7fe      	b.n	800e7d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e7d2:	f002 faf7 	bl	8010dc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	681a      	ldr	r2, [r3, #0]
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7de:	68f9      	ldr	r1, [r7, #12]
 800e7e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e7e2:	fb01 f303 	mul.w	r3, r1, r3
 800e7e6:	441a      	add	r2, r3
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	681a      	ldr	r2, [r3, #0]
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	681a      	ldr	r2, [r3, #0]
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e802:	3b01      	subs	r3, #1
 800e804:	68f9      	ldr	r1, [r7, #12]
 800e806:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e808:	fb01 f303 	mul.w	r3, r1, r3
 800e80c:	441a      	add	r2, r3
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	22ff      	movs	r2, #255	; 0xff
 800e816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	22ff      	movs	r2, #255	; 0xff
 800e81e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d114      	bne.n	800e852 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	691b      	ldr	r3, [r3, #16]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d01a      	beq.n	800e866 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	3310      	adds	r3, #16
 800e834:	4618      	mov	r0, r3
 800e836:	f001 fa57 	bl	800fce8 <xTaskRemoveFromEventList>
 800e83a:	4603      	mov	r3, r0
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d012      	beq.n	800e866 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e840:	4b0c      	ldr	r3, [pc, #48]	; (800e874 <xQueueGenericReset+0xcc>)
 800e842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e846:	601a      	str	r2, [r3, #0]
 800e848:	f3bf 8f4f 	dsb	sy
 800e84c:	f3bf 8f6f 	isb	sy
 800e850:	e009      	b.n	800e866 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	3310      	adds	r3, #16
 800e856:	4618      	mov	r0, r3
 800e858:	f7ff fef2 	bl	800e640 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	3324      	adds	r3, #36	; 0x24
 800e860:	4618      	mov	r0, r3
 800e862:	f7ff feed 	bl	800e640 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e866:	f002 fadd 	bl	8010e24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e86a:	2301      	movs	r3, #1
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3710      	adds	r7, #16
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}
 800e874:	e000ed04 	.word	0xe000ed04

0800e878 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b08e      	sub	sp, #56	; 0x38
 800e87c:	af02      	add	r7, sp, #8
 800e87e:	60f8      	str	r0, [r7, #12]
 800e880:	60b9      	str	r1, [r7, #8]
 800e882:	607a      	str	r2, [r7, #4]
 800e884:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d10a      	bne.n	800e8a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e890:	f383 8811 	msr	BASEPRI, r3
 800e894:	f3bf 8f6f 	isb	sy
 800e898:	f3bf 8f4f 	dsb	sy
 800e89c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e89e:	bf00      	nop
 800e8a0:	e7fe      	b.n	800e8a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d10a      	bne.n	800e8be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ac:	f383 8811 	msr	BASEPRI, r3
 800e8b0:	f3bf 8f6f 	isb	sy
 800e8b4:	f3bf 8f4f 	dsb	sy
 800e8b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e8ba:	bf00      	nop
 800e8bc:	e7fe      	b.n	800e8bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d002      	beq.n	800e8ca <xQueueGenericCreateStatic+0x52>
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d001      	beq.n	800e8ce <xQueueGenericCreateStatic+0x56>
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	e000      	b.n	800e8d0 <xQueueGenericCreateStatic+0x58>
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d10a      	bne.n	800e8ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d8:	f383 8811 	msr	BASEPRI, r3
 800e8dc:	f3bf 8f6f 	isb	sy
 800e8e0:	f3bf 8f4f 	dsb	sy
 800e8e4:	623b      	str	r3, [r7, #32]
}
 800e8e6:	bf00      	nop
 800e8e8:	e7fe      	b.n	800e8e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d102      	bne.n	800e8f6 <xQueueGenericCreateStatic+0x7e>
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d101      	bne.n	800e8fa <xQueueGenericCreateStatic+0x82>
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	e000      	b.n	800e8fc <xQueueGenericCreateStatic+0x84>
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d10a      	bne.n	800e916 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e904:	f383 8811 	msr	BASEPRI, r3
 800e908:	f3bf 8f6f 	isb	sy
 800e90c:	f3bf 8f4f 	dsb	sy
 800e910:	61fb      	str	r3, [r7, #28]
}
 800e912:	bf00      	nop
 800e914:	e7fe      	b.n	800e914 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e916:	2350      	movs	r3, #80	; 0x50
 800e918:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	2b50      	cmp	r3, #80	; 0x50
 800e91e:	d00a      	beq.n	800e936 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e924:	f383 8811 	msr	BASEPRI, r3
 800e928:	f3bf 8f6f 	isb	sy
 800e92c:	f3bf 8f4f 	dsb	sy
 800e930:	61bb      	str	r3, [r7, #24]
}
 800e932:	bf00      	nop
 800e934:	e7fe      	b.n	800e934 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e936:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d00d      	beq.n	800e95e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e944:	2201      	movs	r2, #1
 800e946:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e94a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e950:	9300      	str	r3, [sp, #0]
 800e952:	4613      	mov	r3, r2
 800e954:	687a      	ldr	r2, [r7, #4]
 800e956:	68b9      	ldr	r1, [r7, #8]
 800e958:	68f8      	ldr	r0, [r7, #12]
 800e95a:	f000 f83f 	bl	800e9dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e960:	4618      	mov	r0, r3
 800e962:	3730      	adds	r7, #48	; 0x30
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}

0800e968 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b08a      	sub	sp, #40	; 0x28
 800e96c:	af02      	add	r7, sp, #8
 800e96e:	60f8      	str	r0, [r7, #12]
 800e970:	60b9      	str	r1, [r7, #8]
 800e972:	4613      	mov	r3, r2
 800e974:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d10a      	bne.n	800e992 <xQueueGenericCreate+0x2a>
	__asm volatile
 800e97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e980:	f383 8811 	msr	BASEPRI, r3
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	f3bf 8f4f 	dsb	sy
 800e98c:	613b      	str	r3, [r7, #16]
}
 800e98e:	bf00      	nop
 800e990:	e7fe      	b.n	800e990 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	68ba      	ldr	r2, [r7, #8]
 800e996:	fb02 f303 	mul.w	r3, r2, r3
 800e99a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e99c:	69fb      	ldr	r3, [r7, #28]
 800e99e:	3350      	adds	r3, #80	; 0x50
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f002 fb31 	bl	8011008 <pvPortMalloc>
 800e9a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e9a8:	69bb      	ldr	r3, [r7, #24]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d011      	beq.n	800e9d2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e9ae:	69bb      	ldr	r3, [r7, #24]
 800e9b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	3350      	adds	r3, #80	; 0x50
 800e9b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e9b8:	69bb      	ldr	r3, [r7, #24]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e9c0:	79fa      	ldrb	r2, [r7, #7]
 800e9c2:	69bb      	ldr	r3, [r7, #24]
 800e9c4:	9300      	str	r3, [sp, #0]
 800e9c6:	4613      	mov	r3, r2
 800e9c8:	697a      	ldr	r2, [r7, #20]
 800e9ca:	68b9      	ldr	r1, [r7, #8]
 800e9cc:	68f8      	ldr	r0, [r7, #12]
 800e9ce:	f000 f805 	bl	800e9dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e9d2:	69bb      	ldr	r3, [r7, #24]
	}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3720      	adds	r7, #32
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}

0800e9dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b084      	sub	sp, #16
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	60f8      	str	r0, [r7, #12]
 800e9e4:	60b9      	str	r1, [r7, #8]
 800e9e6:	607a      	str	r2, [r7, #4]
 800e9e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d103      	bne.n	800e9f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e9f0:	69bb      	ldr	r3, [r7, #24]
 800e9f2:	69ba      	ldr	r2, [r7, #24]
 800e9f4:	601a      	str	r2, [r3, #0]
 800e9f6:	e002      	b.n	800e9fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e9f8:	69bb      	ldr	r3, [r7, #24]
 800e9fa:	687a      	ldr	r2, [r7, #4]
 800e9fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e9fe:	69bb      	ldr	r3, [r7, #24]
 800ea00:	68fa      	ldr	r2, [r7, #12]
 800ea02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ea04:	69bb      	ldr	r3, [r7, #24]
 800ea06:	68ba      	ldr	r2, [r7, #8]
 800ea08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ea0a:	2101      	movs	r1, #1
 800ea0c:	69b8      	ldr	r0, [r7, #24]
 800ea0e:	f7ff fecb 	bl	800e7a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ea12:	69bb      	ldr	r3, [r7, #24]
 800ea14:	78fa      	ldrb	r2, [r7, #3]
 800ea16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ea1a:	bf00      	nop
 800ea1c:	3710      	adds	r7, #16
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}

0800ea22 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ea22:	b580      	push	{r7, lr}
 800ea24:	b08a      	sub	sp, #40	; 0x28
 800ea26:	af02      	add	r7, sp, #8
 800ea28:	60f8      	str	r0, [r7, #12]
 800ea2a:	60b9      	str	r1, [r7, #8]
 800ea2c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d10a      	bne.n	800ea4a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800ea34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea38:	f383 8811 	msr	BASEPRI, r3
 800ea3c:	f3bf 8f6f 	isb	sy
 800ea40:	f3bf 8f4f 	dsb	sy
 800ea44:	61bb      	str	r3, [r7, #24]
}
 800ea46:	bf00      	nop
 800ea48:	e7fe      	b.n	800ea48 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ea4a:	68ba      	ldr	r2, [r7, #8]
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d90a      	bls.n	800ea68 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800ea52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea56:	f383 8811 	msr	BASEPRI, r3
 800ea5a:	f3bf 8f6f 	isb	sy
 800ea5e:	f3bf 8f4f 	dsb	sy
 800ea62:	617b      	str	r3, [r7, #20]
}
 800ea64:	bf00      	nop
 800ea66:	e7fe      	b.n	800ea66 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ea68:	2302      	movs	r3, #2
 800ea6a:	9300      	str	r3, [sp, #0]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	2100      	movs	r1, #0
 800ea72:	68f8      	ldr	r0, [r7, #12]
 800ea74:	f7ff ff00 	bl	800e878 <xQueueGenericCreateStatic>
 800ea78:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ea7a:	69fb      	ldr	r3, [r7, #28]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d002      	beq.n	800ea86 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ea80:	69fb      	ldr	r3, [r7, #28]
 800ea82:	68ba      	ldr	r2, [r7, #8]
 800ea84:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ea86:	69fb      	ldr	r3, [r7, #28]
	}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3720      	adds	r7, #32
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b086      	sub	sp, #24
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d10a      	bne.n	800eab6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800eaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa4:	f383 8811 	msr	BASEPRI, r3
 800eaa8:	f3bf 8f6f 	isb	sy
 800eaac:	f3bf 8f4f 	dsb	sy
 800eab0:	613b      	str	r3, [r7, #16]
}
 800eab2:	bf00      	nop
 800eab4:	e7fe      	b.n	800eab4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800eab6:	683a      	ldr	r2, [r7, #0]
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d90a      	bls.n	800ead4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800eabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac2:	f383 8811 	msr	BASEPRI, r3
 800eac6:	f3bf 8f6f 	isb	sy
 800eaca:	f3bf 8f4f 	dsb	sy
 800eace:	60fb      	str	r3, [r7, #12]
}
 800ead0:	bf00      	nop
 800ead2:	e7fe      	b.n	800ead2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ead4:	2202      	movs	r2, #2
 800ead6:	2100      	movs	r1, #0
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f7ff ff45 	bl	800e968 <xQueueGenericCreate>
 800eade:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d002      	beq.n	800eaec <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	683a      	ldr	r2, [r7, #0]
 800eaea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800eaec:	697b      	ldr	r3, [r7, #20]
	}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3718      	adds	r7, #24
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
	...

0800eaf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b08e      	sub	sp, #56	; 0x38
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	607a      	str	r2, [r7, #4]
 800eb04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eb06:	2300      	movs	r3, #0
 800eb08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d10a      	bne.n	800eb2a <xQueueGenericSend+0x32>
	__asm volatile
 800eb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb18:	f383 8811 	msr	BASEPRI, r3
 800eb1c:	f3bf 8f6f 	isb	sy
 800eb20:	f3bf 8f4f 	dsb	sy
 800eb24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eb26:	bf00      	nop
 800eb28:	e7fe      	b.n	800eb28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d103      	bne.n	800eb38 <xQueueGenericSend+0x40>
 800eb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d101      	bne.n	800eb3c <xQueueGenericSend+0x44>
 800eb38:	2301      	movs	r3, #1
 800eb3a:	e000      	b.n	800eb3e <xQueueGenericSend+0x46>
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d10a      	bne.n	800eb58 <xQueueGenericSend+0x60>
	__asm volatile
 800eb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb46:	f383 8811 	msr	BASEPRI, r3
 800eb4a:	f3bf 8f6f 	isb	sy
 800eb4e:	f3bf 8f4f 	dsb	sy
 800eb52:	627b      	str	r3, [r7, #36]	; 0x24
}
 800eb54:	bf00      	nop
 800eb56:	e7fe      	b.n	800eb56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	2b02      	cmp	r3, #2
 800eb5c:	d103      	bne.n	800eb66 <xQueueGenericSend+0x6e>
 800eb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb62:	2b01      	cmp	r3, #1
 800eb64:	d101      	bne.n	800eb6a <xQueueGenericSend+0x72>
 800eb66:	2301      	movs	r3, #1
 800eb68:	e000      	b.n	800eb6c <xQueueGenericSend+0x74>
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d10a      	bne.n	800eb86 <xQueueGenericSend+0x8e>
	__asm volatile
 800eb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb74:	f383 8811 	msr	BASEPRI, r3
 800eb78:	f3bf 8f6f 	isb	sy
 800eb7c:	f3bf 8f4f 	dsb	sy
 800eb80:	623b      	str	r3, [r7, #32]
}
 800eb82:	bf00      	nop
 800eb84:	e7fe      	b.n	800eb84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eb86:	f001 fad3 	bl	8010130 <xTaskGetSchedulerState>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d102      	bne.n	800eb96 <xQueueGenericSend+0x9e>
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d101      	bne.n	800eb9a <xQueueGenericSend+0xa2>
 800eb96:	2301      	movs	r3, #1
 800eb98:	e000      	b.n	800eb9c <xQueueGenericSend+0xa4>
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d10a      	bne.n	800ebb6 <xQueueGenericSend+0xbe>
	__asm volatile
 800eba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba4:	f383 8811 	msr	BASEPRI, r3
 800eba8:	f3bf 8f6f 	isb	sy
 800ebac:	f3bf 8f4f 	dsb	sy
 800ebb0:	61fb      	str	r3, [r7, #28]
}
 800ebb2:	bf00      	nop
 800ebb4:	e7fe      	b.n	800ebb4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ebb6:	f002 f905 	bl	8010dc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ebba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d302      	bcc.n	800ebcc <xQueueGenericSend+0xd4>
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	2b02      	cmp	r3, #2
 800ebca:	d129      	bne.n	800ec20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ebcc:	683a      	ldr	r2, [r7, #0]
 800ebce:	68b9      	ldr	r1, [r7, #8]
 800ebd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebd2:	f000 fa2e 	bl	800f032 <prvCopyDataToQueue>
 800ebd6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ebd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d010      	beq.n	800ec02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ebe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe2:	3324      	adds	r3, #36	; 0x24
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f001 f87f 	bl	800fce8 <xTaskRemoveFromEventList>
 800ebea:	4603      	mov	r3, r0
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d013      	beq.n	800ec18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ebf0:	4b3f      	ldr	r3, [pc, #252]	; (800ecf0 <xQueueGenericSend+0x1f8>)
 800ebf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebf6:	601a      	str	r2, [r3, #0]
 800ebf8:	f3bf 8f4f 	dsb	sy
 800ebfc:	f3bf 8f6f 	isb	sy
 800ec00:	e00a      	b.n	800ec18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ec02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d007      	beq.n	800ec18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ec08:	4b39      	ldr	r3, [pc, #228]	; (800ecf0 <xQueueGenericSend+0x1f8>)
 800ec0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec0e:	601a      	str	r2, [r3, #0]
 800ec10:	f3bf 8f4f 	dsb	sy
 800ec14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ec18:	f002 f904 	bl	8010e24 <vPortExitCritical>
				return pdPASS;
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	e063      	b.n	800ece8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d103      	bne.n	800ec2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ec26:	f002 f8fd 	bl	8010e24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	e05c      	b.n	800ece8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ec2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d106      	bne.n	800ec42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ec34:	f107 0314 	add.w	r3, r7, #20
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f001 f91b 	bl	800fe74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ec3e:	2301      	movs	r3, #1
 800ec40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ec42:	f002 f8ef 	bl	8010e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ec46:	f000 fde9 	bl	800f81c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ec4a:	f002 f8bb 	bl	8010dc4 <vPortEnterCritical>
 800ec4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec54:	b25b      	sxtb	r3, r3
 800ec56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec5a:	d103      	bne.n	800ec64 <xQueueGenericSend+0x16c>
 800ec5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5e:	2200      	movs	r2, #0
 800ec60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec6a:	b25b      	sxtb	r3, r3
 800ec6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec70:	d103      	bne.n	800ec7a <xQueueGenericSend+0x182>
 800ec72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec74:	2200      	movs	r2, #0
 800ec76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec7a:	f002 f8d3 	bl	8010e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ec7e:	1d3a      	adds	r2, r7, #4
 800ec80:	f107 0314 	add.w	r3, r7, #20
 800ec84:	4611      	mov	r1, r2
 800ec86:	4618      	mov	r0, r3
 800ec88:	f001 f90a 	bl	800fea0 <xTaskCheckForTimeOut>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d124      	bne.n	800ecdc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ec92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec94:	f000 fac5 	bl	800f222 <prvIsQueueFull>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d018      	beq.n	800ecd0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ec9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca0:	3310      	adds	r3, #16
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	4611      	mov	r1, r2
 800eca6:	4618      	mov	r0, r3
 800eca8:	f000 ff92 	bl	800fbd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ecac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecae:	f000 fa50 	bl	800f152 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ecb2:	f000 fdc1 	bl	800f838 <xTaskResumeAll>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	f47f af7c 	bne.w	800ebb6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ecbe:	4b0c      	ldr	r3, [pc, #48]	; (800ecf0 <xQueueGenericSend+0x1f8>)
 800ecc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecc4:	601a      	str	r2, [r3, #0]
 800ecc6:	f3bf 8f4f 	dsb	sy
 800ecca:	f3bf 8f6f 	isb	sy
 800ecce:	e772      	b.n	800ebb6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ecd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecd2:	f000 fa3e 	bl	800f152 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ecd6:	f000 fdaf 	bl	800f838 <xTaskResumeAll>
 800ecda:	e76c      	b.n	800ebb6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ecdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecde:	f000 fa38 	bl	800f152 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ece2:	f000 fda9 	bl	800f838 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ece6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	3738      	adds	r7, #56	; 0x38
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	e000ed04 	.word	0xe000ed04

0800ecf4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b090      	sub	sp, #64	; 0x40
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	60f8      	str	r0, [r7, #12]
 800ecfc:	60b9      	str	r1, [r7, #8]
 800ecfe:	607a      	str	r2, [r7, #4]
 800ed00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ed06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d10a      	bne.n	800ed22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ed0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed10:	f383 8811 	msr	BASEPRI, r3
 800ed14:	f3bf 8f6f 	isb	sy
 800ed18:	f3bf 8f4f 	dsb	sy
 800ed1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ed1e:	bf00      	nop
 800ed20:	e7fe      	b.n	800ed20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d103      	bne.n	800ed30 <xQueueGenericSendFromISR+0x3c>
 800ed28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d101      	bne.n	800ed34 <xQueueGenericSendFromISR+0x40>
 800ed30:	2301      	movs	r3, #1
 800ed32:	e000      	b.n	800ed36 <xQueueGenericSendFromISR+0x42>
 800ed34:	2300      	movs	r3, #0
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d10a      	bne.n	800ed50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ed3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed3e:	f383 8811 	msr	BASEPRI, r3
 800ed42:	f3bf 8f6f 	isb	sy
 800ed46:	f3bf 8f4f 	dsb	sy
 800ed4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ed4c:	bf00      	nop
 800ed4e:	e7fe      	b.n	800ed4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	2b02      	cmp	r3, #2
 800ed54:	d103      	bne.n	800ed5e <xQueueGenericSendFromISR+0x6a>
 800ed56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed5a:	2b01      	cmp	r3, #1
 800ed5c:	d101      	bne.n	800ed62 <xQueueGenericSendFromISR+0x6e>
 800ed5e:	2301      	movs	r3, #1
 800ed60:	e000      	b.n	800ed64 <xQueueGenericSendFromISR+0x70>
 800ed62:	2300      	movs	r3, #0
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d10a      	bne.n	800ed7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ed68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed6c:	f383 8811 	msr	BASEPRI, r3
 800ed70:	f3bf 8f6f 	isb	sy
 800ed74:	f3bf 8f4f 	dsb	sy
 800ed78:	623b      	str	r3, [r7, #32]
}
 800ed7a:	bf00      	nop
 800ed7c:	e7fe      	b.n	800ed7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed7e:	f002 f903 	bl	8010f88 <vPortValidateInterruptPriority>
	__asm volatile
 800ed82:	f3ef 8211 	mrs	r2, BASEPRI
 800ed86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed8a:	f383 8811 	msr	BASEPRI, r3
 800ed8e:	f3bf 8f6f 	isb	sy
 800ed92:	f3bf 8f4f 	dsb	sy
 800ed96:	61fa      	str	r2, [r7, #28]
 800ed98:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800ed9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ed9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d302      	bcc.n	800edb0 <xQueueGenericSendFromISR+0xbc>
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	2b02      	cmp	r3, #2
 800edae:	d12f      	bne.n	800ee10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800edb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800edb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800edba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edbe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800edc0:	683a      	ldr	r2, [r7, #0]
 800edc2:	68b9      	ldr	r1, [r7, #8]
 800edc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800edc6:	f000 f934 	bl	800f032 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800edca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800edce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edd2:	d112      	bne.n	800edfa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800edd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d016      	beq.n	800ee0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edde:	3324      	adds	r3, #36	; 0x24
 800ede0:	4618      	mov	r0, r3
 800ede2:	f000 ff81 	bl	800fce8 <xTaskRemoveFromEventList>
 800ede6:	4603      	mov	r3, r0
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d00e      	beq.n	800ee0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d00b      	beq.n	800ee0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2201      	movs	r2, #1
 800edf6:	601a      	str	r2, [r3, #0]
 800edf8:	e007      	b.n	800ee0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800edfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800edfe:	3301      	adds	r3, #1
 800ee00:	b2db      	uxtb	r3, r3
 800ee02:	b25a      	sxtb	r2, r3
 800ee04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ee0a:	2301      	movs	r3, #1
 800ee0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ee0e:	e001      	b.n	800ee14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ee10:	2300      	movs	r3, #0
 800ee12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee16:	617b      	str	r3, [r7, #20]
	__asm volatile
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	f383 8811 	msr	BASEPRI, r3
}
 800ee1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ee20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3740      	adds	r7, #64	; 0x40
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}
	...

0800ee2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b08c      	sub	sp, #48	; 0x30
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	60f8      	str	r0, [r7, #12]
 800ee34:	60b9      	str	r1, [r7, #8]
 800ee36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ee40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d10a      	bne.n	800ee5c <xQueueReceive+0x30>
	__asm volatile
 800ee46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee4a:	f383 8811 	msr	BASEPRI, r3
 800ee4e:	f3bf 8f6f 	isb	sy
 800ee52:	f3bf 8f4f 	dsb	sy
 800ee56:	623b      	str	r3, [r7, #32]
}
 800ee58:	bf00      	nop
 800ee5a:	e7fe      	b.n	800ee5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d103      	bne.n	800ee6a <xQueueReceive+0x3e>
 800ee62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d101      	bne.n	800ee6e <xQueueReceive+0x42>
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	e000      	b.n	800ee70 <xQueueReceive+0x44>
 800ee6e:	2300      	movs	r3, #0
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d10a      	bne.n	800ee8a <xQueueReceive+0x5e>
	__asm volatile
 800ee74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee78:	f383 8811 	msr	BASEPRI, r3
 800ee7c:	f3bf 8f6f 	isb	sy
 800ee80:	f3bf 8f4f 	dsb	sy
 800ee84:	61fb      	str	r3, [r7, #28]
}
 800ee86:	bf00      	nop
 800ee88:	e7fe      	b.n	800ee88 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ee8a:	f001 f951 	bl	8010130 <xTaskGetSchedulerState>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d102      	bne.n	800ee9a <xQueueReceive+0x6e>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d101      	bne.n	800ee9e <xQueueReceive+0x72>
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	e000      	b.n	800eea0 <xQueueReceive+0x74>
 800ee9e:	2300      	movs	r3, #0
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d10a      	bne.n	800eeba <xQueueReceive+0x8e>
	__asm volatile
 800eea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea8:	f383 8811 	msr	BASEPRI, r3
 800eeac:	f3bf 8f6f 	isb	sy
 800eeb0:	f3bf 8f4f 	dsb	sy
 800eeb4:	61bb      	str	r3, [r7, #24]
}
 800eeb6:	bf00      	nop
 800eeb8:	e7fe      	b.n	800eeb8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eeba:	f001 ff83 	bl	8010dc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eec2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d01f      	beq.n	800ef0a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eeca:	68b9      	ldr	r1, [r7, #8]
 800eecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eece:	f000 f91a 	bl	800f106 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed4:	1e5a      	subs	r2, r3, #1
 800eed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eeda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eedc:	691b      	ldr	r3, [r3, #16]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d00f      	beq.n	800ef02 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee4:	3310      	adds	r3, #16
 800eee6:	4618      	mov	r0, r3
 800eee8:	f000 fefe 	bl	800fce8 <xTaskRemoveFromEventList>
 800eeec:	4603      	mov	r3, r0
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d007      	beq.n	800ef02 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eef2:	4b3d      	ldr	r3, [pc, #244]	; (800efe8 <xQueueReceive+0x1bc>)
 800eef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eef8:	601a      	str	r2, [r3, #0]
 800eefa:	f3bf 8f4f 	dsb	sy
 800eefe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ef02:	f001 ff8f 	bl	8010e24 <vPortExitCritical>
				return pdPASS;
 800ef06:	2301      	movs	r3, #1
 800ef08:	e069      	b.n	800efde <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d103      	bne.n	800ef18 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ef10:	f001 ff88 	bl	8010e24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ef14:	2300      	movs	r3, #0
 800ef16:	e062      	b.n	800efde <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ef18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d106      	bne.n	800ef2c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef1e:	f107 0310 	add.w	r3, r7, #16
 800ef22:	4618      	mov	r0, r3
 800ef24:	f000 ffa6 	bl	800fe74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ef28:	2301      	movs	r3, #1
 800ef2a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ef2c:	f001 ff7a 	bl	8010e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ef30:	f000 fc74 	bl	800f81c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef34:	f001 ff46 	bl	8010dc4 <vPortEnterCritical>
 800ef38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef3e:	b25b      	sxtb	r3, r3
 800ef40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef44:	d103      	bne.n	800ef4e <xQueueReceive+0x122>
 800ef46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef48:	2200      	movs	r2, #0
 800ef4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef54:	b25b      	sxtb	r3, r3
 800ef56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef5a:	d103      	bne.n	800ef64 <xQueueReceive+0x138>
 800ef5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef5e:	2200      	movs	r2, #0
 800ef60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef64:	f001 ff5e 	bl	8010e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ef68:	1d3a      	adds	r2, r7, #4
 800ef6a:	f107 0310 	add.w	r3, r7, #16
 800ef6e:	4611      	mov	r1, r2
 800ef70:	4618      	mov	r0, r3
 800ef72:	f000 ff95 	bl	800fea0 <xTaskCheckForTimeOut>
 800ef76:	4603      	mov	r3, r0
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d123      	bne.n	800efc4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef7e:	f000 f93a 	bl	800f1f6 <prvIsQueueEmpty>
 800ef82:	4603      	mov	r3, r0
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d017      	beq.n	800efb8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ef88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef8a:	3324      	adds	r3, #36	; 0x24
 800ef8c:	687a      	ldr	r2, [r7, #4]
 800ef8e:	4611      	mov	r1, r2
 800ef90:	4618      	mov	r0, r3
 800ef92:	f000 fe1d 	bl	800fbd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ef96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef98:	f000 f8db 	bl	800f152 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ef9c:	f000 fc4c 	bl	800f838 <xTaskResumeAll>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d189      	bne.n	800eeba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800efa6:	4b10      	ldr	r3, [pc, #64]	; (800efe8 <xQueueReceive+0x1bc>)
 800efa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efac:	601a      	str	r2, [r3, #0]
 800efae:	f3bf 8f4f 	dsb	sy
 800efb2:	f3bf 8f6f 	isb	sy
 800efb6:	e780      	b.n	800eeba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800efb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efba:	f000 f8ca 	bl	800f152 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800efbe:	f000 fc3b 	bl	800f838 <xTaskResumeAll>
 800efc2:	e77a      	b.n	800eeba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800efc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efc6:	f000 f8c4 	bl	800f152 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800efca:	f000 fc35 	bl	800f838 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800efce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efd0:	f000 f911 	bl	800f1f6 <prvIsQueueEmpty>
 800efd4:	4603      	mov	r3, r0
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	f43f af6f 	beq.w	800eeba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800efdc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3730      	adds	r7, #48	; 0x30
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
 800efe6:	bf00      	nop
 800efe8:	e000ed04 	.word	0xe000ed04

0800efec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b084      	sub	sp, #16
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d10a      	bne.n	800f014 <vQueueDelete+0x28>
	__asm volatile
 800effe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f002:	f383 8811 	msr	BASEPRI, r3
 800f006:	f3bf 8f6f 	isb	sy
 800f00a:	f3bf 8f4f 	dsb	sy
 800f00e:	60bb      	str	r3, [r7, #8]
}
 800f010:	bf00      	nop
 800f012:	e7fe      	b.n	800f012 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f014:	68f8      	ldr	r0, [r7, #12]
 800f016:	f000 f947 	bl	800f2a8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f020:	2b00      	cmp	r3, #0
 800f022:	d102      	bne.n	800f02a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f024:	68f8      	ldr	r0, [r7, #12]
 800f026:	f002 f8bb 	bl	80111a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f02a:	bf00      	nop
 800f02c:	3710      	adds	r7, #16
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}

0800f032 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f032:	b580      	push	{r7, lr}
 800f034:	b086      	sub	sp, #24
 800f036:	af00      	add	r7, sp, #0
 800f038:	60f8      	str	r0, [r7, #12]
 800f03a:	60b9      	str	r1, [r7, #8]
 800f03c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f03e:	2300      	movs	r3, #0
 800f040:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f046:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d10d      	bne.n	800f06c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d14d      	bne.n	800f0f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	689b      	ldr	r3, [r3, #8]
 800f05c:	4618      	mov	r0, r3
 800f05e:	f001 f885 	bl	801016c <xTaskPriorityDisinherit>
 800f062:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2200      	movs	r2, #0
 800f068:	609a      	str	r2, [r3, #8]
 800f06a:	e043      	b.n	800f0f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d119      	bne.n	800f0a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	6858      	ldr	r0, [r3, #4]
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f07a:	461a      	mov	r2, r3
 800f07c:	68b9      	ldr	r1, [r7, #8]
 800f07e:	f003 f895 	bl	80121ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	685a      	ldr	r2, [r3, #4]
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f08a:	441a      	add	r2, r3
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	685a      	ldr	r2, [r3, #4]
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	689b      	ldr	r3, [r3, #8]
 800f098:	429a      	cmp	r2, r3
 800f09a:	d32b      	bcc.n	800f0f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	681a      	ldr	r2, [r3, #0]
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	605a      	str	r2, [r3, #4]
 800f0a4:	e026      	b.n	800f0f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	68d8      	ldr	r0, [r3, #12]
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	68b9      	ldr	r1, [r7, #8]
 800f0b2:	f003 f87b 	bl	80121ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	68da      	ldr	r2, [r3, #12]
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0be:	425b      	negs	r3, r3
 800f0c0:	441a      	add	r2, r3
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	68da      	ldr	r2, [r3, #12]
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d207      	bcs.n	800f0e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	689a      	ldr	r2, [r3, #8]
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0da:	425b      	negs	r3, r3
 800f0dc:	441a      	add	r2, r3
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2b02      	cmp	r3, #2
 800f0e6:	d105      	bne.n	800f0f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f0e8:	693b      	ldr	r3, [r7, #16]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d002      	beq.n	800f0f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	3b01      	subs	r3, #1
 800f0f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	1c5a      	adds	r2, r3, #1
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f0fc:	697b      	ldr	r3, [r7, #20]
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3718      	adds	r7, #24
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}

0800f106 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f106:	b580      	push	{r7, lr}
 800f108:	b082      	sub	sp, #8
 800f10a:	af00      	add	r7, sp, #0
 800f10c:	6078      	str	r0, [r7, #4]
 800f10e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f114:	2b00      	cmp	r3, #0
 800f116:	d018      	beq.n	800f14a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	68da      	ldr	r2, [r3, #12]
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f120:	441a      	add	r2, r3
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	68da      	ldr	r2, [r3, #12]
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	689b      	ldr	r3, [r3, #8]
 800f12e:	429a      	cmp	r2, r3
 800f130:	d303      	bcc.n	800f13a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681a      	ldr	r2, [r3, #0]
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	68d9      	ldr	r1, [r3, #12]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f142:	461a      	mov	r2, r3
 800f144:	6838      	ldr	r0, [r7, #0]
 800f146:	f003 f831 	bl	80121ac <memcpy>
	}
}
 800f14a:	bf00      	nop
 800f14c:	3708      	adds	r7, #8
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}

0800f152 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f152:	b580      	push	{r7, lr}
 800f154:	b084      	sub	sp, #16
 800f156:	af00      	add	r7, sp, #0
 800f158:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f15a:	f001 fe33 	bl	8010dc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f164:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f166:	e011      	b.n	800f18c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d012      	beq.n	800f196 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	3324      	adds	r3, #36	; 0x24
 800f174:	4618      	mov	r0, r3
 800f176:	f000 fdb7 	bl	800fce8 <xTaskRemoveFromEventList>
 800f17a:	4603      	mov	r3, r0
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d001      	beq.n	800f184 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f180:	f000 fef0 	bl	800ff64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f184:	7bfb      	ldrb	r3, [r7, #15]
 800f186:	3b01      	subs	r3, #1
 800f188:	b2db      	uxtb	r3, r3
 800f18a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f18c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f190:	2b00      	cmp	r3, #0
 800f192:	dce9      	bgt.n	800f168 <prvUnlockQueue+0x16>
 800f194:	e000      	b.n	800f198 <prvUnlockQueue+0x46>
					break;
 800f196:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	22ff      	movs	r2, #255	; 0xff
 800f19c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f1a0:	f001 fe40 	bl	8010e24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f1a4:	f001 fe0e 	bl	8010dc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f1ae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f1b0:	e011      	b.n	800f1d6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	691b      	ldr	r3, [r3, #16]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d012      	beq.n	800f1e0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	3310      	adds	r3, #16
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f000 fd92 	bl	800fce8 <xTaskRemoveFromEventList>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d001      	beq.n	800f1ce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f1ca:	f000 fecb 	bl	800ff64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f1ce:	7bbb      	ldrb	r3, [r7, #14]
 800f1d0:	3b01      	subs	r3, #1
 800f1d2:	b2db      	uxtb	r3, r3
 800f1d4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f1d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	dce9      	bgt.n	800f1b2 <prvUnlockQueue+0x60>
 800f1de:	e000      	b.n	800f1e2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f1e0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	22ff      	movs	r2, #255	; 0xff
 800f1e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f1ea:	f001 fe1b 	bl	8010e24 <vPortExitCritical>
}
 800f1ee:	bf00      	nop
 800f1f0:	3710      	adds	r7, #16
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}

0800f1f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f1f6:	b580      	push	{r7, lr}
 800f1f8:	b084      	sub	sp, #16
 800f1fa:	af00      	add	r7, sp, #0
 800f1fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f1fe:	f001 fde1 	bl	8010dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f206:	2b00      	cmp	r3, #0
 800f208:	d102      	bne.n	800f210 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f20a:	2301      	movs	r3, #1
 800f20c:	60fb      	str	r3, [r7, #12]
 800f20e:	e001      	b.n	800f214 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f210:	2300      	movs	r3, #0
 800f212:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f214:	f001 fe06 	bl	8010e24 <vPortExitCritical>

	return xReturn;
 800f218:	68fb      	ldr	r3, [r7, #12]
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3710      	adds	r7, #16
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}

0800f222 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f222:	b580      	push	{r7, lr}
 800f224:	b084      	sub	sp, #16
 800f226:	af00      	add	r7, sp, #0
 800f228:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f22a:	f001 fdcb 	bl	8010dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f236:	429a      	cmp	r2, r3
 800f238:	d102      	bne.n	800f240 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f23a:	2301      	movs	r3, #1
 800f23c:	60fb      	str	r3, [r7, #12]
 800f23e:	e001      	b.n	800f244 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f240:	2300      	movs	r3, #0
 800f242:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f244:	f001 fdee 	bl	8010e24 <vPortExitCritical>

	return xReturn;
 800f248:	68fb      	ldr	r3, [r7, #12]
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3710      	adds	r7, #16
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
	...

0800f254 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f254:	b480      	push	{r7}
 800f256:	b085      	sub	sp, #20
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f25e:	2300      	movs	r3, #0
 800f260:	60fb      	str	r3, [r7, #12]
 800f262:	e014      	b.n	800f28e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f264:	4a0f      	ldr	r2, [pc, #60]	; (800f2a4 <vQueueAddToRegistry+0x50>)
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d10b      	bne.n	800f288 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f270:	490c      	ldr	r1, [pc, #48]	; (800f2a4 <vQueueAddToRegistry+0x50>)
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	683a      	ldr	r2, [r7, #0]
 800f276:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f27a:	4a0a      	ldr	r2, [pc, #40]	; (800f2a4 <vQueueAddToRegistry+0x50>)
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	00db      	lsls	r3, r3, #3
 800f280:	4413      	add	r3, r2
 800f282:	687a      	ldr	r2, [r7, #4]
 800f284:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f286:	e006      	b.n	800f296 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	3301      	adds	r3, #1
 800f28c:	60fb      	str	r3, [r7, #12]
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	2b07      	cmp	r3, #7
 800f292:	d9e7      	bls.n	800f264 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f294:	bf00      	nop
 800f296:	bf00      	nop
 800f298:	3714      	adds	r7, #20
 800f29a:	46bd      	mov	sp, r7
 800f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a0:	4770      	bx	lr
 800f2a2:	bf00      	nop
 800f2a4:	20000df8 	.word	0x20000df8

0800f2a8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b085      	sub	sp, #20
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	60fb      	str	r3, [r7, #12]
 800f2b4:	e016      	b.n	800f2e4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f2b6:	4a10      	ldr	r2, [pc, #64]	; (800f2f8 <vQueueUnregisterQueue+0x50>)
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	00db      	lsls	r3, r3, #3
 800f2bc:	4413      	add	r3, r2
 800f2be:	685b      	ldr	r3, [r3, #4]
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d10b      	bne.n	800f2de <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f2c6:	4a0c      	ldr	r2, [pc, #48]	; (800f2f8 <vQueueUnregisterQueue+0x50>)
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	2100      	movs	r1, #0
 800f2cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f2d0:	4a09      	ldr	r2, [pc, #36]	; (800f2f8 <vQueueUnregisterQueue+0x50>)
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	00db      	lsls	r3, r3, #3
 800f2d6:	4413      	add	r3, r2
 800f2d8:	2200      	movs	r2, #0
 800f2da:	605a      	str	r2, [r3, #4]
				break;
 800f2dc:	e006      	b.n	800f2ec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	3301      	adds	r3, #1
 800f2e2:	60fb      	str	r3, [r7, #12]
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	2b07      	cmp	r3, #7
 800f2e8:	d9e5      	bls.n	800f2b6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f2ea:	bf00      	nop
 800f2ec:	bf00      	nop
 800f2ee:	3714      	adds	r7, #20
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr
 800f2f8:	20000df8 	.word	0x20000df8

0800f2fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b086      	sub	sp, #24
 800f300:	af00      	add	r7, sp, #0
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f30c:	f001 fd5a 	bl	8010dc4 <vPortEnterCritical>
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f316:	b25b      	sxtb	r3, r3
 800f318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f31c:	d103      	bne.n	800f326 <vQueueWaitForMessageRestricted+0x2a>
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	2200      	movs	r2, #0
 800f322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f32c:	b25b      	sxtb	r3, r3
 800f32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f332:	d103      	bne.n	800f33c <vQueueWaitForMessageRestricted+0x40>
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	2200      	movs	r2, #0
 800f338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f33c:	f001 fd72 	bl	8010e24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f344:	2b00      	cmp	r3, #0
 800f346:	d106      	bne.n	800f356 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	3324      	adds	r3, #36	; 0x24
 800f34c:	687a      	ldr	r2, [r7, #4]
 800f34e:	68b9      	ldr	r1, [r7, #8]
 800f350:	4618      	mov	r0, r3
 800f352:	f000 fc9d 	bl	800fc90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f356:	6978      	ldr	r0, [r7, #20]
 800f358:	f7ff fefb 	bl	800f152 <prvUnlockQueue>
	}
 800f35c:	bf00      	nop
 800f35e:	3718      	adds	r7, #24
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f364:	b580      	push	{r7, lr}
 800f366:	b08e      	sub	sp, #56	; 0x38
 800f368:	af04      	add	r7, sp, #16
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	60b9      	str	r1, [r7, #8]
 800f36e:	607a      	str	r2, [r7, #4]
 800f370:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f374:	2b00      	cmp	r3, #0
 800f376:	d10a      	bne.n	800f38e <xTaskCreateStatic+0x2a>
	__asm volatile
 800f378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f37c:	f383 8811 	msr	BASEPRI, r3
 800f380:	f3bf 8f6f 	isb	sy
 800f384:	f3bf 8f4f 	dsb	sy
 800f388:	623b      	str	r3, [r7, #32]
}
 800f38a:	bf00      	nop
 800f38c:	e7fe      	b.n	800f38c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f390:	2b00      	cmp	r3, #0
 800f392:	d10a      	bne.n	800f3aa <xTaskCreateStatic+0x46>
	__asm volatile
 800f394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f398:	f383 8811 	msr	BASEPRI, r3
 800f39c:	f3bf 8f6f 	isb	sy
 800f3a0:	f3bf 8f4f 	dsb	sy
 800f3a4:	61fb      	str	r3, [r7, #28]
}
 800f3a6:	bf00      	nop
 800f3a8:	e7fe      	b.n	800f3a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f3aa:	23bc      	movs	r3, #188	; 0xbc
 800f3ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	2bbc      	cmp	r3, #188	; 0xbc
 800f3b2:	d00a      	beq.n	800f3ca <xTaskCreateStatic+0x66>
	__asm volatile
 800f3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3b8:	f383 8811 	msr	BASEPRI, r3
 800f3bc:	f3bf 8f6f 	isb	sy
 800f3c0:	f3bf 8f4f 	dsb	sy
 800f3c4:	61bb      	str	r3, [r7, #24]
}
 800f3c6:	bf00      	nop
 800f3c8:	e7fe      	b.n	800f3c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f3ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d01e      	beq.n	800f410 <xTaskCreateStatic+0xac>
 800f3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d01b      	beq.n	800f410 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e4:	2202      	movs	r2, #2
 800f3e6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	9303      	str	r3, [sp, #12]
 800f3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f0:	9302      	str	r3, [sp, #8]
 800f3f2:	f107 0314 	add.w	r3, r7, #20
 800f3f6:	9301      	str	r3, [sp, #4]
 800f3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3fa:	9300      	str	r3, [sp, #0]
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	687a      	ldr	r2, [r7, #4]
 800f400:	68b9      	ldr	r1, [r7, #8]
 800f402:	68f8      	ldr	r0, [r7, #12]
 800f404:	f000 f850 	bl	800f4a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f40a:	f000 f8f3 	bl	800f5f4 <prvAddNewTaskToReadyList>
 800f40e:	e001      	b.n	800f414 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f410:	2300      	movs	r3, #0
 800f412:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f414:	697b      	ldr	r3, [r7, #20]
	}
 800f416:	4618      	mov	r0, r3
 800f418:	3728      	adds	r7, #40	; 0x28
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}

0800f41e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f41e:	b580      	push	{r7, lr}
 800f420:	b08c      	sub	sp, #48	; 0x30
 800f422:	af04      	add	r7, sp, #16
 800f424:	60f8      	str	r0, [r7, #12]
 800f426:	60b9      	str	r1, [r7, #8]
 800f428:	603b      	str	r3, [r7, #0]
 800f42a:	4613      	mov	r3, r2
 800f42c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f42e:	88fb      	ldrh	r3, [r7, #6]
 800f430:	009b      	lsls	r3, r3, #2
 800f432:	4618      	mov	r0, r3
 800f434:	f001 fde8 	bl	8011008 <pvPortMalloc>
 800f438:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d00e      	beq.n	800f45e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f440:	20bc      	movs	r0, #188	; 0xbc
 800f442:	f001 fde1 	bl	8011008 <pvPortMalloc>
 800f446:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d003      	beq.n	800f456 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f44e:	69fb      	ldr	r3, [r7, #28]
 800f450:	697a      	ldr	r2, [r7, #20]
 800f452:	631a      	str	r2, [r3, #48]	; 0x30
 800f454:	e005      	b.n	800f462 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f456:	6978      	ldr	r0, [r7, #20]
 800f458:	f001 fea2 	bl	80111a0 <vPortFree>
 800f45c:	e001      	b.n	800f462 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f45e:	2300      	movs	r3, #0
 800f460:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f462:	69fb      	ldr	r3, [r7, #28]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d017      	beq.n	800f498 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	2200      	movs	r2, #0
 800f46c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f470:	88fa      	ldrh	r2, [r7, #6]
 800f472:	2300      	movs	r3, #0
 800f474:	9303      	str	r3, [sp, #12]
 800f476:	69fb      	ldr	r3, [r7, #28]
 800f478:	9302      	str	r3, [sp, #8]
 800f47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47c:	9301      	str	r3, [sp, #4]
 800f47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f480:	9300      	str	r3, [sp, #0]
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	68b9      	ldr	r1, [r7, #8]
 800f486:	68f8      	ldr	r0, [r7, #12]
 800f488:	f000 f80e 	bl	800f4a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f48c:	69f8      	ldr	r0, [r7, #28]
 800f48e:	f000 f8b1 	bl	800f5f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f492:	2301      	movs	r3, #1
 800f494:	61bb      	str	r3, [r7, #24]
 800f496:	e002      	b.n	800f49e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f498:	f04f 33ff 	mov.w	r3, #4294967295
 800f49c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f49e:	69bb      	ldr	r3, [r7, #24]
	}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3720      	adds	r7, #32
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}

0800f4a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b088      	sub	sp, #32
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	60f8      	str	r0, [r7, #12]
 800f4b0:	60b9      	str	r1, [r7, #8]
 800f4b2:	607a      	str	r2, [r7, #4]
 800f4b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	009b      	lsls	r3, r3, #2
 800f4be:	461a      	mov	r2, r3
 800f4c0:	21a5      	movs	r1, #165	; 0xa5
 800f4c2:	f002 fe81 	bl	80121c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f4d0:	3b01      	subs	r3, #1
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	4413      	add	r3, r2
 800f4d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f4d8:	69bb      	ldr	r3, [r7, #24]
 800f4da:	f023 0307 	bic.w	r3, r3, #7
 800f4de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f4e0:	69bb      	ldr	r3, [r7, #24]
 800f4e2:	f003 0307 	and.w	r3, r3, #7
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d00a      	beq.n	800f500 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ee:	f383 8811 	msr	BASEPRI, r3
 800f4f2:	f3bf 8f6f 	isb	sy
 800f4f6:	f3bf 8f4f 	dsb	sy
 800f4fa:	617b      	str	r3, [r7, #20]
}
 800f4fc:	bf00      	nop
 800f4fe:	e7fe      	b.n	800f4fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d01f      	beq.n	800f546 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f506:	2300      	movs	r3, #0
 800f508:	61fb      	str	r3, [r7, #28]
 800f50a:	e012      	b.n	800f532 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f50c:	68ba      	ldr	r2, [r7, #8]
 800f50e:	69fb      	ldr	r3, [r7, #28]
 800f510:	4413      	add	r3, r2
 800f512:	7819      	ldrb	r1, [r3, #0]
 800f514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f516:	69fb      	ldr	r3, [r7, #28]
 800f518:	4413      	add	r3, r2
 800f51a:	3334      	adds	r3, #52	; 0x34
 800f51c:	460a      	mov	r2, r1
 800f51e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f520:	68ba      	ldr	r2, [r7, #8]
 800f522:	69fb      	ldr	r3, [r7, #28]
 800f524:	4413      	add	r3, r2
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d006      	beq.n	800f53a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f52c:	69fb      	ldr	r3, [r7, #28]
 800f52e:	3301      	adds	r3, #1
 800f530:	61fb      	str	r3, [r7, #28]
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	2b0f      	cmp	r3, #15
 800f536:	d9e9      	bls.n	800f50c <prvInitialiseNewTask+0x64>
 800f538:	e000      	b.n	800f53c <prvInitialiseNewTask+0x94>
			{
				break;
 800f53a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f53e:	2200      	movs	r2, #0
 800f540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f544:	e003      	b.n	800f54e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f548:	2200      	movs	r2, #0
 800f54a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f550:	2b37      	cmp	r3, #55	; 0x37
 800f552:	d901      	bls.n	800f558 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f554:	2337      	movs	r3, #55	; 0x37
 800f556:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f55a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f55c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f562:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f566:	2200      	movs	r2, #0
 800f568:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f56c:	3304      	adds	r3, #4
 800f56e:	4618      	mov	r0, r3
 800f570:	f7ff f886 	bl	800e680 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f576:	3318      	adds	r3, #24
 800f578:	4618      	mov	r0, r3
 800f57a:	f7ff f881 	bl	800e680 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f582:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f586:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f58c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f592:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f596:	2200      	movs	r2, #0
 800f598:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f59e:	2200      	movs	r2, #0
 800f5a0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a6:	3354      	adds	r3, #84	; 0x54
 800f5a8:	2260      	movs	r2, #96	; 0x60
 800f5aa:	2100      	movs	r1, #0
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f002 fe0b 	bl	80121c8 <memset>
 800f5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b4:	4a0c      	ldr	r2, [pc, #48]	; (800f5e8 <prvInitialiseNewTask+0x140>)
 800f5b6:	659a      	str	r2, [r3, #88]	; 0x58
 800f5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ba:	4a0c      	ldr	r2, [pc, #48]	; (800f5ec <prvInitialiseNewTask+0x144>)
 800f5bc:	65da      	str	r2, [r3, #92]	; 0x5c
 800f5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c0:	4a0b      	ldr	r2, [pc, #44]	; (800f5f0 <prvInitialiseNewTask+0x148>)
 800f5c2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f5c4:	683a      	ldr	r2, [r7, #0]
 800f5c6:	68f9      	ldr	r1, [r7, #12]
 800f5c8:	69b8      	ldr	r0, [r7, #24]
 800f5ca:	f001 fad1 	bl	8010b70 <pxPortInitialiseStack>
 800f5ce:	4602      	mov	r2, r0
 800f5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d002      	beq.n	800f5e0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f5e0:	bf00      	nop
 800f5e2:	3720      	adds	r7, #32
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	08015194 	.word	0x08015194
 800f5ec:	080151b4 	.word	0x080151b4
 800f5f0:	08015174 	.word	0x08015174

0800f5f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b082      	sub	sp, #8
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f5fc:	f001 fbe2 	bl	8010dc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f600:	4b2d      	ldr	r3, [pc, #180]	; (800f6b8 <prvAddNewTaskToReadyList+0xc4>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	3301      	adds	r3, #1
 800f606:	4a2c      	ldr	r2, [pc, #176]	; (800f6b8 <prvAddNewTaskToReadyList+0xc4>)
 800f608:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f60a:	4b2c      	ldr	r3, [pc, #176]	; (800f6bc <prvAddNewTaskToReadyList+0xc8>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d109      	bne.n	800f626 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f612:	4a2a      	ldr	r2, [pc, #168]	; (800f6bc <prvAddNewTaskToReadyList+0xc8>)
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f618:	4b27      	ldr	r3, [pc, #156]	; (800f6b8 <prvAddNewTaskToReadyList+0xc4>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d110      	bne.n	800f642 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f620:	f000 fcc4 	bl	800ffac <prvInitialiseTaskLists>
 800f624:	e00d      	b.n	800f642 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f626:	4b26      	ldr	r3, [pc, #152]	; (800f6c0 <prvAddNewTaskToReadyList+0xcc>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d109      	bne.n	800f642 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f62e:	4b23      	ldr	r3, [pc, #140]	; (800f6bc <prvAddNewTaskToReadyList+0xc8>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f638:	429a      	cmp	r2, r3
 800f63a:	d802      	bhi.n	800f642 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f63c:	4a1f      	ldr	r2, [pc, #124]	; (800f6bc <prvAddNewTaskToReadyList+0xc8>)
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f642:	4b20      	ldr	r3, [pc, #128]	; (800f6c4 <prvAddNewTaskToReadyList+0xd0>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	3301      	adds	r3, #1
 800f648:	4a1e      	ldr	r2, [pc, #120]	; (800f6c4 <prvAddNewTaskToReadyList+0xd0>)
 800f64a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f64c:	4b1d      	ldr	r3, [pc, #116]	; (800f6c4 <prvAddNewTaskToReadyList+0xd0>)
 800f64e:	681a      	ldr	r2, [r3, #0]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f658:	4b1b      	ldr	r3, [pc, #108]	; (800f6c8 <prvAddNewTaskToReadyList+0xd4>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d903      	bls.n	800f668 <prvAddNewTaskToReadyList+0x74>
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f664:	4a18      	ldr	r2, [pc, #96]	; (800f6c8 <prvAddNewTaskToReadyList+0xd4>)
 800f666:	6013      	str	r3, [r2, #0]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f66c:	4613      	mov	r3, r2
 800f66e:	009b      	lsls	r3, r3, #2
 800f670:	4413      	add	r3, r2
 800f672:	009b      	lsls	r3, r3, #2
 800f674:	4a15      	ldr	r2, [pc, #84]	; (800f6cc <prvAddNewTaskToReadyList+0xd8>)
 800f676:	441a      	add	r2, r3
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	3304      	adds	r3, #4
 800f67c:	4619      	mov	r1, r3
 800f67e:	4610      	mov	r0, r2
 800f680:	f7ff f80b 	bl	800e69a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f684:	f001 fbce 	bl	8010e24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f688:	4b0d      	ldr	r3, [pc, #52]	; (800f6c0 <prvAddNewTaskToReadyList+0xcc>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d00e      	beq.n	800f6ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f690:	4b0a      	ldr	r3, [pc, #40]	; (800f6bc <prvAddNewTaskToReadyList+0xc8>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f69a:	429a      	cmp	r2, r3
 800f69c:	d207      	bcs.n	800f6ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f69e:	4b0c      	ldr	r3, [pc, #48]	; (800f6d0 <prvAddNewTaskToReadyList+0xdc>)
 800f6a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6a4:	601a      	str	r2, [r3, #0]
 800f6a6:	f3bf 8f4f 	dsb	sy
 800f6aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6ae:	bf00      	nop
 800f6b0:	3708      	adds	r7, #8
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
 800f6b6:	bf00      	nop
 800f6b8:	2000130c 	.word	0x2000130c
 800f6bc:	20000e38 	.word	0x20000e38
 800f6c0:	20001318 	.word	0x20001318
 800f6c4:	20001328 	.word	0x20001328
 800f6c8:	20001314 	.word	0x20001314
 800f6cc:	20000e3c 	.word	0x20000e3c
 800f6d0:	e000ed04 	.word	0xe000ed04

0800f6d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b084      	sub	sp, #16
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d017      	beq.n	800f716 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f6e6:	4b13      	ldr	r3, [pc, #76]	; (800f734 <vTaskDelay+0x60>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d00a      	beq.n	800f704 <vTaskDelay+0x30>
	__asm volatile
 800f6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f2:	f383 8811 	msr	BASEPRI, r3
 800f6f6:	f3bf 8f6f 	isb	sy
 800f6fa:	f3bf 8f4f 	dsb	sy
 800f6fe:	60bb      	str	r3, [r7, #8]
}
 800f700:	bf00      	nop
 800f702:	e7fe      	b.n	800f702 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f704:	f000 f88a 	bl	800f81c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f708:	2100      	movs	r1, #0
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f000 fdb4 	bl	8010278 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f710:	f000 f892 	bl	800f838 <xTaskResumeAll>
 800f714:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d107      	bne.n	800f72c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f71c:	4b06      	ldr	r3, [pc, #24]	; (800f738 <vTaskDelay+0x64>)
 800f71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f722:	601a      	str	r2, [r3, #0]
 800f724:	f3bf 8f4f 	dsb	sy
 800f728:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f72c:	bf00      	nop
 800f72e:	3710      	adds	r7, #16
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}
 800f734:	20001334 	.word	0x20001334
 800f738:	e000ed04 	.word	0xe000ed04

0800f73c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b08a      	sub	sp, #40	; 0x28
 800f740:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f742:	2300      	movs	r3, #0
 800f744:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f746:	2300      	movs	r3, #0
 800f748:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f74a:	463a      	mov	r2, r7
 800f74c:	1d39      	adds	r1, r7, #4
 800f74e:	f107 0308 	add.w	r3, r7, #8
 800f752:	4618      	mov	r0, r3
 800f754:	f7fe fd52 	bl	800e1fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f758:	6839      	ldr	r1, [r7, #0]
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	68ba      	ldr	r2, [r7, #8]
 800f75e:	9202      	str	r2, [sp, #8]
 800f760:	9301      	str	r3, [sp, #4]
 800f762:	2300      	movs	r3, #0
 800f764:	9300      	str	r3, [sp, #0]
 800f766:	2300      	movs	r3, #0
 800f768:	460a      	mov	r2, r1
 800f76a:	4924      	ldr	r1, [pc, #144]	; (800f7fc <vTaskStartScheduler+0xc0>)
 800f76c:	4824      	ldr	r0, [pc, #144]	; (800f800 <vTaskStartScheduler+0xc4>)
 800f76e:	f7ff fdf9 	bl	800f364 <xTaskCreateStatic>
 800f772:	4603      	mov	r3, r0
 800f774:	4a23      	ldr	r2, [pc, #140]	; (800f804 <vTaskStartScheduler+0xc8>)
 800f776:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f778:	4b22      	ldr	r3, [pc, #136]	; (800f804 <vTaskStartScheduler+0xc8>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d002      	beq.n	800f786 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f780:	2301      	movs	r3, #1
 800f782:	617b      	str	r3, [r7, #20]
 800f784:	e001      	b.n	800f78a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f786:	2300      	movs	r3, #0
 800f788:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f78a:	697b      	ldr	r3, [r7, #20]
 800f78c:	2b01      	cmp	r3, #1
 800f78e:	d102      	bne.n	800f796 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f790:	f000 fdc6 	bl	8010320 <xTimerCreateTimerTask>
 800f794:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	2b01      	cmp	r3, #1
 800f79a:	d11b      	bne.n	800f7d4 <vTaskStartScheduler+0x98>
	__asm volatile
 800f79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a0:	f383 8811 	msr	BASEPRI, r3
 800f7a4:	f3bf 8f6f 	isb	sy
 800f7a8:	f3bf 8f4f 	dsb	sy
 800f7ac:	613b      	str	r3, [r7, #16]
}
 800f7ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f7b0:	4b15      	ldr	r3, [pc, #84]	; (800f808 <vTaskStartScheduler+0xcc>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	3354      	adds	r3, #84	; 0x54
 800f7b6:	4a15      	ldr	r2, [pc, #84]	; (800f80c <vTaskStartScheduler+0xd0>)
 800f7b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f7ba:	4b15      	ldr	r3, [pc, #84]	; (800f810 <vTaskStartScheduler+0xd4>)
 800f7bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f7c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f7c2:	4b14      	ldr	r3, [pc, #80]	; (800f814 <vTaskStartScheduler+0xd8>)
 800f7c4:	2201      	movs	r2, #1
 800f7c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f7c8:	4b13      	ldr	r3, [pc, #76]	; (800f818 <vTaskStartScheduler+0xdc>)
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f7ce:	f001 fa57 	bl	8010c80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f7d2:	e00e      	b.n	800f7f2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7da:	d10a      	bne.n	800f7f2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800f7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7e0:	f383 8811 	msr	BASEPRI, r3
 800f7e4:	f3bf 8f6f 	isb	sy
 800f7e8:	f3bf 8f4f 	dsb	sy
 800f7ec:	60fb      	str	r3, [r7, #12]
}
 800f7ee:	bf00      	nop
 800f7f0:	e7fe      	b.n	800f7f0 <vTaskStartScheduler+0xb4>
}
 800f7f2:	bf00      	nop
 800f7f4:	3718      	adds	r7, #24
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	08014fe8 	.word	0x08014fe8
 800f800:	0800ff7d 	.word	0x0800ff7d
 800f804:	20001330 	.word	0x20001330
 800f808:	20000e38 	.word	0x20000e38
 800f80c:	20000124 	.word	0x20000124
 800f810:	2000132c 	.word	0x2000132c
 800f814:	20001318 	.word	0x20001318
 800f818:	20001310 	.word	0x20001310

0800f81c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f81c:	b480      	push	{r7}
 800f81e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f820:	4b04      	ldr	r3, [pc, #16]	; (800f834 <vTaskSuspendAll+0x18>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	3301      	adds	r3, #1
 800f826:	4a03      	ldr	r2, [pc, #12]	; (800f834 <vTaskSuspendAll+0x18>)
 800f828:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f82a:	bf00      	nop
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr
 800f834:	20001334 	.word	0x20001334

0800f838 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f83e:	2300      	movs	r3, #0
 800f840:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f842:	2300      	movs	r3, #0
 800f844:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f846:	4b42      	ldr	r3, [pc, #264]	; (800f950 <xTaskResumeAll+0x118>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d10a      	bne.n	800f864 <xTaskResumeAll+0x2c>
	__asm volatile
 800f84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f852:	f383 8811 	msr	BASEPRI, r3
 800f856:	f3bf 8f6f 	isb	sy
 800f85a:	f3bf 8f4f 	dsb	sy
 800f85e:	603b      	str	r3, [r7, #0]
}
 800f860:	bf00      	nop
 800f862:	e7fe      	b.n	800f862 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f864:	f001 faae 	bl	8010dc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f868:	4b39      	ldr	r3, [pc, #228]	; (800f950 <xTaskResumeAll+0x118>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	3b01      	subs	r3, #1
 800f86e:	4a38      	ldr	r2, [pc, #224]	; (800f950 <xTaskResumeAll+0x118>)
 800f870:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f872:	4b37      	ldr	r3, [pc, #220]	; (800f950 <xTaskResumeAll+0x118>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d162      	bne.n	800f940 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f87a:	4b36      	ldr	r3, [pc, #216]	; (800f954 <xTaskResumeAll+0x11c>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d05e      	beq.n	800f940 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f882:	e02f      	b.n	800f8e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f884:	4b34      	ldr	r3, [pc, #208]	; (800f958 <xTaskResumeAll+0x120>)
 800f886:	68db      	ldr	r3, [r3, #12]
 800f888:	68db      	ldr	r3, [r3, #12]
 800f88a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	3318      	adds	r3, #24
 800f890:	4618      	mov	r0, r3
 800f892:	f7fe ff5f 	bl	800e754 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	3304      	adds	r3, #4
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7fe ff5a 	bl	800e754 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8a4:	4b2d      	ldr	r3, [pc, #180]	; (800f95c <xTaskResumeAll+0x124>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	d903      	bls.n	800f8b4 <xTaskResumeAll+0x7c>
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8b0:	4a2a      	ldr	r2, [pc, #168]	; (800f95c <xTaskResumeAll+0x124>)
 800f8b2:	6013      	str	r3, [r2, #0]
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8b8:	4613      	mov	r3, r2
 800f8ba:	009b      	lsls	r3, r3, #2
 800f8bc:	4413      	add	r3, r2
 800f8be:	009b      	lsls	r3, r3, #2
 800f8c0:	4a27      	ldr	r2, [pc, #156]	; (800f960 <xTaskResumeAll+0x128>)
 800f8c2:	441a      	add	r2, r3
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	3304      	adds	r3, #4
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	4610      	mov	r0, r2
 800f8cc:	f7fe fee5 	bl	800e69a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8d4:	4b23      	ldr	r3, [pc, #140]	; (800f964 <xTaskResumeAll+0x12c>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	d302      	bcc.n	800f8e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f8de:	4b22      	ldr	r3, [pc, #136]	; (800f968 <xTaskResumeAll+0x130>)
 800f8e0:	2201      	movs	r2, #1
 800f8e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f8e4:	4b1c      	ldr	r3, [pc, #112]	; (800f958 <xTaskResumeAll+0x120>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d1cb      	bne.n	800f884 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d001      	beq.n	800f8f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f8f2:	f000 fbfd 	bl	80100f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f8f6:	4b1d      	ldr	r3, [pc, #116]	; (800f96c <xTaskResumeAll+0x134>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d010      	beq.n	800f924 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f902:	f000 f847 	bl	800f994 <xTaskIncrementTick>
 800f906:	4603      	mov	r3, r0
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d002      	beq.n	800f912 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f90c:	4b16      	ldr	r3, [pc, #88]	; (800f968 <xTaskResumeAll+0x130>)
 800f90e:	2201      	movs	r2, #1
 800f910:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	3b01      	subs	r3, #1
 800f916:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d1f1      	bne.n	800f902 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f91e:	4b13      	ldr	r3, [pc, #76]	; (800f96c <xTaskResumeAll+0x134>)
 800f920:	2200      	movs	r2, #0
 800f922:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f924:	4b10      	ldr	r3, [pc, #64]	; (800f968 <xTaskResumeAll+0x130>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d009      	beq.n	800f940 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f92c:	2301      	movs	r3, #1
 800f92e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f930:	4b0f      	ldr	r3, [pc, #60]	; (800f970 <xTaskResumeAll+0x138>)
 800f932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f936:	601a      	str	r2, [r3, #0]
 800f938:	f3bf 8f4f 	dsb	sy
 800f93c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f940:	f001 fa70 	bl	8010e24 <vPortExitCritical>

	return xAlreadyYielded;
 800f944:	68bb      	ldr	r3, [r7, #8]
}
 800f946:	4618      	mov	r0, r3
 800f948:	3710      	adds	r7, #16
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}
 800f94e:	bf00      	nop
 800f950:	20001334 	.word	0x20001334
 800f954:	2000130c 	.word	0x2000130c
 800f958:	200012cc 	.word	0x200012cc
 800f95c:	20001314 	.word	0x20001314
 800f960:	20000e3c 	.word	0x20000e3c
 800f964:	20000e38 	.word	0x20000e38
 800f968:	20001320 	.word	0x20001320
 800f96c:	2000131c 	.word	0x2000131c
 800f970:	e000ed04 	.word	0xe000ed04

0800f974 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f974:	b480      	push	{r7}
 800f976:	b083      	sub	sp, #12
 800f978:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f97a:	4b05      	ldr	r3, [pc, #20]	; (800f990 <xTaskGetTickCount+0x1c>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f980:	687b      	ldr	r3, [r7, #4]
}
 800f982:	4618      	mov	r0, r3
 800f984:	370c      	adds	r7, #12
 800f986:	46bd      	mov	sp, r7
 800f988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98c:	4770      	bx	lr
 800f98e:	bf00      	nop
 800f990:	20001310 	.word	0x20001310

0800f994 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b086      	sub	sp, #24
 800f998:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f99a:	2300      	movs	r3, #0
 800f99c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f99e:	4b4f      	ldr	r3, [pc, #316]	; (800fadc <xTaskIncrementTick+0x148>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	f040 808f 	bne.w	800fac6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f9a8:	4b4d      	ldr	r3, [pc, #308]	; (800fae0 <xTaskIncrementTick+0x14c>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	3301      	adds	r3, #1
 800f9ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f9b0:	4a4b      	ldr	r2, [pc, #300]	; (800fae0 <xTaskIncrementTick+0x14c>)
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d120      	bne.n	800f9fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f9bc:	4b49      	ldr	r3, [pc, #292]	; (800fae4 <xTaskIncrementTick+0x150>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d00a      	beq.n	800f9dc <xTaskIncrementTick+0x48>
	__asm volatile
 800f9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ca:	f383 8811 	msr	BASEPRI, r3
 800f9ce:	f3bf 8f6f 	isb	sy
 800f9d2:	f3bf 8f4f 	dsb	sy
 800f9d6:	603b      	str	r3, [r7, #0]
}
 800f9d8:	bf00      	nop
 800f9da:	e7fe      	b.n	800f9da <xTaskIncrementTick+0x46>
 800f9dc:	4b41      	ldr	r3, [pc, #260]	; (800fae4 <xTaskIncrementTick+0x150>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	60fb      	str	r3, [r7, #12]
 800f9e2:	4b41      	ldr	r3, [pc, #260]	; (800fae8 <xTaskIncrementTick+0x154>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	4a3f      	ldr	r2, [pc, #252]	; (800fae4 <xTaskIncrementTick+0x150>)
 800f9e8:	6013      	str	r3, [r2, #0]
 800f9ea:	4a3f      	ldr	r2, [pc, #252]	; (800fae8 <xTaskIncrementTick+0x154>)
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	6013      	str	r3, [r2, #0]
 800f9f0:	4b3e      	ldr	r3, [pc, #248]	; (800faec <xTaskIncrementTick+0x158>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	3301      	adds	r3, #1
 800f9f6:	4a3d      	ldr	r2, [pc, #244]	; (800faec <xTaskIncrementTick+0x158>)
 800f9f8:	6013      	str	r3, [r2, #0]
 800f9fa:	f000 fb79 	bl	80100f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f9fe:	4b3c      	ldr	r3, [pc, #240]	; (800faf0 <xTaskIncrementTick+0x15c>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	693a      	ldr	r2, [r7, #16]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d349      	bcc.n	800fa9c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa08:	4b36      	ldr	r3, [pc, #216]	; (800fae4 <xTaskIncrementTick+0x150>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d104      	bne.n	800fa1c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa12:	4b37      	ldr	r3, [pc, #220]	; (800faf0 <xTaskIncrementTick+0x15c>)
 800fa14:	f04f 32ff 	mov.w	r2, #4294967295
 800fa18:	601a      	str	r2, [r3, #0]
					break;
 800fa1a:	e03f      	b.n	800fa9c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa1c:	4b31      	ldr	r3, [pc, #196]	; (800fae4 <xTaskIncrementTick+0x150>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	68db      	ldr	r3, [r3, #12]
 800fa22:	68db      	ldr	r3, [r3, #12]
 800fa24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	685b      	ldr	r3, [r3, #4]
 800fa2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fa2c:	693a      	ldr	r2, [r7, #16]
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d203      	bcs.n	800fa3c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fa34:	4a2e      	ldr	r2, [pc, #184]	; (800faf0 <xTaskIncrementTick+0x15c>)
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fa3a:	e02f      	b.n	800fa9c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	3304      	adds	r3, #4
 800fa40:	4618      	mov	r0, r3
 800fa42:	f7fe fe87 	bl	800e754 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d004      	beq.n	800fa58 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	3318      	adds	r3, #24
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7fe fe7e 	bl	800e754 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa5c:	4b25      	ldr	r3, [pc, #148]	; (800faf4 <xTaskIncrementTick+0x160>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d903      	bls.n	800fa6c <xTaskIncrementTick+0xd8>
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa68:	4a22      	ldr	r2, [pc, #136]	; (800faf4 <xTaskIncrementTick+0x160>)
 800fa6a:	6013      	str	r3, [r2, #0]
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa70:	4613      	mov	r3, r2
 800fa72:	009b      	lsls	r3, r3, #2
 800fa74:	4413      	add	r3, r2
 800fa76:	009b      	lsls	r3, r3, #2
 800fa78:	4a1f      	ldr	r2, [pc, #124]	; (800faf8 <xTaskIncrementTick+0x164>)
 800fa7a:	441a      	add	r2, r3
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	3304      	adds	r3, #4
 800fa80:	4619      	mov	r1, r3
 800fa82:	4610      	mov	r0, r2
 800fa84:	f7fe fe09 	bl	800e69a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fa88:	68bb      	ldr	r3, [r7, #8]
 800fa8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa8c:	4b1b      	ldr	r3, [pc, #108]	; (800fafc <xTaskIncrementTick+0x168>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d3b8      	bcc.n	800fa08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fa96:	2301      	movs	r3, #1
 800fa98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa9a:	e7b5      	b.n	800fa08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fa9c:	4b17      	ldr	r3, [pc, #92]	; (800fafc <xTaskIncrementTick+0x168>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faa2:	4915      	ldr	r1, [pc, #84]	; (800faf8 <xTaskIncrementTick+0x164>)
 800faa4:	4613      	mov	r3, r2
 800faa6:	009b      	lsls	r3, r3, #2
 800faa8:	4413      	add	r3, r2
 800faaa:	009b      	lsls	r3, r3, #2
 800faac:	440b      	add	r3, r1
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d901      	bls.n	800fab8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fab4:	2301      	movs	r3, #1
 800fab6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fab8:	4b11      	ldr	r3, [pc, #68]	; (800fb00 <xTaskIncrementTick+0x16c>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d007      	beq.n	800fad0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800fac0:	2301      	movs	r3, #1
 800fac2:	617b      	str	r3, [r7, #20]
 800fac4:	e004      	b.n	800fad0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fac6:	4b0f      	ldr	r3, [pc, #60]	; (800fb04 <xTaskIncrementTick+0x170>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	3301      	adds	r3, #1
 800facc:	4a0d      	ldr	r2, [pc, #52]	; (800fb04 <xTaskIncrementTick+0x170>)
 800face:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fad0:	697b      	ldr	r3, [r7, #20]
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3718      	adds	r7, #24
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
 800fada:	bf00      	nop
 800fadc:	20001334 	.word	0x20001334
 800fae0:	20001310 	.word	0x20001310
 800fae4:	200012c4 	.word	0x200012c4
 800fae8:	200012c8 	.word	0x200012c8
 800faec:	20001324 	.word	0x20001324
 800faf0:	2000132c 	.word	0x2000132c
 800faf4:	20001314 	.word	0x20001314
 800faf8:	20000e3c 	.word	0x20000e3c
 800fafc:	20000e38 	.word	0x20000e38
 800fb00:	20001320 	.word	0x20001320
 800fb04:	2000131c 	.word	0x2000131c

0800fb08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b085      	sub	sp, #20
 800fb0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fb0e:	4b2a      	ldr	r3, [pc, #168]	; (800fbb8 <vTaskSwitchContext+0xb0>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d003      	beq.n	800fb1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fb16:	4b29      	ldr	r3, [pc, #164]	; (800fbbc <vTaskSwitchContext+0xb4>)
 800fb18:	2201      	movs	r2, #1
 800fb1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fb1c:	e046      	b.n	800fbac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800fb1e:	4b27      	ldr	r3, [pc, #156]	; (800fbbc <vTaskSwitchContext+0xb4>)
 800fb20:	2200      	movs	r2, #0
 800fb22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb24:	4b26      	ldr	r3, [pc, #152]	; (800fbc0 <vTaskSwitchContext+0xb8>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	60fb      	str	r3, [r7, #12]
 800fb2a:	e010      	b.n	800fb4e <vTaskSwitchContext+0x46>
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d10a      	bne.n	800fb48 <vTaskSwitchContext+0x40>
	__asm volatile
 800fb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb36:	f383 8811 	msr	BASEPRI, r3
 800fb3a:	f3bf 8f6f 	isb	sy
 800fb3e:	f3bf 8f4f 	dsb	sy
 800fb42:	607b      	str	r3, [r7, #4]
}
 800fb44:	bf00      	nop
 800fb46:	e7fe      	b.n	800fb46 <vTaskSwitchContext+0x3e>
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	3b01      	subs	r3, #1
 800fb4c:	60fb      	str	r3, [r7, #12]
 800fb4e:	491d      	ldr	r1, [pc, #116]	; (800fbc4 <vTaskSwitchContext+0xbc>)
 800fb50:	68fa      	ldr	r2, [r7, #12]
 800fb52:	4613      	mov	r3, r2
 800fb54:	009b      	lsls	r3, r3, #2
 800fb56:	4413      	add	r3, r2
 800fb58:	009b      	lsls	r3, r3, #2
 800fb5a:	440b      	add	r3, r1
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d0e4      	beq.n	800fb2c <vTaskSwitchContext+0x24>
 800fb62:	68fa      	ldr	r2, [r7, #12]
 800fb64:	4613      	mov	r3, r2
 800fb66:	009b      	lsls	r3, r3, #2
 800fb68:	4413      	add	r3, r2
 800fb6a:	009b      	lsls	r3, r3, #2
 800fb6c:	4a15      	ldr	r2, [pc, #84]	; (800fbc4 <vTaskSwitchContext+0xbc>)
 800fb6e:	4413      	add	r3, r2
 800fb70:	60bb      	str	r3, [r7, #8]
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	685b      	ldr	r3, [r3, #4]
 800fb76:	685a      	ldr	r2, [r3, #4]
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	605a      	str	r2, [r3, #4]
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	685a      	ldr	r2, [r3, #4]
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	3308      	adds	r3, #8
 800fb84:	429a      	cmp	r2, r3
 800fb86:	d104      	bne.n	800fb92 <vTaskSwitchContext+0x8a>
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	685b      	ldr	r3, [r3, #4]
 800fb8c:	685a      	ldr	r2, [r3, #4]
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	605a      	str	r2, [r3, #4]
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	685b      	ldr	r3, [r3, #4]
 800fb96:	68db      	ldr	r3, [r3, #12]
 800fb98:	4a0b      	ldr	r2, [pc, #44]	; (800fbc8 <vTaskSwitchContext+0xc0>)
 800fb9a:	6013      	str	r3, [r2, #0]
 800fb9c:	4a08      	ldr	r2, [pc, #32]	; (800fbc0 <vTaskSwitchContext+0xb8>)
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fba2:	4b09      	ldr	r3, [pc, #36]	; (800fbc8 <vTaskSwitchContext+0xc0>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	3354      	adds	r3, #84	; 0x54
 800fba8:	4a08      	ldr	r2, [pc, #32]	; (800fbcc <vTaskSwitchContext+0xc4>)
 800fbaa:	6013      	str	r3, [r2, #0]
}
 800fbac:	bf00      	nop
 800fbae:	3714      	adds	r7, #20
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb6:	4770      	bx	lr
 800fbb8:	20001334 	.word	0x20001334
 800fbbc:	20001320 	.word	0x20001320
 800fbc0:	20001314 	.word	0x20001314
 800fbc4:	20000e3c 	.word	0x20000e3c
 800fbc8:	20000e38 	.word	0x20000e38
 800fbcc:	20000124 	.word	0x20000124

0800fbd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b084      	sub	sp, #16
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d10a      	bne.n	800fbf6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe4:	f383 8811 	msr	BASEPRI, r3
 800fbe8:	f3bf 8f6f 	isb	sy
 800fbec:	f3bf 8f4f 	dsb	sy
 800fbf0:	60fb      	str	r3, [r7, #12]
}
 800fbf2:	bf00      	nop
 800fbf4:	e7fe      	b.n	800fbf4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fbf6:	4b07      	ldr	r3, [pc, #28]	; (800fc14 <vTaskPlaceOnEventList+0x44>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	3318      	adds	r3, #24
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f7fe fd6f 	bl	800e6e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fc04:	2101      	movs	r1, #1
 800fc06:	6838      	ldr	r0, [r7, #0]
 800fc08:	f000 fb36 	bl	8010278 <prvAddCurrentTaskToDelayedList>
}
 800fc0c:	bf00      	nop
 800fc0e:	3710      	adds	r7, #16
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}
 800fc14:	20000e38 	.word	0x20000e38

0800fc18 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b086      	sub	sp, #24
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	60f8      	str	r0, [r7, #12]
 800fc20:	60b9      	str	r1, [r7, #8]
 800fc22:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d10a      	bne.n	800fc40 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800fc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc2e:	f383 8811 	msr	BASEPRI, r3
 800fc32:	f3bf 8f6f 	isb	sy
 800fc36:	f3bf 8f4f 	dsb	sy
 800fc3a:	617b      	str	r3, [r7, #20]
}
 800fc3c:	bf00      	nop
 800fc3e:	e7fe      	b.n	800fc3e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800fc40:	4b11      	ldr	r3, [pc, #68]	; (800fc88 <vTaskPlaceOnUnorderedEventList+0x70>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d10a      	bne.n	800fc5e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800fc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc4c:	f383 8811 	msr	BASEPRI, r3
 800fc50:	f3bf 8f6f 	isb	sy
 800fc54:	f3bf 8f4f 	dsb	sy
 800fc58:	613b      	str	r3, [r7, #16]
}
 800fc5a:	bf00      	nop
 800fc5c:	e7fe      	b.n	800fc5c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800fc5e:	4b0b      	ldr	r3, [pc, #44]	; (800fc8c <vTaskPlaceOnUnorderedEventList+0x74>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	68ba      	ldr	r2, [r7, #8]
 800fc64:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800fc68:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fc6a:	4b08      	ldr	r3, [pc, #32]	; (800fc8c <vTaskPlaceOnUnorderedEventList+0x74>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	3318      	adds	r3, #24
 800fc70:	4619      	mov	r1, r3
 800fc72:	68f8      	ldr	r0, [r7, #12]
 800fc74:	f7fe fd11 	bl	800e69a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fc78:	2101      	movs	r1, #1
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f000 fafc 	bl	8010278 <prvAddCurrentTaskToDelayedList>
}
 800fc80:	bf00      	nop
 800fc82:	3718      	adds	r7, #24
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}
 800fc88:	20001334 	.word	0x20001334
 800fc8c:	20000e38 	.word	0x20000e38

0800fc90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b086      	sub	sp, #24
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	60f8      	str	r0, [r7, #12]
 800fc98:	60b9      	str	r1, [r7, #8]
 800fc9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d10a      	bne.n	800fcb8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800fca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fca6:	f383 8811 	msr	BASEPRI, r3
 800fcaa:	f3bf 8f6f 	isb	sy
 800fcae:	f3bf 8f4f 	dsb	sy
 800fcb2:	617b      	str	r3, [r7, #20]
}
 800fcb4:	bf00      	nop
 800fcb6:	e7fe      	b.n	800fcb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fcb8:	4b0a      	ldr	r3, [pc, #40]	; (800fce4 <vTaskPlaceOnEventListRestricted+0x54>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	3318      	adds	r3, #24
 800fcbe:	4619      	mov	r1, r3
 800fcc0:	68f8      	ldr	r0, [r7, #12]
 800fcc2:	f7fe fcea 	bl	800e69a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d002      	beq.n	800fcd2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800fccc:	f04f 33ff 	mov.w	r3, #4294967295
 800fcd0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fcd2:	6879      	ldr	r1, [r7, #4]
 800fcd4:	68b8      	ldr	r0, [r7, #8]
 800fcd6:	f000 facf 	bl	8010278 <prvAddCurrentTaskToDelayedList>
	}
 800fcda:	bf00      	nop
 800fcdc:	3718      	adds	r7, #24
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}
 800fce2:	bf00      	nop
 800fce4:	20000e38 	.word	0x20000e38

0800fce8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b086      	sub	sp, #24
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	68db      	ldr	r3, [r3, #12]
 800fcf4:	68db      	ldr	r3, [r3, #12]
 800fcf6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d10a      	bne.n	800fd14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd02:	f383 8811 	msr	BASEPRI, r3
 800fd06:	f3bf 8f6f 	isb	sy
 800fd0a:	f3bf 8f4f 	dsb	sy
 800fd0e:	60fb      	str	r3, [r7, #12]
}
 800fd10:	bf00      	nop
 800fd12:	e7fe      	b.n	800fd12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	3318      	adds	r3, #24
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f7fe fd1b 	bl	800e754 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd1e:	4b1e      	ldr	r3, [pc, #120]	; (800fd98 <xTaskRemoveFromEventList+0xb0>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d11d      	bne.n	800fd62 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fd26:	693b      	ldr	r3, [r7, #16]
 800fd28:	3304      	adds	r3, #4
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7fe fd12 	bl	800e754 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd34:	4b19      	ldr	r3, [pc, #100]	; (800fd9c <xTaskRemoveFromEventList+0xb4>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d903      	bls.n	800fd44 <xTaskRemoveFromEventList+0x5c>
 800fd3c:	693b      	ldr	r3, [r7, #16]
 800fd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd40:	4a16      	ldr	r2, [pc, #88]	; (800fd9c <xTaskRemoveFromEventList+0xb4>)
 800fd42:	6013      	str	r3, [r2, #0]
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd48:	4613      	mov	r3, r2
 800fd4a:	009b      	lsls	r3, r3, #2
 800fd4c:	4413      	add	r3, r2
 800fd4e:	009b      	lsls	r3, r3, #2
 800fd50:	4a13      	ldr	r2, [pc, #76]	; (800fda0 <xTaskRemoveFromEventList+0xb8>)
 800fd52:	441a      	add	r2, r3
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	3304      	adds	r3, #4
 800fd58:	4619      	mov	r1, r3
 800fd5a:	4610      	mov	r0, r2
 800fd5c:	f7fe fc9d 	bl	800e69a <vListInsertEnd>
 800fd60:	e005      	b.n	800fd6e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fd62:	693b      	ldr	r3, [r7, #16]
 800fd64:	3318      	adds	r3, #24
 800fd66:	4619      	mov	r1, r3
 800fd68:	480e      	ldr	r0, [pc, #56]	; (800fda4 <xTaskRemoveFromEventList+0xbc>)
 800fd6a:	f7fe fc96 	bl	800e69a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fd6e:	693b      	ldr	r3, [r7, #16]
 800fd70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd72:	4b0d      	ldr	r3, [pc, #52]	; (800fda8 <xTaskRemoveFromEventList+0xc0>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	d905      	bls.n	800fd88 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fd80:	4b0a      	ldr	r3, [pc, #40]	; (800fdac <xTaskRemoveFromEventList+0xc4>)
 800fd82:	2201      	movs	r2, #1
 800fd84:	601a      	str	r2, [r3, #0]
 800fd86:	e001      	b.n	800fd8c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800fd88:	2300      	movs	r3, #0
 800fd8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fd8c:	697b      	ldr	r3, [r7, #20]
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3718      	adds	r7, #24
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}
 800fd96:	bf00      	nop
 800fd98:	20001334 	.word	0x20001334
 800fd9c:	20001314 	.word	0x20001314
 800fda0:	20000e3c 	.word	0x20000e3c
 800fda4:	200012cc 	.word	0x200012cc
 800fda8:	20000e38 	.word	0x20000e38
 800fdac:	20001320 	.word	0x20001320

0800fdb0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b086      	sub	sp, #24
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800fdba:	4b29      	ldr	r3, [pc, #164]	; (800fe60 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d10a      	bne.n	800fdd8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800fdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc6:	f383 8811 	msr	BASEPRI, r3
 800fdca:	f3bf 8f6f 	isb	sy
 800fdce:	f3bf 8f4f 	dsb	sy
 800fdd2:	613b      	str	r3, [r7, #16]
}
 800fdd4:	bf00      	nop
 800fdd6:	e7fe      	b.n	800fdd6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	68db      	ldr	r3, [r3, #12]
 800fde6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d10a      	bne.n	800fe04 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800fdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf2:	f383 8811 	msr	BASEPRI, r3
 800fdf6:	f3bf 8f6f 	isb	sy
 800fdfa:	f3bf 8f4f 	dsb	sy
 800fdfe:	60fb      	str	r3, [r7, #12]
}
 800fe00:	bf00      	nop
 800fe02:	e7fe      	b.n	800fe02 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f7fe fca5 	bl	800e754 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	3304      	adds	r3, #4
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7fe fca0 	bl	800e754 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800fe14:	697b      	ldr	r3, [r7, #20]
 800fe16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe18:	4b12      	ldr	r3, [pc, #72]	; (800fe64 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	429a      	cmp	r2, r3
 800fe1e:	d903      	bls.n	800fe28 <vTaskRemoveFromUnorderedEventList+0x78>
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe24:	4a0f      	ldr	r2, [pc, #60]	; (800fe64 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800fe26:	6013      	str	r3, [r2, #0]
 800fe28:	697b      	ldr	r3, [r7, #20]
 800fe2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe2c:	4613      	mov	r3, r2
 800fe2e:	009b      	lsls	r3, r3, #2
 800fe30:	4413      	add	r3, r2
 800fe32:	009b      	lsls	r3, r3, #2
 800fe34:	4a0c      	ldr	r2, [pc, #48]	; (800fe68 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800fe36:	441a      	add	r2, r3
 800fe38:	697b      	ldr	r3, [r7, #20]
 800fe3a:	3304      	adds	r3, #4
 800fe3c:	4619      	mov	r1, r3
 800fe3e:	4610      	mov	r0, r2
 800fe40:	f7fe fc2b 	bl	800e69a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe48:	4b08      	ldr	r3, [pc, #32]	; (800fe6c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d902      	bls.n	800fe58 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800fe52:	4b07      	ldr	r3, [pc, #28]	; (800fe70 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800fe54:	2201      	movs	r2, #1
 800fe56:	601a      	str	r2, [r3, #0]
	}
}
 800fe58:	bf00      	nop
 800fe5a:	3718      	adds	r7, #24
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}
 800fe60:	20001334 	.word	0x20001334
 800fe64:	20001314 	.word	0x20001314
 800fe68:	20000e3c 	.word	0x20000e3c
 800fe6c:	20000e38 	.word	0x20000e38
 800fe70:	20001320 	.word	0x20001320

0800fe74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fe74:	b480      	push	{r7}
 800fe76:	b083      	sub	sp, #12
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fe7c:	4b06      	ldr	r3, [pc, #24]	; (800fe98 <vTaskInternalSetTimeOutState+0x24>)
 800fe7e:	681a      	ldr	r2, [r3, #0]
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fe84:	4b05      	ldr	r3, [pc, #20]	; (800fe9c <vTaskInternalSetTimeOutState+0x28>)
 800fe86:	681a      	ldr	r2, [r3, #0]
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	605a      	str	r2, [r3, #4]
}
 800fe8c:	bf00      	nop
 800fe8e:	370c      	adds	r7, #12
 800fe90:	46bd      	mov	sp, r7
 800fe92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe96:	4770      	bx	lr
 800fe98:	20001324 	.word	0x20001324
 800fe9c:	20001310 	.word	0x20001310

0800fea0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b088      	sub	sp, #32
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d10a      	bne.n	800fec6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800feb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb4:	f383 8811 	msr	BASEPRI, r3
 800feb8:	f3bf 8f6f 	isb	sy
 800febc:	f3bf 8f4f 	dsb	sy
 800fec0:	613b      	str	r3, [r7, #16]
}
 800fec2:	bf00      	nop
 800fec4:	e7fe      	b.n	800fec4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d10a      	bne.n	800fee2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fed0:	f383 8811 	msr	BASEPRI, r3
 800fed4:	f3bf 8f6f 	isb	sy
 800fed8:	f3bf 8f4f 	dsb	sy
 800fedc:	60fb      	str	r3, [r7, #12]
}
 800fede:	bf00      	nop
 800fee0:	e7fe      	b.n	800fee0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fee2:	f000 ff6f 	bl	8010dc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fee6:	4b1d      	ldr	r3, [pc, #116]	; (800ff5c <xTaskCheckForTimeOut+0xbc>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	685b      	ldr	r3, [r3, #4]
 800fef0:	69ba      	ldr	r2, [r7, #24]
 800fef2:	1ad3      	subs	r3, r2, r3
 800fef4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fefe:	d102      	bne.n	800ff06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ff00:	2300      	movs	r3, #0
 800ff02:	61fb      	str	r3, [r7, #28]
 800ff04:	e023      	b.n	800ff4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681a      	ldr	r2, [r3, #0]
 800ff0a:	4b15      	ldr	r3, [pc, #84]	; (800ff60 <xTaskCheckForTimeOut+0xc0>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d007      	beq.n	800ff22 <xTaskCheckForTimeOut+0x82>
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	685b      	ldr	r3, [r3, #4]
 800ff16:	69ba      	ldr	r2, [r7, #24]
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	d302      	bcc.n	800ff22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	61fb      	str	r3, [r7, #28]
 800ff20:	e015      	b.n	800ff4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	697a      	ldr	r2, [r7, #20]
 800ff28:	429a      	cmp	r2, r3
 800ff2a:	d20b      	bcs.n	800ff44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	681a      	ldr	r2, [r3, #0]
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	1ad2      	subs	r2, r2, r3
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f7ff ff9b 	bl	800fe74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	61fb      	str	r3, [r7, #28]
 800ff42:	e004      	b.n	800ff4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	2200      	movs	r2, #0
 800ff48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ff4e:	f000 ff69 	bl	8010e24 <vPortExitCritical>

	return xReturn;
 800ff52:	69fb      	ldr	r3, [r7, #28]
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	3720      	adds	r7, #32
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd80      	pop	{r7, pc}
 800ff5c:	20001310 	.word	0x20001310
 800ff60:	20001324 	.word	0x20001324

0800ff64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ff64:	b480      	push	{r7}
 800ff66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ff68:	4b03      	ldr	r3, [pc, #12]	; (800ff78 <vTaskMissedYield+0x14>)
 800ff6a:	2201      	movs	r2, #1
 800ff6c:	601a      	str	r2, [r3, #0]
}
 800ff6e:	bf00      	nop
 800ff70:	46bd      	mov	sp, r7
 800ff72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff76:	4770      	bx	lr
 800ff78:	20001320 	.word	0x20001320

0800ff7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ff84:	f000 f852 	bl	801002c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ff88:	4b06      	ldr	r3, [pc, #24]	; (800ffa4 <prvIdleTask+0x28>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	2b01      	cmp	r3, #1
 800ff8e:	d9f9      	bls.n	800ff84 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ff90:	4b05      	ldr	r3, [pc, #20]	; (800ffa8 <prvIdleTask+0x2c>)
 800ff92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff96:	601a      	str	r2, [r3, #0]
 800ff98:	f3bf 8f4f 	dsb	sy
 800ff9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ffa0:	e7f0      	b.n	800ff84 <prvIdleTask+0x8>
 800ffa2:	bf00      	nop
 800ffa4:	20000e3c 	.word	0x20000e3c
 800ffa8:	e000ed04 	.word	0xe000ed04

0800ffac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b082      	sub	sp, #8
 800ffb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	607b      	str	r3, [r7, #4]
 800ffb6:	e00c      	b.n	800ffd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ffb8:	687a      	ldr	r2, [r7, #4]
 800ffba:	4613      	mov	r3, r2
 800ffbc:	009b      	lsls	r3, r3, #2
 800ffbe:	4413      	add	r3, r2
 800ffc0:	009b      	lsls	r3, r3, #2
 800ffc2:	4a12      	ldr	r2, [pc, #72]	; (801000c <prvInitialiseTaskLists+0x60>)
 800ffc4:	4413      	add	r3, r2
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7fe fb3a 	bl	800e640 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	3301      	adds	r3, #1
 800ffd0:	607b      	str	r3, [r7, #4]
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2b37      	cmp	r3, #55	; 0x37
 800ffd6:	d9ef      	bls.n	800ffb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ffd8:	480d      	ldr	r0, [pc, #52]	; (8010010 <prvInitialiseTaskLists+0x64>)
 800ffda:	f7fe fb31 	bl	800e640 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ffde:	480d      	ldr	r0, [pc, #52]	; (8010014 <prvInitialiseTaskLists+0x68>)
 800ffe0:	f7fe fb2e 	bl	800e640 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ffe4:	480c      	ldr	r0, [pc, #48]	; (8010018 <prvInitialiseTaskLists+0x6c>)
 800ffe6:	f7fe fb2b 	bl	800e640 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ffea:	480c      	ldr	r0, [pc, #48]	; (801001c <prvInitialiseTaskLists+0x70>)
 800ffec:	f7fe fb28 	bl	800e640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fff0:	480b      	ldr	r0, [pc, #44]	; (8010020 <prvInitialiseTaskLists+0x74>)
 800fff2:	f7fe fb25 	bl	800e640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fff6:	4b0b      	ldr	r3, [pc, #44]	; (8010024 <prvInitialiseTaskLists+0x78>)
 800fff8:	4a05      	ldr	r2, [pc, #20]	; (8010010 <prvInitialiseTaskLists+0x64>)
 800fffa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fffc:	4b0a      	ldr	r3, [pc, #40]	; (8010028 <prvInitialiseTaskLists+0x7c>)
 800fffe:	4a05      	ldr	r2, [pc, #20]	; (8010014 <prvInitialiseTaskLists+0x68>)
 8010000:	601a      	str	r2, [r3, #0]
}
 8010002:	bf00      	nop
 8010004:	3708      	adds	r7, #8
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}
 801000a:	bf00      	nop
 801000c:	20000e3c 	.word	0x20000e3c
 8010010:	2000129c 	.word	0x2000129c
 8010014:	200012b0 	.word	0x200012b0
 8010018:	200012cc 	.word	0x200012cc
 801001c:	200012e0 	.word	0x200012e0
 8010020:	200012f8 	.word	0x200012f8
 8010024:	200012c4 	.word	0x200012c4
 8010028:	200012c8 	.word	0x200012c8

0801002c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b082      	sub	sp, #8
 8010030:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010032:	e019      	b.n	8010068 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010034:	f000 fec6 	bl	8010dc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010038:	4b10      	ldr	r3, [pc, #64]	; (801007c <prvCheckTasksWaitingTermination+0x50>)
 801003a:	68db      	ldr	r3, [r3, #12]
 801003c:	68db      	ldr	r3, [r3, #12]
 801003e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	3304      	adds	r3, #4
 8010044:	4618      	mov	r0, r3
 8010046:	f7fe fb85 	bl	800e754 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801004a:	4b0d      	ldr	r3, [pc, #52]	; (8010080 <prvCheckTasksWaitingTermination+0x54>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	3b01      	subs	r3, #1
 8010050:	4a0b      	ldr	r2, [pc, #44]	; (8010080 <prvCheckTasksWaitingTermination+0x54>)
 8010052:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010054:	4b0b      	ldr	r3, [pc, #44]	; (8010084 <prvCheckTasksWaitingTermination+0x58>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	3b01      	subs	r3, #1
 801005a:	4a0a      	ldr	r2, [pc, #40]	; (8010084 <prvCheckTasksWaitingTermination+0x58>)
 801005c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801005e:	f000 fee1 	bl	8010e24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f000 f810 	bl	8010088 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010068:	4b06      	ldr	r3, [pc, #24]	; (8010084 <prvCheckTasksWaitingTermination+0x58>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d1e1      	bne.n	8010034 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010070:	bf00      	nop
 8010072:	bf00      	nop
 8010074:	3708      	adds	r7, #8
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}
 801007a:	bf00      	nop
 801007c:	200012e0 	.word	0x200012e0
 8010080:	2000130c 	.word	0x2000130c
 8010084:	200012f4 	.word	0x200012f4

08010088 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010088:	b580      	push	{r7, lr}
 801008a:	b084      	sub	sp, #16
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	3354      	adds	r3, #84	; 0x54
 8010094:	4618      	mov	r0, r3
 8010096:	f002 fe85 	bl	8012da4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d108      	bne.n	80100b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100a8:	4618      	mov	r0, r3
 80100aa:	f001 f879 	bl	80111a0 <vPortFree>
				vPortFree( pxTCB );
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f001 f876 	bl	80111a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80100b4:	e018      	b.n	80100e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80100bc:	2b01      	cmp	r3, #1
 80100be:	d103      	bne.n	80100c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f001 f86d 	bl	80111a0 <vPortFree>
	}
 80100c6:	e00f      	b.n	80100e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80100ce:	2b02      	cmp	r3, #2
 80100d0:	d00a      	beq.n	80100e8 <prvDeleteTCB+0x60>
	__asm volatile
 80100d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d6:	f383 8811 	msr	BASEPRI, r3
 80100da:	f3bf 8f6f 	isb	sy
 80100de:	f3bf 8f4f 	dsb	sy
 80100e2:	60fb      	str	r3, [r7, #12]
}
 80100e4:	bf00      	nop
 80100e6:	e7fe      	b.n	80100e6 <prvDeleteTCB+0x5e>
	}
 80100e8:	bf00      	nop
 80100ea:	3710      	adds	r7, #16
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80100f0:	b480      	push	{r7}
 80100f2:	b083      	sub	sp, #12
 80100f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80100f6:	4b0c      	ldr	r3, [pc, #48]	; (8010128 <prvResetNextTaskUnblockTime+0x38>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d104      	bne.n	801010a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010100:	4b0a      	ldr	r3, [pc, #40]	; (801012c <prvResetNextTaskUnblockTime+0x3c>)
 8010102:	f04f 32ff 	mov.w	r2, #4294967295
 8010106:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010108:	e008      	b.n	801011c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801010a:	4b07      	ldr	r3, [pc, #28]	; (8010128 <prvResetNextTaskUnblockTime+0x38>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	68db      	ldr	r3, [r3, #12]
 8010112:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	685b      	ldr	r3, [r3, #4]
 8010118:	4a04      	ldr	r2, [pc, #16]	; (801012c <prvResetNextTaskUnblockTime+0x3c>)
 801011a:	6013      	str	r3, [r2, #0]
}
 801011c:	bf00      	nop
 801011e:	370c      	adds	r7, #12
 8010120:	46bd      	mov	sp, r7
 8010122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010126:	4770      	bx	lr
 8010128:	200012c4 	.word	0x200012c4
 801012c:	2000132c 	.word	0x2000132c

08010130 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010130:	b480      	push	{r7}
 8010132:	b083      	sub	sp, #12
 8010134:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010136:	4b0b      	ldr	r3, [pc, #44]	; (8010164 <xTaskGetSchedulerState+0x34>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d102      	bne.n	8010144 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801013e:	2301      	movs	r3, #1
 8010140:	607b      	str	r3, [r7, #4]
 8010142:	e008      	b.n	8010156 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010144:	4b08      	ldr	r3, [pc, #32]	; (8010168 <xTaskGetSchedulerState+0x38>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d102      	bne.n	8010152 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801014c:	2302      	movs	r3, #2
 801014e:	607b      	str	r3, [r7, #4]
 8010150:	e001      	b.n	8010156 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010152:	2300      	movs	r3, #0
 8010154:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010156:	687b      	ldr	r3, [r7, #4]
	}
 8010158:	4618      	mov	r0, r3
 801015a:	370c      	adds	r7, #12
 801015c:	46bd      	mov	sp, r7
 801015e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010162:	4770      	bx	lr
 8010164:	20001318 	.word	0x20001318
 8010168:	20001334 	.word	0x20001334

0801016c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801016c:	b580      	push	{r7, lr}
 801016e:	b086      	sub	sp, #24
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010178:	2300      	movs	r3, #0
 801017a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d056      	beq.n	8010230 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010182:	4b2e      	ldr	r3, [pc, #184]	; (801023c <xTaskPriorityDisinherit+0xd0>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	693a      	ldr	r2, [r7, #16]
 8010188:	429a      	cmp	r2, r3
 801018a:	d00a      	beq.n	80101a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801018c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010190:	f383 8811 	msr	BASEPRI, r3
 8010194:	f3bf 8f6f 	isb	sy
 8010198:	f3bf 8f4f 	dsb	sy
 801019c:	60fb      	str	r3, [r7, #12]
}
 801019e:	bf00      	nop
 80101a0:	e7fe      	b.n	80101a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80101a2:	693b      	ldr	r3, [r7, #16]
 80101a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d10a      	bne.n	80101c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80101aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ae:	f383 8811 	msr	BASEPRI, r3
 80101b2:	f3bf 8f6f 	isb	sy
 80101b6:	f3bf 8f4f 	dsb	sy
 80101ba:	60bb      	str	r3, [r7, #8]
}
 80101bc:	bf00      	nop
 80101be:	e7fe      	b.n	80101be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101c4:	1e5a      	subs	r2, r3, #1
 80101c6:	693b      	ldr	r3, [r7, #16]
 80101c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80101ca:	693b      	ldr	r3, [r7, #16]
 80101cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101ce:	693b      	ldr	r3, [r7, #16]
 80101d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d02c      	beq.n	8010230 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80101d6:	693b      	ldr	r3, [r7, #16]
 80101d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d128      	bne.n	8010230 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	3304      	adds	r3, #4
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7fe fab6 	bl	800e754 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80101e8:	693b      	ldr	r3, [r7, #16]
 80101ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80101ec:	693b      	ldr	r3, [r7, #16]
 80101ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101f0:	693b      	ldr	r3, [r7, #16]
 80101f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80101f8:	693b      	ldr	r3, [r7, #16]
 80101fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80101fc:	693b      	ldr	r3, [r7, #16]
 80101fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010200:	4b0f      	ldr	r3, [pc, #60]	; (8010240 <xTaskPriorityDisinherit+0xd4>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	429a      	cmp	r2, r3
 8010206:	d903      	bls.n	8010210 <xTaskPriorityDisinherit+0xa4>
 8010208:	693b      	ldr	r3, [r7, #16]
 801020a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801020c:	4a0c      	ldr	r2, [pc, #48]	; (8010240 <xTaskPriorityDisinherit+0xd4>)
 801020e:	6013      	str	r3, [r2, #0]
 8010210:	693b      	ldr	r3, [r7, #16]
 8010212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010214:	4613      	mov	r3, r2
 8010216:	009b      	lsls	r3, r3, #2
 8010218:	4413      	add	r3, r2
 801021a:	009b      	lsls	r3, r3, #2
 801021c:	4a09      	ldr	r2, [pc, #36]	; (8010244 <xTaskPriorityDisinherit+0xd8>)
 801021e:	441a      	add	r2, r3
 8010220:	693b      	ldr	r3, [r7, #16]
 8010222:	3304      	adds	r3, #4
 8010224:	4619      	mov	r1, r3
 8010226:	4610      	mov	r0, r2
 8010228:	f7fe fa37 	bl	800e69a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801022c:	2301      	movs	r3, #1
 801022e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010230:	697b      	ldr	r3, [r7, #20]
	}
 8010232:	4618      	mov	r0, r3
 8010234:	3718      	adds	r7, #24
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}
 801023a:	bf00      	nop
 801023c:	20000e38 	.word	0x20000e38
 8010240:	20001314 	.word	0x20001314
 8010244:	20000e3c 	.word	0x20000e3c

08010248 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8010248:	b480      	push	{r7}
 801024a:	b083      	sub	sp, #12
 801024c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801024e:	4b09      	ldr	r3, [pc, #36]	; (8010274 <uxTaskResetEventItemValue+0x2c>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	699b      	ldr	r3, [r3, #24]
 8010254:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010256:	4b07      	ldr	r3, [pc, #28]	; (8010274 <uxTaskResetEventItemValue+0x2c>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801025c:	4b05      	ldr	r3, [pc, #20]	; (8010274 <uxTaskResetEventItemValue+0x2c>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8010264:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8010266:	687b      	ldr	r3, [r7, #4]
}
 8010268:	4618      	mov	r0, r3
 801026a:	370c      	adds	r7, #12
 801026c:	46bd      	mov	sp, r7
 801026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010272:	4770      	bx	lr
 8010274:	20000e38 	.word	0x20000e38

08010278 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b084      	sub	sp, #16
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010282:	4b21      	ldr	r3, [pc, #132]	; (8010308 <prvAddCurrentTaskToDelayedList+0x90>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010288:	4b20      	ldr	r3, [pc, #128]	; (801030c <prvAddCurrentTaskToDelayedList+0x94>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	3304      	adds	r3, #4
 801028e:	4618      	mov	r0, r3
 8010290:	f7fe fa60 	bl	800e754 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f1b3 3fff 	cmp.w	r3, #4294967295
 801029a:	d10a      	bne.n	80102b2 <prvAddCurrentTaskToDelayedList+0x3a>
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d007      	beq.n	80102b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80102a2:	4b1a      	ldr	r3, [pc, #104]	; (801030c <prvAddCurrentTaskToDelayedList+0x94>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	3304      	adds	r3, #4
 80102a8:	4619      	mov	r1, r3
 80102aa:	4819      	ldr	r0, [pc, #100]	; (8010310 <prvAddCurrentTaskToDelayedList+0x98>)
 80102ac:	f7fe f9f5 	bl	800e69a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80102b0:	e026      	b.n	8010300 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80102b2:	68fa      	ldr	r2, [r7, #12]
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	4413      	add	r3, r2
 80102b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80102ba:	4b14      	ldr	r3, [pc, #80]	; (801030c <prvAddCurrentTaskToDelayedList+0x94>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	68ba      	ldr	r2, [r7, #8]
 80102c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80102c2:	68ba      	ldr	r2, [r7, #8]
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d209      	bcs.n	80102de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80102ca:	4b12      	ldr	r3, [pc, #72]	; (8010314 <prvAddCurrentTaskToDelayedList+0x9c>)
 80102cc:	681a      	ldr	r2, [r3, #0]
 80102ce:	4b0f      	ldr	r3, [pc, #60]	; (801030c <prvAddCurrentTaskToDelayedList+0x94>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	3304      	adds	r3, #4
 80102d4:	4619      	mov	r1, r3
 80102d6:	4610      	mov	r0, r2
 80102d8:	f7fe fa03 	bl	800e6e2 <vListInsert>
}
 80102dc:	e010      	b.n	8010300 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80102de:	4b0e      	ldr	r3, [pc, #56]	; (8010318 <prvAddCurrentTaskToDelayedList+0xa0>)
 80102e0:	681a      	ldr	r2, [r3, #0]
 80102e2:	4b0a      	ldr	r3, [pc, #40]	; (801030c <prvAddCurrentTaskToDelayedList+0x94>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	3304      	adds	r3, #4
 80102e8:	4619      	mov	r1, r3
 80102ea:	4610      	mov	r0, r2
 80102ec:	f7fe f9f9 	bl	800e6e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80102f0:	4b0a      	ldr	r3, [pc, #40]	; (801031c <prvAddCurrentTaskToDelayedList+0xa4>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	68ba      	ldr	r2, [r7, #8]
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d202      	bcs.n	8010300 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80102fa:	4a08      	ldr	r2, [pc, #32]	; (801031c <prvAddCurrentTaskToDelayedList+0xa4>)
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	6013      	str	r3, [r2, #0]
}
 8010300:	bf00      	nop
 8010302:	3710      	adds	r7, #16
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}
 8010308:	20001310 	.word	0x20001310
 801030c:	20000e38 	.word	0x20000e38
 8010310:	200012f8 	.word	0x200012f8
 8010314:	200012c8 	.word	0x200012c8
 8010318:	200012c4 	.word	0x200012c4
 801031c:	2000132c 	.word	0x2000132c

08010320 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b08a      	sub	sp, #40	; 0x28
 8010324:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010326:	2300      	movs	r3, #0
 8010328:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801032a:	f000 fba1 	bl	8010a70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801032e:	4b1c      	ldr	r3, [pc, #112]	; (80103a0 <xTimerCreateTimerTask+0x80>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d021      	beq.n	801037a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010336:	2300      	movs	r3, #0
 8010338:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801033a:	2300      	movs	r3, #0
 801033c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801033e:	1d3a      	adds	r2, r7, #4
 8010340:	f107 0108 	add.w	r1, r7, #8
 8010344:	f107 030c 	add.w	r3, r7, #12
 8010348:	4618      	mov	r0, r3
 801034a:	f7fd ff71 	bl	800e230 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801034e:	6879      	ldr	r1, [r7, #4]
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	68fa      	ldr	r2, [r7, #12]
 8010354:	9202      	str	r2, [sp, #8]
 8010356:	9301      	str	r3, [sp, #4]
 8010358:	2302      	movs	r3, #2
 801035a:	9300      	str	r3, [sp, #0]
 801035c:	2300      	movs	r3, #0
 801035e:	460a      	mov	r2, r1
 8010360:	4910      	ldr	r1, [pc, #64]	; (80103a4 <xTimerCreateTimerTask+0x84>)
 8010362:	4811      	ldr	r0, [pc, #68]	; (80103a8 <xTimerCreateTimerTask+0x88>)
 8010364:	f7fe fffe 	bl	800f364 <xTaskCreateStatic>
 8010368:	4603      	mov	r3, r0
 801036a:	4a10      	ldr	r2, [pc, #64]	; (80103ac <xTimerCreateTimerTask+0x8c>)
 801036c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801036e:	4b0f      	ldr	r3, [pc, #60]	; (80103ac <xTimerCreateTimerTask+0x8c>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d001      	beq.n	801037a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010376:	2301      	movs	r3, #1
 8010378:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d10a      	bne.n	8010396 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010384:	f383 8811 	msr	BASEPRI, r3
 8010388:	f3bf 8f6f 	isb	sy
 801038c:	f3bf 8f4f 	dsb	sy
 8010390:	613b      	str	r3, [r7, #16]
}
 8010392:	bf00      	nop
 8010394:	e7fe      	b.n	8010394 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010396:	697b      	ldr	r3, [r7, #20]
}
 8010398:	4618      	mov	r0, r3
 801039a:	3718      	adds	r7, #24
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}
 80103a0:	20001368 	.word	0x20001368
 80103a4:	08014ff0 	.word	0x08014ff0
 80103a8:	08010619 	.word	0x08010619
 80103ac:	2000136c 	.word	0x2000136c

080103b0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b088      	sub	sp, #32
 80103b4:	af02      	add	r7, sp, #8
 80103b6:	60f8      	str	r0, [r7, #12]
 80103b8:	60b9      	str	r1, [r7, #8]
 80103ba:	607a      	str	r2, [r7, #4]
 80103bc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80103be:	202c      	movs	r0, #44	; 0x2c
 80103c0:	f000 fe22 	bl	8011008 <pvPortMalloc>
 80103c4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80103c6:	697b      	ldr	r3, [r7, #20]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d00d      	beq.n	80103e8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80103cc:	697b      	ldr	r3, [r7, #20]
 80103ce:	2200      	movs	r2, #0
 80103d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80103d4:	697b      	ldr	r3, [r7, #20]
 80103d6:	9301      	str	r3, [sp, #4]
 80103d8:	6a3b      	ldr	r3, [r7, #32]
 80103da:	9300      	str	r3, [sp, #0]
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	687a      	ldr	r2, [r7, #4]
 80103e0:	68b9      	ldr	r1, [r7, #8]
 80103e2:	68f8      	ldr	r0, [r7, #12]
 80103e4:	f000 f843 	bl	801046e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80103e8:	697b      	ldr	r3, [r7, #20]
	}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3718      	adds	r7, #24
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}

080103f2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80103f2:	b580      	push	{r7, lr}
 80103f4:	b08a      	sub	sp, #40	; 0x28
 80103f6:	af02      	add	r7, sp, #8
 80103f8:	60f8      	str	r0, [r7, #12]
 80103fa:	60b9      	str	r1, [r7, #8]
 80103fc:	607a      	str	r2, [r7, #4]
 80103fe:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8010400:	232c      	movs	r3, #44	; 0x2c
 8010402:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	2b2c      	cmp	r3, #44	; 0x2c
 8010408:	d00a      	beq.n	8010420 <xTimerCreateStatic+0x2e>
	__asm volatile
 801040a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801040e:	f383 8811 	msr	BASEPRI, r3
 8010412:	f3bf 8f6f 	isb	sy
 8010416:	f3bf 8f4f 	dsb	sy
 801041a:	61bb      	str	r3, [r7, #24]
}
 801041c:	bf00      	nop
 801041e:	e7fe      	b.n	801041e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010420:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8010422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010424:	2b00      	cmp	r3, #0
 8010426:	d10a      	bne.n	801043e <xTimerCreateStatic+0x4c>
	__asm volatile
 8010428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801042c:	f383 8811 	msr	BASEPRI, r3
 8010430:	f3bf 8f6f 	isb	sy
 8010434:	f3bf 8f4f 	dsb	sy
 8010438:	617b      	str	r3, [r7, #20]
}
 801043a:	bf00      	nop
 801043c:	e7fe      	b.n	801043c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 801043e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010440:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8010442:	69fb      	ldr	r3, [r7, #28]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d00d      	beq.n	8010464 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8010448:	69fb      	ldr	r3, [r7, #28]
 801044a:	2202      	movs	r2, #2
 801044c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010450:	69fb      	ldr	r3, [r7, #28]
 8010452:	9301      	str	r3, [sp, #4]
 8010454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010456:	9300      	str	r3, [sp, #0]
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	687a      	ldr	r2, [r7, #4]
 801045c:	68b9      	ldr	r1, [r7, #8]
 801045e:	68f8      	ldr	r0, [r7, #12]
 8010460:	f000 f805 	bl	801046e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010464:	69fb      	ldr	r3, [r7, #28]
	}
 8010466:	4618      	mov	r0, r3
 8010468:	3720      	adds	r7, #32
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}

0801046e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801046e:	b580      	push	{r7, lr}
 8010470:	b086      	sub	sp, #24
 8010472:	af00      	add	r7, sp, #0
 8010474:	60f8      	str	r0, [r7, #12]
 8010476:	60b9      	str	r1, [r7, #8]
 8010478:	607a      	str	r2, [r7, #4]
 801047a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d10a      	bne.n	8010498 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8010482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010486:	f383 8811 	msr	BASEPRI, r3
 801048a:	f3bf 8f6f 	isb	sy
 801048e:	f3bf 8f4f 	dsb	sy
 8010492:	617b      	str	r3, [r7, #20]
}
 8010494:	bf00      	nop
 8010496:	e7fe      	b.n	8010496 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8010498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801049a:	2b00      	cmp	r3, #0
 801049c:	d01e      	beq.n	80104dc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 801049e:	f000 fae7 	bl	8010a70 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80104a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a4:	68fa      	ldr	r2, [r7, #12]
 80104a6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80104a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104aa:	68ba      	ldr	r2, [r7, #8]
 80104ac:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80104ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b0:	683a      	ldr	r2, [r7, #0]
 80104b2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80104b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b6:	6a3a      	ldr	r2, [r7, #32]
 80104b8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80104ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104bc:	3304      	adds	r3, #4
 80104be:	4618      	mov	r0, r3
 80104c0:	f7fe f8de 	bl	800e680 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d008      	beq.n	80104dc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80104ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80104d0:	f043 0304 	orr.w	r3, r3, #4
 80104d4:	b2da      	uxtb	r2, r3
 80104d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80104dc:	bf00      	nop
 80104de:	3718      	adds	r7, #24
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}

080104e4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b08a      	sub	sp, #40	; 0x28
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	60f8      	str	r0, [r7, #12]
 80104ec:	60b9      	str	r1, [r7, #8]
 80104ee:	607a      	str	r2, [r7, #4]
 80104f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80104f2:	2300      	movs	r3, #0
 80104f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d10a      	bne.n	8010512 <xTimerGenericCommand+0x2e>
	__asm volatile
 80104fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010500:	f383 8811 	msr	BASEPRI, r3
 8010504:	f3bf 8f6f 	isb	sy
 8010508:	f3bf 8f4f 	dsb	sy
 801050c:	623b      	str	r3, [r7, #32]
}
 801050e:	bf00      	nop
 8010510:	e7fe      	b.n	8010510 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010512:	4b1a      	ldr	r3, [pc, #104]	; (801057c <xTimerGenericCommand+0x98>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d02a      	beq.n	8010570 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010526:	68bb      	ldr	r3, [r7, #8]
 8010528:	2b05      	cmp	r3, #5
 801052a:	dc18      	bgt.n	801055e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801052c:	f7ff fe00 	bl	8010130 <xTaskGetSchedulerState>
 8010530:	4603      	mov	r3, r0
 8010532:	2b02      	cmp	r3, #2
 8010534:	d109      	bne.n	801054a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010536:	4b11      	ldr	r3, [pc, #68]	; (801057c <xTimerGenericCommand+0x98>)
 8010538:	6818      	ldr	r0, [r3, #0]
 801053a:	f107 0110 	add.w	r1, r7, #16
 801053e:	2300      	movs	r3, #0
 8010540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010542:	f7fe fad9 	bl	800eaf8 <xQueueGenericSend>
 8010546:	6278      	str	r0, [r7, #36]	; 0x24
 8010548:	e012      	b.n	8010570 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801054a:	4b0c      	ldr	r3, [pc, #48]	; (801057c <xTimerGenericCommand+0x98>)
 801054c:	6818      	ldr	r0, [r3, #0]
 801054e:	f107 0110 	add.w	r1, r7, #16
 8010552:	2300      	movs	r3, #0
 8010554:	2200      	movs	r2, #0
 8010556:	f7fe facf 	bl	800eaf8 <xQueueGenericSend>
 801055a:	6278      	str	r0, [r7, #36]	; 0x24
 801055c:	e008      	b.n	8010570 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801055e:	4b07      	ldr	r3, [pc, #28]	; (801057c <xTimerGenericCommand+0x98>)
 8010560:	6818      	ldr	r0, [r3, #0]
 8010562:	f107 0110 	add.w	r1, r7, #16
 8010566:	2300      	movs	r3, #0
 8010568:	683a      	ldr	r2, [r7, #0]
 801056a:	f7fe fbc3 	bl	800ecf4 <xQueueGenericSendFromISR>
 801056e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010572:	4618      	mov	r0, r3
 8010574:	3728      	adds	r7, #40	; 0x28
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}
 801057a:	bf00      	nop
 801057c:	20001368 	.word	0x20001368

08010580 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b088      	sub	sp, #32
 8010584:	af02      	add	r7, sp, #8
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801058a:	4b22      	ldr	r3, [pc, #136]	; (8010614 <prvProcessExpiredTimer+0x94>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	68db      	ldr	r3, [r3, #12]
 8010590:	68db      	ldr	r3, [r3, #12]
 8010592:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010594:	697b      	ldr	r3, [r7, #20]
 8010596:	3304      	adds	r3, #4
 8010598:	4618      	mov	r0, r3
 801059a:	f7fe f8db 	bl	800e754 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80105a4:	f003 0304 	and.w	r3, r3, #4
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d022      	beq.n	80105f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80105ac:	697b      	ldr	r3, [r7, #20]
 80105ae:	699a      	ldr	r2, [r3, #24]
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	18d1      	adds	r1, r2, r3
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	683a      	ldr	r2, [r7, #0]
 80105b8:	6978      	ldr	r0, [r7, #20]
 80105ba:	f000 f8d1 	bl	8010760 <prvInsertTimerInActiveList>
 80105be:	4603      	mov	r3, r0
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d01f      	beq.n	8010604 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80105c4:	2300      	movs	r3, #0
 80105c6:	9300      	str	r3, [sp, #0]
 80105c8:	2300      	movs	r3, #0
 80105ca:	687a      	ldr	r2, [r7, #4]
 80105cc:	2100      	movs	r1, #0
 80105ce:	6978      	ldr	r0, [r7, #20]
 80105d0:	f7ff ff88 	bl	80104e4 <xTimerGenericCommand>
 80105d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80105d6:	693b      	ldr	r3, [r7, #16]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d113      	bne.n	8010604 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80105dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e0:	f383 8811 	msr	BASEPRI, r3
 80105e4:	f3bf 8f6f 	isb	sy
 80105e8:	f3bf 8f4f 	dsb	sy
 80105ec:	60fb      	str	r3, [r7, #12]
}
 80105ee:	bf00      	nop
 80105f0:	e7fe      	b.n	80105f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80105f8:	f023 0301 	bic.w	r3, r3, #1
 80105fc:	b2da      	uxtb	r2, r3
 80105fe:	697b      	ldr	r3, [r7, #20]
 8010600:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010604:	697b      	ldr	r3, [r7, #20]
 8010606:	6a1b      	ldr	r3, [r3, #32]
 8010608:	6978      	ldr	r0, [r7, #20]
 801060a:	4798      	blx	r3
}
 801060c:	bf00      	nop
 801060e:	3718      	adds	r7, #24
 8010610:	46bd      	mov	sp, r7
 8010612:	bd80      	pop	{r7, pc}
 8010614:	20001360 	.word	0x20001360

08010618 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b084      	sub	sp, #16
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010620:	f107 0308 	add.w	r3, r7, #8
 8010624:	4618      	mov	r0, r3
 8010626:	f000 f857 	bl	80106d8 <prvGetNextExpireTime>
 801062a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	4619      	mov	r1, r3
 8010630:	68f8      	ldr	r0, [r7, #12]
 8010632:	f000 f803 	bl	801063c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010636:	f000 f8d5 	bl	80107e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801063a:	e7f1      	b.n	8010620 <prvTimerTask+0x8>

0801063c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b084      	sub	sp, #16
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
 8010644:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010646:	f7ff f8e9 	bl	800f81c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801064a:	f107 0308 	add.w	r3, r7, #8
 801064e:	4618      	mov	r0, r3
 8010650:	f000 f866 	bl	8010720 <prvSampleTimeNow>
 8010654:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010656:	68bb      	ldr	r3, [r7, #8]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d130      	bne.n	80106be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d10a      	bne.n	8010678 <prvProcessTimerOrBlockTask+0x3c>
 8010662:	687a      	ldr	r2, [r7, #4]
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	429a      	cmp	r2, r3
 8010668:	d806      	bhi.n	8010678 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801066a:	f7ff f8e5 	bl	800f838 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801066e:	68f9      	ldr	r1, [r7, #12]
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	f7ff ff85 	bl	8010580 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010676:	e024      	b.n	80106c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d008      	beq.n	8010690 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801067e:	4b13      	ldr	r3, [pc, #76]	; (80106cc <prvProcessTimerOrBlockTask+0x90>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d101      	bne.n	801068c <prvProcessTimerOrBlockTask+0x50>
 8010688:	2301      	movs	r3, #1
 801068a:	e000      	b.n	801068e <prvProcessTimerOrBlockTask+0x52>
 801068c:	2300      	movs	r3, #0
 801068e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010690:	4b0f      	ldr	r3, [pc, #60]	; (80106d0 <prvProcessTimerOrBlockTask+0x94>)
 8010692:	6818      	ldr	r0, [r3, #0]
 8010694:	687a      	ldr	r2, [r7, #4]
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	1ad3      	subs	r3, r2, r3
 801069a:	683a      	ldr	r2, [r7, #0]
 801069c:	4619      	mov	r1, r3
 801069e:	f7fe fe2d 	bl	800f2fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80106a2:	f7ff f8c9 	bl	800f838 <xTaskResumeAll>
 80106a6:	4603      	mov	r3, r0
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d10a      	bne.n	80106c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80106ac:	4b09      	ldr	r3, [pc, #36]	; (80106d4 <prvProcessTimerOrBlockTask+0x98>)
 80106ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106b2:	601a      	str	r2, [r3, #0]
 80106b4:	f3bf 8f4f 	dsb	sy
 80106b8:	f3bf 8f6f 	isb	sy
}
 80106bc:	e001      	b.n	80106c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80106be:	f7ff f8bb 	bl	800f838 <xTaskResumeAll>
}
 80106c2:	bf00      	nop
 80106c4:	3710      	adds	r7, #16
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}
 80106ca:	bf00      	nop
 80106cc:	20001364 	.word	0x20001364
 80106d0:	20001368 	.word	0x20001368
 80106d4:	e000ed04 	.word	0xe000ed04

080106d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80106d8:	b480      	push	{r7}
 80106da:	b085      	sub	sp, #20
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80106e0:	4b0e      	ldr	r3, [pc, #56]	; (801071c <prvGetNextExpireTime+0x44>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d101      	bne.n	80106ee <prvGetNextExpireTime+0x16>
 80106ea:	2201      	movs	r2, #1
 80106ec:	e000      	b.n	80106f0 <prvGetNextExpireTime+0x18>
 80106ee:	2200      	movs	r2, #0
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d105      	bne.n	8010708 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80106fc:	4b07      	ldr	r3, [pc, #28]	; (801071c <prvGetNextExpireTime+0x44>)
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	68db      	ldr	r3, [r3, #12]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	60fb      	str	r3, [r7, #12]
 8010706:	e001      	b.n	801070c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010708:	2300      	movs	r3, #0
 801070a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801070c:	68fb      	ldr	r3, [r7, #12]
}
 801070e:	4618      	mov	r0, r3
 8010710:	3714      	adds	r7, #20
 8010712:	46bd      	mov	sp, r7
 8010714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010718:	4770      	bx	lr
 801071a:	bf00      	nop
 801071c:	20001360 	.word	0x20001360

08010720 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b084      	sub	sp, #16
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010728:	f7ff f924 	bl	800f974 <xTaskGetTickCount>
 801072c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801072e:	4b0b      	ldr	r3, [pc, #44]	; (801075c <prvSampleTimeNow+0x3c>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	68fa      	ldr	r2, [r7, #12]
 8010734:	429a      	cmp	r2, r3
 8010736:	d205      	bcs.n	8010744 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010738:	f000 f936 	bl	80109a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2201      	movs	r2, #1
 8010740:	601a      	str	r2, [r3, #0]
 8010742:	e002      	b.n	801074a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2200      	movs	r2, #0
 8010748:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801074a:	4a04      	ldr	r2, [pc, #16]	; (801075c <prvSampleTimeNow+0x3c>)
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010750:	68fb      	ldr	r3, [r7, #12]
}
 8010752:	4618      	mov	r0, r3
 8010754:	3710      	adds	r7, #16
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}
 801075a:	bf00      	nop
 801075c:	20001370 	.word	0x20001370

08010760 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b086      	sub	sp, #24
 8010764:	af00      	add	r7, sp, #0
 8010766:	60f8      	str	r0, [r7, #12]
 8010768:	60b9      	str	r1, [r7, #8]
 801076a:	607a      	str	r2, [r7, #4]
 801076c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801076e:	2300      	movs	r3, #0
 8010770:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	68ba      	ldr	r2, [r7, #8]
 8010776:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	68fa      	ldr	r2, [r7, #12]
 801077c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801077e:	68ba      	ldr	r2, [r7, #8]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	429a      	cmp	r2, r3
 8010784:	d812      	bhi.n	80107ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010786:	687a      	ldr	r2, [r7, #4]
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	1ad2      	subs	r2, r2, r3
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	699b      	ldr	r3, [r3, #24]
 8010790:	429a      	cmp	r2, r3
 8010792:	d302      	bcc.n	801079a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010794:	2301      	movs	r3, #1
 8010796:	617b      	str	r3, [r7, #20]
 8010798:	e01b      	b.n	80107d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801079a:	4b10      	ldr	r3, [pc, #64]	; (80107dc <prvInsertTimerInActiveList+0x7c>)
 801079c:	681a      	ldr	r2, [r3, #0]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	3304      	adds	r3, #4
 80107a2:	4619      	mov	r1, r3
 80107a4:	4610      	mov	r0, r2
 80107a6:	f7fd ff9c 	bl	800e6e2 <vListInsert>
 80107aa:	e012      	b.n	80107d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80107ac:	687a      	ldr	r2, [r7, #4]
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	429a      	cmp	r2, r3
 80107b2:	d206      	bcs.n	80107c2 <prvInsertTimerInActiveList+0x62>
 80107b4:	68ba      	ldr	r2, [r7, #8]
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d302      	bcc.n	80107c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80107bc:	2301      	movs	r3, #1
 80107be:	617b      	str	r3, [r7, #20]
 80107c0:	e007      	b.n	80107d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80107c2:	4b07      	ldr	r3, [pc, #28]	; (80107e0 <prvInsertTimerInActiveList+0x80>)
 80107c4:	681a      	ldr	r2, [r3, #0]
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	3304      	adds	r3, #4
 80107ca:	4619      	mov	r1, r3
 80107cc:	4610      	mov	r0, r2
 80107ce:	f7fd ff88 	bl	800e6e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80107d2:	697b      	ldr	r3, [r7, #20]
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3718      	adds	r7, #24
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}
 80107dc:	20001364 	.word	0x20001364
 80107e0:	20001360 	.word	0x20001360

080107e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b08e      	sub	sp, #56	; 0x38
 80107e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80107ea:	e0ca      	b.n	8010982 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	da18      	bge.n	8010824 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80107f2:	1d3b      	adds	r3, r7, #4
 80107f4:	3304      	adds	r3, #4
 80107f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80107f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d10a      	bne.n	8010814 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80107fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010802:	f383 8811 	msr	BASEPRI, r3
 8010806:	f3bf 8f6f 	isb	sy
 801080a:	f3bf 8f4f 	dsb	sy
 801080e:	61fb      	str	r3, [r7, #28]
}
 8010810:	bf00      	nop
 8010812:	e7fe      	b.n	8010812 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801081a:	6850      	ldr	r0, [r2, #4]
 801081c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801081e:	6892      	ldr	r2, [r2, #8]
 8010820:	4611      	mov	r1, r2
 8010822:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2b00      	cmp	r3, #0
 8010828:	f2c0 80aa 	blt.w	8010980 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010832:	695b      	ldr	r3, [r3, #20]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d004      	beq.n	8010842 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801083a:	3304      	adds	r3, #4
 801083c:	4618      	mov	r0, r3
 801083e:	f7fd ff89 	bl	800e754 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010842:	463b      	mov	r3, r7
 8010844:	4618      	mov	r0, r3
 8010846:	f7ff ff6b 	bl	8010720 <prvSampleTimeNow>
 801084a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2b09      	cmp	r3, #9
 8010850:	f200 8097 	bhi.w	8010982 <prvProcessReceivedCommands+0x19e>
 8010854:	a201      	add	r2, pc, #4	; (adr r2, 801085c <prvProcessReceivedCommands+0x78>)
 8010856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801085a:	bf00      	nop
 801085c:	08010885 	.word	0x08010885
 8010860:	08010885 	.word	0x08010885
 8010864:	08010885 	.word	0x08010885
 8010868:	080108f9 	.word	0x080108f9
 801086c:	0801090d 	.word	0x0801090d
 8010870:	08010957 	.word	0x08010957
 8010874:	08010885 	.word	0x08010885
 8010878:	08010885 	.word	0x08010885
 801087c:	080108f9 	.word	0x080108f9
 8010880:	0801090d 	.word	0x0801090d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010886:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801088a:	f043 0301 	orr.w	r3, r3, #1
 801088e:	b2da      	uxtb	r2, r3
 8010890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010892:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010896:	68ba      	ldr	r2, [r7, #8]
 8010898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801089a:	699b      	ldr	r3, [r3, #24]
 801089c:	18d1      	adds	r1, r2, r3
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108a4:	f7ff ff5c 	bl	8010760 <prvInsertTimerInActiveList>
 80108a8:	4603      	mov	r3, r0
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d069      	beq.n	8010982 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80108ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108b0:	6a1b      	ldr	r3, [r3, #32]
 80108b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80108b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108bc:	f003 0304 	and.w	r3, r3, #4
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d05e      	beq.n	8010982 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80108c4:	68ba      	ldr	r2, [r7, #8]
 80108c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c8:	699b      	ldr	r3, [r3, #24]
 80108ca:	441a      	add	r2, r3
 80108cc:	2300      	movs	r3, #0
 80108ce:	9300      	str	r3, [sp, #0]
 80108d0:	2300      	movs	r3, #0
 80108d2:	2100      	movs	r1, #0
 80108d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108d6:	f7ff fe05 	bl	80104e4 <xTimerGenericCommand>
 80108da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80108dc:	6a3b      	ldr	r3, [r7, #32]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d14f      	bne.n	8010982 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80108e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e6:	f383 8811 	msr	BASEPRI, r3
 80108ea:	f3bf 8f6f 	isb	sy
 80108ee:	f3bf 8f4f 	dsb	sy
 80108f2:	61bb      	str	r3, [r7, #24]
}
 80108f4:	bf00      	nop
 80108f6:	e7fe      	b.n	80108f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80108f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108fe:	f023 0301 	bic.w	r3, r3, #1
 8010902:	b2da      	uxtb	r2, r3
 8010904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010906:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801090a:	e03a      	b.n	8010982 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801090e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010912:	f043 0301 	orr.w	r3, r3, #1
 8010916:	b2da      	uxtb	r2, r3
 8010918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801091a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801091e:	68ba      	ldr	r2, [r7, #8]
 8010920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010922:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010926:	699b      	ldr	r3, [r3, #24]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d10a      	bne.n	8010942 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801092c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010930:	f383 8811 	msr	BASEPRI, r3
 8010934:	f3bf 8f6f 	isb	sy
 8010938:	f3bf 8f4f 	dsb	sy
 801093c:	617b      	str	r3, [r7, #20]
}
 801093e:	bf00      	nop
 8010940:	e7fe      	b.n	8010940 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010944:	699a      	ldr	r2, [r3, #24]
 8010946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010948:	18d1      	adds	r1, r2, r3
 801094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801094e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010950:	f7ff ff06 	bl	8010760 <prvInsertTimerInActiveList>
					break;
 8010954:	e015      	b.n	8010982 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010958:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801095c:	f003 0302 	and.w	r3, r3, #2
 8010960:	2b00      	cmp	r3, #0
 8010962:	d103      	bne.n	801096c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010966:	f000 fc1b 	bl	80111a0 <vPortFree>
 801096a:	e00a      	b.n	8010982 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801096c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801096e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010972:	f023 0301 	bic.w	r3, r3, #1
 8010976:	b2da      	uxtb	r2, r3
 8010978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801097a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801097e:	e000      	b.n	8010982 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010980:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010982:	4b08      	ldr	r3, [pc, #32]	; (80109a4 <prvProcessReceivedCommands+0x1c0>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	1d39      	adds	r1, r7, #4
 8010988:	2200      	movs	r2, #0
 801098a:	4618      	mov	r0, r3
 801098c:	f7fe fa4e 	bl	800ee2c <xQueueReceive>
 8010990:	4603      	mov	r3, r0
 8010992:	2b00      	cmp	r3, #0
 8010994:	f47f af2a 	bne.w	80107ec <prvProcessReceivedCommands+0x8>
	}
}
 8010998:	bf00      	nop
 801099a:	bf00      	nop
 801099c:	3730      	adds	r7, #48	; 0x30
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}
 80109a2:	bf00      	nop
 80109a4:	20001368 	.word	0x20001368

080109a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b088      	sub	sp, #32
 80109ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80109ae:	e048      	b.n	8010a42 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80109b0:	4b2d      	ldr	r3, [pc, #180]	; (8010a68 <prvSwitchTimerLists+0xc0>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	68db      	ldr	r3, [r3, #12]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109ba:	4b2b      	ldr	r3, [pc, #172]	; (8010a68 <prvSwitchTimerLists+0xc0>)
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	68db      	ldr	r3, [r3, #12]
 80109c0:	68db      	ldr	r3, [r3, #12]
 80109c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	3304      	adds	r3, #4
 80109c8:	4618      	mov	r0, r3
 80109ca:	f7fd fec3 	bl	800e754 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	6a1b      	ldr	r3, [r3, #32]
 80109d2:	68f8      	ldr	r0, [r7, #12]
 80109d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109dc:	f003 0304 	and.w	r3, r3, #4
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d02e      	beq.n	8010a42 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	699b      	ldr	r3, [r3, #24]
 80109e8:	693a      	ldr	r2, [r7, #16]
 80109ea:	4413      	add	r3, r2
 80109ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80109ee:	68ba      	ldr	r2, [r7, #8]
 80109f0:	693b      	ldr	r3, [r7, #16]
 80109f2:	429a      	cmp	r2, r3
 80109f4:	d90e      	bls.n	8010a14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	68ba      	ldr	r2, [r7, #8]
 80109fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	68fa      	ldr	r2, [r7, #12]
 8010a00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010a02:	4b19      	ldr	r3, [pc, #100]	; (8010a68 <prvSwitchTimerLists+0xc0>)
 8010a04:	681a      	ldr	r2, [r3, #0]
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	3304      	adds	r3, #4
 8010a0a:	4619      	mov	r1, r3
 8010a0c:	4610      	mov	r0, r2
 8010a0e:	f7fd fe68 	bl	800e6e2 <vListInsert>
 8010a12:	e016      	b.n	8010a42 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010a14:	2300      	movs	r3, #0
 8010a16:	9300      	str	r3, [sp, #0]
 8010a18:	2300      	movs	r3, #0
 8010a1a:	693a      	ldr	r2, [r7, #16]
 8010a1c:	2100      	movs	r1, #0
 8010a1e:	68f8      	ldr	r0, [r7, #12]
 8010a20:	f7ff fd60 	bl	80104e4 <xTimerGenericCommand>
 8010a24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d10a      	bne.n	8010a42 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a30:	f383 8811 	msr	BASEPRI, r3
 8010a34:	f3bf 8f6f 	isb	sy
 8010a38:	f3bf 8f4f 	dsb	sy
 8010a3c:	603b      	str	r3, [r7, #0]
}
 8010a3e:	bf00      	nop
 8010a40:	e7fe      	b.n	8010a40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010a42:	4b09      	ldr	r3, [pc, #36]	; (8010a68 <prvSwitchTimerLists+0xc0>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d1b1      	bne.n	80109b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010a4c:	4b06      	ldr	r3, [pc, #24]	; (8010a68 <prvSwitchTimerLists+0xc0>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010a52:	4b06      	ldr	r3, [pc, #24]	; (8010a6c <prvSwitchTimerLists+0xc4>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	4a04      	ldr	r2, [pc, #16]	; (8010a68 <prvSwitchTimerLists+0xc0>)
 8010a58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010a5a:	4a04      	ldr	r2, [pc, #16]	; (8010a6c <prvSwitchTimerLists+0xc4>)
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	6013      	str	r3, [r2, #0]
}
 8010a60:	bf00      	nop
 8010a62:	3718      	adds	r7, #24
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}
 8010a68:	20001360 	.word	0x20001360
 8010a6c:	20001364 	.word	0x20001364

08010a70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b082      	sub	sp, #8
 8010a74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010a76:	f000 f9a5 	bl	8010dc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010a7a:	4b15      	ldr	r3, [pc, #84]	; (8010ad0 <prvCheckForValidListAndQueue+0x60>)
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d120      	bne.n	8010ac4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010a82:	4814      	ldr	r0, [pc, #80]	; (8010ad4 <prvCheckForValidListAndQueue+0x64>)
 8010a84:	f7fd fddc 	bl	800e640 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010a88:	4813      	ldr	r0, [pc, #76]	; (8010ad8 <prvCheckForValidListAndQueue+0x68>)
 8010a8a:	f7fd fdd9 	bl	800e640 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010a8e:	4b13      	ldr	r3, [pc, #76]	; (8010adc <prvCheckForValidListAndQueue+0x6c>)
 8010a90:	4a10      	ldr	r2, [pc, #64]	; (8010ad4 <prvCheckForValidListAndQueue+0x64>)
 8010a92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010a94:	4b12      	ldr	r3, [pc, #72]	; (8010ae0 <prvCheckForValidListAndQueue+0x70>)
 8010a96:	4a10      	ldr	r2, [pc, #64]	; (8010ad8 <prvCheckForValidListAndQueue+0x68>)
 8010a98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	9300      	str	r3, [sp, #0]
 8010a9e:	4b11      	ldr	r3, [pc, #68]	; (8010ae4 <prvCheckForValidListAndQueue+0x74>)
 8010aa0:	4a11      	ldr	r2, [pc, #68]	; (8010ae8 <prvCheckForValidListAndQueue+0x78>)
 8010aa2:	2110      	movs	r1, #16
 8010aa4:	200a      	movs	r0, #10
 8010aa6:	f7fd fee7 	bl	800e878 <xQueueGenericCreateStatic>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	4a08      	ldr	r2, [pc, #32]	; (8010ad0 <prvCheckForValidListAndQueue+0x60>)
 8010aae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010ab0:	4b07      	ldr	r3, [pc, #28]	; (8010ad0 <prvCheckForValidListAndQueue+0x60>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d005      	beq.n	8010ac4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010ab8:	4b05      	ldr	r3, [pc, #20]	; (8010ad0 <prvCheckForValidListAndQueue+0x60>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	490b      	ldr	r1, [pc, #44]	; (8010aec <prvCheckForValidListAndQueue+0x7c>)
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7fe fbc8 	bl	800f254 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010ac4:	f000 f9ae 	bl	8010e24 <vPortExitCritical>
}
 8010ac8:	bf00      	nop
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}
 8010ace:	bf00      	nop
 8010ad0:	20001368 	.word	0x20001368
 8010ad4:	20001338 	.word	0x20001338
 8010ad8:	2000134c 	.word	0x2000134c
 8010adc:	20001360 	.word	0x20001360
 8010ae0:	20001364 	.word	0x20001364
 8010ae4:	20001414 	.word	0x20001414
 8010ae8:	20001374 	.word	0x20001374
 8010aec:	08014ff8 	.word	0x08014ff8

08010af0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b086      	sub	sp, #24
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d10a      	bne.n	8010b18 <pvTimerGetTimerID+0x28>
	__asm volatile
 8010b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b06:	f383 8811 	msr	BASEPRI, r3
 8010b0a:	f3bf 8f6f 	isb	sy
 8010b0e:	f3bf 8f4f 	dsb	sy
 8010b12:	60fb      	str	r3, [r7, #12]
}
 8010b14:	bf00      	nop
 8010b16:	e7fe      	b.n	8010b16 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8010b18:	f000 f954 	bl	8010dc4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8010b1c:	697b      	ldr	r3, [r7, #20]
 8010b1e:	69db      	ldr	r3, [r3, #28]
 8010b20:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8010b22:	f000 f97f 	bl	8010e24 <vPortExitCritical>

	return pvReturn;
 8010b26:	693b      	ldr	r3, [r7, #16]
}
 8010b28:	4618      	mov	r0, r3
 8010b2a:	3718      	adds	r7, #24
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}

08010b30 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b08a      	sub	sp, #40	; 0x28
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	60f8      	str	r0, [r7, #12]
 8010b38:	60b9      	str	r1, [r7, #8]
 8010b3a:	607a      	str	r2, [r7, #4]
 8010b3c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8010b3e:	f06f 0301 	mvn.w	r3, #1
 8010b42:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010b50:	4b06      	ldr	r3, [pc, #24]	; (8010b6c <xTimerPendFunctionCallFromISR+0x3c>)
 8010b52:	6818      	ldr	r0, [r3, #0]
 8010b54:	f107 0114 	add.w	r1, r7, #20
 8010b58:	2300      	movs	r3, #0
 8010b5a:	683a      	ldr	r2, [r7, #0]
 8010b5c:	f7fe f8ca 	bl	800ecf4 <xQueueGenericSendFromISR>
 8010b60:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8010b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3728      	adds	r7, #40	; 0x28
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}
 8010b6c:	20001368 	.word	0x20001368

08010b70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010b70:	b480      	push	{r7}
 8010b72:	b085      	sub	sp, #20
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	60f8      	str	r0, [r7, #12]
 8010b78:	60b9      	str	r1, [r7, #8]
 8010b7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	3b04      	subs	r3, #4
 8010b80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010b88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	3b04      	subs	r3, #4
 8010b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	f023 0201 	bic.w	r2, r3, #1
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	3b04      	subs	r3, #4
 8010b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010ba0:	4a0c      	ldr	r2, [pc, #48]	; (8010bd4 <pxPortInitialiseStack+0x64>)
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	3b14      	subs	r3, #20
 8010baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010bac:	687a      	ldr	r2, [r7, #4]
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	3b04      	subs	r3, #4
 8010bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	f06f 0202 	mvn.w	r2, #2
 8010bbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	3b20      	subs	r3, #32
 8010bc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
}
 8010bc8:	4618      	mov	r0, r3
 8010bca:	3714      	adds	r7, #20
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd2:	4770      	bx	lr
 8010bd4:	08010bd9 	.word	0x08010bd9

08010bd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010bd8:	b480      	push	{r7}
 8010bda:	b085      	sub	sp, #20
 8010bdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010bde:	2300      	movs	r3, #0
 8010be0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010be2:	4b12      	ldr	r3, [pc, #72]	; (8010c2c <prvTaskExitError+0x54>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bea:	d00a      	beq.n	8010c02 <prvTaskExitError+0x2a>
	__asm volatile
 8010bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bf0:	f383 8811 	msr	BASEPRI, r3
 8010bf4:	f3bf 8f6f 	isb	sy
 8010bf8:	f3bf 8f4f 	dsb	sy
 8010bfc:	60fb      	str	r3, [r7, #12]
}
 8010bfe:	bf00      	nop
 8010c00:	e7fe      	b.n	8010c00 <prvTaskExitError+0x28>
	__asm volatile
 8010c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c06:	f383 8811 	msr	BASEPRI, r3
 8010c0a:	f3bf 8f6f 	isb	sy
 8010c0e:	f3bf 8f4f 	dsb	sy
 8010c12:	60bb      	str	r3, [r7, #8]
}
 8010c14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010c16:	bf00      	nop
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d0fc      	beq.n	8010c18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010c1e:	bf00      	nop
 8010c20:	bf00      	nop
 8010c22:	3714      	adds	r7, #20
 8010c24:	46bd      	mov	sp, r7
 8010c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2a:	4770      	bx	lr
 8010c2c:	200000ac 	.word	0x200000ac

08010c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010c30:	4b07      	ldr	r3, [pc, #28]	; (8010c50 <pxCurrentTCBConst2>)
 8010c32:	6819      	ldr	r1, [r3, #0]
 8010c34:	6808      	ldr	r0, [r1, #0]
 8010c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c3a:	f380 8809 	msr	PSP, r0
 8010c3e:	f3bf 8f6f 	isb	sy
 8010c42:	f04f 0000 	mov.w	r0, #0
 8010c46:	f380 8811 	msr	BASEPRI, r0
 8010c4a:	4770      	bx	lr
 8010c4c:	f3af 8000 	nop.w

08010c50 <pxCurrentTCBConst2>:
 8010c50:	20000e38 	.word	0x20000e38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010c54:	bf00      	nop
 8010c56:	bf00      	nop

08010c58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010c58:	4808      	ldr	r0, [pc, #32]	; (8010c7c <prvPortStartFirstTask+0x24>)
 8010c5a:	6800      	ldr	r0, [r0, #0]
 8010c5c:	6800      	ldr	r0, [r0, #0]
 8010c5e:	f380 8808 	msr	MSP, r0
 8010c62:	f04f 0000 	mov.w	r0, #0
 8010c66:	f380 8814 	msr	CONTROL, r0
 8010c6a:	b662      	cpsie	i
 8010c6c:	b661      	cpsie	f
 8010c6e:	f3bf 8f4f 	dsb	sy
 8010c72:	f3bf 8f6f 	isb	sy
 8010c76:	df00      	svc	0
 8010c78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010c7a:	bf00      	nop
 8010c7c:	e000ed08 	.word	0xe000ed08

08010c80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b086      	sub	sp, #24
 8010c84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010c86:	4b46      	ldr	r3, [pc, #280]	; (8010da0 <xPortStartScheduler+0x120>)
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	4a46      	ldr	r2, [pc, #280]	; (8010da4 <xPortStartScheduler+0x124>)
 8010c8c:	4293      	cmp	r3, r2
 8010c8e:	d10a      	bne.n	8010ca6 <xPortStartScheduler+0x26>
	__asm volatile
 8010c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c94:	f383 8811 	msr	BASEPRI, r3
 8010c98:	f3bf 8f6f 	isb	sy
 8010c9c:	f3bf 8f4f 	dsb	sy
 8010ca0:	613b      	str	r3, [r7, #16]
}
 8010ca2:	bf00      	nop
 8010ca4:	e7fe      	b.n	8010ca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010ca6:	4b3e      	ldr	r3, [pc, #248]	; (8010da0 <xPortStartScheduler+0x120>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	4a3f      	ldr	r2, [pc, #252]	; (8010da8 <xPortStartScheduler+0x128>)
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d10a      	bne.n	8010cc6 <xPortStartScheduler+0x46>
	__asm volatile
 8010cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cb4:	f383 8811 	msr	BASEPRI, r3
 8010cb8:	f3bf 8f6f 	isb	sy
 8010cbc:	f3bf 8f4f 	dsb	sy
 8010cc0:	60fb      	str	r3, [r7, #12]
}
 8010cc2:	bf00      	nop
 8010cc4:	e7fe      	b.n	8010cc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010cc6:	4b39      	ldr	r3, [pc, #228]	; (8010dac <xPortStartScheduler+0x12c>)
 8010cc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	781b      	ldrb	r3, [r3, #0]
 8010cce:	b2db      	uxtb	r3, r3
 8010cd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	22ff      	movs	r2, #255	; 0xff
 8010cd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	781b      	ldrb	r3, [r3, #0]
 8010cdc:	b2db      	uxtb	r3, r3
 8010cde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010ce0:	78fb      	ldrb	r3, [r7, #3]
 8010ce2:	b2db      	uxtb	r3, r3
 8010ce4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010ce8:	b2da      	uxtb	r2, r3
 8010cea:	4b31      	ldr	r3, [pc, #196]	; (8010db0 <xPortStartScheduler+0x130>)
 8010cec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010cee:	4b31      	ldr	r3, [pc, #196]	; (8010db4 <xPortStartScheduler+0x134>)
 8010cf0:	2207      	movs	r2, #7
 8010cf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010cf4:	e009      	b.n	8010d0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010cf6:	4b2f      	ldr	r3, [pc, #188]	; (8010db4 <xPortStartScheduler+0x134>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	3b01      	subs	r3, #1
 8010cfc:	4a2d      	ldr	r2, [pc, #180]	; (8010db4 <xPortStartScheduler+0x134>)
 8010cfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010d00:	78fb      	ldrb	r3, [r7, #3]
 8010d02:	b2db      	uxtb	r3, r3
 8010d04:	005b      	lsls	r3, r3, #1
 8010d06:	b2db      	uxtb	r3, r3
 8010d08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010d0a:	78fb      	ldrb	r3, [r7, #3]
 8010d0c:	b2db      	uxtb	r3, r3
 8010d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d12:	2b80      	cmp	r3, #128	; 0x80
 8010d14:	d0ef      	beq.n	8010cf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010d16:	4b27      	ldr	r3, [pc, #156]	; (8010db4 <xPortStartScheduler+0x134>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	f1c3 0307 	rsb	r3, r3, #7
 8010d1e:	2b04      	cmp	r3, #4
 8010d20:	d00a      	beq.n	8010d38 <xPortStartScheduler+0xb8>
	__asm volatile
 8010d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d26:	f383 8811 	msr	BASEPRI, r3
 8010d2a:	f3bf 8f6f 	isb	sy
 8010d2e:	f3bf 8f4f 	dsb	sy
 8010d32:	60bb      	str	r3, [r7, #8]
}
 8010d34:	bf00      	nop
 8010d36:	e7fe      	b.n	8010d36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010d38:	4b1e      	ldr	r3, [pc, #120]	; (8010db4 <xPortStartScheduler+0x134>)
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	021b      	lsls	r3, r3, #8
 8010d3e:	4a1d      	ldr	r2, [pc, #116]	; (8010db4 <xPortStartScheduler+0x134>)
 8010d40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010d42:	4b1c      	ldr	r3, [pc, #112]	; (8010db4 <xPortStartScheduler+0x134>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010d4a:	4a1a      	ldr	r2, [pc, #104]	; (8010db4 <xPortStartScheduler+0x134>)
 8010d4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	b2da      	uxtb	r2, r3
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010d56:	4b18      	ldr	r3, [pc, #96]	; (8010db8 <xPortStartScheduler+0x138>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	4a17      	ldr	r2, [pc, #92]	; (8010db8 <xPortStartScheduler+0x138>)
 8010d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010d60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010d62:	4b15      	ldr	r3, [pc, #84]	; (8010db8 <xPortStartScheduler+0x138>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	4a14      	ldr	r2, [pc, #80]	; (8010db8 <xPortStartScheduler+0x138>)
 8010d68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010d6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010d6e:	f000 f8dd 	bl	8010f2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010d72:	4b12      	ldr	r3, [pc, #72]	; (8010dbc <xPortStartScheduler+0x13c>)
 8010d74:	2200      	movs	r2, #0
 8010d76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010d78:	f000 f8fc 	bl	8010f74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010d7c:	4b10      	ldr	r3, [pc, #64]	; (8010dc0 <xPortStartScheduler+0x140>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	4a0f      	ldr	r2, [pc, #60]	; (8010dc0 <xPortStartScheduler+0x140>)
 8010d82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010d86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010d88:	f7ff ff66 	bl	8010c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010d8c:	f7fe febc 	bl	800fb08 <vTaskSwitchContext>
	prvTaskExitError();
 8010d90:	f7ff ff22 	bl	8010bd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010d94:	2300      	movs	r3, #0
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	3718      	adds	r7, #24
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}
 8010d9e:	bf00      	nop
 8010da0:	e000ed00 	.word	0xe000ed00
 8010da4:	410fc271 	.word	0x410fc271
 8010da8:	410fc270 	.word	0x410fc270
 8010dac:	e000e400 	.word	0xe000e400
 8010db0:	20001464 	.word	0x20001464
 8010db4:	20001468 	.word	0x20001468
 8010db8:	e000ed20 	.word	0xe000ed20
 8010dbc:	200000ac 	.word	0x200000ac
 8010dc0:	e000ef34 	.word	0xe000ef34

08010dc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b083      	sub	sp, #12
 8010dc8:	af00      	add	r7, sp, #0
	__asm volatile
 8010dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dce:	f383 8811 	msr	BASEPRI, r3
 8010dd2:	f3bf 8f6f 	isb	sy
 8010dd6:	f3bf 8f4f 	dsb	sy
 8010dda:	607b      	str	r3, [r7, #4]
}
 8010ddc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010dde:	4b0f      	ldr	r3, [pc, #60]	; (8010e1c <vPortEnterCritical+0x58>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	3301      	adds	r3, #1
 8010de4:	4a0d      	ldr	r2, [pc, #52]	; (8010e1c <vPortEnterCritical+0x58>)
 8010de6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010de8:	4b0c      	ldr	r3, [pc, #48]	; (8010e1c <vPortEnterCritical+0x58>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	2b01      	cmp	r3, #1
 8010dee:	d10f      	bne.n	8010e10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010df0:	4b0b      	ldr	r3, [pc, #44]	; (8010e20 <vPortEnterCritical+0x5c>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	b2db      	uxtb	r3, r3
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d00a      	beq.n	8010e10 <vPortEnterCritical+0x4c>
	__asm volatile
 8010dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dfe:	f383 8811 	msr	BASEPRI, r3
 8010e02:	f3bf 8f6f 	isb	sy
 8010e06:	f3bf 8f4f 	dsb	sy
 8010e0a:	603b      	str	r3, [r7, #0]
}
 8010e0c:	bf00      	nop
 8010e0e:	e7fe      	b.n	8010e0e <vPortEnterCritical+0x4a>
	}
}
 8010e10:	bf00      	nop
 8010e12:	370c      	adds	r7, #12
 8010e14:	46bd      	mov	sp, r7
 8010e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1a:	4770      	bx	lr
 8010e1c:	200000ac 	.word	0x200000ac
 8010e20:	e000ed04 	.word	0xe000ed04

08010e24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010e24:	b480      	push	{r7}
 8010e26:	b083      	sub	sp, #12
 8010e28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010e2a:	4b12      	ldr	r3, [pc, #72]	; (8010e74 <vPortExitCritical+0x50>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d10a      	bne.n	8010e48 <vPortExitCritical+0x24>
	__asm volatile
 8010e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e36:	f383 8811 	msr	BASEPRI, r3
 8010e3a:	f3bf 8f6f 	isb	sy
 8010e3e:	f3bf 8f4f 	dsb	sy
 8010e42:	607b      	str	r3, [r7, #4]
}
 8010e44:	bf00      	nop
 8010e46:	e7fe      	b.n	8010e46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010e48:	4b0a      	ldr	r3, [pc, #40]	; (8010e74 <vPortExitCritical+0x50>)
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	3b01      	subs	r3, #1
 8010e4e:	4a09      	ldr	r2, [pc, #36]	; (8010e74 <vPortExitCritical+0x50>)
 8010e50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010e52:	4b08      	ldr	r3, [pc, #32]	; (8010e74 <vPortExitCritical+0x50>)
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d105      	bne.n	8010e66 <vPortExitCritical+0x42>
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	f383 8811 	msr	BASEPRI, r3
}
 8010e64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010e66:	bf00      	nop
 8010e68:	370c      	adds	r7, #12
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e70:	4770      	bx	lr
 8010e72:	bf00      	nop
 8010e74:	200000ac 	.word	0x200000ac
	...

08010e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010e80:	f3ef 8009 	mrs	r0, PSP
 8010e84:	f3bf 8f6f 	isb	sy
 8010e88:	4b15      	ldr	r3, [pc, #84]	; (8010ee0 <pxCurrentTCBConst>)
 8010e8a:	681a      	ldr	r2, [r3, #0]
 8010e8c:	f01e 0f10 	tst.w	lr, #16
 8010e90:	bf08      	it	eq
 8010e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e9a:	6010      	str	r0, [r2, #0]
 8010e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010ea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010ea4:	f380 8811 	msr	BASEPRI, r0
 8010ea8:	f3bf 8f4f 	dsb	sy
 8010eac:	f3bf 8f6f 	isb	sy
 8010eb0:	f7fe fe2a 	bl	800fb08 <vTaskSwitchContext>
 8010eb4:	f04f 0000 	mov.w	r0, #0
 8010eb8:	f380 8811 	msr	BASEPRI, r0
 8010ebc:	bc09      	pop	{r0, r3}
 8010ebe:	6819      	ldr	r1, [r3, #0]
 8010ec0:	6808      	ldr	r0, [r1, #0]
 8010ec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ec6:	f01e 0f10 	tst.w	lr, #16
 8010eca:	bf08      	it	eq
 8010ecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010ed0:	f380 8809 	msr	PSP, r0
 8010ed4:	f3bf 8f6f 	isb	sy
 8010ed8:	4770      	bx	lr
 8010eda:	bf00      	nop
 8010edc:	f3af 8000 	nop.w

08010ee0 <pxCurrentTCBConst>:
 8010ee0:	20000e38 	.word	0x20000e38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010ee4:	bf00      	nop
 8010ee6:	bf00      	nop

08010ee8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b082      	sub	sp, #8
 8010eec:	af00      	add	r7, sp, #0
	__asm volatile
 8010eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef2:	f383 8811 	msr	BASEPRI, r3
 8010ef6:	f3bf 8f6f 	isb	sy
 8010efa:	f3bf 8f4f 	dsb	sy
 8010efe:	607b      	str	r3, [r7, #4]
}
 8010f00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010f02:	f7fe fd47 	bl	800f994 <xTaskIncrementTick>
 8010f06:	4603      	mov	r3, r0
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d003      	beq.n	8010f14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010f0c:	4b06      	ldr	r3, [pc, #24]	; (8010f28 <xPortSysTickHandler+0x40>)
 8010f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f12:	601a      	str	r2, [r3, #0]
 8010f14:	2300      	movs	r3, #0
 8010f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010f18:	683b      	ldr	r3, [r7, #0]
 8010f1a:	f383 8811 	msr	BASEPRI, r3
}
 8010f1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010f20:	bf00      	nop
 8010f22:	3708      	adds	r7, #8
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}
 8010f28:	e000ed04 	.word	0xe000ed04

08010f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010f2c:	b480      	push	{r7}
 8010f2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010f30:	4b0b      	ldr	r3, [pc, #44]	; (8010f60 <vPortSetupTimerInterrupt+0x34>)
 8010f32:	2200      	movs	r2, #0
 8010f34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010f36:	4b0b      	ldr	r3, [pc, #44]	; (8010f64 <vPortSetupTimerInterrupt+0x38>)
 8010f38:	2200      	movs	r2, #0
 8010f3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010f3c:	4b0a      	ldr	r3, [pc, #40]	; (8010f68 <vPortSetupTimerInterrupt+0x3c>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	4a0a      	ldr	r2, [pc, #40]	; (8010f6c <vPortSetupTimerInterrupt+0x40>)
 8010f42:	fba2 2303 	umull	r2, r3, r2, r3
 8010f46:	099b      	lsrs	r3, r3, #6
 8010f48:	4a09      	ldr	r2, [pc, #36]	; (8010f70 <vPortSetupTimerInterrupt+0x44>)
 8010f4a:	3b01      	subs	r3, #1
 8010f4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010f4e:	4b04      	ldr	r3, [pc, #16]	; (8010f60 <vPortSetupTimerInterrupt+0x34>)
 8010f50:	2207      	movs	r2, #7
 8010f52:	601a      	str	r2, [r3, #0]
}
 8010f54:	bf00      	nop
 8010f56:	46bd      	mov	sp, r7
 8010f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5c:	4770      	bx	lr
 8010f5e:	bf00      	nop
 8010f60:	e000e010 	.word	0xe000e010
 8010f64:	e000e018 	.word	0xe000e018
 8010f68:	20000000 	.word	0x20000000
 8010f6c:	10624dd3 	.word	0x10624dd3
 8010f70:	e000e014 	.word	0xe000e014

08010f74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010f74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010f84 <vPortEnableVFP+0x10>
 8010f78:	6801      	ldr	r1, [r0, #0]
 8010f7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010f7e:	6001      	str	r1, [r0, #0]
 8010f80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010f82:	bf00      	nop
 8010f84:	e000ed88 	.word	0xe000ed88

08010f88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010f88:	b480      	push	{r7}
 8010f8a:	b085      	sub	sp, #20
 8010f8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010f8e:	f3ef 8305 	mrs	r3, IPSR
 8010f92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	2b0f      	cmp	r3, #15
 8010f98:	d914      	bls.n	8010fc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010f9a:	4a17      	ldr	r2, [pc, #92]	; (8010ff8 <vPortValidateInterruptPriority+0x70>)
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	4413      	add	r3, r2
 8010fa0:	781b      	ldrb	r3, [r3, #0]
 8010fa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010fa4:	4b15      	ldr	r3, [pc, #84]	; (8010ffc <vPortValidateInterruptPriority+0x74>)
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	7afa      	ldrb	r2, [r7, #11]
 8010faa:	429a      	cmp	r2, r3
 8010fac:	d20a      	bcs.n	8010fc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb2:	f383 8811 	msr	BASEPRI, r3
 8010fb6:	f3bf 8f6f 	isb	sy
 8010fba:	f3bf 8f4f 	dsb	sy
 8010fbe:	607b      	str	r3, [r7, #4]
}
 8010fc0:	bf00      	nop
 8010fc2:	e7fe      	b.n	8010fc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010fc4:	4b0e      	ldr	r3, [pc, #56]	; (8011000 <vPortValidateInterruptPriority+0x78>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010fcc:	4b0d      	ldr	r3, [pc, #52]	; (8011004 <vPortValidateInterruptPriority+0x7c>)
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	429a      	cmp	r2, r3
 8010fd2:	d90a      	bls.n	8010fea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fd8:	f383 8811 	msr	BASEPRI, r3
 8010fdc:	f3bf 8f6f 	isb	sy
 8010fe0:	f3bf 8f4f 	dsb	sy
 8010fe4:	603b      	str	r3, [r7, #0]
}
 8010fe6:	bf00      	nop
 8010fe8:	e7fe      	b.n	8010fe8 <vPortValidateInterruptPriority+0x60>
	}
 8010fea:	bf00      	nop
 8010fec:	3714      	adds	r7, #20
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff4:	4770      	bx	lr
 8010ff6:	bf00      	nop
 8010ff8:	e000e3f0 	.word	0xe000e3f0
 8010ffc:	20001464 	.word	0x20001464
 8011000:	e000ed0c 	.word	0xe000ed0c
 8011004:	20001468 	.word	0x20001468

08011008 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b08a      	sub	sp, #40	; 0x28
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011010:	2300      	movs	r3, #0
 8011012:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011014:	f7fe fc02 	bl	800f81c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011018:	4b5b      	ldr	r3, [pc, #364]	; (8011188 <pvPortMalloc+0x180>)
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d101      	bne.n	8011024 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011020:	f000 f920 	bl	8011264 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011024:	4b59      	ldr	r3, [pc, #356]	; (801118c <pvPortMalloc+0x184>)
 8011026:	681a      	ldr	r2, [r3, #0]
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	4013      	ands	r3, r2
 801102c:	2b00      	cmp	r3, #0
 801102e:	f040 8093 	bne.w	8011158 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d01d      	beq.n	8011074 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011038:	2208      	movs	r2, #8
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	4413      	add	r3, r2
 801103e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	f003 0307 	and.w	r3, r3, #7
 8011046:	2b00      	cmp	r3, #0
 8011048:	d014      	beq.n	8011074 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f023 0307 	bic.w	r3, r3, #7
 8011050:	3308      	adds	r3, #8
 8011052:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f003 0307 	and.w	r3, r3, #7
 801105a:	2b00      	cmp	r3, #0
 801105c:	d00a      	beq.n	8011074 <pvPortMalloc+0x6c>
	__asm volatile
 801105e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011062:	f383 8811 	msr	BASEPRI, r3
 8011066:	f3bf 8f6f 	isb	sy
 801106a:	f3bf 8f4f 	dsb	sy
 801106e:	617b      	str	r3, [r7, #20]
}
 8011070:	bf00      	nop
 8011072:	e7fe      	b.n	8011072 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d06e      	beq.n	8011158 <pvPortMalloc+0x150>
 801107a:	4b45      	ldr	r3, [pc, #276]	; (8011190 <pvPortMalloc+0x188>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	687a      	ldr	r2, [r7, #4]
 8011080:	429a      	cmp	r2, r3
 8011082:	d869      	bhi.n	8011158 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011084:	4b43      	ldr	r3, [pc, #268]	; (8011194 <pvPortMalloc+0x18c>)
 8011086:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011088:	4b42      	ldr	r3, [pc, #264]	; (8011194 <pvPortMalloc+0x18c>)
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801108e:	e004      	b.n	801109a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011092:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801109c:	685b      	ldr	r3, [r3, #4]
 801109e:	687a      	ldr	r2, [r7, #4]
 80110a0:	429a      	cmp	r2, r3
 80110a2:	d903      	bls.n	80110ac <pvPortMalloc+0xa4>
 80110a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d1f1      	bne.n	8011090 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80110ac:	4b36      	ldr	r3, [pc, #216]	; (8011188 <pvPortMalloc+0x180>)
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110b2:	429a      	cmp	r2, r3
 80110b4:	d050      	beq.n	8011158 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80110b6:	6a3b      	ldr	r3, [r7, #32]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	2208      	movs	r2, #8
 80110bc:	4413      	add	r3, r2
 80110be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80110c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c2:	681a      	ldr	r2, [r3, #0]
 80110c4:	6a3b      	ldr	r3, [r7, #32]
 80110c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80110c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ca:	685a      	ldr	r2, [r3, #4]
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	1ad2      	subs	r2, r2, r3
 80110d0:	2308      	movs	r3, #8
 80110d2:	005b      	lsls	r3, r3, #1
 80110d4:	429a      	cmp	r2, r3
 80110d6:	d91f      	bls.n	8011118 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80110d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	4413      	add	r3, r2
 80110de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80110e0:	69bb      	ldr	r3, [r7, #24]
 80110e2:	f003 0307 	and.w	r3, r3, #7
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d00a      	beq.n	8011100 <pvPortMalloc+0xf8>
	__asm volatile
 80110ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ee:	f383 8811 	msr	BASEPRI, r3
 80110f2:	f3bf 8f6f 	isb	sy
 80110f6:	f3bf 8f4f 	dsb	sy
 80110fa:	613b      	str	r3, [r7, #16]
}
 80110fc:	bf00      	nop
 80110fe:	e7fe      	b.n	80110fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011102:	685a      	ldr	r2, [r3, #4]
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	1ad2      	subs	r2, r2, r3
 8011108:	69bb      	ldr	r3, [r7, #24]
 801110a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801110e:	687a      	ldr	r2, [r7, #4]
 8011110:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011112:	69b8      	ldr	r0, [r7, #24]
 8011114:	f000 f908 	bl	8011328 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011118:	4b1d      	ldr	r3, [pc, #116]	; (8011190 <pvPortMalloc+0x188>)
 801111a:	681a      	ldr	r2, [r3, #0]
 801111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801111e:	685b      	ldr	r3, [r3, #4]
 8011120:	1ad3      	subs	r3, r2, r3
 8011122:	4a1b      	ldr	r2, [pc, #108]	; (8011190 <pvPortMalloc+0x188>)
 8011124:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011126:	4b1a      	ldr	r3, [pc, #104]	; (8011190 <pvPortMalloc+0x188>)
 8011128:	681a      	ldr	r2, [r3, #0]
 801112a:	4b1b      	ldr	r3, [pc, #108]	; (8011198 <pvPortMalloc+0x190>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	429a      	cmp	r2, r3
 8011130:	d203      	bcs.n	801113a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011132:	4b17      	ldr	r3, [pc, #92]	; (8011190 <pvPortMalloc+0x188>)
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	4a18      	ldr	r2, [pc, #96]	; (8011198 <pvPortMalloc+0x190>)
 8011138:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801113c:	685a      	ldr	r2, [r3, #4]
 801113e:	4b13      	ldr	r3, [pc, #76]	; (801118c <pvPortMalloc+0x184>)
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	431a      	orrs	r2, r3
 8011144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011146:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801114a:	2200      	movs	r2, #0
 801114c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801114e:	4b13      	ldr	r3, [pc, #76]	; (801119c <pvPortMalloc+0x194>)
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	3301      	adds	r3, #1
 8011154:	4a11      	ldr	r2, [pc, #68]	; (801119c <pvPortMalloc+0x194>)
 8011156:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011158:	f7fe fb6e 	bl	800f838 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801115c:	69fb      	ldr	r3, [r7, #28]
 801115e:	f003 0307 	and.w	r3, r3, #7
 8011162:	2b00      	cmp	r3, #0
 8011164:	d00a      	beq.n	801117c <pvPortMalloc+0x174>
	__asm volatile
 8011166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801116a:	f383 8811 	msr	BASEPRI, r3
 801116e:	f3bf 8f6f 	isb	sy
 8011172:	f3bf 8f4f 	dsb	sy
 8011176:	60fb      	str	r3, [r7, #12]
}
 8011178:	bf00      	nop
 801117a:	e7fe      	b.n	801117a <pvPortMalloc+0x172>
	return pvReturn;
 801117c:	69fb      	ldr	r3, [r7, #28]
}
 801117e:	4618      	mov	r0, r3
 8011180:	3728      	adds	r7, #40	; 0x28
 8011182:	46bd      	mov	sp, r7
 8011184:	bd80      	pop	{r7, pc}
 8011186:	bf00      	nop
 8011188:	20005074 	.word	0x20005074
 801118c:	20005088 	.word	0x20005088
 8011190:	20005078 	.word	0x20005078
 8011194:	2000506c 	.word	0x2000506c
 8011198:	2000507c 	.word	0x2000507c
 801119c:	20005080 	.word	0x20005080

080111a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b086      	sub	sp, #24
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d04d      	beq.n	801124e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80111b2:	2308      	movs	r3, #8
 80111b4:	425b      	negs	r3, r3
 80111b6:	697a      	ldr	r2, [r7, #20]
 80111b8:	4413      	add	r3, r2
 80111ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80111c0:	693b      	ldr	r3, [r7, #16]
 80111c2:	685a      	ldr	r2, [r3, #4]
 80111c4:	4b24      	ldr	r3, [pc, #144]	; (8011258 <vPortFree+0xb8>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	4013      	ands	r3, r2
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d10a      	bne.n	80111e4 <vPortFree+0x44>
	__asm volatile
 80111ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111d2:	f383 8811 	msr	BASEPRI, r3
 80111d6:	f3bf 8f6f 	isb	sy
 80111da:	f3bf 8f4f 	dsb	sy
 80111de:	60fb      	str	r3, [r7, #12]
}
 80111e0:	bf00      	nop
 80111e2:	e7fe      	b.n	80111e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80111e4:	693b      	ldr	r3, [r7, #16]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d00a      	beq.n	8011202 <vPortFree+0x62>
	__asm volatile
 80111ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111f0:	f383 8811 	msr	BASEPRI, r3
 80111f4:	f3bf 8f6f 	isb	sy
 80111f8:	f3bf 8f4f 	dsb	sy
 80111fc:	60bb      	str	r3, [r7, #8]
}
 80111fe:	bf00      	nop
 8011200:	e7fe      	b.n	8011200 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011202:	693b      	ldr	r3, [r7, #16]
 8011204:	685a      	ldr	r2, [r3, #4]
 8011206:	4b14      	ldr	r3, [pc, #80]	; (8011258 <vPortFree+0xb8>)
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	4013      	ands	r3, r2
 801120c:	2b00      	cmp	r3, #0
 801120e:	d01e      	beq.n	801124e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011210:	693b      	ldr	r3, [r7, #16]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d11a      	bne.n	801124e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011218:	693b      	ldr	r3, [r7, #16]
 801121a:	685a      	ldr	r2, [r3, #4]
 801121c:	4b0e      	ldr	r3, [pc, #56]	; (8011258 <vPortFree+0xb8>)
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	43db      	mvns	r3, r3
 8011222:	401a      	ands	r2, r3
 8011224:	693b      	ldr	r3, [r7, #16]
 8011226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011228:	f7fe faf8 	bl	800f81c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801122c:	693b      	ldr	r3, [r7, #16]
 801122e:	685a      	ldr	r2, [r3, #4]
 8011230:	4b0a      	ldr	r3, [pc, #40]	; (801125c <vPortFree+0xbc>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	4413      	add	r3, r2
 8011236:	4a09      	ldr	r2, [pc, #36]	; (801125c <vPortFree+0xbc>)
 8011238:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801123a:	6938      	ldr	r0, [r7, #16]
 801123c:	f000 f874 	bl	8011328 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011240:	4b07      	ldr	r3, [pc, #28]	; (8011260 <vPortFree+0xc0>)
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	3301      	adds	r3, #1
 8011246:	4a06      	ldr	r2, [pc, #24]	; (8011260 <vPortFree+0xc0>)
 8011248:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801124a:	f7fe faf5 	bl	800f838 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801124e:	bf00      	nop
 8011250:	3718      	adds	r7, #24
 8011252:	46bd      	mov	sp, r7
 8011254:	bd80      	pop	{r7, pc}
 8011256:	bf00      	nop
 8011258:	20005088 	.word	0x20005088
 801125c:	20005078 	.word	0x20005078
 8011260:	20005084 	.word	0x20005084

08011264 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011264:	b480      	push	{r7}
 8011266:	b085      	sub	sp, #20
 8011268:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801126a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801126e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011270:	4b27      	ldr	r3, [pc, #156]	; (8011310 <prvHeapInit+0xac>)
 8011272:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	f003 0307 	and.w	r3, r3, #7
 801127a:	2b00      	cmp	r3, #0
 801127c:	d00c      	beq.n	8011298 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	3307      	adds	r3, #7
 8011282:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	f023 0307 	bic.w	r3, r3, #7
 801128a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801128c:	68ba      	ldr	r2, [r7, #8]
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	1ad3      	subs	r3, r2, r3
 8011292:	4a1f      	ldr	r2, [pc, #124]	; (8011310 <prvHeapInit+0xac>)
 8011294:	4413      	add	r3, r2
 8011296:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801129c:	4a1d      	ldr	r2, [pc, #116]	; (8011314 <prvHeapInit+0xb0>)
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80112a2:	4b1c      	ldr	r3, [pc, #112]	; (8011314 <prvHeapInit+0xb0>)
 80112a4:	2200      	movs	r2, #0
 80112a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	68ba      	ldr	r2, [r7, #8]
 80112ac:	4413      	add	r3, r2
 80112ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80112b0:	2208      	movs	r2, #8
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	1a9b      	subs	r3, r3, r2
 80112b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	f023 0307 	bic.w	r3, r3, #7
 80112be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	4a15      	ldr	r2, [pc, #84]	; (8011318 <prvHeapInit+0xb4>)
 80112c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80112c6:	4b14      	ldr	r3, [pc, #80]	; (8011318 <prvHeapInit+0xb4>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	2200      	movs	r2, #0
 80112cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80112ce:	4b12      	ldr	r3, [pc, #72]	; (8011318 <prvHeapInit+0xb4>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	2200      	movs	r2, #0
 80112d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80112da:	683b      	ldr	r3, [r7, #0]
 80112dc:	68fa      	ldr	r2, [r7, #12]
 80112de:	1ad2      	subs	r2, r2, r3
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80112e4:	4b0c      	ldr	r3, [pc, #48]	; (8011318 <prvHeapInit+0xb4>)
 80112e6:	681a      	ldr	r2, [r3, #0]
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	685b      	ldr	r3, [r3, #4]
 80112f0:	4a0a      	ldr	r2, [pc, #40]	; (801131c <prvHeapInit+0xb8>)
 80112f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	685b      	ldr	r3, [r3, #4]
 80112f8:	4a09      	ldr	r2, [pc, #36]	; (8011320 <prvHeapInit+0xbc>)
 80112fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80112fc:	4b09      	ldr	r3, [pc, #36]	; (8011324 <prvHeapInit+0xc0>)
 80112fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011302:	601a      	str	r2, [r3, #0]
}
 8011304:	bf00      	nop
 8011306:	3714      	adds	r7, #20
 8011308:	46bd      	mov	sp, r7
 801130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130e:	4770      	bx	lr
 8011310:	2000146c 	.word	0x2000146c
 8011314:	2000506c 	.word	0x2000506c
 8011318:	20005074 	.word	0x20005074
 801131c:	2000507c 	.word	0x2000507c
 8011320:	20005078 	.word	0x20005078
 8011324:	20005088 	.word	0x20005088

08011328 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011328:	b480      	push	{r7}
 801132a:	b085      	sub	sp, #20
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011330:	4b28      	ldr	r3, [pc, #160]	; (80113d4 <prvInsertBlockIntoFreeList+0xac>)
 8011332:	60fb      	str	r3, [r7, #12]
 8011334:	e002      	b.n	801133c <prvInsertBlockIntoFreeList+0x14>
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	60fb      	str	r3, [r7, #12]
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	687a      	ldr	r2, [r7, #4]
 8011342:	429a      	cmp	r2, r3
 8011344:	d8f7      	bhi.n	8011336 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	685b      	ldr	r3, [r3, #4]
 801134e:	68ba      	ldr	r2, [r7, #8]
 8011350:	4413      	add	r3, r2
 8011352:	687a      	ldr	r2, [r7, #4]
 8011354:	429a      	cmp	r2, r3
 8011356:	d108      	bne.n	801136a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	685a      	ldr	r2, [r3, #4]
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	685b      	ldr	r3, [r3, #4]
 8011360:	441a      	add	r2, r3
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	68ba      	ldr	r2, [r7, #8]
 8011374:	441a      	add	r2, r3
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	429a      	cmp	r2, r3
 801137c:	d118      	bne.n	80113b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	681a      	ldr	r2, [r3, #0]
 8011382:	4b15      	ldr	r3, [pc, #84]	; (80113d8 <prvInsertBlockIntoFreeList+0xb0>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	429a      	cmp	r2, r3
 8011388:	d00d      	beq.n	80113a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	685a      	ldr	r2, [r3, #4]
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	685b      	ldr	r3, [r3, #4]
 8011394:	441a      	add	r2, r3
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	681a      	ldr	r2, [r3, #0]
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	601a      	str	r2, [r3, #0]
 80113a4:	e008      	b.n	80113b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80113a6:	4b0c      	ldr	r3, [pc, #48]	; (80113d8 <prvInsertBlockIntoFreeList+0xb0>)
 80113a8:	681a      	ldr	r2, [r3, #0]
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	601a      	str	r2, [r3, #0]
 80113ae:	e003      	b.n	80113b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	681a      	ldr	r2, [r3, #0]
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80113b8:	68fa      	ldr	r2, [r7, #12]
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	429a      	cmp	r2, r3
 80113be:	d002      	beq.n	80113c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	687a      	ldr	r2, [r7, #4]
 80113c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80113c6:	bf00      	nop
 80113c8:	3714      	adds	r7, #20
 80113ca:	46bd      	mov	sp, r7
 80113cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d0:	4770      	bx	lr
 80113d2:	bf00      	nop
 80113d4:	2000506c 	.word	0x2000506c
 80113d8:	20005074 	.word	0x20005074

080113dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80113e0:	2200      	movs	r2, #0
 80113e2:	4912      	ldr	r1, [pc, #72]	; (801142c <MX_USB_DEVICE_Init+0x50>)
 80113e4:	4812      	ldr	r0, [pc, #72]	; (8011430 <MX_USB_DEVICE_Init+0x54>)
 80113e6:	f7fb f823 	bl	800c430 <USBD_Init>
 80113ea:	4603      	mov	r3, r0
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d001      	beq.n	80113f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80113f0:	f7f0 f832 	bl	8001458 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80113f4:	490f      	ldr	r1, [pc, #60]	; (8011434 <MX_USB_DEVICE_Init+0x58>)
 80113f6:	480e      	ldr	r0, [pc, #56]	; (8011430 <MX_USB_DEVICE_Init+0x54>)
 80113f8:	f7fb f84a 	bl	800c490 <USBD_RegisterClass>
 80113fc:	4603      	mov	r3, r0
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d001      	beq.n	8011406 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011402:	f7f0 f829 	bl	8001458 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011406:	490c      	ldr	r1, [pc, #48]	; (8011438 <MX_USB_DEVICE_Init+0x5c>)
 8011408:	4809      	ldr	r0, [pc, #36]	; (8011430 <MX_USB_DEVICE_Init+0x54>)
 801140a:	f7fa ff3b 	bl	800c284 <USBD_CDC_RegisterInterface>
 801140e:	4603      	mov	r3, r0
 8011410:	2b00      	cmp	r3, #0
 8011412:	d001      	beq.n	8011418 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011414:	f7f0 f820 	bl	8001458 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011418:	4805      	ldr	r0, [pc, #20]	; (8011430 <MX_USB_DEVICE_Init+0x54>)
 801141a:	f7fb f86f 	bl	800c4fc <USBD_Start>
 801141e:	4603      	mov	r3, r0
 8011420:	2b00      	cmp	r3, #0
 8011422:	d001      	beq.n	8011428 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011424:	f7f0 f818 	bl	8001458 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011428:	bf00      	nop
 801142a:	bd80      	pop	{r7, pc}
 801142c:	200000c4 	.word	0x200000c4
 8011430:	2000508c 	.word	0x2000508c
 8011434:	2000002c 	.word	0x2000002c
 8011438:	200000b0 	.word	0x200000b0

0801143c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011440:	2200      	movs	r2, #0
 8011442:	4905      	ldr	r1, [pc, #20]	; (8011458 <CDC_Init_FS+0x1c>)
 8011444:	4805      	ldr	r0, [pc, #20]	; (801145c <CDC_Init_FS+0x20>)
 8011446:	f7fa ff37 	bl	800c2b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801144a:	4905      	ldr	r1, [pc, #20]	; (8011460 <CDC_Init_FS+0x24>)
 801144c:	4803      	ldr	r0, [pc, #12]	; (801145c <CDC_Init_FS+0x20>)
 801144e:	f7fa ff55 	bl	800c2fc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011452:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011454:	4618      	mov	r0, r3
 8011456:	bd80      	pop	{r7, pc}
 8011458:	20005b74 	.word	0x20005b74
 801145c:	2000508c 	.word	0x2000508c
 8011460:	20005374 	.word	0x20005374

08011464 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011464:	b480      	push	{r7}
 8011466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011468:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801146a:	4618      	mov	r0, r3
 801146c:	46bd      	mov	sp, r7
 801146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011472:	4770      	bx	lr

08011474 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011474:	b480      	push	{r7}
 8011476:	b083      	sub	sp, #12
 8011478:	af00      	add	r7, sp, #0
 801147a:	4603      	mov	r3, r0
 801147c:	6039      	str	r1, [r7, #0]
 801147e:	71fb      	strb	r3, [r7, #7]
 8011480:	4613      	mov	r3, r2
 8011482:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011484:	79fb      	ldrb	r3, [r7, #7]
 8011486:	2b23      	cmp	r3, #35	; 0x23
 8011488:	d84a      	bhi.n	8011520 <CDC_Control_FS+0xac>
 801148a:	a201      	add	r2, pc, #4	; (adr r2, 8011490 <CDC_Control_FS+0x1c>)
 801148c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011490:	08011521 	.word	0x08011521
 8011494:	08011521 	.word	0x08011521
 8011498:	08011521 	.word	0x08011521
 801149c:	08011521 	.word	0x08011521
 80114a0:	08011521 	.word	0x08011521
 80114a4:	08011521 	.word	0x08011521
 80114a8:	08011521 	.word	0x08011521
 80114ac:	08011521 	.word	0x08011521
 80114b0:	08011521 	.word	0x08011521
 80114b4:	08011521 	.word	0x08011521
 80114b8:	08011521 	.word	0x08011521
 80114bc:	08011521 	.word	0x08011521
 80114c0:	08011521 	.word	0x08011521
 80114c4:	08011521 	.word	0x08011521
 80114c8:	08011521 	.word	0x08011521
 80114cc:	08011521 	.word	0x08011521
 80114d0:	08011521 	.word	0x08011521
 80114d4:	08011521 	.word	0x08011521
 80114d8:	08011521 	.word	0x08011521
 80114dc:	08011521 	.word	0x08011521
 80114e0:	08011521 	.word	0x08011521
 80114e4:	08011521 	.word	0x08011521
 80114e8:	08011521 	.word	0x08011521
 80114ec:	08011521 	.word	0x08011521
 80114f0:	08011521 	.word	0x08011521
 80114f4:	08011521 	.word	0x08011521
 80114f8:	08011521 	.word	0x08011521
 80114fc:	08011521 	.word	0x08011521
 8011500:	08011521 	.word	0x08011521
 8011504:	08011521 	.word	0x08011521
 8011508:	08011521 	.word	0x08011521
 801150c:	08011521 	.word	0x08011521
 8011510:	08011521 	.word	0x08011521
 8011514:	08011521 	.word	0x08011521
 8011518:	08011521 	.word	0x08011521
 801151c:	08011521 	.word	0x08011521
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011520:	bf00      	nop
  }

  return (USBD_OK);
 8011522:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011524:	4618      	mov	r0, r3
 8011526:	370c      	adds	r7, #12
 8011528:	46bd      	mov	sp, r7
 801152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152e:	4770      	bx	lr

08011530 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b082      	sub	sp, #8
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
 8011538:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801153a:	6879      	ldr	r1, [r7, #4]
 801153c:	481a      	ldr	r0, [pc, #104]	; (80115a8 <CDC_Receive_FS+0x78>)
 801153e:	f7fa fedd 	bl	800c2fc <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011542:	4819      	ldr	r0, [pc, #100]	; (80115a8 <CDC_Receive_FS+0x78>)
 8011544:	f7fa ff3e 	bl	800c3c4 <USBD_CDC_ReceivePacket>

	if (Buf[0] == '\r') {
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	781b      	ldrb	r3, [r3, #0]
 801154c:	2b0d      	cmp	r3, #13
 801154e:	d112      	bne.n	8011576 <CDC_Receive_FS+0x46>
		memcpy(usb_rx_buffer.buffer, _buffer.buffer, sizeof(usb_rx_buffer.buffer));
 8011550:	4a16      	ldr	r2, [pc, #88]	; (80115ac <CDC_Receive_FS+0x7c>)
 8011552:	4b17      	ldr	r3, [pc, #92]	; (80115b0 <CDC_Receive_FS+0x80>)
 8011554:	cb03      	ldmia	r3!, {r0, r1}
 8011556:	6010      	str	r0, [r2, #0]
 8011558:	6051      	str	r1, [r2, #4]
 801155a:	4b15      	ldr	r3, [pc, #84]	; (80115b0 <CDC_Receive_FS+0x80>)
 801155c:	2200      	movs	r2, #0
 801155e:	701a      	strb	r2, [r3, #0]
		memset(_buffer.buffer, 0, RECEIVED_USB);
		_buffer.pos = 0;
 8011560:	4b13      	ldr	r3, [pc, #76]	; (80115b0 <CDC_Receive_FS+0x80>)
 8011562:	2200      	movs	r2, #0
 8011564:	811a      	strh	r2, [r3, #8]
		osEventFlagsSet(USBEventHandle, RECEIVED_USB);
 8011566:	4b13      	ldr	r3, [pc, #76]	; (80115b4 <CDC_Receive_FS+0x84>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2101      	movs	r1, #1
 801156c:	4618      	mov	r0, r3
 801156e:	f7fc fd11 	bl	800df94 <osEventFlagsSet>
		return (USBD_OK);
 8011572:	2300      	movs	r3, #0
 8011574:	e014      	b.n	80115a0 <CDC_Receive_FS+0x70>
	}

	_buffer.buffer[_buffer.pos++] = Buf[0];
 8011576:	4b0e      	ldr	r3, [pc, #56]	; (80115b0 <CDC_Receive_FS+0x80>)
 8011578:	891b      	ldrh	r3, [r3, #8]
 801157a:	b29b      	uxth	r3, r3
 801157c:	1c5a      	adds	r2, r3, #1
 801157e:	b291      	uxth	r1, r2
 8011580:	4a0b      	ldr	r2, [pc, #44]	; (80115b0 <CDC_Receive_FS+0x80>)
 8011582:	8111      	strh	r1, [r2, #8]
 8011584:	461a      	mov	r2, r3
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	7819      	ldrb	r1, [r3, #0]
 801158a:	4b09      	ldr	r3, [pc, #36]	; (80115b0 <CDC_Receive_FS+0x80>)
 801158c:	5499      	strb	r1, [r3, r2]
	if (_buffer.pos > USB_BUFFER_SIZE) {
 801158e:	4b08      	ldr	r3, [pc, #32]	; (80115b0 <CDC_Receive_FS+0x80>)
 8011590:	891b      	ldrh	r3, [r3, #8]
 8011592:	b29b      	uxth	r3, r3
 8011594:	2b08      	cmp	r3, #8
 8011596:	d902      	bls.n	801159e <CDC_Receive_FS+0x6e>

		_buffer.pos = 0;
 8011598:	4b05      	ldr	r3, [pc, #20]	; (80115b0 <CDC_Receive_FS+0x80>)
 801159a:	2200      	movs	r2, #0
 801159c:	811a      	strh	r2, [r3, #8]
	}

	return (USBD_OK);
 801159e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80115a0:	4618      	mov	r0, r3
 80115a2:	3708      	adds	r7, #8
 80115a4:	46bd      	mov	sp, r7
 80115a6:	bd80      	pop	{r7, pc}
 80115a8:	2000508c 	.word	0x2000508c
 80115ac:	20000370 	.word	0x20000370
 80115b0:	20005368 	.word	0x20005368
 80115b4:	2000034c 	.word	0x2000034c

080115b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b084      	sub	sp, #16
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
 80115c0:	460b      	mov	r3, r1
 80115c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80115c4:	2300      	movs	r3, #0
 80115c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80115c8:	4b0d      	ldr	r3, [pc, #52]	; (8011600 <CDC_Transmit_FS+0x48>)
 80115ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80115d0:	68bb      	ldr	r3, [r7, #8]
 80115d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d001      	beq.n	80115de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80115da:	2301      	movs	r3, #1
 80115dc:	e00b      	b.n	80115f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80115de:	887b      	ldrh	r3, [r7, #2]
 80115e0:	461a      	mov	r2, r3
 80115e2:	6879      	ldr	r1, [r7, #4]
 80115e4:	4806      	ldr	r0, [pc, #24]	; (8011600 <CDC_Transmit_FS+0x48>)
 80115e6:	f7fa fe67 	bl	800c2b8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80115ea:	4805      	ldr	r0, [pc, #20]	; (8011600 <CDC_Transmit_FS+0x48>)
 80115ec:	f7fa fea4 	bl	800c338 <USBD_CDC_TransmitPacket>
 80115f0:	4603      	mov	r3, r0
 80115f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80115f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3710      	adds	r7, #16
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
 80115fe:	bf00      	nop
 8011600:	2000508c 	.word	0x2000508c

08011604 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011604:	b480      	push	{r7}
 8011606:	b087      	sub	sp, #28
 8011608:	af00      	add	r7, sp, #0
 801160a:	60f8      	str	r0, [r7, #12]
 801160c:	60b9      	str	r1, [r7, #8]
 801160e:	4613      	mov	r3, r2
 8011610:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011612:	2300      	movs	r3, #0
 8011614:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011616:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801161a:	4618      	mov	r0, r3
 801161c:	371c      	adds	r7, #28
 801161e:	46bd      	mov	sp, r7
 8011620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011624:	4770      	bx	lr
	...

08011628 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011628:	b480      	push	{r7}
 801162a:	b083      	sub	sp, #12
 801162c:	af00      	add	r7, sp, #0
 801162e:	4603      	mov	r3, r0
 8011630:	6039      	str	r1, [r7, #0]
 8011632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	2212      	movs	r2, #18
 8011638:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801163a:	4b03      	ldr	r3, [pc, #12]	; (8011648 <USBD_FS_DeviceDescriptor+0x20>)
}
 801163c:	4618      	mov	r0, r3
 801163e:	370c      	adds	r7, #12
 8011640:	46bd      	mov	sp, r7
 8011642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011646:	4770      	bx	lr
 8011648:	200000e4 	.word	0x200000e4

0801164c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801164c:	b480      	push	{r7}
 801164e:	b083      	sub	sp, #12
 8011650:	af00      	add	r7, sp, #0
 8011652:	4603      	mov	r3, r0
 8011654:	6039      	str	r1, [r7, #0]
 8011656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	2204      	movs	r2, #4
 801165c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801165e:	4b03      	ldr	r3, [pc, #12]	; (801166c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011660:	4618      	mov	r0, r3
 8011662:	370c      	adds	r7, #12
 8011664:	46bd      	mov	sp, r7
 8011666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166a:	4770      	bx	lr
 801166c:	20000104 	.word	0x20000104

08011670 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b082      	sub	sp, #8
 8011674:	af00      	add	r7, sp, #0
 8011676:	4603      	mov	r3, r0
 8011678:	6039      	str	r1, [r7, #0]
 801167a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801167c:	79fb      	ldrb	r3, [r7, #7]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d105      	bne.n	801168e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011682:	683a      	ldr	r2, [r7, #0]
 8011684:	4907      	ldr	r1, [pc, #28]	; (80116a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8011686:	4808      	ldr	r0, [pc, #32]	; (80116a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8011688:	f7fc f90e 	bl	800d8a8 <USBD_GetString>
 801168c:	e004      	b.n	8011698 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801168e:	683a      	ldr	r2, [r7, #0]
 8011690:	4904      	ldr	r1, [pc, #16]	; (80116a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8011692:	4805      	ldr	r0, [pc, #20]	; (80116a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8011694:	f7fc f908 	bl	800d8a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011698:	4b02      	ldr	r3, [pc, #8]	; (80116a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801169a:	4618      	mov	r0, r3
 801169c:	3708      	adds	r7, #8
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}
 80116a2:	bf00      	nop
 80116a4:	20006374 	.word	0x20006374
 80116a8:	08015000 	.word	0x08015000

080116ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b082      	sub	sp, #8
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	4603      	mov	r3, r0
 80116b4:	6039      	str	r1, [r7, #0]
 80116b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80116b8:	683a      	ldr	r2, [r7, #0]
 80116ba:	4904      	ldr	r1, [pc, #16]	; (80116cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80116bc:	4804      	ldr	r0, [pc, #16]	; (80116d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80116be:	f7fc f8f3 	bl	800d8a8 <USBD_GetString>
  return USBD_StrDesc;
 80116c2:	4b02      	ldr	r3, [pc, #8]	; (80116cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	3708      	adds	r7, #8
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}
 80116cc:	20006374 	.word	0x20006374
 80116d0:	08015018 	.word	0x08015018

080116d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b082      	sub	sp, #8
 80116d8:	af00      	add	r7, sp, #0
 80116da:	4603      	mov	r3, r0
 80116dc:	6039      	str	r1, [r7, #0]
 80116de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	221a      	movs	r2, #26
 80116e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80116e6:	f000 f855 	bl	8011794 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80116ea:	4b02      	ldr	r3, [pc, #8]	; (80116f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80116ec:	4618      	mov	r0, r3
 80116ee:	3708      	adds	r7, #8
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}
 80116f4:	20000108 	.word	0x20000108

080116f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b082      	sub	sp, #8
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	4603      	mov	r3, r0
 8011700:	6039      	str	r1, [r7, #0]
 8011702:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011704:	79fb      	ldrb	r3, [r7, #7]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d105      	bne.n	8011716 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801170a:	683a      	ldr	r2, [r7, #0]
 801170c:	4907      	ldr	r1, [pc, #28]	; (801172c <USBD_FS_ConfigStrDescriptor+0x34>)
 801170e:	4808      	ldr	r0, [pc, #32]	; (8011730 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011710:	f7fc f8ca 	bl	800d8a8 <USBD_GetString>
 8011714:	e004      	b.n	8011720 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011716:	683a      	ldr	r2, [r7, #0]
 8011718:	4904      	ldr	r1, [pc, #16]	; (801172c <USBD_FS_ConfigStrDescriptor+0x34>)
 801171a:	4805      	ldr	r0, [pc, #20]	; (8011730 <USBD_FS_ConfigStrDescriptor+0x38>)
 801171c:	f7fc f8c4 	bl	800d8a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011720:	4b02      	ldr	r3, [pc, #8]	; (801172c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011722:	4618      	mov	r0, r3
 8011724:	3708      	adds	r7, #8
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}
 801172a:	bf00      	nop
 801172c:	20006374 	.word	0x20006374
 8011730:	0801502c 	.word	0x0801502c

08011734 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b082      	sub	sp, #8
 8011738:	af00      	add	r7, sp, #0
 801173a:	4603      	mov	r3, r0
 801173c:	6039      	str	r1, [r7, #0]
 801173e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011740:	79fb      	ldrb	r3, [r7, #7]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d105      	bne.n	8011752 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011746:	683a      	ldr	r2, [r7, #0]
 8011748:	4907      	ldr	r1, [pc, #28]	; (8011768 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801174a:	4808      	ldr	r0, [pc, #32]	; (801176c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801174c:	f7fc f8ac 	bl	800d8a8 <USBD_GetString>
 8011750:	e004      	b.n	801175c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011752:	683a      	ldr	r2, [r7, #0]
 8011754:	4904      	ldr	r1, [pc, #16]	; (8011768 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011756:	4805      	ldr	r0, [pc, #20]	; (801176c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011758:	f7fc f8a6 	bl	800d8a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801175c:	4b02      	ldr	r3, [pc, #8]	; (8011768 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801175e:	4618      	mov	r0, r3
 8011760:	3708      	adds	r7, #8
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	20006374 	.word	0x20006374
 801176c:	08015038 	.word	0x08015038

08011770 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011770:	b480      	push	{r7}
 8011772:	b083      	sub	sp, #12
 8011774:	af00      	add	r7, sp, #0
 8011776:	4603      	mov	r3, r0
 8011778:	6039      	str	r1, [r7, #0]
 801177a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	220c      	movs	r2, #12
 8011780:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8011782:	4b03      	ldr	r3, [pc, #12]	; (8011790 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8011784:	4618      	mov	r0, r3
 8011786:	370c      	adds	r7, #12
 8011788:	46bd      	mov	sp, r7
 801178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178e:	4770      	bx	lr
 8011790:	200000f8 	.word	0x200000f8

08011794 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b084      	sub	sp, #16
 8011798:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801179a:	4b0f      	ldr	r3, [pc, #60]	; (80117d8 <Get_SerialNum+0x44>)
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80117a0:	4b0e      	ldr	r3, [pc, #56]	; (80117dc <Get_SerialNum+0x48>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80117a6:	4b0e      	ldr	r3, [pc, #56]	; (80117e0 <Get_SerialNum+0x4c>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80117ac:	68fa      	ldr	r2, [r7, #12]
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	4413      	add	r3, r2
 80117b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d009      	beq.n	80117ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80117ba:	2208      	movs	r2, #8
 80117bc:	4909      	ldr	r1, [pc, #36]	; (80117e4 <Get_SerialNum+0x50>)
 80117be:	68f8      	ldr	r0, [r7, #12]
 80117c0:	f000 f814 	bl	80117ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80117c4:	2204      	movs	r2, #4
 80117c6:	4908      	ldr	r1, [pc, #32]	; (80117e8 <Get_SerialNum+0x54>)
 80117c8:	68b8      	ldr	r0, [r7, #8]
 80117ca:	f000 f80f 	bl	80117ec <IntToUnicode>
  }
}
 80117ce:	bf00      	nop
 80117d0:	3710      	adds	r7, #16
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bd80      	pop	{r7, pc}
 80117d6:	bf00      	nop
 80117d8:	1fff7a10 	.word	0x1fff7a10
 80117dc:	1fff7a14 	.word	0x1fff7a14
 80117e0:	1fff7a18 	.word	0x1fff7a18
 80117e4:	2000010a 	.word	0x2000010a
 80117e8:	2000011a 	.word	0x2000011a

080117ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80117ec:	b480      	push	{r7}
 80117ee:	b087      	sub	sp, #28
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	60f8      	str	r0, [r7, #12]
 80117f4:	60b9      	str	r1, [r7, #8]
 80117f6:	4613      	mov	r3, r2
 80117f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80117fa:	2300      	movs	r3, #0
 80117fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80117fe:	2300      	movs	r3, #0
 8011800:	75fb      	strb	r3, [r7, #23]
 8011802:	e027      	b.n	8011854 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	0f1b      	lsrs	r3, r3, #28
 8011808:	2b09      	cmp	r3, #9
 801180a:	d80b      	bhi.n	8011824 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	0f1b      	lsrs	r3, r3, #28
 8011810:	b2da      	uxtb	r2, r3
 8011812:	7dfb      	ldrb	r3, [r7, #23]
 8011814:	005b      	lsls	r3, r3, #1
 8011816:	4619      	mov	r1, r3
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	440b      	add	r3, r1
 801181c:	3230      	adds	r2, #48	; 0x30
 801181e:	b2d2      	uxtb	r2, r2
 8011820:	701a      	strb	r2, [r3, #0]
 8011822:	e00a      	b.n	801183a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	0f1b      	lsrs	r3, r3, #28
 8011828:	b2da      	uxtb	r2, r3
 801182a:	7dfb      	ldrb	r3, [r7, #23]
 801182c:	005b      	lsls	r3, r3, #1
 801182e:	4619      	mov	r1, r3
 8011830:	68bb      	ldr	r3, [r7, #8]
 8011832:	440b      	add	r3, r1
 8011834:	3237      	adds	r2, #55	; 0x37
 8011836:	b2d2      	uxtb	r2, r2
 8011838:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	011b      	lsls	r3, r3, #4
 801183e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011840:	7dfb      	ldrb	r3, [r7, #23]
 8011842:	005b      	lsls	r3, r3, #1
 8011844:	3301      	adds	r3, #1
 8011846:	68ba      	ldr	r2, [r7, #8]
 8011848:	4413      	add	r3, r2
 801184a:	2200      	movs	r2, #0
 801184c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801184e:	7dfb      	ldrb	r3, [r7, #23]
 8011850:	3301      	adds	r3, #1
 8011852:	75fb      	strb	r3, [r7, #23]
 8011854:	7dfa      	ldrb	r2, [r7, #23]
 8011856:	79fb      	ldrb	r3, [r7, #7]
 8011858:	429a      	cmp	r2, r3
 801185a:	d3d3      	bcc.n	8011804 <IntToUnicode+0x18>
  }
}
 801185c:	bf00      	nop
 801185e:	bf00      	nop
 8011860:	371c      	adds	r7, #28
 8011862:	46bd      	mov	sp, r7
 8011864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011868:	4770      	bx	lr
	...

0801186c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b0a0      	sub	sp, #128	; 0x80
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011874:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011878:	2200      	movs	r2, #0
 801187a:	601a      	str	r2, [r3, #0]
 801187c:	605a      	str	r2, [r3, #4]
 801187e:	609a      	str	r2, [r3, #8]
 8011880:	60da      	str	r2, [r3, #12]
 8011882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011884:	f107 0310 	add.w	r3, r7, #16
 8011888:	225c      	movs	r2, #92	; 0x5c
 801188a:	2100      	movs	r1, #0
 801188c:	4618      	mov	r0, r3
 801188e:	f000 fc9b 	bl	80121c8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801189a:	d149      	bne.n	8011930 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 801189c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80118a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80118a2:	2300      	movs	r3, #0
 80118a4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80118a6:	f107 0310 	add.w	r3, r7, #16
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7f5 f9ac 	bl	8006c08 <HAL_RCCEx_PeriphCLKConfig>
 80118b0:	4603      	mov	r3, r0
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d001      	beq.n	80118ba <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80118b6:	f7ef fdcf 	bl	8001458 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80118ba:	2300      	movs	r3, #0
 80118bc:	60fb      	str	r3, [r7, #12]
 80118be:	4b1e      	ldr	r3, [pc, #120]	; (8011938 <HAL_PCD_MspInit+0xcc>)
 80118c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118c2:	4a1d      	ldr	r2, [pc, #116]	; (8011938 <HAL_PCD_MspInit+0xcc>)
 80118c4:	f043 0301 	orr.w	r3, r3, #1
 80118c8:	6313      	str	r3, [r2, #48]	; 0x30
 80118ca:	4b1b      	ldr	r3, [pc, #108]	; (8011938 <HAL_PCD_MspInit+0xcc>)
 80118cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118ce:	f003 0301 	and.w	r3, r3, #1
 80118d2:	60fb      	str	r3, [r7, #12]
 80118d4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80118d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80118da:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80118dc:	2302      	movs	r3, #2
 80118de:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80118e0:	2300      	movs	r3, #0
 80118e2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80118e4:	2303      	movs	r3, #3
 80118e6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80118e8:	230a      	movs	r3, #10
 80118ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80118ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80118f0:	4619      	mov	r1, r3
 80118f2:	4812      	ldr	r0, [pc, #72]	; (801193c <HAL_PCD_MspInit+0xd0>)
 80118f4:	f7f1 ff5e 	bl	80037b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80118f8:	4b0f      	ldr	r3, [pc, #60]	; (8011938 <HAL_PCD_MspInit+0xcc>)
 80118fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118fc:	4a0e      	ldr	r2, [pc, #56]	; (8011938 <HAL_PCD_MspInit+0xcc>)
 80118fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011902:	6353      	str	r3, [r2, #52]	; 0x34
 8011904:	2300      	movs	r3, #0
 8011906:	60bb      	str	r3, [r7, #8]
 8011908:	4b0b      	ldr	r3, [pc, #44]	; (8011938 <HAL_PCD_MspInit+0xcc>)
 801190a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801190c:	4a0a      	ldr	r2, [pc, #40]	; (8011938 <HAL_PCD_MspInit+0xcc>)
 801190e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011912:	6453      	str	r3, [r2, #68]	; 0x44
 8011914:	4b08      	ldr	r3, [pc, #32]	; (8011938 <HAL_PCD_MspInit+0xcc>)
 8011916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801191c:	60bb      	str	r3, [r7, #8]
 801191e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011920:	2200      	movs	r2, #0
 8011922:	2105      	movs	r1, #5
 8011924:	2043      	movs	r0, #67	; 0x43
 8011926:	f7f1 fe89 	bl	800363c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801192a:	2043      	movs	r0, #67	; 0x43
 801192c:	f7f1 fea2 	bl	8003674 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011930:	bf00      	nop
 8011932:	3780      	adds	r7, #128	; 0x80
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}
 8011938:	40023800 	.word	0x40023800
 801193c:	40020000 	.word	0x40020000

08011940 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b082      	sub	sp, #8
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011954:	4619      	mov	r1, r3
 8011956:	4610      	mov	r0, r2
 8011958:	f7fa fe1d 	bl	800c596 <USBD_LL_SetupStage>
}
 801195c:	bf00      	nop
 801195e:	3708      	adds	r7, #8
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}

08011964 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b082      	sub	sp, #8
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	460b      	mov	r3, r1
 801196e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011976:	78fa      	ldrb	r2, [r7, #3]
 8011978:	6879      	ldr	r1, [r7, #4]
 801197a:	4613      	mov	r3, r2
 801197c:	00db      	lsls	r3, r3, #3
 801197e:	4413      	add	r3, r2
 8011980:	009b      	lsls	r3, r3, #2
 8011982:	440b      	add	r3, r1
 8011984:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011988:	681a      	ldr	r2, [r3, #0]
 801198a:	78fb      	ldrb	r3, [r7, #3]
 801198c:	4619      	mov	r1, r3
 801198e:	f7fa fe57 	bl	800c640 <USBD_LL_DataOutStage>
}
 8011992:	bf00      	nop
 8011994:	3708      	adds	r7, #8
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}

0801199a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801199a:	b580      	push	{r7, lr}
 801199c:	b082      	sub	sp, #8
 801199e:	af00      	add	r7, sp, #0
 80119a0:	6078      	str	r0, [r7, #4]
 80119a2:	460b      	mov	r3, r1
 80119a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80119ac:	78fa      	ldrb	r2, [r7, #3]
 80119ae:	6879      	ldr	r1, [r7, #4]
 80119b0:	4613      	mov	r3, r2
 80119b2:	00db      	lsls	r3, r3, #3
 80119b4:	4413      	add	r3, r2
 80119b6:	009b      	lsls	r3, r3, #2
 80119b8:	440b      	add	r3, r1
 80119ba:	334c      	adds	r3, #76	; 0x4c
 80119bc:	681a      	ldr	r2, [r3, #0]
 80119be:	78fb      	ldrb	r3, [r7, #3]
 80119c0:	4619      	mov	r1, r3
 80119c2:	f7fa fef0 	bl	800c7a6 <USBD_LL_DataInStage>
}
 80119c6:	bf00      	nop
 80119c8:	3708      	adds	r7, #8
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bd80      	pop	{r7, pc}

080119ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119ce:	b580      	push	{r7, lr}
 80119d0:	b082      	sub	sp, #8
 80119d2:	af00      	add	r7, sp, #0
 80119d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80119dc:	4618      	mov	r0, r3
 80119de:	f7fb f824 	bl	800ca2a <USBD_LL_SOF>
}
 80119e2:	bf00      	nop
 80119e4:	3708      	adds	r7, #8
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}

080119ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119ea:	b580      	push	{r7, lr}
 80119ec:	b084      	sub	sp, #16
 80119ee:	af00      	add	r7, sp, #0
 80119f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80119f2:	2301      	movs	r3, #1
 80119f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	68db      	ldr	r3, [r3, #12]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d102      	bne.n	8011a04 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80119fe:	2300      	movs	r3, #0
 8011a00:	73fb      	strb	r3, [r7, #15]
 8011a02:	e008      	b.n	8011a16 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	68db      	ldr	r3, [r3, #12]
 8011a08:	2b02      	cmp	r3, #2
 8011a0a:	d102      	bne.n	8011a12 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	73fb      	strb	r3, [r7, #15]
 8011a10:	e001      	b.n	8011a16 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011a12:	f7ef fd21 	bl	8001458 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011a1c:	7bfa      	ldrb	r2, [r7, #15]
 8011a1e:	4611      	mov	r1, r2
 8011a20:	4618      	mov	r0, r3
 8011a22:	f7fa ffc4 	bl	800c9ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f7fa ff6c 	bl	800c90a <USBD_LL_Reset>
}
 8011a32:	bf00      	nop
 8011a34:	3710      	adds	r7, #16
 8011a36:	46bd      	mov	sp, r7
 8011a38:	bd80      	pop	{r7, pc}
	...

08011a3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b082      	sub	sp, #8
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f7fa ffbf 	bl	800c9ce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	687a      	ldr	r2, [r7, #4]
 8011a5c:	6812      	ldr	r2, [r2, #0]
 8011a5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011a62:	f043 0301 	orr.w	r3, r3, #1
 8011a66:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	6a1b      	ldr	r3, [r3, #32]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d005      	beq.n	8011a7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011a70:	4b04      	ldr	r3, [pc, #16]	; (8011a84 <HAL_PCD_SuspendCallback+0x48>)
 8011a72:	691b      	ldr	r3, [r3, #16]
 8011a74:	4a03      	ldr	r2, [pc, #12]	; (8011a84 <HAL_PCD_SuspendCallback+0x48>)
 8011a76:	f043 0306 	orr.w	r3, r3, #6
 8011a7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011a7c:	bf00      	nop
 8011a7e:	3708      	adds	r7, #8
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd80      	pop	{r7, pc}
 8011a84:	e000ed00 	.word	0xe000ed00

08011a88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b082      	sub	sp, #8
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011a96:	4618      	mov	r0, r3
 8011a98:	f7fa ffaf 	bl	800c9fa <USBD_LL_Resume>
}
 8011a9c:	bf00      	nop
 8011a9e:	3708      	adds	r7, #8
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}

08011aa4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b082      	sub	sp, #8
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	460b      	mov	r3, r1
 8011aae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011ab6:	78fa      	ldrb	r2, [r7, #3]
 8011ab8:	4611      	mov	r1, r2
 8011aba:	4618      	mov	r0, r3
 8011abc:	f7fb f807 	bl	800cace <USBD_LL_IsoOUTIncomplete>
}
 8011ac0:	bf00      	nop
 8011ac2:	3708      	adds	r7, #8
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}

08011ac8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b082      	sub	sp, #8
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	460b      	mov	r3, r1
 8011ad2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011ada:	78fa      	ldrb	r2, [r7, #3]
 8011adc:	4611      	mov	r1, r2
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f7fa ffc3 	bl	800ca6a <USBD_LL_IsoINIncomplete>
}
 8011ae4:	bf00      	nop
 8011ae6:	3708      	adds	r7, #8
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}

08011aec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b082      	sub	sp, #8
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7fb f819 	bl	800cb32 <USBD_LL_DevConnected>
}
 8011b00:	bf00      	nop
 8011b02:	3708      	adds	r7, #8
 8011b04:	46bd      	mov	sp, r7
 8011b06:	bd80      	pop	{r7, pc}

08011b08 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b082      	sub	sp, #8
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7fb f816 	bl	800cb48 <USBD_LL_DevDisconnected>
}
 8011b1c:	bf00      	nop
 8011b1e:	3708      	adds	r7, #8
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd80      	pop	{r7, pc}

08011b24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b082      	sub	sp, #8
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	781b      	ldrb	r3, [r3, #0]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d13c      	bne.n	8011bae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011b34:	4a20      	ldr	r2, [pc, #128]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	4a1e      	ldr	r2, [pc, #120]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b40:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011b44:	4b1c      	ldr	r3, [pc, #112]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011b4a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8011b4c:	4b1a      	ldr	r3, [pc, #104]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b4e:	2206      	movs	r2, #6
 8011b50:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011b52:	4b19      	ldr	r3, [pc, #100]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b54:	2202      	movs	r2, #2
 8011b56:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011b58:	4b17      	ldr	r3, [pc, #92]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011b5e:	4b16      	ldr	r3, [pc, #88]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b60:	2202      	movs	r2, #2
 8011b62:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011b64:	4b14      	ldr	r3, [pc, #80]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b66:	2200      	movs	r2, #0
 8011b68:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011b6a:	4b13      	ldr	r3, [pc, #76]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011b70:	4b11      	ldr	r3, [pc, #68]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b72:	2200      	movs	r2, #0
 8011b74:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011b76:	4b10      	ldr	r3, [pc, #64]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b78:	2200      	movs	r2, #0
 8011b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011b7c:	4b0e      	ldr	r3, [pc, #56]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b7e:	2200      	movs	r2, #0
 8011b80:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011b82:	480d      	ldr	r0, [pc, #52]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b84:	f7f3 fc2b 	bl	80053de <HAL_PCD_Init>
 8011b88:	4603      	mov	r3, r0
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d001      	beq.n	8011b92 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011b8e:	f7ef fc63 	bl	8001458 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011b92:	2180      	movs	r1, #128	; 0x80
 8011b94:	4808      	ldr	r0, [pc, #32]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011b96:	f7f4 feb6 	bl	8006906 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011b9a:	2240      	movs	r2, #64	; 0x40
 8011b9c:	2100      	movs	r1, #0
 8011b9e:	4806      	ldr	r0, [pc, #24]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011ba0:	f7f4 fe6a 	bl	8006878 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011ba4:	2280      	movs	r2, #128	; 0x80
 8011ba6:	2101      	movs	r1, #1
 8011ba8:	4803      	ldr	r0, [pc, #12]	; (8011bb8 <USBD_LL_Init+0x94>)
 8011baa:	f7f4 fe65 	bl	8006878 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011bae:	2300      	movs	r3, #0
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3708      	adds	r7, #8
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}
 8011bb8:	20006574 	.word	0x20006574

08011bbc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b084      	sub	sp, #16
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bc8:	2300      	movs	r3, #0
 8011bca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f7f3 fd27 	bl	8005626 <HAL_PCD_Start>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bdc:	7bfb      	ldrb	r3, [r7, #15]
 8011bde:	4618      	mov	r0, r3
 8011be0:	f000 f990 	bl	8011f04 <USBD_Get_USB_Status>
 8011be4:	4603      	mov	r3, r0
 8011be6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011be8:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bea:	4618      	mov	r0, r3
 8011bec:	3710      	adds	r7, #16
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd80      	pop	{r7, pc}

08011bf2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011bf2:	b580      	push	{r7, lr}
 8011bf4:	b084      	sub	sp, #16
 8011bf6:	af00      	add	r7, sp, #0
 8011bf8:	6078      	str	r0, [r7, #4]
 8011bfa:	4608      	mov	r0, r1
 8011bfc:	4611      	mov	r1, r2
 8011bfe:	461a      	mov	r2, r3
 8011c00:	4603      	mov	r3, r0
 8011c02:	70fb      	strb	r3, [r7, #3]
 8011c04:	460b      	mov	r3, r1
 8011c06:	70bb      	strb	r3, [r7, #2]
 8011c08:	4613      	mov	r3, r2
 8011c0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c10:	2300      	movs	r3, #0
 8011c12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011c1a:	78bb      	ldrb	r3, [r7, #2]
 8011c1c:	883a      	ldrh	r2, [r7, #0]
 8011c1e:	78f9      	ldrb	r1, [r7, #3]
 8011c20:	f7f4 fa25 	bl	800606e <HAL_PCD_EP_Open>
 8011c24:	4603      	mov	r3, r0
 8011c26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c28:	7bfb      	ldrb	r3, [r7, #15]
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f000 f96a 	bl	8011f04 <USBD_Get_USB_Status>
 8011c30:	4603      	mov	r3, r0
 8011c32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c36:	4618      	mov	r0, r3
 8011c38:	3710      	adds	r7, #16
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}

08011c3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c3e:	b580      	push	{r7, lr}
 8011c40:	b084      	sub	sp, #16
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	6078      	str	r0, [r7, #4]
 8011c46:	460b      	mov	r3, r1
 8011c48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011c58:	78fa      	ldrb	r2, [r7, #3]
 8011c5a:	4611      	mov	r1, r2
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f7f4 fa6e 	bl	800613e <HAL_PCD_EP_Close>
 8011c62:	4603      	mov	r3, r0
 8011c64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c66:	7bfb      	ldrb	r3, [r7, #15]
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f000 f94b 	bl	8011f04 <USBD_Get_USB_Status>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c72:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c74:	4618      	mov	r0, r3
 8011c76:	3710      	adds	r7, #16
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}

08011c7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b084      	sub	sp, #16
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
 8011c84:	460b      	mov	r3, r1
 8011c86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c88:	2300      	movs	r3, #0
 8011c8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011c96:	78fa      	ldrb	r2, [r7, #3]
 8011c98:	4611      	mov	r1, r2
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f7f4 fb46 	bl	800632c <HAL_PCD_EP_SetStall>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ca4:	7bfb      	ldrb	r3, [r7, #15]
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	f000 f92c 	bl	8011f04 <USBD_Get_USB_Status>
 8011cac:	4603      	mov	r3, r0
 8011cae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011cb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	3710      	adds	r7, #16
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}

08011cba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011cba:	b580      	push	{r7, lr}
 8011cbc:	b084      	sub	sp, #16
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	6078      	str	r0, [r7, #4]
 8011cc2:	460b      	mov	r3, r1
 8011cc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011cd4:	78fa      	ldrb	r2, [r7, #3]
 8011cd6:	4611      	mov	r1, r2
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7f4 fb8b 	bl	80063f4 <HAL_PCD_EP_ClrStall>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ce2:	7bfb      	ldrb	r3, [r7, #15]
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f000 f90d 	bl	8011f04 <USBD_Get_USB_Status>
 8011cea:	4603      	mov	r3, r0
 8011cec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011cee:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3710      	adds	r7, #16
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}

08011cf8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b085      	sub	sp, #20
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	460b      	mov	r3, r1
 8011d02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011d0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011d0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	da0b      	bge.n	8011d2c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011d14:	78fb      	ldrb	r3, [r7, #3]
 8011d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011d1a:	68f9      	ldr	r1, [r7, #12]
 8011d1c:	4613      	mov	r3, r2
 8011d1e:	00db      	lsls	r3, r3, #3
 8011d20:	4413      	add	r3, r2
 8011d22:	009b      	lsls	r3, r3, #2
 8011d24:	440b      	add	r3, r1
 8011d26:	333e      	adds	r3, #62	; 0x3e
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	e00b      	b.n	8011d44 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011d2c:	78fb      	ldrb	r3, [r7, #3]
 8011d2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011d32:	68f9      	ldr	r1, [r7, #12]
 8011d34:	4613      	mov	r3, r2
 8011d36:	00db      	lsls	r3, r3, #3
 8011d38:	4413      	add	r3, r2
 8011d3a:	009b      	lsls	r3, r3, #2
 8011d3c:	440b      	add	r3, r1
 8011d3e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8011d42:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011d44:	4618      	mov	r0, r3
 8011d46:	3714      	adds	r7, #20
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4e:	4770      	bx	lr

08011d50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b084      	sub	sp, #16
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
 8011d58:	460b      	mov	r3, r1
 8011d5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d60:	2300      	movs	r3, #0
 8011d62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011d6a:	78fa      	ldrb	r2, [r7, #3]
 8011d6c:	4611      	mov	r1, r2
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f7f4 f958 	bl	8006024 <HAL_PCD_SetAddress>
 8011d74:	4603      	mov	r3, r0
 8011d76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d78:	7bfb      	ldrb	r3, [r7, #15]
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f000 f8c2 	bl	8011f04 <USBD_Get_USB_Status>
 8011d80:	4603      	mov	r3, r0
 8011d82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d84:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d86:	4618      	mov	r0, r3
 8011d88:	3710      	adds	r7, #16
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}

08011d8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011d8e:	b580      	push	{r7, lr}
 8011d90:	b086      	sub	sp, #24
 8011d92:	af00      	add	r7, sp, #0
 8011d94:	60f8      	str	r0, [r7, #12]
 8011d96:	607a      	str	r2, [r7, #4]
 8011d98:	603b      	str	r3, [r7, #0]
 8011d9a:	460b      	mov	r3, r1
 8011d9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011da2:	2300      	movs	r3, #0
 8011da4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011dac:	7af9      	ldrb	r1, [r7, #11]
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	687a      	ldr	r2, [r7, #4]
 8011db2:	f7f4 fa71 	bl	8006298 <HAL_PCD_EP_Transmit>
 8011db6:	4603      	mov	r3, r0
 8011db8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011dba:	7dfb      	ldrb	r3, [r7, #23]
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f000 f8a1 	bl	8011f04 <USBD_Get_USB_Status>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011dc6:	7dbb      	ldrb	r3, [r7, #22]
}
 8011dc8:	4618      	mov	r0, r3
 8011dca:	3718      	adds	r7, #24
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}

08011dd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b086      	sub	sp, #24
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	60f8      	str	r0, [r7, #12]
 8011dd8:	607a      	str	r2, [r7, #4]
 8011dda:	603b      	str	r3, [r7, #0]
 8011ddc:	460b      	mov	r3, r1
 8011dde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011de0:	2300      	movs	r3, #0
 8011de2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011de4:	2300      	movs	r3, #0
 8011de6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011dee:	7af9      	ldrb	r1, [r7, #11]
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	687a      	ldr	r2, [r7, #4]
 8011df4:	f7f4 f9ed 	bl	80061d2 <HAL_PCD_EP_Receive>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011dfc:	7dfb      	ldrb	r3, [r7, #23]
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f000 f880 	bl	8011f04 <USBD_Get_USB_Status>
 8011e04:	4603      	mov	r3, r0
 8011e06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011e08:	7dbb      	ldrb	r3, [r7, #22]
}
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	3718      	adds	r7, #24
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}

08011e12 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011e12:	b580      	push	{r7, lr}
 8011e14:	b082      	sub	sp, #8
 8011e16:	af00      	add	r7, sp, #0
 8011e18:	6078      	str	r0, [r7, #4]
 8011e1a:	460b      	mov	r3, r1
 8011e1c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011e24:	78fa      	ldrb	r2, [r7, #3]
 8011e26:	4611      	mov	r1, r2
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f7f4 fa1d 	bl	8006268 <HAL_PCD_EP_GetRxCount>
 8011e2e:	4603      	mov	r3, r0
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	3708      	adds	r7, #8
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}

08011e38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b082      	sub	sp, #8
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
 8011e40:	460b      	mov	r3, r1
 8011e42:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011e44:	78fb      	ldrb	r3, [r7, #3]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d002      	beq.n	8011e50 <HAL_PCDEx_LPM_Callback+0x18>
 8011e4a:	2b01      	cmp	r3, #1
 8011e4c:	d01f      	beq.n	8011e8e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8011e4e:	e03b      	b.n	8011ec8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	6a1b      	ldr	r3, [r3, #32]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d007      	beq.n	8011e68 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8011e58:	f7ef ff22 	bl	8001ca0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011e5c:	4b1c      	ldr	r3, [pc, #112]	; (8011ed0 <HAL_PCDEx_LPM_Callback+0x98>)
 8011e5e:	691b      	ldr	r3, [r3, #16]
 8011e60:	4a1b      	ldr	r2, [pc, #108]	; (8011ed0 <HAL_PCDEx_LPM_Callback+0x98>)
 8011e62:	f023 0306 	bic.w	r3, r3, #6
 8011e66:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	687a      	ldr	r2, [r7, #4]
 8011e74:	6812      	ldr	r2, [r2, #0]
 8011e76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011e7a:	f023 0301 	bic.w	r3, r3, #1
 8011e7e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7fa fdb7 	bl	800c9fa <USBD_LL_Resume>
    break;
 8011e8c:	e01c      	b.n	8011ec8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	687a      	ldr	r2, [r7, #4]
 8011e9a:	6812      	ldr	r2, [r2, #0]
 8011e9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011ea0:	f043 0301 	orr.w	r3, r3, #1
 8011ea4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011eac:	4618      	mov	r0, r3
 8011eae:	f7fa fd8e 	bl	800c9ce <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	6a1b      	ldr	r3, [r3, #32]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d005      	beq.n	8011ec6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011eba:	4b05      	ldr	r3, [pc, #20]	; (8011ed0 <HAL_PCDEx_LPM_Callback+0x98>)
 8011ebc:	691b      	ldr	r3, [r3, #16]
 8011ebe:	4a04      	ldr	r2, [pc, #16]	; (8011ed0 <HAL_PCDEx_LPM_Callback+0x98>)
 8011ec0:	f043 0306 	orr.w	r3, r3, #6
 8011ec4:	6113      	str	r3, [r2, #16]
    break;
 8011ec6:	bf00      	nop
}
 8011ec8:	bf00      	nop
 8011eca:	3708      	adds	r7, #8
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bd80      	pop	{r7, pc}
 8011ed0:	e000ed00 	.word	0xe000ed00

08011ed4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b083      	sub	sp, #12
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011edc:	4b03      	ldr	r3, [pc, #12]	; (8011eec <USBD_static_malloc+0x18>)
}
 8011ede:	4618      	mov	r0, r3
 8011ee0:	370c      	adds	r7, #12
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee8:	4770      	bx	lr
 8011eea:	bf00      	nop
 8011eec:	20006a80 	.word	0x20006a80

08011ef0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011ef0:	b480      	push	{r7}
 8011ef2:	b083      	sub	sp, #12
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]

}
 8011ef8:	bf00      	nop
 8011efa:	370c      	adds	r7, #12
 8011efc:	46bd      	mov	sp, r7
 8011efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f02:	4770      	bx	lr

08011f04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011f04:	b480      	push	{r7}
 8011f06:	b085      	sub	sp, #20
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011f12:	79fb      	ldrb	r3, [r7, #7]
 8011f14:	2b03      	cmp	r3, #3
 8011f16:	d817      	bhi.n	8011f48 <USBD_Get_USB_Status+0x44>
 8011f18:	a201      	add	r2, pc, #4	; (adr r2, 8011f20 <USBD_Get_USB_Status+0x1c>)
 8011f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f1e:	bf00      	nop
 8011f20:	08011f31 	.word	0x08011f31
 8011f24:	08011f37 	.word	0x08011f37
 8011f28:	08011f3d 	.word	0x08011f3d
 8011f2c:	08011f43 	.word	0x08011f43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011f30:	2300      	movs	r3, #0
 8011f32:	73fb      	strb	r3, [r7, #15]
    break;
 8011f34:	e00b      	b.n	8011f4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011f36:	2303      	movs	r3, #3
 8011f38:	73fb      	strb	r3, [r7, #15]
    break;
 8011f3a:	e008      	b.n	8011f4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011f3c:	2301      	movs	r3, #1
 8011f3e:	73fb      	strb	r3, [r7, #15]
    break;
 8011f40:	e005      	b.n	8011f4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011f42:	2303      	movs	r3, #3
 8011f44:	73fb      	strb	r3, [r7, #15]
    break;
 8011f46:	e002      	b.n	8011f4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011f48:	2303      	movs	r3, #3
 8011f4a:	73fb      	strb	r3, [r7, #15]
    break;
 8011f4c:	bf00      	nop
  }
  return usb_status;
 8011f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f50:	4618      	mov	r0, r3
 8011f52:	3714      	adds	r7, #20
 8011f54:	46bd      	mov	sp, r7
 8011f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5a:	4770      	bx	lr

08011f5c <__errno>:
 8011f5c:	4b01      	ldr	r3, [pc, #4]	; (8011f64 <__errno+0x8>)
 8011f5e:	6818      	ldr	r0, [r3, #0]
 8011f60:	4770      	bx	lr
 8011f62:	bf00      	nop
 8011f64:	20000124 	.word	0x20000124

08011f68 <std>:
 8011f68:	2300      	movs	r3, #0
 8011f6a:	b510      	push	{r4, lr}
 8011f6c:	4604      	mov	r4, r0
 8011f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8011f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011f76:	6083      	str	r3, [r0, #8]
 8011f78:	8181      	strh	r1, [r0, #12]
 8011f7a:	6643      	str	r3, [r0, #100]	; 0x64
 8011f7c:	81c2      	strh	r2, [r0, #14]
 8011f7e:	6183      	str	r3, [r0, #24]
 8011f80:	4619      	mov	r1, r3
 8011f82:	2208      	movs	r2, #8
 8011f84:	305c      	adds	r0, #92	; 0x5c
 8011f86:	f000 f91f 	bl	80121c8 <memset>
 8011f8a:	4b05      	ldr	r3, [pc, #20]	; (8011fa0 <std+0x38>)
 8011f8c:	6263      	str	r3, [r4, #36]	; 0x24
 8011f8e:	4b05      	ldr	r3, [pc, #20]	; (8011fa4 <std+0x3c>)
 8011f90:	62a3      	str	r3, [r4, #40]	; 0x28
 8011f92:	4b05      	ldr	r3, [pc, #20]	; (8011fa8 <std+0x40>)
 8011f94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011f96:	4b05      	ldr	r3, [pc, #20]	; (8011fac <std+0x44>)
 8011f98:	6224      	str	r4, [r4, #32]
 8011f9a:	6323      	str	r3, [r4, #48]	; 0x30
 8011f9c:	bd10      	pop	{r4, pc}
 8011f9e:	bf00      	nop
 8011fa0:	08012e7d 	.word	0x08012e7d
 8011fa4:	08012e9f 	.word	0x08012e9f
 8011fa8:	08012ed7 	.word	0x08012ed7
 8011fac:	08012efb 	.word	0x08012efb

08011fb0 <_cleanup_r>:
 8011fb0:	4901      	ldr	r1, [pc, #4]	; (8011fb8 <_cleanup_r+0x8>)
 8011fb2:	f000 b8af 	b.w	8012114 <_fwalk_reent>
 8011fb6:	bf00      	nop
 8011fb8:	08013ef9 	.word	0x08013ef9

08011fbc <__sfmoreglue>:
 8011fbc:	b570      	push	{r4, r5, r6, lr}
 8011fbe:	2268      	movs	r2, #104	; 0x68
 8011fc0:	1e4d      	subs	r5, r1, #1
 8011fc2:	4355      	muls	r5, r2
 8011fc4:	460e      	mov	r6, r1
 8011fc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011fca:	f000 f971 	bl	80122b0 <_malloc_r>
 8011fce:	4604      	mov	r4, r0
 8011fd0:	b140      	cbz	r0, 8011fe4 <__sfmoreglue+0x28>
 8011fd2:	2100      	movs	r1, #0
 8011fd4:	e9c0 1600 	strd	r1, r6, [r0]
 8011fd8:	300c      	adds	r0, #12
 8011fda:	60a0      	str	r0, [r4, #8]
 8011fdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011fe0:	f000 f8f2 	bl	80121c8 <memset>
 8011fe4:	4620      	mov	r0, r4
 8011fe6:	bd70      	pop	{r4, r5, r6, pc}

08011fe8 <__sfp_lock_acquire>:
 8011fe8:	4801      	ldr	r0, [pc, #4]	; (8011ff0 <__sfp_lock_acquire+0x8>)
 8011fea:	f7f0 bf6f 	b.w	8002ecc <__retarget_lock_acquire_recursive>
 8011fee:	bf00      	nop
 8011ff0:	20000648 	.word	0x20000648

08011ff4 <__sfp_lock_release>:
 8011ff4:	4801      	ldr	r0, [pc, #4]	; (8011ffc <__sfp_lock_release+0x8>)
 8011ff6:	f7f0 bf7d 	b.w	8002ef4 <__retarget_lock_release_recursive>
 8011ffa:	bf00      	nop
 8011ffc:	20000648 	.word	0x20000648

08012000 <__sinit_lock_acquire>:
 8012000:	4801      	ldr	r0, [pc, #4]	; (8012008 <__sinit_lock_acquire+0x8>)
 8012002:	f7f0 bf63 	b.w	8002ecc <__retarget_lock_acquire_recursive>
 8012006:	bf00      	nop
 8012008:	2000063c 	.word	0x2000063c

0801200c <__sinit_lock_release>:
 801200c:	4801      	ldr	r0, [pc, #4]	; (8012014 <__sinit_lock_release+0x8>)
 801200e:	f7f0 bf71 	b.w	8002ef4 <__retarget_lock_release_recursive>
 8012012:	bf00      	nop
 8012014:	2000063c 	.word	0x2000063c

08012018 <__sinit>:
 8012018:	b510      	push	{r4, lr}
 801201a:	4604      	mov	r4, r0
 801201c:	f7ff fff0 	bl	8012000 <__sinit_lock_acquire>
 8012020:	69a3      	ldr	r3, [r4, #24]
 8012022:	b11b      	cbz	r3, 801202c <__sinit+0x14>
 8012024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012028:	f7ff bff0 	b.w	801200c <__sinit_lock_release>
 801202c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012030:	6523      	str	r3, [r4, #80]	; 0x50
 8012032:	4b13      	ldr	r3, [pc, #76]	; (8012080 <__sinit+0x68>)
 8012034:	4a13      	ldr	r2, [pc, #76]	; (8012084 <__sinit+0x6c>)
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	62a2      	str	r2, [r4, #40]	; 0x28
 801203a:	42a3      	cmp	r3, r4
 801203c:	bf04      	itt	eq
 801203e:	2301      	moveq	r3, #1
 8012040:	61a3      	streq	r3, [r4, #24]
 8012042:	4620      	mov	r0, r4
 8012044:	f000 f820 	bl	8012088 <__sfp>
 8012048:	6060      	str	r0, [r4, #4]
 801204a:	4620      	mov	r0, r4
 801204c:	f000 f81c 	bl	8012088 <__sfp>
 8012050:	60a0      	str	r0, [r4, #8]
 8012052:	4620      	mov	r0, r4
 8012054:	f000 f818 	bl	8012088 <__sfp>
 8012058:	2200      	movs	r2, #0
 801205a:	60e0      	str	r0, [r4, #12]
 801205c:	2104      	movs	r1, #4
 801205e:	6860      	ldr	r0, [r4, #4]
 8012060:	f7ff ff82 	bl	8011f68 <std>
 8012064:	68a0      	ldr	r0, [r4, #8]
 8012066:	2201      	movs	r2, #1
 8012068:	2109      	movs	r1, #9
 801206a:	f7ff ff7d 	bl	8011f68 <std>
 801206e:	68e0      	ldr	r0, [r4, #12]
 8012070:	2202      	movs	r2, #2
 8012072:	2112      	movs	r1, #18
 8012074:	f7ff ff78 	bl	8011f68 <std>
 8012078:	2301      	movs	r3, #1
 801207a:	61a3      	str	r3, [r4, #24]
 801207c:	e7d2      	b.n	8012024 <__sinit+0xc>
 801207e:	bf00      	nop
 8012080:	080151d4 	.word	0x080151d4
 8012084:	08011fb1 	.word	0x08011fb1

08012088 <__sfp>:
 8012088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801208a:	4607      	mov	r7, r0
 801208c:	f7ff ffac 	bl	8011fe8 <__sfp_lock_acquire>
 8012090:	4b1e      	ldr	r3, [pc, #120]	; (801210c <__sfp+0x84>)
 8012092:	681e      	ldr	r6, [r3, #0]
 8012094:	69b3      	ldr	r3, [r6, #24]
 8012096:	b913      	cbnz	r3, 801209e <__sfp+0x16>
 8012098:	4630      	mov	r0, r6
 801209a:	f7ff ffbd 	bl	8012018 <__sinit>
 801209e:	3648      	adds	r6, #72	; 0x48
 80120a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80120a4:	3b01      	subs	r3, #1
 80120a6:	d503      	bpl.n	80120b0 <__sfp+0x28>
 80120a8:	6833      	ldr	r3, [r6, #0]
 80120aa:	b30b      	cbz	r3, 80120f0 <__sfp+0x68>
 80120ac:	6836      	ldr	r6, [r6, #0]
 80120ae:	e7f7      	b.n	80120a0 <__sfp+0x18>
 80120b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80120b4:	b9d5      	cbnz	r5, 80120ec <__sfp+0x64>
 80120b6:	4b16      	ldr	r3, [pc, #88]	; (8012110 <__sfp+0x88>)
 80120b8:	60e3      	str	r3, [r4, #12]
 80120ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80120be:	6665      	str	r5, [r4, #100]	; 0x64
 80120c0:	f7f0 fede 	bl	8002e80 <__retarget_lock_init_recursive>
 80120c4:	f7ff ff96 	bl	8011ff4 <__sfp_lock_release>
 80120c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80120cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80120d0:	6025      	str	r5, [r4, #0]
 80120d2:	61a5      	str	r5, [r4, #24]
 80120d4:	2208      	movs	r2, #8
 80120d6:	4629      	mov	r1, r5
 80120d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80120dc:	f000 f874 	bl	80121c8 <memset>
 80120e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80120e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80120e8:	4620      	mov	r0, r4
 80120ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120ec:	3468      	adds	r4, #104	; 0x68
 80120ee:	e7d9      	b.n	80120a4 <__sfp+0x1c>
 80120f0:	2104      	movs	r1, #4
 80120f2:	4638      	mov	r0, r7
 80120f4:	f7ff ff62 	bl	8011fbc <__sfmoreglue>
 80120f8:	4604      	mov	r4, r0
 80120fa:	6030      	str	r0, [r6, #0]
 80120fc:	2800      	cmp	r0, #0
 80120fe:	d1d5      	bne.n	80120ac <__sfp+0x24>
 8012100:	f7ff ff78 	bl	8011ff4 <__sfp_lock_release>
 8012104:	230c      	movs	r3, #12
 8012106:	603b      	str	r3, [r7, #0]
 8012108:	e7ee      	b.n	80120e8 <__sfp+0x60>
 801210a:	bf00      	nop
 801210c:	080151d4 	.word	0x080151d4
 8012110:	ffff0001 	.word	0xffff0001

08012114 <_fwalk_reent>:
 8012114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012118:	4606      	mov	r6, r0
 801211a:	4688      	mov	r8, r1
 801211c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012120:	2700      	movs	r7, #0
 8012122:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012126:	f1b9 0901 	subs.w	r9, r9, #1
 801212a:	d505      	bpl.n	8012138 <_fwalk_reent+0x24>
 801212c:	6824      	ldr	r4, [r4, #0]
 801212e:	2c00      	cmp	r4, #0
 8012130:	d1f7      	bne.n	8012122 <_fwalk_reent+0xe>
 8012132:	4638      	mov	r0, r7
 8012134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012138:	89ab      	ldrh	r3, [r5, #12]
 801213a:	2b01      	cmp	r3, #1
 801213c:	d907      	bls.n	801214e <_fwalk_reent+0x3a>
 801213e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012142:	3301      	adds	r3, #1
 8012144:	d003      	beq.n	801214e <_fwalk_reent+0x3a>
 8012146:	4629      	mov	r1, r5
 8012148:	4630      	mov	r0, r6
 801214a:	47c0      	blx	r8
 801214c:	4307      	orrs	r7, r0
 801214e:	3568      	adds	r5, #104	; 0x68
 8012150:	e7e9      	b.n	8012126 <_fwalk_reent+0x12>
	...

08012154 <__libc_init_array>:
 8012154:	b570      	push	{r4, r5, r6, lr}
 8012156:	4d0d      	ldr	r5, [pc, #52]	; (801218c <__libc_init_array+0x38>)
 8012158:	4c0d      	ldr	r4, [pc, #52]	; (8012190 <__libc_init_array+0x3c>)
 801215a:	1b64      	subs	r4, r4, r5
 801215c:	10a4      	asrs	r4, r4, #2
 801215e:	2600      	movs	r6, #0
 8012160:	42a6      	cmp	r6, r4
 8012162:	d109      	bne.n	8012178 <__libc_init_array+0x24>
 8012164:	4d0b      	ldr	r5, [pc, #44]	; (8012194 <__libc_init_array+0x40>)
 8012166:	4c0c      	ldr	r4, [pc, #48]	; (8012198 <__libc_init_array+0x44>)
 8012168:	f002 fd4c 	bl	8014c04 <_init>
 801216c:	1b64      	subs	r4, r4, r5
 801216e:	10a4      	asrs	r4, r4, #2
 8012170:	2600      	movs	r6, #0
 8012172:	42a6      	cmp	r6, r4
 8012174:	d105      	bne.n	8012182 <__libc_init_array+0x2e>
 8012176:	bd70      	pop	{r4, r5, r6, pc}
 8012178:	f855 3b04 	ldr.w	r3, [r5], #4
 801217c:	4798      	blx	r3
 801217e:	3601      	adds	r6, #1
 8012180:	e7ee      	b.n	8012160 <__libc_init_array+0xc>
 8012182:	f855 3b04 	ldr.w	r3, [r5], #4
 8012186:	4798      	blx	r3
 8012188:	3601      	adds	r6, #1
 801218a:	e7f2      	b.n	8012172 <__libc_init_array+0x1e>
 801218c:	08015554 	.word	0x08015554
 8012190:	08015554 	.word	0x08015554
 8012194:	08015554 	.word	0x08015554
 8012198:	08015558 	.word	0x08015558

0801219c <malloc>:
 801219c:	4b02      	ldr	r3, [pc, #8]	; (80121a8 <malloc+0xc>)
 801219e:	4601      	mov	r1, r0
 80121a0:	6818      	ldr	r0, [r3, #0]
 80121a2:	f000 b885 	b.w	80122b0 <_malloc_r>
 80121a6:	bf00      	nop
 80121a8:	20000124 	.word	0x20000124

080121ac <memcpy>:
 80121ac:	440a      	add	r2, r1
 80121ae:	4291      	cmp	r1, r2
 80121b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80121b4:	d100      	bne.n	80121b8 <memcpy+0xc>
 80121b6:	4770      	bx	lr
 80121b8:	b510      	push	{r4, lr}
 80121ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80121be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80121c2:	4291      	cmp	r1, r2
 80121c4:	d1f9      	bne.n	80121ba <memcpy+0xe>
 80121c6:	bd10      	pop	{r4, pc}

080121c8 <memset>:
 80121c8:	4402      	add	r2, r0
 80121ca:	4603      	mov	r3, r0
 80121cc:	4293      	cmp	r3, r2
 80121ce:	d100      	bne.n	80121d2 <memset+0xa>
 80121d0:	4770      	bx	lr
 80121d2:	f803 1b01 	strb.w	r1, [r3], #1
 80121d6:	e7f9      	b.n	80121cc <memset+0x4>

080121d8 <_free_r>:
 80121d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80121da:	2900      	cmp	r1, #0
 80121dc:	d044      	beq.n	8012268 <_free_r+0x90>
 80121de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80121e2:	9001      	str	r0, [sp, #4]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	f1a1 0404 	sub.w	r4, r1, #4
 80121ea:	bfb8      	it	lt
 80121ec:	18e4      	addlt	r4, r4, r3
 80121ee:	f001 ff3b 	bl	8014068 <__malloc_lock>
 80121f2:	4a1e      	ldr	r2, [pc, #120]	; (801226c <_free_r+0x94>)
 80121f4:	9801      	ldr	r0, [sp, #4]
 80121f6:	6813      	ldr	r3, [r2, #0]
 80121f8:	b933      	cbnz	r3, 8012208 <_free_r+0x30>
 80121fa:	6063      	str	r3, [r4, #4]
 80121fc:	6014      	str	r4, [r2, #0]
 80121fe:	b003      	add	sp, #12
 8012200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012204:	f001 bf36 	b.w	8014074 <__malloc_unlock>
 8012208:	42a3      	cmp	r3, r4
 801220a:	d908      	bls.n	801221e <_free_r+0x46>
 801220c:	6825      	ldr	r5, [r4, #0]
 801220e:	1961      	adds	r1, r4, r5
 8012210:	428b      	cmp	r3, r1
 8012212:	bf01      	itttt	eq
 8012214:	6819      	ldreq	r1, [r3, #0]
 8012216:	685b      	ldreq	r3, [r3, #4]
 8012218:	1949      	addeq	r1, r1, r5
 801221a:	6021      	streq	r1, [r4, #0]
 801221c:	e7ed      	b.n	80121fa <_free_r+0x22>
 801221e:	461a      	mov	r2, r3
 8012220:	685b      	ldr	r3, [r3, #4]
 8012222:	b10b      	cbz	r3, 8012228 <_free_r+0x50>
 8012224:	42a3      	cmp	r3, r4
 8012226:	d9fa      	bls.n	801221e <_free_r+0x46>
 8012228:	6811      	ldr	r1, [r2, #0]
 801222a:	1855      	adds	r5, r2, r1
 801222c:	42a5      	cmp	r5, r4
 801222e:	d10b      	bne.n	8012248 <_free_r+0x70>
 8012230:	6824      	ldr	r4, [r4, #0]
 8012232:	4421      	add	r1, r4
 8012234:	1854      	adds	r4, r2, r1
 8012236:	42a3      	cmp	r3, r4
 8012238:	6011      	str	r1, [r2, #0]
 801223a:	d1e0      	bne.n	80121fe <_free_r+0x26>
 801223c:	681c      	ldr	r4, [r3, #0]
 801223e:	685b      	ldr	r3, [r3, #4]
 8012240:	6053      	str	r3, [r2, #4]
 8012242:	4421      	add	r1, r4
 8012244:	6011      	str	r1, [r2, #0]
 8012246:	e7da      	b.n	80121fe <_free_r+0x26>
 8012248:	d902      	bls.n	8012250 <_free_r+0x78>
 801224a:	230c      	movs	r3, #12
 801224c:	6003      	str	r3, [r0, #0]
 801224e:	e7d6      	b.n	80121fe <_free_r+0x26>
 8012250:	6825      	ldr	r5, [r4, #0]
 8012252:	1961      	adds	r1, r4, r5
 8012254:	428b      	cmp	r3, r1
 8012256:	bf04      	itt	eq
 8012258:	6819      	ldreq	r1, [r3, #0]
 801225a:	685b      	ldreq	r3, [r3, #4]
 801225c:	6063      	str	r3, [r4, #4]
 801225e:	bf04      	itt	eq
 8012260:	1949      	addeq	r1, r1, r5
 8012262:	6021      	streq	r1, [r4, #0]
 8012264:	6054      	str	r4, [r2, #4]
 8012266:	e7ca      	b.n	80121fe <_free_r+0x26>
 8012268:	b003      	add	sp, #12
 801226a:	bd30      	pop	{r4, r5, pc}
 801226c:	20006ca0 	.word	0x20006ca0

08012270 <sbrk_aligned>:
 8012270:	b570      	push	{r4, r5, r6, lr}
 8012272:	4e0e      	ldr	r6, [pc, #56]	; (80122ac <sbrk_aligned+0x3c>)
 8012274:	460c      	mov	r4, r1
 8012276:	6831      	ldr	r1, [r6, #0]
 8012278:	4605      	mov	r5, r0
 801227a:	b911      	cbnz	r1, 8012282 <sbrk_aligned+0x12>
 801227c:	f000 fdee 	bl	8012e5c <_sbrk_r>
 8012280:	6030      	str	r0, [r6, #0]
 8012282:	4621      	mov	r1, r4
 8012284:	4628      	mov	r0, r5
 8012286:	f000 fde9 	bl	8012e5c <_sbrk_r>
 801228a:	1c43      	adds	r3, r0, #1
 801228c:	d00a      	beq.n	80122a4 <sbrk_aligned+0x34>
 801228e:	1cc4      	adds	r4, r0, #3
 8012290:	f024 0403 	bic.w	r4, r4, #3
 8012294:	42a0      	cmp	r0, r4
 8012296:	d007      	beq.n	80122a8 <sbrk_aligned+0x38>
 8012298:	1a21      	subs	r1, r4, r0
 801229a:	4628      	mov	r0, r5
 801229c:	f000 fdde 	bl	8012e5c <_sbrk_r>
 80122a0:	3001      	adds	r0, #1
 80122a2:	d101      	bne.n	80122a8 <sbrk_aligned+0x38>
 80122a4:	f04f 34ff 	mov.w	r4, #4294967295
 80122a8:	4620      	mov	r0, r4
 80122aa:	bd70      	pop	{r4, r5, r6, pc}
 80122ac:	20006ca4 	.word	0x20006ca4

080122b0 <_malloc_r>:
 80122b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122b4:	1ccd      	adds	r5, r1, #3
 80122b6:	f025 0503 	bic.w	r5, r5, #3
 80122ba:	3508      	adds	r5, #8
 80122bc:	2d0c      	cmp	r5, #12
 80122be:	bf38      	it	cc
 80122c0:	250c      	movcc	r5, #12
 80122c2:	2d00      	cmp	r5, #0
 80122c4:	4607      	mov	r7, r0
 80122c6:	db01      	blt.n	80122cc <_malloc_r+0x1c>
 80122c8:	42a9      	cmp	r1, r5
 80122ca:	d905      	bls.n	80122d8 <_malloc_r+0x28>
 80122cc:	230c      	movs	r3, #12
 80122ce:	603b      	str	r3, [r7, #0]
 80122d0:	2600      	movs	r6, #0
 80122d2:	4630      	mov	r0, r6
 80122d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122d8:	4e2e      	ldr	r6, [pc, #184]	; (8012394 <_malloc_r+0xe4>)
 80122da:	f001 fec5 	bl	8014068 <__malloc_lock>
 80122de:	6833      	ldr	r3, [r6, #0]
 80122e0:	461c      	mov	r4, r3
 80122e2:	bb34      	cbnz	r4, 8012332 <_malloc_r+0x82>
 80122e4:	4629      	mov	r1, r5
 80122e6:	4638      	mov	r0, r7
 80122e8:	f7ff ffc2 	bl	8012270 <sbrk_aligned>
 80122ec:	1c43      	adds	r3, r0, #1
 80122ee:	4604      	mov	r4, r0
 80122f0:	d14d      	bne.n	801238e <_malloc_r+0xde>
 80122f2:	6834      	ldr	r4, [r6, #0]
 80122f4:	4626      	mov	r6, r4
 80122f6:	2e00      	cmp	r6, #0
 80122f8:	d140      	bne.n	801237c <_malloc_r+0xcc>
 80122fa:	6823      	ldr	r3, [r4, #0]
 80122fc:	4631      	mov	r1, r6
 80122fe:	4638      	mov	r0, r7
 8012300:	eb04 0803 	add.w	r8, r4, r3
 8012304:	f000 fdaa 	bl	8012e5c <_sbrk_r>
 8012308:	4580      	cmp	r8, r0
 801230a:	d13a      	bne.n	8012382 <_malloc_r+0xd2>
 801230c:	6821      	ldr	r1, [r4, #0]
 801230e:	3503      	adds	r5, #3
 8012310:	1a6d      	subs	r5, r5, r1
 8012312:	f025 0503 	bic.w	r5, r5, #3
 8012316:	3508      	adds	r5, #8
 8012318:	2d0c      	cmp	r5, #12
 801231a:	bf38      	it	cc
 801231c:	250c      	movcc	r5, #12
 801231e:	4629      	mov	r1, r5
 8012320:	4638      	mov	r0, r7
 8012322:	f7ff ffa5 	bl	8012270 <sbrk_aligned>
 8012326:	3001      	adds	r0, #1
 8012328:	d02b      	beq.n	8012382 <_malloc_r+0xd2>
 801232a:	6823      	ldr	r3, [r4, #0]
 801232c:	442b      	add	r3, r5
 801232e:	6023      	str	r3, [r4, #0]
 8012330:	e00e      	b.n	8012350 <_malloc_r+0xa0>
 8012332:	6822      	ldr	r2, [r4, #0]
 8012334:	1b52      	subs	r2, r2, r5
 8012336:	d41e      	bmi.n	8012376 <_malloc_r+0xc6>
 8012338:	2a0b      	cmp	r2, #11
 801233a:	d916      	bls.n	801236a <_malloc_r+0xba>
 801233c:	1961      	adds	r1, r4, r5
 801233e:	42a3      	cmp	r3, r4
 8012340:	6025      	str	r5, [r4, #0]
 8012342:	bf18      	it	ne
 8012344:	6059      	strne	r1, [r3, #4]
 8012346:	6863      	ldr	r3, [r4, #4]
 8012348:	bf08      	it	eq
 801234a:	6031      	streq	r1, [r6, #0]
 801234c:	5162      	str	r2, [r4, r5]
 801234e:	604b      	str	r3, [r1, #4]
 8012350:	4638      	mov	r0, r7
 8012352:	f104 060b 	add.w	r6, r4, #11
 8012356:	f001 fe8d 	bl	8014074 <__malloc_unlock>
 801235a:	f026 0607 	bic.w	r6, r6, #7
 801235e:	1d23      	adds	r3, r4, #4
 8012360:	1af2      	subs	r2, r6, r3
 8012362:	d0b6      	beq.n	80122d2 <_malloc_r+0x22>
 8012364:	1b9b      	subs	r3, r3, r6
 8012366:	50a3      	str	r3, [r4, r2]
 8012368:	e7b3      	b.n	80122d2 <_malloc_r+0x22>
 801236a:	6862      	ldr	r2, [r4, #4]
 801236c:	42a3      	cmp	r3, r4
 801236e:	bf0c      	ite	eq
 8012370:	6032      	streq	r2, [r6, #0]
 8012372:	605a      	strne	r2, [r3, #4]
 8012374:	e7ec      	b.n	8012350 <_malloc_r+0xa0>
 8012376:	4623      	mov	r3, r4
 8012378:	6864      	ldr	r4, [r4, #4]
 801237a:	e7b2      	b.n	80122e2 <_malloc_r+0x32>
 801237c:	4634      	mov	r4, r6
 801237e:	6876      	ldr	r6, [r6, #4]
 8012380:	e7b9      	b.n	80122f6 <_malloc_r+0x46>
 8012382:	230c      	movs	r3, #12
 8012384:	603b      	str	r3, [r7, #0]
 8012386:	4638      	mov	r0, r7
 8012388:	f001 fe74 	bl	8014074 <__malloc_unlock>
 801238c:	e7a1      	b.n	80122d2 <_malloc_r+0x22>
 801238e:	6025      	str	r5, [r4, #0]
 8012390:	e7de      	b.n	8012350 <_malloc_r+0xa0>
 8012392:	bf00      	nop
 8012394:	20006ca0 	.word	0x20006ca0

08012398 <__cvt>:
 8012398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801239c:	ec55 4b10 	vmov	r4, r5, d0
 80123a0:	2d00      	cmp	r5, #0
 80123a2:	460e      	mov	r6, r1
 80123a4:	4619      	mov	r1, r3
 80123a6:	462b      	mov	r3, r5
 80123a8:	bfbb      	ittet	lt
 80123aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80123ae:	461d      	movlt	r5, r3
 80123b0:	2300      	movge	r3, #0
 80123b2:	232d      	movlt	r3, #45	; 0x2d
 80123b4:	700b      	strb	r3, [r1, #0]
 80123b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80123b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80123bc:	4691      	mov	r9, r2
 80123be:	f023 0820 	bic.w	r8, r3, #32
 80123c2:	bfbc      	itt	lt
 80123c4:	4622      	movlt	r2, r4
 80123c6:	4614      	movlt	r4, r2
 80123c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80123cc:	d005      	beq.n	80123da <__cvt+0x42>
 80123ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80123d2:	d100      	bne.n	80123d6 <__cvt+0x3e>
 80123d4:	3601      	adds	r6, #1
 80123d6:	2102      	movs	r1, #2
 80123d8:	e000      	b.n	80123dc <__cvt+0x44>
 80123da:	2103      	movs	r1, #3
 80123dc:	ab03      	add	r3, sp, #12
 80123de:	9301      	str	r3, [sp, #4]
 80123e0:	ab02      	add	r3, sp, #8
 80123e2:	9300      	str	r3, [sp, #0]
 80123e4:	ec45 4b10 	vmov	d0, r4, r5
 80123e8:	4653      	mov	r3, sl
 80123ea:	4632      	mov	r2, r6
 80123ec:	f000 ff10 	bl	8013210 <_dtoa_r>
 80123f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80123f4:	4607      	mov	r7, r0
 80123f6:	d102      	bne.n	80123fe <__cvt+0x66>
 80123f8:	f019 0f01 	tst.w	r9, #1
 80123fc:	d022      	beq.n	8012444 <__cvt+0xac>
 80123fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012402:	eb07 0906 	add.w	r9, r7, r6
 8012406:	d110      	bne.n	801242a <__cvt+0x92>
 8012408:	783b      	ldrb	r3, [r7, #0]
 801240a:	2b30      	cmp	r3, #48	; 0x30
 801240c:	d10a      	bne.n	8012424 <__cvt+0x8c>
 801240e:	2200      	movs	r2, #0
 8012410:	2300      	movs	r3, #0
 8012412:	4620      	mov	r0, r4
 8012414:	4629      	mov	r1, r5
 8012416:	f7ee fb77 	bl	8000b08 <__aeabi_dcmpeq>
 801241a:	b918      	cbnz	r0, 8012424 <__cvt+0x8c>
 801241c:	f1c6 0601 	rsb	r6, r6, #1
 8012420:	f8ca 6000 	str.w	r6, [sl]
 8012424:	f8da 3000 	ldr.w	r3, [sl]
 8012428:	4499      	add	r9, r3
 801242a:	2200      	movs	r2, #0
 801242c:	2300      	movs	r3, #0
 801242e:	4620      	mov	r0, r4
 8012430:	4629      	mov	r1, r5
 8012432:	f7ee fb69 	bl	8000b08 <__aeabi_dcmpeq>
 8012436:	b108      	cbz	r0, 801243c <__cvt+0xa4>
 8012438:	f8cd 900c 	str.w	r9, [sp, #12]
 801243c:	2230      	movs	r2, #48	; 0x30
 801243e:	9b03      	ldr	r3, [sp, #12]
 8012440:	454b      	cmp	r3, r9
 8012442:	d307      	bcc.n	8012454 <__cvt+0xbc>
 8012444:	9b03      	ldr	r3, [sp, #12]
 8012446:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012448:	1bdb      	subs	r3, r3, r7
 801244a:	4638      	mov	r0, r7
 801244c:	6013      	str	r3, [r2, #0]
 801244e:	b004      	add	sp, #16
 8012450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012454:	1c59      	adds	r1, r3, #1
 8012456:	9103      	str	r1, [sp, #12]
 8012458:	701a      	strb	r2, [r3, #0]
 801245a:	e7f0      	b.n	801243e <__cvt+0xa6>

0801245c <__exponent>:
 801245c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801245e:	4603      	mov	r3, r0
 8012460:	2900      	cmp	r1, #0
 8012462:	bfb8      	it	lt
 8012464:	4249      	neglt	r1, r1
 8012466:	f803 2b02 	strb.w	r2, [r3], #2
 801246a:	bfb4      	ite	lt
 801246c:	222d      	movlt	r2, #45	; 0x2d
 801246e:	222b      	movge	r2, #43	; 0x2b
 8012470:	2909      	cmp	r1, #9
 8012472:	7042      	strb	r2, [r0, #1]
 8012474:	dd2a      	ble.n	80124cc <__exponent+0x70>
 8012476:	f10d 0407 	add.w	r4, sp, #7
 801247a:	46a4      	mov	ip, r4
 801247c:	270a      	movs	r7, #10
 801247e:	46a6      	mov	lr, r4
 8012480:	460a      	mov	r2, r1
 8012482:	fb91 f6f7 	sdiv	r6, r1, r7
 8012486:	fb07 1516 	mls	r5, r7, r6, r1
 801248a:	3530      	adds	r5, #48	; 0x30
 801248c:	2a63      	cmp	r2, #99	; 0x63
 801248e:	f104 34ff 	add.w	r4, r4, #4294967295
 8012492:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012496:	4631      	mov	r1, r6
 8012498:	dcf1      	bgt.n	801247e <__exponent+0x22>
 801249a:	3130      	adds	r1, #48	; 0x30
 801249c:	f1ae 0502 	sub.w	r5, lr, #2
 80124a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80124a4:	1c44      	adds	r4, r0, #1
 80124a6:	4629      	mov	r1, r5
 80124a8:	4561      	cmp	r1, ip
 80124aa:	d30a      	bcc.n	80124c2 <__exponent+0x66>
 80124ac:	f10d 0209 	add.w	r2, sp, #9
 80124b0:	eba2 020e 	sub.w	r2, r2, lr
 80124b4:	4565      	cmp	r5, ip
 80124b6:	bf88      	it	hi
 80124b8:	2200      	movhi	r2, #0
 80124ba:	4413      	add	r3, r2
 80124bc:	1a18      	subs	r0, r3, r0
 80124be:	b003      	add	sp, #12
 80124c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80124c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80124ca:	e7ed      	b.n	80124a8 <__exponent+0x4c>
 80124cc:	2330      	movs	r3, #48	; 0x30
 80124ce:	3130      	adds	r1, #48	; 0x30
 80124d0:	7083      	strb	r3, [r0, #2]
 80124d2:	70c1      	strb	r1, [r0, #3]
 80124d4:	1d03      	adds	r3, r0, #4
 80124d6:	e7f1      	b.n	80124bc <__exponent+0x60>

080124d8 <_printf_float>:
 80124d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124dc:	ed2d 8b02 	vpush	{d8}
 80124e0:	b08d      	sub	sp, #52	; 0x34
 80124e2:	460c      	mov	r4, r1
 80124e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80124e8:	4616      	mov	r6, r2
 80124ea:	461f      	mov	r7, r3
 80124ec:	4605      	mov	r5, r0
 80124ee:	f001 fd3f 	bl	8013f70 <_localeconv_r>
 80124f2:	f8d0 a000 	ldr.w	sl, [r0]
 80124f6:	4650      	mov	r0, sl
 80124f8:	f7ed fe8a 	bl	8000210 <strlen>
 80124fc:	2300      	movs	r3, #0
 80124fe:	930a      	str	r3, [sp, #40]	; 0x28
 8012500:	6823      	ldr	r3, [r4, #0]
 8012502:	9305      	str	r3, [sp, #20]
 8012504:	f8d8 3000 	ldr.w	r3, [r8]
 8012508:	f894 b018 	ldrb.w	fp, [r4, #24]
 801250c:	3307      	adds	r3, #7
 801250e:	f023 0307 	bic.w	r3, r3, #7
 8012512:	f103 0208 	add.w	r2, r3, #8
 8012516:	f8c8 2000 	str.w	r2, [r8]
 801251a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801251e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012522:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012526:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801252a:	9307      	str	r3, [sp, #28]
 801252c:	f8cd 8018 	str.w	r8, [sp, #24]
 8012530:	ee08 0a10 	vmov	s16, r0
 8012534:	4b9f      	ldr	r3, [pc, #636]	; (80127b4 <_printf_float+0x2dc>)
 8012536:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801253a:	f04f 32ff 	mov.w	r2, #4294967295
 801253e:	f7ee fb15 	bl	8000b6c <__aeabi_dcmpun>
 8012542:	bb88      	cbnz	r0, 80125a8 <_printf_float+0xd0>
 8012544:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012548:	4b9a      	ldr	r3, [pc, #616]	; (80127b4 <_printf_float+0x2dc>)
 801254a:	f04f 32ff 	mov.w	r2, #4294967295
 801254e:	f7ee faef 	bl	8000b30 <__aeabi_dcmple>
 8012552:	bb48      	cbnz	r0, 80125a8 <_printf_float+0xd0>
 8012554:	2200      	movs	r2, #0
 8012556:	2300      	movs	r3, #0
 8012558:	4640      	mov	r0, r8
 801255a:	4649      	mov	r1, r9
 801255c:	f7ee fade 	bl	8000b1c <__aeabi_dcmplt>
 8012560:	b110      	cbz	r0, 8012568 <_printf_float+0x90>
 8012562:	232d      	movs	r3, #45	; 0x2d
 8012564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012568:	4b93      	ldr	r3, [pc, #588]	; (80127b8 <_printf_float+0x2e0>)
 801256a:	4894      	ldr	r0, [pc, #592]	; (80127bc <_printf_float+0x2e4>)
 801256c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012570:	bf94      	ite	ls
 8012572:	4698      	movls	r8, r3
 8012574:	4680      	movhi	r8, r0
 8012576:	2303      	movs	r3, #3
 8012578:	6123      	str	r3, [r4, #16]
 801257a:	9b05      	ldr	r3, [sp, #20]
 801257c:	f023 0204 	bic.w	r2, r3, #4
 8012580:	6022      	str	r2, [r4, #0]
 8012582:	f04f 0900 	mov.w	r9, #0
 8012586:	9700      	str	r7, [sp, #0]
 8012588:	4633      	mov	r3, r6
 801258a:	aa0b      	add	r2, sp, #44	; 0x2c
 801258c:	4621      	mov	r1, r4
 801258e:	4628      	mov	r0, r5
 8012590:	f000 f9d8 	bl	8012944 <_printf_common>
 8012594:	3001      	adds	r0, #1
 8012596:	f040 8090 	bne.w	80126ba <_printf_float+0x1e2>
 801259a:	f04f 30ff 	mov.w	r0, #4294967295
 801259e:	b00d      	add	sp, #52	; 0x34
 80125a0:	ecbd 8b02 	vpop	{d8}
 80125a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125a8:	4642      	mov	r2, r8
 80125aa:	464b      	mov	r3, r9
 80125ac:	4640      	mov	r0, r8
 80125ae:	4649      	mov	r1, r9
 80125b0:	f7ee fadc 	bl	8000b6c <__aeabi_dcmpun>
 80125b4:	b140      	cbz	r0, 80125c8 <_printf_float+0xf0>
 80125b6:	464b      	mov	r3, r9
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	bfbc      	itt	lt
 80125bc:	232d      	movlt	r3, #45	; 0x2d
 80125be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80125c2:	487f      	ldr	r0, [pc, #508]	; (80127c0 <_printf_float+0x2e8>)
 80125c4:	4b7f      	ldr	r3, [pc, #508]	; (80127c4 <_printf_float+0x2ec>)
 80125c6:	e7d1      	b.n	801256c <_printf_float+0x94>
 80125c8:	6863      	ldr	r3, [r4, #4]
 80125ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80125ce:	9206      	str	r2, [sp, #24]
 80125d0:	1c5a      	adds	r2, r3, #1
 80125d2:	d13f      	bne.n	8012654 <_printf_float+0x17c>
 80125d4:	2306      	movs	r3, #6
 80125d6:	6063      	str	r3, [r4, #4]
 80125d8:	9b05      	ldr	r3, [sp, #20]
 80125da:	6861      	ldr	r1, [r4, #4]
 80125dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80125e0:	2300      	movs	r3, #0
 80125e2:	9303      	str	r3, [sp, #12]
 80125e4:	ab0a      	add	r3, sp, #40	; 0x28
 80125e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80125ea:	ab09      	add	r3, sp, #36	; 0x24
 80125ec:	ec49 8b10 	vmov	d0, r8, r9
 80125f0:	9300      	str	r3, [sp, #0]
 80125f2:	6022      	str	r2, [r4, #0]
 80125f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80125f8:	4628      	mov	r0, r5
 80125fa:	f7ff fecd 	bl	8012398 <__cvt>
 80125fe:	9b06      	ldr	r3, [sp, #24]
 8012600:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012602:	2b47      	cmp	r3, #71	; 0x47
 8012604:	4680      	mov	r8, r0
 8012606:	d108      	bne.n	801261a <_printf_float+0x142>
 8012608:	1cc8      	adds	r0, r1, #3
 801260a:	db02      	blt.n	8012612 <_printf_float+0x13a>
 801260c:	6863      	ldr	r3, [r4, #4]
 801260e:	4299      	cmp	r1, r3
 8012610:	dd41      	ble.n	8012696 <_printf_float+0x1be>
 8012612:	f1ab 0b02 	sub.w	fp, fp, #2
 8012616:	fa5f fb8b 	uxtb.w	fp, fp
 801261a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801261e:	d820      	bhi.n	8012662 <_printf_float+0x18a>
 8012620:	3901      	subs	r1, #1
 8012622:	465a      	mov	r2, fp
 8012624:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012628:	9109      	str	r1, [sp, #36]	; 0x24
 801262a:	f7ff ff17 	bl	801245c <__exponent>
 801262e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012630:	1813      	adds	r3, r2, r0
 8012632:	2a01      	cmp	r2, #1
 8012634:	4681      	mov	r9, r0
 8012636:	6123      	str	r3, [r4, #16]
 8012638:	dc02      	bgt.n	8012640 <_printf_float+0x168>
 801263a:	6822      	ldr	r2, [r4, #0]
 801263c:	07d2      	lsls	r2, r2, #31
 801263e:	d501      	bpl.n	8012644 <_printf_float+0x16c>
 8012640:	3301      	adds	r3, #1
 8012642:	6123      	str	r3, [r4, #16]
 8012644:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012648:	2b00      	cmp	r3, #0
 801264a:	d09c      	beq.n	8012586 <_printf_float+0xae>
 801264c:	232d      	movs	r3, #45	; 0x2d
 801264e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012652:	e798      	b.n	8012586 <_printf_float+0xae>
 8012654:	9a06      	ldr	r2, [sp, #24]
 8012656:	2a47      	cmp	r2, #71	; 0x47
 8012658:	d1be      	bne.n	80125d8 <_printf_float+0x100>
 801265a:	2b00      	cmp	r3, #0
 801265c:	d1bc      	bne.n	80125d8 <_printf_float+0x100>
 801265e:	2301      	movs	r3, #1
 8012660:	e7b9      	b.n	80125d6 <_printf_float+0xfe>
 8012662:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012666:	d118      	bne.n	801269a <_printf_float+0x1c2>
 8012668:	2900      	cmp	r1, #0
 801266a:	6863      	ldr	r3, [r4, #4]
 801266c:	dd0b      	ble.n	8012686 <_printf_float+0x1ae>
 801266e:	6121      	str	r1, [r4, #16]
 8012670:	b913      	cbnz	r3, 8012678 <_printf_float+0x1a0>
 8012672:	6822      	ldr	r2, [r4, #0]
 8012674:	07d0      	lsls	r0, r2, #31
 8012676:	d502      	bpl.n	801267e <_printf_float+0x1a6>
 8012678:	3301      	adds	r3, #1
 801267a:	440b      	add	r3, r1
 801267c:	6123      	str	r3, [r4, #16]
 801267e:	65a1      	str	r1, [r4, #88]	; 0x58
 8012680:	f04f 0900 	mov.w	r9, #0
 8012684:	e7de      	b.n	8012644 <_printf_float+0x16c>
 8012686:	b913      	cbnz	r3, 801268e <_printf_float+0x1b6>
 8012688:	6822      	ldr	r2, [r4, #0]
 801268a:	07d2      	lsls	r2, r2, #31
 801268c:	d501      	bpl.n	8012692 <_printf_float+0x1ba>
 801268e:	3302      	adds	r3, #2
 8012690:	e7f4      	b.n	801267c <_printf_float+0x1a4>
 8012692:	2301      	movs	r3, #1
 8012694:	e7f2      	b.n	801267c <_printf_float+0x1a4>
 8012696:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801269a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801269c:	4299      	cmp	r1, r3
 801269e:	db05      	blt.n	80126ac <_printf_float+0x1d4>
 80126a0:	6823      	ldr	r3, [r4, #0]
 80126a2:	6121      	str	r1, [r4, #16]
 80126a4:	07d8      	lsls	r0, r3, #31
 80126a6:	d5ea      	bpl.n	801267e <_printf_float+0x1a6>
 80126a8:	1c4b      	adds	r3, r1, #1
 80126aa:	e7e7      	b.n	801267c <_printf_float+0x1a4>
 80126ac:	2900      	cmp	r1, #0
 80126ae:	bfd4      	ite	le
 80126b0:	f1c1 0202 	rsble	r2, r1, #2
 80126b4:	2201      	movgt	r2, #1
 80126b6:	4413      	add	r3, r2
 80126b8:	e7e0      	b.n	801267c <_printf_float+0x1a4>
 80126ba:	6823      	ldr	r3, [r4, #0]
 80126bc:	055a      	lsls	r2, r3, #21
 80126be:	d407      	bmi.n	80126d0 <_printf_float+0x1f8>
 80126c0:	6923      	ldr	r3, [r4, #16]
 80126c2:	4642      	mov	r2, r8
 80126c4:	4631      	mov	r1, r6
 80126c6:	4628      	mov	r0, r5
 80126c8:	47b8      	blx	r7
 80126ca:	3001      	adds	r0, #1
 80126cc:	d12c      	bne.n	8012728 <_printf_float+0x250>
 80126ce:	e764      	b.n	801259a <_printf_float+0xc2>
 80126d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80126d4:	f240 80e0 	bls.w	8012898 <_printf_float+0x3c0>
 80126d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80126dc:	2200      	movs	r2, #0
 80126de:	2300      	movs	r3, #0
 80126e0:	f7ee fa12 	bl	8000b08 <__aeabi_dcmpeq>
 80126e4:	2800      	cmp	r0, #0
 80126e6:	d034      	beq.n	8012752 <_printf_float+0x27a>
 80126e8:	4a37      	ldr	r2, [pc, #220]	; (80127c8 <_printf_float+0x2f0>)
 80126ea:	2301      	movs	r3, #1
 80126ec:	4631      	mov	r1, r6
 80126ee:	4628      	mov	r0, r5
 80126f0:	47b8      	blx	r7
 80126f2:	3001      	adds	r0, #1
 80126f4:	f43f af51 	beq.w	801259a <_printf_float+0xc2>
 80126f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80126fc:	429a      	cmp	r2, r3
 80126fe:	db02      	blt.n	8012706 <_printf_float+0x22e>
 8012700:	6823      	ldr	r3, [r4, #0]
 8012702:	07d8      	lsls	r0, r3, #31
 8012704:	d510      	bpl.n	8012728 <_printf_float+0x250>
 8012706:	ee18 3a10 	vmov	r3, s16
 801270a:	4652      	mov	r2, sl
 801270c:	4631      	mov	r1, r6
 801270e:	4628      	mov	r0, r5
 8012710:	47b8      	blx	r7
 8012712:	3001      	adds	r0, #1
 8012714:	f43f af41 	beq.w	801259a <_printf_float+0xc2>
 8012718:	f04f 0800 	mov.w	r8, #0
 801271c:	f104 091a 	add.w	r9, r4, #26
 8012720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012722:	3b01      	subs	r3, #1
 8012724:	4543      	cmp	r3, r8
 8012726:	dc09      	bgt.n	801273c <_printf_float+0x264>
 8012728:	6823      	ldr	r3, [r4, #0]
 801272a:	079b      	lsls	r3, r3, #30
 801272c:	f100 8105 	bmi.w	801293a <_printf_float+0x462>
 8012730:	68e0      	ldr	r0, [r4, #12]
 8012732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012734:	4298      	cmp	r0, r3
 8012736:	bfb8      	it	lt
 8012738:	4618      	movlt	r0, r3
 801273a:	e730      	b.n	801259e <_printf_float+0xc6>
 801273c:	2301      	movs	r3, #1
 801273e:	464a      	mov	r2, r9
 8012740:	4631      	mov	r1, r6
 8012742:	4628      	mov	r0, r5
 8012744:	47b8      	blx	r7
 8012746:	3001      	adds	r0, #1
 8012748:	f43f af27 	beq.w	801259a <_printf_float+0xc2>
 801274c:	f108 0801 	add.w	r8, r8, #1
 8012750:	e7e6      	b.n	8012720 <_printf_float+0x248>
 8012752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012754:	2b00      	cmp	r3, #0
 8012756:	dc39      	bgt.n	80127cc <_printf_float+0x2f4>
 8012758:	4a1b      	ldr	r2, [pc, #108]	; (80127c8 <_printf_float+0x2f0>)
 801275a:	2301      	movs	r3, #1
 801275c:	4631      	mov	r1, r6
 801275e:	4628      	mov	r0, r5
 8012760:	47b8      	blx	r7
 8012762:	3001      	adds	r0, #1
 8012764:	f43f af19 	beq.w	801259a <_printf_float+0xc2>
 8012768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801276c:	4313      	orrs	r3, r2
 801276e:	d102      	bne.n	8012776 <_printf_float+0x29e>
 8012770:	6823      	ldr	r3, [r4, #0]
 8012772:	07d9      	lsls	r1, r3, #31
 8012774:	d5d8      	bpl.n	8012728 <_printf_float+0x250>
 8012776:	ee18 3a10 	vmov	r3, s16
 801277a:	4652      	mov	r2, sl
 801277c:	4631      	mov	r1, r6
 801277e:	4628      	mov	r0, r5
 8012780:	47b8      	blx	r7
 8012782:	3001      	adds	r0, #1
 8012784:	f43f af09 	beq.w	801259a <_printf_float+0xc2>
 8012788:	f04f 0900 	mov.w	r9, #0
 801278c:	f104 0a1a 	add.w	sl, r4, #26
 8012790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012792:	425b      	negs	r3, r3
 8012794:	454b      	cmp	r3, r9
 8012796:	dc01      	bgt.n	801279c <_printf_float+0x2c4>
 8012798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801279a:	e792      	b.n	80126c2 <_printf_float+0x1ea>
 801279c:	2301      	movs	r3, #1
 801279e:	4652      	mov	r2, sl
 80127a0:	4631      	mov	r1, r6
 80127a2:	4628      	mov	r0, r5
 80127a4:	47b8      	blx	r7
 80127a6:	3001      	adds	r0, #1
 80127a8:	f43f aef7 	beq.w	801259a <_printf_float+0xc2>
 80127ac:	f109 0901 	add.w	r9, r9, #1
 80127b0:	e7ee      	b.n	8012790 <_printf_float+0x2b8>
 80127b2:	bf00      	nop
 80127b4:	7fefffff 	.word	0x7fefffff
 80127b8:	080151d8 	.word	0x080151d8
 80127bc:	080151dc 	.word	0x080151dc
 80127c0:	080151e4 	.word	0x080151e4
 80127c4:	080151e0 	.word	0x080151e0
 80127c8:	080151e8 	.word	0x080151e8
 80127cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80127ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80127d0:	429a      	cmp	r2, r3
 80127d2:	bfa8      	it	ge
 80127d4:	461a      	movge	r2, r3
 80127d6:	2a00      	cmp	r2, #0
 80127d8:	4691      	mov	r9, r2
 80127da:	dc37      	bgt.n	801284c <_printf_float+0x374>
 80127dc:	f04f 0b00 	mov.w	fp, #0
 80127e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80127e4:	f104 021a 	add.w	r2, r4, #26
 80127e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80127ea:	9305      	str	r3, [sp, #20]
 80127ec:	eba3 0309 	sub.w	r3, r3, r9
 80127f0:	455b      	cmp	r3, fp
 80127f2:	dc33      	bgt.n	801285c <_printf_float+0x384>
 80127f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80127f8:	429a      	cmp	r2, r3
 80127fa:	db3b      	blt.n	8012874 <_printf_float+0x39c>
 80127fc:	6823      	ldr	r3, [r4, #0]
 80127fe:	07da      	lsls	r2, r3, #31
 8012800:	d438      	bmi.n	8012874 <_printf_float+0x39c>
 8012802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012804:	9a05      	ldr	r2, [sp, #20]
 8012806:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012808:	1a9a      	subs	r2, r3, r2
 801280a:	eba3 0901 	sub.w	r9, r3, r1
 801280e:	4591      	cmp	r9, r2
 8012810:	bfa8      	it	ge
 8012812:	4691      	movge	r9, r2
 8012814:	f1b9 0f00 	cmp.w	r9, #0
 8012818:	dc35      	bgt.n	8012886 <_printf_float+0x3ae>
 801281a:	f04f 0800 	mov.w	r8, #0
 801281e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012822:	f104 0a1a 	add.w	sl, r4, #26
 8012826:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801282a:	1a9b      	subs	r3, r3, r2
 801282c:	eba3 0309 	sub.w	r3, r3, r9
 8012830:	4543      	cmp	r3, r8
 8012832:	f77f af79 	ble.w	8012728 <_printf_float+0x250>
 8012836:	2301      	movs	r3, #1
 8012838:	4652      	mov	r2, sl
 801283a:	4631      	mov	r1, r6
 801283c:	4628      	mov	r0, r5
 801283e:	47b8      	blx	r7
 8012840:	3001      	adds	r0, #1
 8012842:	f43f aeaa 	beq.w	801259a <_printf_float+0xc2>
 8012846:	f108 0801 	add.w	r8, r8, #1
 801284a:	e7ec      	b.n	8012826 <_printf_float+0x34e>
 801284c:	4613      	mov	r3, r2
 801284e:	4631      	mov	r1, r6
 8012850:	4642      	mov	r2, r8
 8012852:	4628      	mov	r0, r5
 8012854:	47b8      	blx	r7
 8012856:	3001      	adds	r0, #1
 8012858:	d1c0      	bne.n	80127dc <_printf_float+0x304>
 801285a:	e69e      	b.n	801259a <_printf_float+0xc2>
 801285c:	2301      	movs	r3, #1
 801285e:	4631      	mov	r1, r6
 8012860:	4628      	mov	r0, r5
 8012862:	9205      	str	r2, [sp, #20]
 8012864:	47b8      	blx	r7
 8012866:	3001      	adds	r0, #1
 8012868:	f43f ae97 	beq.w	801259a <_printf_float+0xc2>
 801286c:	9a05      	ldr	r2, [sp, #20]
 801286e:	f10b 0b01 	add.w	fp, fp, #1
 8012872:	e7b9      	b.n	80127e8 <_printf_float+0x310>
 8012874:	ee18 3a10 	vmov	r3, s16
 8012878:	4652      	mov	r2, sl
 801287a:	4631      	mov	r1, r6
 801287c:	4628      	mov	r0, r5
 801287e:	47b8      	blx	r7
 8012880:	3001      	adds	r0, #1
 8012882:	d1be      	bne.n	8012802 <_printf_float+0x32a>
 8012884:	e689      	b.n	801259a <_printf_float+0xc2>
 8012886:	9a05      	ldr	r2, [sp, #20]
 8012888:	464b      	mov	r3, r9
 801288a:	4442      	add	r2, r8
 801288c:	4631      	mov	r1, r6
 801288e:	4628      	mov	r0, r5
 8012890:	47b8      	blx	r7
 8012892:	3001      	adds	r0, #1
 8012894:	d1c1      	bne.n	801281a <_printf_float+0x342>
 8012896:	e680      	b.n	801259a <_printf_float+0xc2>
 8012898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801289a:	2a01      	cmp	r2, #1
 801289c:	dc01      	bgt.n	80128a2 <_printf_float+0x3ca>
 801289e:	07db      	lsls	r3, r3, #31
 80128a0:	d538      	bpl.n	8012914 <_printf_float+0x43c>
 80128a2:	2301      	movs	r3, #1
 80128a4:	4642      	mov	r2, r8
 80128a6:	4631      	mov	r1, r6
 80128a8:	4628      	mov	r0, r5
 80128aa:	47b8      	blx	r7
 80128ac:	3001      	adds	r0, #1
 80128ae:	f43f ae74 	beq.w	801259a <_printf_float+0xc2>
 80128b2:	ee18 3a10 	vmov	r3, s16
 80128b6:	4652      	mov	r2, sl
 80128b8:	4631      	mov	r1, r6
 80128ba:	4628      	mov	r0, r5
 80128bc:	47b8      	blx	r7
 80128be:	3001      	adds	r0, #1
 80128c0:	f43f ae6b 	beq.w	801259a <_printf_float+0xc2>
 80128c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80128c8:	2200      	movs	r2, #0
 80128ca:	2300      	movs	r3, #0
 80128cc:	f7ee f91c 	bl	8000b08 <__aeabi_dcmpeq>
 80128d0:	b9d8      	cbnz	r0, 801290a <_printf_float+0x432>
 80128d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128d4:	f108 0201 	add.w	r2, r8, #1
 80128d8:	3b01      	subs	r3, #1
 80128da:	4631      	mov	r1, r6
 80128dc:	4628      	mov	r0, r5
 80128de:	47b8      	blx	r7
 80128e0:	3001      	adds	r0, #1
 80128e2:	d10e      	bne.n	8012902 <_printf_float+0x42a>
 80128e4:	e659      	b.n	801259a <_printf_float+0xc2>
 80128e6:	2301      	movs	r3, #1
 80128e8:	4652      	mov	r2, sl
 80128ea:	4631      	mov	r1, r6
 80128ec:	4628      	mov	r0, r5
 80128ee:	47b8      	blx	r7
 80128f0:	3001      	adds	r0, #1
 80128f2:	f43f ae52 	beq.w	801259a <_printf_float+0xc2>
 80128f6:	f108 0801 	add.w	r8, r8, #1
 80128fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128fc:	3b01      	subs	r3, #1
 80128fe:	4543      	cmp	r3, r8
 8012900:	dcf1      	bgt.n	80128e6 <_printf_float+0x40e>
 8012902:	464b      	mov	r3, r9
 8012904:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012908:	e6dc      	b.n	80126c4 <_printf_float+0x1ec>
 801290a:	f04f 0800 	mov.w	r8, #0
 801290e:	f104 0a1a 	add.w	sl, r4, #26
 8012912:	e7f2      	b.n	80128fa <_printf_float+0x422>
 8012914:	2301      	movs	r3, #1
 8012916:	4642      	mov	r2, r8
 8012918:	e7df      	b.n	80128da <_printf_float+0x402>
 801291a:	2301      	movs	r3, #1
 801291c:	464a      	mov	r2, r9
 801291e:	4631      	mov	r1, r6
 8012920:	4628      	mov	r0, r5
 8012922:	47b8      	blx	r7
 8012924:	3001      	adds	r0, #1
 8012926:	f43f ae38 	beq.w	801259a <_printf_float+0xc2>
 801292a:	f108 0801 	add.w	r8, r8, #1
 801292e:	68e3      	ldr	r3, [r4, #12]
 8012930:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012932:	1a5b      	subs	r3, r3, r1
 8012934:	4543      	cmp	r3, r8
 8012936:	dcf0      	bgt.n	801291a <_printf_float+0x442>
 8012938:	e6fa      	b.n	8012730 <_printf_float+0x258>
 801293a:	f04f 0800 	mov.w	r8, #0
 801293e:	f104 0919 	add.w	r9, r4, #25
 8012942:	e7f4      	b.n	801292e <_printf_float+0x456>

08012944 <_printf_common>:
 8012944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012948:	4616      	mov	r6, r2
 801294a:	4699      	mov	r9, r3
 801294c:	688a      	ldr	r2, [r1, #8]
 801294e:	690b      	ldr	r3, [r1, #16]
 8012950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012954:	4293      	cmp	r3, r2
 8012956:	bfb8      	it	lt
 8012958:	4613      	movlt	r3, r2
 801295a:	6033      	str	r3, [r6, #0]
 801295c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012960:	4607      	mov	r7, r0
 8012962:	460c      	mov	r4, r1
 8012964:	b10a      	cbz	r2, 801296a <_printf_common+0x26>
 8012966:	3301      	adds	r3, #1
 8012968:	6033      	str	r3, [r6, #0]
 801296a:	6823      	ldr	r3, [r4, #0]
 801296c:	0699      	lsls	r1, r3, #26
 801296e:	bf42      	ittt	mi
 8012970:	6833      	ldrmi	r3, [r6, #0]
 8012972:	3302      	addmi	r3, #2
 8012974:	6033      	strmi	r3, [r6, #0]
 8012976:	6825      	ldr	r5, [r4, #0]
 8012978:	f015 0506 	ands.w	r5, r5, #6
 801297c:	d106      	bne.n	801298c <_printf_common+0x48>
 801297e:	f104 0a19 	add.w	sl, r4, #25
 8012982:	68e3      	ldr	r3, [r4, #12]
 8012984:	6832      	ldr	r2, [r6, #0]
 8012986:	1a9b      	subs	r3, r3, r2
 8012988:	42ab      	cmp	r3, r5
 801298a:	dc26      	bgt.n	80129da <_printf_common+0x96>
 801298c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012990:	1e13      	subs	r3, r2, #0
 8012992:	6822      	ldr	r2, [r4, #0]
 8012994:	bf18      	it	ne
 8012996:	2301      	movne	r3, #1
 8012998:	0692      	lsls	r2, r2, #26
 801299a:	d42b      	bmi.n	80129f4 <_printf_common+0xb0>
 801299c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80129a0:	4649      	mov	r1, r9
 80129a2:	4638      	mov	r0, r7
 80129a4:	47c0      	blx	r8
 80129a6:	3001      	adds	r0, #1
 80129a8:	d01e      	beq.n	80129e8 <_printf_common+0xa4>
 80129aa:	6823      	ldr	r3, [r4, #0]
 80129ac:	68e5      	ldr	r5, [r4, #12]
 80129ae:	6832      	ldr	r2, [r6, #0]
 80129b0:	f003 0306 	and.w	r3, r3, #6
 80129b4:	2b04      	cmp	r3, #4
 80129b6:	bf08      	it	eq
 80129b8:	1aad      	subeq	r5, r5, r2
 80129ba:	68a3      	ldr	r3, [r4, #8]
 80129bc:	6922      	ldr	r2, [r4, #16]
 80129be:	bf0c      	ite	eq
 80129c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80129c4:	2500      	movne	r5, #0
 80129c6:	4293      	cmp	r3, r2
 80129c8:	bfc4      	itt	gt
 80129ca:	1a9b      	subgt	r3, r3, r2
 80129cc:	18ed      	addgt	r5, r5, r3
 80129ce:	2600      	movs	r6, #0
 80129d0:	341a      	adds	r4, #26
 80129d2:	42b5      	cmp	r5, r6
 80129d4:	d11a      	bne.n	8012a0c <_printf_common+0xc8>
 80129d6:	2000      	movs	r0, #0
 80129d8:	e008      	b.n	80129ec <_printf_common+0xa8>
 80129da:	2301      	movs	r3, #1
 80129dc:	4652      	mov	r2, sl
 80129de:	4649      	mov	r1, r9
 80129e0:	4638      	mov	r0, r7
 80129e2:	47c0      	blx	r8
 80129e4:	3001      	adds	r0, #1
 80129e6:	d103      	bne.n	80129f0 <_printf_common+0xac>
 80129e8:	f04f 30ff 	mov.w	r0, #4294967295
 80129ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129f0:	3501      	adds	r5, #1
 80129f2:	e7c6      	b.n	8012982 <_printf_common+0x3e>
 80129f4:	18e1      	adds	r1, r4, r3
 80129f6:	1c5a      	adds	r2, r3, #1
 80129f8:	2030      	movs	r0, #48	; 0x30
 80129fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80129fe:	4422      	add	r2, r4
 8012a00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012a04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012a08:	3302      	adds	r3, #2
 8012a0a:	e7c7      	b.n	801299c <_printf_common+0x58>
 8012a0c:	2301      	movs	r3, #1
 8012a0e:	4622      	mov	r2, r4
 8012a10:	4649      	mov	r1, r9
 8012a12:	4638      	mov	r0, r7
 8012a14:	47c0      	blx	r8
 8012a16:	3001      	adds	r0, #1
 8012a18:	d0e6      	beq.n	80129e8 <_printf_common+0xa4>
 8012a1a:	3601      	adds	r6, #1
 8012a1c:	e7d9      	b.n	80129d2 <_printf_common+0x8e>
	...

08012a20 <_printf_i>:
 8012a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a24:	7e0f      	ldrb	r7, [r1, #24]
 8012a26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012a28:	2f78      	cmp	r7, #120	; 0x78
 8012a2a:	4691      	mov	r9, r2
 8012a2c:	4680      	mov	r8, r0
 8012a2e:	460c      	mov	r4, r1
 8012a30:	469a      	mov	sl, r3
 8012a32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012a36:	d807      	bhi.n	8012a48 <_printf_i+0x28>
 8012a38:	2f62      	cmp	r7, #98	; 0x62
 8012a3a:	d80a      	bhi.n	8012a52 <_printf_i+0x32>
 8012a3c:	2f00      	cmp	r7, #0
 8012a3e:	f000 80d8 	beq.w	8012bf2 <_printf_i+0x1d2>
 8012a42:	2f58      	cmp	r7, #88	; 0x58
 8012a44:	f000 80a3 	beq.w	8012b8e <_printf_i+0x16e>
 8012a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012a50:	e03a      	b.n	8012ac8 <_printf_i+0xa8>
 8012a52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012a56:	2b15      	cmp	r3, #21
 8012a58:	d8f6      	bhi.n	8012a48 <_printf_i+0x28>
 8012a5a:	a101      	add	r1, pc, #4	; (adr r1, 8012a60 <_printf_i+0x40>)
 8012a5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012a60:	08012ab9 	.word	0x08012ab9
 8012a64:	08012acd 	.word	0x08012acd
 8012a68:	08012a49 	.word	0x08012a49
 8012a6c:	08012a49 	.word	0x08012a49
 8012a70:	08012a49 	.word	0x08012a49
 8012a74:	08012a49 	.word	0x08012a49
 8012a78:	08012acd 	.word	0x08012acd
 8012a7c:	08012a49 	.word	0x08012a49
 8012a80:	08012a49 	.word	0x08012a49
 8012a84:	08012a49 	.word	0x08012a49
 8012a88:	08012a49 	.word	0x08012a49
 8012a8c:	08012bd9 	.word	0x08012bd9
 8012a90:	08012afd 	.word	0x08012afd
 8012a94:	08012bbb 	.word	0x08012bbb
 8012a98:	08012a49 	.word	0x08012a49
 8012a9c:	08012a49 	.word	0x08012a49
 8012aa0:	08012bfb 	.word	0x08012bfb
 8012aa4:	08012a49 	.word	0x08012a49
 8012aa8:	08012afd 	.word	0x08012afd
 8012aac:	08012a49 	.word	0x08012a49
 8012ab0:	08012a49 	.word	0x08012a49
 8012ab4:	08012bc3 	.word	0x08012bc3
 8012ab8:	682b      	ldr	r3, [r5, #0]
 8012aba:	1d1a      	adds	r2, r3, #4
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	602a      	str	r2, [r5, #0]
 8012ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ac4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012ac8:	2301      	movs	r3, #1
 8012aca:	e0a3      	b.n	8012c14 <_printf_i+0x1f4>
 8012acc:	6820      	ldr	r0, [r4, #0]
 8012ace:	6829      	ldr	r1, [r5, #0]
 8012ad0:	0606      	lsls	r6, r0, #24
 8012ad2:	f101 0304 	add.w	r3, r1, #4
 8012ad6:	d50a      	bpl.n	8012aee <_printf_i+0xce>
 8012ad8:	680e      	ldr	r6, [r1, #0]
 8012ada:	602b      	str	r3, [r5, #0]
 8012adc:	2e00      	cmp	r6, #0
 8012ade:	da03      	bge.n	8012ae8 <_printf_i+0xc8>
 8012ae0:	232d      	movs	r3, #45	; 0x2d
 8012ae2:	4276      	negs	r6, r6
 8012ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012ae8:	485e      	ldr	r0, [pc, #376]	; (8012c64 <_printf_i+0x244>)
 8012aea:	230a      	movs	r3, #10
 8012aec:	e019      	b.n	8012b22 <_printf_i+0x102>
 8012aee:	680e      	ldr	r6, [r1, #0]
 8012af0:	602b      	str	r3, [r5, #0]
 8012af2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012af6:	bf18      	it	ne
 8012af8:	b236      	sxthne	r6, r6
 8012afa:	e7ef      	b.n	8012adc <_printf_i+0xbc>
 8012afc:	682b      	ldr	r3, [r5, #0]
 8012afe:	6820      	ldr	r0, [r4, #0]
 8012b00:	1d19      	adds	r1, r3, #4
 8012b02:	6029      	str	r1, [r5, #0]
 8012b04:	0601      	lsls	r1, r0, #24
 8012b06:	d501      	bpl.n	8012b0c <_printf_i+0xec>
 8012b08:	681e      	ldr	r6, [r3, #0]
 8012b0a:	e002      	b.n	8012b12 <_printf_i+0xf2>
 8012b0c:	0646      	lsls	r6, r0, #25
 8012b0e:	d5fb      	bpl.n	8012b08 <_printf_i+0xe8>
 8012b10:	881e      	ldrh	r6, [r3, #0]
 8012b12:	4854      	ldr	r0, [pc, #336]	; (8012c64 <_printf_i+0x244>)
 8012b14:	2f6f      	cmp	r7, #111	; 0x6f
 8012b16:	bf0c      	ite	eq
 8012b18:	2308      	moveq	r3, #8
 8012b1a:	230a      	movne	r3, #10
 8012b1c:	2100      	movs	r1, #0
 8012b1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012b22:	6865      	ldr	r5, [r4, #4]
 8012b24:	60a5      	str	r5, [r4, #8]
 8012b26:	2d00      	cmp	r5, #0
 8012b28:	bfa2      	ittt	ge
 8012b2a:	6821      	ldrge	r1, [r4, #0]
 8012b2c:	f021 0104 	bicge.w	r1, r1, #4
 8012b30:	6021      	strge	r1, [r4, #0]
 8012b32:	b90e      	cbnz	r6, 8012b38 <_printf_i+0x118>
 8012b34:	2d00      	cmp	r5, #0
 8012b36:	d04d      	beq.n	8012bd4 <_printf_i+0x1b4>
 8012b38:	4615      	mov	r5, r2
 8012b3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8012b3e:	fb03 6711 	mls	r7, r3, r1, r6
 8012b42:	5dc7      	ldrb	r7, [r0, r7]
 8012b44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012b48:	4637      	mov	r7, r6
 8012b4a:	42bb      	cmp	r3, r7
 8012b4c:	460e      	mov	r6, r1
 8012b4e:	d9f4      	bls.n	8012b3a <_printf_i+0x11a>
 8012b50:	2b08      	cmp	r3, #8
 8012b52:	d10b      	bne.n	8012b6c <_printf_i+0x14c>
 8012b54:	6823      	ldr	r3, [r4, #0]
 8012b56:	07de      	lsls	r6, r3, #31
 8012b58:	d508      	bpl.n	8012b6c <_printf_i+0x14c>
 8012b5a:	6923      	ldr	r3, [r4, #16]
 8012b5c:	6861      	ldr	r1, [r4, #4]
 8012b5e:	4299      	cmp	r1, r3
 8012b60:	bfde      	ittt	le
 8012b62:	2330      	movle	r3, #48	; 0x30
 8012b64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012b68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012b6c:	1b52      	subs	r2, r2, r5
 8012b6e:	6122      	str	r2, [r4, #16]
 8012b70:	f8cd a000 	str.w	sl, [sp]
 8012b74:	464b      	mov	r3, r9
 8012b76:	aa03      	add	r2, sp, #12
 8012b78:	4621      	mov	r1, r4
 8012b7a:	4640      	mov	r0, r8
 8012b7c:	f7ff fee2 	bl	8012944 <_printf_common>
 8012b80:	3001      	adds	r0, #1
 8012b82:	d14c      	bne.n	8012c1e <_printf_i+0x1fe>
 8012b84:	f04f 30ff 	mov.w	r0, #4294967295
 8012b88:	b004      	add	sp, #16
 8012b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b8e:	4835      	ldr	r0, [pc, #212]	; (8012c64 <_printf_i+0x244>)
 8012b90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012b94:	6829      	ldr	r1, [r5, #0]
 8012b96:	6823      	ldr	r3, [r4, #0]
 8012b98:	f851 6b04 	ldr.w	r6, [r1], #4
 8012b9c:	6029      	str	r1, [r5, #0]
 8012b9e:	061d      	lsls	r5, r3, #24
 8012ba0:	d514      	bpl.n	8012bcc <_printf_i+0x1ac>
 8012ba2:	07df      	lsls	r7, r3, #31
 8012ba4:	bf44      	itt	mi
 8012ba6:	f043 0320 	orrmi.w	r3, r3, #32
 8012baa:	6023      	strmi	r3, [r4, #0]
 8012bac:	b91e      	cbnz	r6, 8012bb6 <_printf_i+0x196>
 8012bae:	6823      	ldr	r3, [r4, #0]
 8012bb0:	f023 0320 	bic.w	r3, r3, #32
 8012bb4:	6023      	str	r3, [r4, #0]
 8012bb6:	2310      	movs	r3, #16
 8012bb8:	e7b0      	b.n	8012b1c <_printf_i+0xfc>
 8012bba:	6823      	ldr	r3, [r4, #0]
 8012bbc:	f043 0320 	orr.w	r3, r3, #32
 8012bc0:	6023      	str	r3, [r4, #0]
 8012bc2:	2378      	movs	r3, #120	; 0x78
 8012bc4:	4828      	ldr	r0, [pc, #160]	; (8012c68 <_printf_i+0x248>)
 8012bc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012bca:	e7e3      	b.n	8012b94 <_printf_i+0x174>
 8012bcc:	0659      	lsls	r1, r3, #25
 8012bce:	bf48      	it	mi
 8012bd0:	b2b6      	uxthmi	r6, r6
 8012bd2:	e7e6      	b.n	8012ba2 <_printf_i+0x182>
 8012bd4:	4615      	mov	r5, r2
 8012bd6:	e7bb      	b.n	8012b50 <_printf_i+0x130>
 8012bd8:	682b      	ldr	r3, [r5, #0]
 8012bda:	6826      	ldr	r6, [r4, #0]
 8012bdc:	6961      	ldr	r1, [r4, #20]
 8012bde:	1d18      	adds	r0, r3, #4
 8012be0:	6028      	str	r0, [r5, #0]
 8012be2:	0635      	lsls	r5, r6, #24
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	d501      	bpl.n	8012bec <_printf_i+0x1cc>
 8012be8:	6019      	str	r1, [r3, #0]
 8012bea:	e002      	b.n	8012bf2 <_printf_i+0x1d2>
 8012bec:	0670      	lsls	r0, r6, #25
 8012bee:	d5fb      	bpl.n	8012be8 <_printf_i+0x1c8>
 8012bf0:	8019      	strh	r1, [r3, #0]
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	6123      	str	r3, [r4, #16]
 8012bf6:	4615      	mov	r5, r2
 8012bf8:	e7ba      	b.n	8012b70 <_printf_i+0x150>
 8012bfa:	682b      	ldr	r3, [r5, #0]
 8012bfc:	1d1a      	adds	r2, r3, #4
 8012bfe:	602a      	str	r2, [r5, #0]
 8012c00:	681d      	ldr	r5, [r3, #0]
 8012c02:	6862      	ldr	r2, [r4, #4]
 8012c04:	2100      	movs	r1, #0
 8012c06:	4628      	mov	r0, r5
 8012c08:	f7ed fb0a 	bl	8000220 <memchr>
 8012c0c:	b108      	cbz	r0, 8012c12 <_printf_i+0x1f2>
 8012c0e:	1b40      	subs	r0, r0, r5
 8012c10:	6060      	str	r0, [r4, #4]
 8012c12:	6863      	ldr	r3, [r4, #4]
 8012c14:	6123      	str	r3, [r4, #16]
 8012c16:	2300      	movs	r3, #0
 8012c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c1c:	e7a8      	b.n	8012b70 <_printf_i+0x150>
 8012c1e:	6923      	ldr	r3, [r4, #16]
 8012c20:	462a      	mov	r2, r5
 8012c22:	4649      	mov	r1, r9
 8012c24:	4640      	mov	r0, r8
 8012c26:	47d0      	blx	sl
 8012c28:	3001      	adds	r0, #1
 8012c2a:	d0ab      	beq.n	8012b84 <_printf_i+0x164>
 8012c2c:	6823      	ldr	r3, [r4, #0]
 8012c2e:	079b      	lsls	r3, r3, #30
 8012c30:	d413      	bmi.n	8012c5a <_printf_i+0x23a>
 8012c32:	68e0      	ldr	r0, [r4, #12]
 8012c34:	9b03      	ldr	r3, [sp, #12]
 8012c36:	4298      	cmp	r0, r3
 8012c38:	bfb8      	it	lt
 8012c3a:	4618      	movlt	r0, r3
 8012c3c:	e7a4      	b.n	8012b88 <_printf_i+0x168>
 8012c3e:	2301      	movs	r3, #1
 8012c40:	4632      	mov	r2, r6
 8012c42:	4649      	mov	r1, r9
 8012c44:	4640      	mov	r0, r8
 8012c46:	47d0      	blx	sl
 8012c48:	3001      	adds	r0, #1
 8012c4a:	d09b      	beq.n	8012b84 <_printf_i+0x164>
 8012c4c:	3501      	adds	r5, #1
 8012c4e:	68e3      	ldr	r3, [r4, #12]
 8012c50:	9903      	ldr	r1, [sp, #12]
 8012c52:	1a5b      	subs	r3, r3, r1
 8012c54:	42ab      	cmp	r3, r5
 8012c56:	dcf2      	bgt.n	8012c3e <_printf_i+0x21e>
 8012c58:	e7eb      	b.n	8012c32 <_printf_i+0x212>
 8012c5a:	2500      	movs	r5, #0
 8012c5c:	f104 0619 	add.w	r6, r4, #25
 8012c60:	e7f5      	b.n	8012c4e <_printf_i+0x22e>
 8012c62:	bf00      	nop
 8012c64:	080151ea 	.word	0x080151ea
 8012c68:	080151fb 	.word	0x080151fb

08012c6c <iprintf>:
 8012c6c:	b40f      	push	{r0, r1, r2, r3}
 8012c6e:	4b0a      	ldr	r3, [pc, #40]	; (8012c98 <iprintf+0x2c>)
 8012c70:	b513      	push	{r0, r1, r4, lr}
 8012c72:	681c      	ldr	r4, [r3, #0]
 8012c74:	b124      	cbz	r4, 8012c80 <iprintf+0x14>
 8012c76:	69a3      	ldr	r3, [r4, #24]
 8012c78:	b913      	cbnz	r3, 8012c80 <iprintf+0x14>
 8012c7a:	4620      	mov	r0, r4
 8012c7c:	f7ff f9cc 	bl	8012018 <__sinit>
 8012c80:	ab05      	add	r3, sp, #20
 8012c82:	9a04      	ldr	r2, [sp, #16]
 8012c84:	68a1      	ldr	r1, [r4, #8]
 8012c86:	9301      	str	r3, [sp, #4]
 8012c88:	4620      	mov	r0, r4
 8012c8a:	f001 fdbd 	bl	8014808 <_vfiprintf_r>
 8012c8e:	b002      	add	sp, #8
 8012c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c94:	b004      	add	sp, #16
 8012c96:	4770      	bx	lr
 8012c98:	20000124 	.word	0x20000124

08012c9c <_puts_r>:
 8012c9c:	b570      	push	{r4, r5, r6, lr}
 8012c9e:	460e      	mov	r6, r1
 8012ca0:	4605      	mov	r5, r0
 8012ca2:	b118      	cbz	r0, 8012cac <_puts_r+0x10>
 8012ca4:	6983      	ldr	r3, [r0, #24]
 8012ca6:	b90b      	cbnz	r3, 8012cac <_puts_r+0x10>
 8012ca8:	f7ff f9b6 	bl	8012018 <__sinit>
 8012cac:	69ab      	ldr	r3, [r5, #24]
 8012cae:	68ac      	ldr	r4, [r5, #8]
 8012cb0:	b913      	cbnz	r3, 8012cb8 <_puts_r+0x1c>
 8012cb2:	4628      	mov	r0, r5
 8012cb4:	f7ff f9b0 	bl	8012018 <__sinit>
 8012cb8:	4b2c      	ldr	r3, [pc, #176]	; (8012d6c <_puts_r+0xd0>)
 8012cba:	429c      	cmp	r4, r3
 8012cbc:	d120      	bne.n	8012d00 <_puts_r+0x64>
 8012cbe:	686c      	ldr	r4, [r5, #4]
 8012cc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012cc2:	07db      	lsls	r3, r3, #31
 8012cc4:	d405      	bmi.n	8012cd2 <_puts_r+0x36>
 8012cc6:	89a3      	ldrh	r3, [r4, #12]
 8012cc8:	0598      	lsls	r0, r3, #22
 8012cca:	d402      	bmi.n	8012cd2 <_puts_r+0x36>
 8012ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012cce:	f7f0 f8fd 	bl	8002ecc <__retarget_lock_acquire_recursive>
 8012cd2:	89a3      	ldrh	r3, [r4, #12]
 8012cd4:	0719      	lsls	r1, r3, #28
 8012cd6:	d51d      	bpl.n	8012d14 <_puts_r+0x78>
 8012cd8:	6923      	ldr	r3, [r4, #16]
 8012cda:	b1db      	cbz	r3, 8012d14 <_puts_r+0x78>
 8012cdc:	3e01      	subs	r6, #1
 8012cde:	68a3      	ldr	r3, [r4, #8]
 8012ce0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012ce4:	3b01      	subs	r3, #1
 8012ce6:	60a3      	str	r3, [r4, #8]
 8012ce8:	bb39      	cbnz	r1, 8012d3a <_puts_r+0x9e>
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	da38      	bge.n	8012d60 <_puts_r+0xc4>
 8012cee:	4622      	mov	r2, r4
 8012cf0:	210a      	movs	r1, #10
 8012cf2:	4628      	mov	r0, r5
 8012cf4:	f000 f91e 	bl	8012f34 <__swbuf_r>
 8012cf8:	3001      	adds	r0, #1
 8012cfa:	d011      	beq.n	8012d20 <_puts_r+0x84>
 8012cfc:	250a      	movs	r5, #10
 8012cfe:	e011      	b.n	8012d24 <_puts_r+0x88>
 8012d00:	4b1b      	ldr	r3, [pc, #108]	; (8012d70 <_puts_r+0xd4>)
 8012d02:	429c      	cmp	r4, r3
 8012d04:	d101      	bne.n	8012d0a <_puts_r+0x6e>
 8012d06:	68ac      	ldr	r4, [r5, #8]
 8012d08:	e7da      	b.n	8012cc0 <_puts_r+0x24>
 8012d0a:	4b1a      	ldr	r3, [pc, #104]	; (8012d74 <_puts_r+0xd8>)
 8012d0c:	429c      	cmp	r4, r3
 8012d0e:	bf08      	it	eq
 8012d10:	68ec      	ldreq	r4, [r5, #12]
 8012d12:	e7d5      	b.n	8012cc0 <_puts_r+0x24>
 8012d14:	4621      	mov	r1, r4
 8012d16:	4628      	mov	r0, r5
 8012d18:	f000 f970 	bl	8012ffc <__swsetup_r>
 8012d1c:	2800      	cmp	r0, #0
 8012d1e:	d0dd      	beq.n	8012cdc <_puts_r+0x40>
 8012d20:	f04f 35ff 	mov.w	r5, #4294967295
 8012d24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d26:	07da      	lsls	r2, r3, #31
 8012d28:	d405      	bmi.n	8012d36 <_puts_r+0x9a>
 8012d2a:	89a3      	ldrh	r3, [r4, #12]
 8012d2c:	059b      	lsls	r3, r3, #22
 8012d2e:	d402      	bmi.n	8012d36 <_puts_r+0x9a>
 8012d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d32:	f7f0 f8df 	bl	8002ef4 <__retarget_lock_release_recursive>
 8012d36:	4628      	mov	r0, r5
 8012d38:	bd70      	pop	{r4, r5, r6, pc}
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	da04      	bge.n	8012d48 <_puts_r+0xac>
 8012d3e:	69a2      	ldr	r2, [r4, #24]
 8012d40:	429a      	cmp	r2, r3
 8012d42:	dc06      	bgt.n	8012d52 <_puts_r+0xb6>
 8012d44:	290a      	cmp	r1, #10
 8012d46:	d004      	beq.n	8012d52 <_puts_r+0xb6>
 8012d48:	6823      	ldr	r3, [r4, #0]
 8012d4a:	1c5a      	adds	r2, r3, #1
 8012d4c:	6022      	str	r2, [r4, #0]
 8012d4e:	7019      	strb	r1, [r3, #0]
 8012d50:	e7c5      	b.n	8012cde <_puts_r+0x42>
 8012d52:	4622      	mov	r2, r4
 8012d54:	4628      	mov	r0, r5
 8012d56:	f000 f8ed 	bl	8012f34 <__swbuf_r>
 8012d5a:	3001      	adds	r0, #1
 8012d5c:	d1bf      	bne.n	8012cde <_puts_r+0x42>
 8012d5e:	e7df      	b.n	8012d20 <_puts_r+0x84>
 8012d60:	6823      	ldr	r3, [r4, #0]
 8012d62:	250a      	movs	r5, #10
 8012d64:	1c5a      	adds	r2, r3, #1
 8012d66:	6022      	str	r2, [r4, #0]
 8012d68:	701d      	strb	r5, [r3, #0]
 8012d6a:	e7db      	b.n	8012d24 <_puts_r+0x88>
 8012d6c:	08015194 	.word	0x08015194
 8012d70:	080151b4 	.word	0x080151b4
 8012d74:	08015174 	.word	0x08015174

08012d78 <puts>:
 8012d78:	4b02      	ldr	r3, [pc, #8]	; (8012d84 <puts+0xc>)
 8012d7a:	4601      	mov	r1, r0
 8012d7c:	6818      	ldr	r0, [r3, #0]
 8012d7e:	f7ff bf8d 	b.w	8012c9c <_puts_r>
 8012d82:	bf00      	nop
 8012d84:	20000124 	.word	0x20000124

08012d88 <cleanup_glue>:
 8012d88:	b538      	push	{r3, r4, r5, lr}
 8012d8a:	460c      	mov	r4, r1
 8012d8c:	6809      	ldr	r1, [r1, #0]
 8012d8e:	4605      	mov	r5, r0
 8012d90:	b109      	cbz	r1, 8012d96 <cleanup_glue+0xe>
 8012d92:	f7ff fff9 	bl	8012d88 <cleanup_glue>
 8012d96:	4621      	mov	r1, r4
 8012d98:	4628      	mov	r0, r5
 8012d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012d9e:	f7ff ba1b 	b.w	80121d8 <_free_r>
	...

08012da4 <_reclaim_reent>:
 8012da4:	4b2c      	ldr	r3, [pc, #176]	; (8012e58 <_reclaim_reent+0xb4>)
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	4283      	cmp	r3, r0
 8012daa:	b570      	push	{r4, r5, r6, lr}
 8012dac:	4604      	mov	r4, r0
 8012dae:	d051      	beq.n	8012e54 <_reclaim_reent+0xb0>
 8012db0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012db2:	b143      	cbz	r3, 8012dc6 <_reclaim_reent+0x22>
 8012db4:	68db      	ldr	r3, [r3, #12]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d14a      	bne.n	8012e50 <_reclaim_reent+0xac>
 8012dba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012dbc:	6819      	ldr	r1, [r3, #0]
 8012dbe:	b111      	cbz	r1, 8012dc6 <_reclaim_reent+0x22>
 8012dc0:	4620      	mov	r0, r4
 8012dc2:	f7ff fa09 	bl	80121d8 <_free_r>
 8012dc6:	6961      	ldr	r1, [r4, #20]
 8012dc8:	b111      	cbz	r1, 8012dd0 <_reclaim_reent+0x2c>
 8012dca:	4620      	mov	r0, r4
 8012dcc:	f7ff fa04 	bl	80121d8 <_free_r>
 8012dd0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012dd2:	b111      	cbz	r1, 8012dda <_reclaim_reent+0x36>
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	f7ff f9ff 	bl	80121d8 <_free_r>
 8012dda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012ddc:	b111      	cbz	r1, 8012de4 <_reclaim_reent+0x40>
 8012dde:	4620      	mov	r0, r4
 8012de0:	f7ff f9fa 	bl	80121d8 <_free_r>
 8012de4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012de6:	b111      	cbz	r1, 8012dee <_reclaim_reent+0x4a>
 8012de8:	4620      	mov	r0, r4
 8012dea:	f7ff f9f5 	bl	80121d8 <_free_r>
 8012dee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012df0:	b111      	cbz	r1, 8012df8 <_reclaim_reent+0x54>
 8012df2:	4620      	mov	r0, r4
 8012df4:	f7ff f9f0 	bl	80121d8 <_free_r>
 8012df8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012dfa:	b111      	cbz	r1, 8012e02 <_reclaim_reent+0x5e>
 8012dfc:	4620      	mov	r0, r4
 8012dfe:	f7ff f9eb 	bl	80121d8 <_free_r>
 8012e02:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012e04:	b111      	cbz	r1, 8012e0c <_reclaim_reent+0x68>
 8012e06:	4620      	mov	r0, r4
 8012e08:	f7ff f9e6 	bl	80121d8 <_free_r>
 8012e0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012e0e:	b111      	cbz	r1, 8012e16 <_reclaim_reent+0x72>
 8012e10:	4620      	mov	r0, r4
 8012e12:	f7ff f9e1 	bl	80121d8 <_free_r>
 8012e16:	69a3      	ldr	r3, [r4, #24]
 8012e18:	b1e3      	cbz	r3, 8012e54 <_reclaim_reent+0xb0>
 8012e1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012e1c:	4620      	mov	r0, r4
 8012e1e:	4798      	blx	r3
 8012e20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012e22:	b1b9      	cbz	r1, 8012e54 <_reclaim_reent+0xb0>
 8012e24:	4620      	mov	r0, r4
 8012e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e2a:	f7ff bfad 	b.w	8012d88 <cleanup_glue>
 8012e2e:	5949      	ldr	r1, [r1, r5]
 8012e30:	b941      	cbnz	r1, 8012e44 <_reclaim_reent+0xa0>
 8012e32:	3504      	adds	r5, #4
 8012e34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e36:	2d80      	cmp	r5, #128	; 0x80
 8012e38:	68d9      	ldr	r1, [r3, #12]
 8012e3a:	d1f8      	bne.n	8012e2e <_reclaim_reent+0x8a>
 8012e3c:	4620      	mov	r0, r4
 8012e3e:	f7ff f9cb 	bl	80121d8 <_free_r>
 8012e42:	e7ba      	b.n	8012dba <_reclaim_reent+0x16>
 8012e44:	680e      	ldr	r6, [r1, #0]
 8012e46:	4620      	mov	r0, r4
 8012e48:	f7ff f9c6 	bl	80121d8 <_free_r>
 8012e4c:	4631      	mov	r1, r6
 8012e4e:	e7ef      	b.n	8012e30 <_reclaim_reent+0x8c>
 8012e50:	2500      	movs	r5, #0
 8012e52:	e7ef      	b.n	8012e34 <_reclaim_reent+0x90>
 8012e54:	bd70      	pop	{r4, r5, r6, pc}
 8012e56:	bf00      	nop
 8012e58:	20000124 	.word	0x20000124

08012e5c <_sbrk_r>:
 8012e5c:	b538      	push	{r3, r4, r5, lr}
 8012e5e:	4d06      	ldr	r5, [pc, #24]	; (8012e78 <_sbrk_r+0x1c>)
 8012e60:	2300      	movs	r3, #0
 8012e62:	4604      	mov	r4, r0
 8012e64:	4608      	mov	r0, r1
 8012e66:	602b      	str	r3, [r5, #0]
 8012e68:	f7ee fe70 	bl	8001b4c <_sbrk>
 8012e6c:	1c43      	adds	r3, r0, #1
 8012e6e:	d102      	bne.n	8012e76 <_sbrk_r+0x1a>
 8012e70:	682b      	ldr	r3, [r5, #0]
 8012e72:	b103      	cbz	r3, 8012e76 <_sbrk_r+0x1a>
 8012e74:	6023      	str	r3, [r4, #0]
 8012e76:	bd38      	pop	{r3, r4, r5, pc}
 8012e78:	20006ca8 	.word	0x20006ca8

08012e7c <__sread>:
 8012e7c:	b510      	push	{r4, lr}
 8012e7e:	460c      	mov	r4, r1
 8012e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e84:	f001 fdf0 	bl	8014a68 <_read_r>
 8012e88:	2800      	cmp	r0, #0
 8012e8a:	bfab      	itete	ge
 8012e8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8012e90:	181b      	addge	r3, r3, r0
 8012e92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012e96:	bfac      	ite	ge
 8012e98:	6563      	strge	r3, [r4, #84]	; 0x54
 8012e9a:	81a3      	strhlt	r3, [r4, #12]
 8012e9c:	bd10      	pop	{r4, pc}

08012e9e <__swrite>:
 8012e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ea2:	461f      	mov	r7, r3
 8012ea4:	898b      	ldrh	r3, [r1, #12]
 8012ea6:	05db      	lsls	r3, r3, #23
 8012ea8:	4605      	mov	r5, r0
 8012eaa:	460c      	mov	r4, r1
 8012eac:	4616      	mov	r6, r2
 8012eae:	d505      	bpl.n	8012ebc <__swrite+0x1e>
 8012eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012eb4:	2302      	movs	r3, #2
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	f001 f85e 	bl	8013f78 <_lseek_r>
 8012ebc:	89a3      	ldrh	r3, [r4, #12]
 8012ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012ec6:	81a3      	strh	r3, [r4, #12]
 8012ec8:	4632      	mov	r2, r6
 8012eca:	463b      	mov	r3, r7
 8012ecc:	4628      	mov	r0, r5
 8012ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ed2:	f000 b881 	b.w	8012fd8 <_write_r>

08012ed6 <__sseek>:
 8012ed6:	b510      	push	{r4, lr}
 8012ed8:	460c      	mov	r4, r1
 8012eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ede:	f001 f84b 	bl	8013f78 <_lseek_r>
 8012ee2:	1c43      	adds	r3, r0, #1
 8012ee4:	89a3      	ldrh	r3, [r4, #12]
 8012ee6:	bf15      	itete	ne
 8012ee8:	6560      	strne	r0, [r4, #84]	; 0x54
 8012eea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012eee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012ef2:	81a3      	strheq	r3, [r4, #12]
 8012ef4:	bf18      	it	ne
 8012ef6:	81a3      	strhne	r3, [r4, #12]
 8012ef8:	bd10      	pop	{r4, pc}

08012efa <__sclose>:
 8012efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012efe:	f000 b8eb 	b.w	80130d8 <_close_r>
	...

08012f04 <viprintf>:
 8012f04:	b513      	push	{r0, r1, r4, lr}
 8012f06:	460b      	mov	r3, r1
 8012f08:	4909      	ldr	r1, [pc, #36]	; (8012f30 <viprintf+0x2c>)
 8012f0a:	680c      	ldr	r4, [r1, #0]
 8012f0c:	4602      	mov	r2, r0
 8012f0e:	b144      	cbz	r4, 8012f22 <viprintf+0x1e>
 8012f10:	69a1      	ldr	r1, [r4, #24]
 8012f12:	b931      	cbnz	r1, 8012f22 <viprintf+0x1e>
 8012f14:	e9cd 0300 	strd	r0, r3, [sp]
 8012f18:	4620      	mov	r0, r4
 8012f1a:	f7ff f87d 	bl	8012018 <__sinit>
 8012f1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f22:	68a1      	ldr	r1, [r4, #8]
 8012f24:	4620      	mov	r0, r4
 8012f26:	b002      	add	sp, #8
 8012f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f2c:	f001 bc6c 	b.w	8014808 <_vfiprintf_r>
 8012f30:	20000124 	.word	0x20000124

08012f34 <__swbuf_r>:
 8012f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f36:	460e      	mov	r6, r1
 8012f38:	4614      	mov	r4, r2
 8012f3a:	4605      	mov	r5, r0
 8012f3c:	b118      	cbz	r0, 8012f46 <__swbuf_r+0x12>
 8012f3e:	6983      	ldr	r3, [r0, #24]
 8012f40:	b90b      	cbnz	r3, 8012f46 <__swbuf_r+0x12>
 8012f42:	f7ff f869 	bl	8012018 <__sinit>
 8012f46:	4b21      	ldr	r3, [pc, #132]	; (8012fcc <__swbuf_r+0x98>)
 8012f48:	429c      	cmp	r4, r3
 8012f4a:	d12b      	bne.n	8012fa4 <__swbuf_r+0x70>
 8012f4c:	686c      	ldr	r4, [r5, #4]
 8012f4e:	69a3      	ldr	r3, [r4, #24]
 8012f50:	60a3      	str	r3, [r4, #8]
 8012f52:	89a3      	ldrh	r3, [r4, #12]
 8012f54:	071a      	lsls	r2, r3, #28
 8012f56:	d52f      	bpl.n	8012fb8 <__swbuf_r+0x84>
 8012f58:	6923      	ldr	r3, [r4, #16]
 8012f5a:	b36b      	cbz	r3, 8012fb8 <__swbuf_r+0x84>
 8012f5c:	6923      	ldr	r3, [r4, #16]
 8012f5e:	6820      	ldr	r0, [r4, #0]
 8012f60:	1ac0      	subs	r0, r0, r3
 8012f62:	6963      	ldr	r3, [r4, #20]
 8012f64:	b2f6      	uxtb	r6, r6
 8012f66:	4283      	cmp	r3, r0
 8012f68:	4637      	mov	r7, r6
 8012f6a:	dc04      	bgt.n	8012f76 <__swbuf_r+0x42>
 8012f6c:	4621      	mov	r1, r4
 8012f6e:	4628      	mov	r0, r5
 8012f70:	f000 ffc2 	bl	8013ef8 <_fflush_r>
 8012f74:	bb30      	cbnz	r0, 8012fc4 <__swbuf_r+0x90>
 8012f76:	68a3      	ldr	r3, [r4, #8]
 8012f78:	3b01      	subs	r3, #1
 8012f7a:	60a3      	str	r3, [r4, #8]
 8012f7c:	6823      	ldr	r3, [r4, #0]
 8012f7e:	1c5a      	adds	r2, r3, #1
 8012f80:	6022      	str	r2, [r4, #0]
 8012f82:	701e      	strb	r6, [r3, #0]
 8012f84:	6963      	ldr	r3, [r4, #20]
 8012f86:	3001      	adds	r0, #1
 8012f88:	4283      	cmp	r3, r0
 8012f8a:	d004      	beq.n	8012f96 <__swbuf_r+0x62>
 8012f8c:	89a3      	ldrh	r3, [r4, #12]
 8012f8e:	07db      	lsls	r3, r3, #31
 8012f90:	d506      	bpl.n	8012fa0 <__swbuf_r+0x6c>
 8012f92:	2e0a      	cmp	r6, #10
 8012f94:	d104      	bne.n	8012fa0 <__swbuf_r+0x6c>
 8012f96:	4621      	mov	r1, r4
 8012f98:	4628      	mov	r0, r5
 8012f9a:	f000 ffad 	bl	8013ef8 <_fflush_r>
 8012f9e:	b988      	cbnz	r0, 8012fc4 <__swbuf_r+0x90>
 8012fa0:	4638      	mov	r0, r7
 8012fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fa4:	4b0a      	ldr	r3, [pc, #40]	; (8012fd0 <__swbuf_r+0x9c>)
 8012fa6:	429c      	cmp	r4, r3
 8012fa8:	d101      	bne.n	8012fae <__swbuf_r+0x7a>
 8012faa:	68ac      	ldr	r4, [r5, #8]
 8012fac:	e7cf      	b.n	8012f4e <__swbuf_r+0x1a>
 8012fae:	4b09      	ldr	r3, [pc, #36]	; (8012fd4 <__swbuf_r+0xa0>)
 8012fb0:	429c      	cmp	r4, r3
 8012fb2:	bf08      	it	eq
 8012fb4:	68ec      	ldreq	r4, [r5, #12]
 8012fb6:	e7ca      	b.n	8012f4e <__swbuf_r+0x1a>
 8012fb8:	4621      	mov	r1, r4
 8012fba:	4628      	mov	r0, r5
 8012fbc:	f000 f81e 	bl	8012ffc <__swsetup_r>
 8012fc0:	2800      	cmp	r0, #0
 8012fc2:	d0cb      	beq.n	8012f5c <__swbuf_r+0x28>
 8012fc4:	f04f 37ff 	mov.w	r7, #4294967295
 8012fc8:	e7ea      	b.n	8012fa0 <__swbuf_r+0x6c>
 8012fca:	bf00      	nop
 8012fcc:	08015194 	.word	0x08015194
 8012fd0:	080151b4 	.word	0x080151b4
 8012fd4:	08015174 	.word	0x08015174

08012fd8 <_write_r>:
 8012fd8:	b538      	push	{r3, r4, r5, lr}
 8012fda:	4d07      	ldr	r5, [pc, #28]	; (8012ff8 <_write_r+0x20>)
 8012fdc:	4604      	mov	r4, r0
 8012fde:	4608      	mov	r0, r1
 8012fe0:	4611      	mov	r1, r2
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	602a      	str	r2, [r5, #0]
 8012fe6:	461a      	mov	r2, r3
 8012fe8:	f7ed ffa7 	bl	8000f3a <_write>
 8012fec:	1c43      	adds	r3, r0, #1
 8012fee:	d102      	bne.n	8012ff6 <_write_r+0x1e>
 8012ff0:	682b      	ldr	r3, [r5, #0]
 8012ff2:	b103      	cbz	r3, 8012ff6 <_write_r+0x1e>
 8012ff4:	6023      	str	r3, [r4, #0]
 8012ff6:	bd38      	pop	{r3, r4, r5, pc}
 8012ff8:	20006ca8 	.word	0x20006ca8

08012ffc <__swsetup_r>:
 8012ffc:	4b32      	ldr	r3, [pc, #200]	; (80130c8 <__swsetup_r+0xcc>)
 8012ffe:	b570      	push	{r4, r5, r6, lr}
 8013000:	681d      	ldr	r5, [r3, #0]
 8013002:	4606      	mov	r6, r0
 8013004:	460c      	mov	r4, r1
 8013006:	b125      	cbz	r5, 8013012 <__swsetup_r+0x16>
 8013008:	69ab      	ldr	r3, [r5, #24]
 801300a:	b913      	cbnz	r3, 8013012 <__swsetup_r+0x16>
 801300c:	4628      	mov	r0, r5
 801300e:	f7ff f803 	bl	8012018 <__sinit>
 8013012:	4b2e      	ldr	r3, [pc, #184]	; (80130cc <__swsetup_r+0xd0>)
 8013014:	429c      	cmp	r4, r3
 8013016:	d10f      	bne.n	8013038 <__swsetup_r+0x3c>
 8013018:	686c      	ldr	r4, [r5, #4]
 801301a:	89a3      	ldrh	r3, [r4, #12]
 801301c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013020:	0719      	lsls	r1, r3, #28
 8013022:	d42c      	bmi.n	801307e <__swsetup_r+0x82>
 8013024:	06dd      	lsls	r5, r3, #27
 8013026:	d411      	bmi.n	801304c <__swsetup_r+0x50>
 8013028:	2309      	movs	r3, #9
 801302a:	6033      	str	r3, [r6, #0]
 801302c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013030:	81a3      	strh	r3, [r4, #12]
 8013032:	f04f 30ff 	mov.w	r0, #4294967295
 8013036:	e03e      	b.n	80130b6 <__swsetup_r+0xba>
 8013038:	4b25      	ldr	r3, [pc, #148]	; (80130d0 <__swsetup_r+0xd4>)
 801303a:	429c      	cmp	r4, r3
 801303c:	d101      	bne.n	8013042 <__swsetup_r+0x46>
 801303e:	68ac      	ldr	r4, [r5, #8]
 8013040:	e7eb      	b.n	801301a <__swsetup_r+0x1e>
 8013042:	4b24      	ldr	r3, [pc, #144]	; (80130d4 <__swsetup_r+0xd8>)
 8013044:	429c      	cmp	r4, r3
 8013046:	bf08      	it	eq
 8013048:	68ec      	ldreq	r4, [r5, #12]
 801304a:	e7e6      	b.n	801301a <__swsetup_r+0x1e>
 801304c:	0758      	lsls	r0, r3, #29
 801304e:	d512      	bpl.n	8013076 <__swsetup_r+0x7a>
 8013050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013052:	b141      	cbz	r1, 8013066 <__swsetup_r+0x6a>
 8013054:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013058:	4299      	cmp	r1, r3
 801305a:	d002      	beq.n	8013062 <__swsetup_r+0x66>
 801305c:	4630      	mov	r0, r6
 801305e:	f7ff f8bb 	bl	80121d8 <_free_r>
 8013062:	2300      	movs	r3, #0
 8013064:	6363      	str	r3, [r4, #52]	; 0x34
 8013066:	89a3      	ldrh	r3, [r4, #12]
 8013068:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801306c:	81a3      	strh	r3, [r4, #12]
 801306e:	2300      	movs	r3, #0
 8013070:	6063      	str	r3, [r4, #4]
 8013072:	6923      	ldr	r3, [r4, #16]
 8013074:	6023      	str	r3, [r4, #0]
 8013076:	89a3      	ldrh	r3, [r4, #12]
 8013078:	f043 0308 	orr.w	r3, r3, #8
 801307c:	81a3      	strh	r3, [r4, #12]
 801307e:	6923      	ldr	r3, [r4, #16]
 8013080:	b94b      	cbnz	r3, 8013096 <__swsetup_r+0x9a>
 8013082:	89a3      	ldrh	r3, [r4, #12]
 8013084:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801308c:	d003      	beq.n	8013096 <__swsetup_r+0x9a>
 801308e:	4621      	mov	r1, r4
 8013090:	4630      	mov	r0, r6
 8013092:	f000 ffa9 	bl	8013fe8 <__smakebuf_r>
 8013096:	89a0      	ldrh	r0, [r4, #12]
 8013098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801309c:	f010 0301 	ands.w	r3, r0, #1
 80130a0:	d00a      	beq.n	80130b8 <__swsetup_r+0xbc>
 80130a2:	2300      	movs	r3, #0
 80130a4:	60a3      	str	r3, [r4, #8]
 80130a6:	6963      	ldr	r3, [r4, #20]
 80130a8:	425b      	negs	r3, r3
 80130aa:	61a3      	str	r3, [r4, #24]
 80130ac:	6923      	ldr	r3, [r4, #16]
 80130ae:	b943      	cbnz	r3, 80130c2 <__swsetup_r+0xc6>
 80130b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80130b4:	d1ba      	bne.n	801302c <__swsetup_r+0x30>
 80130b6:	bd70      	pop	{r4, r5, r6, pc}
 80130b8:	0781      	lsls	r1, r0, #30
 80130ba:	bf58      	it	pl
 80130bc:	6963      	ldrpl	r3, [r4, #20]
 80130be:	60a3      	str	r3, [r4, #8]
 80130c0:	e7f4      	b.n	80130ac <__swsetup_r+0xb0>
 80130c2:	2000      	movs	r0, #0
 80130c4:	e7f7      	b.n	80130b6 <__swsetup_r+0xba>
 80130c6:	bf00      	nop
 80130c8:	20000124 	.word	0x20000124
 80130cc:	08015194 	.word	0x08015194
 80130d0:	080151b4 	.word	0x080151b4
 80130d4:	08015174 	.word	0x08015174

080130d8 <_close_r>:
 80130d8:	b538      	push	{r3, r4, r5, lr}
 80130da:	4d06      	ldr	r5, [pc, #24]	; (80130f4 <_close_r+0x1c>)
 80130dc:	2300      	movs	r3, #0
 80130de:	4604      	mov	r4, r0
 80130e0:	4608      	mov	r0, r1
 80130e2:	602b      	str	r3, [r5, #0]
 80130e4:	f7ee fcfd 	bl	8001ae2 <_close>
 80130e8:	1c43      	adds	r3, r0, #1
 80130ea:	d102      	bne.n	80130f2 <_close_r+0x1a>
 80130ec:	682b      	ldr	r3, [r5, #0]
 80130ee:	b103      	cbz	r3, 80130f2 <_close_r+0x1a>
 80130f0:	6023      	str	r3, [r4, #0]
 80130f2:	bd38      	pop	{r3, r4, r5, pc}
 80130f4:	20006ca8 	.word	0x20006ca8

080130f8 <quorem>:
 80130f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130fc:	6903      	ldr	r3, [r0, #16]
 80130fe:	690c      	ldr	r4, [r1, #16]
 8013100:	42a3      	cmp	r3, r4
 8013102:	4607      	mov	r7, r0
 8013104:	f2c0 8081 	blt.w	801320a <quorem+0x112>
 8013108:	3c01      	subs	r4, #1
 801310a:	f101 0814 	add.w	r8, r1, #20
 801310e:	f100 0514 	add.w	r5, r0, #20
 8013112:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013116:	9301      	str	r3, [sp, #4]
 8013118:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801311c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013120:	3301      	adds	r3, #1
 8013122:	429a      	cmp	r2, r3
 8013124:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013128:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801312c:	fbb2 f6f3 	udiv	r6, r2, r3
 8013130:	d331      	bcc.n	8013196 <quorem+0x9e>
 8013132:	f04f 0e00 	mov.w	lr, #0
 8013136:	4640      	mov	r0, r8
 8013138:	46ac      	mov	ip, r5
 801313a:	46f2      	mov	sl, lr
 801313c:	f850 2b04 	ldr.w	r2, [r0], #4
 8013140:	b293      	uxth	r3, r2
 8013142:	fb06 e303 	mla	r3, r6, r3, lr
 8013146:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801314a:	b29b      	uxth	r3, r3
 801314c:	ebaa 0303 	sub.w	r3, sl, r3
 8013150:	f8dc a000 	ldr.w	sl, [ip]
 8013154:	0c12      	lsrs	r2, r2, #16
 8013156:	fa13 f38a 	uxtah	r3, r3, sl
 801315a:	fb06 e202 	mla	r2, r6, r2, lr
 801315e:	9300      	str	r3, [sp, #0]
 8013160:	9b00      	ldr	r3, [sp, #0]
 8013162:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013166:	b292      	uxth	r2, r2
 8013168:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801316c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013170:	f8bd 3000 	ldrh.w	r3, [sp]
 8013174:	4581      	cmp	r9, r0
 8013176:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801317a:	f84c 3b04 	str.w	r3, [ip], #4
 801317e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013182:	d2db      	bcs.n	801313c <quorem+0x44>
 8013184:	f855 300b 	ldr.w	r3, [r5, fp]
 8013188:	b92b      	cbnz	r3, 8013196 <quorem+0x9e>
 801318a:	9b01      	ldr	r3, [sp, #4]
 801318c:	3b04      	subs	r3, #4
 801318e:	429d      	cmp	r5, r3
 8013190:	461a      	mov	r2, r3
 8013192:	d32e      	bcc.n	80131f2 <quorem+0xfa>
 8013194:	613c      	str	r4, [r7, #16]
 8013196:	4638      	mov	r0, r7
 8013198:	f001 f9f4 	bl	8014584 <__mcmp>
 801319c:	2800      	cmp	r0, #0
 801319e:	db24      	blt.n	80131ea <quorem+0xf2>
 80131a0:	3601      	adds	r6, #1
 80131a2:	4628      	mov	r0, r5
 80131a4:	f04f 0c00 	mov.w	ip, #0
 80131a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80131ac:	f8d0 e000 	ldr.w	lr, [r0]
 80131b0:	b293      	uxth	r3, r2
 80131b2:	ebac 0303 	sub.w	r3, ip, r3
 80131b6:	0c12      	lsrs	r2, r2, #16
 80131b8:	fa13 f38e 	uxtah	r3, r3, lr
 80131bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80131c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80131c4:	b29b      	uxth	r3, r3
 80131c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80131ca:	45c1      	cmp	r9, r8
 80131cc:	f840 3b04 	str.w	r3, [r0], #4
 80131d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80131d4:	d2e8      	bcs.n	80131a8 <quorem+0xb0>
 80131d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80131da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80131de:	b922      	cbnz	r2, 80131ea <quorem+0xf2>
 80131e0:	3b04      	subs	r3, #4
 80131e2:	429d      	cmp	r5, r3
 80131e4:	461a      	mov	r2, r3
 80131e6:	d30a      	bcc.n	80131fe <quorem+0x106>
 80131e8:	613c      	str	r4, [r7, #16]
 80131ea:	4630      	mov	r0, r6
 80131ec:	b003      	add	sp, #12
 80131ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131f2:	6812      	ldr	r2, [r2, #0]
 80131f4:	3b04      	subs	r3, #4
 80131f6:	2a00      	cmp	r2, #0
 80131f8:	d1cc      	bne.n	8013194 <quorem+0x9c>
 80131fa:	3c01      	subs	r4, #1
 80131fc:	e7c7      	b.n	801318e <quorem+0x96>
 80131fe:	6812      	ldr	r2, [r2, #0]
 8013200:	3b04      	subs	r3, #4
 8013202:	2a00      	cmp	r2, #0
 8013204:	d1f0      	bne.n	80131e8 <quorem+0xf0>
 8013206:	3c01      	subs	r4, #1
 8013208:	e7eb      	b.n	80131e2 <quorem+0xea>
 801320a:	2000      	movs	r0, #0
 801320c:	e7ee      	b.n	80131ec <quorem+0xf4>
	...

08013210 <_dtoa_r>:
 8013210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013214:	ed2d 8b04 	vpush	{d8-d9}
 8013218:	ec57 6b10 	vmov	r6, r7, d0
 801321c:	b093      	sub	sp, #76	; 0x4c
 801321e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013220:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013224:	9106      	str	r1, [sp, #24]
 8013226:	ee10 aa10 	vmov	sl, s0
 801322a:	4604      	mov	r4, r0
 801322c:	9209      	str	r2, [sp, #36]	; 0x24
 801322e:	930c      	str	r3, [sp, #48]	; 0x30
 8013230:	46bb      	mov	fp, r7
 8013232:	b975      	cbnz	r5, 8013252 <_dtoa_r+0x42>
 8013234:	2010      	movs	r0, #16
 8013236:	f7fe ffb1 	bl	801219c <malloc>
 801323a:	4602      	mov	r2, r0
 801323c:	6260      	str	r0, [r4, #36]	; 0x24
 801323e:	b920      	cbnz	r0, 801324a <_dtoa_r+0x3a>
 8013240:	4ba7      	ldr	r3, [pc, #668]	; (80134e0 <_dtoa_r+0x2d0>)
 8013242:	21ea      	movs	r1, #234	; 0xea
 8013244:	48a7      	ldr	r0, [pc, #668]	; (80134e4 <_dtoa_r+0x2d4>)
 8013246:	f001 fc21 	bl	8014a8c <__assert_func>
 801324a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801324e:	6005      	str	r5, [r0, #0]
 8013250:	60c5      	str	r5, [r0, #12]
 8013252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013254:	6819      	ldr	r1, [r3, #0]
 8013256:	b151      	cbz	r1, 801326e <_dtoa_r+0x5e>
 8013258:	685a      	ldr	r2, [r3, #4]
 801325a:	604a      	str	r2, [r1, #4]
 801325c:	2301      	movs	r3, #1
 801325e:	4093      	lsls	r3, r2
 8013260:	608b      	str	r3, [r1, #8]
 8013262:	4620      	mov	r0, r4
 8013264:	f000 ff4c 	bl	8014100 <_Bfree>
 8013268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801326a:	2200      	movs	r2, #0
 801326c:	601a      	str	r2, [r3, #0]
 801326e:	1e3b      	subs	r3, r7, #0
 8013270:	bfaa      	itet	ge
 8013272:	2300      	movge	r3, #0
 8013274:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8013278:	f8c8 3000 	strge.w	r3, [r8]
 801327c:	4b9a      	ldr	r3, [pc, #616]	; (80134e8 <_dtoa_r+0x2d8>)
 801327e:	bfbc      	itt	lt
 8013280:	2201      	movlt	r2, #1
 8013282:	f8c8 2000 	strlt.w	r2, [r8]
 8013286:	ea33 030b 	bics.w	r3, r3, fp
 801328a:	d11b      	bne.n	80132c4 <_dtoa_r+0xb4>
 801328c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801328e:	f242 730f 	movw	r3, #9999	; 0x270f
 8013292:	6013      	str	r3, [r2, #0]
 8013294:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013298:	4333      	orrs	r3, r6
 801329a:	f000 8592 	beq.w	8013dc2 <_dtoa_r+0xbb2>
 801329e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80132a0:	b963      	cbnz	r3, 80132bc <_dtoa_r+0xac>
 80132a2:	4b92      	ldr	r3, [pc, #584]	; (80134ec <_dtoa_r+0x2dc>)
 80132a4:	e022      	b.n	80132ec <_dtoa_r+0xdc>
 80132a6:	4b92      	ldr	r3, [pc, #584]	; (80134f0 <_dtoa_r+0x2e0>)
 80132a8:	9301      	str	r3, [sp, #4]
 80132aa:	3308      	adds	r3, #8
 80132ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80132ae:	6013      	str	r3, [r2, #0]
 80132b0:	9801      	ldr	r0, [sp, #4]
 80132b2:	b013      	add	sp, #76	; 0x4c
 80132b4:	ecbd 8b04 	vpop	{d8-d9}
 80132b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132bc:	4b8b      	ldr	r3, [pc, #556]	; (80134ec <_dtoa_r+0x2dc>)
 80132be:	9301      	str	r3, [sp, #4]
 80132c0:	3303      	adds	r3, #3
 80132c2:	e7f3      	b.n	80132ac <_dtoa_r+0x9c>
 80132c4:	2200      	movs	r2, #0
 80132c6:	2300      	movs	r3, #0
 80132c8:	4650      	mov	r0, sl
 80132ca:	4659      	mov	r1, fp
 80132cc:	f7ed fc1c 	bl	8000b08 <__aeabi_dcmpeq>
 80132d0:	ec4b ab19 	vmov	d9, sl, fp
 80132d4:	4680      	mov	r8, r0
 80132d6:	b158      	cbz	r0, 80132f0 <_dtoa_r+0xe0>
 80132d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80132da:	2301      	movs	r3, #1
 80132dc:	6013      	str	r3, [r2, #0]
 80132de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	f000 856b 	beq.w	8013dbc <_dtoa_r+0xbac>
 80132e6:	4883      	ldr	r0, [pc, #524]	; (80134f4 <_dtoa_r+0x2e4>)
 80132e8:	6018      	str	r0, [r3, #0]
 80132ea:	1e43      	subs	r3, r0, #1
 80132ec:	9301      	str	r3, [sp, #4]
 80132ee:	e7df      	b.n	80132b0 <_dtoa_r+0xa0>
 80132f0:	ec4b ab10 	vmov	d0, sl, fp
 80132f4:	aa10      	add	r2, sp, #64	; 0x40
 80132f6:	a911      	add	r1, sp, #68	; 0x44
 80132f8:	4620      	mov	r0, r4
 80132fa:	f001 f9e9 	bl	80146d0 <__d2b>
 80132fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8013302:	ee08 0a10 	vmov	s16, r0
 8013306:	2d00      	cmp	r5, #0
 8013308:	f000 8084 	beq.w	8013414 <_dtoa_r+0x204>
 801330c:	ee19 3a90 	vmov	r3, s19
 8013310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013314:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013318:	4656      	mov	r6, sl
 801331a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801331e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013322:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8013326:	4b74      	ldr	r3, [pc, #464]	; (80134f8 <_dtoa_r+0x2e8>)
 8013328:	2200      	movs	r2, #0
 801332a:	4630      	mov	r0, r6
 801332c:	4639      	mov	r1, r7
 801332e:	f7ec ffcb 	bl	80002c8 <__aeabi_dsub>
 8013332:	a365      	add	r3, pc, #404	; (adr r3, 80134c8 <_dtoa_r+0x2b8>)
 8013334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013338:	f7ed f97e 	bl	8000638 <__aeabi_dmul>
 801333c:	a364      	add	r3, pc, #400	; (adr r3, 80134d0 <_dtoa_r+0x2c0>)
 801333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013342:	f7ec ffc3 	bl	80002cc <__adddf3>
 8013346:	4606      	mov	r6, r0
 8013348:	4628      	mov	r0, r5
 801334a:	460f      	mov	r7, r1
 801334c:	f7ed f90a 	bl	8000564 <__aeabi_i2d>
 8013350:	a361      	add	r3, pc, #388	; (adr r3, 80134d8 <_dtoa_r+0x2c8>)
 8013352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013356:	f7ed f96f 	bl	8000638 <__aeabi_dmul>
 801335a:	4602      	mov	r2, r0
 801335c:	460b      	mov	r3, r1
 801335e:	4630      	mov	r0, r6
 8013360:	4639      	mov	r1, r7
 8013362:	f7ec ffb3 	bl	80002cc <__adddf3>
 8013366:	4606      	mov	r6, r0
 8013368:	460f      	mov	r7, r1
 801336a:	f7ed fc15 	bl	8000b98 <__aeabi_d2iz>
 801336e:	2200      	movs	r2, #0
 8013370:	9000      	str	r0, [sp, #0]
 8013372:	2300      	movs	r3, #0
 8013374:	4630      	mov	r0, r6
 8013376:	4639      	mov	r1, r7
 8013378:	f7ed fbd0 	bl	8000b1c <__aeabi_dcmplt>
 801337c:	b150      	cbz	r0, 8013394 <_dtoa_r+0x184>
 801337e:	9800      	ldr	r0, [sp, #0]
 8013380:	f7ed f8f0 	bl	8000564 <__aeabi_i2d>
 8013384:	4632      	mov	r2, r6
 8013386:	463b      	mov	r3, r7
 8013388:	f7ed fbbe 	bl	8000b08 <__aeabi_dcmpeq>
 801338c:	b910      	cbnz	r0, 8013394 <_dtoa_r+0x184>
 801338e:	9b00      	ldr	r3, [sp, #0]
 8013390:	3b01      	subs	r3, #1
 8013392:	9300      	str	r3, [sp, #0]
 8013394:	9b00      	ldr	r3, [sp, #0]
 8013396:	2b16      	cmp	r3, #22
 8013398:	d85a      	bhi.n	8013450 <_dtoa_r+0x240>
 801339a:	9a00      	ldr	r2, [sp, #0]
 801339c:	4b57      	ldr	r3, [pc, #348]	; (80134fc <_dtoa_r+0x2ec>)
 801339e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80133a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133a6:	ec51 0b19 	vmov	r0, r1, d9
 80133aa:	f7ed fbb7 	bl	8000b1c <__aeabi_dcmplt>
 80133ae:	2800      	cmp	r0, #0
 80133b0:	d050      	beq.n	8013454 <_dtoa_r+0x244>
 80133b2:	9b00      	ldr	r3, [sp, #0]
 80133b4:	3b01      	subs	r3, #1
 80133b6:	9300      	str	r3, [sp, #0]
 80133b8:	2300      	movs	r3, #0
 80133ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80133bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80133be:	1b5d      	subs	r5, r3, r5
 80133c0:	1e6b      	subs	r3, r5, #1
 80133c2:	9305      	str	r3, [sp, #20]
 80133c4:	bf45      	ittet	mi
 80133c6:	f1c5 0301 	rsbmi	r3, r5, #1
 80133ca:	9304      	strmi	r3, [sp, #16]
 80133cc:	2300      	movpl	r3, #0
 80133ce:	2300      	movmi	r3, #0
 80133d0:	bf4c      	ite	mi
 80133d2:	9305      	strmi	r3, [sp, #20]
 80133d4:	9304      	strpl	r3, [sp, #16]
 80133d6:	9b00      	ldr	r3, [sp, #0]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	db3d      	blt.n	8013458 <_dtoa_r+0x248>
 80133dc:	9b05      	ldr	r3, [sp, #20]
 80133de:	9a00      	ldr	r2, [sp, #0]
 80133e0:	920a      	str	r2, [sp, #40]	; 0x28
 80133e2:	4413      	add	r3, r2
 80133e4:	9305      	str	r3, [sp, #20]
 80133e6:	2300      	movs	r3, #0
 80133e8:	9307      	str	r3, [sp, #28]
 80133ea:	9b06      	ldr	r3, [sp, #24]
 80133ec:	2b09      	cmp	r3, #9
 80133ee:	f200 8089 	bhi.w	8013504 <_dtoa_r+0x2f4>
 80133f2:	2b05      	cmp	r3, #5
 80133f4:	bfc4      	itt	gt
 80133f6:	3b04      	subgt	r3, #4
 80133f8:	9306      	strgt	r3, [sp, #24]
 80133fa:	9b06      	ldr	r3, [sp, #24]
 80133fc:	f1a3 0302 	sub.w	r3, r3, #2
 8013400:	bfcc      	ite	gt
 8013402:	2500      	movgt	r5, #0
 8013404:	2501      	movle	r5, #1
 8013406:	2b03      	cmp	r3, #3
 8013408:	f200 8087 	bhi.w	801351a <_dtoa_r+0x30a>
 801340c:	e8df f003 	tbb	[pc, r3]
 8013410:	59383a2d 	.word	0x59383a2d
 8013414:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013418:	441d      	add	r5, r3
 801341a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801341e:	2b20      	cmp	r3, #32
 8013420:	bfc1      	itttt	gt
 8013422:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013426:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801342a:	fa0b f303 	lslgt.w	r3, fp, r3
 801342e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013432:	bfda      	itte	le
 8013434:	f1c3 0320 	rsble	r3, r3, #32
 8013438:	fa06 f003 	lslle.w	r0, r6, r3
 801343c:	4318      	orrgt	r0, r3
 801343e:	f7ed f881 	bl	8000544 <__aeabi_ui2d>
 8013442:	2301      	movs	r3, #1
 8013444:	4606      	mov	r6, r0
 8013446:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801344a:	3d01      	subs	r5, #1
 801344c:	930e      	str	r3, [sp, #56]	; 0x38
 801344e:	e76a      	b.n	8013326 <_dtoa_r+0x116>
 8013450:	2301      	movs	r3, #1
 8013452:	e7b2      	b.n	80133ba <_dtoa_r+0x1aa>
 8013454:	900b      	str	r0, [sp, #44]	; 0x2c
 8013456:	e7b1      	b.n	80133bc <_dtoa_r+0x1ac>
 8013458:	9b04      	ldr	r3, [sp, #16]
 801345a:	9a00      	ldr	r2, [sp, #0]
 801345c:	1a9b      	subs	r3, r3, r2
 801345e:	9304      	str	r3, [sp, #16]
 8013460:	4253      	negs	r3, r2
 8013462:	9307      	str	r3, [sp, #28]
 8013464:	2300      	movs	r3, #0
 8013466:	930a      	str	r3, [sp, #40]	; 0x28
 8013468:	e7bf      	b.n	80133ea <_dtoa_r+0x1da>
 801346a:	2300      	movs	r3, #0
 801346c:	9308      	str	r3, [sp, #32]
 801346e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013470:	2b00      	cmp	r3, #0
 8013472:	dc55      	bgt.n	8013520 <_dtoa_r+0x310>
 8013474:	2301      	movs	r3, #1
 8013476:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801347a:	461a      	mov	r2, r3
 801347c:	9209      	str	r2, [sp, #36]	; 0x24
 801347e:	e00c      	b.n	801349a <_dtoa_r+0x28a>
 8013480:	2301      	movs	r3, #1
 8013482:	e7f3      	b.n	801346c <_dtoa_r+0x25c>
 8013484:	2300      	movs	r3, #0
 8013486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013488:	9308      	str	r3, [sp, #32]
 801348a:	9b00      	ldr	r3, [sp, #0]
 801348c:	4413      	add	r3, r2
 801348e:	9302      	str	r3, [sp, #8]
 8013490:	3301      	adds	r3, #1
 8013492:	2b01      	cmp	r3, #1
 8013494:	9303      	str	r3, [sp, #12]
 8013496:	bfb8      	it	lt
 8013498:	2301      	movlt	r3, #1
 801349a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801349c:	2200      	movs	r2, #0
 801349e:	6042      	str	r2, [r0, #4]
 80134a0:	2204      	movs	r2, #4
 80134a2:	f102 0614 	add.w	r6, r2, #20
 80134a6:	429e      	cmp	r6, r3
 80134a8:	6841      	ldr	r1, [r0, #4]
 80134aa:	d93d      	bls.n	8013528 <_dtoa_r+0x318>
 80134ac:	4620      	mov	r0, r4
 80134ae:	f000 fde7 	bl	8014080 <_Balloc>
 80134b2:	9001      	str	r0, [sp, #4]
 80134b4:	2800      	cmp	r0, #0
 80134b6:	d13b      	bne.n	8013530 <_dtoa_r+0x320>
 80134b8:	4b11      	ldr	r3, [pc, #68]	; (8013500 <_dtoa_r+0x2f0>)
 80134ba:	4602      	mov	r2, r0
 80134bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80134c0:	e6c0      	b.n	8013244 <_dtoa_r+0x34>
 80134c2:	2301      	movs	r3, #1
 80134c4:	e7df      	b.n	8013486 <_dtoa_r+0x276>
 80134c6:	bf00      	nop
 80134c8:	636f4361 	.word	0x636f4361
 80134cc:	3fd287a7 	.word	0x3fd287a7
 80134d0:	8b60c8b3 	.word	0x8b60c8b3
 80134d4:	3fc68a28 	.word	0x3fc68a28
 80134d8:	509f79fb 	.word	0x509f79fb
 80134dc:	3fd34413 	.word	0x3fd34413
 80134e0:	08015219 	.word	0x08015219
 80134e4:	08015230 	.word	0x08015230
 80134e8:	7ff00000 	.word	0x7ff00000
 80134ec:	08015215 	.word	0x08015215
 80134f0:	0801520c 	.word	0x0801520c
 80134f4:	080151e9 	.word	0x080151e9
 80134f8:	3ff80000 	.word	0x3ff80000
 80134fc:	08015320 	.word	0x08015320
 8013500:	0801528b 	.word	0x0801528b
 8013504:	2501      	movs	r5, #1
 8013506:	2300      	movs	r3, #0
 8013508:	9306      	str	r3, [sp, #24]
 801350a:	9508      	str	r5, [sp, #32]
 801350c:	f04f 33ff 	mov.w	r3, #4294967295
 8013510:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013514:	2200      	movs	r2, #0
 8013516:	2312      	movs	r3, #18
 8013518:	e7b0      	b.n	801347c <_dtoa_r+0x26c>
 801351a:	2301      	movs	r3, #1
 801351c:	9308      	str	r3, [sp, #32]
 801351e:	e7f5      	b.n	801350c <_dtoa_r+0x2fc>
 8013520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013522:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013526:	e7b8      	b.n	801349a <_dtoa_r+0x28a>
 8013528:	3101      	adds	r1, #1
 801352a:	6041      	str	r1, [r0, #4]
 801352c:	0052      	lsls	r2, r2, #1
 801352e:	e7b8      	b.n	80134a2 <_dtoa_r+0x292>
 8013530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013532:	9a01      	ldr	r2, [sp, #4]
 8013534:	601a      	str	r2, [r3, #0]
 8013536:	9b03      	ldr	r3, [sp, #12]
 8013538:	2b0e      	cmp	r3, #14
 801353a:	f200 809d 	bhi.w	8013678 <_dtoa_r+0x468>
 801353e:	2d00      	cmp	r5, #0
 8013540:	f000 809a 	beq.w	8013678 <_dtoa_r+0x468>
 8013544:	9b00      	ldr	r3, [sp, #0]
 8013546:	2b00      	cmp	r3, #0
 8013548:	dd32      	ble.n	80135b0 <_dtoa_r+0x3a0>
 801354a:	4ab7      	ldr	r2, [pc, #732]	; (8013828 <_dtoa_r+0x618>)
 801354c:	f003 030f 	and.w	r3, r3, #15
 8013550:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013554:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013558:	9b00      	ldr	r3, [sp, #0]
 801355a:	05d8      	lsls	r0, r3, #23
 801355c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8013560:	d516      	bpl.n	8013590 <_dtoa_r+0x380>
 8013562:	4bb2      	ldr	r3, [pc, #712]	; (801382c <_dtoa_r+0x61c>)
 8013564:	ec51 0b19 	vmov	r0, r1, d9
 8013568:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801356c:	f7ed f98e 	bl	800088c <__aeabi_ddiv>
 8013570:	f007 070f 	and.w	r7, r7, #15
 8013574:	4682      	mov	sl, r0
 8013576:	468b      	mov	fp, r1
 8013578:	2503      	movs	r5, #3
 801357a:	4eac      	ldr	r6, [pc, #688]	; (801382c <_dtoa_r+0x61c>)
 801357c:	b957      	cbnz	r7, 8013594 <_dtoa_r+0x384>
 801357e:	4642      	mov	r2, r8
 8013580:	464b      	mov	r3, r9
 8013582:	4650      	mov	r0, sl
 8013584:	4659      	mov	r1, fp
 8013586:	f7ed f981 	bl	800088c <__aeabi_ddiv>
 801358a:	4682      	mov	sl, r0
 801358c:	468b      	mov	fp, r1
 801358e:	e028      	b.n	80135e2 <_dtoa_r+0x3d2>
 8013590:	2502      	movs	r5, #2
 8013592:	e7f2      	b.n	801357a <_dtoa_r+0x36a>
 8013594:	07f9      	lsls	r1, r7, #31
 8013596:	d508      	bpl.n	80135aa <_dtoa_r+0x39a>
 8013598:	4640      	mov	r0, r8
 801359a:	4649      	mov	r1, r9
 801359c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80135a0:	f7ed f84a 	bl	8000638 <__aeabi_dmul>
 80135a4:	3501      	adds	r5, #1
 80135a6:	4680      	mov	r8, r0
 80135a8:	4689      	mov	r9, r1
 80135aa:	107f      	asrs	r7, r7, #1
 80135ac:	3608      	adds	r6, #8
 80135ae:	e7e5      	b.n	801357c <_dtoa_r+0x36c>
 80135b0:	f000 809b 	beq.w	80136ea <_dtoa_r+0x4da>
 80135b4:	9b00      	ldr	r3, [sp, #0]
 80135b6:	4f9d      	ldr	r7, [pc, #628]	; (801382c <_dtoa_r+0x61c>)
 80135b8:	425e      	negs	r6, r3
 80135ba:	4b9b      	ldr	r3, [pc, #620]	; (8013828 <_dtoa_r+0x618>)
 80135bc:	f006 020f 	and.w	r2, r6, #15
 80135c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80135c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135c8:	ec51 0b19 	vmov	r0, r1, d9
 80135cc:	f7ed f834 	bl	8000638 <__aeabi_dmul>
 80135d0:	1136      	asrs	r6, r6, #4
 80135d2:	4682      	mov	sl, r0
 80135d4:	468b      	mov	fp, r1
 80135d6:	2300      	movs	r3, #0
 80135d8:	2502      	movs	r5, #2
 80135da:	2e00      	cmp	r6, #0
 80135dc:	d17a      	bne.n	80136d4 <_dtoa_r+0x4c4>
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d1d3      	bne.n	801358a <_dtoa_r+0x37a>
 80135e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	f000 8082 	beq.w	80136ee <_dtoa_r+0x4de>
 80135ea:	4b91      	ldr	r3, [pc, #580]	; (8013830 <_dtoa_r+0x620>)
 80135ec:	2200      	movs	r2, #0
 80135ee:	4650      	mov	r0, sl
 80135f0:	4659      	mov	r1, fp
 80135f2:	f7ed fa93 	bl	8000b1c <__aeabi_dcmplt>
 80135f6:	2800      	cmp	r0, #0
 80135f8:	d079      	beq.n	80136ee <_dtoa_r+0x4de>
 80135fa:	9b03      	ldr	r3, [sp, #12]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d076      	beq.n	80136ee <_dtoa_r+0x4de>
 8013600:	9b02      	ldr	r3, [sp, #8]
 8013602:	2b00      	cmp	r3, #0
 8013604:	dd36      	ble.n	8013674 <_dtoa_r+0x464>
 8013606:	9b00      	ldr	r3, [sp, #0]
 8013608:	4650      	mov	r0, sl
 801360a:	4659      	mov	r1, fp
 801360c:	1e5f      	subs	r7, r3, #1
 801360e:	2200      	movs	r2, #0
 8013610:	4b88      	ldr	r3, [pc, #544]	; (8013834 <_dtoa_r+0x624>)
 8013612:	f7ed f811 	bl	8000638 <__aeabi_dmul>
 8013616:	9e02      	ldr	r6, [sp, #8]
 8013618:	4682      	mov	sl, r0
 801361a:	468b      	mov	fp, r1
 801361c:	3501      	adds	r5, #1
 801361e:	4628      	mov	r0, r5
 8013620:	f7ec ffa0 	bl	8000564 <__aeabi_i2d>
 8013624:	4652      	mov	r2, sl
 8013626:	465b      	mov	r3, fp
 8013628:	f7ed f806 	bl	8000638 <__aeabi_dmul>
 801362c:	4b82      	ldr	r3, [pc, #520]	; (8013838 <_dtoa_r+0x628>)
 801362e:	2200      	movs	r2, #0
 8013630:	f7ec fe4c 	bl	80002cc <__adddf3>
 8013634:	46d0      	mov	r8, sl
 8013636:	46d9      	mov	r9, fp
 8013638:	4682      	mov	sl, r0
 801363a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801363e:	2e00      	cmp	r6, #0
 8013640:	d158      	bne.n	80136f4 <_dtoa_r+0x4e4>
 8013642:	4b7e      	ldr	r3, [pc, #504]	; (801383c <_dtoa_r+0x62c>)
 8013644:	2200      	movs	r2, #0
 8013646:	4640      	mov	r0, r8
 8013648:	4649      	mov	r1, r9
 801364a:	f7ec fe3d 	bl	80002c8 <__aeabi_dsub>
 801364e:	4652      	mov	r2, sl
 8013650:	465b      	mov	r3, fp
 8013652:	4680      	mov	r8, r0
 8013654:	4689      	mov	r9, r1
 8013656:	f7ed fa7f 	bl	8000b58 <__aeabi_dcmpgt>
 801365a:	2800      	cmp	r0, #0
 801365c:	f040 8295 	bne.w	8013b8a <_dtoa_r+0x97a>
 8013660:	4652      	mov	r2, sl
 8013662:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013666:	4640      	mov	r0, r8
 8013668:	4649      	mov	r1, r9
 801366a:	f7ed fa57 	bl	8000b1c <__aeabi_dcmplt>
 801366e:	2800      	cmp	r0, #0
 8013670:	f040 8289 	bne.w	8013b86 <_dtoa_r+0x976>
 8013674:	ec5b ab19 	vmov	sl, fp, d9
 8013678:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801367a:	2b00      	cmp	r3, #0
 801367c:	f2c0 8148 	blt.w	8013910 <_dtoa_r+0x700>
 8013680:	9a00      	ldr	r2, [sp, #0]
 8013682:	2a0e      	cmp	r2, #14
 8013684:	f300 8144 	bgt.w	8013910 <_dtoa_r+0x700>
 8013688:	4b67      	ldr	r3, [pc, #412]	; (8013828 <_dtoa_r+0x618>)
 801368a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801368e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013694:	2b00      	cmp	r3, #0
 8013696:	f280 80d5 	bge.w	8013844 <_dtoa_r+0x634>
 801369a:	9b03      	ldr	r3, [sp, #12]
 801369c:	2b00      	cmp	r3, #0
 801369e:	f300 80d1 	bgt.w	8013844 <_dtoa_r+0x634>
 80136a2:	f040 826f 	bne.w	8013b84 <_dtoa_r+0x974>
 80136a6:	4b65      	ldr	r3, [pc, #404]	; (801383c <_dtoa_r+0x62c>)
 80136a8:	2200      	movs	r2, #0
 80136aa:	4640      	mov	r0, r8
 80136ac:	4649      	mov	r1, r9
 80136ae:	f7ec ffc3 	bl	8000638 <__aeabi_dmul>
 80136b2:	4652      	mov	r2, sl
 80136b4:	465b      	mov	r3, fp
 80136b6:	f7ed fa45 	bl	8000b44 <__aeabi_dcmpge>
 80136ba:	9e03      	ldr	r6, [sp, #12]
 80136bc:	4637      	mov	r7, r6
 80136be:	2800      	cmp	r0, #0
 80136c0:	f040 8245 	bne.w	8013b4e <_dtoa_r+0x93e>
 80136c4:	9d01      	ldr	r5, [sp, #4]
 80136c6:	2331      	movs	r3, #49	; 0x31
 80136c8:	f805 3b01 	strb.w	r3, [r5], #1
 80136cc:	9b00      	ldr	r3, [sp, #0]
 80136ce:	3301      	adds	r3, #1
 80136d0:	9300      	str	r3, [sp, #0]
 80136d2:	e240      	b.n	8013b56 <_dtoa_r+0x946>
 80136d4:	07f2      	lsls	r2, r6, #31
 80136d6:	d505      	bpl.n	80136e4 <_dtoa_r+0x4d4>
 80136d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80136dc:	f7ec ffac 	bl	8000638 <__aeabi_dmul>
 80136e0:	3501      	adds	r5, #1
 80136e2:	2301      	movs	r3, #1
 80136e4:	1076      	asrs	r6, r6, #1
 80136e6:	3708      	adds	r7, #8
 80136e8:	e777      	b.n	80135da <_dtoa_r+0x3ca>
 80136ea:	2502      	movs	r5, #2
 80136ec:	e779      	b.n	80135e2 <_dtoa_r+0x3d2>
 80136ee:	9f00      	ldr	r7, [sp, #0]
 80136f0:	9e03      	ldr	r6, [sp, #12]
 80136f2:	e794      	b.n	801361e <_dtoa_r+0x40e>
 80136f4:	9901      	ldr	r1, [sp, #4]
 80136f6:	4b4c      	ldr	r3, [pc, #304]	; (8013828 <_dtoa_r+0x618>)
 80136f8:	4431      	add	r1, r6
 80136fa:	910d      	str	r1, [sp, #52]	; 0x34
 80136fc:	9908      	ldr	r1, [sp, #32]
 80136fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013702:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013706:	2900      	cmp	r1, #0
 8013708:	d043      	beq.n	8013792 <_dtoa_r+0x582>
 801370a:	494d      	ldr	r1, [pc, #308]	; (8013840 <_dtoa_r+0x630>)
 801370c:	2000      	movs	r0, #0
 801370e:	f7ed f8bd 	bl	800088c <__aeabi_ddiv>
 8013712:	4652      	mov	r2, sl
 8013714:	465b      	mov	r3, fp
 8013716:	f7ec fdd7 	bl	80002c8 <__aeabi_dsub>
 801371a:	9d01      	ldr	r5, [sp, #4]
 801371c:	4682      	mov	sl, r0
 801371e:	468b      	mov	fp, r1
 8013720:	4649      	mov	r1, r9
 8013722:	4640      	mov	r0, r8
 8013724:	f7ed fa38 	bl	8000b98 <__aeabi_d2iz>
 8013728:	4606      	mov	r6, r0
 801372a:	f7ec ff1b 	bl	8000564 <__aeabi_i2d>
 801372e:	4602      	mov	r2, r0
 8013730:	460b      	mov	r3, r1
 8013732:	4640      	mov	r0, r8
 8013734:	4649      	mov	r1, r9
 8013736:	f7ec fdc7 	bl	80002c8 <__aeabi_dsub>
 801373a:	3630      	adds	r6, #48	; 0x30
 801373c:	f805 6b01 	strb.w	r6, [r5], #1
 8013740:	4652      	mov	r2, sl
 8013742:	465b      	mov	r3, fp
 8013744:	4680      	mov	r8, r0
 8013746:	4689      	mov	r9, r1
 8013748:	f7ed f9e8 	bl	8000b1c <__aeabi_dcmplt>
 801374c:	2800      	cmp	r0, #0
 801374e:	d163      	bne.n	8013818 <_dtoa_r+0x608>
 8013750:	4642      	mov	r2, r8
 8013752:	464b      	mov	r3, r9
 8013754:	4936      	ldr	r1, [pc, #216]	; (8013830 <_dtoa_r+0x620>)
 8013756:	2000      	movs	r0, #0
 8013758:	f7ec fdb6 	bl	80002c8 <__aeabi_dsub>
 801375c:	4652      	mov	r2, sl
 801375e:	465b      	mov	r3, fp
 8013760:	f7ed f9dc 	bl	8000b1c <__aeabi_dcmplt>
 8013764:	2800      	cmp	r0, #0
 8013766:	f040 80b5 	bne.w	80138d4 <_dtoa_r+0x6c4>
 801376a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801376c:	429d      	cmp	r5, r3
 801376e:	d081      	beq.n	8013674 <_dtoa_r+0x464>
 8013770:	4b30      	ldr	r3, [pc, #192]	; (8013834 <_dtoa_r+0x624>)
 8013772:	2200      	movs	r2, #0
 8013774:	4650      	mov	r0, sl
 8013776:	4659      	mov	r1, fp
 8013778:	f7ec ff5e 	bl	8000638 <__aeabi_dmul>
 801377c:	4b2d      	ldr	r3, [pc, #180]	; (8013834 <_dtoa_r+0x624>)
 801377e:	4682      	mov	sl, r0
 8013780:	468b      	mov	fp, r1
 8013782:	4640      	mov	r0, r8
 8013784:	4649      	mov	r1, r9
 8013786:	2200      	movs	r2, #0
 8013788:	f7ec ff56 	bl	8000638 <__aeabi_dmul>
 801378c:	4680      	mov	r8, r0
 801378e:	4689      	mov	r9, r1
 8013790:	e7c6      	b.n	8013720 <_dtoa_r+0x510>
 8013792:	4650      	mov	r0, sl
 8013794:	4659      	mov	r1, fp
 8013796:	f7ec ff4f 	bl	8000638 <__aeabi_dmul>
 801379a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801379c:	9d01      	ldr	r5, [sp, #4]
 801379e:	930f      	str	r3, [sp, #60]	; 0x3c
 80137a0:	4682      	mov	sl, r0
 80137a2:	468b      	mov	fp, r1
 80137a4:	4649      	mov	r1, r9
 80137a6:	4640      	mov	r0, r8
 80137a8:	f7ed f9f6 	bl	8000b98 <__aeabi_d2iz>
 80137ac:	4606      	mov	r6, r0
 80137ae:	f7ec fed9 	bl	8000564 <__aeabi_i2d>
 80137b2:	3630      	adds	r6, #48	; 0x30
 80137b4:	4602      	mov	r2, r0
 80137b6:	460b      	mov	r3, r1
 80137b8:	4640      	mov	r0, r8
 80137ba:	4649      	mov	r1, r9
 80137bc:	f7ec fd84 	bl	80002c8 <__aeabi_dsub>
 80137c0:	f805 6b01 	strb.w	r6, [r5], #1
 80137c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80137c6:	429d      	cmp	r5, r3
 80137c8:	4680      	mov	r8, r0
 80137ca:	4689      	mov	r9, r1
 80137cc:	f04f 0200 	mov.w	r2, #0
 80137d0:	d124      	bne.n	801381c <_dtoa_r+0x60c>
 80137d2:	4b1b      	ldr	r3, [pc, #108]	; (8013840 <_dtoa_r+0x630>)
 80137d4:	4650      	mov	r0, sl
 80137d6:	4659      	mov	r1, fp
 80137d8:	f7ec fd78 	bl	80002cc <__adddf3>
 80137dc:	4602      	mov	r2, r0
 80137de:	460b      	mov	r3, r1
 80137e0:	4640      	mov	r0, r8
 80137e2:	4649      	mov	r1, r9
 80137e4:	f7ed f9b8 	bl	8000b58 <__aeabi_dcmpgt>
 80137e8:	2800      	cmp	r0, #0
 80137ea:	d173      	bne.n	80138d4 <_dtoa_r+0x6c4>
 80137ec:	4652      	mov	r2, sl
 80137ee:	465b      	mov	r3, fp
 80137f0:	4913      	ldr	r1, [pc, #76]	; (8013840 <_dtoa_r+0x630>)
 80137f2:	2000      	movs	r0, #0
 80137f4:	f7ec fd68 	bl	80002c8 <__aeabi_dsub>
 80137f8:	4602      	mov	r2, r0
 80137fa:	460b      	mov	r3, r1
 80137fc:	4640      	mov	r0, r8
 80137fe:	4649      	mov	r1, r9
 8013800:	f7ed f98c 	bl	8000b1c <__aeabi_dcmplt>
 8013804:	2800      	cmp	r0, #0
 8013806:	f43f af35 	beq.w	8013674 <_dtoa_r+0x464>
 801380a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801380c:	1e6b      	subs	r3, r5, #1
 801380e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013810:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013814:	2b30      	cmp	r3, #48	; 0x30
 8013816:	d0f8      	beq.n	801380a <_dtoa_r+0x5fa>
 8013818:	9700      	str	r7, [sp, #0]
 801381a:	e049      	b.n	80138b0 <_dtoa_r+0x6a0>
 801381c:	4b05      	ldr	r3, [pc, #20]	; (8013834 <_dtoa_r+0x624>)
 801381e:	f7ec ff0b 	bl	8000638 <__aeabi_dmul>
 8013822:	4680      	mov	r8, r0
 8013824:	4689      	mov	r9, r1
 8013826:	e7bd      	b.n	80137a4 <_dtoa_r+0x594>
 8013828:	08015320 	.word	0x08015320
 801382c:	080152f8 	.word	0x080152f8
 8013830:	3ff00000 	.word	0x3ff00000
 8013834:	40240000 	.word	0x40240000
 8013838:	401c0000 	.word	0x401c0000
 801383c:	40140000 	.word	0x40140000
 8013840:	3fe00000 	.word	0x3fe00000
 8013844:	9d01      	ldr	r5, [sp, #4]
 8013846:	4656      	mov	r6, sl
 8013848:	465f      	mov	r7, fp
 801384a:	4642      	mov	r2, r8
 801384c:	464b      	mov	r3, r9
 801384e:	4630      	mov	r0, r6
 8013850:	4639      	mov	r1, r7
 8013852:	f7ed f81b 	bl	800088c <__aeabi_ddiv>
 8013856:	f7ed f99f 	bl	8000b98 <__aeabi_d2iz>
 801385a:	4682      	mov	sl, r0
 801385c:	f7ec fe82 	bl	8000564 <__aeabi_i2d>
 8013860:	4642      	mov	r2, r8
 8013862:	464b      	mov	r3, r9
 8013864:	f7ec fee8 	bl	8000638 <__aeabi_dmul>
 8013868:	4602      	mov	r2, r0
 801386a:	460b      	mov	r3, r1
 801386c:	4630      	mov	r0, r6
 801386e:	4639      	mov	r1, r7
 8013870:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8013874:	f7ec fd28 	bl	80002c8 <__aeabi_dsub>
 8013878:	f805 6b01 	strb.w	r6, [r5], #1
 801387c:	9e01      	ldr	r6, [sp, #4]
 801387e:	9f03      	ldr	r7, [sp, #12]
 8013880:	1bae      	subs	r6, r5, r6
 8013882:	42b7      	cmp	r7, r6
 8013884:	4602      	mov	r2, r0
 8013886:	460b      	mov	r3, r1
 8013888:	d135      	bne.n	80138f6 <_dtoa_r+0x6e6>
 801388a:	f7ec fd1f 	bl	80002cc <__adddf3>
 801388e:	4642      	mov	r2, r8
 8013890:	464b      	mov	r3, r9
 8013892:	4606      	mov	r6, r0
 8013894:	460f      	mov	r7, r1
 8013896:	f7ed f95f 	bl	8000b58 <__aeabi_dcmpgt>
 801389a:	b9d0      	cbnz	r0, 80138d2 <_dtoa_r+0x6c2>
 801389c:	4642      	mov	r2, r8
 801389e:	464b      	mov	r3, r9
 80138a0:	4630      	mov	r0, r6
 80138a2:	4639      	mov	r1, r7
 80138a4:	f7ed f930 	bl	8000b08 <__aeabi_dcmpeq>
 80138a8:	b110      	cbz	r0, 80138b0 <_dtoa_r+0x6a0>
 80138aa:	f01a 0f01 	tst.w	sl, #1
 80138ae:	d110      	bne.n	80138d2 <_dtoa_r+0x6c2>
 80138b0:	4620      	mov	r0, r4
 80138b2:	ee18 1a10 	vmov	r1, s16
 80138b6:	f000 fc23 	bl	8014100 <_Bfree>
 80138ba:	2300      	movs	r3, #0
 80138bc:	9800      	ldr	r0, [sp, #0]
 80138be:	702b      	strb	r3, [r5, #0]
 80138c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80138c2:	3001      	adds	r0, #1
 80138c4:	6018      	str	r0, [r3, #0]
 80138c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	f43f acf1 	beq.w	80132b0 <_dtoa_r+0xa0>
 80138ce:	601d      	str	r5, [r3, #0]
 80138d0:	e4ee      	b.n	80132b0 <_dtoa_r+0xa0>
 80138d2:	9f00      	ldr	r7, [sp, #0]
 80138d4:	462b      	mov	r3, r5
 80138d6:	461d      	mov	r5, r3
 80138d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80138dc:	2a39      	cmp	r2, #57	; 0x39
 80138de:	d106      	bne.n	80138ee <_dtoa_r+0x6de>
 80138e0:	9a01      	ldr	r2, [sp, #4]
 80138e2:	429a      	cmp	r2, r3
 80138e4:	d1f7      	bne.n	80138d6 <_dtoa_r+0x6c6>
 80138e6:	9901      	ldr	r1, [sp, #4]
 80138e8:	2230      	movs	r2, #48	; 0x30
 80138ea:	3701      	adds	r7, #1
 80138ec:	700a      	strb	r2, [r1, #0]
 80138ee:	781a      	ldrb	r2, [r3, #0]
 80138f0:	3201      	adds	r2, #1
 80138f2:	701a      	strb	r2, [r3, #0]
 80138f4:	e790      	b.n	8013818 <_dtoa_r+0x608>
 80138f6:	4ba6      	ldr	r3, [pc, #664]	; (8013b90 <_dtoa_r+0x980>)
 80138f8:	2200      	movs	r2, #0
 80138fa:	f7ec fe9d 	bl	8000638 <__aeabi_dmul>
 80138fe:	2200      	movs	r2, #0
 8013900:	2300      	movs	r3, #0
 8013902:	4606      	mov	r6, r0
 8013904:	460f      	mov	r7, r1
 8013906:	f7ed f8ff 	bl	8000b08 <__aeabi_dcmpeq>
 801390a:	2800      	cmp	r0, #0
 801390c:	d09d      	beq.n	801384a <_dtoa_r+0x63a>
 801390e:	e7cf      	b.n	80138b0 <_dtoa_r+0x6a0>
 8013910:	9a08      	ldr	r2, [sp, #32]
 8013912:	2a00      	cmp	r2, #0
 8013914:	f000 80d7 	beq.w	8013ac6 <_dtoa_r+0x8b6>
 8013918:	9a06      	ldr	r2, [sp, #24]
 801391a:	2a01      	cmp	r2, #1
 801391c:	f300 80ba 	bgt.w	8013a94 <_dtoa_r+0x884>
 8013920:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013922:	2a00      	cmp	r2, #0
 8013924:	f000 80b2 	beq.w	8013a8c <_dtoa_r+0x87c>
 8013928:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801392c:	9e07      	ldr	r6, [sp, #28]
 801392e:	9d04      	ldr	r5, [sp, #16]
 8013930:	9a04      	ldr	r2, [sp, #16]
 8013932:	441a      	add	r2, r3
 8013934:	9204      	str	r2, [sp, #16]
 8013936:	9a05      	ldr	r2, [sp, #20]
 8013938:	2101      	movs	r1, #1
 801393a:	441a      	add	r2, r3
 801393c:	4620      	mov	r0, r4
 801393e:	9205      	str	r2, [sp, #20]
 8013940:	f000 fc96 	bl	8014270 <__i2b>
 8013944:	4607      	mov	r7, r0
 8013946:	2d00      	cmp	r5, #0
 8013948:	dd0c      	ble.n	8013964 <_dtoa_r+0x754>
 801394a:	9b05      	ldr	r3, [sp, #20]
 801394c:	2b00      	cmp	r3, #0
 801394e:	dd09      	ble.n	8013964 <_dtoa_r+0x754>
 8013950:	42ab      	cmp	r3, r5
 8013952:	9a04      	ldr	r2, [sp, #16]
 8013954:	bfa8      	it	ge
 8013956:	462b      	movge	r3, r5
 8013958:	1ad2      	subs	r2, r2, r3
 801395a:	9204      	str	r2, [sp, #16]
 801395c:	9a05      	ldr	r2, [sp, #20]
 801395e:	1aed      	subs	r5, r5, r3
 8013960:	1ad3      	subs	r3, r2, r3
 8013962:	9305      	str	r3, [sp, #20]
 8013964:	9b07      	ldr	r3, [sp, #28]
 8013966:	b31b      	cbz	r3, 80139b0 <_dtoa_r+0x7a0>
 8013968:	9b08      	ldr	r3, [sp, #32]
 801396a:	2b00      	cmp	r3, #0
 801396c:	f000 80af 	beq.w	8013ace <_dtoa_r+0x8be>
 8013970:	2e00      	cmp	r6, #0
 8013972:	dd13      	ble.n	801399c <_dtoa_r+0x78c>
 8013974:	4639      	mov	r1, r7
 8013976:	4632      	mov	r2, r6
 8013978:	4620      	mov	r0, r4
 801397a:	f000 fd39 	bl	80143f0 <__pow5mult>
 801397e:	ee18 2a10 	vmov	r2, s16
 8013982:	4601      	mov	r1, r0
 8013984:	4607      	mov	r7, r0
 8013986:	4620      	mov	r0, r4
 8013988:	f000 fc88 	bl	801429c <__multiply>
 801398c:	ee18 1a10 	vmov	r1, s16
 8013990:	4680      	mov	r8, r0
 8013992:	4620      	mov	r0, r4
 8013994:	f000 fbb4 	bl	8014100 <_Bfree>
 8013998:	ee08 8a10 	vmov	s16, r8
 801399c:	9b07      	ldr	r3, [sp, #28]
 801399e:	1b9a      	subs	r2, r3, r6
 80139a0:	d006      	beq.n	80139b0 <_dtoa_r+0x7a0>
 80139a2:	ee18 1a10 	vmov	r1, s16
 80139a6:	4620      	mov	r0, r4
 80139a8:	f000 fd22 	bl	80143f0 <__pow5mult>
 80139ac:	ee08 0a10 	vmov	s16, r0
 80139b0:	2101      	movs	r1, #1
 80139b2:	4620      	mov	r0, r4
 80139b4:	f000 fc5c 	bl	8014270 <__i2b>
 80139b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	4606      	mov	r6, r0
 80139be:	f340 8088 	ble.w	8013ad2 <_dtoa_r+0x8c2>
 80139c2:	461a      	mov	r2, r3
 80139c4:	4601      	mov	r1, r0
 80139c6:	4620      	mov	r0, r4
 80139c8:	f000 fd12 	bl	80143f0 <__pow5mult>
 80139cc:	9b06      	ldr	r3, [sp, #24]
 80139ce:	2b01      	cmp	r3, #1
 80139d0:	4606      	mov	r6, r0
 80139d2:	f340 8081 	ble.w	8013ad8 <_dtoa_r+0x8c8>
 80139d6:	f04f 0800 	mov.w	r8, #0
 80139da:	6933      	ldr	r3, [r6, #16]
 80139dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80139e0:	6918      	ldr	r0, [r3, #16]
 80139e2:	f000 fbf5 	bl	80141d0 <__hi0bits>
 80139e6:	f1c0 0020 	rsb	r0, r0, #32
 80139ea:	9b05      	ldr	r3, [sp, #20]
 80139ec:	4418      	add	r0, r3
 80139ee:	f010 001f 	ands.w	r0, r0, #31
 80139f2:	f000 8092 	beq.w	8013b1a <_dtoa_r+0x90a>
 80139f6:	f1c0 0320 	rsb	r3, r0, #32
 80139fa:	2b04      	cmp	r3, #4
 80139fc:	f340 808a 	ble.w	8013b14 <_dtoa_r+0x904>
 8013a00:	f1c0 001c 	rsb	r0, r0, #28
 8013a04:	9b04      	ldr	r3, [sp, #16]
 8013a06:	4403      	add	r3, r0
 8013a08:	9304      	str	r3, [sp, #16]
 8013a0a:	9b05      	ldr	r3, [sp, #20]
 8013a0c:	4403      	add	r3, r0
 8013a0e:	4405      	add	r5, r0
 8013a10:	9305      	str	r3, [sp, #20]
 8013a12:	9b04      	ldr	r3, [sp, #16]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	dd07      	ble.n	8013a28 <_dtoa_r+0x818>
 8013a18:	ee18 1a10 	vmov	r1, s16
 8013a1c:	461a      	mov	r2, r3
 8013a1e:	4620      	mov	r0, r4
 8013a20:	f000 fd40 	bl	80144a4 <__lshift>
 8013a24:	ee08 0a10 	vmov	s16, r0
 8013a28:	9b05      	ldr	r3, [sp, #20]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	dd05      	ble.n	8013a3a <_dtoa_r+0x82a>
 8013a2e:	4631      	mov	r1, r6
 8013a30:	461a      	mov	r2, r3
 8013a32:	4620      	mov	r0, r4
 8013a34:	f000 fd36 	bl	80144a4 <__lshift>
 8013a38:	4606      	mov	r6, r0
 8013a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d06e      	beq.n	8013b1e <_dtoa_r+0x90e>
 8013a40:	ee18 0a10 	vmov	r0, s16
 8013a44:	4631      	mov	r1, r6
 8013a46:	f000 fd9d 	bl	8014584 <__mcmp>
 8013a4a:	2800      	cmp	r0, #0
 8013a4c:	da67      	bge.n	8013b1e <_dtoa_r+0x90e>
 8013a4e:	9b00      	ldr	r3, [sp, #0]
 8013a50:	3b01      	subs	r3, #1
 8013a52:	ee18 1a10 	vmov	r1, s16
 8013a56:	9300      	str	r3, [sp, #0]
 8013a58:	220a      	movs	r2, #10
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	4620      	mov	r0, r4
 8013a5e:	f000 fb71 	bl	8014144 <__multadd>
 8013a62:	9b08      	ldr	r3, [sp, #32]
 8013a64:	ee08 0a10 	vmov	s16, r0
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	f000 81b1 	beq.w	8013dd0 <_dtoa_r+0xbc0>
 8013a6e:	2300      	movs	r3, #0
 8013a70:	4639      	mov	r1, r7
 8013a72:	220a      	movs	r2, #10
 8013a74:	4620      	mov	r0, r4
 8013a76:	f000 fb65 	bl	8014144 <__multadd>
 8013a7a:	9b02      	ldr	r3, [sp, #8]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	4607      	mov	r7, r0
 8013a80:	f300 808e 	bgt.w	8013ba0 <_dtoa_r+0x990>
 8013a84:	9b06      	ldr	r3, [sp, #24]
 8013a86:	2b02      	cmp	r3, #2
 8013a88:	dc51      	bgt.n	8013b2e <_dtoa_r+0x91e>
 8013a8a:	e089      	b.n	8013ba0 <_dtoa_r+0x990>
 8013a8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013a8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013a92:	e74b      	b.n	801392c <_dtoa_r+0x71c>
 8013a94:	9b03      	ldr	r3, [sp, #12]
 8013a96:	1e5e      	subs	r6, r3, #1
 8013a98:	9b07      	ldr	r3, [sp, #28]
 8013a9a:	42b3      	cmp	r3, r6
 8013a9c:	bfbf      	itttt	lt
 8013a9e:	9b07      	ldrlt	r3, [sp, #28]
 8013aa0:	9607      	strlt	r6, [sp, #28]
 8013aa2:	1af2      	sublt	r2, r6, r3
 8013aa4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8013aa6:	bfb6      	itet	lt
 8013aa8:	189b      	addlt	r3, r3, r2
 8013aaa:	1b9e      	subge	r6, r3, r6
 8013aac:	930a      	strlt	r3, [sp, #40]	; 0x28
 8013aae:	9b03      	ldr	r3, [sp, #12]
 8013ab0:	bfb8      	it	lt
 8013ab2:	2600      	movlt	r6, #0
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	bfb7      	itett	lt
 8013ab8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8013abc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8013ac0:	1a9d      	sublt	r5, r3, r2
 8013ac2:	2300      	movlt	r3, #0
 8013ac4:	e734      	b.n	8013930 <_dtoa_r+0x720>
 8013ac6:	9e07      	ldr	r6, [sp, #28]
 8013ac8:	9d04      	ldr	r5, [sp, #16]
 8013aca:	9f08      	ldr	r7, [sp, #32]
 8013acc:	e73b      	b.n	8013946 <_dtoa_r+0x736>
 8013ace:	9a07      	ldr	r2, [sp, #28]
 8013ad0:	e767      	b.n	80139a2 <_dtoa_r+0x792>
 8013ad2:	9b06      	ldr	r3, [sp, #24]
 8013ad4:	2b01      	cmp	r3, #1
 8013ad6:	dc18      	bgt.n	8013b0a <_dtoa_r+0x8fa>
 8013ad8:	f1ba 0f00 	cmp.w	sl, #0
 8013adc:	d115      	bne.n	8013b0a <_dtoa_r+0x8fa>
 8013ade:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013ae2:	b993      	cbnz	r3, 8013b0a <_dtoa_r+0x8fa>
 8013ae4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013ae8:	0d1b      	lsrs	r3, r3, #20
 8013aea:	051b      	lsls	r3, r3, #20
 8013aec:	b183      	cbz	r3, 8013b10 <_dtoa_r+0x900>
 8013aee:	9b04      	ldr	r3, [sp, #16]
 8013af0:	3301      	adds	r3, #1
 8013af2:	9304      	str	r3, [sp, #16]
 8013af4:	9b05      	ldr	r3, [sp, #20]
 8013af6:	3301      	adds	r3, #1
 8013af8:	9305      	str	r3, [sp, #20]
 8013afa:	f04f 0801 	mov.w	r8, #1
 8013afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	f47f af6a 	bne.w	80139da <_dtoa_r+0x7ca>
 8013b06:	2001      	movs	r0, #1
 8013b08:	e76f      	b.n	80139ea <_dtoa_r+0x7da>
 8013b0a:	f04f 0800 	mov.w	r8, #0
 8013b0e:	e7f6      	b.n	8013afe <_dtoa_r+0x8ee>
 8013b10:	4698      	mov	r8, r3
 8013b12:	e7f4      	b.n	8013afe <_dtoa_r+0x8ee>
 8013b14:	f43f af7d 	beq.w	8013a12 <_dtoa_r+0x802>
 8013b18:	4618      	mov	r0, r3
 8013b1a:	301c      	adds	r0, #28
 8013b1c:	e772      	b.n	8013a04 <_dtoa_r+0x7f4>
 8013b1e:	9b03      	ldr	r3, [sp, #12]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	dc37      	bgt.n	8013b94 <_dtoa_r+0x984>
 8013b24:	9b06      	ldr	r3, [sp, #24]
 8013b26:	2b02      	cmp	r3, #2
 8013b28:	dd34      	ble.n	8013b94 <_dtoa_r+0x984>
 8013b2a:	9b03      	ldr	r3, [sp, #12]
 8013b2c:	9302      	str	r3, [sp, #8]
 8013b2e:	9b02      	ldr	r3, [sp, #8]
 8013b30:	b96b      	cbnz	r3, 8013b4e <_dtoa_r+0x93e>
 8013b32:	4631      	mov	r1, r6
 8013b34:	2205      	movs	r2, #5
 8013b36:	4620      	mov	r0, r4
 8013b38:	f000 fb04 	bl	8014144 <__multadd>
 8013b3c:	4601      	mov	r1, r0
 8013b3e:	4606      	mov	r6, r0
 8013b40:	ee18 0a10 	vmov	r0, s16
 8013b44:	f000 fd1e 	bl	8014584 <__mcmp>
 8013b48:	2800      	cmp	r0, #0
 8013b4a:	f73f adbb 	bgt.w	80136c4 <_dtoa_r+0x4b4>
 8013b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b50:	9d01      	ldr	r5, [sp, #4]
 8013b52:	43db      	mvns	r3, r3
 8013b54:	9300      	str	r3, [sp, #0]
 8013b56:	f04f 0800 	mov.w	r8, #0
 8013b5a:	4631      	mov	r1, r6
 8013b5c:	4620      	mov	r0, r4
 8013b5e:	f000 facf 	bl	8014100 <_Bfree>
 8013b62:	2f00      	cmp	r7, #0
 8013b64:	f43f aea4 	beq.w	80138b0 <_dtoa_r+0x6a0>
 8013b68:	f1b8 0f00 	cmp.w	r8, #0
 8013b6c:	d005      	beq.n	8013b7a <_dtoa_r+0x96a>
 8013b6e:	45b8      	cmp	r8, r7
 8013b70:	d003      	beq.n	8013b7a <_dtoa_r+0x96a>
 8013b72:	4641      	mov	r1, r8
 8013b74:	4620      	mov	r0, r4
 8013b76:	f000 fac3 	bl	8014100 <_Bfree>
 8013b7a:	4639      	mov	r1, r7
 8013b7c:	4620      	mov	r0, r4
 8013b7e:	f000 fabf 	bl	8014100 <_Bfree>
 8013b82:	e695      	b.n	80138b0 <_dtoa_r+0x6a0>
 8013b84:	2600      	movs	r6, #0
 8013b86:	4637      	mov	r7, r6
 8013b88:	e7e1      	b.n	8013b4e <_dtoa_r+0x93e>
 8013b8a:	9700      	str	r7, [sp, #0]
 8013b8c:	4637      	mov	r7, r6
 8013b8e:	e599      	b.n	80136c4 <_dtoa_r+0x4b4>
 8013b90:	40240000 	.word	0x40240000
 8013b94:	9b08      	ldr	r3, [sp, #32]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	f000 80ca 	beq.w	8013d30 <_dtoa_r+0xb20>
 8013b9c:	9b03      	ldr	r3, [sp, #12]
 8013b9e:	9302      	str	r3, [sp, #8]
 8013ba0:	2d00      	cmp	r5, #0
 8013ba2:	dd05      	ble.n	8013bb0 <_dtoa_r+0x9a0>
 8013ba4:	4639      	mov	r1, r7
 8013ba6:	462a      	mov	r2, r5
 8013ba8:	4620      	mov	r0, r4
 8013baa:	f000 fc7b 	bl	80144a4 <__lshift>
 8013bae:	4607      	mov	r7, r0
 8013bb0:	f1b8 0f00 	cmp.w	r8, #0
 8013bb4:	d05b      	beq.n	8013c6e <_dtoa_r+0xa5e>
 8013bb6:	6879      	ldr	r1, [r7, #4]
 8013bb8:	4620      	mov	r0, r4
 8013bba:	f000 fa61 	bl	8014080 <_Balloc>
 8013bbe:	4605      	mov	r5, r0
 8013bc0:	b928      	cbnz	r0, 8013bce <_dtoa_r+0x9be>
 8013bc2:	4b87      	ldr	r3, [pc, #540]	; (8013de0 <_dtoa_r+0xbd0>)
 8013bc4:	4602      	mov	r2, r0
 8013bc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013bca:	f7ff bb3b 	b.w	8013244 <_dtoa_r+0x34>
 8013bce:	693a      	ldr	r2, [r7, #16]
 8013bd0:	3202      	adds	r2, #2
 8013bd2:	0092      	lsls	r2, r2, #2
 8013bd4:	f107 010c 	add.w	r1, r7, #12
 8013bd8:	300c      	adds	r0, #12
 8013bda:	f7fe fae7 	bl	80121ac <memcpy>
 8013bde:	2201      	movs	r2, #1
 8013be0:	4629      	mov	r1, r5
 8013be2:	4620      	mov	r0, r4
 8013be4:	f000 fc5e 	bl	80144a4 <__lshift>
 8013be8:	9b01      	ldr	r3, [sp, #4]
 8013bea:	f103 0901 	add.w	r9, r3, #1
 8013bee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8013bf2:	4413      	add	r3, r2
 8013bf4:	9305      	str	r3, [sp, #20]
 8013bf6:	f00a 0301 	and.w	r3, sl, #1
 8013bfa:	46b8      	mov	r8, r7
 8013bfc:	9304      	str	r3, [sp, #16]
 8013bfe:	4607      	mov	r7, r0
 8013c00:	4631      	mov	r1, r6
 8013c02:	ee18 0a10 	vmov	r0, s16
 8013c06:	f7ff fa77 	bl	80130f8 <quorem>
 8013c0a:	4641      	mov	r1, r8
 8013c0c:	9002      	str	r0, [sp, #8]
 8013c0e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013c12:	ee18 0a10 	vmov	r0, s16
 8013c16:	f000 fcb5 	bl	8014584 <__mcmp>
 8013c1a:	463a      	mov	r2, r7
 8013c1c:	9003      	str	r0, [sp, #12]
 8013c1e:	4631      	mov	r1, r6
 8013c20:	4620      	mov	r0, r4
 8013c22:	f000 fccb 	bl	80145bc <__mdiff>
 8013c26:	68c2      	ldr	r2, [r0, #12]
 8013c28:	f109 3bff 	add.w	fp, r9, #4294967295
 8013c2c:	4605      	mov	r5, r0
 8013c2e:	bb02      	cbnz	r2, 8013c72 <_dtoa_r+0xa62>
 8013c30:	4601      	mov	r1, r0
 8013c32:	ee18 0a10 	vmov	r0, s16
 8013c36:	f000 fca5 	bl	8014584 <__mcmp>
 8013c3a:	4602      	mov	r2, r0
 8013c3c:	4629      	mov	r1, r5
 8013c3e:	4620      	mov	r0, r4
 8013c40:	9207      	str	r2, [sp, #28]
 8013c42:	f000 fa5d 	bl	8014100 <_Bfree>
 8013c46:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013c4a:	ea43 0102 	orr.w	r1, r3, r2
 8013c4e:	9b04      	ldr	r3, [sp, #16]
 8013c50:	430b      	orrs	r3, r1
 8013c52:	464d      	mov	r5, r9
 8013c54:	d10f      	bne.n	8013c76 <_dtoa_r+0xa66>
 8013c56:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013c5a:	d02a      	beq.n	8013cb2 <_dtoa_r+0xaa2>
 8013c5c:	9b03      	ldr	r3, [sp, #12]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	dd02      	ble.n	8013c68 <_dtoa_r+0xa58>
 8013c62:	9b02      	ldr	r3, [sp, #8]
 8013c64:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8013c68:	f88b a000 	strb.w	sl, [fp]
 8013c6c:	e775      	b.n	8013b5a <_dtoa_r+0x94a>
 8013c6e:	4638      	mov	r0, r7
 8013c70:	e7ba      	b.n	8013be8 <_dtoa_r+0x9d8>
 8013c72:	2201      	movs	r2, #1
 8013c74:	e7e2      	b.n	8013c3c <_dtoa_r+0xa2c>
 8013c76:	9b03      	ldr	r3, [sp, #12]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	db04      	blt.n	8013c86 <_dtoa_r+0xa76>
 8013c7c:	9906      	ldr	r1, [sp, #24]
 8013c7e:	430b      	orrs	r3, r1
 8013c80:	9904      	ldr	r1, [sp, #16]
 8013c82:	430b      	orrs	r3, r1
 8013c84:	d122      	bne.n	8013ccc <_dtoa_r+0xabc>
 8013c86:	2a00      	cmp	r2, #0
 8013c88:	ddee      	ble.n	8013c68 <_dtoa_r+0xa58>
 8013c8a:	ee18 1a10 	vmov	r1, s16
 8013c8e:	2201      	movs	r2, #1
 8013c90:	4620      	mov	r0, r4
 8013c92:	f000 fc07 	bl	80144a4 <__lshift>
 8013c96:	4631      	mov	r1, r6
 8013c98:	ee08 0a10 	vmov	s16, r0
 8013c9c:	f000 fc72 	bl	8014584 <__mcmp>
 8013ca0:	2800      	cmp	r0, #0
 8013ca2:	dc03      	bgt.n	8013cac <_dtoa_r+0xa9c>
 8013ca4:	d1e0      	bne.n	8013c68 <_dtoa_r+0xa58>
 8013ca6:	f01a 0f01 	tst.w	sl, #1
 8013caa:	d0dd      	beq.n	8013c68 <_dtoa_r+0xa58>
 8013cac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013cb0:	d1d7      	bne.n	8013c62 <_dtoa_r+0xa52>
 8013cb2:	2339      	movs	r3, #57	; 0x39
 8013cb4:	f88b 3000 	strb.w	r3, [fp]
 8013cb8:	462b      	mov	r3, r5
 8013cba:	461d      	mov	r5, r3
 8013cbc:	3b01      	subs	r3, #1
 8013cbe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013cc2:	2a39      	cmp	r2, #57	; 0x39
 8013cc4:	d071      	beq.n	8013daa <_dtoa_r+0xb9a>
 8013cc6:	3201      	adds	r2, #1
 8013cc8:	701a      	strb	r2, [r3, #0]
 8013cca:	e746      	b.n	8013b5a <_dtoa_r+0x94a>
 8013ccc:	2a00      	cmp	r2, #0
 8013cce:	dd07      	ble.n	8013ce0 <_dtoa_r+0xad0>
 8013cd0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013cd4:	d0ed      	beq.n	8013cb2 <_dtoa_r+0xaa2>
 8013cd6:	f10a 0301 	add.w	r3, sl, #1
 8013cda:	f88b 3000 	strb.w	r3, [fp]
 8013cde:	e73c      	b.n	8013b5a <_dtoa_r+0x94a>
 8013ce0:	9b05      	ldr	r3, [sp, #20]
 8013ce2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8013ce6:	4599      	cmp	r9, r3
 8013ce8:	d047      	beq.n	8013d7a <_dtoa_r+0xb6a>
 8013cea:	ee18 1a10 	vmov	r1, s16
 8013cee:	2300      	movs	r3, #0
 8013cf0:	220a      	movs	r2, #10
 8013cf2:	4620      	mov	r0, r4
 8013cf4:	f000 fa26 	bl	8014144 <__multadd>
 8013cf8:	45b8      	cmp	r8, r7
 8013cfa:	ee08 0a10 	vmov	s16, r0
 8013cfe:	f04f 0300 	mov.w	r3, #0
 8013d02:	f04f 020a 	mov.w	r2, #10
 8013d06:	4641      	mov	r1, r8
 8013d08:	4620      	mov	r0, r4
 8013d0a:	d106      	bne.n	8013d1a <_dtoa_r+0xb0a>
 8013d0c:	f000 fa1a 	bl	8014144 <__multadd>
 8013d10:	4680      	mov	r8, r0
 8013d12:	4607      	mov	r7, r0
 8013d14:	f109 0901 	add.w	r9, r9, #1
 8013d18:	e772      	b.n	8013c00 <_dtoa_r+0x9f0>
 8013d1a:	f000 fa13 	bl	8014144 <__multadd>
 8013d1e:	4639      	mov	r1, r7
 8013d20:	4680      	mov	r8, r0
 8013d22:	2300      	movs	r3, #0
 8013d24:	220a      	movs	r2, #10
 8013d26:	4620      	mov	r0, r4
 8013d28:	f000 fa0c 	bl	8014144 <__multadd>
 8013d2c:	4607      	mov	r7, r0
 8013d2e:	e7f1      	b.n	8013d14 <_dtoa_r+0xb04>
 8013d30:	9b03      	ldr	r3, [sp, #12]
 8013d32:	9302      	str	r3, [sp, #8]
 8013d34:	9d01      	ldr	r5, [sp, #4]
 8013d36:	ee18 0a10 	vmov	r0, s16
 8013d3a:	4631      	mov	r1, r6
 8013d3c:	f7ff f9dc 	bl	80130f8 <quorem>
 8013d40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013d44:	9b01      	ldr	r3, [sp, #4]
 8013d46:	f805 ab01 	strb.w	sl, [r5], #1
 8013d4a:	1aea      	subs	r2, r5, r3
 8013d4c:	9b02      	ldr	r3, [sp, #8]
 8013d4e:	4293      	cmp	r3, r2
 8013d50:	dd09      	ble.n	8013d66 <_dtoa_r+0xb56>
 8013d52:	ee18 1a10 	vmov	r1, s16
 8013d56:	2300      	movs	r3, #0
 8013d58:	220a      	movs	r2, #10
 8013d5a:	4620      	mov	r0, r4
 8013d5c:	f000 f9f2 	bl	8014144 <__multadd>
 8013d60:	ee08 0a10 	vmov	s16, r0
 8013d64:	e7e7      	b.n	8013d36 <_dtoa_r+0xb26>
 8013d66:	9b02      	ldr	r3, [sp, #8]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	bfc8      	it	gt
 8013d6c:	461d      	movgt	r5, r3
 8013d6e:	9b01      	ldr	r3, [sp, #4]
 8013d70:	bfd8      	it	le
 8013d72:	2501      	movle	r5, #1
 8013d74:	441d      	add	r5, r3
 8013d76:	f04f 0800 	mov.w	r8, #0
 8013d7a:	ee18 1a10 	vmov	r1, s16
 8013d7e:	2201      	movs	r2, #1
 8013d80:	4620      	mov	r0, r4
 8013d82:	f000 fb8f 	bl	80144a4 <__lshift>
 8013d86:	4631      	mov	r1, r6
 8013d88:	ee08 0a10 	vmov	s16, r0
 8013d8c:	f000 fbfa 	bl	8014584 <__mcmp>
 8013d90:	2800      	cmp	r0, #0
 8013d92:	dc91      	bgt.n	8013cb8 <_dtoa_r+0xaa8>
 8013d94:	d102      	bne.n	8013d9c <_dtoa_r+0xb8c>
 8013d96:	f01a 0f01 	tst.w	sl, #1
 8013d9a:	d18d      	bne.n	8013cb8 <_dtoa_r+0xaa8>
 8013d9c:	462b      	mov	r3, r5
 8013d9e:	461d      	mov	r5, r3
 8013da0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013da4:	2a30      	cmp	r2, #48	; 0x30
 8013da6:	d0fa      	beq.n	8013d9e <_dtoa_r+0xb8e>
 8013da8:	e6d7      	b.n	8013b5a <_dtoa_r+0x94a>
 8013daa:	9a01      	ldr	r2, [sp, #4]
 8013dac:	429a      	cmp	r2, r3
 8013dae:	d184      	bne.n	8013cba <_dtoa_r+0xaaa>
 8013db0:	9b00      	ldr	r3, [sp, #0]
 8013db2:	3301      	adds	r3, #1
 8013db4:	9300      	str	r3, [sp, #0]
 8013db6:	2331      	movs	r3, #49	; 0x31
 8013db8:	7013      	strb	r3, [r2, #0]
 8013dba:	e6ce      	b.n	8013b5a <_dtoa_r+0x94a>
 8013dbc:	4b09      	ldr	r3, [pc, #36]	; (8013de4 <_dtoa_r+0xbd4>)
 8013dbe:	f7ff ba95 	b.w	80132ec <_dtoa_r+0xdc>
 8013dc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	f47f aa6e 	bne.w	80132a6 <_dtoa_r+0x96>
 8013dca:	4b07      	ldr	r3, [pc, #28]	; (8013de8 <_dtoa_r+0xbd8>)
 8013dcc:	f7ff ba8e 	b.w	80132ec <_dtoa_r+0xdc>
 8013dd0:	9b02      	ldr	r3, [sp, #8]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	dcae      	bgt.n	8013d34 <_dtoa_r+0xb24>
 8013dd6:	9b06      	ldr	r3, [sp, #24]
 8013dd8:	2b02      	cmp	r3, #2
 8013dda:	f73f aea8 	bgt.w	8013b2e <_dtoa_r+0x91e>
 8013dde:	e7a9      	b.n	8013d34 <_dtoa_r+0xb24>
 8013de0:	0801528b 	.word	0x0801528b
 8013de4:	080151e8 	.word	0x080151e8
 8013de8:	0801520c 	.word	0x0801520c

08013dec <__sflush_r>:
 8013dec:	898a      	ldrh	r2, [r1, #12]
 8013dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013df2:	4605      	mov	r5, r0
 8013df4:	0710      	lsls	r0, r2, #28
 8013df6:	460c      	mov	r4, r1
 8013df8:	d458      	bmi.n	8013eac <__sflush_r+0xc0>
 8013dfa:	684b      	ldr	r3, [r1, #4]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	dc05      	bgt.n	8013e0c <__sflush_r+0x20>
 8013e00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	dc02      	bgt.n	8013e0c <__sflush_r+0x20>
 8013e06:	2000      	movs	r0, #0
 8013e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013e0e:	2e00      	cmp	r6, #0
 8013e10:	d0f9      	beq.n	8013e06 <__sflush_r+0x1a>
 8013e12:	2300      	movs	r3, #0
 8013e14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013e18:	682f      	ldr	r7, [r5, #0]
 8013e1a:	602b      	str	r3, [r5, #0]
 8013e1c:	d032      	beq.n	8013e84 <__sflush_r+0x98>
 8013e1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013e20:	89a3      	ldrh	r3, [r4, #12]
 8013e22:	075a      	lsls	r2, r3, #29
 8013e24:	d505      	bpl.n	8013e32 <__sflush_r+0x46>
 8013e26:	6863      	ldr	r3, [r4, #4]
 8013e28:	1ac0      	subs	r0, r0, r3
 8013e2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013e2c:	b10b      	cbz	r3, 8013e32 <__sflush_r+0x46>
 8013e2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013e30:	1ac0      	subs	r0, r0, r3
 8013e32:	2300      	movs	r3, #0
 8013e34:	4602      	mov	r2, r0
 8013e36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013e38:	6a21      	ldr	r1, [r4, #32]
 8013e3a:	4628      	mov	r0, r5
 8013e3c:	47b0      	blx	r6
 8013e3e:	1c43      	adds	r3, r0, #1
 8013e40:	89a3      	ldrh	r3, [r4, #12]
 8013e42:	d106      	bne.n	8013e52 <__sflush_r+0x66>
 8013e44:	6829      	ldr	r1, [r5, #0]
 8013e46:	291d      	cmp	r1, #29
 8013e48:	d82c      	bhi.n	8013ea4 <__sflush_r+0xb8>
 8013e4a:	4a2a      	ldr	r2, [pc, #168]	; (8013ef4 <__sflush_r+0x108>)
 8013e4c:	40ca      	lsrs	r2, r1
 8013e4e:	07d6      	lsls	r6, r2, #31
 8013e50:	d528      	bpl.n	8013ea4 <__sflush_r+0xb8>
 8013e52:	2200      	movs	r2, #0
 8013e54:	6062      	str	r2, [r4, #4]
 8013e56:	04d9      	lsls	r1, r3, #19
 8013e58:	6922      	ldr	r2, [r4, #16]
 8013e5a:	6022      	str	r2, [r4, #0]
 8013e5c:	d504      	bpl.n	8013e68 <__sflush_r+0x7c>
 8013e5e:	1c42      	adds	r2, r0, #1
 8013e60:	d101      	bne.n	8013e66 <__sflush_r+0x7a>
 8013e62:	682b      	ldr	r3, [r5, #0]
 8013e64:	b903      	cbnz	r3, 8013e68 <__sflush_r+0x7c>
 8013e66:	6560      	str	r0, [r4, #84]	; 0x54
 8013e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013e6a:	602f      	str	r7, [r5, #0]
 8013e6c:	2900      	cmp	r1, #0
 8013e6e:	d0ca      	beq.n	8013e06 <__sflush_r+0x1a>
 8013e70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013e74:	4299      	cmp	r1, r3
 8013e76:	d002      	beq.n	8013e7e <__sflush_r+0x92>
 8013e78:	4628      	mov	r0, r5
 8013e7a:	f7fe f9ad 	bl	80121d8 <_free_r>
 8013e7e:	2000      	movs	r0, #0
 8013e80:	6360      	str	r0, [r4, #52]	; 0x34
 8013e82:	e7c1      	b.n	8013e08 <__sflush_r+0x1c>
 8013e84:	6a21      	ldr	r1, [r4, #32]
 8013e86:	2301      	movs	r3, #1
 8013e88:	4628      	mov	r0, r5
 8013e8a:	47b0      	blx	r6
 8013e8c:	1c41      	adds	r1, r0, #1
 8013e8e:	d1c7      	bne.n	8013e20 <__sflush_r+0x34>
 8013e90:	682b      	ldr	r3, [r5, #0]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d0c4      	beq.n	8013e20 <__sflush_r+0x34>
 8013e96:	2b1d      	cmp	r3, #29
 8013e98:	d001      	beq.n	8013e9e <__sflush_r+0xb2>
 8013e9a:	2b16      	cmp	r3, #22
 8013e9c:	d101      	bne.n	8013ea2 <__sflush_r+0xb6>
 8013e9e:	602f      	str	r7, [r5, #0]
 8013ea0:	e7b1      	b.n	8013e06 <__sflush_r+0x1a>
 8013ea2:	89a3      	ldrh	r3, [r4, #12]
 8013ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ea8:	81a3      	strh	r3, [r4, #12]
 8013eaa:	e7ad      	b.n	8013e08 <__sflush_r+0x1c>
 8013eac:	690f      	ldr	r7, [r1, #16]
 8013eae:	2f00      	cmp	r7, #0
 8013eb0:	d0a9      	beq.n	8013e06 <__sflush_r+0x1a>
 8013eb2:	0793      	lsls	r3, r2, #30
 8013eb4:	680e      	ldr	r6, [r1, #0]
 8013eb6:	bf08      	it	eq
 8013eb8:	694b      	ldreq	r3, [r1, #20]
 8013eba:	600f      	str	r7, [r1, #0]
 8013ebc:	bf18      	it	ne
 8013ebe:	2300      	movne	r3, #0
 8013ec0:	eba6 0807 	sub.w	r8, r6, r7
 8013ec4:	608b      	str	r3, [r1, #8]
 8013ec6:	f1b8 0f00 	cmp.w	r8, #0
 8013eca:	dd9c      	ble.n	8013e06 <__sflush_r+0x1a>
 8013ecc:	6a21      	ldr	r1, [r4, #32]
 8013ece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013ed0:	4643      	mov	r3, r8
 8013ed2:	463a      	mov	r2, r7
 8013ed4:	4628      	mov	r0, r5
 8013ed6:	47b0      	blx	r6
 8013ed8:	2800      	cmp	r0, #0
 8013eda:	dc06      	bgt.n	8013eea <__sflush_r+0xfe>
 8013edc:	89a3      	ldrh	r3, [r4, #12]
 8013ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ee2:	81a3      	strh	r3, [r4, #12]
 8013ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8013ee8:	e78e      	b.n	8013e08 <__sflush_r+0x1c>
 8013eea:	4407      	add	r7, r0
 8013eec:	eba8 0800 	sub.w	r8, r8, r0
 8013ef0:	e7e9      	b.n	8013ec6 <__sflush_r+0xda>
 8013ef2:	bf00      	nop
 8013ef4:	20400001 	.word	0x20400001

08013ef8 <_fflush_r>:
 8013ef8:	b538      	push	{r3, r4, r5, lr}
 8013efa:	690b      	ldr	r3, [r1, #16]
 8013efc:	4605      	mov	r5, r0
 8013efe:	460c      	mov	r4, r1
 8013f00:	b913      	cbnz	r3, 8013f08 <_fflush_r+0x10>
 8013f02:	2500      	movs	r5, #0
 8013f04:	4628      	mov	r0, r5
 8013f06:	bd38      	pop	{r3, r4, r5, pc}
 8013f08:	b118      	cbz	r0, 8013f12 <_fflush_r+0x1a>
 8013f0a:	6983      	ldr	r3, [r0, #24]
 8013f0c:	b90b      	cbnz	r3, 8013f12 <_fflush_r+0x1a>
 8013f0e:	f7fe f883 	bl	8012018 <__sinit>
 8013f12:	4b14      	ldr	r3, [pc, #80]	; (8013f64 <_fflush_r+0x6c>)
 8013f14:	429c      	cmp	r4, r3
 8013f16:	d11b      	bne.n	8013f50 <_fflush_r+0x58>
 8013f18:	686c      	ldr	r4, [r5, #4]
 8013f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d0ef      	beq.n	8013f02 <_fflush_r+0xa>
 8013f22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013f24:	07d0      	lsls	r0, r2, #31
 8013f26:	d404      	bmi.n	8013f32 <_fflush_r+0x3a>
 8013f28:	0599      	lsls	r1, r3, #22
 8013f2a:	d402      	bmi.n	8013f32 <_fflush_r+0x3a>
 8013f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f2e:	f7ee ffcd 	bl	8002ecc <__retarget_lock_acquire_recursive>
 8013f32:	4628      	mov	r0, r5
 8013f34:	4621      	mov	r1, r4
 8013f36:	f7ff ff59 	bl	8013dec <__sflush_r>
 8013f3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013f3c:	07da      	lsls	r2, r3, #31
 8013f3e:	4605      	mov	r5, r0
 8013f40:	d4e0      	bmi.n	8013f04 <_fflush_r+0xc>
 8013f42:	89a3      	ldrh	r3, [r4, #12]
 8013f44:	059b      	lsls	r3, r3, #22
 8013f46:	d4dd      	bmi.n	8013f04 <_fflush_r+0xc>
 8013f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f4a:	f7ee ffd3 	bl	8002ef4 <__retarget_lock_release_recursive>
 8013f4e:	e7d9      	b.n	8013f04 <_fflush_r+0xc>
 8013f50:	4b05      	ldr	r3, [pc, #20]	; (8013f68 <_fflush_r+0x70>)
 8013f52:	429c      	cmp	r4, r3
 8013f54:	d101      	bne.n	8013f5a <_fflush_r+0x62>
 8013f56:	68ac      	ldr	r4, [r5, #8]
 8013f58:	e7df      	b.n	8013f1a <_fflush_r+0x22>
 8013f5a:	4b04      	ldr	r3, [pc, #16]	; (8013f6c <_fflush_r+0x74>)
 8013f5c:	429c      	cmp	r4, r3
 8013f5e:	bf08      	it	eq
 8013f60:	68ec      	ldreq	r4, [r5, #12]
 8013f62:	e7da      	b.n	8013f1a <_fflush_r+0x22>
 8013f64:	08015194 	.word	0x08015194
 8013f68:	080151b4 	.word	0x080151b4
 8013f6c:	08015174 	.word	0x08015174

08013f70 <_localeconv_r>:
 8013f70:	4800      	ldr	r0, [pc, #0]	; (8013f74 <_localeconv_r+0x4>)
 8013f72:	4770      	bx	lr
 8013f74:	20000278 	.word	0x20000278

08013f78 <_lseek_r>:
 8013f78:	b538      	push	{r3, r4, r5, lr}
 8013f7a:	4d07      	ldr	r5, [pc, #28]	; (8013f98 <_lseek_r+0x20>)
 8013f7c:	4604      	mov	r4, r0
 8013f7e:	4608      	mov	r0, r1
 8013f80:	4611      	mov	r1, r2
 8013f82:	2200      	movs	r2, #0
 8013f84:	602a      	str	r2, [r5, #0]
 8013f86:	461a      	mov	r2, r3
 8013f88:	f7ed fdd2 	bl	8001b30 <_lseek>
 8013f8c:	1c43      	adds	r3, r0, #1
 8013f8e:	d102      	bne.n	8013f96 <_lseek_r+0x1e>
 8013f90:	682b      	ldr	r3, [r5, #0]
 8013f92:	b103      	cbz	r3, 8013f96 <_lseek_r+0x1e>
 8013f94:	6023      	str	r3, [r4, #0]
 8013f96:	bd38      	pop	{r3, r4, r5, pc}
 8013f98:	20006ca8 	.word	0x20006ca8

08013f9c <__swhatbuf_r>:
 8013f9c:	b570      	push	{r4, r5, r6, lr}
 8013f9e:	460e      	mov	r6, r1
 8013fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fa4:	2900      	cmp	r1, #0
 8013fa6:	b096      	sub	sp, #88	; 0x58
 8013fa8:	4614      	mov	r4, r2
 8013faa:	461d      	mov	r5, r3
 8013fac:	da08      	bge.n	8013fc0 <__swhatbuf_r+0x24>
 8013fae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	602a      	str	r2, [r5, #0]
 8013fb6:	061a      	lsls	r2, r3, #24
 8013fb8:	d410      	bmi.n	8013fdc <__swhatbuf_r+0x40>
 8013fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013fbe:	e00e      	b.n	8013fde <__swhatbuf_r+0x42>
 8013fc0:	466a      	mov	r2, sp
 8013fc2:	f000 fd93 	bl	8014aec <_fstat_r>
 8013fc6:	2800      	cmp	r0, #0
 8013fc8:	dbf1      	blt.n	8013fae <__swhatbuf_r+0x12>
 8013fca:	9a01      	ldr	r2, [sp, #4]
 8013fcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013fd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013fd4:	425a      	negs	r2, r3
 8013fd6:	415a      	adcs	r2, r3
 8013fd8:	602a      	str	r2, [r5, #0]
 8013fda:	e7ee      	b.n	8013fba <__swhatbuf_r+0x1e>
 8013fdc:	2340      	movs	r3, #64	; 0x40
 8013fde:	2000      	movs	r0, #0
 8013fe0:	6023      	str	r3, [r4, #0]
 8013fe2:	b016      	add	sp, #88	; 0x58
 8013fe4:	bd70      	pop	{r4, r5, r6, pc}
	...

08013fe8 <__smakebuf_r>:
 8013fe8:	898b      	ldrh	r3, [r1, #12]
 8013fea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013fec:	079d      	lsls	r5, r3, #30
 8013fee:	4606      	mov	r6, r0
 8013ff0:	460c      	mov	r4, r1
 8013ff2:	d507      	bpl.n	8014004 <__smakebuf_r+0x1c>
 8013ff4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013ff8:	6023      	str	r3, [r4, #0]
 8013ffa:	6123      	str	r3, [r4, #16]
 8013ffc:	2301      	movs	r3, #1
 8013ffe:	6163      	str	r3, [r4, #20]
 8014000:	b002      	add	sp, #8
 8014002:	bd70      	pop	{r4, r5, r6, pc}
 8014004:	ab01      	add	r3, sp, #4
 8014006:	466a      	mov	r2, sp
 8014008:	f7ff ffc8 	bl	8013f9c <__swhatbuf_r>
 801400c:	9900      	ldr	r1, [sp, #0]
 801400e:	4605      	mov	r5, r0
 8014010:	4630      	mov	r0, r6
 8014012:	f7fe f94d 	bl	80122b0 <_malloc_r>
 8014016:	b948      	cbnz	r0, 801402c <__smakebuf_r+0x44>
 8014018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801401c:	059a      	lsls	r2, r3, #22
 801401e:	d4ef      	bmi.n	8014000 <__smakebuf_r+0x18>
 8014020:	f023 0303 	bic.w	r3, r3, #3
 8014024:	f043 0302 	orr.w	r3, r3, #2
 8014028:	81a3      	strh	r3, [r4, #12]
 801402a:	e7e3      	b.n	8013ff4 <__smakebuf_r+0xc>
 801402c:	4b0d      	ldr	r3, [pc, #52]	; (8014064 <__smakebuf_r+0x7c>)
 801402e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014030:	89a3      	ldrh	r3, [r4, #12]
 8014032:	6020      	str	r0, [r4, #0]
 8014034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014038:	81a3      	strh	r3, [r4, #12]
 801403a:	9b00      	ldr	r3, [sp, #0]
 801403c:	6163      	str	r3, [r4, #20]
 801403e:	9b01      	ldr	r3, [sp, #4]
 8014040:	6120      	str	r0, [r4, #16]
 8014042:	b15b      	cbz	r3, 801405c <__smakebuf_r+0x74>
 8014044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014048:	4630      	mov	r0, r6
 801404a:	f000 fd61 	bl	8014b10 <_isatty_r>
 801404e:	b128      	cbz	r0, 801405c <__smakebuf_r+0x74>
 8014050:	89a3      	ldrh	r3, [r4, #12]
 8014052:	f023 0303 	bic.w	r3, r3, #3
 8014056:	f043 0301 	orr.w	r3, r3, #1
 801405a:	81a3      	strh	r3, [r4, #12]
 801405c:	89a0      	ldrh	r0, [r4, #12]
 801405e:	4305      	orrs	r5, r0
 8014060:	81a5      	strh	r5, [r4, #12]
 8014062:	e7cd      	b.n	8014000 <__smakebuf_r+0x18>
 8014064:	08011fb1 	.word	0x08011fb1

08014068 <__malloc_lock>:
 8014068:	4801      	ldr	r0, [pc, #4]	; (8014070 <__malloc_lock+0x8>)
 801406a:	f7ee bf2f 	b.w	8002ecc <__retarget_lock_acquire_recursive>
 801406e:	bf00      	nop
 8014070:	20000654 	.word	0x20000654

08014074 <__malloc_unlock>:
 8014074:	4801      	ldr	r0, [pc, #4]	; (801407c <__malloc_unlock+0x8>)
 8014076:	f7ee bf3d 	b.w	8002ef4 <__retarget_lock_release_recursive>
 801407a:	bf00      	nop
 801407c:	20000654 	.word	0x20000654

08014080 <_Balloc>:
 8014080:	b570      	push	{r4, r5, r6, lr}
 8014082:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014084:	4604      	mov	r4, r0
 8014086:	460d      	mov	r5, r1
 8014088:	b976      	cbnz	r6, 80140a8 <_Balloc+0x28>
 801408a:	2010      	movs	r0, #16
 801408c:	f7fe f886 	bl	801219c <malloc>
 8014090:	4602      	mov	r2, r0
 8014092:	6260      	str	r0, [r4, #36]	; 0x24
 8014094:	b920      	cbnz	r0, 80140a0 <_Balloc+0x20>
 8014096:	4b18      	ldr	r3, [pc, #96]	; (80140f8 <_Balloc+0x78>)
 8014098:	4818      	ldr	r0, [pc, #96]	; (80140fc <_Balloc+0x7c>)
 801409a:	2166      	movs	r1, #102	; 0x66
 801409c:	f000 fcf6 	bl	8014a8c <__assert_func>
 80140a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80140a4:	6006      	str	r6, [r0, #0]
 80140a6:	60c6      	str	r6, [r0, #12]
 80140a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80140aa:	68f3      	ldr	r3, [r6, #12]
 80140ac:	b183      	cbz	r3, 80140d0 <_Balloc+0x50>
 80140ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140b0:	68db      	ldr	r3, [r3, #12]
 80140b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80140b6:	b9b8      	cbnz	r0, 80140e8 <_Balloc+0x68>
 80140b8:	2101      	movs	r1, #1
 80140ba:	fa01 f605 	lsl.w	r6, r1, r5
 80140be:	1d72      	adds	r2, r6, #5
 80140c0:	0092      	lsls	r2, r2, #2
 80140c2:	4620      	mov	r0, r4
 80140c4:	f000 fb60 	bl	8014788 <_calloc_r>
 80140c8:	b160      	cbz	r0, 80140e4 <_Balloc+0x64>
 80140ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80140ce:	e00e      	b.n	80140ee <_Balloc+0x6e>
 80140d0:	2221      	movs	r2, #33	; 0x21
 80140d2:	2104      	movs	r1, #4
 80140d4:	4620      	mov	r0, r4
 80140d6:	f000 fb57 	bl	8014788 <_calloc_r>
 80140da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140dc:	60f0      	str	r0, [r6, #12]
 80140de:	68db      	ldr	r3, [r3, #12]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d1e4      	bne.n	80140ae <_Balloc+0x2e>
 80140e4:	2000      	movs	r0, #0
 80140e6:	bd70      	pop	{r4, r5, r6, pc}
 80140e8:	6802      	ldr	r2, [r0, #0]
 80140ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80140ee:	2300      	movs	r3, #0
 80140f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80140f4:	e7f7      	b.n	80140e6 <_Balloc+0x66>
 80140f6:	bf00      	nop
 80140f8:	08015219 	.word	0x08015219
 80140fc:	0801529c 	.word	0x0801529c

08014100 <_Bfree>:
 8014100:	b570      	push	{r4, r5, r6, lr}
 8014102:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014104:	4605      	mov	r5, r0
 8014106:	460c      	mov	r4, r1
 8014108:	b976      	cbnz	r6, 8014128 <_Bfree+0x28>
 801410a:	2010      	movs	r0, #16
 801410c:	f7fe f846 	bl	801219c <malloc>
 8014110:	4602      	mov	r2, r0
 8014112:	6268      	str	r0, [r5, #36]	; 0x24
 8014114:	b920      	cbnz	r0, 8014120 <_Bfree+0x20>
 8014116:	4b09      	ldr	r3, [pc, #36]	; (801413c <_Bfree+0x3c>)
 8014118:	4809      	ldr	r0, [pc, #36]	; (8014140 <_Bfree+0x40>)
 801411a:	218a      	movs	r1, #138	; 0x8a
 801411c:	f000 fcb6 	bl	8014a8c <__assert_func>
 8014120:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014124:	6006      	str	r6, [r0, #0]
 8014126:	60c6      	str	r6, [r0, #12]
 8014128:	b13c      	cbz	r4, 801413a <_Bfree+0x3a>
 801412a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801412c:	6862      	ldr	r2, [r4, #4]
 801412e:	68db      	ldr	r3, [r3, #12]
 8014130:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014134:	6021      	str	r1, [r4, #0]
 8014136:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801413a:	bd70      	pop	{r4, r5, r6, pc}
 801413c:	08015219 	.word	0x08015219
 8014140:	0801529c 	.word	0x0801529c

08014144 <__multadd>:
 8014144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014148:	690d      	ldr	r5, [r1, #16]
 801414a:	4607      	mov	r7, r0
 801414c:	460c      	mov	r4, r1
 801414e:	461e      	mov	r6, r3
 8014150:	f101 0c14 	add.w	ip, r1, #20
 8014154:	2000      	movs	r0, #0
 8014156:	f8dc 3000 	ldr.w	r3, [ip]
 801415a:	b299      	uxth	r1, r3
 801415c:	fb02 6101 	mla	r1, r2, r1, r6
 8014160:	0c1e      	lsrs	r6, r3, #16
 8014162:	0c0b      	lsrs	r3, r1, #16
 8014164:	fb02 3306 	mla	r3, r2, r6, r3
 8014168:	b289      	uxth	r1, r1
 801416a:	3001      	adds	r0, #1
 801416c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014170:	4285      	cmp	r5, r0
 8014172:	f84c 1b04 	str.w	r1, [ip], #4
 8014176:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801417a:	dcec      	bgt.n	8014156 <__multadd+0x12>
 801417c:	b30e      	cbz	r6, 80141c2 <__multadd+0x7e>
 801417e:	68a3      	ldr	r3, [r4, #8]
 8014180:	42ab      	cmp	r3, r5
 8014182:	dc19      	bgt.n	80141b8 <__multadd+0x74>
 8014184:	6861      	ldr	r1, [r4, #4]
 8014186:	4638      	mov	r0, r7
 8014188:	3101      	adds	r1, #1
 801418a:	f7ff ff79 	bl	8014080 <_Balloc>
 801418e:	4680      	mov	r8, r0
 8014190:	b928      	cbnz	r0, 801419e <__multadd+0x5a>
 8014192:	4602      	mov	r2, r0
 8014194:	4b0c      	ldr	r3, [pc, #48]	; (80141c8 <__multadd+0x84>)
 8014196:	480d      	ldr	r0, [pc, #52]	; (80141cc <__multadd+0x88>)
 8014198:	21b5      	movs	r1, #181	; 0xb5
 801419a:	f000 fc77 	bl	8014a8c <__assert_func>
 801419e:	6922      	ldr	r2, [r4, #16]
 80141a0:	3202      	adds	r2, #2
 80141a2:	f104 010c 	add.w	r1, r4, #12
 80141a6:	0092      	lsls	r2, r2, #2
 80141a8:	300c      	adds	r0, #12
 80141aa:	f7fd ffff 	bl	80121ac <memcpy>
 80141ae:	4621      	mov	r1, r4
 80141b0:	4638      	mov	r0, r7
 80141b2:	f7ff ffa5 	bl	8014100 <_Bfree>
 80141b6:	4644      	mov	r4, r8
 80141b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80141bc:	3501      	adds	r5, #1
 80141be:	615e      	str	r6, [r3, #20]
 80141c0:	6125      	str	r5, [r4, #16]
 80141c2:	4620      	mov	r0, r4
 80141c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141c8:	0801528b 	.word	0x0801528b
 80141cc:	0801529c 	.word	0x0801529c

080141d0 <__hi0bits>:
 80141d0:	0c03      	lsrs	r3, r0, #16
 80141d2:	041b      	lsls	r3, r3, #16
 80141d4:	b9d3      	cbnz	r3, 801420c <__hi0bits+0x3c>
 80141d6:	0400      	lsls	r0, r0, #16
 80141d8:	2310      	movs	r3, #16
 80141da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80141de:	bf04      	itt	eq
 80141e0:	0200      	lsleq	r0, r0, #8
 80141e2:	3308      	addeq	r3, #8
 80141e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80141e8:	bf04      	itt	eq
 80141ea:	0100      	lsleq	r0, r0, #4
 80141ec:	3304      	addeq	r3, #4
 80141ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80141f2:	bf04      	itt	eq
 80141f4:	0080      	lsleq	r0, r0, #2
 80141f6:	3302      	addeq	r3, #2
 80141f8:	2800      	cmp	r0, #0
 80141fa:	db05      	blt.n	8014208 <__hi0bits+0x38>
 80141fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014200:	f103 0301 	add.w	r3, r3, #1
 8014204:	bf08      	it	eq
 8014206:	2320      	moveq	r3, #32
 8014208:	4618      	mov	r0, r3
 801420a:	4770      	bx	lr
 801420c:	2300      	movs	r3, #0
 801420e:	e7e4      	b.n	80141da <__hi0bits+0xa>

08014210 <__lo0bits>:
 8014210:	6803      	ldr	r3, [r0, #0]
 8014212:	f013 0207 	ands.w	r2, r3, #7
 8014216:	4601      	mov	r1, r0
 8014218:	d00b      	beq.n	8014232 <__lo0bits+0x22>
 801421a:	07da      	lsls	r2, r3, #31
 801421c:	d423      	bmi.n	8014266 <__lo0bits+0x56>
 801421e:	0798      	lsls	r0, r3, #30
 8014220:	bf49      	itett	mi
 8014222:	085b      	lsrmi	r3, r3, #1
 8014224:	089b      	lsrpl	r3, r3, #2
 8014226:	2001      	movmi	r0, #1
 8014228:	600b      	strmi	r3, [r1, #0]
 801422a:	bf5c      	itt	pl
 801422c:	600b      	strpl	r3, [r1, #0]
 801422e:	2002      	movpl	r0, #2
 8014230:	4770      	bx	lr
 8014232:	b298      	uxth	r0, r3
 8014234:	b9a8      	cbnz	r0, 8014262 <__lo0bits+0x52>
 8014236:	0c1b      	lsrs	r3, r3, #16
 8014238:	2010      	movs	r0, #16
 801423a:	b2da      	uxtb	r2, r3
 801423c:	b90a      	cbnz	r2, 8014242 <__lo0bits+0x32>
 801423e:	3008      	adds	r0, #8
 8014240:	0a1b      	lsrs	r3, r3, #8
 8014242:	071a      	lsls	r2, r3, #28
 8014244:	bf04      	itt	eq
 8014246:	091b      	lsreq	r3, r3, #4
 8014248:	3004      	addeq	r0, #4
 801424a:	079a      	lsls	r2, r3, #30
 801424c:	bf04      	itt	eq
 801424e:	089b      	lsreq	r3, r3, #2
 8014250:	3002      	addeq	r0, #2
 8014252:	07da      	lsls	r2, r3, #31
 8014254:	d403      	bmi.n	801425e <__lo0bits+0x4e>
 8014256:	085b      	lsrs	r3, r3, #1
 8014258:	f100 0001 	add.w	r0, r0, #1
 801425c:	d005      	beq.n	801426a <__lo0bits+0x5a>
 801425e:	600b      	str	r3, [r1, #0]
 8014260:	4770      	bx	lr
 8014262:	4610      	mov	r0, r2
 8014264:	e7e9      	b.n	801423a <__lo0bits+0x2a>
 8014266:	2000      	movs	r0, #0
 8014268:	4770      	bx	lr
 801426a:	2020      	movs	r0, #32
 801426c:	4770      	bx	lr
	...

08014270 <__i2b>:
 8014270:	b510      	push	{r4, lr}
 8014272:	460c      	mov	r4, r1
 8014274:	2101      	movs	r1, #1
 8014276:	f7ff ff03 	bl	8014080 <_Balloc>
 801427a:	4602      	mov	r2, r0
 801427c:	b928      	cbnz	r0, 801428a <__i2b+0x1a>
 801427e:	4b05      	ldr	r3, [pc, #20]	; (8014294 <__i2b+0x24>)
 8014280:	4805      	ldr	r0, [pc, #20]	; (8014298 <__i2b+0x28>)
 8014282:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014286:	f000 fc01 	bl	8014a8c <__assert_func>
 801428a:	2301      	movs	r3, #1
 801428c:	6144      	str	r4, [r0, #20]
 801428e:	6103      	str	r3, [r0, #16]
 8014290:	bd10      	pop	{r4, pc}
 8014292:	bf00      	nop
 8014294:	0801528b 	.word	0x0801528b
 8014298:	0801529c 	.word	0x0801529c

0801429c <__multiply>:
 801429c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142a0:	4691      	mov	r9, r2
 80142a2:	690a      	ldr	r2, [r1, #16]
 80142a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80142a8:	429a      	cmp	r2, r3
 80142aa:	bfb8      	it	lt
 80142ac:	460b      	movlt	r3, r1
 80142ae:	460c      	mov	r4, r1
 80142b0:	bfbc      	itt	lt
 80142b2:	464c      	movlt	r4, r9
 80142b4:	4699      	movlt	r9, r3
 80142b6:	6927      	ldr	r7, [r4, #16]
 80142b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80142bc:	68a3      	ldr	r3, [r4, #8]
 80142be:	6861      	ldr	r1, [r4, #4]
 80142c0:	eb07 060a 	add.w	r6, r7, sl
 80142c4:	42b3      	cmp	r3, r6
 80142c6:	b085      	sub	sp, #20
 80142c8:	bfb8      	it	lt
 80142ca:	3101      	addlt	r1, #1
 80142cc:	f7ff fed8 	bl	8014080 <_Balloc>
 80142d0:	b930      	cbnz	r0, 80142e0 <__multiply+0x44>
 80142d2:	4602      	mov	r2, r0
 80142d4:	4b44      	ldr	r3, [pc, #272]	; (80143e8 <__multiply+0x14c>)
 80142d6:	4845      	ldr	r0, [pc, #276]	; (80143ec <__multiply+0x150>)
 80142d8:	f240 115d 	movw	r1, #349	; 0x15d
 80142dc:	f000 fbd6 	bl	8014a8c <__assert_func>
 80142e0:	f100 0514 	add.w	r5, r0, #20
 80142e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80142e8:	462b      	mov	r3, r5
 80142ea:	2200      	movs	r2, #0
 80142ec:	4543      	cmp	r3, r8
 80142ee:	d321      	bcc.n	8014334 <__multiply+0x98>
 80142f0:	f104 0314 	add.w	r3, r4, #20
 80142f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80142f8:	f109 0314 	add.w	r3, r9, #20
 80142fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014300:	9202      	str	r2, [sp, #8]
 8014302:	1b3a      	subs	r2, r7, r4
 8014304:	3a15      	subs	r2, #21
 8014306:	f022 0203 	bic.w	r2, r2, #3
 801430a:	3204      	adds	r2, #4
 801430c:	f104 0115 	add.w	r1, r4, #21
 8014310:	428f      	cmp	r7, r1
 8014312:	bf38      	it	cc
 8014314:	2204      	movcc	r2, #4
 8014316:	9201      	str	r2, [sp, #4]
 8014318:	9a02      	ldr	r2, [sp, #8]
 801431a:	9303      	str	r3, [sp, #12]
 801431c:	429a      	cmp	r2, r3
 801431e:	d80c      	bhi.n	801433a <__multiply+0x9e>
 8014320:	2e00      	cmp	r6, #0
 8014322:	dd03      	ble.n	801432c <__multiply+0x90>
 8014324:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014328:	2b00      	cmp	r3, #0
 801432a:	d05a      	beq.n	80143e2 <__multiply+0x146>
 801432c:	6106      	str	r6, [r0, #16]
 801432e:	b005      	add	sp, #20
 8014330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014334:	f843 2b04 	str.w	r2, [r3], #4
 8014338:	e7d8      	b.n	80142ec <__multiply+0x50>
 801433a:	f8b3 a000 	ldrh.w	sl, [r3]
 801433e:	f1ba 0f00 	cmp.w	sl, #0
 8014342:	d024      	beq.n	801438e <__multiply+0xf2>
 8014344:	f104 0e14 	add.w	lr, r4, #20
 8014348:	46a9      	mov	r9, r5
 801434a:	f04f 0c00 	mov.w	ip, #0
 801434e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014352:	f8d9 1000 	ldr.w	r1, [r9]
 8014356:	fa1f fb82 	uxth.w	fp, r2
 801435a:	b289      	uxth	r1, r1
 801435c:	fb0a 110b 	mla	r1, sl, fp, r1
 8014360:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014364:	f8d9 2000 	ldr.w	r2, [r9]
 8014368:	4461      	add	r1, ip
 801436a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801436e:	fb0a c20b 	mla	r2, sl, fp, ip
 8014372:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014376:	b289      	uxth	r1, r1
 8014378:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801437c:	4577      	cmp	r7, lr
 801437e:	f849 1b04 	str.w	r1, [r9], #4
 8014382:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014386:	d8e2      	bhi.n	801434e <__multiply+0xb2>
 8014388:	9a01      	ldr	r2, [sp, #4]
 801438a:	f845 c002 	str.w	ip, [r5, r2]
 801438e:	9a03      	ldr	r2, [sp, #12]
 8014390:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014394:	3304      	adds	r3, #4
 8014396:	f1b9 0f00 	cmp.w	r9, #0
 801439a:	d020      	beq.n	80143de <__multiply+0x142>
 801439c:	6829      	ldr	r1, [r5, #0]
 801439e:	f104 0c14 	add.w	ip, r4, #20
 80143a2:	46ae      	mov	lr, r5
 80143a4:	f04f 0a00 	mov.w	sl, #0
 80143a8:	f8bc b000 	ldrh.w	fp, [ip]
 80143ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80143b0:	fb09 220b 	mla	r2, r9, fp, r2
 80143b4:	4492      	add	sl, r2
 80143b6:	b289      	uxth	r1, r1
 80143b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80143bc:	f84e 1b04 	str.w	r1, [lr], #4
 80143c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80143c4:	f8be 1000 	ldrh.w	r1, [lr]
 80143c8:	0c12      	lsrs	r2, r2, #16
 80143ca:	fb09 1102 	mla	r1, r9, r2, r1
 80143ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80143d2:	4567      	cmp	r7, ip
 80143d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80143d8:	d8e6      	bhi.n	80143a8 <__multiply+0x10c>
 80143da:	9a01      	ldr	r2, [sp, #4]
 80143dc:	50a9      	str	r1, [r5, r2]
 80143de:	3504      	adds	r5, #4
 80143e0:	e79a      	b.n	8014318 <__multiply+0x7c>
 80143e2:	3e01      	subs	r6, #1
 80143e4:	e79c      	b.n	8014320 <__multiply+0x84>
 80143e6:	bf00      	nop
 80143e8:	0801528b 	.word	0x0801528b
 80143ec:	0801529c 	.word	0x0801529c

080143f0 <__pow5mult>:
 80143f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143f4:	4615      	mov	r5, r2
 80143f6:	f012 0203 	ands.w	r2, r2, #3
 80143fa:	4606      	mov	r6, r0
 80143fc:	460f      	mov	r7, r1
 80143fe:	d007      	beq.n	8014410 <__pow5mult+0x20>
 8014400:	4c25      	ldr	r4, [pc, #148]	; (8014498 <__pow5mult+0xa8>)
 8014402:	3a01      	subs	r2, #1
 8014404:	2300      	movs	r3, #0
 8014406:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801440a:	f7ff fe9b 	bl	8014144 <__multadd>
 801440e:	4607      	mov	r7, r0
 8014410:	10ad      	asrs	r5, r5, #2
 8014412:	d03d      	beq.n	8014490 <__pow5mult+0xa0>
 8014414:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014416:	b97c      	cbnz	r4, 8014438 <__pow5mult+0x48>
 8014418:	2010      	movs	r0, #16
 801441a:	f7fd febf 	bl	801219c <malloc>
 801441e:	4602      	mov	r2, r0
 8014420:	6270      	str	r0, [r6, #36]	; 0x24
 8014422:	b928      	cbnz	r0, 8014430 <__pow5mult+0x40>
 8014424:	4b1d      	ldr	r3, [pc, #116]	; (801449c <__pow5mult+0xac>)
 8014426:	481e      	ldr	r0, [pc, #120]	; (80144a0 <__pow5mult+0xb0>)
 8014428:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801442c:	f000 fb2e 	bl	8014a8c <__assert_func>
 8014430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014434:	6004      	str	r4, [r0, #0]
 8014436:	60c4      	str	r4, [r0, #12]
 8014438:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801443c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014440:	b94c      	cbnz	r4, 8014456 <__pow5mult+0x66>
 8014442:	f240 2171 	movw	r1, #625	; 0x271
 8014446:	4630      	mov	r0, r6
 8014448:	f7ff ff12 	bl	8014270 <__i2b>
 801444c:	2300      	movs	r3, #0
 801444e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014452:	4604      	mov	r4, r0
 8014454:	6003      	str	r3, [r0, #0]
 8014456:	f04f 0900 	mov.w	r9, #0
 801445a:	07eb      	lsls	r3, r5, #31
 801445c:	d50a      	bpl.n	8014474 <__pow5mult+0x84>
 801445e:	4639      	mov	r1, r7
 8014460:	4622      	mov	r2, r4
 8014462:	4630      	mov	r0, r6
 8014464:	f7ff ff1a 	bl	801429c <__multiply>
 8014468:	4639      	mov	r1, r7
 801446a:	4680      	mov	r8, r0
 801446c:	4630      	mov	r0, r6
 801446e:	f7ff fe47 	bl	8014100 <_Bfree>
 8014472:	4647      	mov	r7, r8
 8014474:	106d      	asrs	r5, r5, #1
 8014476:	d00b      	beq.n	8014490 <__pow5mult+0xa0>
 8014478:	6820      	ldr	r0, [r4, #0]
 801447a:	b938      	cbnz	r0, 801448c <__pow5mult+0x9c>
 801447c:	4622      	mov	r2, r4
 801447e:	4621      	mov	r1, r4
 8014480:	4630      	mov	r0, r6
 8014482:	f7ff ff0b 	bl	801429c <__multiply>
 8014486:	6020      	str	r0, [r4, #0]
 8014488:	f8c0 9000 	str.w	r9, [r0]
 801448c:	4604      	mov	r4, r0
 801448e:	e7e4      	b.n	801445a <__pow5mult+0x6a>
 8014490:	4638      	mov	r0, r7
 8014492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014496:	bf00      	nop
 8014498:	080153e8 	.word	0x080153e8
 801449c:	08015219 	.word	0x08015219
 80144a0:	0801529c 	.word	0x0801529c

080144a4 <__lshift>:
 80144a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144a8:	460c      	mov	r4, r1
 80144aa:	6849      	ldr	r1, [r1, #4]
 80144ac:	6923      	ldr	r3, [r4, #16]
 80144ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80144b2:	68a3      	ldr	r3, [r4, #8]
 80144b4:	4607      	mov	r7, r0
 80144b6:	4691      	mov	r9, r2
 80144b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80144bc:	f108 0601 	add.w	r6, r8, #1
 80144c0:	42b3      	cmp	r3, r6
 80144c2:	db0b      	blt.n	80144dc <__lshift+0x38>
 80144c4:	4638      	mov	r0, r7
 80144c6:	f7ff fddb 	bl	8014080 <_Balloc>
 80144ca:	4605      	mov	r5, r0
 80144cc:	b948      	cbnz	r0, 80144e2 <__lshift+0x3e>
 80144ce:	4602      	mov	r2, r0
 80144d0:	4b2a      	ldr	r3, [pc, #168]	; (801457c <__lshift+0xd8>)
 80144d2:	482b      	ldr	r0, [pc, #172]	; (8014580 <__lshift+0xdc>)
 80144d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80144d8:	f000 fad8 	bl	8014a8c <__assert_func>
 80144dc:	3101      	adds	r1, #1
 80144de:	005b      	lsls	r3, r3, #1
 80144e0:	e7ee      	b.n	80144c0 <__lshift+0x1c>
 80144e2:	2300      	movs	r3, #0
 80144e4:	f100 0114 	add.w	r1, r0, #20
 80144e8:	f100 0210 	add.w	r2, r0, #16
 80144ec:	4618      	mov	r0, r3
 80144ee:	4553      	cmp	r3, sl
 80144f0:	db37      	blt.n	8014562 <__lshift+0xbe>
 80144f2:	6920      	ldr	r0, [r4, #16]
 80144f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80144f8:	f104 0314 	add.w	r3, r4, #20
 80144fc:	f019 091f 	ands.w	r9, r9, #31
 8014500:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014504:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014508:	d02f      	beq.n	801456a <__lshift+0xc6>
 801450a:	f1c9 0e20 	rsb	lr, r9, #32
 801450e:	468a      	mov	sl, r1
 8014510:	f04f 0c00 	mov.w	ip, #0
 8014514:	681a      	ldr	r2, [r3, #0]
 8014516:	fa02 f209 	lsl.w	r2, r2, r9
 801451a:	ea42 020c 	orr.w	r2, r2, ip
 801451e:	f84a 2b04 	str.w	r2, [sl], #4
 8014522:	f853 2b04 	ldr.w	r2, [r3], #4
 8014526:	4298      	cmp	r0, r3
 8014528:	fa22 fc0e 	lsr.w	ip, r2, lr
 801452c:	d8f2      	bhi.n	8014514 <__lshift+0x70>
 801452e:	1b03      	subs	r3, r0, r4
 8014530:	3b15      	subs	r3, #21
 8014532:	f023 0303 	bic.w	r3, r3, #3
 8014536:	3304      	adds	r3, #4
 8014538:	f104 0215 	add.w	r2, r4, #21
 801453c:	4290      	cmp	r0, r2
 801453e:	bf38      	it	cc
 8014540:	2304      	movcc	r3, #4
 8014542:	f841 c003 	str.w	ip, [r1, r3]
 8014546:	f1bc 0f00 	cmp.w	ip, #0
 801454a:	d001      	beq.n	8014550 <__lshift+0xac>
 801454c:	f108 0602 	add.w	r6, r8, #2
 8014550:	3e01      	subs	r6, #1
 8014552:	4638      	mov	r0, r7
 8014554:	612e      	str	r6, [r5, #16]
 8014556:	4621      	mov	r1, r4
 8014558:	f7ff fdd2 	bl	8014100 <_Bfree>
 801455c:	4628      	mov	r0, r5
 801455e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014562:	f842 0f04 	str.w	r0, [r2, #4]!
 8014566:	3301      	adds	r3, #1
 8014568:	e7c1      	b.n	80144ee <__lshift+0x4a>
 801456a:	3904      	subs	r1, #4
 801456c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014570:	f841 2f04 	str.w	r2, [r1, #4]!
 8014574:	4298      	cmp	r0, r3
 8014576:	d8f9      	bhi.n	801456c <__lshift+0xc8>
 8014578:	e7ea      	b.n	8014550 <__lshift+0xac>
 801457a:	bf00      	nop
 801457c:	0801528b 	.word	0x0801528b
 8014580:	0801529c 	.word	0x0801529c

08014584 <__mcmp>:
 8014584:	b530      	push	{r4, r5, lr}
 8014586:	6902      	ldr	r2, [r0, #16]
 8014588:	690c      	ldr	r4, [r1, #16]
 801458a:	1b12      	subs	r2, r2, r4
 801458c:	d10e      	bne.n	80145ac <__mcmp+0x28>
 801458e:	f100 0314 	add.w	r3, r0, #20
 8014592:	3114      	adds	r1, #20
 8014594:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014598:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801459c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80145a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80145a4:	42a5      	cmp	r5, r4
 80145a6:	d003      	beq.n	80145b0 <__mcmp+0x2c>
 80145a8:	d305      	bcc.n	80145b6 <__mcmp+0x32>
 80145aa:	2201      	movs	r2, #1
 80145ac:	4610      	mov	r0, r2
 80145ae:	bd30      	pop	{r4, r5, pc}
 80145b0:	4283      	cmp	r3, r0
 80145b2:	d3f3      	bcc.n	801459c <__mcmp+0x18>
 80145b4:	e7fa      	b.n	80145ac <__mcmp+0x28>
 80145b6:	f04f 32ff 	mov.w	r2, #4294967295
 80145ba:	e7f7      	b.n	80145ac <__mcmp+0x28>

080145bc <__mdiff>:
 80145bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145c0:	460c      	mov	r4, r1
 80145c2:	4606      	mov	r6, r0
 80145c4:	4611      	mov	r1, r2
 80145c6:	4620      	mov	r0, r4
 80145c8:	4690      	mov	r8, r2
 80145ca:	f7ff ffdb 	bl	8014584 <__mcmp>
 80145ce:	1e05      	subs	r5, r0, #0
 80145d0:	d110      	bne.n	80145f4 <__mdiff+0x38>
 80145d2:	4629      	mov	r1, r5
 80145d4:	4630      	mov	r0, r6
 80145d6:	f7ff fd53 	bl	8014080 <_Balloc>
 80145da:	b930      	cbnz	r0, 80145ea <__mdiff+0x2e>
 80145dc:	4b3a      	ldr	r3, [pc, #232]	; (80146c8 <__mdiff+0x10c>)
 80145de:	4602      	mov	r2, r0
 80145e0:	f240 2132 	movw	r1, #562	; 0x232
 80145e4:	4839      	ldr	r0, [pc, #228]	; (80146cc <__mdiff+0x110>)
 80145e6:	f000 fa51 	bl	8014a8c <__assert_func>
 80145ea:	2301      	movs	r3, #1
 80145ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80145f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145f4:	bfa4      	itt	ge
 80145f6:	4643      	movge	r3, r8
 80145f8:	46a0      	movge	r8, r4
 80145fa:	4630      	mov	r0, r6
 80145fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014600:	bfa6      	itte	ge
 8014602:	461c      	movge	r4, r3
 8014604:	2500      	movge	r5, #0
 8014606:	2501      	movlt	r5, #1
 8014608:	f7ff fd3a 	bl	8014080 <_Balloc>
 801460c:	b920      	cbnz	r0, 8014618 <__mdiff+0x5c>
 801460e:	4b2e      	ldr	r3, [pc, #184]	; (80146c8 <__mdiff+0x10c>)
 8014610:	4602      	mov	r2, r0
 8014612:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014616:	e7e5      	b.n	80145e4 <__mdiff+0x28>
 8014618:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801461c:	6926      	ldr	r6, [r4, #16]
 801461e:	60c5      	str	r5, [r0, #12]
 8014620:	f104 0914 	add.w	r9, r4, #20
 8014624:	f108 0514 	add.w	r5, r8, #20
 8014628:	f100 0e14 	add.w	lr, r0, #20
 801462c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014630:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014634:	f108 0210 	add.w	r2, r8, #16
 8014638:	46f2      	mov	sl, lr
 801463a:	2100      	movs	r1, #0
 801463c:	f859 3b04 	ldr.w	r3, [r9], #4
 8014640:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014644:	fa1f f883 	uxth.w	r8, r3
 8014648:	fa11 f18b 	uxtah	r1, r1, fp
 801464c:	0c1b      	lsrs	r3, r3, #16
 801464e:	eba1 0808 	sub.w	r8, r1, r8
 8014652:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014656:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801465a:	fa1f f888 	uxth.w	r8, r8
 801465e:	1419      	asrs	r1, r3, #16
 8014660:	454e      	cmp	r6, r9
 8014662:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014666:	f84a 3b04 	str.w	r3, [sl], #4
 801466a:	d8e7      	bhi.n	801463c <__mdiff+0x80>
 801466c:	1b33      	subs	r3, r6, r4
 801466e:	3b15      	subs	r3, #21
 8014670:	f023 0303 	bic.w	r3, r3, #3
 8014674:	3304      	adds	r3, #4
 8014676:	3415      	adds	r4, #21
 8014678:	42a6      	cmp	r6, r4
 801467a:	bf38      	it	cc
 801467c:	2304      	movcc	r3, #4
 801467e:	441d      	add	r5, r3
 8014680:	4473      	add	r3, lr
 8014682:	469e      	mov	lr, r3
 8014684:	462e      	mov	r6, r5
 8014686:	4566      	cmp	r6, ip
 8014688:	d30e      	bcc.n	80146a8 <__mdiff+0xec>
 801468a:	f10c 0203 	add.w	r2, ip, #3
 801468e:	1b52      	subs	r2, r2, r5
 8014690:	f022 0203 	bic.w	r2, r2, #3
 8014694:	3d03      	subs	r5, #3
 8014696:	45ac      	cmp	ip, r5
 8014698:	bf38      	it	cc
 801469a:	2200      	movcc	r2, #0
 801469c:	441a      	add	r2, r3
 801469e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80146a2:	b17b      	cbz	r3, 80146c4 <__mdiff+0x108>
 80146a4:	6107      	str	r7, [r0, #16]
 80146a6:	e7a3      	b.n	80145f0 <__mdiff+0x34>
 80146a8:	f856 8b04 	ldr.w	r8, [r6], #4
 80146ac:	fa11 f288 	uxtah	r2, r1, r8
 80146b0:	1414      	asrs	r4, r2, #16
 80146b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80146b6:	b292      	uxth	r2, r2
 80146b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80146bc:	f84e 2b04 	str.w	r2, [lr], #4
 80146c0:	1421      	asrs	r1, r4, #16
 80146c2:	e7e0      	b.n	8014686 <__mdiff+0xca>
 80146c4:	3f01      	subs	r7, #1
 80146c6:	e7ea      	b.n	801469e <__mdiff+0xe2>
 80146c8:	0801528b 	.word	0x0801528b
 80146cc:	0801529c 	.word	0x0801529c

080146d0 <__d2b>:
 80146d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80146d4:	4689      	mov	r9, r1
 80146d6:	2101      	movs	r1, #1
 80146d8:	ec57 6b10 	vmov	r6, r7, d0
 80146dc:	4690      	mov	r8, r2
 80146de:	f7ff fccf 	bl	8014080 <_Balloc>
 80146e2:	4604      	mov	r4, r0
 80146e4:	b930      	cbnz	r0, 80146f4 <__d2b+0x24>
 80146e6:	4602      	mov	r2, r0
 80146e8:	4b25      	ldr	r3, [pc, #148]	; (8014780 <__d2b+0xb0>)
 80146ea:	4826      	ldr	r0, [pc, #152]	; (8014784 <__d2b+0xb4>)
 80146ec:	f240 310a 	movw	r1, #778	; 0x30a
 80146f0:	f000 f9cc 	bl	8014a8c <__assert_func>
 80146f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80146f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80146fc:	bb35      	cbnz	r5, 801474c <__d2b+0x7c>
 80146fe:	2e00      	cmp	r6, #0
 8014700:	9301      	str	r3, [sp, #4]
 8014702:	d028      	beq.n	8014756 <__d2b+0x86>
 8014704:	4668      	mov	r0, sp
 8014706:	9600      	str	r6, [sp, #0]
 8014708:	f7ff fd82 	bl	8014210 <__lo0bits>
 801470c:	9900      	ldr	r1, [sp, #0]
 801470e:	b300      	cbz	r0, 8014752 <__d2b+0x82>
 8014710:	9a01      	ldr	r2, [sp, #4]
 8014712:	f1c0 0320 	rsb	r3, r0, #32
 8014716:	fa02 f303 	lsl.w	r3, r2, r3
 801471a:	430b      	orrs	r3, r1
 801471c:	40c2      	lsrs	r2, r0
 801471e:	6163      	str	r3, [r4, #20]
 8014720:	9201      	str	r2, [sp, #4]
 8014722:	9b01      	ldr	r3, [sp, #4]
 8014724:	61a3      	str	r3, [r4, #24]
 8014726:	2b00      	cmp	r3, #0
 8014728:	bf14      	ite	ne
 801472a:	2202      	movne	r2, #2
 801472c:	2201      	moveq	r2, #1
 801472e:	6122      	str	r2, [r4, #16]
 8014730:	b1d5      	cbz	r5, 8014768 <__d2b+0x98>
 8014732:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014736:	4405      	add	r5, r0
 8014738:	f8c9 5000 	str.w	r5, [r9]
 801473c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014740:	f8c8 0000 	str.w	r0, [r8]
 8014744:	4620      	mov	r0, r4
 8014746:	b003      	add	sp, #12
 8014748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801474c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014750:	e7d5      	b.n	80146fe <__d2b+0x2e>
 8014752:	6161      	str	r1, [r4, #20]
 8014754:	e7e5      	b.n	8014722 <__d2b+0x52>
 8014756:	a801      	add	r0, sp, #4
 8014758:	f7ff fd5a 	bl	8014210 <__lo0bits>
 801475c:	9b01      	ldr	r3, [sp, #4]
 801475e:	6163      	str	r3, [r4, #20]
 8014760:	2201      	movs	r2, #1
 8014762:	6122      	str	r2, [r4, #16]
 8014764:	3020      	adds	r0, #32
 8014766:	e7e3      	b.n	8014730 <__d2b+0x60>
 8014768:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801476c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014770:	f8c9 0000 	str.w	r0, [r9]
 8014774:	6918      	ldr	r0, [r3, #16]
 8014776:	f7ff fd2b 	bl	80141d0 <__hi0bits>
 801477a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801477e:	e7df      	b.n	8014740 <__d2b+0x70>
 8014780:	0801528b 	.word	0x0801528b
 8014784:	0801529c 	.word	0x0801529c

08014788 <_calloc_r>:
 8014788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801478a:	fba1 2402 	umull	r2, r4, r1, r2
 801478e:	b94c      	cbnz	r4, 80147a4 <_calloc_r+0x1c>
 8014790:	4611      	mov	r1, r2
 8014792:	9201      	str	r2, [sp, #4]
 8014794:	f7fd fd8c 	bl	80122b0 <_malloc_r>
 8014798:	9a01      	ldr	r2, [sp, #4]
 801479a:	4605      	mov	r5, r0
 801479c:	b930      	cbnz	r0, 80147ac <_calloc_r+0x24>
 801479e:	4628      	mov	r0, r5
 80147a0:	b003      	add	sp, #12
 80147a2:	bd30      	pop	{r4, r5, pc}
 80147a4:	220c      	movs	r2, #12
 80147a6:	6002      	str	r2, [r0, #0]
 80147a8:	2500      	movs	r5, #0
 80147aa:	e7f8      	b.n	801479e <_calloc_r+0x16>
 80147ac:	4621      	mov	r1, r4
 80147ae:	f7fd fd0b 	bl	80121c8 <memset>
 80147b2:	e7f4      	b.n	801479e <_calloc_r+0x16>

080147b4 <__sfputc_r>:
 80147b4:	6893      	ldr	r3, [r2, #8]
 80147b6:	3b01      	subs	r3, #1
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	b410      	push	{r4}
 80147bc:	6093      	str	r3, [r2, #8]
 80147be:	da08      	bge.n	80147d2 <__sfputc_r+0x1e>
 80147c0:	6994      	ldr	r4, [r2, #24]
 80147c2:	42a3      	cmp	r3, r4
 80147c4:	db01      	blt.n	80147ca <__sfputc_r+0x16>
 80147c6:	290a      	cmp	r1, #10
 80147c8:	d103      	bne.n	80147d2 <__sfputc_r+0x1e>
 80147ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147ce:	f7fe bbb1 	b.w	8012f34 <__swbuf_r>
 80147d2:	6813      	ldr	r3, [r2, #0]
 80147d4:	1c58      	adds	r0, r3, #1
 80147d6:	6010      	str	r0, [r2, #0]
 80147d8:	7019      	strb	r1, [r3, #0]
 80147da:	4608      	mov	r0, r1
 80147dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147e0:	4770      	bx	lr

080147e2 <__sfputs_r>:
 80147e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147e4:	4606      	mov	r6, r0
 80147e6:	460f      	mov	r7, r1
 80147e8:	4614      	mov	r4, r2
 80147ea:	18d5      	adds	r5, r2, r3
 80147ec:	42ac      	cmp	r4, r5
 80147ee:	d101      	bne.n	80147f4 <__sfputs_r+0x12>
 80147f0:	2000      	movs	r0, #0
 80147f2:	e007      	b.n	8014804 <__sfputs_r+0x22>
 80147f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147f8:	463a      	mov	r2, r7
 80147fa:	4630      	mov	r0, r6
 80147fc:	f7ff ffda 	bl	80147b4 <__sfputc_r>
 8014800:	1c43      	adds	r3, r0, #1
 8014802:	d1f3      	bne.n	80147ec <__sfputs_r+0xa>
 8014804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014808 <_vfiprintf_r>:
 8014808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801480c:	460d      	mov	r5, r1
 801480e:	b09d      	sub	sp, #116	; 0x74
 8014810:	4614      	mov	r4, r2
 8014812:	4698      	mov	r8, r3
 8014814:	4606      	mov	r6, r0
 8014816:	b118      	cbz	r0, 8014820 <_vfiprintf_r+0x18>
 8014818:	6983      	ldr	r3, [r0, #24]
 801481a:	b90b      	cbnz	r3, 8014820 <_vfiprintf_r+0x18>
 801481c:	f7fd fbfc 	bl	8012018 <__sinit>
 8014820:	4b89      	ldr	r3, [pc, #548]	; (8014a48 <_vfiprintf_r+0x240>)
 8014822:	429d      	cmp	r5, r3
 8014824:	d11b      	bne.n	801485e <_vfiprintf_r+0x56>
 8014826:	6875      	ldr	r5, [r6, #4]
 8014828:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801482a:	07d9      	lsls	r1, r3, #31
 801482c:	d405      	bmi.n	801483a <_vfiprintf_r+0x32>
 801482e:	89ab      	ldrh	r3, [r5, #12]
 8014830:	059a      	lsls	r2, r3, #22
 8014832:	d402      	bmi.n	801483a <_vfiprintf_r+0x32>
 8014834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014836:	f7ee fb49 	bl	8002ecc <__retarget_lock_acquire_recursive>
 801483a:	89ab      	ldrh	r3, [r5, #12]
 801483c:	071b      	lsls	r3, r3, #28
 801483e:	d501      	bpl.n	8014844 <_vfiprintf_r+0x3c>
 8014840:	692b      	ldr	r3, [r5, #16]
 8014842:	b9eb      	cbnz	r3, 8014880 <_vfiprintf_r+0x78>
 8014844:	4629      	mov	r1, r5
 8014846:	4630      	mov	r0, r6
 8014848:	f7fe fbd8 	bl	8012ffc <__swsetup_r>
 801484c:	b1c0      	cbz	r0, 8014880 <_vfiprintf_r+0x78>
 801484e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014850:	07dc      	lsls	r4, r3, #31
 8014852:	d50e      	bpl.n	8014872 <_vfiprintf_r+0x6a>
 8014854:	f04f 30ff 	mov.w	r0, #4294967295
 8014858:	b01d      	add	sp, #116	; 0x74
 801485a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801485e:	4b7b      	ldr	r3, [pc, #492]	; (8014a4c <_vfiprintf_r+0x244>)
 8014860:	429d      	cmp	r5, r3
 8014862:	d101      	bne.n	8014868 <_vfiprintf_r+0x60>
 8014864:	68b5      	ldr	r5, [r6, #8]
 8014866:	e7df      	b.n	8014828 <_vfiprintf_r+0x20>
 8014868:	4b79      	ldr	r3, [pc, #484]	; (8014a50 <_vfiprintf_r+0x248>)
 801486a:	429d      	cmp	r5, r3
 801486c:	bf08      	it	eq
 801486e:	68f5      	ldreq	r5, [r6, #12]
 8014870:	e7da      	b.n	8014828 <_vfiprintf_r+0x20>
 8014872:	89ab      	ldrh	r3, [r5, #12]
 8014874:	0598      	lsls	r0, r3, #22
 8014876:	d4ed      	bmi.n	8014854 <_vfiprintf_r+0x4c>
 8014878:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801487a:	f7ee fb3b 	bl	8002ef4 <__retarget_lock_release_recursive>
 801487e:	e7e9      	b.n	8014854 <_vfiprintf_r+0x4c>
 8014880:	2300      	movs	r3, #0
 8014882:	9309      	str	r3, [sp, #36]	; 0x24
 8014884:	2320      	movs	r3, #32
 8014886:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801488a:	f8cd 800c 	str.w	r8, [sp, #12]
 801488e:	2330      	movs	r3, #48	; 0x30
 8014890:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014a54 <_vfiprintf_r+0x24c>
 8014894:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014898:	f04f 0901 	mov.w	r9, #1
 801489c:	4623      	mov	r3, r4
 801489e:	469a      	mov	sl, r3
 80148a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80148a4:	b10a      	cbz	r2, 80148aa <_vfiprintf_r+0xa2>
 80148a6:	2a25      	cmp	r2, #37	; 0x25
 80148a8:	d1f9      	bne.n	801489e <_vfiprintf_r+0x96>
 80148aa:	ebba 0b04 	subs.w	fp, sl, r4
 80148ae:	d00b      	beq.n	80148c8 <_vfiprintf_r+0xc0>
 80148b0:	465b      	mov	r3, fp
 80148b2:	4622      	mov	r2, r4
 80148b4:	4629      	mov	r1, r5
 80148b6:	4630      	mov	r0, r6
 80148b8:	f7ff ff93 	bl	80147e2 <__sfputs_r>
 80148bc:	3001      	adds	r0, #1
 80148be:	f000 80aa 	beq.w	8014a16 <_vfiprintf_r+0x20e>
 80148c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80148c4:	445a      	add	r2, fp
 80148c6:	9209      	str	r2, [sp, #36]	; 0x24
 80148c8:	f89a 3000 	ldrb.w	r3, [sl]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	f000 80a2 	beq.w	8014a16 <_vfiprintf_r+0x20e>
 80148d2:	2300      	movs	r3, #0
 80148d4:	f04f 32ff 	mov.w	r2, #4294967295
 80148d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80148dc:	f10a 0a01 	add.w	sl, sl, #1
 80148e0:	9304      	str	r3, [sp, #16]
 80148e2:	9307      	str	r3, [sp, #28]
 80148e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80148e8:	931a      	str	r3, [sp, #104]	; 0x68
 80148ea:	4654      	mov	r4, sl
 80148ec:	2205      	movs	r2, #5
 80148ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148f2:	4858      	ldr	r0, [pc, #352]	; (8014a54 <_vfiprintf_r+0x24c>)
 80148f4:	f7eb fc94 	bl	8000220 <memchr>
 80148f8:	9a04      	ldr	r2, [sp, #16]
 80148fa:	b9d8      	cbnz	r0, 8014934 <_vfiprintf_r+0x12c>
 80148fc:	06d1      	lsls	r1, r2, #27
 80148fe:	bf44      	itt	mi
 8014900:	2320      	movmi	r3, #32
 8014902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014906:	0713      	lsls	r3, r2, #28
 8014908:	bf44      	itt	mi
 801490a:	232b      	movmi	r3, #43	; 0x2b
 801490c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014910:	f89a 3000 	ldrb.w	r3, [sl]
 8014914:	2b2a      	cmp	r3, #42	; 0x2a
 8014916:	d015      	beq.n	8014944 <_vfiprintf_r+0x13c>
 8014918:	9a07      	ldr	r2, [sp, #28]
 801491a:	4654      	mov	r4, sl
 801491c:	2000      	movs	r0, #0
 801491e:	f04f 0c0a 	mov.w	ip, #10
 8014922:	4621      	mov	r1, r4
 8014924:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014928:	3b30      	subs	r3, #48	; 0x30
 801492a:	2b09      	cmp	r3, #9
 801492c:	d94e      	bls.n	80149cc <_vfiprintf_r+0x1c4>
 801492e:	b1b0      	cbz	r0, 801495e <_vfiprintf_r+0x156>
 8014930:	9207      	str	r2, [sp, #28]
 8014932:	e014      	b.n	801495e <_vfiprintf_r+0x156>
 8014934:	eba0 0308 	sub.w	r3, r0, r8
 8014938:	fa09 f303 	lsl.w	r3, r9, r3
 801493c:	4313      	orrs	r3, r2
 801493e:	9304      	str	r3, [sp, #16]
 8014940:	46a2      	mov	sl, r4
 8014942:	e7d2      	b.n	80148ea <_vfiprintf_r+0xe2>
 8014944:	9b03      	ldr	r3, [sp, #12]
 8014946:	1d19      	adds	r1, r3, #4
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	9103      	str	r1, [sp, #12]
 801494c:	2b00      	cmp	r3, #0
 801494e:	bfbb      	ittet	lt
 8014950:	425b      	neglt	r3, r3
 8014952:	f042 0202 	orrlt.w	r2, r2, #2
 8014956:	9307      	strge	r3, [sp, #28]
 8014958:	9307      	strlt	r3, [sp, #28]
 801495a:	bfb8      	it	lt
 801495c:	9204      	strlt	r2, [sp, #16]
 801495e:	7823      	ldrb	r3, [r4, #0]
 8014960:	2b2e      	cmp	r3, #46	; 0x2e
 8014962:	d10c      	bne.n	801497e <_vfiprintf_r+0x176>
 8014964:	7863      	ldrb	r3, [r4, #1]
 8014966:	2b2a      	cmp	r3, #42	; 0x2a
 8014968:	d135      	bne.n	80149d6 <_vfiprintf_r+0x1ce>
 801496a:	9b03      	ldr	r3, [sp, #12]
 801496c:	1d1a      	adds	r2, r3, #4
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	9203      	str	r2, [sp, #12]
 8014972:	2b00      	cmp	r3, #0
 8014974:	bfb8      	it	lt
 8014976:	f04f 33ff 	movlt.w	r3, #4294967295
 801497a:	3402      	adds	r4, #2
 801497c:	9305      	str	r3, [sp, #20]
 801497e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014a64 <_vfiprintf_r+0x25c>
 8014982:	7821      	ldrb	r1, [r4, #0]
 8014984:	2203      	movs	r2, #3
 8014986:	4650      	mov	r0, sl
 8014988:	f7eb fc4a 	bl	8000220 <memchr>
 801498c:	b140      	cbz	r0, 80149a0 <_vfiprintf_r+0x198>
 801498e:	2340      	movs	r3, #64	; 0x40
 8014990:	eba0 000a 	sub.w	r0, r0, sl
 8014994:	fa03 f000 	lsl.w	r0, r3, r0
 8014998:	9b04      	ldr	r3, [sp, #16]
 801499a:	4303      	orrs	r3, r0
 801499c:	3401      	adds	r4, #1
 801499e:	9304      	str	r3, [sp, #16]
 80149a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149a4:	482c      	ldr	r0, [pc, #176]	; (8014a58 <_vfiprintf_r+0x250>)
 80149a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80149aa:	2206      	movs	r2, #6
 80149ac:	f7eb fc38 	bl	8000220 <memchr>
 80149b0:	2800      	cmp	r0, #0
 80149b2:	d03f      	beq.n	8014a34 <_vfiprintf_r+0x22c>
 80149b4:	4b29      	ldr	r3, [pc, #164]	; (8014a5c <_vfiprintf_r+0x254>)
 80149b6:	bb1b      	cbnz	r3, 8014a00 <_vfiprintf_r+0x1f8>
 80149b8:	9b03      	ldr	r3, [sp, #12]
 80149ba:	3307      	adds	r3, #7
 80149bc:	f023 0307 	bic.w	r3, r3, #7
 80149c0:	3308      	adds	r3, #8
 80149c2:	9303      	str	r3, [sp, #12]
 80149c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149c6:	443b      	add	r3, r7
 80149c8:	9309      	str	r3, [sp, #36]	; 0x24
 80149ca:	e767      	b.n	801489c <_vfiprintf_r+0x94>
 80149cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80149d0:	460c      	mov	r4, r1
 80149d2:	2001      	movs	r0, #1
 80149d4:	e7a5      	b.n	8014922 <_vfiprintf_r+0x11a>
 80149d6:	2300      	movs	r3, #0
 80149d8:	3401      	adds	r4, #1
 80149da:	9305      	str	r3, [sp, #20]
 80149dc:	4619      	mov	r1, r3
 80149de:	f04f 0c0a 	mov.w	ip, #10
 80149e2:	4620      	mov	r0, r4
 80149e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80149e8:	3a30      	subs	r2, #48	; 0x30
 80149ea:	2a09      	cmp	r2, #9
 80149ec:	d903      	bls.n	80149f6 <_vfiprintf_r+0x1ee>
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d0c5      	beq.n	801497e <_vfiprintf_r+0x176>
 80149f2:	9105      	str	r1, [sp, #20]
 80149f4:	e7c3      	b.n	801497e <_vfiprintf_r+0x176>
 80149f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80149fa:	4604      	mov	r4, r0
 80149fc:	2301      	movs	r3, #1
 80149fe:	e7f0      	b.n	80149e2 <_vfiprintf_r+0x1da>
 8014a00:	ab03      	add	r3, sp, #12
 8014a02:	9300      	str	r3, [sp, #0]
 8014a04:	462a      	mov	r2, r5
 8014a06:	4b16      	ldr	r3, [pc, #88]	; (8014a60 <_vfiprintf_r+0x258>)
 8014a08:	a904      	add	r1, sp, #16
 8014a0a:	4630      	mov	r0, r6
 8014a0c:	f7fd fd64 	bl	80124d8 <_printf_float>
 8014a10:	4607      	mov	r7, r0
 8014a12:	1c78      	adds	r0, r7, #1
 8014a14:	d1d6      	bne.n	80149c4 <_vfiprintf_r+0x1bc>
 8014a16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a18:	07d9      	lsls	r1, r3, #31
 8014a1a:	d405      	bmi.n	8014a28 <_vfiprintf_r+0x220>
 8014a1c:	89ab      	ldrh	r3, [r5, #12]
 8014a1e:	059a      	lsls	r2, r3, #22
 8014a20:	d402      	bmi.n	8014a28 <_vfiprintf_r+0x220>
 8014a22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a24:	f7ee fa66 	bl	8002ef4 <__retarget_lock_release_recursive>
 8014a28:	89ab      	ldrh	r3, [r5, #12]
 8014a2a:	065b      	lsls	r3, r3, #25
 8014a2c:	f53f af12 	bmi.w	8014854 <_vfiprintf_r+0x4c>
 8014a30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a32:	e711      	b.n	8014858 <_vfiprintf_r+0x50>
 8014a34:	ab03      	add	r3, sp, #12
 8014a36:	9300      	str	r3, [sp, #0]
 8014a38:	462a      	mov	r2, r5
 8014a3a:	4b09      	ldr	r3, [pc, #36]	; (8014a60 <_vfiprintf_r+0x258>)
 8014a3c:	a904      	add	r1, sp, #16
 8014a3e:	4630      	mov	r0, r6
 8014a40:	f7fd ffee 	bl	8012a20 <_printf_i>
 8014a44:	e7e4      	b.n	8014a10 <_vfiprintf_r+0x208>
 8014a46:	bf00      	nop
 8014a48:	08015194 	.word	0x08015194
 8014a4c:	080151b4 	.word	0x080151b4
 8014a50:	08015174 	.word	0x08015174
 8014a54:	080153f4 	.word	0x080153f4
 8014a58:	080153fe 	.word	0x080153fe
 8014a5c:	080124d9 	.word	0x080124d9
 8014a60:	080147e3 	.word	0x080147e3
 8014a64:	080153fa 	.word	0x080153fa

08014a68 <_read_r>:
 8014a68:	b538      	push	{r3, r4, r5, lr}
 8014a6a:	4d07      	ldr	r5, [pc, #28]	; (8014a88 <_read_r+0x20>)
 8014a6c:	4604      	mov	r4, r0
 8014a6e:	4608      	mov	r0, r1
 8014a70:	4611      	mov	r1, r2
 8014a72:	2200      	movs	r2, #0
 8014a74:	602a      	str	r2, [r5, #0]
 8014a76:	461a      	mov	r2, r3
 8014a78:	f7ed f816 	bl	8001aa8 <_read>
 8014a7c:	1c43      	adds	r3, r0, #1
 8014a7e:	d102      	bne.n	8014a86 <_read_r+0x1e>
 8014a80:	682b      	ldr	r3, [r5, #0]
 8014a82:	b103      	cbz	r3, 8014a86 <_read_r+0x1e>
 8014a84:	6023      	str	r3, [r4, #0]
 8014a86:	bd38      	pop	{r3, r4, r5, pc}
 8014a88:	20006ca8 	.word	0x20006ca8

08014a8c <__assert_func>:
 8014a8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014a8e:	4614      	mov	r4, r2
 8014a90:	461a      	mov	r2, r3
 8014a92:	4b09      	ldr	r3, [pc, #36]	; (8014ab8 <__assert_func+0x2c>)
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	4605      	mov	r5, r0
 8014a98:	68d8      	ldr	r0, [r3, #12]
 8014a9a:	b14c      	cbz	r4, 8014ab0 <__assert_func+0x24>
 8014a9c:	4b07      	ldr	r3, [pc, #28]	; (8014abc <__assert_func+0x30>)
 8014a9e:	9100      	str	r1, [sp, #0]
 8014aa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014aa4:	4906      	ldr	r1, [pc, #24]	; (8014ac0 <__assert_func+0x34>)
 8014aa6:	462b      	mov	r3, r5
 8014aa8:	f000 f80e 	bl	8014ac8 <fiprintf>
 8014aac:	f000 f85f 	bl	8014b6e <abort>
 8014ab0:	4b04      	ldr	r3, [pc, #16]	; (8014ac4 <__assert_func+0x38>)
 8014ab2:	461c      	mov	r4, r3
 8014ab4:	e7f3      	b.n	8014a9e <__assert_func+0x12>
 8014ab6:	bf00      	nop
 8014ab8:	20000124 	.word	0x20000124
 8014abc:	08015405 	.word	0x08015405
 8014ac0:	08015412 	.word	0x08015412
 8014ac4:	08015440 	.word	0x08015440

08014ac8 <fiprintf>:
 8014ac8:	b40e      	push	{r1, r2, r3}
 8014aca:	b503      	push	{r0, r1, lr}
 8014acc:	4601      	mov	r1, r0
 8014ace:	ab03      	add	r3, sp, #12
 8014ad0:	4805      	ldr	r0, [pc, #20]	; (8014ae8 <fiprintf+0x20>)
 8014ad2:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ad6:	6800      	ldr	r0, [r0, #0]
 8014ad8:	9301      	str	r3, [sp, #4]
 8014ada:	f7ff fe95 	bl	8014808 <_vfiprintf_r>
 8014ade:	b002      	add	sp, #8
 8014ae0:	f85d eb04 	ldr.w	lr, [sp], #4
 8014ae4:	b003      	add	sp, #12
 8014ae6:	4770      	bx	lr
 8014ae8:	20000124 	.word	0x20000124

08014aec <_fstat_r>:
 8014aec:	b538      	push	{r3, r4, r5, lr}
 8014aee:	4d07      	ldr	r5, [pc, #28]	; (8014b0c <_fstat_r+0x20>)
 8014af0:	2300      	movs	r3, #0
 8014af2:	4604      	mov	r4, r0
 8014af4:	4608      	mov	r0, r1
 8014af6:	4611      	mov	r1, r2
 8014af8:	602b      	str	r3, [r5, #0]
 8014afa:	f7ec fffe 	bl	8001afa <_fstat>
 8014afe:	1c43      	adds	r3, r0, #1
 8014b00:	d102      	bne.n	8014b08 <_fstat_r+0x1c>
 8014b02:	682b      	ldr	r3, [r5, #0]
 8014b04:	b103      	cbz	r3, 8014b08 <_fstat_r+0x1c>
 8014b06:	6023      	str	r3, [r4, #0]
 8014b08:	bd38      	pop	{r3, r4, r5, pc}
 8014b0a:	bf00      	nop
 8014b0c:	20006ca8 	.word	0x20006ca8

08014b10 <_isatty_r>:
 8014b10:	b538      	push	{r3, r4, r5, lr}
 8014b12:	4d06      	ldr	r5, [pc, #24]	; (8014b2c <_isatty_r+0x1c>)
 8014b14:	2300      	movs	r3, #0
 8014b16:	4604      	mov	r4, r0
 8014b18:	4608      	mov	r0, r1
 8014b1a:	602b      	str	r3, [r5, #0]
 8014b1c:	f7ec fffd 	bl	8001b1a <_isatty>
 8014b20:	1c43      	adds	r3, r0, #1
 8014b22:	d102      	bne.n	8014b2a <_isatty_r+0x1a>
 8014b24:	682b      	ldr	r3, [r5, #0]
 8014b26:	b103      	cbz	r3, 8014b2a <_isatty_r+0x1a>
 8014b28:	6023      	str	r3, [r4, #0]
 8014b2a:	bd38      	pop	{r3, r4, r5, pc}
 8014b2c:	20006ca8 	.word	0x20006ca8

08014b30 <__ascii_mbtowc>:
 8014b30:	b082      	sub	sp, #8
 8014b32:	b901      	cbnz	r1, 8014b36 <__ascii_mbtowc+0x6>
 8014b34:	a901      	add	r1, sp, #4
 8014b36:	b142      	cbz	r2, 8014b4a <__ascii_mbtowc+0x1a>
 8014b38:	b14b      	cbz	r3, 8014b4e <__ascii_mbtowc+0x1e>
 8014b3a:	7813      	ldrb	r3, [r2, #0]
 8014b3c:	600b      	str	r3, [r1, #0]
 8014b3e:	7812      	ldrb	r2, [r2, #0]
 8014b40:	1e10      	subs	r0, r2, #0
 8014b42:	bf18      	it	ne
 8014b44:	2001      	movne	r0, #1
 8014b46:	b002      	add	sp, #8
 8014b48:	4770      	bx	lr
 8014b4a:	4610      	mov	r0, r2
 8014b4c:	e7fb      	b.n	8014b46 <__ascii_mbtowc+0x16>
 8014b4e:	f06f 0001 	mvn.w	r0, #1
 8014b52:	e7f8      	b.n	8014b46 <__ascii_mbtowc+0x16>

08014b54 <__ascii_wctomb>:
 8014b54:	b149      	cbz	r1, 8014b6a <__ascii_wctomb+0x16>
 8014b56:	2aff      	cmp	r2, #255	; 0xff
 8014b58:	bf85      	ittet	hi
 8014b5a:	238a      	movhi	r3, #138	; 0x8a
 8014b5c:	6003      	strhi	r3, [r0, #0]
 8014b5e:	700a      	strbls	r2, [r1, #0]
 8014b60:	f04f 30ff 	movhi.w	r0, #4294967295
 8014b64:	bf98      	it	ls
 8014b66:	2001      	movls	r0, #1
 8014b68:	4770      	bx	lr
 8014b6a:	4608      	mov	r0, r1
 8014b6c:	4770      	bx	lr

08014b6e <abort>:
 8014b6e:	b508      	push	{r3, lr}
 8014b70:	2006      	movs	r0, #6
 8014b72:	f000 f82b 	bl	8014bcc <raise>
 8014b76:	2001      	movs	r0, #1
 8014b78:	f7ec ff8c 	bl	8001a94 <_exit>

08014b7c <_raise_r>:
 8014b7c:	291f      	cmp	r1, #31
 8014b7e:	b538      	push	{r3, r4, r5, lr}
 8014b80:	4604      	mov	r4, r0
 8014b82:	460d      	mov	r5, r1
 8014b84:	d904      	bls.n	8014b90 <_raise_r+0x14>
 8014b86:	2316      	movs	r3, #22
 8014b88:	6003      	str	r3, [r0, #0]
 8014b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8014b8e:	bd38      	pop	{r3, r4, r5, pc}
 8014b90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014b92:	b112      	cbz	r2, 8014b9a <_raise_r+0x1e>
 8014b94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014b98:	b94b      	cbnz	r3, 8014bae <_raise_r+0x32>
 8014b9a:	4620      	mov	r0, r4
 8014b9c:	f000 f830 	bl	8014c00 <_getpid_r>
 8014ba0:	462a      	mov	r2, r5
 8014ba2:	4601      	mov	r1, r0
 8014ba4:	4620      	mov	r0, r4
 8014ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014baa:	f000 b817 	b.w	8014bdc <_kill_r>
 8014bae:	2b01      	cmp	r3, #1
 8014bb0:	d00a      	beq.n	8014bc8 <_raise_r+0x4c>
 8014bb2:	1c59      	adds	r1, r3, #1
 8014bb4:	d103      	bne.n	8014bbe <_raise_r+0x42>
 8014bb6:	2316      	movs	r3, #22
 8014bb8:	6003      	str	r3, [r0, #0]
 8014bba:	2001      	movs	r0, #1
 8014bbc:	e7e7      	b.n	8014b8e <_raise_r+0x12>
 8014bbe:	2400      	movs	r4, #0
 8014bc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014bc4:	4628      	mov	r0, r5
 8014bc6:	4798      	blx	r3
 8014bc8:	2000      	movs	r0, #0
 8014bca:	e7e0      	b.n	8014b8e <_raise_r+0x12>

08014bcc <raise>:
 8014bcc:	4b02      	ldr	r3, [pc, #8]	; (8014bd8 <raise+0xc>)
 8014bce:	4601      	mov	r1, r0
 8014bd0:	6818      	ldr	r0, [r3, #0]
 8014bd2:	f7ff bfd3 	b.w	8014b7c <_raise_r>
 8014bd6:	bf00      	nop
 8014bd8:	20000124 	.word	0x20000124

08014bdc <_kill_r>:
 8014bdc:	b538      	push	{r3, r4, r5, lr}
 8014bde:	4d07      	ldr	r5, [pc, #28]	; (8014bfc <_kill_r+0x20>)
 8014be0:	2300      	movs	r3, #0
 8014be2:	4604      	mov	r4, r0
 8014be4:	4608      	mov	r0, r1
 8014be6:	4611      	mov	r1, r2
 8014be8:	602b      	str	r3, [r5, #0]
 8014bea:	f7ec ff43 	bl	8001a74 <_kill>
 8014bee:	1c43      	adds	r3, r0, #1
 8014bf0:	d102      	bne.n	8014bf8 <_kill_r+0x1c>
 8014bf2:	682b      	ldr	r3, [r5, #0]
 8014bf4:	b103      	cbz	r3, 8014bf8 <_kill_r+0x1c>
 8014bf6:	6023      	str	r3, [r4, #0]
 8014bf8:	bd38      	pop	{r3, r4, r5, pc}
 8014bfa:	bf00      	nop
 8014bfc:	20006ca8 	.word	0x20006ca8

08014c00 <_getpid_r>:
 8014c00:	f7ec bf30 	b.w	8001a64 <_getpid>

08014c04 <_init>:
 8014c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c06:	bf00      	nop
 8014c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c0a:	bc08      	pop	{r3}
 8014c0c:	469e      	mov	lr, r3
 8014c0e:	4770      	bx	lr

08014c10 <_fini>:
 8014c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c12:	bf00      	nop
 8014c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c16:	bc08      	pop	{r3}
 8014c18:	469e      	mov	lr, r3
 8014c1a:	4770      	bx	lr
